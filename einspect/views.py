#API methods for Models Screen
from array import array
import email
import imp
import json
from re import A
from django.http import JsonResponse,HttpResponse,HttpResponseRedirect
from django.shortcuts import render,redirect
from django.views.decorators.csrf import csrf_exempt
import numpy as np   #csrf allows other domains to access our page
from rest_framework.parsers import JSONParser  #to pass incoming data to the models
from django.http.response import JsonResponse
from einspect import models as m2
from inspects import models as m1
from myadmin.models import * 
from django.db.models import Max
from django.db.models import Q,Func,CharField,Value,F,Count
from django.contrib import messages
from django.core.files.storage import default_storage  #to store files
from datetime import date, datetime,timedelta
from django.core.paginator import Paginator
from einspect import utils
from django.contrib.auth.decorators import login_required



# ///flutter questions
from rest_framework.response import Response
# for trainname,sectionname,departmentname
from rest_framework.decorators import api_view
from myadmin import models as myadminmodels
# FOR tables(station,foodplate...)
from django.db import connection

from inspects import views as v1

from mails import models as mm6

from django.db.models import F, Value, CharField
from django.db.models.functions import Concat

#############################################################################################################################################################
# MASTER FORM
#############################################################################################################################################################
# @login_required
# def masterTable(request):
#     if request.user.user_role == 'admin_super':
#     # dropdown lists
#         checkUser = request.user.user_role
#         result=list(inspectiontype_master.objects.filter(parent_id='-1',delete_flag=False).distinct('name').values('instypeid','name'))
#         result2=list(inspectiontype_master.objects.filter(parent_id='-1',delete_flag=False).distinct('name').values('instypeid','name'))
#         # result3=list(inspectiontype_master.objects.filter(~Q(parent_id='-1', delete_flag=True)).distinct('name').values('instypeid','name'))
#         result4=list(m2.choicetype_master.objects.values('cid','input_type'))
#         result5=list(m2.dropdown_options.objects.values('did','dmaster'))
#         result6=list(m2.radio_options.objects.values('rid','rscore','rlabel'))
#         result7=list(departMast.objects.filter(delete_flag=False).values())
#         result8=list(m2.location_master.objects.values('lid','lmaster'))
#         sub_category = list(sub_category_master.objects.filter(disable_flag = False).values().order_by('sub_category'))
#         question_sub_category = list(question_sub_category_master.objects.filter(disable_flag = False).values().order_by('sub_category'))


#         # inspection categoryt addition
#         if request.method=='POST' and request.POST.get('btnaddC1'):
#             try:
#                 temp=inspectiontype_master.objects.filter(delete_flag=False)[0]
#             except:
#                 temp=[]
#             if temp:
#                 max_id = inspectiontype_master.objects.aggregate(Max('instypeid'))['instypeid__max']
#                 max_id+=1 
#             else:
#                 max_id=1
#             name=request.POST.get('inspecCat')
#             shortcode=request.POST.get('inspecCode')
#             entity=request.POST.get('entity')  
#             categoryDesc=request.POST.get('categoryDesc')  
#             departmentCategory=request.POST.get('departmentCategory')
#             inspection_image=request.FILES['inspection_image']
#             try:
#                 email=str(request.user)
#                 userDetails=Level_Desig.objects.filter(official_email_ID=email)[0]
#                 userDetails=userDetails.empno.empno
#             except:
#                 userDetails=request.user.user_role
#             check=list(inspectiontype_master.objects.filter(name=name,parent_id='-1').values('version').order_by('-version'))
#             if len(check)>0:
#                 version = check[0]['version'] + 1
#             else:
#                 version = 1
#             try:
#                 drpodown=m2.dropdown_options.objects.filter(did=entity)[0]
#                 obj11=inspectiontype_master.objects.create(concerned_dept_id=departmentCategory,desc = categoryDesc ,instypeid=max_id,name=name,shortcode=shortcode,entity=drpodown,parent_id='-1',created_by=userDetails,lastmodified_by=userDetails,inspection_image=inspection_image,disable_flag=True,version=version)
               
#                 messages.success(request,'Data Added Successfully')
#                 return redirect('masterTable')
#             except:
#                 messages.error(request,'Error while adding data')
          
#         # question category addition
#         elif request.method=='POST' and request.POST.get('btnaddC2'):
#             insid=request.POST.get('insid')
#             name=request.POST.get('name2')   
#             name2Desc=request.POST.get('name2Desc')
#             insidSub=request.POST.get('insidSub')

#             try:
#                 email=str(request.user)
#                 userDetails=Level_Desig.objects.filter(official_email_ID=email)[0]
#                 userDetails = userDetails.empno.empno
                 
#             except:
#                 userDetails = request.user.user_role
            
#             if not sub_category_master.objects.filter(sub_category = insidSub).exists():
#                 sub_category_master.objects.create(sub_category = insidSub)
           
#             max_id = inspectiontype_master.objects.aggregate(Max('instypeid'))
#             if max_id['instypeid__max'] is not None:
#                 max_id = max_id['instypeid__max'] + 1 
#             else:
#                 max_id=1
#             try:
#                 res=inspectiontype_master.objects.filter(instypeid=insid)[0]
#                 drpodown=m2.dropdown_options.objects.filter(did=res.entity.did)[0]
#             except:
#                 res=''
            
            
#             if res:
#                 check=list(inspectiontype_master.objects.filter(name=name,parent_id=insid).values())
#                 if len(check)==0:
#                     insidSub = sub_category_master.objects.filter(sub_category = insidSub)[0]
#                     inspectiontype_master.objects.create(desc=name2Desc,sub_category_id=insidSub.sub_id ,instypeid=max_id,name=name,entity=drpodown,parent_id=insid,shortcode=res.shortcode,
#                     created_by=userDetails,lastmodified_by=userDetails)
#                     messages.success(request,'Data Added Successfully')
                    
#                 else:
#                     messages.success(request,'Data already exists')
#             else:
#                 messages.error(request,'Error while adding data')
#             return redirect('masterTable')
#         # question addition
#         elif request.method=='POST' and request.POST.get('btnaddC3'):
#             choicetype=request.POST.get('choicetype')
#             instypeid_id=request.POST.get('qsid')
#             activity=request.POST.get('quest')
#             doption=request.POST.get('drop_id')
#             roption1=request.POST.get('radio_id1')
#             roption2=request.POST.get('radio_id2')
#             priority=request.POST.get('inlineRadioOptions')
#             dependQues=request.POST.get('dependQues')
#             dependCol=request.POST.get('dependCol')
#             option=request.POST.getlist('demo')
#             location=request.POST.get('location')
#             compulsaryQuestion=request.POST.get('compulsaryQuestion')
#             question_name2Desc=request.POST.get('question_name2Desc')
#             question_insidSub=request.POST.get('question_insidSub')
#             if not question_sub_category_master.objects.filter(sub_category = question_insidSub).exists():
#                 question_sub_category_master.objects.create(sub_category = question_insidSub)


#             if compulsaryQuestion == 'No':
#                 compulsaryQuestion = False
#             else:
#                 compulsaryQuestion = True
#             date = datetime.now()
#             if location == 'No':
#                 location=None
            
#             try:
#                 email=str(request.user)
#                 userDetails=Level_Desig.objects.filter(official_email_ID=email)[0]
#                 userDetails = userDetails.empno.empno
                 
#             except:
#                 userDetails = request.user.user_role 

#             try:
#                 doption=m2.dropdown_options.objects.filter(did=doption)[0]
#             except:
#                 pass
#             try:
#                 temp=m2.questionare_master.objects.filter(delete_flag=False)[0]
#             except:
#                 temp=[]

#             if temp:
#                 max_id = m2.questionare_master.objects.aggregate(Max('qid'))['qid__max']
#                 max_id+=1 
#             else:
#                 max_id=1
#             choicetypedata=m2.choicetype_master.objects.filter(cid=choicetype)[0]
#             instypeid=inspectiontype_master.objects.filter(instypeid=instypeid_id)[0]
#             check=list(m2.questionare_master.objects.filter(instypeid_id=instypeid,activity=activity,choicetype=choicetype).values())
#             if len(check)==0:
#                 insidSub = question_sub_category_master.objects.filter(sub_category = question_insidSub)[0]
#                 if choicetype=='3':
#                     m2.questionare_master.objects.create(question_sub_id=insidSub,desc=question_name2Desc, qid=max_id,instypeid_id=instypeid,activity=activity,choicetype=choicetypedata,
#                     doption=doption,created_by=userDetails,lastmodified_by=userDetails,location_id=location,compulsary=compulsaryQuestion)
#                 elif choicetype=='2':
#                     roption1=m2.radio_options.objects.filter(rid=roption1)[0]
#                     roption2=m2.radio_options.objects.filter(rid=roption2)[0]
#                     option1=option[0]
#                     if len(option)==2:
#                         option2=option[1]
#                     else:
#                         option2=None
#                     m2.questionare_master.objects.create(question_sub_id=insidSub,desc=question_name2Desc,qid=max_id,instypeid_id=instypeid,activity=activity,
#                     choicetype=choicetypedata,roption1=roption1,roption2=roption2,priority=priority,option1=option1,
#                     option2=option2,created_by=userDetails,lastmodified_by=userDetails,location_id=location,compulsary=compulsaryQuestion)

#                 elif choicetype=='1':
#                     if dependCol:
#                         m2.questionare_master.objects.create(question_sub_id=insidSub,desc=question_name2Desc,qid=max_id,instypeid_id=instypeid,activity=activity,choicetype=choicetypedata,created_by=userDetails,
#                         lastmodified_by=userDetails,dependending_column=dependCol,dependent_ques=dependQues,location_id=location,compulsary=compulsaryQuestion) 
#                         sample = m2.questionare_master.objects.filter(qid=dependQues)[0]
#                         if sample.depending_ques:
#                             xx=str(sample.depending_ques) + ',' +str(max_id)
#                         else:
#                             xx=max_id
#                         m2.questionare_master.objects.filter(qid=dependQues).update(depending_ques=xx)
#                     else:
#                         m2.questionare_master.objects.create(question_sub_id=insidSub,desc=question_name2Desc,qid=max_id,instypeid_id=instypeid,activity=activity,choicetype=choicetypedata,created_by=userDetails,
#                         lastmodified_by=userDetails,location_id=location,compulsary=compulsaryQuestion)   
#                 else: 
#                     m2.questionare_master.objects.create(question_sub_id=insidSub,desc=question_name2Desc,qid=max_id,instypeid_id=instypeid,activity=activity,choicetype=choicetypedata,created_by=userDetails,
#                     lastmodified_by=userDetails,location_id=location,compulsary=compulsaryQuestion)    
#                 lst1=list(m2.questionare_master.objects.filter(instypeid_id=instypeid_id).values())
#                 if lst1:
#                     messages.success(request,'Data Added Successfully')
                    
#                 else:
#                     messages.error(request,'Error while adding data')
                
#             else:
#                 messages.error(request,'Data already exists')    
            
#             return redirect('masterTable')

#         # update category 
#         if request.method=='POST' and request.POST.get('updateCategory'):
#             # try:
#             #     temp=inspectiontype_master.objects.filter(delete_flag=False)[0]
#             # except:
#             #     temp=[]
#             # if temp:
#             #     max_id = inspectiontype_master.objects.aggregate(Max('instypeid'))['instypeid__max']
#             #     max_id+=1 
#             # else:
#             #     max_id=1
#             instypeid = request.POST.get('update_instypeid')
#             name=request.POST.get('update_name')
#             shortcode=request.POST.get('update_shortcode')
#             entity=request.POST.get('update_entity')  
#             categoryDesc=request.POST.get('update_categoryDesc')
#             departmentCategory=request.POST.get('update_departmentCategory')
           
#             from django.core.files.storage import FileSystemStorage
#             myfile = request.FILES.get('update_inspection_image',False) 
            
#             if len(request.FILES) != 0:
#                 supdoc = request.FILES['update_inspection_image']
#                 folder='media/images11/'
#                 fs=FileSystemStorage(location=folder)  
#                 files=fs.save(supdoc.name,supdoc)      
#                 inspection_image = fs.url(files)
#                 inspection_image = str(inspection_image).split('media/')
#                 inspection_image = 'images11/'+inspection_image[1]
#             else:
#                 inspection_image = None
#             # # print(inspection_image)
#             try:
#                 email=str(request.user)
#                 userDetails=Level_Desig.objects.filter(official_email_ID=email)[0]
#                 userDetails=userDetails.empno.empno
#             except:
#                 userDetails=request.user.user_role
           
#             try:
#                 drpodown=m2.dropdown_options.objects.filter(did=entity)[0]
#                 if inspection_image != None:
#                     inspectiontype_master.objects.filter(instypeid=instypeid).update(concerned_dept_id=departmentCategory,desc = categoryDesc ,name=name,shortcode=shortcode,entity=drpodown,lastmodified_by=userDetails,inspection_image=inspection_image)
#                 else:
#                     inspectiontype_master.objects.filter(instypeid=instypeid).update(concerned_dept_id=departmentCategory,desc = categoryDesc ,name=name,shortcode=shortcode,entity=drpodown,lastmodified_by=userDetails)

#                 messages.success(request,'Data Updated Successfully')
#                 return redirect('masterTable')
#             except:
#                 messages.error(request,'Error while adding data')
            
#         return render(request,'masterTable.html',{'question_sub_category':question_sub_category,'sub_category':sub_category,'result':result,'result2':result2,'result4':result4,'result5':result5,'result6':result6,'result7':result7,'result8':result8})
#     else:
#         return HttpResponseRedirect('/login') 

# @login_required

# def masterTable(request):
#     if request.user.user_role == 'admin_super':
#         checkUser = request.user.user_role
#         result=list(inspectiontype_master.objects.filter(parent_id='-1',delete_flag=False).distinct('name').values('instypeid','name'))
#         result2=list(inspectiontype_master.objects.filter(parent_id='-1',delete_flag=False).distinct('name').values('instypeid','name'))
#         # result3=list(inspectiontype_master.objects.filter(~Q(parent_id='-1', delete_flag=True)).distinct('name').values('instypeid','name'))
#         result4=list(m2.choicetype_master.objects.values('cid','input_type'))
#         result5=list(m2.dropdown_options.objects.values('did','dmaster'))  
#         asset=list(asset_master.objects.values('asset_id','asset_category'))
#         result6=list(m2.radio_options.objects.values('rid','rscore','rlabel'))
#         result7=list(departMast.objects.filter(delete_flag=False).values())
#         result8=list(m2.location_master.objects.values('lid','lmaster'))
#         sub_category = list(sub_category_master.objects.filter(disable_flag = False).values().order_by('sub_category'))
#         question_sub_category = list(question_sub_category_master.objects.filter(disable_flag = False).values().order_by('sub_category'))

#         # inspection categoryt addition
#         if request.method=='POST' and request.POST.get('btnaddC1'):
#             try:
#                 temp=inspectiontype_master.objects.filter(delete_flag=False)[0]
#             except:
#                 temp=[]
#             if temp:
#                 max_id = inspectiontype_master.objects.aggregate(Max('instypeid'))['instypeid__max']
#                 max_id+=1 
#             else:
#                 max_id=1
#             name=request.POST.get('inspecCat')
#             shortcode=request.POST.get('inspecCode')
#             entity=request.POST.get('entity')  
#             categoryDesc=request.POST.get('categoryDesc')  
#             departmentCategory=request.POST.get('departmentCategory')
#             if departmentCategory == 'ALL':
#                 departmentCategory = None
#             assetCat = request.POST.get('asset')
#             if not asset_master.objects.filter(asset_category = assetCat).exists():
#                 asset_master.objects.create(asset_category = assetCat)
#             assetId = asset_master.objects.filter(asset_category = assetCat)[0].asset_id
#             inspection_image=request.FILES['inspection_image']
#             try:
#                 email=str(request.user)
#                 userDetails=Level_Desig.objects.filter(official_email_ID=email)[0]
#                 userDetails=userDetails.empno.empno
#             except:
#                 userDetails=request.user.user_role
#             check=list(inspectiontype_master.objects.filter(name=name,parent_id='-1').values('version').order_by('-version'))
#             if len(check)>0:
#                 version = check[0]['version'] + 1
#             else:
#                 version = 1
#             try:  
#                 #other_entity
#                 textBoxentity = None
#                 if entity == 'NA':
#                     drpodown = None
#                 elif entity == 'OTHERS':
#                     drpodown = None
#                     textBoxentity = request.POST.get('textBoxentity')
#                 else:
#                     drpodown=m2.dropdown_options.objects.filter(did=entity)[0]
#                 obj11=inspectiontype_master.objects.create(other_entity = textBoxentity,asset_id = assetId,concerned_dept_id=departmentCategory,desc = categoryDesc ,instypeid=max_id,name=name,shortcode=shortcode,entity=drpodown,parent_id='-1',created_by=userDetails,lastmodified_by=userDetails,inspection_image=inspection_image,disable_flag=True,version=version)
                
#                 messages.success(request,'Data Added Successfully')
#                 return redirect('masterTable')
#             except:
#                 messages.error(request,'Error while adding data')
          
#         # question category addition
#         elif request.method=='POST' and request.POST.get('btnaddC2'):
#             insid=request.POST.get('insid')
#             name=request.POST.get('name2')   
#             name2Desc=request.POST.get('name2Desc')
#             insidSub=request.POST.get('insidSub')

#             try:
#                 email=str(request.user)
#                 userDetails=Level_Desig.objects.filter(official_email_ID=email)[0]
#                 userDetails = userDetails.empno.empno
                 
#             except:
#                 userDetails = request.user.user_role
            
#             if not sub_category_master.objects.filter(sub_category = insidSub).exists():
#                 sub_category_master.objects.create(sub_category = insidSub)
           
#             max_id = inspectiontype_master.objects.aggregate(Max('instypeid'))
#             if max_id['instypeid__max'] is not None:
#                 max_id = max_id['instypeid__max'] + 1 
#             else:
#                 max_id=1
#             try:
#                 res=inspectiontype_master.objects.filter(instypeid=insid)[0]
#             except:
#                 res = ''

#             try:
#                 drpodown=m2.dropdown_options.objects.filter(did=res.entity.did)[0]
#             except:
#                 drpodown = None
            
            
#             if res:
#                 check=list(inspectiontype_master.objects.filter(name=name,parent_id=insid).values())
#                 if len(check)==0:
#                     insidSub = sub_category_master.objects.filter(sub_category = insidSub)[0]
#                     inspectiontype_master.objects.create(desc=name2Desc,sub_category_id=insidSub.sub_id ,instypeid=max_id,name=name,entity=drpodown,parent_id=insid,shortcode=res.shortcode,
#                     created_by=userDetails,lastmodified_by=userDetails)
#                     messages.success(request,'Data Added Successfully')
                    
#                 else:
#                     messages.success(request,'Data already exists')
#             else:
#                 messages.error(request,'Error while adding data')
#             return redirect('masterTable')
        
#         elif request.method=='POST' and request.POST.get('btnaddC21'):
#             insid=request.POST.get('insid')
#             name=request.POST.get('name2')   
#             name2Desc=request.POST.get('name2Desc')
#             insidSub=request.POST.get('insidSub')
#             insidSubEdit = request.POST.get('insidSub')

#             try:
#                 email=str(request.user)
#                 userDetails=Level_Desig.objects.filter(official_email_ID=email)[0]
#                 userDetails = userDetails.empno.empno
                 
#             except:
#                 userDetails = request.user.user_role
            
#             if not sub_category_master.objects.filter(sub_category = insidSub).exists():
#                 sub_category_master.objects.create(sub_category = insidSub)
           
#             max_id = inspectiontype_master.objects.aggregate(Max('instypeid'))
#             if max_id['instypeid__max'] is not None:
#                 max_id = max_id['instypeid__max'] + 1 
#             else:
#                 max_id=1
#             try:
#                 res=inspectiontype_master.objects.filter(instypeid=insid)[0]
#             except:
#                 res = ''

#             try:
#                 drpodown=m2.dropdown_options.objects.filter(did=res.entity.did)[0]
#             except:
#                 drpodown = None
            
            
#             if res:
#                 check=list(inspectiontype_master.objects.filter(name=name,parent_id=insid).values())
#                 if len(check)==0:
#                     insidSub = sub_category_master.objects.filter(sub_category = insidSub)[0]
#                     inspectiontype_master.objects.create(desc=name2Desc,sub_category_id=insidSub.sub_id ,instypeid=max_id,name=name,entity=drpodown,parent_id=insid,shortcode=res.shortcode,
#                     created_by=userDetails,lastmodified_by=userDetails)
#                     messages.success(request,'Data Added Successfully')
                    
#                 else:
#                     messages.success(request,'Data already exists')
#             else:
#                 messages.error(request,'Error while adding data')
#             catType = 'editCat'
#             return render(request,'masterTable.html',{'insid':insid,'insidSubEdit':insidSubEdit,'catType':catType,'question_sub_category':question_sub_category,'sub_category':sub_category,'result':result,'result2':result2,'result4':result4,'result5':result5,'result6':result6,'result7':result7,'result8':result8})
        
        
#         # question addition
#         elif request.method=='POST' and request.POST.get('btnaddC3'):
#             choicetype=request.POST.get('choicetype')
#             instypeid_id=request.POST.get('qsid')
#             activity=request.POST.get('quest')
#             doption=request.POST.get('drop_id')
#             roption1=request.POST.get('radio_id1')
#             roption2=request.POST.get('radio_id2')
#             priority=request.POST.get('inlineRadioOptions')
#             dependQues=request.POST.get('dependQues')
#             dependCol=request.POST.get('dependCol')
#             option=request.POST.getlist('demo')
#             location=request.POST.get('location')
#             compulsaryQuestion=request.POST.get('compulsaryQuestion')
#             question_name2Desc=request.POST.get('question_name2Desc')
#             question_insidSub=request.POST.get('question_insidSub')
#             question_requiredby = request.POST.get('question_requiredby')  
#             question_weightage = request.POST.get('question_weightage')
#             choice_id_data = request.POST.getlist('choice_id')
#             mixedChoices=''
#             for i in range(len(choice_id_data)):
#                 if i !=0:
#                     mixedChoices = mixedChoices+'$'
#                 mixedChoices = mixedChoices+choice_id_data[i]
#             if mixedChoices == '':
#                 mixedChoices = None
#             if not question_sub_category_master.objects.filter(sub_category = question_insidSub).exists():
#                 question_sub_category_master.objects.create(sub_category = question_insidSub)


#             if compulsaryQuestion == 'No':
#                 compulsaryQuestion = False
#             else:
#                 compulsaryQuestion = True
#             date = datetime.now()
#             if location == 'No':
#                 location=None
            
#             try:
#                 email=str(request.user)
#                 userDetails=Level_Desig.objects.filter(official_email_ID=email)[0]
#                 userDetails = userDetails.empno.empno
                 
#             except:
#                 userDetails = request.user.user_role 

#             try:
#                 doption=m2.dropdown_options.objects.filter(did=doption)[0]
#             except:
#                 pass
#             try:
#                 temp=m2.questionare_master.objects.filter(delete_flag=False)[0]
#             except:
#                 temp=[]

#             if temp:
#                 max_id = m2.questionare_master.objects.aggregate(Max('qid'))['qid__max']
#                 max_id+=1 
#             else:
#                 max_id=1  
#             choicetypedata=m2.choicetype_master.objects.filter(cid=choicetype)[0]
#             instypeid=inspectiontype_master.objects.filter(instypeid=instypeid_id)[0]
#             check=list(m2.questionare_master.objects.filter(instypeid_id=instypeid,activity=activity,choicetype=choicetype).values())
#             if len(check)==0:
#                 insidSub = question_sub_category_master.objects.filter(sub_category = question_insidSub)[0]
                
#                 if choicetype=='3':
#                     if dependCol:
#                         m2.questionare_master.objects.create(weightage = question_weightage,actionBy = question_requiredby,question_sub_id=insidSub,desc=question_name2Desc, qid=max_id,instypeid_id=instypeid,activity=activity,choicetype=choicetypedata,
#                         doption=doption,dependending_column=dependCol,dependent_ques=dependQues,created_by=userDetails,lastmodified_by=userDetails,location_id=location,compulsary=compulsaryQuestion)
#                         sample = m2.questionare_master.objects.filter(qid=dependQues)[0]
#                         if sample.depending_ques:
#                             xx=str(sample.depending_ques) + ',' +str(max_id)
#                         else:
#                             xx=max_id
#                         m2.questionare_master.objects.filter(qid=dependQues).update(depending_ques=xx)

#                     else:
#                         m2.questionare_master.objects.create(weightage = question_weightage,actionBy = question_requiredby,question_sub_id=insidSub,desc=question_name2Desc, qid=max_id,instypeid_id=instypeid,activity=activity,choicetype=choicetypedata,
#                         doption=doption,created_by=userDetails,lastmodified_by=userDetails,location_id=location,compulsary=compulsaryQuestion)
                
#                 elif choicetype=='2':
#                     roption1=m2.radio_options.objects.filter(rid=roption1)[0]
#                     roption2=m2.radio_options.objects.filter(rid=roption2)[0]
#                     option1=option[0]
#                     if len(option)==2:
#                         option2=option[1]
#                     else:
#                         option2=None
#                     m2.questionare_master.objects.create(weightage = question_weightage,actionBy = question_requiredby,question_sub_id=insidSub,desc=question_name2Desc,qid=max_id,instypeid_id=instypeid,activity=activity,
#                     choicetype=choicetypedata,roption1=roption1,roption2=roption2,priority=priority,option1=option1,
#                     option2=option2,created_by=userDetails,lastmodified_by=userDetails,location_id=location,compulsary=compulsaryQuestion)

#                 elif choicetype=='1':
#                     if dependCol:
#                         m2.questionare_master.objects.create(weightage = question_weightage,actionBy = question_requiredby,question_sub_id=insidSub,desc=question_name2Desc,qid=max_id,instypeid_id=instypeid,activity=activity,choicetype=choicetypedata,created_by=userDetails,
#                         lastmodified_by=userDetails,dependending_column=dependCol,dependent_ques=dependQues,location_id=location,compulsary=compulsaryQuestion) 
#                         sample = m2.questionare_master.objects.filter(qid=dependQues)[0]
#                         if sample.depending_ques:
#                             xx=str(sample.depending_ques) + ',' +str(max_id)
#                         else:
#                             xx=max_id
#                         m2.questionare_master.objects.filter(qid=dependQues).update(depending_ques=xx)
#                     else:
#                         m2.questionare_master.objects.create(weightage = question_weightage,actionBy = question_requiredby,question_sub_id=insidSub,desc=question_name2Desc,qid=max_id,instypeid_id=instypeid,activity=activity,choicetype=choicetypedata,created_by=userDetails,
#                         lastmodified_by=userDetails,location_id=location,compulsary=compulsaryQuestion)   
#                 elif choicetype in ['7','9','10']:
                    
#                     m2.questionare_master.objects.create(weightage = question_weightage,mixedChoices=mixedChoices,actionBy = question_requiredby,question_sub_id=insidSub,desc=question_name2Desc,qid=max_id,instypeid_id=instypeid,activity=activity,choicetype=choicetypedata,created_by=userDetails,
#                     lastmodified_by=userDetails,location_id=location,compulsary=compulsaryQuestion) 

#                 else: 
#                     m2.questionare_master.objects.create(weightage = question_weightage,actionBy = question_requiredby,question_sub_id=insidSub,desc=question_name2Desc,qid=max_id,instypeid_id=instypeid,activity=activity,choicetype=choicetypedata,created_by=userDetails,
#                     lastmodified_by=userDetails,location_id=location,compulsary=compulsaryQuestion)    
#                 lst1=list(m2.questionare_master.objects.filter(instypeid_id=instypeid_id).values())
#                 if lst1:
#                     messages.success(request,'Data Added Successfully')
                    
#                 else:
#                     messages.error(request,'Error while adding data')
                
#             else:
#                 messages.error(request,'Data already exists')    
            
#             return redirect('masterTable')

#         elif request.method=='POST' and request.POST.get('btnaddC31'):
#             choicetype=request.POST.get('choicetype')
#             instypeid_id=request.POST.get('qsid')
#             activity=request.POST.get('quest')
#             doption=request.POST.get('drop_id')
#             roption1=request.POST.get('radio_id1')
#             roption2=request.POST.get('radio_id2')
#             priority=request.POST.get('inlineRadioOptions')
#             dependQues=request.POST.get('dependQues')
#             dependCol=request.POST.get('dependCol')
#             option=request.POST.getlist('demo')
#             location=request.POST.get('location')
#             compulsaryQuestion=request.POST.get('compulsaryQuestion')
#             question_name2Desc=request.POST.get('question_name2Desc')
#             question_insidSub=request.POST.get('question_insidSub')
#             isid=request.POST.get('isid')
#             choice_id_data = request.POST.getlist('choice_id')
#             question_weightage = request.POST.get('question_weightage')
#             mixedChoices=''
#             for i in range(len(choice_id_data)):
#                 if i !=0:
#                     mixedChoices = mixedChoices+'$'
#                 mixedChoices = mixedChoices+choice_id_data[i]
#             if mixedChoices == '':
#                 mixedChoices = None

#             question_requiredby = request.POST.get('question_requiredby')
#             if not question_sub_category_master.objects.filter(sub_category = question_insidSub).exists():
#                 question_sub_category_master.objects.create(sub_category = question_insidSub)


#             if compulsaryQuestion == 'No':
#                 compulsaryQuestion = False
#             else:
#                 compulsaryQuestion = True
#             date = datetime.now()
#             if location == 'No':
#                 location=None
            
#             try:
#                 email=str(request.user)
#                 userDetails=Level_Desig.objects.filter(official_email_ID=email)[0]
#                 userDetails = userDetails.empno.empno
                 
#             except:
#                 userDetails = request.user.user_role 

#             try:
#                 doption=m2.dropdown_options.objects.filter(did=doption)[0]
#             except:
#                 pass
#             try:
#                 temp=m2.questionare_master.objects.filter(delete_flag=False)[0]
#             except:
#                 temp=[]

#             if temp:
#                 max_id = m2.questionare_master.objects.aggregate(Max('qid'))['qid__max']
#                 max_id+=1 
#             else:
#                 max_id=1
#             choicetypedata=m2.choicetype_master.objects.filter(cid=choicetype)[0]
#             instypeid=inspectiontype_master.objects.filter(instypeid=instypeid_id)[0]
#             check=list(m2.questionare_master.objects.filter(instypeid_id=instypeid,activity=activity,choicetype=choicetype).values())
#             if len(check)==0:
#                 insidSub = question_sub_category_master.objects.filter(sub_category = question_insidSub)[0]
#                 if choicetype=='3':
#                     m2.questionare_master.objects.create(weightage = question_weightage,actionBy = question_requiredby,question_sub_id=insidSub,desc=question_name2Desc, qid=max_id,instypeid_id=instypeid,activity=activity,choicetype=choicetypedata,
#                     doption=doption,created_by=userDetails,lastmodified_by=userDetails,location_id=location,compulsary=compulsaryQuestion)
#                 elif choicetype=='2':
#                     roption1=m2.radio_options.objects.filter(rid=roption1)[0]
#                     roption2=m2.radio_options.objects.filter(rid=roption2)[0]
#                     option1=option[0]
#                     if len(option)==2:
#                         option2=option[1]
#                     else:
#                         option2=None
#                     m2.questionare_master.objects.create(weightage = question_weightage,actionBy = question_requiredby,question_sub_id=insidSub,desc=question_name2Desc,qid=max_id,instypeid_id=instypeid,activity=activity,
#                     choicetype=choicetypedata,roption1=roption1,roption2=roption2,priority=priority,option1=option1,
#                     option2=option2,created_by=userDetails,lastmodified_by=userDetails,location_id=location,compulsary=compulsaryQuestion)

#                 elif choicetype=='1':
#                     if dependCol:
#                         m2.questionare_master.objects.create(weightage = question_weightage,actionBy = question_requiredby,question_sub_id=insidSub,desc=question_name2Desc,qid=max_id,instypeid_id=instypeid,activity=activity,choicetype=choicetypedata,created_by=userDetails,
#                         lastmodified_by=userDetails,dependending_column=dependCol,dependent_ques=dependQues,location_id=location,compulsary=compulsaryQuestion) 
#                         sample = m2.questionare_master.objects.filter(qid=dependQues)[0]
#                         if sample.depending_ques:
#                             xx=str(sample.depending_ques) + ',' +str(max_id)
#                         else:
#                             xx=max_id
#                         m2.questionare_master.objects.filter(qid=dependQues).update(depending_ques=xx)
#                     else:
#                         m2.questionare_master.objects.create(weightage = question_weightage,actionBy = question_requiredby,question_sub_id=insidSub,desc=question_name2Desc,qid=max_id,instypeid_id=instypeid,activity=activity,choicetype=choicetypedata,created_by=userDetails,
#                         lastmodified_by=userDetails,location_id=location,compulsary=compulsaryQuestion)   
#                 elif choicetype in ['7','9','10']:
                    
#                     m2.questionare_master.objects.create(weightage = question_weightage,mixedChoices=mixedChoices,actionBy = question_requiredby,question_sub_id=insidSub,desc=question_name2Desc,qid=max_id,instypeid_id=instypeid,activity=activity,choicetype=choicetypedata,created_by=userDetails,
#                     lastmodified_by=userDetails,location_id=location,compulsary=compulsaryQuestion) 
#                 else: 
#                     m2.questionare_master.objects.create(weightage = question_weightage,actionBy = question_requiredby,question_sub_id=insidSub,desc=question_name2Desc,qid=max_id,instypeid_id=instypeid,activity=activity,choicetype=choicetypedata,created_by=userDetails,
#                     lastmodified_by=userDetails,location_id=location,compulsary=compulsaryQuestion)    
#                 lst1=list(m2.questionare_master.objects.filter(instypeid_id=instypeid_id).values())
#                 if lst1:
#                     messages.success(request,'Data Added Successfully')
                    
#                 else:
#                     messages.error(request,'Error while adding data')
                
#             else:
#                 messages.error(request,'Data already exists')    
            
#             catType = 'editQues'
#             result=list(inspectiontype_master.objects.filter(parent_id=isid,delete_flag=False).values())
#             result6=list(m2.radio_options.objects.filter(rscore='0').values('rid','rscore','rlabel'))
#             result7=list(m2.radio_options.objects.filter(rscore='1').values('rid','rscore','rlabel'))
#             r6=''
#             r7 = ''
#             for i in range(len(result6)):
#                 r6 = r6 + '@'+str(result6[i]['rid'])+'#'+str(result6[i]['rlabel'])
#                 r7 = r7 + '@'+str(result7[i]['rid'])+'#'+str(result7[i]['rlabel'])
#             return render(request,'masterTable.html',{'res7':r7,'res6':r6,'result':result,'question_insidSub':question_insidSub,'insid':isid,'insidSubEdit':instypeid_id,'catType':catType,'question_sub_category':question_sub_category,'sub_category':sub_category,'result':result,'result2':result2,'result4':result4,'result5':result5,'result6':result6,'result7':result7,'result8':result8})
        
#         # update questions
#         elif request.method=='POST' and request.POST.get('btnaddC32'):
#             choicetype=request.POST.get('choicetype')
#             instypeid_id=request.POST.get('qsid')
#             activity=request.POST.get('quest')
#             doption=request.POST.get('drop_id')
#             roption1=request.POST.get('radio_id1')
#             roption2=request.POST.get('radio_id2')
#             priority=request.POST.get('inlineRadioOptions')
#             dependQues=request.POST.get('dependQues')
#             dependCol=request.POST.get('dependCol')
#             option=request.POST.getlist('demo')
#             location=request.POST.get('location')  
#             updateQid=request.POST.get('updateQid')
#             compulsaryQuestion=request.POST.get('compulsaryQuestion')
#             question_name2Desc=request.POST.get('question_name2Desc')
#             question_insidSub=request.POST.get('question_insidSub')
#             question_requiredby = request.POST.get('question_requiredby')
#             choice_id_data = request.POST.getlist('choice_id')
#             question_weightage = request.POST.get('question_weightage')
#             mixedChoices=''
#             for i in range(len(choice_id_data)):
#                 if i !=0:
#                     mixedChoices = mixedChoices+'$'
#                 mixedChoices = mixedChoices+choice_id_data[i]
#             if mixedChoices == '':
#                 mixedChoices = None
#             if not question_sub_category_master.objects.filter(sub_category = question_insidSub).exists():
#                 question_sub_category_master.objects.create(sub_category = question_insidSub)


#             if compulsaryQuestion == 'No':
#                 compulsaryQuestion = False
#             else:
#                 compulsaryQuestion = True
#             date = datetime.now()
#             if location == 'No':
#                 location=None
            
#             try:
#                 email=str(request.user)
#                 userDetails=Level_Desig.objects.filter(official_email_ID=email)[0]
#                 userDetails = userDetails.empno.empno
                 
#             except:
#                 userDetails = request.user.user_role 

#             try:
#                 doption=m2.dropdown_options.objects.filter(did=doption)[0]
#             except:
#                 pass
#             try:
#                 temp=m2.questionare_master.objects.filter(delete_flag=False)[0]
#             except:
#                 temp=[]

           
#             max_id=updateQid
#             choicetypedata=m2.choicetype_master.objects.filter(cid=choicetype)[0]
#             instypeid=inspectiontype_master.objects.filter(instypeid=instypeid_id)[0]
#             check=list(m2.questionare_master.objects.filter(instypeid_id=instypeid,activity=activity,choicetype=choicetype).values())
            
#             insidSub = question_sub_category_master.objects.filter(sub_category = question_insidSub)[0]
            
          
#             m2.questionare_master.objects.filter(qid=max_id).update(choicetype=None,roption1=None,roption2=None,doption=None,option1=None,option2=None,option3=None,priority=None,depending_ques=None,dependending_column=None,dependent_ques=None,compulsary=False,desc=None,question_sub_id=None)
            
#             if choicetype=='3':
#                 if dependCol:
#                     m2.questionare_master.objects.filter(qid=max_id).update(weightage = question_weightage,actionBy = question_requiredby,question_sub_id=insidSub,desc=question_name2Desc, instypeid_id=instypeid,activity=activity,choicetype=choicetypedata,
#                     doption=doption,dependending_column=dependCol,dependent_ques=dependQues,created_by=userDetails,lastmodified_by=userDetails,location_id=location,compulsary=compulsaryQuestion)
#                     sample = m2.questionare_master.objects.filter(qid=dependQues)[0]
#                     if sample.depending_ques:
#                         xx=str(sample.depending_ques) + ',' +str(max_id)
#                     else:
#                         xx=max_id
#                     m2.questionare_master.objects.filter(qid=dependQues).update(depending_ques=xx)

#                 else:
#                     m2.questionare_master.objects.filter(qid=max_id).update(weightage = question_weightage,actionBy = question_requiredby,question_sub_id=insidSub,desc=question_name2Desc, instypeid_id=instypeid,activity=activity,choicetype=choicetypedata,
#                     doption=doption,created_by=userDetails,lastmodified_by=userDetails,location_id=location,compulsary=compulsaryQuestion)
            
#             elif choicetype=='2':
#                 roption1=m2.radio_options.objects.filter(rid=roption1)[0]
#                 roption2=m2.radio_options.objects.filter(rid=roption2)[0]
#                 option1=option[0]
#                 if len(option)==2:
#                     option2=option[1]
#                 else:
#                     option2=None
#                 m2.questionare_master.objects.filter(qid=max_id).update(weightage = question_weightage,actionBy = question_requiredby,question_sub_id=insidSub,desc=question_name2Desc,instypeid_id=instypeid,activity=activity,
#                 choicetype=choicetypedata,roption1=roption1,roption2=roption2,priority=priority,option1=option1,
#                 option2=option2,created_by=userDetails,lastmodified_by=userDetails,location_id=location,compulsary=compulsaryQuestion)

#             elif choicetype=='1':
#                 if dependCol:
#                     m2.questionare_master.objects.filter(qid=max_id).update(weightage = question_weightage,actionBy = question_requiredby,question_sub_id=insidSub,desc=question_name2Desc,instypeid_id=instypeid,activity=activity,choicetype=choicetypedata,created_by=userDetails,
#                     lastmodified_by=userDetails,dependending_column=dependCol,dependent_ques=dependQues,location_id=location,compulsary=compulsaryQuestion) 
#                     sample = m2.questionare_master.objects.filter(qid=dependQues)[0]
#                     if sample.depending_ques:
#                         xx=str(sample.depending_ques) + ',' +str(max_id)
#                     else:
#                         xx=max_id
#                     m2.questionare_master.objects.filter(qid=dependQues).update(depending_ques=xx)
#                 else:
#                     m2.questionare_master.objects.filter(qid=max_id).update(weightage = question_weightage,actionBy = question_requiredby,question_sub_id=insidSub,desc=question_name2Desc,instypeid_id=instypeid,activity=activity,choicetype=choicetypedata,created_by=userDetails,
#                     lastmodified_by=userDetails,location_id=location,compulsary=compulsaryQuestion)   
            
#             elif choicetype in ['7','9','10']:
#                     m2.questionare_master.objects.filter(qid=max_id).update(weightage = question_weightage,mixedChoices=mixedChoices,actionBy = question_requiredby,question_sub_id=insidSub,desc=question_name2Desc,instypeid_id=instypeid,activity=activity,choicetype=choicetypedata,created_by=userDetails,
#                     lastmodified_by=userDetails,location_id=location,compulsary=compulsaryQuestion)
#             else: 
#                 m2.questionare_master.objects.filter(qid=max_id).update(weightage = question_weightage,actionBy = question_requiredby,question_sub_id=insidSub,desc=question_name2Desc,instypeid_id=instypeid,activity=activity,choicetype=choicetypedata,created_by=userDetails,
#                 lastmodified_by=userDetails,location_id=location,compulsary=compulsaryQuestion)    
#             lst1=list(m2.questionare_master.objects.filter(instypeid_id=instypeid_id).values())
#             if lst1:
#                 messages.success(request,'Data updated Successfully')
                
#             else:
#                 messages.error(request,'Error while adding data')
            
            
#             return redirect('masterTable')

#         # update category 
#         if request.method=='POST' and request.POST.get('updateCategory'):
#             # try:
#             #     temp=inspectiontype_master.objects.filter(delete_flag=False)[0]
#             # except:
#             #     temp=[]
#             # if temp:
#             #     max_id = inspectiontype_master.objects.aggregate(Max('instypeid'))['instypeid__max']
#             #     max_id+=1 
#             # else:
#             #     max_id=1
#             instypeid = request.POST.get('update_instypeid')
#             name=request.POST.get('update_name')
#             shortcode=request.POST.get('update_shortcode')
#             entity=request.POST.get('update_entity')  
#             categoryDesc=request.POST.get('update_categoryDesc')
#             departmentCategory=request.POST.get('update_departmentCategory')
#             if departmentCategory == 'ALL':
#                 departmentCategory = None
#             assetCat = request.POST.get('asset_update')
#             if not asset_master.objects.filter(asset_category = assetCat).exists():
#                 asset_master.objects.create(asset_category = assetCat)
#             assetId = asset_master.objects.filter(asset_category = assetCat)[0].asset_id
#             from django.core.files.storage import FileSystemStorage
#             myfile = request.FILES.get('update_inspection_image',False) 
            
#             if len(request.FILES) != 0:
#                 supdoc = request.FILES['update_inspection_image']
#                 folder='media/images11/'
#                 fs=FileSystemStorage(location=folder)  
#                 files=fs.save(supdoc.name,supdoc)      
#                 inspection_image = fs.url(files)
#                 inspection_image = str(inspection_image).split('media/')
#                 inspection_image = 'images11/'+inspection_image[1]
#             else:
#                 inspection_image = None
#             # # print(inspection_image)
#             try:
#                 email=str(request.user)
#                 userDetails=Level_Desig.objects.filter(official_email_ID=email)[0]
#                 userDetails=userDetails.empno.empno
#             except:
#                 userDetails=request.user.user_role
           
#             try:
#                 textBoxentity = None
#                 if entity == 'NA':
#                     drpodown = None
#                 elif entity == 'OTHERS':
#                     drpodown = None
#                     textBoxentity = request.POST.get('textBoxentity_update')
#                 else:
#                     drpodown=m2.dropdown_options.objects.filter(did=entity)[0]
#                 if inspection_image != None:
#                     inspectiontype_master.objects.filter(instypeid=instypeid).update(other_entity = textBoxentity,asset_id=assetId,concerned_dept_id=departmentCategory,desc = categoryDesc ,name=name,shortcode=shortcode,entity=drpodown,lastmodified_by=userDetails,inspection_image=inspection_image)
#                 else:
#                     inspectiontype_master.objects.filter(instypeid=instypeid).update(other_entity = textBoxentity,asset_id=assetId,concerned_dept_id=departmentCategory,desc = categoryDesc ,name=name,shortcode=shortcode,entity=drpodown,lastmodified_by=userDetails)

#                 messages.success(request,'Data Updated Successfully')
#                 return redirect('masterTable')
#             except:
#                 messages.error(request,'Error while adding data')
            
#         return render(request,'masterTable.html',{'asset':asset,'question_sub_category':question_sub_category,'sub_category':sub_category,'result':result,'result2':result2,'result4':result4,'result5':result5,'result6':result6,'result7':result7,'result8':result8})
#     else:
#         return HttpResponseRedirect('/login') 

@login_required
def masterTable(request):
    if request.user.user_role == 'admin_super':
        checkUser = request.user.user_role
        result=list(inspectiontype_master.objects.filter(parent_id='-1',delete_flag=False).distinct('name').values('instypeid','name'))
        result2=list(inspectiontype_master.objects.filter(parent_id='-1',delete_flag=False).distinct('name').values('instypeid','name'))
        # result3=list(inspectiontype_master.objects.filter(~Q(parent_id='-1', delete_flag=True)).distinct('name').values('instypeid','name'))
        result4=list(m2.choicetype_master.objects.values('cid','input_type'))
        result5=list(m2.dropdown_options.objects.values('did','dmaster'))  
        asset=list(asset_master.objects.values('asset_id','asset_category'))
        result6=list(m2.radio_options.objects.values('rid','rscore','rlabel'))
        result7=list(departMast.objects.filter(delete_flag=False).values())
        result8=list(m2.location_master.objects.values('lid','lmaster'))
        sub_category = list(sub_category_master.objects.filter(disable_flag = False).values().order_by('sub_category'))
        question_sub_category = list(question_sub_category_master.objects.filter(disable_flag = False).values().order_by('sub_category'))

        # inspection categoryt addition
        if request.method=='POST' and request.POST.get('btnaddC1'):
            try:
                temp=inspectiontype_master.objects.filter(delete_flag=False)[0]
            except:
                temp=[]
            if temp:
                max_id = inspectiontype_master.objects.aggregate(Max('instypeid'))['instypeid__max']
                max_id+=1 
            else:
                max_id=1
            name=request.POST.get('inspecCat')
            shortcode=request.POST.get('inspecCode')
            entity=request.POST.get('entity')  
            categoryDesc=request.POST.get('categoryDesc')  
            departmentCategory = request.POST.get('departmentCategory') 
            departmentCategoryDisplay  = request.POST.getlist('departmentCategoryDisplay') 
            
            if departmentCategory == 'ALL':
                departmentCategory = None
            assetCat = request.POST.get('asset')
            if not asset_master.objects.filter(asset_category = assetCat).exists():
                asset_master.objects.create(asset_category = assetCat)
            assetId = asset_master.objects.filter(asset_category = assetCat)[0].asset_id
            inspection_image=request.FILES['inspection_image']
            try:
                email=str(request.user)
                userDetails=Level_Desig.objects.filter(official_email_ID=email)[0]
                userDetails=userDetails.empno.empno
            except:
                
                userDetails=request.user.user_role
            check=list(inspectiontype_master.objects.filter(name=name,parent_id='-1').values('version').order_by('-version'))
            if len(check)>0:
                version = check[0]['version'] + 1
            else:
                version = 1
            try:  
                #other_entity
                textBoxentity = None
                if entity == 'NA':
                    drpodown = None
                elif entity == 'OTHERS':
                    drpodown = None
                    textBoxentity = request.POST.get('textBoxentity')
                else:
                    drpodown=m2.dropdown_options.objects.filter(did=entity)[0]
                obj11=inspectiontype_master.objects.create(other_entity = textBoxentity,asset_id = assetId,concerned_dept_id=departmentCategory,desc = categoryDesc ,instypeid=max_id,name=name,shortcode=shortcode,entity=drpodown,parent_id='-1',created_by=userDetails,lastmodified_by=userDetails,inspection_image=inspection_image,disable_flag=True,version=version)
                instypeid = inspectiontype_master.objects.all().last().instypeid
                for d in departmentCategoryDisplay:
                    
                    m2.einspection_department_display.objects.create(dept_id = d,instypeid_id = instypeid,lastmodified_on = datetime.now())
                messages.success(request,'Data Added Successfully')
                return redirect('masterTable')
            except:
                messages.error(request,'Error while adding data')
          
        # question category addition
        elif request.method=='POST' and request.POST.get('btnaddC2'):
            insid=request.POST.get('insid')
            name=request.POST.get('name2')   
            name2Desc=request.POST.get('name2Desc')
            insidSub=request.POST.get('insidSub')

            try:
                email=str(request.user)
                userDetails=Level_Desig.objects.filter(official_email_ID=email)[0]
                userDetails = userDetails.empno.empno
                 
            except:
                userDetails = request.user.user_role
            
            if not sub_category_master.objects.filter(sub_category = insidSub).exists():
                sub_category_master.objects.create(sub_category = insidSub)
           
            max_id = inspectiontype_master.objects.aggregate(Max('instypeid'))
            if max_id['instypeid__max'] is not None:
                max_id = max_id['instypeid__max'] + 1 
            else:
                max_id=1
            try:
                res=inspectiontype_master.objects.filter(instypeid=insid)[0]
            except:
                res = ''

            try:
                drpodown=m2.dropdown_options.objects.filter(did=res.entity.did)[0]
            except:
                drpodown = None
            
            
            if res:
                check=list(inspectiontype_master.objects.filter(name=name,parent_id=insid).values())
                if len(check)==0:
                    insidSub = sub_category_master.objects.filter(sub_category = insidSub)[0]
                    inspectiontype_master.objects.create(desc=name2Desc,sub_category_id=insidSub.sub_id ,instypeid=max_id,name=name,entity=drpodown,parent_id=insid,shortcode=res.shortcode,
                    created_by=userDetails,lastmodified_by=userDetails)
                    messages.success(request,'Data Added Successfully')
                    
                else:
                    messages.success(request,'Data already exists')
            else:
                messages.error(request,'Error while adding data')
            return redirect('masterTable')
        
        elif request.method=='POST' and request.POST.get('btnaddC21'):
            insid=request.POST.get('insid')
            name=request.POST.get('name2')   
            name2Desc=request.POST.get('name2Desc')
            insidSub=request.POST.get('insidSub')
            insidSubEdit = request.POST.get('insidSub')

            try:
                email=str(request.user)
                userDetails=Level_Desig.objects.filter(official_email_ID=email)[0]
                userDetails = userDetails.empno.empno
                 
            except:
                userDetails = request.user.user_role
            
            if not sub_category_master.objects.filter(sub_category = insidSub).exists():
                sub_category_master.objects.create(sub_category = insidSub)
           
            max_id = inspectiontype_master.objects.aggregate(Max('instypeid'))
            if max_id['instypeid__max'] is not None:
                max_id = max_id['instypeid__max'] + 1 
            else:
                max_id=1
            try:
                res=inspectiontype_master.objects.filter(instypeid=insid)[0]
            except:
                res = ''

            try:
                drpodown=m2.dropdown_options.objects.filter(did=res.entity.did)[0]
            except:
                drpodown = None
            
            
            if res:
                check=list(inspectiontype_master.objects.filter(name=name,parent_id=insid).values())
                if len(check)==0:
                    insidSub = sub_category_master.objects.filter(sub_category = insidSub)[0]
                    inspectiontype_master.objects.create(desc=name2Desc,sub_category_id=insidSub.sub_id ,instypeid=max_id,name=name,entity=drpodown,parent_id=insid,shortcode=res.shortcode,
                    created_by=userDetails,lastmodified_by=userDetails)
                    messages.success(request,'Data Added Successfully')
                    
                else:
                    messages.success(request,'Data already exists')
            else:
                messages.error(request,'Error while adding data')
            catType = 'editCat'
            return render(request,'masterTable.html',{'insid':insid,'insidSubEdit':insidSubEdit,'catType':catType,'question_sub_category':question_sub_category,'sub_category':sub_category,'result':result,'result2':result2,'result4':result4,'result5':result5,'result6':result6,'result7':result7,'result8':result8})
        
        
        # question addition
        elif request.method=='POST' and request.POST.get('btnaddC3'):
            choicetype=request.POST.get('choicetype')
            instypeid_id=request.POST.get('qsid')
            activity=request.POST.get('quest')
            doption=request.POST.get('drop_id')
            roption1=request.POST.get('radio_id1')
            roption2=request.POST.get('radio_id2')
            priority=request.POST.get('inlineRadioOptions')
            dependQues=request.POST.get('dependQues')
            dependCol=request.POST.get('dependCol')
            option=request.POST.getlist('demo')
            location=request.POST.get('location')
            compulsaryQuestion=request.POST.get('compulsaryQuestion')
            question_name2Desc=request.POST.get('question_name2Desc')
            question_insidSub=request.POST.get('question_insidSub')
            question_requiredby = request.POST.get('question_requiredby')  
            question_weightage = request.POST.get('question_weightage')
            choice_id_data = request.POST.getlist('choice_id')
            mixedChoices=''
            for i in range(len(choice_id_data)):
                if i !=0:
                    mixedChoices = mixedChoices+'$'
                mixedChoices = mixedChoices+choice_id_data[i]
            if mixedChoices == '':
                mixedChoices = None
            if not question_sub_category_master.objects.filter(sub_category = question_insidSub).exists():
                question_sub_category_master.objects.create(sub_category = question_insidSub)


            if compulsaryQuestion == 'No':
                compulsaryQuestion = False
            else:
                compulsaryQuestion = True
            date = datetime.now()
            if location == 'No':
                location=None
            
            try:
                email=str(request.user)
                userDetails=Level_Desig.objects.filter(official_email_ID=email)[0]
                userDetails = userDetails.empno.empno
                 
            except:
                userDetails = request.user.user_role 

            try:
                doption=m2.dropdown_options.objects.filter(did=doption)[0]
            except:
                pass
            try:
                temp=m2.questionare_master.objects.filter(delete_flag=False)[0]
            except:
                temp=[]

            if temp:
                max_id = m2.questionare_master.objects.aggregate(Max('qid'))['qid__max']
                max_id+=1 
            else:
                max_id=1  
            choicetypedata=m2.choicetype_master.objects.filter(cid=choicetype)[0]
            instypeid=inspectiontype_master.objects.filter(instypeid=instypeid_id)[0]
            check=list(m2.questionare_master.objects.filter(instypeid_id=instypeid,activity=activity,choicetype=choicetype).values())
            if len(check)==0:
                insidSub = question_sub_category_master.objects.filter(sub_category = question_insidSub)[0]
                
                if choicetype=='3':
                    if dependCol:
                        m2.questionare_master.objects.create(weightage = question_weightage,actionBy = question_requiredby,question_sub_id=insidSub,desc=question_name2Desc, qid=max_id,instypeid_id=instypeid,activity=activity,choicetype=choicetypedata,
                        doption=doption,dependending_column=dependCol,dependent_ques=dependQues,created_by=userDetails,lastmodified_by=userDetails,location_id=location,compulsary=compulsaryQuestion)
                        sample = m2.questionare_master.objects.filter(qid=dependQues)[0]
                        if sample.depending_ques:
                            xx=str(sample.depending_ques) + ',' +str(max_id)
                        else:
                            xx=max_id
                        m2.questionare_master.objects.filter(qid=dependQues).update(depending_ques=xx)

                    else:
                        m2.questionare_master.objects.create(weightage = question_weightage,actionBy = question_requiredby,question_sub_id=insidSub,desc=question_name2Desc, qid=max_id,instypeid_id=instypeid,activity=activity,choicetype=choicetypedata,
                        doption=doption,created_by=userDetails,lastmodified_by=userDetails,location_id=location,compulsary=compulsaryQuestion)
                
                elif choicetype=='2':
                    roption1=m2.radio_options.objects.filter(rid=roption1)[0]
                    roption2=m2.radio_options.objects.filter(rid=roption2)[0]
                    option1=option[0]
                    if len(option)==2:
                        option2=option[1]
                    else:
                        option2=None
                    m2.questionare_master.objects.create(weightage = question_weightage,actionBy = question_requiredby,question_sub_id=insidSub,desc=question_name2Desc,qid=max_id,instypeid_id=instypeid,activity=activity,
                    choicetype=choicetypedata,roption1=roption1,roption2=roption2,priority=priority,option1=option1,
                    option2=option2,created_by=userDetails,lastmodified_by=userDetails,location_id=location,compulsary=compulsaryQuestion)

                elif choicetype=='1':
                    if dependCol:
                        m2.questionare_master.objects.create(weightage = question_weightage,actionBy = question_requiredby,question_sub_id=insidSub,desc=question_name2Desc,qid=max_id,instypeid_id=instypeid,activity=activity,choicetype=choicetypedata,created_by=userDetails,
                        lastmodified_by=userDetails,dependending_column=dependCol,dependent_ques=dependQues,location_id=location,compulsary=compulsaryQuestion) 
                        sample = m2.questionare_master.objects.filter(qid=dependQues)[0]
                        if sample.depending_ques:
                            xx=str(sample.depending_ques) + ',' +str(max_id)
                        else:
                            xx=max_id
                        m2.questionare_master.objects.filter(qid=dependQues).update(depending_ques=xx)
                    else:
                        m2.questionare_master.objects.create(weightage = question_weightage,actionBy = question_requiredby,question_sub_id=insidSub,desc=question_name2Desc,qid=max_id,instypeid_id=instypeid,activity=activity,choicetype=choicetypedata,created_by=userDetails,
                        lastmodified_by=userDetails,location_id=location,compulsary=compulsaryQuestion)   
                elif choicetype in ['7','9','10']:
                    
                    m2.questionare_master.objects.create(weightage = question_weightage,mixedChoices=mixedChoices,actionBy = question_requiredby,question_sub_id=insidSub,desc=question_name2Desc,qid=max_id,instypeid_id=instypeid,activity=activity,choicetype=choicetypedata,created_by=userDetails,
                    lastmodified_by=userDetails,location_id=location,compulsary=compulsaryQuestion) 

                else: 
                    m2.questionare_master.objects.create(weightage = question_weightage,actionBy = question_requiredby,question_sub_id=insidSub,desc=question_name2Desc,qid=max_id,instypeid_id=instypeid,activity=activity,choicetype=choicetypedata,created_by=userDetails,
                    lastmodified_by=userDetails,location_id=location,compulsary=compulsaryQuestion)    
                lst1=list(m2.questionare_master.objects.filter(instypeid_id=instypeid_id).values())
                if lst1:
                    messages.success(request,'Data Added Successfully')
                    
                else:
                    messages.error(request,'Error while adding data')
                
            else:
                messages.error(request,'Data already exists')    
            
            return redirect('masterTable')

        elif request.method=='POST' and request.POST.get('btnaddC31'):
            choicetype=request.POST.get('choicetype')
            instypeid_id=request.POST.get('qsid')
            activity=request.POST.get('quest')
            doption=request.POST.get('drop_id')
            roption1=request.POST.get('radio_id1')
            roption2=request.POST.get('radio_id2')
            priority=request.POST.get('inlineRadioOptions')
            dependQues=request.POST.get('dependQues')
            dependCol=request.POST.get('dependCol')
            option=request.POST.getlist('demo')
            location=request.POST.get('location')
            compulsaryQuestion=request.POST.get('compulsaryQuestion')
            question_name2Desc=request.POST.get('question_name2Desc')
            question_insidSub=request.POST.get('question_insidSub')
            isid=request.POST.get('isid')
            choice_id_data = request.POST.getlist('choice_id')
            question_weightage = request.POST.get('question_weightage')
            mixedChoices=''
            for i in range(len(choice_id_data)):
                if i !=0:
                    mixedChoices = mixedChoices+'$'
                mixedChoices = mixedChoices+choice_id_data[i]
            if mixedChoices == '':
                mixedChoices = None

            question_requiredby = request.POST.get('question_requiredby')
            if not question_sub_category_master.objects.filter(sub_category = question_insidSub).exists():
                question_sub_category_master.objects.create(sub_category = question_insidSub)


            if compulsaryQuestion == 'No':
                compulsaryQuestion = False
            else:
                compulsaryQuestion = True
            date = datetime.now()
            if location == 'No':
                location=None
            
            try:
                email=str(request.user)
                userDetails=Level_Desig.objects.filter(official_email_ID=email)[0]
                userDetails = userDetails.empno.empno
                 
            except:
                userDetails = request.user.user_role 

            try:
                doption=m2.dropdown_options.objects.filter(did=doption)[0]
            except:
                pass
            try:
                temp=m2.questionare_master.objects.filter(delete_flag=False)[0]
            except:
                temp=[]

            if temp:
                max_id = m2.questionare_master.objects.aggregate(Max('qid'))['qid__max']
                max_id+=1 
            else:
                max_id=1
            choicetypedata=m2.choicetype_master.objects.filter(cid=choicetype)[0]
            instypeid=inspectiontype_master.objects.filter(instypeid=instypeid_id)[0]
            check=list(m2.questionare_master.objects.filter(instypeid_id=instypeid,activity=activity,choicetype=choicetype).values())
            if len(check)==0:
                insidSub = question_sub_category_master.objects.filter(sub_category = question_insidSub)[0]
                if choicetype=='3':
                    m2.questionare_master.objects.create(weightage = question_weightage,actionBy = question_requiredby,question_sub_id=insidSub,desc=question_name2Desc, qid=max_id,instypeid_id=instypeid,activity=activity,choicetype=choicetypedata,
                    doption=doption,created_by=userDetails,lastmodified_by=userDetails,location_id=location,compulsary=compulsaryQuestion)
                elif choicetype=='2':
                    roption1=m2.radio_options.objects.filter(rid=roption1)[0]
                    roption2=m2.radio_options.objects.filter(rid=roption2)[0]
                    option1=option[0]
                    if len(option)==2:
                        option2=option[1]
                    else:
                        option2=None
                    m2.questionare_master.objects.create(weightage = question_weightage,actionBy = question_requiredby,question_sub_id=insidSub,desc=question_name2Desc,qid=max_id,instypeid_id=instypeid,activity=activity,
                    choicetype=choicetypedata,roption1=roption1,roption2=roption2,priority=priority,option1=option1,
                    option2=option2,created_by=userDetails,lastmodified_by=userDetails,location_id=location,compulsary=compulsaryQuestion)

                elif choicetype=='1':
                    if dependCol:
                        m2.questionare_master.objects.create(weightage = question_weightage,actionBy = question_requiredby,question_sub_id=insidSub,desc=question_name2Desc,qid=max_id,instypeid_id=instypeid,activity=activity,choicetype=choicetypedata,created_by=userDetails,
                        lastmodified_by=userDetails,dependending_column=dependCol,dependent_ques=dependQues,location_id=location,compulsary=compulsaryQuestion) 
                        sample = m2.questionare_master.objects.filter(qid=dependQues)[0]
                        if sample.depending_ques:
                            xx=str(sample.depending_ques) + ',' +str(max_id)
                        else:
                            xx=max_id
                        m2.questionare_master.objects.filter(qid=dependQues).update(depending_ques=xx)
                    else:
                        m2.questionare_master.objects.create(weightage = question_weightage,actionBy = question_requiredby,question_sub_id=insidSub,desc=question_name2Desc,qid=max_id,instypeid_id=instypeid,activity=activity,choicetype=choicetypedata,created_by=userDetails,
                        lastmodified_by=userDetails,location_id=location,compulsary=compulsaryQuestion)   
                elif choicetype in ['7','9','10']:
                    
                    m2.questionare_master.objects.create(weightage = question_weightage,mixedChoices=mixedChoices,actionBy = question_requiredby,question_sub_id=insidSub,desc=question_name2Desc,qid=max_id,instypeid_id=instypeid,activity=activity,choicetype=choicetypedata,created_by=userDetails,
                    lastmodified_by=userDetails,location_id=location,compulsary=compulsaryQuestion) 
                else: 
                    m2.questionare_master.objects.create(weightage = question_weightage,actionBy = question_requiredby,question_sub_id=insidSub,desc=question_name2Desc,qid=max_id,instypeid_id=instypeid,activity=activity,choicetype=choicetypedata,created_by=userDetails,
                    lastmodified_by=userDetails,location_id=location,compulsary=compulsaryQuestion)    
                lst1=list(m2.questionare_master.objects.filter(instypeid_id=instypeid_id).values())
                if lst1:
                    messages.success(request,'Data Added Successfully')
                    
                else:
                    messages.error(request,'Error while adding data')
                
            else:
                messages.error(request,'Data already exists')    
            
            catType = 'editQues'
            result=list(inspectiontype_master.objects.filter(parent_id=isid,delete_flag=False).values())
            result6=list(m2.radio_options.objects.filter(rscore='0').values('rid','rscore','rlabel'))
            result7=list(m2.radio_options.objects.filter(rscore='1').values('rid','rscore','rlabel'))
            r6=''
            r7 = ''
            for i in range(len(result6)):
                r6 = r6 + '@'+str(result6[i]['rid'])+'#'+str(result6[i]['rlabel'])
                r7 = r7 + '@'+str(result7[i]['rid'])+'#'+str(result7[i]['rlabel'])
            return render(request,'masterTable.html',{'res7':r7,'res6':r6,'result':result,'question_insidSub':question_insidSub,'insid':isid,'insidSubEdit':instypeid_id,'catType':catType,'question_sub_category':question_sub_category,'sub_category':sub_category,'result':result,'result2':result2,'result4':result4,'result5':result5,'result6':result6,'result7':result7,'result8':result8})
        
        # update questions
        elif request.method=='POST' and request.POST.get('btnaddC32'):
            choicetype=request.POST.get('choicetype')
            instypeid_id=request.POST.get('qsid')
            activity=request.POST.get('quest')
            doption=request.POST.get('drop_id')
            roption1=request.POST.get('radio_id1')
            roption2=request.POST.get('radio_id2')
            priority=request.POST.get('inlineRadioOptions')
            dependQues=request.POST.get('dependQues')
            dependCol=request.POST.get('dependCol')
            option=request.POST.getlist('demo')
            location=request.POST.get('location')  
            updateQid=request.POST.get('updateQid')
            compulsaryQuestion=request.POST.get('compulsaryQuestion')
            question_name2Desc=request.POST.get('question_name2Desc')
            question_insidSub=request.POST.get('question_insidSub')
            question_requiredby = request.POST.get('question_requiredby')
            choice_id_data = request.POST.getlist('choice_id')
            question_weightage = request.POST.get('question_weightage')
            mixedChoices=''
            for i in range(len(choice_id_data)):
                if i !=0:
                    mixedChoices = mixedChoices+'$'
                mixedChoices = mixedChoices+choice_id_data[i]
            if mixedChoices == '':
                mixedChoices = None
            if not question_sub_category_master.objects.filter(sub_category = question_insidSub).exists():
                question_sub_category_master.objects.create(sub_category = question_insidSub)


            if compulsaryQuestion == 'No':
                compulsaryQuestion = False
            else:
                compulsaryQuestion = True
            date = datetime.now()
            if location == 'No':
                location=None
            
            try:
                email=str(request.user)
                userDetails=Level_Desig.objects.filter(official_email_ID=email)[0]
                userDetails = userDetails.empno.empno
                 
            except:
                userDetails = request.user.user_role 

            try:
                doption=m2.dropdown_options.objects.filter(did=doption)[0]
            except:
                pass
            try:
                temp=m2.questionare_master.objects.filter(delete_flag=False)[0]
            except:
                temp=[]

           
            max_id=updateQid
            choicetypedata=m2.choicetype_master.objects.filter(cid=choicetype)[0]
            instypeid=inspectiontype_master.objects.filter(instypeid=instypeid_id)[0]
            check=list(m2.questionare_master.objects.filter(instypeid_id=instypeid,activity=activity,choicetype=choicetype).values())
            
            insidSub = question_sub_category_master.objects.filter(sub_category = question_insidSub)[0]
            
          
            m2.questionare_master.objects.filter(qid=max_id).update(choicetype=None,roption1=None,roption2=None,doption=None,option1=None,option2=None,option3=None,priority=None,depending_ques=None,dependending_column=None,dependent_ques=None,compulsary=False,desc=None,question_sub_id=None)
            
            if choicetype=='3':
                if dependCol:
                    m2.questionare_master.objects.filter(qid=max_id).update(weightage = question_weightage,actionBy = question_requiredby,question_sub_id=insidSub,desc=question_name2Desc, instypeid_id=instypeid,activity=activity,choicetype=choicetypedata,
                    doption=doption,dependending_column=dependCol,dependent_ques=dependQues,created_by=userDetails,lastmodified_by=userDetails,location_id=location,compulsary=compulsaryQuestion)
                    sample = m2.questionare_master.objects.filter(qid=dependQues)[0]
                    if sample.depending_ques:
                        xx=str(sample.depending_ques) + ',' +str(max_id)
                    else:
                        xx=max_id
                    m2.questionare_master.objects.filter(qid=dependQues).update(depending_ques=xx)

                else:
                    m2.questionare_master.objects.filter(qid=max_id).update(weightage = question_weightage,actionBy = question_requiredby,question_sub_id=insidSub,desc=question_name2Desc, instypeid_id=instypeid,activity=activity,choicetype=choicetypedata,
                    doption=doption,created_by=userDetails,lastmodified_by=userDetails,location_id=location,compulsary=compulsaryQuestion)
            
            elif choicetype=='2':
                roption1=m2.radio_options.objects.filter(rid=roption1)[0]
                roption2=m2.radio_options.objects.filter(rid=roption2)[0]
                option1=option[0]
                if len(option)==2:
                    option2=option[1]
                else:
                    option2=None
                m2.questionare_master.objects.filter(qid=max_id).update(weightage = question_weightage,actionBy = question_requiredby,question_sub_id=insidSub,desc=question_name2Desc,instypeid_id=instypeid,activity=activity,
                choicetype=choicetypedata,roption1=roption1,roption2=roption2,priority=priority,option1=option1,
                option2=option2,created_by=userDetails,lastmodified_by=userDetails,location_id=location,compulsary=compulsaryQuestion)

            elif choicetype=='1':
                if dependCol:
                    m2.questionare_master.objects.filter(qid=max_id).update(weightage = question_weightage,actionBy = question_requiredby,question_sub_id=insidSub,desc=question_name2Desc,instypeid_id=instypeid,activity=activity,choicetype=choicetypedata,created_by=userDetails,
                    lastmodified_by=userDetails,dependending_column=dependCol,dependent_ques=dependQues,location_id=location,compulsary=compulsaryQuestion) 
                    sample = m2.questionare_master.objects.filter(qid=dependQues)[0]
                    if sample.depending_ques:
                        xx=str(sample.depending_ques) + ',' +str(max_id)
                    else:
                        xx=max_id
                    m2.questionare_master.objects.filter(qid=dependQues).update(depending_ques=xx)
                else:
                    m2.questionare_master.objects.filter(qid=max_id).update(weightage = question_weightage,actionBy = question_requiredby,question_sub_id=insidSub,desc=question_name2Desc,instypeid_id=instypeid,activity=activity,choicetype=choicetypedata,created_by=userDetails,
                    lastmodified_by=userDetails,location_id=location,compulsary=compulsaryQuestion)   
            
            elif choicetype in ['7','9','10']:
                    m2.questionare_master.objects.filter(qid=max_id).update(weightage = question_weightage,mixedChoices=mixedChoices,actionBy = question_requiredby,question_sub_id=insidSub,desc=question_name2Desc,instypeid_id=instypeid,activity=activity,choicetype=choicetypedata,created_by=userDetails,
                    lastmodified_by=userDetails,location_id=location,compulsary=compulsaryQuestion)
            else: 
                m2.questionare_master.objects.filter(qid=max_id).update(weightage = question_weightage,actionBy = question_requiredby,question_sub_id=insidSub,desc=question_name2Desc,instypeid_id=instypeid,activity=activity,choicetype=choicetypedata,created_by=userDetails,
                lastmodified_by=userDetails,location_id=location,compulsary=compulsaryQuestion)    
            lst1=list(m2.questionare_master.objects.filter(instypeid_id=instypeid_id).values())
            if lst1:
                messages.success(request,'Data updated Successfully')
                
            else:
                messages.error(request,'Error while adding data')
            
            
            return redirect('masterTable')

        # update category 
        if request.method=='POST' and request.POST.get('updateCategory'):
            # try:
            #     temp=inspectiontype_master.objects.filter(delete_flag=False)[0]
            # except:
            #     temp=[]
            # if temp:
            #     max_id = inspectiontype_master.objects.aggregate(Max('instypeid'))['instypeid__max']
            #     max_id+=1 
            # else:
            #     max_id=1
            instypeid = request.POST.get('update_instypeid')
            name=request.POST.get('update_name')
            shortcode=request.POST.get('update_shortcode')
            entity=request.POST.get('update_entity')  
            categoryDesc=request.POST.get('update_categoryDesc')
            departmentCategory=request.POST.get('update_departmentCategory')
            departmentCategoryDisplay  = request.POST.getlist('departmentCategoryDisplayEdit')
            if departmentCategory == 'ALL':
                departmentCategory = None
            assetCat = request.POST.get('asset_update')
            if not asset_master.objects.filter(asset_category = assetCat).exists():
                asset_master.objects.create(asset_category = assetCat)
            assetId = asset_master.objects.filter(asset_category = assetCat)[0].asset_id
            from django.core.files.storage import FileSystemStorage
            myfile = request.FILES.get('update_inspection_image',False) 
            
            if len(request.FILES) != 0:
                supdoc = request.FILES['update_inspection_image']
                folder='media/images11/'
                fs=FileSystemStorage(location=folder)  
                files=fs.save(supdoc.name,supdoc)      
                inspection_image = fs.url(files)
                inspection_image = str(inspection_image).split('media/')
                inspection_image = 'images11/'+inspection_image[1]
            else:
                inspection_image = None
            # # print(inspection_image)
            try:
                email=str(request.user)
                userDetails=Level_Desig.objects.filter(official_email_ID=email)[0]
                userDetails=userDetails.empno.empno
            except:
                userDetails=request.user.user_role
           
            try:
                textBoxentity = None
                if entity == 'NA':
                    drpodown = None
                elif entity == 'OTHERS':
                    drpodown = None
                    textBoxentity = request.POST.get('textBoxentity_update')
                else:
                    drpodown=m2.dropdown_options.objects.filter(did=entity)[0]
                if inspection_image != None:
                    inspectiontype_master.objects.filter(instypeid=instypeid).update(other_entity = textBoxentity,asset_id=assetId,concerned_dept_id=departmentCategory,desc = categoryDesc ,name=name,shortcode=shortcode,entity=drpodown,lastmodified_by=userDetails,inspection_image=inspection_image)
                    for d in departmentCategoryDisplay:
                        if m2.einspection_department_display.objects.filter(dept_id = d,instypeid_id = instypeid).exists():
                            m2.einspection_department_display.objects.filter(dept_id = d,instypeid_id = instypeid).update(lastmodified_on = datetime.now())
                        else:
                            m2.einspection_department_display.objects.create(dept_id = d,instypeid_id = instypeid,lastmodified_on = datetime.now())
                    m2.einspection_department_display.objects.filter(~Q(dept_id__in = departmentCategoryDisplay),instypeid_id = instypeid).delete()
                else:
                    inspectiontype_master.objects.filter(instypeid=instypeid).update(other_entity = textBoxentity,asset_id=assetId,concerned_dept_id=departmentCategory,desc = categoryDesc ,name=name,shortcode=shortcode,entity=drpodown,lastmodified_by=userDetails)
                    for d in departmentCategoryDisplay:
                        if m2.einspection_department_display.objects.filter(dept_id = d,instypeid_id = instypeid).exists():
                            m2.einspection_department_display.objects.filter(dept_id = d,instypeid_id = instypeid).update(lastmodified_on = datetime.now())
                        else:
                            m2.einspection_department_display.objects.create(dept_id = d,instypeid_id = instypeid,lastmodified_on = datetime.now())
                    m2.einspection_department_display.objects.filter(~Q(dept_id__in = departmentCategoryDisplay), instypeid_id = instypeid).delete()
                messages.success(request,'Data Updated Successfully')
                return redirect('masterTable')
            except:
                messages.error(request,'Error while adding data')
            
        return render(request,'masterTable.html',{'asset':asset,'question_sub_category':question_sub_category,'sub_category':sub_category,'result':result,'result2':result2,'result4':result4,'result5':result5,'result6':result6,'result7':result7,'result8':result8})
    else:
        return HttpResponseRedirect('/login') 


def upInspect(request):
    try:
        if request.method == 'GET':
            instypeid = request.GET.get('instypeid')
            if m2.einspection_details.objects.filter(instypeid_id= instypeid,delete_flag=False).exists():
                Inspection = []
                display = []
            else:
                Inspection=list(inspectiontype_master.objects.filter(instypeid=instypeid).values('instypeid','name','shortcode','entity_id','desc','inspection_image','concerned_dept_id','asset_id__asset_category','other_entity')) #values get updated in the table
                display = list(m2.einspection_department_display.objects.filter(instypeid = instypeid).values_list('dept', flat=True))
            return JsonResponse({'Inspection':Inspection,'display':display})
        return JsonResponse({'success':False},status=404)
    except:
        print("The operation can't be performed!") 




def dependent_question(request):
    if request.method=='GET':
       qsid=request.GET.get('qsid') 
       isid=request.GET.get('isid') 
       result=list(m2.questionare_master.objects.filter(instypeid_id_id=qsid,choicetype_id=3).values())
       return JsonResponse(result,safe=False)
    return JsonResponse({"success":False},status=400)


def dependColumn(request):
    if request.method=='GET':
        qsid=request.GET.get('qsid') 
        checker=m2.questionare_master.objects.filter(qid=qsid).values('doption_id')[0]
        result5=list(m2.dropdown_options.objects.filter(did=checker['doption_id']).values('table_name','column_name'))
        class_name = result5[0]['table_name']
        column_name = result5[0]['column_name']
        # # print(column_name)
        # if column_name is None:
        #     class_name = globals()[class_name]
        #     result1=list(class_name.objects.values()[0]) 
        #     result = [key for key in result1]      
        # else:
        #     result = column_name.split(',')
        class_name = globals()[class_name]
        result1=list(class_name.objects.values()[0]) 
        result = [key for key in result1]   
        context={
            'len':len(result),
           'result':result, 
        }
        return JsonResponse({'result':result,'len':len(result)})
    return JsonResponse({"success":False},status=400)


def getQuestion(request):
    if request.method == "GET":
        isid = request.GET.get('isid')
        qsid = request.GET.get('qsid')
        # result3=list(inspectiontype_master.objects.filter(~Q(parent_id='-1', delete_flag=True)).distinct('name').values('instypeid','name'))
        result=list(inspectiontype_master.objects.filter(parent_id=isid,delete_flag=False).values())
        return JsonResponse(result,safe=False)
    return JsonResponse({"success":False},status=400)

#View function for inspection category master
def viewInspect(request):
    inspect=list(inspectiontype_master.objects.filter(delete_flag=False,parent_id='-1').values().order_by('instypeid'))
    # # print(inspect)
    return JsonResponse({'inspect':inspect},safe=False)

#View function for question category master
def viewQuest(request):
    inspect=list(inspectiontype_master.objects.filter(~Q(parent_id='-1') & Q(delete_flag=False) & ~Q(parent_id=None)).values().order_by('instypeid'))
    # # print("sad: ",inspect)
    return JsonResponse({'inspect':inspect},safe=False)

#View function for Question
def viewQuest3(request):
    res1=list(m2.questionare_master.objects.filter(delete_flag=False).values().order_by('qid'))
    for i in range(len(res1)):
        lst=list(inspectiontype_master.objects.filter(instypeid=res1[i]["instypeid_id_id"]).values('name'))
        lst2=list(m2.choicetype_master.objects.filter(cid=res1[i]["choicetype_id"]).values('input_type'))
        res1[i].update({'name':lst[0]['name'], 'choicetype':lst2[0]['input_type']})
    return JsonResponse({'res1':res1},safe=False)

def drop_option(request):
    result5=list(m2.dropdown_options.objects.values('did','dmaster'))
    result6=list(m2.radio_options.objects.filter(rscore='0').values('rid','rscore','rlabel'))
    result7=list(m2.radio_options.objects.filter(rscore='1').values('rid','rscore','rlabel'))
    context={
        'result5':result5,
        'result6':result6,
        'result7':result7,
    }
    return JsonResponse(context,safe=False)


def updateQ(request):
    if request.method=='GET':
        instypeid=request.GET.get('instypeid')
        insid=request.GET.get('update_insid')
        name=request.GET.get('update_name2')   
        name2Desc=request.GET.get('update_name2Desc')
        insidSub=request.GET.get('update_insidSub')
        try:
            email=str(request.user)
            userDetails=Level_Desig.objects.filter(official_email_ID=email)[0]
            userDetails = userDetails.empno.empno
        except:
            userDetails = request.user.user_role
        
        if not sub_category_master.objects.filter(sub_category = insidSub).exists():
            sub_category_master.objects.create(sub_category = insidSub)
        try:
            res=inspectiontype_master.objects.filter(instypeid=insid)[0]
        except:
            res = ''

        try:
            drpodown=m2.dropdown_options.objects.filter(did=res.entity.did)[0]
        except:
            drpodown = None
        if res:
            insidSub = sub_category_master.objects.filter(sub_category = insidSub)[0]
            inspectiontype_master.objects.filter(instypeid = instypeid).update(desc=name2Desc,sub_category_id=insidSub.sub_id ,name=name,entity=drpodown,parent_id=insid,shortcode=res.shortcode,
            lastmodified_on=datetime.now(),lastmodified_by=userDetails)
            msg = 'Data updated Successfully'
        else:
            msg = 'Some error exists'
        return JsonResponse(msg, safe = False)
    return JsonResponse({'success':False},status=400)
   

def delQuest(request):
    if request.method=='GET':
        instypeid=request.GET.get('instypeid')  
        if m2.einspection_details.objects.filter(instypeid = instypeid,delete_flag=False).exists():
            einspstatus = 1
        elif  m2.einspection_item_detail.objects.filter(qncat = instypeid,delete_flag=False).exists():
             einspstatus = 1
        else:
            einspstatus = 0 
            inspectiontype_master.objects.filter(instypeid=instypeid).update(delete_flag=True, lastmodified_on=datetime.now())
        return JsonResponse({'success':True,'einspstatus':einspstatus},safe = False)
    return JsonResponse({'success':False},status=404)
   

def upQuest(request):
    if request.method == 'GET':
        instypeid = request.GET.get('instypeid')
        Inspection = []
        if m2.einspection_details.objects.filter(instypeid = instypeid,delete_flag=False).exists():
            msg = 'Cannot be updated, since it is used in Inspection'
        elif m2.einspection_item_detail.objects.filter(qncat = instypeid,delete_flag=False).exists():
             msg = 'Cannot be updated, since it is used in Inspection'
        else:
            Inspection = list(inspectiontype_master.objects.filter(instypeid=instypeid).values('instypeid','sub_category_id__sub_category','desc','name','parent_id'))
            # data =  list(inspectiontype_master.objects.filter(instypeid=Inspection[0]['parent_id']).values('name'))[0]['name']
            # Inspection[0].update({'parent':data})
            msg = 'Success'
        return JsonResponse({'Inspection':Inspection,'msg':msg})
    return JsonResponse({'success':False},status=404)


def updateI(request):
    try:
        if request.method=='GET':
            instypeid=request.GET.get('instypeid')
            name=request.GET.get('name')
            shortcode=request.GET.get('shortcode')
            entity=request.GET.get('entity')
            # # print("ID:",instypeid,name,shortcode,entity)
            obj=inspectiontype_master.objects.filter(instypeid=instypeid).update(name=name,shortcode=shortcode,entity=entity,parent_id='-1', lastmodified_on=datetime.now())
            custom=list(m2.custom_menu.objects.filter(Q(delete_flag=False) & Q(parent_id=2) | Q(parent_id=4)).values())
            for i in range(len(custom)):
                id=custom[i]['url'].split('/showMenu/?id=')[-1]
                # # print('ID:',id)
                if id==instypeid:
                    menu=m2.custom_menu.objects.filter(id=custom[i]['id'])[0]
                    # # print('MENU: ', menu.menu)
                    m2.custom_menu.objects.filter(menu=menu.menu).update(menu=name)
                    break
            return JsonResponse({'success':True})
        return JsonResponse({'success':False},status=400)
    except:
        print('Error')



def delInspect(request):
    if request.method=='GET':
        instypeid=request.GET.get('instypeid')
        if m2.einspection_details.objects.filter(instypeid_id= instypeid,delete_flag=False).exists():
            inspstatus = 1
        else:
            inspstatus = 0
            inspectiontype_master.objects.filter(instypeid=instypeid).update(delete_flag=True,lastmodified_on=datetime.now())
            inspectiontype_master.objects.filter(parent_id=instypeid).update(delete_flag=True,lastmodified_on=datetime.now())
            m2.questionare_master.objects.filter(instypeid_id_id__parent_id=instypeid).update(delete_flag=True,lastmodified_on=datetime.now())
        
            url='/showMenu/?id='+str(instypeid)
            m2.custom_menu.objects.filter(url=url).update(delete_flag=True)
                   
        return JsonResponse({'success':True,'inspstatus':inspstatus}, safe = False)
    return JsonResponse({'success':False},status=404)


# def upInspect(request):
#     try:
#         if request.method == 'GET':
#             instypeid = request.GET.get('instypeid')
#             if m2.einspection_details.objects.filter(instypeid_id= instypeid,delete_flag=False).exists():
#                 Inspection = []
#             else:
#                 Inspection=list(inspectiontype_master.objects.filter(instypeid=instypeid).values('instypeid','name','shortcode','entity_id','desc','inspection_image','concerned_dept_id','asset_id__asset_category','other_entity')) #values get updated in the table
#             return JsonResponse({'Inspection':Inspection})
#         return JsonResponse({'success':False},status=404)
#     except:
#         print("The operation can't be performed!") 






def updateQ3(request):
    # try:
        if request.method=='GET':
            qid=request.GET.get('qid')
            # # print('QID:',qid)
            activity=request.GET.get('activity')
            choicetype=request.GET.get('choicetype')
            doption=request.GET.get('doption')
            roption1=request.GET.get('roption1')
            roption2=request.GET.get('roption2')
            email=str(request.user)
            userDetails=Level_Desig.objects.filter(official_email_ID=email)[0]
            # # print('userDetails:',userDetails.empno) 
            # # print('userDetails:',activity,choicetype,doption,roption1,roption2) 
        try:
            doption=m2.dropdown_options.objects.filter(did=doption)[0]
            # # print(roption1,roption2,"roption")
        except:
            pass
        choicetypedata=m2.choicetype_master.objects.filter(cid=choicetype)[0]
        # # print("choices",choicetypedata)
        # # print('choicetypedata:',choicetypedata)

        if choicetype=='3':
            res=m2.questionare_master.objects.filter(qid=qid).update(activity=activity,choicetype=choicetypedata,doption=doption,lastmodified_by=userDetails.empno.empno,lastmodified_on=datetime.now())
            return JsonResponse({'success':True})
        
        elif choicetype=='2':
            roption1=m2.radio_options.objects.filter(rid=roption1)[0]
            roption2=m2.radio_options.objects.filter(rid=roption2)[0]
            # # print("radio",roption1,roption2)
            res=m2.questionare_master.objects.filter(qid=qid).update(activity=activity,choicetype=choicetypedata,roption1=roption1,roption2=roption2,lastmodified_by=userDetails.empno.empno,lastmodified_on=datetime.now())
            return JsonResponse({'success':True})
        else:
            # # print('dercfgtvty')
            # # print("act",activity,choicetypedata)
            res=m2.questionare_master.objects.filter(qid=qid).update(activity=activity,choicetype=choicetype)
            # # print('res:',res)
            return JsonResponse({'success':True})

            # return JsonResponse({'success':False}, status=400)
    # except:
    #     # # print('Error')

# def upQuest3(request):
#     if request.method == 'GET':
#         qid = request.GET.get('qid')
#         Inspection=list(m2.questionare_master.objects.filter(qid=qid).values()) #values get updated in the table
#         return JsonResponse({'Inspection':Inspection})
#     return JsonResponse({'success':False},status=404)
   
def upQuest3(request):
    if request.method == 'GET':
        qid = request.GET.get('qid')
        if m2.einspection_item_detail.objects.filter(qid= qid,delete_flag=False).exists():
            inspstatus = 1
        else:
            inspstatus = 0
        Inspection=list(m2.questionare_master.objects.filter(qid=qid).values()) #values get updated in the table
        inspId = list(inspectiontype_master.objects.filter(instypeid = Inspection[0]['instypeid_id_id']).values('parent_id'))[0]['parent_id']
        result=list(inspectiontype_master.objects.filter(parent_id=inspId,delete_flag=False).values())

        try:
            sub_category_master = list(question_sub_category_master.objects.filter(sub_id=Inspection[0]['question_sub_id_id']).values())[0]['sub_category']
        except:
            sub_category_master =''
        qsid= Inspection[0]['dependent_ques']
        try:
            resultQues=list(m2.questionare_master.objects.filter(instypeid_id_id=Inspection[0]['instypeid_id_id'],choicetype_id=3).values())
            checker=m2.questionare_master.objects.filter(qid=qsid).values('doption_id')[0]
            result5=list(m2.dropdown_options.objects.filter(did=checker['doption_id']).values('table_name','column_name'))
            class_name = result5[0]['table_name']
            column_name = result5[0]['column_name']
            class_name = globals()[class_name]
            result111=list(class_name.objects.values()[0]) 
            resultDepend = [key for key in result111]   
        except:
            resultQues = []
            resultDepend = []
        result6=list(m2.radio_options.objects.filter(rscore='0').values('rid','rscore','rlabel'))
        result7=list(m2.radio_options.objects.filter(rscore='1').values('rid','rscore','rlabel'))
        result5=list(m2.dropdown_options.objects.values('did','dmaster'))

        return JsonResponse({'result5':result5,'result7':result7,'result6':result6,'resultQues':resultQues,'resultDepend':resultDepend,'Inspection':Inspection,'inspstatus':inspstatus,'inspId':inspId,'result':result,'sub_category_master':sub_category_master})
    return JsonResponse({'success':False},status=404)
   

def delQuest3(request):
    if request.method=='GET':
        qid=request.GET.get('qid')
        if m2.einspection_item_detail.objects.filter(qid= qid,delete_flag=False).exists():
            inspstatus = 1
        else:
            inspstatus = 0
            m2.questionare_master.objects.filter(qid= qid).update(delete_flag=True,lastmodified_on=datetime.now())
        return JsonResponse({'success':True,'inspstatus':inspstatus}, safe = False)
    return JsonResponse({'success':False},status=404)
   



#############################################################################################################################################################
# USER FORM
#############################################################################################################################################################

@login_required

def frontpage(request):
    id=request.GET.get('id')
    categorynames_new=[]
    mydata2=[]
    best=''
    worst=''

    email=str(request.user)
    rail_id=list(Level_Desig.objects.filter(official_email_ID=email).values('rly_unit_id'))
   
    rail_div=list(railwayLocationMaster.objects.filter(rly_unit_code=rail_id[0]['rly_unit_id']).values('location_code'))
    # # # print('abc',rail_id[0]['rly_unit_id'])

    ############ code starts #####################3

    # 0. cards count
    name1=list(inspectiontype_master.objects.filter(parent_id=-1,delete_flag=False).values('name','instypeid','inspection_image'))
    # # # print('name1', name1)
    email=str(request.user)
    xyz=Level_Desig.objects.filter(official_email_ID=email)[0]

    for i in range(len(name1)):
        cnt=m2.einspection_details.objects.filter(instypeid_id=name1[i]['instypeid'], status=0,created_by=xyz.empno_id).count()
        name1[i].update({'cnt':cnt})

    
    # 1. graph issuewise
    
    mylist22=list(m2.einspection_details.objects.filter(created_by=xyz.empno_id).values_list('einspno',flat=True))
   
    mylist2=list(m2.einspection_item_detail.objects.filter(qid_id__isnull=True,einspno_id__in = mylist22).values('value','eitemid'))

    
    palaklistd=[]
    palaklistp=[]
    palaklistd1=[]
    palaklistp1=[]
    departnames=[]
    issuep=[]
    issued=[]
    issuep1=[]
    issued1=[]
    issuenames=[]
    ansissue={}
    # for graph1
    for i in range(len(mylist2)):
        if mylist2[i]['value'] not in ansissue:
            ansissue[mylist2[i]['value']]=[mylist2[i]['eitemid']]
        else:
            ansissue[mylist2[i]['value']].append(mylist2[i]['eitemid'])

    for key,value in ansissue.items():
        issuenames.append(key)
        palaklistd1=m2.einsp_marked.objects.filter(status_flag=4, eitemid_id__qid_id__isnull=True,eitemid_id__in=value,eitemid_id__value=key).count()
        palaklistp1=m2.einsp_marked.objects.filter(status_flag=1, eitemid_id__qid_id__isnull=True,eitemid_id__in=value,eitemid_id__value=key).count()

        # # # print(key,palaklistd1,palaklistp1)
        issued1.append(palaklistd1)
        issuep1.append(palaklistp1)

    # 2. graph-1 officerwise

    sirioff=[]
    sirioffpcnt=[]
    sirioffdcnt=[]

    officers=list(Level_Desig.objects.filter(designation_code__isnull=False,rly_unit__in=railwayLocationMaster.objects.filter(rly_unit_code__in=Level_Desig.objects.filter(official_email_ID=email).values('rly_unit_id')).values('rly_unit_code')).values('designation','empno_id').distinct().order_by('designation','empno_id'))
   
    for i in range(len(officers)):
        sirioff.append(officers[i]['designation'])  ## designations (on x axis)
        empno=officers[i]['empno_id']
        pendoff=m2.einsp_marked.objects.filter(created_by=empno,status_flag=1).count()
        doneoff=m2.einsp_marked.objects.filter(created_by=empno,status_flag=4).count()
       
        sirioffpcnt.append(pendoff)
        sirioffdcnt.append(doneoff)

    # 3. Officer schedule-suprise graph-2

    officerlist=[]
    empnolist=[]
    schedcount=[]
    surpcount=[]
    email=str(request.user)
    railid=list(Level_Desig.objects.filter(official_email_ID=email).values('rly_unit_id'))
    officers=list(Level_Desig.objects.filter(designation_code__isnull=False,rly_unit__in=railwayLocationMaster.objects.filter(rly_unit_code__in=Level_Desig.objects.filter(official_email_ID=email).values('rly_unit_id')).values('rly_unit_code')).values('designation','empno_id').distinct().order_by('designation','empno_id'))

    for i in range(len(officers)):
        officerlist.append(officers[i]['designation'])  ## designations (on x axis)
        empnolist.append(officers[i]['empno_id'])   ## empnoid=created_by in einspection_details
        empno=officers[i]['empno_id']
        sc1=m2.einspection_details.objects.filter(created_by=empno, is_scheduled=True).count()
        sc2=m2.einspection_details.objects.filter(created_by=empno, is_scheduled=False).count()
        schedcount.append(sc1)
        surpcount.append(sc2)
   
   
    # 4. Type shedule-suprise graph-2
 
    inspcount=[]     # yaxis data (scheduled)
    inspcount2=[]  # yaxis (surprize)
    typee=[]    #x axis data (scheduled)
    typee2=[]   #x axis data (surprize)
    emp_id=list(Level_Desig.objects.filter(official_email_ID=email).values())
    mycatdata=list(m2.einspection_details.objects.filter(delete_flag=False,created_by=emp_id[0]['empno_id']).values().distinct())
    temp=[]
    
    for i in range(len(mycatdata)):
     catdata=mycatdata[i]['instypeid_id']
     
     mydata=m2.einspection_details.objects.filter(created_by=emp_id[0]['empno_id'], instypeid_id=catdata,delete_flag=False, is_scheduled=True, instypeid_id__isnull=False).count()
    
     mydata2=m2.einspection_details.objects.filter(created_by=emp_id[0]['empno_id'],instypeid_id=catdata,delete_flag=False, is_scheduled=False,instypeid_id__isnull=False).count()
     category_id=mycatdata[i]['instypeid_id']
     categorynames=list(inspectiontype_master.objects.filter(instypeid=category_id).values('name'))
     try:
        categorynames_new=categorynames[0]['name']
     except:
        categorynames_new=''
     
     
     if categorynames_new not in temp and categorynames_new!='':
        typee.append(categorynames_new)
        temp.append(categorynames_new)
        inspcount.append(mydata)
        inspcount2.append(mydata2)
 

    # 5. Department graph-3
    mylist2=list(m2.einspection_details.objects.filter(created_by=xyz.empno_id,instypeid_id__isnull=True).values('dept_id','einspno'))
    # # # print("mylist1",mylist2)
    ansdepart={}
    for i in range(len(mylist2)):
        if mylist2[i]['dept_id'] not in ansdepart:
            ansdepart[mylist2[i]['dept_id']]=[mylist2[i]['einspno']]
        else:
            ansdepart[mylist2[i]['dept_id']].append(mylist2[i]['einspno'])

    
    for key,value in ansdepart.items():
        ansdeparts=list(departMast.objects.filter(department_code=key).values_list('department_name',flat=True))
        departnames.append(list(departMast.objects.filter(department_code=key).values_list('department_name',flat=True)))
        palaklistd1=m2.einsp_marked.objects.filter(status_flag=4, eitemid_id__qid_id__isnull=True,eitemid_id__einspno__in=value).count()
        palaklistp1=m2.einsp_marked.objects.filter(status_flag=1, eitemid_id__qid_id__isnull=True,eitemid_id__einspno__in=value).count()

        # # # print(key,palaklistd1,palaklistp1)
        issued.append(palaklistd1)
        issuep.append(palaklistp1)

    ## TABLE 1: ################
    # Roster Card
    userid=list(Level_Desig.objects.filter(official_email_ID=email).values('empno_id','designation_code'))
    user=userid[0]['designation_code']
    # # # print('emp', user)
 
    rosterdet=list(m2.roster_detail.objects.filter(designation=user).values())
   
   
    for i in range(len(rosterdet)):
        if rosterdet[i]['doi']:
            date1=rosterdet[i]['doi'].strftime('%d/%m/%y')
        rosterdet[i].update({'doi':date1,'slno':i+1})
    rosterlen=[]
   
    # paginator=Paginator(rosterdet, 3)
    # page_number=request.GET.get('page')
    # rosterdet=paginator.get_page(page_number)    
    # # # print('roster',rosterdet)  
    # # # print('rosterdet length',rosterlen)
    if len(rosterdet)<3:
        rlen=3-len(rosterdet)
        for i in range(rlen):
            rosterlen.append(i)
    # # # print('rosterlen', rosterlen)


    ## TABLE 2: compliance card
     ## Compliance card
    email=str(request.user)
    rly = list(Level_Desig.objects.filter(official_email_ID=email).values('rly_unit_id'))
    # # # print('rly', rly)
    ltype = list(railwayLocationMaster.objects.filter(rly_unit_code=rly[0]['rly_unit_id']).values('location_type','location_code'))
    # # # print("ltype",ltype)
    if ltype[0]['location_type'] == 'ZR':
        # # print('inside if statement')
        rly1 = list(railwayLocationMaster.objects.filter(parent_location_code=ltype[0]['location_code'],location_type='DIV').values_list('rly_unit_code',flat=True))
        desgn = list(Level_Desig.objects.filter(official_email_ID=email).values_list('designation_code',flat=True))
        desgc = list(Level_Desig.objects.filter(official_email_ID=email).values_list('designation',flat=True))
        # # # print(desgc)
    else:
        # rly1 = list(Level_Desig.objects.filter(official_email_ID=email).values_list('rly_unit_id',flat=True))
        desgn = list(Level_Desig.objects.filter(official_email_ID=email).values_list('designation_code',flat=True))
        desgc = list(Level_Desig.objects.filter(official_email_ID=email).values_list('designation',flat=True))
        # # # print(desgc)
    # # # print("rlys",rly1)
    # desgc = list(Level_Desig.objects.filter(official_email_ID=email).values('designation_code','designation'))
    # # # print(desgc)
    l1 = list(m2.einsp_marked.objects.filter(marked_to_id__in=desgn).values('eitemid_id','created_on','status_flag','created_by','id','compliance','marked_to_id'))
    # # # print('l1',l1)
    ans={}
    anstest=[]
    for i in range(len(l1)):
        l2=list(m2.einspection_item_detail.objects.filter(eitemid=l1[i]['eitemid_id']).values('value','qid_id','qncat_id','einspno_id'))
        l5=list(m2.einspection_details.objects.filter(einspno=l2[0]['einspno_id']).values('entitydetails','entityid'))
        if l2[0]['qncat_id']!='':
            pid = list(inspectiontype_master.objects.filter(instypeid=l2[0]['qncat_id']).values('parent_id'))
        if len(pid):
            ltype = list(inspectiontype_master.objects.filter(instypeid=pid[0]['parent_id']).values('name'))[0]['name']
        else:
            ltype = 'CIRI'
        
        l3=list(Level_Desig.objects.filter(empno_id=l1[i]['created_by']).values('designation_code','designation'))
        if l2[0]['qid_id']!='':
            l6=list(m2.questionare_master.objects.filter(qid=l2[0]['qid_id']).values('activity','priority'))
        if len(l6) and len(l2):    
            defi = str(l6[0]['activity'])+ " - " + str(l2[0]['value'])
        else:
            l6=list(m2.einspection_details.objects.filter(einspno=l2[0]['einspno_id']).values('priority'))
            defi = str(l2[0]['value'])
        l7=list(Level_Desig.objects.filter(designation_code=l1[i]['marked_to_id']).values('designation'))
        if l1[i]['status_flag']==1:
            st="Pending"
        else:
            st="Closed"
        if l1[i]['created_on']:
            # # # print(details[i]['inspected_on'])
            date = l1[i]['created_on'].strftime('%d/%m/%y')
        else:
            date = 'NA'
        if l1[i]['compliance']:
            comp=l1[i]['compliance']
        else:
            comp="NA"
        # defi = str(l6[0]['activity'])+ " - " + str(l2[0]['value'])
        ans.update({l1[i]['id']:{'rem':defi, 'repo':l3[0]['designation'],'date':date,'loc':ltype,'st':st,'act':l7[0]['designation'],'pr':l6[0]['priority'],'comp':comp,'entdet':l5[0]['entitydetails'],'entid':l5[0]['entityid']}})
        # # # print('ans',ans)
        anstest.append([i+1,ltype,l3[0]['designation'],date,defi])
    # # # print('anstest',anstest)
      
    ans=anstest
    # paginator=Paginator(ans, 3)
    # page_number=request.GET.get('page')
    # # # # print(page_number)
    # ans=paginator.get_page(page_number)
    anslength=[]
    if len(ans)<3:
        anslen=3-len(ans)
        for i in range(anslen):
            anslength.append(i)
   


    ######  RANKING OF TOP 10 and worst 10 STATIONS ON DIFFERENT PARAMETERS #####  

    email=str(request.user)
    rlyid=Level_Desig.objects.filter(official_email_ID=email).values('rly_unit_id','rly_unit_id__location_type','rly_unit_id__location_code')
    # # # print('rlyid', rlyid)
   
    if rlyid[0]['rly_unit_id__location_type']=='DIV':

        # station_shortcodes=list(m2.einspection_details.objects.filter(entitydetails='Station',rly_id_id_id=rlyid[0]['rly_unit_id']).values('entityid','einspno').order_by('entityid'))
        station_shortcodes=list(m2.einspection_details.objects.filter(entitydetails='Station', div_id_id_id=rlyid[0]['rly_unit_id']).values('entityid','einspno').order_by('entityid'))
        # # # print('station_shortcodes', station_shortcodes)
    elif rlyid[0]['rly_unit_id__location_type']=='ZR':
        station_shortcodes=list(m2.einspection_details.objects.filter(entitydetails='Station', rly_id_id_id=rlyid[0]['rly_unit_id']).values('entityid','einspno').order_by('entityid'))
    else:
        station_shortcodes=list(m2.einspection_details.objects.filter(entitydetails='Station').values('entityid','einspno').order_by('entityid'))

    station_names=[]
    station_names2=[]
    zone_names=[]
    quescatid=[]
    ques_cat=[]
    myids=[]
    valuelistC=[]
    valuelistP=[]
    poscnt=[]
    negcnt=[]
    poscnt1=[]  
    negcnt1=[]
    prevpos = -1
    prevneg = -1
    prevpos1 = -1
    prevneg1 = -1
    cleanans = {}
    ammenityans = {}
    cntst = 1
    cntst1=1
    for i in range(len(station_shortcodes)):
        scoreC1=0
        scoreC0=0
        scoreP1=0
        scoreP0=0
        einsnum=station_shortcodes[i]['einspno']
        ques_cat=list(m2.einspection_item_detail.objects.filter(einspno_id=einsnum).values_list('qncat_id',flat=True).distinct('qncat_id'))
       
        # # # print(ques_cat)
        clean1 = list(inspectiontype_master.objects.filter(instypeid__in=ques_cat, name='Standard of Cleanliness').values('instypeid'))
        ammenity1=list(inspectiontype_master.objects.filter(instypeid__in=ques_cat, name='Passenger Ammenities').values('instypeid'))
       
        try:
            valuelistC=list(m2.einspection_item_detail.objects.filter(einspno_id=einsnum,qncat_id=clean1[0]['instypeid']).values('value_id_id'))
           
        except:
            valuelistC=''
        try:   
            valuelistP=list(m2.einspection_item_detail.objects.filter(einspno_id=einsnum,qncat_id=ammenity1[0]['instypeid']).values('value_id_id'))
           
        except:
            valuelistP=''
           
        # # # print('valuelistC', valuelistC)
        for p in range(len(valuelistC)):
            scoreC1+=m2.radio_options.objects.filter(rid=valuelistC[p]['value_id_id'], rscore=1).count()
            scoreC0+=m2.radio_options.objects.filter(rid=valuelistC[p]['value_id_id'], rscore=0).count()
            # # # print('scoreC1', scoreC1)
            # # # print('scoreC0', scoreC0)
        if prevpos!=-1 and station_shortcodes[i-1]['entityid']==station_shortcodes[i]['entityid']:
            # # # print(cntst)
            cntst = cntst+1
            cleanans.update({station_shortcodes[i]['entityid']:{'positive':prevpos+scoreC1,'negative':prevneg+scoreC0,'cntst':cntst,'avgp':(prevpos+scoreC1)/cntst,'avgn':(prevneg+scoreC0)/cntst}})
            prevpos = prevpos+scoreC1
            prevneg = prevneg+scoreC0
        else:
            cntst = 1
            cleanans.update({station_shortcodes[i]['entityid']:{'positive':scoreC1,'negative':scoreC0,'cntst':cntst,'avgp':(scoreC1)/cntst,'avgn':(scoreC0)/cntst}})
            prevpos = scoreC1
            prevneg = scoreC0
        for j in range(len(valuelistP)):
            scoreP1+=m2.radio_options.objects.filter(rid=valuelistP[j]['value_id_id'], rscore=1).count()
            scoreP0+=m2.radio_options.objects.filter(rid=valuelistP[j]['value_id_id'], rscore=0).count()
            # # # print('scoreP1', scoreP1)
            # # # print('scoreP0', scoreP0)
        if prevpos1!=-1 and station_shortcodes[i-1]['entityid']==station_shortcodes[i]['entityid']:
            # # # print(cntst1)
            cntst1 = cntst1+1
            ammenityans.update({station_shortcodes[i]['entityid']:{'positive':prevpos1+scoreP1,'negative':prevneg1+scoreP0,'cntst':cntst1,'avgp':(prevpos1+scoreP1)/cntst1,'avgn':(prevneg1+scoreP0)/cntst1}})
            prevpos1 = prevpos1+scoreP1
            prevneg1 = prevneg1+scoreP0
            # # # print('prevpos1', prevpos1)
            # # # print('prevneg1', prevneg1)
        else:
            cntst1 = 1
            ammenityans.update({station_shortcodes[i]['entityid']:{'positive':scoreP1,'negative':scoreP0,'cntst':cntst1,'avgp':(scoreP1)/cntst1,'avgn':(scoreP0)/cntst1}})
            prevpos1 = scoreP1
            prevneg1 = scoreP0
          
    # # # print('ammenityans',ammenityans)
   
    station_names1=[]
    station_names3=[]
   
    station_names1=station_names
    station_names3=station_names2
    for i,j in cleanans.items():
            station_names.append(i)
            poscnt.append(j['avgp'])
            negcnt.append(j['avgn'])  
    station_names1=station_names

    for i,j in ammenityans.items():
        if len(station_names2)<11:
            station_names2.append(i)
            poscnt1.append(j['avgp'])
            negcnt1.append(j['avgn'])  
    station_names3=station_names2

    ######  RANKING OF TOP 5 and worst 5 Trains onboard #####
    train_shortcode=[]
    train_names=[]
    q_cat=[]
    valuelistTrain=[]
    previous_pos=-1
    previous_neg=-1
    cnttrain=1
    trainans={}
    inspect_dates=[]
                                                               
    train_shortcode=list(m2.einspection_details.objects.filter(~Q(entityid=''),entitydetails='Train',instypeid__isnull=False).values('entityid','einspno','inspected_on').order_by('entityid'))
    # # # print("Heyy",train_shortcode)
    for i in range(len(train_shortcode)):
        trscorepos=0
        trscoreneg=0
        enum=train_shortcode[i]['einspno']
        trainno=train_shortcode[i]['entityid']
       
      
       
        train_names+=train_master.objects.filter(train_no=trainno).values_list('train_name',flat=True)

 
        # # # print('train_names',train_names)
        valuelistTrain=list(m2.einspection_item_detail.objects.filter(einspno_id=enum,qid__isnull=False).values('value_id_id'))
       
        for j in range(len(valuelistTrain)):
            trscorepos+=m2.radio_options.objects.filter(rid=valuelistTrain[j]['value_id_id'], rscore=1).count()
            trscoreneg+=m2.radio_options.objects.filter(rid=valuelistTrain[j]['value_id_id'], rscore=0).count()
           
        if previous_pos!=-1 and train_shortcode[i-1]['entityid']==train_shortcode[i]['entityid']:
            # # # print(cnttrain)
            cnttrain = cnttrain+1
            x=str(train_shortcode[i]['inspected_on'])
            x=x[8:10]+'-'+x[5:7]+'-'+x[0:4]

          
            if train_shortcode[i]['entityid']!='':
                trainans.update({train_shortcode[i]['entityid']:{'inspect_date':x,'train_naam':train_names[i],'positive':previous_pos+trscorepos,'negative':previous_neg+trscoreneg,'cnttrain':cnttrain,'avgp':(previous_pos+trscorepos)/cnttrain,'avgn':(previous_neg+trscoreneg)/cnttrain}})
           
            previous_pos = previous_pos+trscorepos
            previous_neg = previous_neg+trscoreneg
        else:
            cnttrain = 1
            x=str(train_shortcode[i]['inspected_on'])
            x=x[8:10]+'-'+x[5:7]+'-'+x[0:4]
       
         
            if train_shortcode[i]['entityid']!='':
                trainans.update({train_shortcode[i]['entityid']:{'inspect_date':x,'train_naam':train_names[i],'positive':trscorepos,'negative':trscoreneg,'cnttrain':cnttrain,'avgp':(trscorepos)/cnttrain,'avgn':(trscoreneg)/cnttrain}})

            previous_pos = trscorepos
            previous_neg = trscoreneg

        # # # print('trainans',trainans.items())  
        # trainans['10582']['avgp'] = 2.0
        dict1=trainans.items()
        dict2=trainans.items()
        #sorted in decreasing order
        best= list(sorted(dict1, key = lambda x : -x[1]['avgp']))
        # # # print('hhhh',best)
        #sorted in decreasing order
        worst=list(sorted(dict2, key=lambda x : -x[1]['avgn']))
        # # # print('pppp',worst)
        ###########################



    ############ code ends ######################
    
    ################ DRM 6 graphs ################
    ############ issues reported #############
    from datetime import date,timedelta,datetime
    from dateutil.relativedelta import relativedelta
    now=date.today()
    prev=now-timedelta(days=6)
    ans_currweek=[]
    dayscurweek, count_admin,count_account, count_elec, count_mech, count_total=[],[],[],[],[],[]
    for i in range(6,-1,-1):
        rly_admin=m2.einspection_details.objects.filter(dept_id__department_name="ADMIN/GENERAL",created_on__date=prev, div_id_id=rail_id[0]['rly_unit_id']).count()
        rly_account=m2.einspection_details.objects.filter(dept_id__department_name="ACCOUNTS",created_on__date=prev,div_id_id=rail_id[0]['rly_unit_id']).count()
        rly_elec=m2.einspection_details.objects.filter(dept_id__department_name="ELECTRICAL",created_on__date=prev,div_id_id=rail_id[0]['rly_unit_id']).count()
        rly_mech=m2.einspection_details.objects.filter(dept_id__department_name="MECHANICAL",created_on__date=prev,div_id_id=rail_id[0]['rly_unit_id']).count()
        # rly_mech=m2.report_it.objects.filter( department = "MECHANICAL", reporttime__date=prev,division=rail_div).count()
       
        rly_total=m2.einspection_details.objects.filter(created_on__date=prev,div_id_id=rail_id[0]['rly_unit_id']).count()
        prev_currweek=datetime.strftime(prev, '%d-%b')
        # # # print('prevcurrweek', prev_currweek)
        dayscurweek.append(prev_currweek)
        # count_comm.append(rly_comm)
        count_mech.append(rly_mech)
        count_elec.append(rly_elec)
        count_account.append(rly_account)
        count_total.append(rly_total)
        count_admin.append(rly_admin)
       
        prev=now-timedelta(days=(i-1))  
        #current week ends

        #last four weeks issue reported
    prev=now-timedelta(days=28)
    ans_lastfourweek=[]
    dayslastfourweek,count_admin1,count_mech1,count_elec1,count_account1,count_total1=[],[],[],[],[],[]
    for i in range(3,-1,-1):
        # # # print("**************",rail_div)
        to=prev+timedelta(days=7)
        rly_admin1=m2.einspection_details.objects.filter(dept_id__department_name="ADMIN/GENERAL",created_on__gte=prev,created_on__lte=to,div_id_id=rail_id[0]['rly_unit_id']).count()
        rly_mech1=m2.einspection_details.objects.filter(dept_id__department_name="MECHANICAL",created_on__gte=prev,created_on__lte=to,div_id_id=rail_id[0]['rly_unit_id']).count()
        rly_account1=m2.einspection_details.objects.filter(dept_id__department_name="MECHANICAL",created_on__gte=prev,created_on__lte=to,div_id_id=rail_id[0]['rly_unit_id']).count()
        rly_elec1=m2.einspection_details.objects.filter(dept_id__department_name="ELECTRICAL",created_on__gte=prev,created_on__lte=to,div_id_id=rail_id[0]['rly_unit_id']).count()
       
        rly_total1=m2.einspection_details.objects.filter( created_on__gte=prev,created_on__lte=to,div_id_id=rail_id[0]['rly_unit_id']).count()
        prev_lastfourweek=datetime.strftime(prev, '%d-%b-%Y')
        # # # print('prevlastfourweek', prev_lastfourweek)
        dayslastfourweek.append(prev_lastfourweek)
        # # # print("dayslastfourweek",dayslastfourweek)
        count_admin1.append(rly_admin1)
        count_mech1.append(rly_mech1)
        count_elec1.append(rly_elec1)
        count_account1.append(rly_account1)
        count_total1.append(rly_total1)
       
        prev=prev+timedelta(days=7)  
      #last four weeks ends  


    #last twelve month issue reported
    now=datetime(2020, 1, 17)  
    ans_lasttwelvemonth=[]
    dayslasttwelvemonth,count_admin2,count_mech2,count_elec2,count_account2,count_total2=[],[],[],[],[],[]

    for i in range(11,-1,-1):
        d=now.strftime("%m")
        # # # print("******",rail_div,d)
        rly_admin=m2.einspection_details.objects.filter(dept_id__department_name="ADMIN/GENERAL",created_on__date__month=d,div_id_id=rail_id[0]['rly_unit_id']).count()
        rly_mech=m2.einspection_details.objects.filter(dept_id__department_name="Mechanical",created_on__date__month=d,div_id_id=rail_id[0]['rly_unit_id']).count()
        rly_elec=m2.einspection_details.objects.filter(dept_id__department_name="Electrical",created_on__date__month=d,div_id_id=rail_id[0]['rly_unit_id']).count()
        rly_account=m2.einspection_details.objects.filter(dept_id__department_name="Account",created_on__date__month=d,div_id_id=rail_id[0]['rly_unit_id']).count()
      
        rly_total=m2.einspection_details.objects.filter( created_on__date__month=d,div_id_id=rail_id[0]['rly_unit_id']).count()
        now_lasttwelvemonth=now.strftime("%b")
       
        # # # print('now_lasttwelvemonth', now_lasttwelvemonth)
        dayslasttwelvemonth.append(now_lasttwelvemonth)
        count_admin2.append(rly_admin)
        count_mech2.append(rly_mech)
        count_elec2.append(rly_elec)
        count_account2.append(rly_account)
        count_total2.append(rly_total)
       
        now=now+relativedelta(months=1)
        #last twelve months

    #DRM dashboard inspection

    #current week
    email=str(request.user)
    officerid=list(Level_Desig.objects.filter(official_email_ID=email).values('empno_id'))
    inspecurrweek=['Completed', 'Surprised', 'Scheduled', 'In-Progress']
   
    final_count=[]
   
   
    now=date.today()
    prev=now-timedelta(days=7)
    surprise=m2.einspection_details.objects.filter(status = "4",div_id_id=rail_id[0]['rly_unit_id'],inspected_on__date__gte=prev,inspected_on__date__lte=now,is_scheduled="False").count()
    complete=m2.einspection_details.objects.filter(status = "4",div_id_id=rail_id[0]['rly_unit_id'],inspected_on__date__gte=prev,inspected_on__date__lte=now).count()
    schedule=m2.einspection_details.objects.filter(is_scheduled="True",div_id_id=rail_id[0]['rly_unit_id'],inspected_on__date__gte=prev,inspected_on__date__lte=now).count()
    progress=m2.einspection_details.objects.filter(is_scheduled="True",div_id_id=rail_id[0]['rly_unit_id'],inspected_on__date__gte=prev,inspected_on__date__lte=now).exclude(status="4").count()
   
    final_count.append(complete)
    final_count.append(surprise)
    final_count.append(schedule)
    final_count.append(progress)
    # # # print('# # printing inspection count of current week', final_count)


    #last four weeks
    now=date.today()
    prev=now-timedelta(days=28)
    inspeclastfourweek=[]
    count_pending, count_surprise, count_complete=[],[],[]
    for i in range(3,-1,-1):
        to=prev+timedelta(days=7)
        complete=m2.einspection_details.objects.filter(status = "4",div_id_id=rail_id[0]['rly_unit_id'],inspected_on__date__gte=prev,inspected_on__date__lte=to).count()
        pending=m2.einspection_details.objects.filter(is_scheduled="True",div_id_id=rail_id[0]['rly_unit_id'],inspected_on__date__gte=prev,inspected_on__date__lte=to).exclude(status="4").count()
        surprise=m2.einspection_details.objects.filter(is_scheduled="True",div_id_id=rail_id[0]['rly_unit_id'],inspected_on__date__gte=prev,inspected_on__date__lte=to).count()
     
        inspecprev_lastfourweek=datetime.strftime(prev, '%d-%b-%Y')
        inspeclastfourweek.append(inspecprev_lastfourweek)
        count_complete.append(complete)
        count_pending.append(pending)
        count_surprise.append(surprise)
        # # # print('# # printing inspection counts last four weeks', prev, count_complete, count_pending, count_surprise)

        prev=prev+timedelta(days=7)  


        #last twelve months
    now=datetime(2020, 1, 17)
    inspeclasttwelvemonth=[]
    count_complete1, count_pending1, count_surprise1=[],[],[]
    for i in range(11,-1,-1):
        d=now.strftime("%m")
        complete=m2.einspection_details.objects.filter(status = "4",div_id_id=rail_id[0]['rly_unit_id'],inspected_on__date__month=d).count()
        pending=m2.einspection_details.objects.filter(is_scheduled="True",div_id_id=rail_id[0]['rly_unit_id'],inspected_on__date__month=d).exclude(status="4").count()
        surprise=m2.einspection_details.objects.filter(is_scheduled="True",div_id_id=rail_id[0]['rly_unit_id'],inspected_on__date__month=d).count()

     
        # # # print('# # printing inspection counts last twelve months', now, count_pending1, count_complete1, count_surprise1)
        now_lasttwelvemonth=now.strftime("%b")
        inspeclasttwelvemonth.append(now_lasttwelvemonth)
        count_complete1.append(complete)
        count_pending1.append(pending)
        count_surprise1.append(surprise)
        now=now+relativedelta(months=+1)


    ## DRM graphs ENDS

  ################ Date range code ########################

    from datetime import timedelta
   
    testcard='ALL'

    ######  last 7 days ########

    inspcount1=[]     # yaxis data (scheduled)
    inspcount22=[]  # yaxis (surprize)
    typee1=[]    #x axis data (scheduled)
    typee2=[]   #x axis data (surprize)

    officerlist1=[]
    empnolist1=[]
    schedcount1=[]
    surpcount1=[]

    noissues11=[]
    noissues22=[]
    nodept1=[]

    xcnt11=[]
    ycnt11=[]
    lstx1=[]
    defpend1=[]
    defiss1=[]

    sirioff1=[]
    sirioffpcnt1=[]


    ####last 4 weeks#####
    inspcount14=[]     # yaxis data (scheduled)
    inspcount24=[]  # yaxis (surprize)
   
    typee14=[]    #x axis data (scheduled)
    typee24=[]   #x axis data (surprize)

    officerlist4=[]
    empnolist4=[]
    schedcount4=[]
    surpcount4=[]

    noissues14=[]
    noissues24=[]
    nodept4=[]

    xcnt14=[]
    ycnt14=[]
    lstx4=[]
    defpend4=[]
    defiss4=[]

    sirioff4=[]
    sirioffpcnt4=[]

    ####last 12 weeks#####
    inspcount112=[]     # yaxis data (scheduled)
    inspcount212=[]  # yaxis (surprize)
   
    typee112=[]    #x axis data (scheduled)

    officerlist12=[]
    empnolist12=[]
    schedcount12=[]
    surpcount12=[]

    noissues112=[]
    noissues212=[]
    nodept12=[]

    xcnt112=[]
    ycnt112=[]
    lstx12=[]
    defpend12=[]
    defiss12=[]

    sirioff12=[]
    sirioffpcnt12=[]
 
    dayscurweeksiri,count_commsiri,count_mechsiri,count_stsiri,count_enngsiri,count_totalsiri=[],[],[],[],[],[]
    dayslastfourweeksiri,count_comm1siri,count_mech1siri,count_st1siri,count_enng1siri,count_total1siri=[],[],[],[],[],[]
    dayslasttwelvemonthsiri,count_comm2siri,count_mech2siri,count_st2siri,count_enng2siri,count_total2siri=[],[],[],[],[],[]
    dayscurweeksched, cnt_footplate, cnt_onboard, cnt_station, cnt_running, cnt_level=[],[],[],[],[],[]
    dayslastfourweeksched, cnt_footplate1, cnt_onboard1, cnt_station1, cnt_running1, cnt_level1=[],[],[],[],[],[]
    dayslasttwelvemonthsched, cnt_footplate2, cnt_onboard2, cnt_station2, cnt_running2, cnt_level2=[],[],[],[],[],[]
    departnames7,issuep7,issued7=[],[],[]
    departnames4,issuep4,issued4=[],[],[]
    departnames12,issuep12,issued12=[],[],[]
    issuenames71,issuep71,issued71=[],[],[]
    issuenames41,issuep41,issued41=[],[],[]
    issuenames121,issuep121,issued121=[],[],[]

         
    if request.method == 'POST':
        # # # print('palak2')
        submitvalue=request.POST.get('submit')
        # # # print('siri last 7', submitvalue)
        if submitvalue=='sum2':
            testcard='7-DAYS'
            now = datetime.today()
            prev=now-timedelta(days=6)
            daterange=str(prev.strftime('%d/%m/%y'))+' - '+str(now.strftime('%d/%m/%y'))
            ans_currweek=[]
           
            ####schedule-surprise-type####
            mycatdata=list(m2.einspection_details.objects.filter(delete_flag=False).values().distinct())
   
            temp=[]
            emp_id=list(Level_Desig.objects.filter(official_email_ID=email).values())
            officer_id=list(m1.empmast.objects.filter(email=email).values('empno'))
            for i in range(len(mycatdata)):
                catdata=mycatdata[i]['instypeid_id']
   
                mydata=m2.einspection_details.objects.filter(created_by=emp_id[0]['empno_id'], instypeid_id=catdata,delete_flag=False, is_scheduled=True,inspected_on__date__gte=prev).count()
                # # # print('My data: ',mydata)
                mydata2=m2.einspection_details.objects.filter(created_by=emp_id[0]['empno_id'],instypeid_id=catdata,delete_flag=False, is_scheduled=False,inspected_on__date__gte=prev).count()
                category_id=mycatdata[i]['instypeid_id']
               
                categorynames=list(inspectiontype_master.objects.filter(instypeid=category_id).values('name'))
                if len(categorynames):
                    categorynames_new=categorynames[0]['name']
                #  categorynames=mycatdata[i]['inspection_title']
     
     
            if categorynames_new not in temp:
                typee1.append(categorynames_new)
                temp.append(categorynames_new)
                inspcount1.append(mydata)
                inspcount22.append(mydata2)

            # # # print('typee1', typee1)
            # # # print('inspcount1', inspcount1)
            # # # print('inspcount22', inspcount22)




            ## officerwise sched-surprise ##
            email=str(request.user)
            railid=list(Level_Desig.objects.filter(official_email_ID=email).values('rly_unit_id'))
            officers=list(Level_Desig.objects.filter(rly_unit_id=railid[0]['rly_unit_id']).values('designation', 'empno_id'))

            for i in range(len(officers)):
                # myofficer=officers[0]['designation']
                officerlist1.append(officers[0]['designation'])  ## designations (on x axis)
                empnolist1.append(officers[0]['empno_id'])   ## empnoid=created_by in einspection_details
                empno=officers[0]['empno_id']
                sc1=m2.einspection_details.objects.filter(created_by=empno, is_scheduled=True,inspected_on__date__gte=prev).count()
                sc2=m2.einspection_details.objects.filter(created_by=empno, is_scheduled=False,inspected_on__date__gte=prev).count()
                schedcount1.append(sc1)
                surpcount1.append(sc2)
       
            #####Issues Department ###
           
            email=str(request.user)
            mylist1=list(m2.einspection_details.objects.values('dept_id', 'einspno').distinct('dept_id'))
            for i in range(len(mylist1)):  
                deptd=list(m2.einsp_marked.objects.filter(status_flag=4,eitemid_id__qid_id__isnull=True,eitemid_id__einspno_id__dept_id=mylist1[i]['dept_id'],created_on__date=prev).values('eitemid_id__einspno_id__dept_id__department_name'))
                deptp=list(m2.einsp_marked.objects.filter(status_flag=1,eitemid_id__qid_id__isnull=True,eitemid_id__einspno_id__dept_id=mylist1[i]['dept_id'],created_on__date=prev).values('eitemid_id__einspno_id__dept_id__department_name'))
            issuep7.append(len(deptp))
            issued7.append(len(deptd))
            if len(deptd) and len(deptp):
                departnames7.append(deptd[i]['eitemid_id__einspno_id__dept_id__department_name'])
            elif len(deptd) and len(deptp) == 0:
                departnames7.append(deptd[i]['eitemid_id__einspno_id__dept_id__department_name'])
            elif len(deptp) and len(deptd) ==0 :
                departnames7.append(deptp[i]['eitemid_id__einspno_id__dept_id__department_name'])  
          
            #  deficiency issuewise##
            mylist2=list(m2.einspection_item_detail.objects.filter(qid_id__isnull=True).values('value').distinct('value'))
            for i in range(len(mylist2)):
                palaklistd1=list(m2.einsp_marked.objects.filter(status_flag=4, eitemid_id__qid_id__isnull=True,eitemid_id__value=mylist2[i]['value'],created_on__date=prev).values('eitemid_id__value'))
                palaklistp1=list(m2.einsp_marked.objects.filter(status_flag=1, eitemid_id__qid_id__isnull=True,eitemid_id__value=mylist2[i]['value'],created_on__date=prev).values('eitemid_id__value'))
        # # # print('palaklistd1',palaklistd1,len(palaklistd1))
        # # # print('palaklistp1',palaklistp1,len(palaklistp1))
            if len(palaklistp1) or len(palaklistd1):
                issuep71.append(len(palaklistp1))  
                issued71.append(len(palaklistd1))
   
            if len(palaklistd1) and len(palaklistp1):
                issuenames71.append(palaklistd1[0]['eitemid_id__value'])
            elif len(palaklistd1) and len(palaklistp1) == 0:
                # print('ooisk',palaklistd1[0]['eitemid_id__value'])
                issuenames71.append(palaklistd1[0]['eitemid_id__value'])
            elif len(palaklistp1) and len(palaklistd1) == 0:
                # print('qwerty',palaklistd1[0]['eitemid_id__value'])
                issuenames71.append(palaklistp1[0]['eitemid_id__value'])
            # employ_id =Level_Desig.objects.filter(official_email_ID=request.user)[0]
          

            ## officerwise deficiency
            email=str(request.user)
            railid=list(Level_Desig.objects.filter(official_email_ID=email).values('rly_unit_id'))
            officers=list(Level_Desig.objects.filter(rly_unit_id=railid[0]['rly_unit_id']).values('designation', 'empno_id'))
   
            for i in range(len(officers)):
                # myofficer=officers[0]['designation']
                sirioff1.append(officers[0]['designation'])  ## designations (on x axis)
                # empnolist.append(officers[0]['empno_id'])   ## empnoid=created_by in einspection_details
                empno=officers[0]['empno_id']
                pendoff=m2.einsp_marked.objects.filter(created_by=empno,created_on__date__gte=prev).count()
       
                sirioffpcnt1.append(pendoff)
       
            # # print('sirioff', sirioff)
            # # print('sirioffpcnt', sirioffpcnt)
   
       

       
        #current week ends


        # last four weeks
       
        # # print('palak3')
        if submitvalue=='sum3':
            testcard='4-WEEKS'
            now = datetime.today()
            # # print(" siri last four weeks ",prev)
            prev4=now-timedelta(days=28)
            to4=prev4+timedelta(days=7)
            daterange=str(prev4.strftime('%d/%m/%y'))+' - '+str(now.strftime('%d/%m/%y'))
            ans_lastfourweek=[]
           
         
            ####schedule-surprise-type####
            mycatdata=list(m2.einspection_details.objects.filter(delete_flag=False).values().distinct())
   
            temp=[]
            emp_id=list(Level_Desig.objects.filter(official_email_ID=email).values())
            officer_id=list(m1.empmast.objects.filter(email=email).values('empno'))
            for i in range(len(mycatdata)):
                catdata=mycatdata[i]['instypeid_id']
   
                mydata=m2.einspection_details.objects.filter(created_by=emp_id[0]['empno_id'], instypeid_id=catdata,delete_flag=False, is_scheduled=True,inspected_on__date__gte=prev4).count()
                # # print('My data: ',mydata)
                mydata2=m2.einspection_details.objects.filter(created_by=emp_id[0]['empno_id'],instypeid_id=catdata,delete_flag=False, is_scheduled=False,inspected_on__date__gte=prev4).count()
                category_id=mycatdata[i]['instypeid_id']
               
                categorynames=list(inspectiontype_master.objects.filter(instypeid=category_id).values('name'))
             
                if len(categorynames):
                    categorynames_new=categorynames[0]['name']    
                #  categorynames=mycatdata[i]['inspection_title']
     
     
            if categorynames_new not in temp:
                typee14.append(categorynames_new)
                temp.append(categorynames_new)
                inspcount14.append(mydata)
                inspcount24.append(mydata2)

       
            ## officerwise sched-surprise ##
            email=str(request.user)
            railid=list(Level_Desig.objects.filter(official_email_ID=email).values('rly_unit_id'))
            officers=list(Level_Desig.objects.filter(rly_unit_id=railid[0]['rly_unit_id']).values('designation', 'empno_id'))

            for i in range(len(officers)):
                # myofficer=officers[0]['designation']
                officerlist4.append(officers[0]['designation'])  ## designations (on x axis)
                empnolist4.append(officers[0]['empno_id'])   ## empnoid=created_by in einspection_details
                empno=officers[0]['empno_id']
                sc1=m2.einspection_details.objects.filter(created_by=empno, is_scheduled=True,inspected_on__date__gte=prev4).count()
                sc2=m2.einspection_details.objects.filter(created_by=empno, is_scheduled=False,inspected_on__date__gte=prev4).count()
                schedcount4.append(sc1)
                surpcount4.append(sc2)
            # # print('officerlist4', officerlist4)
            # # print('empnolist4', empnolist4)
            # # print('schedcount4', schedcount4)
            # # print('surpcount4', surpcount4)  


            #####Issues Department###
            email=str(request.user)
            mylist1=list(m2.einspection_details.objects.values('dept_id', 'einspno').distinct('dept_id'))
            for i in range(len(mylist1)):  
                deptd=list(m2.einsp_marked.objects.filter(status_flag=4,eitemid_id__qid_id__isnull=True,eitemid_id__einspno_id__dept_id=mylist1[i]['dept_id'],created_on__gte=prev4,created_on__lte=to4).values('eitemid_id__einspno_id__dept_id__department_name'))
                deptp=list(m2.einsp_marked.objects.filter(status_flag=1,eitemid_id__qid_id__isnull=True,eitemid_id__einspno_id__dept_id=mylist1[i]['dept_id'],created_on__gte=prev4,created_on__lte=to4).values('eitemid_id__einspno_id__dept_id__department_name'))
            issuep4.append(len(deptp))
            issued4.append(len(deptd))
            if len(deptd) and len(deptp):
                departnames4.append(deptd[i]['eitemid_id__einspno_id__dept_id__department_name'])
            elif len(deptd) and len(deptp) == 0:
                departnames4.append(deptd[i]['eitemid_id__einspno_id__dept_id__department_name'])
            elif len(deptp) and len(deptd) ==0 :
                departnames4.append(deptp[i]['eitemid_id__einspno_id__dept_id__department_name'])
            # mylist=list(m2.report_it.objects.values('department').distinct())
        

            #  deficiency issuewise##
            mylist2=list(m2.einspection_item_detail.objects.filter(qid_id__isnull=True).values('value').distinct('value'))
            for i in range(len(mylist2)):
                palaklistd1=list(m2.einsp_marked.objects.filter(status_flag=4, eitemid_id__qid_id__isnull=True,eitemid_id__value=mylist2[i]['value'],created_on__gte=prev4,created_on__lte=to4).values('eitemid_id__value'))
                palaklistp1=list(m2.einsp_marked.objects.filter(status_flag=1, eitemid_id__qid_id__isnull=True,eitemid_id__value=mylist2[i]['value'],created_on__gte=prev4,created_on__lte=to4).values('eitemid_id__value'))
        # # print('palaklistd1',palaklistd1,len(palaklistd1))
        # # print('palaklistp1',palaklistp1,len(palaklistp1))
            if len(palaklistp1) or len(palaklistd1):
                issuep41.append(len(palaklistp1))  
                issued41.append(len(palaklistd1))
   
            if len(palaklistd1) and len(palaklistp1):
                issuenames41.append(palaklistd1[0]['eitemid_id__value'])
            elif len(palaklistd1) and len(palaklistp1) == 0:
                # print('ooisk',palaklistd1[0]['eitemid_id__value'])
                issuenames41.append(palaklistd1[0]['eitemid_id__value'])
            elif len(palaklistp1) and len(palaklistd1) == 0:
                # print('qwerty',palaklistd1[0]['eitemid_id__value'])
                issuenames41.append(palaklistp1[0]['eitemid_id__value'])
            # employ_id =Level_Desig.objects.filter(official_email_ID=request.user)[0]
           

            ## officerwise deficiency
            email=str(request.user)
            railid=list(Level_Desig.objects.filter(official_email_ID=email).values('rly_unit_id'))
            officers=list(Level_Desig.objects.filter(rly_unit_id=railid[0]['rly_unit_id']).values('designation', 'empno_id'))
   
            for i in range(len(officers)):
                # myofficer=officers[0]['designation']
                sirioff4.append(officers[0]['designation'])  ## designations (on x axis)
                # empnolist.append(officers[0]['empno_id'])   ## empnoid=created_by in einspection_details
                empno=officers[0]['empno_id']
                pendoff=m2.einsp_marked.objects.filter(created_by=empno,created_on__date__gte=prev4).count()
       
                sirioffpcnt4.append(pendoff)


       
       
        ## last 12 months ##
       
        # # print('palak4')
        if submitvalue=='sum4':
            testcard='12-MONTHS'
            # # print(" siri last twelve months ",prev)
            now = datetime(2020,1,17)
            d=now.strftime("%m")
            # # print(" siri last four weeks ",prev)
            prev12=now-timedelta(days=365)
            daterange=str(prev12.strftime('%d/%m/%y'))+' - '+str(now.strftime('%d/%m/%y'))
           

                   
            ####schedule-surprise-type####
            mycatdata=list(m2.einspection_details.objects.filter(delete_flag=False).values().distinct())
   
            temp=[]
            emp_id=list(Level_Desig.objects.filter(official_email_ID=email).values())
            officer_id=list(m1.empmast.objects.filter(email=email).values('empno'))
            for i in range(len(mycatdata)):
                catdata=mycatdata[i]['instypeid_id']
   
                mydata=m2.einspection_details.objects.filter(created_by=emp_id[0]['empno_id'], instypeid_id=catdata,delete_flag=False, is_scheduled=True,inspected_on__date__gte=prev12).count()
                # # print('My data: ',mydata)
                mydata2=m2.einspection_details.objects.filter(created_by=emp_id[0]['empno_id'],instypeid_id=catdata,delete_flag=False, is_scheduled=False,inspected_on__date__gte=prev12).count()
                category_id=mycatdata[i]['instypeid_id']
                categorynames=list(inspectiontype_master.objects.filter(instypeid=category_id).values('name'))
                if len(categorynames):
                    categorynames_new=categorynames[0]['name']
                # categorynames_new=categorynames[0]['name']
                #  categorynames=mycatdata[i]['inspection_title']
     
     
            if categorynames_new not in temp:
                typee112.append(categorynames_new)
                temp.append(categorynames_new)
                inspcount112.append(mydata)
                inspcount212.append(mydata2)

         
            ## officerwise sched-surprise ##
            email=str(request.user)
            railid=list(Level_Desig.objects.filter(official_email_ID=email).values('rly_unit_id'))
            officers=list(Level_Desig.objects.filter(rly_unit_id=railid[0]['rly_unit_id']).values('designation', 'empno_id'))

            for i in range(len(officers)):
                # myofficer=officers[0]['designation']
                officerlist12.append(officers[0]['designation'])  ## designations (on x axis)
                empnolist12.append(officers[0]['empno_id'])   ## empnoid=created_by in einspection_details
                empno=officers[0]['empno_id']
                sc1=m2.einspection_details.objects.filter(created_by=empno, is_scheduled=True,inspected_on__date__gte=prev12).count()
                sc2=m2.einspection_details.objects.filter(created_by=empno, is_scheduled=False,inspected_on__date__gte=prev12).count()
                schedcount12.append(sc1)
                surpcount12.append(sc2)
           


          
            mylist1=list(m2.einspection_details.objects.values('dept_id', 'einspno').distinct('dept_id'))
            for i in range(len(mylist1)):  
                deptd=list(m2.einsp_marked.objects.filter(status_flag=4,eitemid_id__qid_id__isnull=True,eitemid_id__einspno_id__dept_id=mylist1[i]['dept_id'],created_on__date__month=d).values('eitemid_id__einspno_id__dept_id__department_name'))
                deptp=list(m2.einsp_marked.objects.filter(status_flag=1,eitemid_id__qid_id__isnull=True,eitemid_id__einspno_id__dept_id=mylist1[i]['dept_id'],created_on__date__month=d).values('eitemid_id__einspno_id__dept_id__department_name'))
            issuep12.append(len(deptp))
            issued12.append(len(deptd))
            if len(deptd) and len(deptp):
                departnames12.append(deptd[i]['eitemid_id__einspno_id__dept_id__department_name'])
            elif len(deptd) and len(deptp) == 0:
                departnames12.append(deptd[i]['eitemid_id__einspno_id__dept_id__department_name'])
            elif len(deptp) and len(deptd) ==0 :
                departnames12.append(deptp[i]['eitemid_id__einspno_id__dept_id__department_name'])



             #  deficiency issuewise##
            mylist2=list(m2.einspection_item_detail.objects.filter(qid_id__isnull=True).values('value').distinct('value'))
            for i in range(len(mylist2)):
                palaklistd1=list(m2.einsp_marked.objects.filter(status_flag=4, eitemid_id__qid_id__isnull=True,eitemid_id__value=mylist2[i]['value'],created_on__date__month=d).values('eitemid_id__value'))
                palaklistp1=list(m2.einsp_marked.objects.filter(status_flag=1, eitemid_id__qid_id__isnull=True,eitemid_id__value=mylist2[i]['value'],created_on__date__month=d).values('eitemid_id__value'))
        # # print('palaklistd1',palaklistd1,len(palaklistd1))
        # # print('palaklistp1',palaklistp1,len(palaklistp1))
            if len(palaklistp1) or len(palaklistd1):
                issuep121.append(len(palaklistp1))  
                issued121.append(len(palaklistd1))
   
            if len(palaklistd1) and len(palaklistp1):
                issuenames121.append(palaklistd1[0]['eitemid_id__value'])
            elif len(palaklistd1) and len(palaklistp1) == 0:
                # print('ooisk',palaklistd1[0]['eitemid_id__value'])
                issuenames121.append(palaklistd1[0]['eitemid_id__value'])
            elif len(palaklistp1) and len(palaklistd1) == 0:
                # print('qwerty',palaklistd1[0]['eitemid_id__value'])
                issuenames121.append(palaklistp1[0]['eitemid_id__value'])
           
            ## officerwise deficiency
            email=str(request.user)
            railid=list(Level_Desig.objects.filter(official_email_ID=email).values('rly_unit_id'))
            officers=list(Level_Desig.objects.filter(rly_unit_id=railid[0]['rly_unit_id']).values('designation', 'empno_id'))
   
            for i in range(len(officers)):
                # myofficer=officers[0]['designation']
                sirioff12.append(officers[0]['designation'])  ## designations (on x axis)
                # empnolist.append(officers[0]['empno_id'])   ## empnoid=created_by in einspection_details
                empno=officers[0]['empno_id']
                pendoff=m2.einsp_marked.objects.filter(created_by=empno,created_on__date__gte=prev12).count()
       
                sirioffpcnt12.append(pendoff)

    context={
        'best':best,
        'worst':worst,
        # 'submitvalue':submitvalue,
        'station_names1':station_names1,
        'station_names':station_names,
        'station_names2':station_names2,
        'station_names3':station_names3,
        'poscnt':poscnt,
        'negcnt':negcnt,
        'poscnt1':poscnt1,
        'negcnt1':negcnt1,
        'anslength':anslength,
        'ans':ans,
      
        'rosterlen':rosterlen,
        
         'sirioff':sirioff,
         'sirioffpcnt':sirioffpcnt,
         'sirioffdcnt':sirioffdcnt,
       
   
      
        

        'schedcount':schedcount,
        'surpcount':surpcount,
        'officerlist':officerlist,

        'dayslasttwelvemonthsched':dayslasttwelvemonthsched,
        'cnt_footplate2':cnt_footplate2,
        'cnt_onboard2':cnt_onboard2,
        'cnt_station2':cnt_station2,
        'cnt_running2':cnt_running2,
        'cnt_level2':cnt_level2,

        'dayslastfourweeksched':dayslastfourweeksched,
        'cnt_footplate1':cnt_footplate1,
        'cnt_onboard1':cnt_onboard1,
        'cnt_station1':cnt_station1,
        'cnt_running1':cnt_running1,
        'cnt_level1':cnt_level1,

        'dayscurweeksched':dayscurweeksched,
        'cnt_footplate':cnt_footplate,
        'cnt_onboard':cnt_onboard,
        'cnt_station':cnt_station,
        'cnt_running':cnt_running,
        'cnt_level':cnt_level,
        'testcard':testcard,
        'rail_div':rail_div,

        'inspecurrweek':inspecurrweek,
        'final_count':final_count,
        'inspeclasttwelvemonth':inspeclasttwelvemonth,
        'count_complete1':count_complete1,
        'count_pending1':count_pending1,
        'count_surprise1':count_surprise1,
        'inspeclastfourweek':inspeclastfourweek,
        'count_complete':count_complete,
        'count_pending':count_pending,
        'count_surprise':count_surprise,

        'dayscurweek':dayscurweek,
        'count_admin':count_admin,
        'count_mech':count_mech,
        'count_elec':count_elec,
        'count_account':count_account,
        'count_total':count_total,

        'dayscurweeksiri':dayscurweeksiri,
        'count_commsiri':count_commsiri,
        'count_mechsiri':count_mechsiri,
        'count_stsiri':count_stsiri,
        'count_enngsiri':count_enngsiri,
        'count_totalsiri':count_totalsiri,

        'dayslastfourweek':dayslastfourweek,
        'count_admin1':count_admin1,
        'count_mech1':count_mech1,
        'count_elec1':count_elec1,
        'count_account1':count_account1,
        'count_total1':count_total1,

        'dayslastfourweeksiri':dayslastfourweeksiri,
        'count_comm1siri':count_comm1siri,
        'count_mech1siri':count_mech1siri,
        'count_st1siri':count_st1siri,
        'count_enng1siri':count_enng1siri,
        'count_total1siri':count_total1siri,

        'dayslasttwelvemonth':dayslasttwelvemonth,
        'count_admin2':count_admin2,
        'count_mech2':count_mech2,
        'count_elec2':count_elec2,
        'count_account2':count_account2,
        'count_total2':count_total2,

        'dayslasttwelvemonthsiri':dayslasttwelvemonthsiri,
        'count_comm2siri':count_comm2siri,
        'count_mech2siri':count_mech2siri,
        'count_st2siri':count_st2siri,
        'count_enng2siri':count_enng2siri,
        'count_total2siri':count_total2siri,

        #####last 7 days####
        'inspcount1':inspcount1,
        'inspcount22':inspcount22,
   
        'typee1':typee1,
        'typee2':typee2,

        'officerlist1':officerlist1,
        'empnolist1':empnolist1,
        'schedcount1':schedcount1,
        'surpcount1':surpcount1,

      
        'departnames7':departnames7,
        'issuep7':issuep7,
        'issued7':issued7,
        'issuenames71':issuenames71,
        'issuep71':issuep71,
        'issued71':issued71,
       
       


        'xcnt11':xcnt11,
        'ycnt11':ycnt11,
        'lstx1':lstx1,
        'defpend1':defpend1,
        'defiss1':defiss1,

        'sirioff1':sirioff1,
        'sirioffpcnt1':sirioffpcnt1,

        ####last 4 weeks#####
        'inspcount14':inspcount14,  
        'inspcount24':inspcount24,
        'typee14':typee14,  
        'typee24':typee24,  

        'officerlist4':officerlist4,
        'empnolist4':empnolist4,
        'schedcount4':schedcount4,
        'surpcount4':surpcount4,

        # 'noissues14':noissues14,
        # 'noissues24':noissues24,
        # 'nodept4':nodept4,
        'departnames4':departnames4,
        'issuep4':issuep4,
        'issued4':issued4,
        'issuenames41':issuenames41,
        'issuep41':issuep41,
        'issued41':issued41,

        'xcnt14':xcnt14,
        'ycnt14':ycnt14,
        'lstx4':lstx4,
        'defpend4':defpend4,
        'defiss4':defiss4,

        'sirioff4':sirioff4,
        'sirioffpcnt4':sirioffpcnt4,


        ####last 12 weeks#####
        'inspcount112': inspcount112,    
        'inspcount212': inspcount212,
        'typee112': typee112,

        'officerlist12':officerlist12,
        'empnolist12':empnolist12,
        'schedcount12':schedcount12,
        'surpcount12':surpcount12,

        # 'noissues112':noissues112,
        # 'noissues212':noissues212,
        # 'nodept12':nodept12,
        'departnames12':departnames12,
        'issuep12':issuep12,
        'issued12':issued12,
        'issuenames121':issuenames121,
        'issuep121':issuep121,
        'issued121':issued121,

        'xcnt112':xcnt112,
        'ycnt112':ycnt112,
        'lstx12':lstx12,
        'defpend12':defpend12,
        'defiss12':defiss12,

        'sirioff12':sirioff12,
        'sirioffpcnt12':sirioffpcnt12,


        'card': name1,
        # 'ajaxdata':ajaxdata,
        # first 3 graphs
        'departnames':departnames,
        'issuep':issuep,
        'issued':issued,
        'issuenames':issuenames,
        'issuep1':issuep1,
        'issued1':issued1,
        'typee':typee,
        'inspcount':inspcount,
        'inspcount2':inspcount2,
       
        'typee2':typee2,
      
        'date':date,
        'now':now,
       
        'rosterdet':rosterdet,
       
    }
    return render(request,'frontpage.html',context)

@login_required
def train_repo(request):
    trains=list(train_master.objects.values('train_name','tnid','train_no'))
    selectedtrain=request.GET.get('selectedtrain')
    # # print('select train1',selectedtrain)
   
    train_shortcode=[]
    train_names=[]
    q_cat=[]
    valuelistTrain=[]
    previous_pos=-1
    previous_neg=-1
    cnttrain=1
    trainans={}
    inspect_dates=[]
    train_shortcode=list(m2.einspection_details.objects.filter(entitydetails='Train', entityid=selectedtrain,instypeid__isnull=False).values('entityid','einspno','inspected_on').order_by('entityid'))
    for i in range(len(train_shortcode)):
        trscorepos=0
        trscoreneg=0
        enum=train_shortcode[i]['einspno']
        trainno=train_shortcode[i]['entityid']
        train_names+=list(train_master.objects.filter(train_no=trainno).values_list('train_name',flat=True))
        # inspect_dates.append(train_shortcode[i]['inspected_on'])
        # # print('inspect_dates',inspect_dates)
 
        # # print('train_names',train_names)
        valuelistTrain=list(m2.einspection_item_detail.objects.filter(einspno_id=enum,qid__isnull=False).values('value_id_id'))
        # # print('valuelistTrain',valuelistTrain)
        for j in range(len(valuelistTrain)):
            trscorepos+=m2.radio_options.objects.filter(rid=valuelistTrain[j]['value_id_id'], rscore=1).count()
            trscoreneg+=m2.radio_options.objects.filter(rid=valuelistTrain[j]['value_id_id'], rscore=0).count()
        if previous_pos!=-1 and train_shortcode[i-1]['entityid']==train_shortcode[i]['entityid']:
            # # print(cnttrain)
            cnttrain = cnttrain+1
            x=str(train_shortcode[i]['inspected_on'])
            x=x[0:10]
            # x=datetime.strptime(str(train_shortcode[i]['inspected_on']), '%Y-%m-%d').date()
       
            trainans.update({x:[trainno,previous_pos+trscorepos,previous_neg+trscoreneg,cnttrain,(previous_pos+trscorepos)/cnttrain,(previous_neg+trscoreneg)/cnttrain,(trscoreneg+trscorepos)/cnttrain]})
           
            previous_pos = previous_pos+trscorepos
            previous_neg = previous_neg+trscoreneg
        else:
            cnttrain = 1
            x=str(train_shortcode[i]['inspected_on'])
            x=x[8:10]+'-'+x[5:7]+'-'+x[0:4]
       
            # x=datetime.strptime(str(train_shortcode[i]['inspected_on']), '%Y-%m-%d').date()
            trainans.update({x:[trainno,trscorepos,trscoreneg,cnttrain,(trscorepos)/cnttrain,(trscoreneg)/cnttrain,(trscoreneg+trscorepos)/cnttrain]})
           
            previous_pos = trscorepos
            previous_neg = trscoreneg

       
        # # print('trainans',trainans)  
       

    try:
        train_no=train_master.objects.filter(train_no=selectedtrain)[0]
        # # print('ghjk',train_no.train_no)
    except:
        train_no=[]
    # # print(type(trainans),'ghjk')
    # # print(trainans.keys())
    inspected_on=[]
    total=[]
    for i,j in trainans.items():
        inspected_on.append(i)
        total.append(j[6])

    # # print('inspected_on', inspected_on)
    try:
        print('sampleghj',inspected_on,type(inspected_on))
        # print('abcdef',total,type(total))
    except:
        pass
    context={
        'trains':trains,
        'trainans':trainans,
        'inspected_on':inspected_on,
        'total':total,
    }
    return render(request, 'train_report.html',context)


@login_required
def mydashboard(request):
    useradd=request.POST.get('useradd')
    if request.method=="POST":
        name1=request.POST.get('nameno')
    name1=list(inspectiontype_master.objects.filter(parent_id=-1).values('name','instypeid','inspection_image'))
    # input_option=list(m2.questionare_master.objects.values('choicetype'))
    if request.method=="POST" and request.POST.get('useradd'):
        print('User Dashboard Called')

    ajaxdata=[]

    context={
        'card': name1,
        'ajaxdata':ajaxdata,
    }
    return render(request,'mydashboard.html', context)


########## previous function ###########



def setAllDepartment(request):
    if request.method =='GET':
        data = request.GET.getlist('val[]')
        if data == []:
            departmentsAll=list(departMast.objects.filter(delete_flag=False).values().order_by('department_name'))
        else:
            departmentsAll=list(departMast.objects.filter(delete_flag=False,department_code__in=data).values('department_code','department_name').order_by('department_name'))
        
        return JsonResponse(departmentsAll,safe=False)
    return JsonResponse({"success":False},status=400)
    
# from django.core.files.storage import FileSystemStorage
# @login_required



from django.core.files.storage import FileSystemStorage
from einspect.models import * 
from inspects.models import * 
from myadmin.models import * 

# @login_required
# def showMenu(request):
#     if request.user.user_role == 'user':
#         id=request.GET.get('id')  
#         cardId=request.GET.get('cardId') 
#         masterTableStatus = '0' 

#         inspectionId=request.GET.get('inspectionId')
#         if inspectionId is None:
#             inspectionId = ''
#         name=inspectiontype_master.objects.filter(instypeid=id)[0]
#         station=list(station_master.objects.filter(delete_flag=False).values())
#         departmentsAll = list(departMast.objects.filter(delete_flag=False).values().order_by('department_name'))
#         departmentsAllComman = list(departMast.objects.filter(delete_flag=False).values().order_by('department_name'))
#         subCategoryAll=list(question_sub_category_master.objects.filter(disable_flag=False).values().order_by('sub_category'))
        
#         copyTo_all = Level_Desig.objects.filter(delete_flag=False, rly_unit__isnull=False).values('designation_code','designation').order_by('hierarchy_level')
        
#         data=[]
#         ques=list(m2.questionare_master.objects.filter(instypeid_id__delete_flag=False,instypeid_id__disable_flag=False,instypeid_id__parent_id=id,delete_flag=False,disable_flag=False).values('qid','activity','choicetype__cid','doption__did', 'roption1__rid', 'roption2__rid',
#         'instypeid_id__name','instypeid_id__instypeid','instypeid_id__concerned_dept','instypeid_id__concerned_dept__department_name').order_by('instypeid_id__instypeid').distinct('instypeid_id__instypeid','activity'))
        
#         choicetype=list(m2.questionare_master.objects.filter(instypeid_id=id).values('choicetype','doption','roption1','roption2'))

#         questions=m2.questionare_master.objects.filter(instypeid_id__delete_flag=False,instypeid_id__disable_flag=False,instypeid_id__parent_id=id,delete_flag=False,disable_flag=False).values('instypeid_id__name','activity','instypeid_id__parent_id','instypeid_id','choicetype__cid','doption__did', 'roption1__rid', 
#         'roption2__rid', 'qid','roption1_id__rlabel','roption2_id__rlabel','instypeid_id__instypeid','roption1_id__rscore','roption1_id__rlabel','depending_ques','dependent_ques','dependending_column'
#         ,'location_id','location_id__lmaster','compulsary','desc','roption2_id__rscore','actionBy','mixedChoices','weightage' ).order_by('instypeid_id','qid')
       
#         ajaxdata=[]
#         count=0
#         for i in range(len(questions)):
#             mixedChoicesEnc = ''
#             activity_data = ''
#             if questions[i]['activity'] != None:
#                 activity_data = encryptWithAesEinspect(questions[i]['activity'])
#             if questions[i]['mixedChoices'] != None:
#                 mixedChoicesEnc = encryptWithAesEinspect(questions[i]['mixedChoices'])
#             neg_val = ''
#             if questions[i]['roption1__rid'] != None:
#                 radio_score1 = list(m2.radio_options.objects.filter(rscore=0,rid=questions[i]['roption1__rid']).values('rlabel'))
#                 if len(radio_score1) == 0:
#                     radio_score2 = list(m2.radio_options.objects.filter(rscore=0,rid=questions[i]['roption2__rid']).values('rlabel'))
#                     if len(radio_score2) == 0:
#                         neg_val = ''
#                     else:
#                         neg_val = radio_score2[0]['rlabel']
#                 else:
#                     neg_val = radio_score1[0]['rlabel']
#             ajaxdata.append(str(questions[i]['choicetype__cid'])+'@#@'+str(questions[i]['qid'])+'@#@'+str(questions[i]['roption1_id__rscore'])+'@#@'+str(questions[i]['location_id'])+'@#@'+str(questions[i]['compulsary'])+'@#@'+str(activity_data)+'@#@'+str(questions[i]['location_id__lmaster'])+'@#@'+str(questions[i]['instypeid_id'])+'@#@'+str(questions[i]['roption2_id__rlabel'])+'@#@'+neg_val+'@#@'+mixedChoicesEnc) 
       
#             try:
#                 if questions[i]['instypeid_id__name'] ==  questions[i+1]['instypeid_id__name']:
#                     count+=1
#                     questions[i].update({'questionNo':count})
#                 else:
#                     count+=1
#                     questions[i].update({'questionNo':count})
#                     count=0
#             except:
#                 count+=1
#                 questions[i].update({'questionNo':count})
            
        
#             if questions[i]['choicetype__cid']==3:  
#                 doption=list(m2.dropdown_options.objects.filter(did=questions[i]['doption__did']).values('dmaster','table_name','column_name'))  #doption contains list of dlabels
#                 if len(doption)!=0:
#                     table_name = doption[0]['table_name']
#                     column_name = ''
#                     col_name = doption[0]['column_name'].split(',')
#                     col_len = len(col_name)
#                     class_name = globals()[doption[0]['table_name']]
#                     result1=list(class_name.objects.values()) 
#                     res = ''
#                     data = []
#                     if len(result1)!=0:
#                         for ii in range(len(result1)):
#                             for ijk in range(len(col_name)):
#                                 if result1[ii][col_name[ijk]] is not None:
#                                     if ijk == 0:
#                                         res = str(result1[ii][col_name[ijk]])
#                                     else:
#                                         res = res + ' ' + str(result1[ii][col_name[ijk]])
#                             data.append(res)
#                     data.sort()
#                     lendata = 'dropDown'
#                     if len(data) > 10000:
#                         lendata = 'text'

#                     questions[i].update({'data':data,'data_len_type':lendata})
#                 else:
#                     pass
        
#             elif questions[i]['choicetype__cid']==9:
#                 questions[i].update({'mixedChoices':questions[i]['mixedChoices'].split('$')})
#             elif questions[i]['choicetype__cid']==10:
#                 questions[i].update({'mixedChoices':questions[i]['mixedChoices'].split('$')})
#             elif questions[i]['choicetype__cid']==7:
#                 questions[i].update({'mixedChoices':questions[i]['mixedChoices'].split('$')})

#             colorLst = list(actor_with_question.objects.filter(questionId=questions[i]['qid']).values('actionId_id__color_code','actionId_id__actorName').distinct())
#             actorListQues = ''
#             for iColor in range(len(colorLst)):
#                 if iColor != 0:
#                     actorListQues += '$'
#                 actorListQues +=   colorLst[iColor]['actionId_id__actorName']  

#             questions[i].update({'colorLst':colorLst,'actorListQues':actorListQues})
#         queslen=len(questions)
#         name2 = list(inspectiontype_master.objects.filter(parent_id=id).values('name','instypeid','inspection_image').order_by('instypeid')) 
#         sidemenu=m2.questionare_master.objects.select_related('instypeid_id').filter(instypeid_id__delete_flag=False,instypeid_id__disable_flag=False,instypeid_id__parent_id=id,disable_flag=False,delete_flag=False).distinct('instypeid_id').order_by('instypeid_id')
#         insp_sideMenu = []
        
#         for i in sidemenu:
#             insp_sideMenu.append(i.instypeid_id.instypeid)
        
        
#         length=len(name2)
#         designations = list(Level_Desig.objects.filter(Q(official_email_ID=request.user) | Q(official_email_ID=request.user.email)).values("designation","rly_unit","d_level"))
        
#         userDivision=''
#         divisionParent=''
#         newdivision=[]
#         defaultStation=[]
#         defaultSection=[]
#         userRailways=Level_Desig.objects.filter(official_email_ID = request.user)[0]
        
        
#         if userRailways.rly_unit.location_type == 'DIV':
#             userDivision = railwayLocationMaster.objects.filter(rly_unit_code=userRailways.rly_unit.rly_unit_code)[0]
        
#             divisionParent = railwayLocationMaster.objects.filter(location_code = userDivision.parent_location_code)[0]
#             defaultStation=list(station_master.objects.filter(rly_id_id=userDivision,delete_flag=False).values())
#             defaultSection=list(section_master.objects.filter(Q(div_id_id_id=userDivision,delete_flag=False,section_name__isnull=False) & ~Q(section_name='') ).values().order_by('section_name'))
        
#         elif userRailways.rly_unit.location_type == 'ZR':
#             divisionParent = railwayLocationMaster.objects.filter(location_code = userRailways.rly_unit.location_code)[0]
#             defaultStation=list(station_master.objects.filter(rly_id_id=divisionParent,delete_flag=False,station_name__isnull=False).values())
#             defaultSection=list(section_master.objects.filter(Q(rly_id_id_id=divisionParent,delete_flag=False,section_name__isnull=False) & ~Q(Q(section_name='') | Q(section_name='null')) ).values().order_by('section_name'))
        
#         elif userRailways.rly_unit.location_type == 'RB':
#             divisionParent = railwayLocationMaster.objects.filter(location_code = userRailways.rly_unit.location_code)[0]
#             defaultStation=list(station_master.objects.filter(delete_flag=False,station_name__isnull=False).values())
#             defaultSection=list(section_master.objects.filter(Q(delete_flag=False,section_name__isnull=False) & ~Q(Q(section_name='') | Q(section_name='null')) ).values().order_by('section_name'))
        
#         try:
#             railwayZone=list(railwayLocationMaster.objects.filter(Q(location_type='ZR') & ~Q(rly_unit_code=divisionParent.rly_unit_code)).values())
#             newdivision=list(railwayLocationMaster.objects.filter(parent_location_code=divisionParent.location_code,location_type='DIV').values())
#         except:
#             railwayZone=list(railwayLocationMaster.objects.filter(location_type='ZR').values())
        
#         sidemenuLength=len(sidemenu)    
        
#         defaultEntity = []
       
#         other_entity_len = 0
#         other_entity_data = ''
#         if name.entity is None and name.other_entity is None:
#             pass
#         elif name.other_entity is not None:
#             other_entity_len = 1
#             other_entity_data = name.other_entity
#         else:
            
#             doption=list(m2.dropdown_options.objects.filter(dmaster=name.entity.dmaster).values('dmaster','table_name','column_name','filterName','filterValue'))
#             if len(doption)!=0:
#                 try:
#                     if divisionParent != '':
#                         rlyNewValue = list(railwayLocationMaster.objects.filter(rly_unit_code=divisionParent.rly_unit_code).values())
#                     else:
#                         rlyNewValue = railwayZone
#                     if userDivision != '':
#                         divNewValue = list(railwayLocationMaster.objects.filter(rly_unit_code=userDivision.rly_unit_code).values())
#                     else:
#                         divNewValue =  newdivision
                    
#                     if len(divNewValue) == 0:
#                         divNewValue = list(railwayLocationMaster.objects.filter(parent_rly_unit_code=divisionParent.rly_unit_code).values())
                    
#                     rlyNextId = [i['rly_unit_code'] for i in rlyNewValue]
#                     rlyNextVal = [i['location_code'] for i in rlyNewValue]
#                     divNextId = [i['rly_unit_code'] for i in divNewValue]
#                     divNextVal = [i['location_code'] for i in divNewValue]
#                 except:
#                     rlyNextId = []
#                     rlyNextVal = []
#                     divNextId = []
#                     divNextVal = []
                
#                 table_name = doption[0]['table_name']
#                 column_name = ''
#                 col_name = doption[0]['column_name'].split(',')
#                 col_len = len(col_name)
#                 class_name = globals()[doption[0]['table_name']]

#                 filterValue = doption[0]['filterValue']
#                 filterValueList = []
#                 if filterValue != None:
#                     if filterValue == 'Division Id':
#                         filterValueList = divNextId
#                     elif filterValue == 'Division Value':
#                         filterValueList = divNextVal
#                     elif filterValue == 'Railway Id':
#                         filterValueList = rlyNextId
#                     elif filterValue == 'Railway Value':
#                         filterValueList = rlyNextVal
#                     elif  filterValue ==  'Division Value':
#                         filterValueList = divNextVal
#                 filterName = doption[0]['filterName']
#                 if filterName != None:
#                     if filterName != 'passing_division':
#                         kargs = {f'{filterName}__in':filterValueList}
#                         result1=list(class_name.objects.filter(**kargs).values()) 
#                     else:

                        
#                         result1 = []
#                         for i in filterValueList:
#                             kargs = {f'{filterName}__icontains':i}
#                             result1 += list(class_name.objects.filter(**kargs).values())

                        
                    
#                 else:
#                     result1=list(class_name.objects.values()) 

#                 data = []
#                 if len(result1)!=0:
#                     for ii in range(len(result1)):
#                         res = {}
#                         for ijk in range(len(col_name)):
#                             if col_len >= 2:
#                                 if result1[ii][col_name[ijk]] is not None:
#                                     if ijk == 0:
#                                         res.update({'id':result1[ii][col_name[ijk]]})
#                                     elif ijk == 1:
#                                         res.update({'desc':result1[ii][col_name[ijk]]})
#                                     else:
#                                         break
#                                 else:
#                                     res.update({'id':result1[ii][col_name[ijk]],'desc':result1[ii][col_name[ijk]]})
                                    
#                         defaultEntity.append(res)
        
#         if defaultEntity != []:
#             defaultEntity=sorted(defaultEntity, key=lambda hqwise:hqwise['desc'])
       
         
#         import datetime  
#         dateNo = datetime.date.strftime(datetime.date.today(), "%d/%m/%Y")
#         dateNo2 = datetime.date.strftime(datetime.date.today(), "%d-%m-%Y")
#         startTime = datetime.datetime.strftime(datetime.datetime.today(), "%H:%M")

#         # ############  actor 
#         # actorDetails = list(actor_with_inspType.objects.filter(inspType=id,disable_flag=False,).values('actorId_id__actorName','actorId_id__actorId','actorId_id__tableName','actorId_id__colName','actorId_id__filterName','actorId_id__filterValue','actorId_id__color_code').order_by('slno'))
#         # actorDetailsData = []
#         # if len(actorDetails) > 0:
#         #     try:
#         #         divUser = userDivision.rly_unit_code
#         #     except:
#         #         divUser = None
#         #     rlyUser = divisionParent.rly_unit_code
#         #     for i in range(len(actorDetails)):
#         #         actorId = actorDetails[i]['actorId_id__actorId']
#         #         actorName = actorDetails[i]['actorId_id__actorName']
#         #         table_name = actorDetails[i]['actorId_id__tableName']
#         #         col_name = actorDetails[i]['actorId_id__colName'].split(',')
#         #         filterName = actorDetails[i]['actorId_id__filterName']
#         #         filterValue = actorDetails[i]['actorId_id__filterValue']
#         #         color_code = actorDetails[i]['actorId_id__color_code']
#         #         use_color = 'N'
#         #         if color_code != None:
#         #             use_color = 'Y'
#         #         filterArgs = {}
#         #         if filterName == 'Railway Code':
#         #             filterArgs = {filterValue:rlyUser}
#         #         elif  filterName == 'Division Code':
#         #             filterArgs = {filterValue:divUser}

#         #         col_len = len(col_name)
                
#         #         class_name = globals()[table_name]
#         #         result1=list(class_name.objects.filter(**filterArgs).values()) 
                
#         #         res = ''
#         #         data = []
#         #         if len(result1)!=0:
#         #             for ii in range(len(result1)):
#         #                 for ijk in range(len(col_name)):
#         #                     if result1[ii][col_name[ijk]] is not None:
#         #                         if ijk == 0:
#         #                             res = str(result1[ii][col_name[ijk]])
#         #                         else:
#         #                             res = res + ' - ' + str(result1[ii][col_name[ijk]])
#         #                 data.append(res)
                
              
#         #         questions67 = list(m2.questionare_master.objects.filter(choicetype__in=['2','9'],instypeid_id__in=inspectiontype_master.objects.filter(parent_id=id,delete_flag=False,disable_flag=False).values('instypeid'),qid__in=m2.actor_with_question.objects.filter(actionId_id__actorName=actorName,disable_flag=False).values('questionId')).values('qid','activity','weightage','mixedChoices','choicetype'))
#         #         totalScoreActor = 0
#         #         if len(questions67) > 0:
#         #             for j1 in range(len(questions67)):
#         #                 if questions67[j1]['choicetype'] in [9]:
#         #                     totalScoreActor += (len(questions67[j1]['mixedChoices'].split('$')) * questions67[j1]['weightage'])
                            
#         #                 else:
#         #                     totalScoreActor += questions67[j1]['weightage']
                        
#         #         actorDetailsData.append({'totalScoreActor':totalScoreActor,'scoreObtained':totalScoreActor,'actor':actorName , 'actorId':actorId ,'data':data,'color_code':color_code,'use_color':use_color})

#         actorDetails = list(actor_with_inspType.objects.filter(inspType=id,disable_flag=False,).values('actorId_id__viewactorName','actorId_id__actorName','actorId_id__actorId','actorId_id__tableName','actorId_id__colName','actorId_id__filterName','actorId_id__filterValue','actorId_id__color_code').order_by('slno'))
#         actorDetailsData = []
#         if len(actorDetails) > 0:
#             try:
#                 divUser = userDivision.rly_unit_code
#             except:
#                 divUser = None
#             rlyUser = divisionParent.rly_unit_code
#             cursor = connection.cursor()
#             for i in range(len(actorDetails)):
#                 actorId = actorDetails[i]['actorId_id__actorId']
#                 actorName = actorDetails[i]['actorId_id__actorName']
#                 table_name = actorDetails[i]['actorId_id__tableName']
#                 col_name = actorDetails[i]['actorId_id__colName'].split(',')
#                 filterName = actorDetails[i]['actorId_id__filterName']
#                 filterValue = actorDetails[i]['actorId_id__filterValue']
#                 color_code = actorDetails[i]['actorId_id__color_code']
#                 viewactorName = actorDetails[i]['actorId_id__viewactorName']
#                 use_color = 'N'
#                 if color_code != None:
#                     use_color = 'Y'
#                 # print(divUser,type(divUser))
#                 if filterName == 'Railway Code':
#                     if rlyUser != None:
#                         qry = ''' select data from "%s" where filter = '%s';''' % (viewactorName, rlyUser)
#                     else:
#                         qry = ''' select data from "%s";''' % (viewactorName)
#                 elif filterName == 'Division Code':
#                     if divUser != None:
#                         qry = ''' select data from "%s" where filter = '%s';''' % (viewactorName, divUser)
#                     else:
#                         qry = ''' select data from "%s";''' % (viewactorName)
#                 else:
#                     qry = ''' select data from "%s" ;''' % (viewactorName)
#                 # if filterName == None and len(col_name)== 1:
                
#                 #     qry = ''' select "%s" from "%s"; ''' % (col_name[0],table_name)
                    
#                 # elif filterName == None and len(col_name)== 2:
#                 #     qry = ''' select CONCAT("%s",' - ',"%s") from "%s"; ''' % (col_name[0],col_name[1],'myadmin_'+table_name)
                
#                 # elif filterName == 'Railway Code' and len(col_name)== 1:
#                 #     qry = ''' select "%s" from "%s" where "%s" = '%s';''' % (col_name[0],'myadmin_'+table_name,filterValue,rlyUser)
#                 # elif filterName == 'Railway Code' and len(col_name)== 2:
#                 #     qry = ''' select CONCAT("%s",' - ',"%s") from "%s" where "%s" = '%s'; ''' % (col_name[0],col_name[1],'myadmin_'+table_name,filterValue,rlyUser)
#                 # elif filterName == 'Division Code' and len(col_name)== 1:
#                 #     qry = ''' select "%s" from "%s" where "%s" = '%s' where "%s" = '%s';''' % (col_name[0],'myadmin_'+table_name,filterValue,divUser)
#                 # elif filterName == 'Division Code' and len(col_name)== 2:
#                 #     qry = ''' select CONCAT("%s",' - ',"%s") from "%s" where "%s" = '%s'; ''' % (col_name[0],col_name[1],'myadmin_'+table_name,filterValue,divUser)
                
#                 cursor.execute(qry)
#                 data=cursor.fetchall()
                
#                 # filterArgs = {}
#                 # if filterName == 'Railway Code':
#                 #     filterArgs = {filterValue:rlyUser}
#                 # elif  filterName == 'Division Code':
#                 #     filterArgs = {filterValue:divUser}

#                 # col_len = len(col_name)
                
#                 # class_name = globals()[table_name]
#                 # result1=list(class_name.objects.filter(**filterArgs).values()) 
                
#                 # res = ''
#                 # data = []
#                 # if len(result1)!=0:
#                 #     for ii in range(len(result1)):
#                 #         for ijk in range(len(col_name)):
#                 #             if result1[ii][col_name[ijk]] is not None:
#                 #                 if ijk == 0:
#                 #                     res = str(result1[ii][col_name[ijk]])
#                 #                 else:
#                 #                     res = res + ' - ' + str(result1[ii][col_name[ijk]])
#                 #         data.append(res)
                
              
#                 questions67 = list(m2.questionare_master.objects.filter(choicetype__in=['2','9'],instypeid_id__in=inspectiontype_master.objects.filter(parent_id=id,delete_flag=False,disable_flag=False).values('instypeid'),qid__in=m2.actor_with_question.objects.filter(actionId_id__actorName=actorName,disable_flag=False).values('questionId')).values('qid','activity','weightage','mixedChoices','choicetype'))
#                 totalScoreActor = 0
#                 if len(questions67) > 0:
#                     for j1 in range(len(questions67)):
#                         if questions67[j1]['choicetype'] in [9]:
#                             totalScoreActor += (len(questions67[j1]['mixedChoices'].split('$')) * questions67[j1]['weightage'])
#                         else:
#                             totalScoreActor += questions67[j1]['weightage']
                        
#                 actorDetailsData.append({'totalScoreActor':totalScoreActor,'scoreObtained':totalScoreActor,'actor':actorName , 'actorId':actorId ,'data':data,'color_code':color_code,'use_color':use_color})

#             cursor.close()
        
#         # if send_to:
#         #         if m6.copyto_mails.objects.filter(doc_id=inspection_id, area_flag=0, doc_table='i').exists():
#         #             m6.copyto_mails.objects.filter(doc_id=inspection_id, area_flag=0, doc_table='i').update(sender_id_id=ddesig, receiver_id=send_to, receiver_desig=send_desig)
#         #         else:
#         #             m6.copyto_mails.objects.create(sender_id_id=ddesig, doc_id=inspection_id, area_flag=0, doc_table='i', receiver_id=send_to, receiver_desig=send_desig)

        
#         if request.method == 'POST':
#             submitvalue = request.POST.get('submit')
#             if 'Save as Draft & Continue' == submitvalue:
#                 inspectionId=request.POST.get('inspectionId')
#                 request.POST.get('user')
#                 commanDepartment = request.POST.getlist('commanDepartment') 
#                 comman = ''
#                 for l in range(len(commanDepartment)):
#                     if l!=0:
#                         comman = comman+';'
#                     comman = comman + commanDepartment[l]
#                 commanDepartment = comman
#                 railways = request.POST.get('userdata0') 
#                 division = request.POST.get('userdata1') 
#                 start_date = request.POST.get('userdata4')
#                 start_date = (datetime.datetime.strptime(start_date,'%d-%m-%Y')).strftime('%Y-%m-%d')
#                 start_time = request.POST.get('userdata5') 
#                 end_date = request.POST.get('userdata6') 
#                 masterTableStatus = request.POST.get('masterTableStatus')
#                 if end_date == '':
#                     end_date = None
#                 else:
#                     end_date = (datetime.datetime.strptime(end_date,'%d-%m-%Y')).strftime('%Y-%m-%d')
                 
#                 end_time = request.POST.get('userdata7')
#                 if end_time == '':
#                     end_time = None 
#                 inspid = request.POST.get('id')
#                 detail = request.POST.get('userdata9')
#                 entity = request.POST.get('entitylbl') 
#                 radios2 = request.POST.get('abnormal') 
#                 remarks11 = request.POST.get('userdata15')
#                 section = request.POST.get('userdata17') 
#                 inspectionType = int(request.POST.get('supnight'))  
#                 ratings1 = request.POST.get('ratings1')  
#                 finalizeStart = request.POST.get('finalizeStart')   
#                 finalizeEnd = request.POST.get('finalizeEnd')
#                 if ratings1 == None:
#                     ratings1 = None

#                 if radios2 == 'no':
#                     saving = 'no'
#                 else:
#                     saving = 'yes/'+remarks11
                
                
#                 if inspectionType == 3:
#                     is_scheduled = False
#                     inspection_type = 3
#                 elif inspectionType == 2:
#                     is_scheduled = True
#                     inspection_type=2
#                 elif inspectionType == 1:
#                     is_scheduled = True
#                     inspection_type = 1
#                 else:
#                     is_scheduled = True
#                     inspection_type = 0

#                 try:
#                     if len(request.FILES) != 0:
#                         supdoc = request.FILES['userdata14']
#                         folder='media/documents/'
#                         fs=FileSystemStorage(location=folder)  
#                         files=fs.save(supdoc.name,supdoc)      
#                         documents = fs.url(files)
#                         documents = str(documents).split('media/')
#                         documents = 'documents/'+documents[1]
#                     else:
#                         documents = None
#                 except: 
#                     documents = None
#                 railways=railwayLocationMaster.objects.filter(rly_unit_code=railways)[0]
#                 division=railwayLocationMaster.objects.filter(rly_unit_code=division)[0]
#                 email=str(request.user)
#                 max_id=0
#                 temp=list(m2.einspection_details.objects.filter(delete_flag=False).values())
#                 if len(temp)!=0:
#                     max_id = m2.einspection_details.objects.aggregate(Max('einspno'))['einspno__max']
#                     max_id+=1 
#                 else:
#                     max_id=1

#                 loginUser=Level_Desig.objects.filter(official_email_ID=email)[0]
#                 department=departMast.objects.filter(department_name=loginUser.department)[0]

#                 currentDateTime = datetime.datetime.now()
#                 date = currentDateTime.date()
#                 year=date.strftime("%Y")
#                 inspection=inspectiontype_master.objects.filter(instypeid=id,delete_flag=False)[0]
#                 if inspection.entity != None:
#                     inspectionEntity = inspection.entity.dmaster
#                     inspection_title=str(inspection.shortcode) + ' Inspection of ' + str(inspectionEntity) + ' - ' + str(detail) + ' by ' + str(loginUser.designation) + ' on ' + str((datetime.datetime.strptime(start_date,'%Y-%m-%d')).strftime('%d-%m-%Y'))
#                 else:
#                     inspectionEntity = None
#                     res123=list(section_master.objects.filter(secid=section).values('section_code'))[0]['section_code']
#                     inspection_title=str(inspection.shortcode) + ' Inspection of Section - ' + str(res123) + ' by ' + str(loginUser.designation) + ' on ' + str((datetime.datetime.strptime(start_date,'%Y-%m-%d')).strftime('%d-%m-%Y'))


#                 inspection_note_no= str(year)+'/'+str(loginUser.designation) + '/' + str(inspection.shortcode) + '/' + str(max_id)
#                 saving=str(radios2) + '/' + str(remarks11)
#                 systemDateTime = currentDateTime.strftime("%Y-%m-%d %H:%M:%S")
#                 reportPath = '/pdfDetails/?id='+str(max_id)
                
#                 if inspectionId == '':
#                     obj1=m2.einspection_details.objects.create(masterTableFlag=masterTableStatus,finalizeStart= finalizeStart,finalizeEnd=finalizeEnd,status = 0,instypeid=inspection,inspected_on=start_date, start_date=start_date,end_date=end_date,start_time=start_time,end_time=end_time,
#                             inspection_title=inspection_title,designation=loginUser,inspection_note_no=inspection_note_no,ratings=ratings1,abnormal=saving,dept=department,
#                             rly_id_id=railways,div_id_id=division,entitydetails=inspectionEntity,entityid=detail,created_by=loginUser.empno.empno,lastmodified_by=loginUser.empno.empno,is_scheduled=is_scheduled,
#                             created_on=systemDateTime,lastmodified_on=systemDateTime,section_id=section,inspection_type=inspection_type,documents=documents,report_path=reportPath,commanDepartment=commanDepartment)
                    
#                     inspectionId = max_id
#                 else:
#                     obj1=m2.einspection_details.objects.filter(einspno = inspectionId).update(masterTableFlag=masterTableStatus,finalizeStart= finalizeStart,finalizeEnd=finalizeEnd,status = 0,instypeid=inspection,end_date=end_date,end_time=end_time,
#                             inspection_title=inspection_title,designation=loginUser,inspection_note_no=inspection_note_no,ratings=ratings1,abnormal=saving,dept=department,
#                             rly_id_id=railways,div_id_id=division,entitydetails=inspectionEntity,entityid=detail,lastmodified_by=loginUser.empno.empno,is_scheduled=is_scheduled,
#                             lastmodified_on=systemDateTime,section_id=section,inspection_type=inspection_type,documents=documents,report_path=reportPath,commanDepartment=commanDepartment)
                
#                 copyToOfficer = request.POST.getlist('copyToOfficer')
#                 if len(copyToOfficer) > 0:
#                     copy_to_id = ''
#                     copy_to_desig = ''
#                     for li1 in copyToOfficer:
#                         level1_data = list(Level_Desig.objects.filter(designation_code=li1).values('designation_code','designation'))
#                         if len(level1_data)>0:
#                             if copy_to_id != '':
#                                 copy_to_id = copy_to_id + ','
#                             if copy_to_desig != '':
#                                 copy_to_desig = copy_to_desig + ','
#                             copy_to_id = copy_to_id + str(level1_data[0]['designation_code'])
#                             copy_to_desig = copy_to_desig + level1_data[0]['designation']

#                     if mm6.copyto_mails.objects.filter(doc_id=inspectionId, area_flag=0, doc_table='e').exists():
#                         mm6.copyto_mails.objects.filter(doc_id=inspectionId, area_flag=0, doc_table='e').update(sender_id_id=loginUser.designation_code, receiver_id=copy_to_id, receiver_desig=copy_to_desig)
#                     else:
#                         mm6.copyto_mails.objects.create(sender_id_id=loginUser.designation_code, doc_id=inspectionId, area_flag=0, doc_table='e', receiver_id=copy_to_id, receiver_desig=copy_to_desig)


#                 for ia in range(len(actorDetailsData)):
#                     actorId = actorDetailsData[ia]['actorId']
#                     actorName = actorDetailsData[ia]['actor']
#                     actorValue = [request.POST.get('actor'+actorName)]
#                     tval = []
#                     if  actorValue != ['']:   
#                         for av in actorValue:
#                             #av = av.split('-')[0]
#                             tval.append(av)
#                             if not m2.actor_with_inspection_details.objects.filter(einspno_id=inspectionId,actorId_id=actorId,value=av).exists():

#                                 lst121 = list(actor_details.objects.filter(actorId=actorId).values())
#                                 viewName = lst121[0]['viewName']
#                                 ViewFilter = lst121[0]['viewFilter'] 
#                                 viewColumn = lst121[0]['viewColumn'].split(',')
#                                 cursor = connection.cursor()
#                                 viewData=[]
#                                 avVal = (av.split('-')[0]).strip()
#                                 print(viewName, ViewFilter, avVal)
#                                 qry = ''' select * from "%s" where "%s" = '%s';''' % (viewName, ViewFilter, avVal)
#                                 cursor.execute(qry)
#                                 viewData.extend(cursor.fetchall())
#                                 cursor.close()
#                                 dictData={}
#                                 for icol in range(len(viewColumn)):
#                                     dictData[viewColumn[icol]] = viewData[0][icol]

#                                 m2.actor_with_inspection_details.objects.create(einspno_id=inspectionId,actorId_id=actorId,value=av,details = dictData)
                        
#                     m2.actor_with_inspection_details.objects.filter(~Q(value__in=tval),einspno=inspectionId,actorId=actorId).delete()

#                 count = 0
#                 totalQidUsed=[]
#                 for adata in ajaxdata:
#                     a = adata.split('@#@')
#                     comploc = a[6]
#                     question_id = a[1]
#                     count += 1
#                     tickId = 'tick@'+a[7]+'@'+str(count)
#                     tickVal = request.POST.get(tickId)
#                     radioval = None
#                     if tickVal !=None:
#                         obj2=m2.questionare_master.objects.filter(qid = question_id)[0]
#                         if a[0] == '1':
#                             dataid = 'userinput' + str(count)
#                             datavalue = request.POST.get(dataid)

#                             if datavalue == '' or datavalue == None:
#                                 continue
#                             else:
#                                 departmentId = 'department1' + str(count)
#                                 officer = 'officer11' + str(count)
#                                 remarks = 'remarks' + str(count)
                                

#                                 departmentId = request.POST.get(departmentId)
#                                 officer = request.POST.get(officer)
#                                 remarks = request.POST.get(remarks)
#                                 if comploc == 'None':
#                                     location = None
#                                 else:
#                                     if comploc == 'Pole Location' or comploc == 'Number':
#                                         idloc = 'location1' + str(count)
#                                         location = request.POST.getlist(idloc)
#                                         loc=''
#                                         for l in range(len(location)):
#                                             if l!=0:
#                                                 loc = loc+';'
#                                             loc = loc + location[l]
#                                         location = loc
#                                     elif comploc == 'Coach Number':
#                                         idloc = 'location1' + str(count)
#                                         location = request.POST.get(idloc)
#                                     elif comploc == 'Direction':
#                                         idloc = 'location' + str(count)
#                                         location = request.POST.get(idloc)
#                         elif a[0] == '2':
#                             dataid = 'roption' + str(count)
#                             datavalue = request.POST.get(dataid)

#                             if datavalue == '' or datavalue == None:
#                                 continue
#                             else:
                               
#                                 if m2.radio_options.objects.filter(rlabel=datavalue,rid=obj2.roption1.rid).exists():
#                                     radioval = obj2.roption1.rid
#                                 elif m2.radio_options.objects.filter(rlabel=datavalue,rid=obj2.roption2.rid).exists():
#                                     radioval = obj2.roption2.rid
#                                 else:
#                                     radioval = None
#                                 departmentId = 'department1' + str(count)
#                                 officer = 'officer11' + str(count)
#                                 remarks = 'remarks' + str(count)
                                

#                                 departmentId = request.POST.get(departmentId)
#                                 officer = request.POST.get(officer)
#                                 remarks = request.POST.get(remarks)
#                                 if comploc == 'None':
#                                     location = None
#                                 else:
#                                     if comploc == 'Pole Location' or comploc == 'Number':
#                                         idloc = 'location1' + str(count)
#                                         location = request.POST.getlist(idloc)
#                                         loc=''
#                                         for l in range(len(location)):
#                                             if l!=0:
#                                                 loc = loc+';'
#                                             loc = loc + location[l]
#                                         location = loc
#                                     elif comploc == 'Coach Number':
#                                         idloc = 'location1' + str(count)
#                                         location = request.POST.get(idloc)
#                                     elif comploc == 'Direction':
#                                         idloc = 'location' + str(count)
#                                         location = request.POST.get(idloc)
                                        
#                         elif a[0] == '3':
#                             dataid = 'doption' + str(count)
#                             datavalue = request.POST.get(dataid)
#                             if datavalue == '' or datavalue == None:
#                                 continue
#                             else:
#                                 departmentId = 'department1' + str(count)
#                                 officer = 'officer11' + str(count)
#                                 remarks = 'remarks' + str(count)
                                

#                                 departmentId = request.POST.get(departmentId)
#                                 officer = request.POST.get(officer)
#                                 remarks = request.POST.get(remarks)
#                                 if comploc == 'None':
#                                     location = None
#                                 else:
#                                     if comploc == 'Pole Location' or comploc == 'Number':
#                                         idloc = 'location1' + str(count)
#                                         location = request.POST.getlist(idloc)
#                                         loc=''
#                                         for l in range(len(location)):
#                                             if l!=0:
#                                                 loc = loc+';'
#                                             loc = loc + location[l]
#                                         location = loc
#                                     elif comploc == 'Coach Number':
#                                         idloc = 'location1' + str(count)
#                                         location = request.POST.get(idloc)
#                                     elif comploc == 'Direction':
#                                         idloc = 'location' + str(count)
#                                         location = request.POST.get(idloc)
#                         elif a[0] == '4':
#                             dataid = 'date' + str(count)
#                             datavalue = request.POST.get(dataid)
#                             if datavalue == '' or datavalue == None:
#                                 continue
#                             else:
#                                 departmentId = 'department1' + str(count)
#                                 officer = 'officer11' + str(count)
#                                 remarks = 'remarks' + str(count)
                                

#                                 departmentId = request.POST.get(departmentId)
#                                 officer = request.POST.get(officer)
#                                 remarks = request.POST.get(remarks)
#                                 if comploc == 'None':
#                                     location = None
#                                 else:
#                                     if comploc == 'Pole Location' or comploc == 'Number':
#                                         idloc = 'location1' + str(count)
#                                         location = request.POST.getlist(idloc)
#                                         loc=''
#                                         for l in range(len(location)):
#                                             if l!=0:
#                                                 loc = loc+';'
#                                             loc = loc + location[l]
#                                         location = loc
#                                     elif comploc == 'Coach Number':
#                                         idloc = 'location1' + str(count)
#                                         location = request.POST.get(idloc)
#                                     elif comploc == 'Direction':
#                                         idloc = 'location' + str(count)
#                                         location = request.POST.get(idloc)
#                         elif a[0] == '5':
#                             dataid = 'time' + str(count)
#                             datavalue = request.POST.get(dataid)
#                             if datavalue == '' or datavalue == None:
#                                 continue
#                             else:
#                                 departmentId = 'department1' + str(count)
#                                 officer = 'officer11' + str(count)
#                                 remarks = 'remarks' + str(count)
                                

#                                 departmentId = request.POST.get(departmentId)
#                                 officer = request.POST.get(officer)
#                                 remarks = request.POST.get(remarks)
#                                 if comploc == 'None':
#                                     location = None
#                                 else:
#                                     if comploc == 'Pole Location' or comploc == 'Number':
#                                         idloc = 'location1' + str(count)
#                                         location = request.POST.getlist(idloc)
#                                         loc=''
#                                         for l in range(len(location)):
#                                             if l!=0:
#                                                 loc = loc+';'
#                                             loc = loc + location[l]
#                                         location = loc
#                                     elif comploc == 'Coach Number':
#                                         idloc = 'location1' + str(count)
#                                         location = request.POST.get(idloc)
#                                     elif comploc == 'Direction':
#                                         idloc = 'location' + str(count)
#                                         location = request.POST.get(idloc)
#                         elif a[0] == '6':
#                             dataid = 'file' + str(count)
                            
#                             try:
#                                 if len(request.FILES) != 0:
#                                     supdoc = request.FILES[dataid]
#                                     folder='media/Einspection/'
#                                     fs=FileSystemStorage(location=folder)  
#                                     files=fs.save(supdoc.name,supdoc)      
#                                     datavalue = fs.url(files)
#                                     datavalue = str(datavalue).split('media/')
#                                     datavalue = 'Einspection/'+datavalue[1]
#                                 else:
#                                     datavalue = None
#                             except: 
#                                 datavalue = None
                            
                            
#                             if datavalue == '' or datavalue == None:
#                                 continue
#                             else:
#                                 departmentId = 'department1' + str(count)
#                                 officer = 'officer11' + str(count)
#                                 remarks = 'remarks' + str(count)
                                
#                                 departmentId = request.POST.get(departmentId)
#                                 officer = request.POST.get(officer)
#                                 remarks = request.POST.get(remarks)
#                                 if comploc == 'None':
#                                     location = None
#                                 else:
#                                     if comploc == 'Pole Location' or comploc == 'Number':
#                                         idloc = 'location1' + str(count)
#                                         location = request.POST.getlist(idloc)
#                                         loc=''
#                                         for l in range(len(location)):
#                                             if l!=0:
#                                                 loc = loc+';'
#                                             loc = loc + location[l]
#                                         location = loc
#                                     elif comploc == 'Coach Number':
#                                         idloc = 'location1' + str(count)
#                                         location = request.POST.get(idloc)
#                                     elif comploc == 'Direction':
#                                         idloc = 'location' + str(count)
#                                         location = request.POST.get(idloc)
#                         elif a[0] == '9':
                            
#                             dataid = 'checkbox#' + str(a[1])
#                             datavalue = request.POST.getlist(dataid)
                            
#                             if len(datavalue) == 0:
#                                 continue
#                             else:
#                                 str1 =''
#                                 for iii in range(len(datavalue)):
#                                     if iii != 0:
#                                         str1 = str1 + '$'
#                                     str1 = str1 + datavalue[iii]
#                                 datavalue = str1
#                                 departmentId = 'department1' + str(count)
#                                 officer = 'officer11' + str(count)
#                                 remarks = 'remarks' + str(count)
#                                 departmentId = request.POST.get(departmentId)
#                                 officer = request.POST.get(officer)
#                                 remarks = request.POST.get(remarks)
#                                 if comploc == 'None':
#                                     location = None
#                                 else:
#                                     if comploc == 'Pole Location' or comploc == 'Number':
#                                         idloc = 'location1' + str(count)
#                                         location = request.POST.getlist(idloc)
#                                         loc=''
#                                         for l in range(len(location)):
#                                             if l!=0:
#                                                 loc = loc+';'
#                                             loc = loc + location[l]
#                                         location = loc


#                                     elif comploc == 'Coach Number':
#                                         idloc = 'location1' + str(count)
#                                         location = request.POST.get(idloc)
#                                     elif comploc == 'Direction':
#                                         idloc = 'location' + str(count)
#                                         location = request.POST.get(idloc)
#                         elif a[0] == '10':
                            
#                             dataid = 'checkbox' + str(a[1])
#                             datavalue = request.POST.getlist(dataid)
                            
#                             if len(datavalue) == 0:
#                                 continue
#                             else:
#                                 str1 =''
#                                 for iii in range(len(datavalue)):
#                                     if iii != 0:
#                                         str1 = str1 + '$'
#                                     str1 = str1 + datavalue[iii]
#                                 datavalue = str1
#                                 departmentId = 'department1' + str(count)
#                                 officer = 'officer11' + str(count)
#                                 remarks = 'remarks' + str(count)
#                                 departmentId = request.POST.get(departmentId)
#                                 officer = request.POST.get(officer)
#                                 remarks = request.POST.get(remarks)
#                                 if comploc == 'None':
#                                     location = None
#                                 else:
#                                     if comploc == 'Pole Location' or comploc == 'Number':
#                                         idloc = 'location1' + str(count)
#                                         location = request.POST.getlist(idloc)
#                                         loc=''
#                                         for l in range(len(location)):
#                                             if l!=0:
#                                                 loc = loc+';'
#                                             loc = loc + location[l]
#                                         location = loc


#                                     elif comploc == 'Coach Number':
#                                         idloc = 'location1' + str(count)
#                                         location = request.POST.get(idloc)
#                                     elif comploc == 'Direction':
#                                         idloc = 'location' + str(count)
#                                         location = request.POST.get(idloc)
                        
#                         else:
#                             dataid = 'userinput' + str(count)
#                             datavalue = request.POST.get(dataid)
#                             if datavalue == '' or datavalue == None:
#                                 continue
#                             else:
#                                 departmentId = 'department1' + str(count)
#                                 officer = 'officer11' + str(count)
#                                 remarks = 'remarks' + str(count)
#                                 departmentId = request.POST.get(departmentId)
#                                 officer = request.POST.get(officer)
#                                 remarks = request.POST.get(remarks)
#                                 if comploc == 'None':
#                                     location = None
#                                 else:
#                                     if comploc == 'Pole Location' or comploc == 'Number':
#                                         idloc = 'location1' + str(count)
#                                         location = request.POST.getlist(idloc)
#                                         loc=''
#                                         for l in range(len(location)):
#                                             if l!=0:
#                                                 loc = loc+';'
#                                             loc = loc + location[l]
#                                         location = loc


#                                     elif comploc == 'Coach Number':
#                                         idloc = 'location1' + str(count)
#                                         location = request.POST.get(idloc)
#                                     elif comploc == 'Direction':
#                                         idloc = 'location' + str(count)
#                                         location = request.POST.get(idloc)

#                         totalQidUsed.append(int(question_id))
#                         if not m2.einspection_item_detail.objects.filter(einspno = inspectionId).exists():
#                             item = m2.einspection_item_detail.objects.create(status=0,einspno_id=inspectionId,qid_id=question_id,value=datavalue,qncat=obj2.instypeid_id,
#                                 qtype='e-Inspection',created_by=loginUser.empno.empno,lastmodified_by=loginUser.empno.empno,
#                                 created_on=systemDateTime,lastmodified_on=systemDateTime,location=location,remarks=remarks,value_id_id=radioval)
#                             try:
#                                 mark = Level_Desig.objects.filter(designation_code = officer)[0]
#                                 m2.einsp_marked.objects.create(designation_by=designations[0]['designation'],eitemid=item,marked_to=mark,marked_emp_id=mark.empno_id,status_flag=1,department_id=departmentId,
#                                                             designation = mark.designation,
#                                                     created_by=loginUser.empno.empno,lastmodified_by=loginUser.empno.empno,
#                                                     created_on=systemDateTime,lastmodified_on=systemDateTime)
#                             except:
#                                 pass
#                         else:
#                             if m2.einspection_item_detail.objects.filter(einspno = inspectionId,qid=question_id).exists():
#                                 item = m2.einspection_item_detail.objects.filter(einspno = inspectionId,qid=question_id).update(status=0,value=datavalue,qncat=obj2.instypeid_id,
#                                 qtype='e-Inspection',lastmodified_by=loginUser.empno.empno,
#                                 lastmodified_on=systemDateTime,location=location,remarks=remarks,value_id_id=radioval)
                                
#                                 try:
#                                     mark = Level_Desig.objects.filter(designation_code = officer)[0]
                                    
#                                     item = m2.einspection_item_detail.objects.filter(einspno = inspectionId,qid=question_id)[0]
                                    
#                                     m2.einsp_marked.objects.filter(eitemid = item.eitemid).update(designation_by=designations[0]['designation'],marked_to=mark,marked_emp_id=mark.empno_id,status_flag=1,department_id=departmentId,designation = mark.designation,lastmodified_by=loginUser.empno.empno,lastmodified_on=systemDateTime)
#                                 except:
#                                     pass
#                             else:
#                                 item = m2.einspection_item_detail.objects.create(status=0,einspno_id=inspectionId,qid_id=question_id,value=datavalue,qncat=obj2.instypeid_id,
#                                     qtype='e-Inspection',created_by=loginUser.empno.empno,lastmodified_by=loginUser.empno.empno,
#                                     created_on=systemDateTime,lastmodified_on=systemDateTime,location=location,remarks=remarks,value_id_id=radioval)
#                                 try:
#                                     mark = Level_Desig.objects.filter(designation_code = officer)[0]
#                                     m2.einsp_marked.objects.create(designation_by=designations[0]['designation'],eitemid=item,marked_to=mark,marked_emp_id=mark.empno_id,status_flag=1,department_id=departmentId,
#                                                                 designation = mark.designation,
#                                                     created_by=loginUser.empno.empno,lastmodified_by=loginUser.empno.empno,
#                                                     created_on=systemDateTime,lastmodified_on=systemDateTime)
#                                 except:
#                                     pass

#                 m2.einsp_marked.objects.filter(Q(eitemid__in=m2.einspection_item_detail.objects.filter(einspno=inspectionId).values('eitemid'))).update(status_flag=0)       
#                 m2.einsp_marked.objects.filter(Q(eitemid__in=m2.einspection_item_detail.objects.exclude(qid__in=totalQidUsed).filter(einspno=inspectionId).values('eitemid'))).delete()
#                 m2.einspection_item_detail.objects.exclude(qid__in=totalQidUsed).filter(einspno=inspectionId).delete()
#                 return HttpResponseRedirect(f'/showMenu/?id={id}&inspectionId={inspectionId}')
#                 #return redirect('draft_inspection_form')
            
#             if 'Save as Draft' == submitvalue:
#                 inspectionId=request.POST.get('inspectionId')
#                 request.POST.get('user')
#                 commanDepartment = request.POST.getlist('commanDepartment') 
#                 comman = ''
#                 for l in range(len(commanDepartment)):
#                     if l!=0:
#                         comman = comman+';'
#                     comman = comman + commanDepartment[l]
#                 commanDepartment = comman
#                 railways = request.POST.get('userdata0') 
#                 division = request.POST.get('userdata1') 
#                 start_date = request.POST.get('userdata4')
#                 start_date = (datetime.datetime.strptime(start_date,'%d-%m-%Y')).strftime('%Y-%m-%d')
#                 start_time = request.POST.get('userdata5') 
#                 end_date = request.POST.get('userdata6') 
#                 masterTableStatus = request.POST.get('masterTableStatus')
#                 if end_date == '':
#                     end_date = None
#                 else:
#                     end_date = (datetime.datetime.strptime(end_date,'%d-%m-%Y')).strftime('%Y-%m-%d')
                 
#                 end_time = request.POST.get('userdata7')
#                 if end_time == '':
#                     end_time = None 
#                 inspid = request.POST.get('id')
#                 detail = request.POST.get('userdata9')
#                 entity = request.POST.get('entitylbl') 
#                 radios2 = request.POST.get('abnormal') 
#                 remarks11 = request.POST.get('userdata15')
#                 section = request.POST.get('userdata17') 
#                 inspectionType = int(request.POST.get('supnight'))   
#                 ratings1 = request.POST.get('ratings1')  
#                 finalizeStart = request.POST.get('finalizeStart')   
#                 finalizeEnd = request.POST.get('finalizeEnd')
#                 if ratings1 == None:
#                     ratings1 = None

#                 if radios2 == 'no':
#                     saving = 'no'
#                 else:
#                     saving = 'yes/'+remarks11
#                 # inspectionType = inspectionType.split(' ')
#                 # if len(inspectionType) == 3:
#                 #     is_scheduled = False
#                 #     inspection_type=3
#                 # elif inspectionType[1] == 'Surprise':
#                 #     is_scheduled = False
#                 #     inspection_type=1
#                 # elif inspectionType[1] == 'Night':
#                 #     is_scheduled = True
#                 #     inspection_type=2
#                 # else:
#                 #     is_scheduled = True
#                 #     inspection_type=4

#                 if inspectionType == 3:
#                     is_scheduled = False
#                     inspection_type = 3
#                 elif inspectionType == 2:
#                     is_scheduled = True
#                     inspection_type=2
#                 elif inspectionType == 1:
#                     is_scheduled = True
#                     inspection_type = 1
#                 else:
#                     is_scheduled = True
#                     inspection_type = 0

#                 try:
#                     if len(request.FILES) != 0:
#                         supdoc = request.FILES['userdata14']
#                         folder='media/documents/'
#                         fs=FileSystemStorage(location=folder)  
#                         files=fs.save(supdoc.name,supdoc)      
#                         documents = fs.url(files)
#                         documents = str(documents).split('media/')
#                         documents = 'documents/'+documents[1]
#                     else:
#                         documents = None
#                 except: 
#                     documents = None
#                 railways=railwayLocationMaster.objects.filter(rly_unit_code=railways)[0]
#                 division=railwayLocationMaster.objects.filter(rly_unit_code=division)[0]
#                 email=str(request.user)
#                 max_id=0
#                 temp=list(m2.einspection_details.objects.filter(delete_flag=False).values())
#                 if len(temp)!=0:
#                     max_id = m2.einspection_details.objects.aggregate(Max('einspno'))['einspno__max']
#                     max_id+=1 
#                 else:
#                     max_id=1

#                 loginUser=Level_Desig.objects.filter(official_email_ID=email)[0]
#                 department=departMast.objects.filter(department_name=loginUser.department)[0]

#                 currentDateTime = datetime.datetime.now()
#                 date = currentDateTime.date()
#                 year=date.strftime("%Y")
#                 inspection=inspectiontype_master.objects.filter(instypeid=id,delete_flag=False)[0]
#                 if inspection.entity != None:
#                     inspectionEntity = inspection.entity.dmaster
#                     inspection_title=str(inspection.shortcode) + ' Inspection of ' + str(inspectionEntity) + ' - ' + str(detail) + ' by ' + str(loginUser.designation) + ' on ' + str((datetime.datetime.strptime(start_date,'%Y-%m-%d')).strftime('%d-%m-%Y'))
#                 else:
#                     inspectionEntity = None
#                     res123=list(section_master.objects.filter(secid=section).values('section_code'))[0]['section_code']
#                     inspection_title=str(inspection.shortcode) + ' Inspection of Section - ' + str(res123) + ' by ' + str(loginUser.designation) + ' on ' + str((datetime.datetime.strptime(start_date,'%Y-%m-%d')).strftime('%d-%m-%Y'))


#                 inspection_note_no= str(year)+'/'+str(loginUser.designation) + '/' + str(inspection.shortcode) + '/' + str(max_id)
#                 saving=str(radios2) + '/' + str(remarks11)
#                 systemDateTime = currentDateTime.strftime("%Y-%m-%d %H:%M:%S")
#                 reportPath = '/pdfDetails/?id='+str(max_id)
                
#                 if inspectionId == '':
#                     obj1=m2.einspection_details.objects.create(masterTableFlag=masterTableStatus,finalizeStart= finalizeStart,finalizeEnd=finalizeEnd,status = 0,instypeid=inspection,inspected_on=start_date, start_date=start_date,              end_date=end_date,start_time=start_time,end_time=end_time,
#                             inspection_title=inspection_title,designation=loginUser,inspection_note_no=inspection_note_no,ratings=ratings1,abnormal=saving,dept=department,
#                             rly_id_id=railways,div_id_id=division,entitydetails=inspectionEntity,entityid=detail,created_by=loginUser.empno.empno,lastmodified_by=loginUser.empno.empno,is_scheduled=is_scheduled,
#                             created_on=systemDateTime,lastmodified_on=systemDateTime,section_id=section,inspection_type=inspection_type,documents=documents,report_path=reportPath,commanDepartment=commanDepartment)
                    
#                     inspectionId = max_id
#                 else:
#                     obj1=m2.einspection_details.objects.filter(einspno = inspectionId).update(masterTableFlag=masterTableStatus,finalizeStart= finalizeStart,finalizeEnd=finalizeEnd,status = 0,instypeid=inspection,end_date=end_date,end_time=end_time,
#                             inspection_title=inspection_title,designation=loginUser,inspection_note_no=inspection_note_no,ratings=ratings1,abnormal=saving,dept=department,
#                             rly_id_id=railways,div_id_id=division,entitydetails=inspectionEntity,entityid=detail,lastmodified_by=loginUser.empno.empno,is_scheduled=is_scheduled,
#                             lastmodified_on=systemDateTime,section_id=section,inspection_type=inspection_type,documents=documents,report_path=reportPath,commanDepartment=commanDepartment)
                
#                 copyToOfficer = request.POST.getlist('copyToOfficer')
#                 if len(copyToOfficer) > 0:
#                     copy_to_id = ''
#                     copy_to_desig = ''
#                     for li1 in copyToOfficer:
#                         level1_data = list(Level_Desig.objects.filter(designation_code=li1).values('designation_code','designation'))
#                         if len(level1_data)>0:
#                             if copy_to_id != '':
#                                 copy_to_id = copy_to_id + ','
#                             if copy_to_desig != '':
#                                 copy_to_desig = copy_to_desig + ','
#                             copy_to_id = copy_to_id + str(level1_data[0]['designation_code'])
#                             copy_to_desig = copy_to_desig + level1_data[0]['designation']

#                     if mm6.copyto_mails.objects.filter(doc_id=inspectionId, area_flag=0, doc_table='e').exists():
#                         mm6.copyto_mails.objects.filter(doc_id=inspectionId, area_flag=0, doc_table='e').update(sender_id_id=loginUser.designation_code, receiver_id=copy_to_id, receiver_desig=copy_to_desig)
#                     else:
#                         mm6.copyto_mails.objects.create(sender_id_id=loginUser.designation_code, doc_id=inspectionId, area_flag=0, doc_table='e', receiver_id=copy_to_id, receiver_desig=copy_to_desig)


#                 for ia in range(len(actorDetailsData)):
#                     actorId = actorDetailsData[ia]['actorId']
#                     actorName = actorDetailsData[ia]['actor']
#                     actorValue = [request.POST.get('actor'+actorName)]
#                     tval = []
#                     if  actorValue != ['']:   
#                         for av in actorValue:
#                             #av = av.split('-')[0]
#                             tval.append(av)
#                             if not m2.actor_with_inspection_details.objects.filter(einspno_id=inspectionId,actorId_id=actorId,value=av).exists():

#                                 lst121 = list(actor_details.objects.filter(actorId=actorId).values())
#                                 viewName = lst121[0]['viewName']
#                                 ViewFilter = lst121[0]['viewFilter'] 
#                                 viewColumn = lst121[0]['viewColumn'].split(',')
#                                 cursor = connection.cursor()
#                                 viewData=[]
#                                 avVal = (av.split('-')[0]).strip()
#                                 print(viewName, ViewFilter, avVal)
#                                 qry = ''' select * from "%s" where "%s" = '%s';''' % (viewName, ViewFilter, avVal)
#                                 cursor.execute(qry)
#                                 viewData.extend(cursor.fetchall())
#                                 cursor.close()
#                                 dictData={}
#                                 for icol in range(len(viewColumn)):
#                                     dictData[viewColumn[icol]] = viewData[0][icol]

#                                 m2.actor_with_inspection_details.objects.create(einspno_id=inspectionId,actorId_id=actorId,value=av,details = dictData)
                        
#                     m2.actor_with_inspection_details.objects.filter(~Q(value__in=tval),einspno=inspectionId,actorId=actorId).delete()

#                 count = 0
#                 totalQidUsed=[]
#                 for adata in ajaxdata:
#                     a = adata.split('@#@')
#                     comploc = a[6]
#                     question_id = a[1]
#                     count += 1
#                     tickId = 'tick@'+a[7]+'@'+str(count)
#                     tickVal = request.POST.get(tickId)
#                     radioval = None
#                     if tickVal !=None:
#                         obj2=m2.questionare_master.objects.filter(qid = question_id)[0]
#                         if a[0] == '1':
#                             dataid = 'userinput' + str(count)
#                             datavalue = request.POST.get(dataid)

#                             if datavalue == '' or datavalue == None:
#                                 continue
#                             else:
#                                 departmentId = 'department1' + str(count)
#                                 officer = 'officer11' + str(count)
#                                 remarks = 'remarks' + str(count)
                                

#                                 departmentId = request.POST.get(departmentId)
#                                 officer = request.POST.get(officer)
#                                 remarks = request.POST.get(remarks)
#                                 if comploc == 'None':
#                                     location = None
#                                 else:
#                                     if comploc == 'Pole Location' or comploc == 'Number':
#                                         idloc = 'location1' + str(count)
#                                         location = request.POST.getlist(idloc)
#                                         loc=''
#                                         for l in range(len(location)):
#                                             if l!=0:
#                                                 loc = loc+';'
#                                             loc = loc + location[l]
#                                         location = loc
#                                     elif comploc == 'Coach Number':
#                                         idloc = 'location1' + str(count)
#                                         location = request.POST.get(idloc)
#                                     elif comploc == 'Direction':
#                                         idloc = 'location' + str(count)
#                                         location = request.POST.get(idloc)
#                         elif a[0] == '2':
#                             dataid = 'roption' + str(count)
#                             datavalue = request.POST.get(dataid)

#                             if datavalue == '' or datavalue == None:
#                                 continue
#                             else:
                               
#                                 if m2.radio_options.objects.filter(rlabel=datavalue,rid=obj2.roption1.rid).exists():
#                                     radioval = obj2.roption1.rid
#                                 elif m2.radio_options.objects.filter(rlabel=datavalue,rid=obj2.roption2.rid).exists():
#                                     radioval = obj2.roption2.rid
#                                 else:
#                                     radioval = None
#                                 departmentId = 'department1' + str(count)
#                                 officer = 'officer11' + str(count)
#                                 remarks = 'remarks' + str(count)
                                

#                                 departmentId = request.POST.get(departmentId)
#                                 officer = request.POST.get(officer)
#                                 remarks = request.POST.get(remarks)
#                                 if comploc == 'None':
#                                     location = None
#                                 else:
#                                     if comploc == 'Pole Location' or comploc == 'Number':
#                                         idloc = 'location1' + str(count)
#                                         location = request.POST.getlist(idloc)
#                                         loc=''
#                                         for l in range(len(location)):
#                                             if l!=0:
#                                                 loc = loc+';'
#                                             loc = loc + location[l]
#                                         location = loc
#                                     elif comploc == 'Coach Number':
#                                         idloc = 'location1' + str(count)
#                                         location = request.POST.get(idloc)
#                                     elif comploc == 'Direction':
#                                         idloc = 'location' + str(count)
#                                         location = request.POST.get(idloc)
                                        
#                         elif a[0] == '3':
#                             dataid = 'doption' + str(count)
#                             datavalue = request.POST.get(dataid)
#                             if datavalue == '' or datavalue == None:
#                                 continue
#                             else:
#                                 departmentId = 'department1' + str(count)
#                                 officer = 'officer11' + str(count)
#                                 remarks = 'remarks' + str(count)
                                

#                                 departmentId = request.POST.get(departmentId)
#                                 officer = request.POST.get(officer)
#                                 remarks = request.POST.get(remarks)
#                                 if comploc == 'None':
#                                     location = None
#                                 else:
#                                     if comploc == 'Pole Location' or comploc == 'Number':
#                                         idloc = 'location1' + str(count)
#                                         location = request.POST.getlist(idloc)
#                                         loc=''
#                                         for l in range(len(location)):
#                                             if l!=0:
#                                                 loc = loc+';'
#                                             loc = loc + location[l]
#                                         location = loc
#                                     elif comploc == 'Coach Number':
#                                         idloc = 'location1' + str(count)
#                                         location = request.POST.get(idloc)
#                                     elif comploc == 'Direction':
#                                         idloc = 'location' + str(count)
#                                         location = request.POST.get(idloc)
#                         elif a[0] == '4':
#                             dataid = 'date' + str(count)
#                             datavalue = request.POST.get(dataid)
#                             if datavalue == '' or datavalue == None:
#                                 continue
#                             else:
#                                 departmentId = 'department1' + str(count)
#                                 officer = 'officer11' + str(count)
#                                 remarks = 'remarks' + str(count)
                                

#                                 departmentId = request.POST.get(departmentId)
#                                 officer = request.POST.get(officer)
#                                 remarks = request.POST.get(remarks)
#                                 if comploc == 'None':
#                                     location = None
#                                 else:
#                                     if comploc == 'Pole Location' or comploc == 'Number':
#                                         idloc = 'location1' + str(count)
#                                         location = request.POST.getlist(idloc)
#                                         loc=''
#                                         for l in range(len(location)):
#                                             if l!=0:
#                                                 loc = loc+';'
#                                             loc = loc + location[l]
#                                         location = loc
#                                     elif comploc == 'Coach Number':
#                                         idloc = 'location1' + str(count)
#                                         location = request.POST.get(idloc)
#                                     elif comploc == 'Direction':
#                                         idloc = 'location' + str(count)
#                                         location = request.POST.get(idloc)
#                         elif a[0] == '5':
#                             dataid = 'time' + str(count)
#                             datavalue = request.POST.get(dataid)
#                             if datavalue == '' or datavalue == None:
#                                 continue
#                             else:
#                                 departmentId = 'department1' + str(count)
#                                 officer = 'officer11' + str(count)
#                                 remarks = 'remarks' + str(count)
                                

#                                 departmentId = request.POST.get(departmentId)
#                                 officer = request.POST.get(officer)
#                                 remarks = request.POST.get(remarks)
#                                 if comploc == 'None':
#                                     location = None
#                                 else:
#                                     if comploc == 'Pole Location' or comploc == 'Number':
#                                         idloc = 'location1' + str(count)
#                                         location = request.POST.getlist(idloc)
#                                         loc=''
#                                         for l in range(len(location)):
#                                             if l!=0:
#                                                 loc = loc+';'
#                                             loc = loc + location[l]
#                                         location = loc
#                                     elif comploc == 'Coach Number':
#                                         idloc = 'location1' + str(count)
#                                         location = request.POST.get(idloc)
#                                     elif comploc == 'Direction':
#                                         idloc = 'location' + str(count)
#                                         location = request.POST.get(idloc)
#                         elif a[0] == '6':
#                             dataid = 'file' + str(count)
                            
#                             try:
#                                 if len(request.FILES) != 0:
#                                     supdoc = request.FILES[dataid]
#                                     folder='media/Einspection/'
#                                     fs=FileSystemStorage(location=folder)  
#                                     files=fs.save(supdoc.name,supdoc)      
#                                     datavalue = fs.url(files)
#                                     datavalue = str(datavalue).split('media/')
#                                     datavalue = 'Einspection/'+datavalue[1]
#                                 else:
#                                     datavalue = None
#                             except: 
#                                 datavalue = None
                            
                            
#                             if datavalue == '' or datavalue == None:
#                                 continue
#                             else:
#                                 departmentId = 'department1' + str(count)
#                                 officer = 'officer11' + str(count)
#                                 remarks = 'remarks' + str(count)
                                
#                                 departmentId = request.POST.get(departmentId)
#                                 officer = request.POST.get(officer)
#                                 remarks = request.POST.get(remarks)
#                                 if comploc == 'None':
#                                     location = None
#                                 else:
#                                     if comploc == 'Pole Location' or comploc == 'Number':
#                                         idloc = 'location1' + str(count)
#                                         location = request.POST.getlist(idloc)
#                                         loc=''
#                                         for l in range(len(location)):
#                                             if l!=0:
#                                                 loc = loc+';'
#                                             loc = loc + location[l]
#                                         location = loc
#                                     elif comploc == 'Coach Number':
#                                         idloc = 'location1' + str(count)
#                                         location = request.POST.get(idloc)
#                                     elif comploc == 'Direction':
#                                         idloc = 'location' + str(count)
#                                         location = request.POST.get(idloc)
#                         elif a[0] == '9':
                            
#                             dataid = 'checkbox#' + str(a[1])
#                             datavalue = request.POST.getlist(dataid)
                            
#                             if len(datavalue) == 0:
#                                 continue
#                             else:
#                                 str1 =''
#                                 for iii in range(len(datavalue)):
#                                     if iii != 0:
#                                         str1 = str1 + '$'
#                                     str1 = str1 + datavalue[iii]
#                                 datavalue = str1
#                                 departmentId = 'department1' + str(count)
#                                 officer = 'officer11' + str(count)
#                                 remarks = 'remarks' + str(count)
#                                 departmentId = request.POST.get(departmentId)
#                                 officer = request.POST.get(officer)
#                                 remarks = request.POST.get(remarks)
#                                 if comploc == 'None':
#                                     location = None
#                                 else:
#                                     if comploc == 'Pole Location' or comploc == 'Number':
#                                         idloc = 'location1' + str(count)
#                                         location = request.POST.getlist(idloc)
#                                         loc=''
#                                         for l in range(len(location)):
#                                             if l!=0:
#                                                 loc = loc+';'
#                                             loc = loc + location[l]
#                                         location = loc


#                                     elif comploc == 'Coach Number':
#                                         idloc = 'location1' + str(count)
#                                         location = request.POST.get(idloc)
#                                     elif comploc == 'Direction':
#                                         idloc = 'location' + str(count)
#                                         location = request.POST.get(idloc)
#                         elif a[0] == '10':
                            
#                             dataid = 'checkbox' + str(a[1])
#                             datavalue = request.POST.getlist(dataid)
                            
#                             if len(datavalue) == 0:
#                                 continue
#                             else:
#                                 str1 =''
#                                 for iii in range(len(datavalue)):
#                                     if iii != 0:
#                                         str1 = str1 + '$'
#                                     str1 = str1 + datavalue[iii]
#                                 datavalue = str1
#                                 departmentId = 'department1' + str(count)
#                                 officer = 'officer11' + str(count)
#                                 remarks = 'remarks' + str(count)
#                                 departmentId = request.POST.get(departmentId)
#                                 officer = request.POST.get(officer)
#                                 remarks = request.POST.get(remarks)
#                                 if comploc == 'None':
#                                     location = None
#                                 else:
#                                     if comploc == 'Pole Location' or comploc == 'Number':
#                                         idloc = 'location1' + str(count)
#                                         location = request.POST.getlist(idloc)
#                                         loc=''
#                                         for l in range(len(location)):
#                                             if l!=0:
#                                                 loc = loc+';'
#                                             loc = loc + location[l]
#                                         location = loc


#                                     elif comploc == 'Coach Number':
#                                         idloc = 'location1' + str(count)
#                                         location = request.POST.get(idloc)
#                                     elif comploc == 'Direction':
#                                         idloc = 'location' + str(count)
#                                         location = request.POST.get(idloc)
                        
#                         else:
#                             dataid = 'userinput' + str(count)
#                             datavalue = request.POST.get(dataid)
#                             if datavalue == '' or datavalue == None:
#                                 continue
#                             else:
#                                 departmentId = 'department1' + str(count)
#                                 officer = 'officer11' + str(count)
#                                 remarks = 'remarks' + str(count)
#                                 departmentId = request.POST.get(departmentId)
#                                 officer = request.POST.get(officer)
#                                 remarks = request.POST.get(remarks)
#                                 if comploc == 'None':
#                                     location = None
#                                 else:
#                                     if comploc == 'Pole Location' or comploc == 'Number':
#                                         idloc = 'location1' + str(count)
#                                         location = request.POST.getlist(idloc)
#                                         loc=''
#                                         for l in range(len(location)):
#                                             if l!=0:
#                                                 loc = loc+';'
#                                             loc = loc + location[l]
#                                         location = loc


#                                     elif comploc == 'Coach Number':
#                                         idloc = 'location1' + str(count)
#                                         location = request.POST.get(idloc)
#                                     elif comploc == 'Direction':
#                                         idloc = 'location' + str(count)
#                                         location = request.POST.get(idloc)

#                         totalQidUsed.append(int(question_id))
#                         if not m2.einspection_item_detail.objects.filter(einspno = inspectionId).exists():
#                             item = m2.einspection_item_detail.objects.create(status=0,einspno_id=inspectionId,qid_id=question_id,value=datavalue,qncat=obj2.instypeid_id,
#                                 qtype='e-Inspection',created_by=loginUser.empno.empno,lastmodified_by=loginUser.empno.empno,
#                                 created_on=systemDateTime,lastmodified_on=systemDateTime,location=location,remarks=remarks,value_id_id=radioval)
#                             try:
#                                 mark = Level_Desig.objects.filter(designation_code = officer)[0]
#                                 m2.einsp_marked.objects.create(designation_by=designations[0]['designation'],eitemid=item,marked_to=mark,marked_emp_id=mark.empno_id,status_flag=1,department_id=departmentId,
#                                                             designation = mark.designation,
#                                                     created_by=loginUser.empno.empno,lastmodified_by=loginUser.empno.empno,
#                                                     created_on=systemDateTime,lastmodified_on=systemDateTime)
#                             except:
#                                 pass
#                         else:
#                             if m2.einspection_item_detail.objects.filter(einspno = inspectionId,qid=question_id).exists():
#                                 item = m2.einspection_item_detail.objects.filter(einspno = inspectionId,qid=question_id).update(status=0,value=datavalue,qncat=obj2.instypeid_id,
#                                 qtype='e-Inspection',lastmodified_by=loginUser.empno.empno,
#                                 lastmodified_on=systemDateTime,location=location,remarks=remarks,value_id_id=radioval)
                                
#                                 try:
#                                     mark = Level_Desig.objects.filter(designation_code = officer)[0]
                                    
#                                     item = m2.einspection_item_detail.objects.filter(einspno = inspectionId,qid=question_id)[0]
                                    
#                                     m2.einsp_marked.objects.filter(eitemid = item.eitemid).update(designation_by=designations[0]['designation'],marked_to=mark,marked_emp_id=mark.empno_id,status_flag=1,department_id=departmentId,designation = mark.designation,lastmodified_by=loginUser.empno.empno,lastmodified_on=systemDateTime)
#                                 except:
#                                     pass
#                             else:
#                                 item = m2.einspection_item_detail.objects.create(status=0,einspno_id=inspectionId,qid_id=question_id,value=datavalue,qncat=obj2.instypeid_id,
#                                     qtype='e-Inspection',created_by=loginUser.empno.empno,lastmodified_by=loginUser.empno.empno,
#                                     created_on=systemDateTime,lastmodified_on=systemDateTime,location=location,remarks=remarks,value_id_id=radioval)
#                                 try:
#                                     mark = Level_Desig.objects.filter(designation_code = officer)[0]
#                                     m2.einsp_marked.objects.create(designation_by=designations[0]['designation'],eitemid=item,marked_to=mark,marked_emp_id=mark.empno_id,status_flag=1,department_id=departmentId,
#                                                                 designation = mark.designation,
#                                                     created_by=loginUser.empno.empno,lastmodified_by=loginUser.empno.empno,
#                                                     created_on=systemDateTime,lastmodified_on=systemDateTime)
#                                 except:
#                                     pass
                        
#                 m2.einsp_marked.objects.filter(Q(eitemid__in=m2.einspection_item_detail.objects.filter(einspno=inspectionId).values('eitemid'))).update(status_flag=0)
#                 m2.einsp_marked.objects.filter(Q(eitemid__in=m2.einspection_item_detail.objects.exclude(qid__in=totalQidUsed).filter(einspno=inspectionId).values('eitemid'))).delete()
#                 m2.einspection_item_detail.objects.exclude(qid__in=totalQidUsed).filter(einspno=inspectionId).delete()
#                 #return HttpResponseRedirect(f'/showMenu/?id={id}&inspectionId={inspectionId}')
#                 return redirect('draft_inspection_form')
            

#             elif 'Save and Finalize' == submitvalue:
#                 inspectionId=request.POST.get('inspectionId')
#                 request.POST.get('user')
#                 commanDepartment = request.POST.getlist('commanDepartment') 
#                 comman = ''
#                 for l in range(len(commanDepartment)):
#                     if l!=0:
#                         comman = comman+';'
#                     comman = comman + commanDepartment[l]
#                 commanDepartment = comman
#                 railways = request.POST.get('userdata0') 
#                 division = request.POST.get('userdata1') 
#                 start_date = request.POST.get('userdata4')
#                 start_date = (datetime.datetime.strptime(start_date,'%d-%m-%Y')).strftime('%Y-%m-%d')
#                 start_time = request.POST.get('userdata5') 
#                 end_date = request.POST.get('userdata6') 
#                 if end_date == '':
#                     end_date = None
#                 else:
#                     end_date = (datetime.datetime.strptime(end_date,'%d-%m-%Y')).strftime('%Y-%m-%d')
                 
#                 end_time = request.POST.get('userdata7')
#                 if end_time == '':
#                     end_time = None 
#                 inspid = request.POST.get('id')
#                 detail = request.POST.get('userdata9')
#                 print(detail,'    hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh      ')
#                 masterTableStatus = request.POST.get('masterTableStatus')
#                 entity = request.POST.get('entitylbl') 
#                 radios2 = request.POST.get('abnormal') 
#                 remarks11 = request.POST.get('userdata15')
#                 section = request.POST.get('userdata17') 
#                 inspectionType = int(request.POST.get('supnight'))   
#                 ratings1 = request.POST.get('ratings1')  
#                 finalizeStart = request.POST.get('finalizeStart')   
#                 finalizeEnd = request.POST.get('finalizeEnd')
#                 if ratings1 == None:
#                     ratings1 = None

#                 if radios2 == 'no':
#                     saving = 'no'
#                 else:
#                     saving = 'yes/'+remarks11
                
#                 if inspectionType == 3:
#                     is_scheduled = False
#                     inspection_type = 3
#                 elif inspectionType == 2:
#                     is_scheduled = True
#                     inspection_type=2
#                 elif inspectionType == 1:
#                     is_scheduled = True
#                     inspection_type = 1
#                 else:
#                     is_scheduled = True
#                     inspection_type = 0

#                 try:
#                     if len(request.FILES) != 0:
#                         supdoc = request.FILES['userdata14']
#                         folder='media/documents/'
#                         fs=FileSystemStorage(location=folder)  
#                         files=fs.save(supdoc.name,supdoc)      
#                         documents = fs.url(files)
#                         documents = str(documents).split('media/')
#                         documents = 'documents/'+documents[1]
#                     else:
#                         documents = None
#                 except: 
#                     documents = None
#                 railways=railwayLocationMaster.objects.filter(rly_unit_code=railways)[0]
#                 division=railwayLocationMaster.objects.filter(rly_unit_code=division)[0]
#                 email=str(request.user)
#                 max_id=0
#                 temp=list(m2.einspection_details.objects.filter(delete_flag=False).values())
#                 if len(temp)!=0:
#                     max_id = m2.einspection_details.objects.aggregate(Max('einspno'))['einspno__max']
#                     max_id+=1 
#                 else:
#                     max_id=1

#                 loginUser=Level_Desig.objects.filter(official_email_ID=email)[0]
#                 department=departMast.objects.filter(department_name=loginUser.department)[0]

#                 currentDateTime = datetime.datetime.now()
#                 date = currentDateTime.date()
#                 year=date.strftime("%Y")
#                 inspection=inspectiontype_master.objects.filter(instypeid=id,delete_flag=False)[0]
#                 if inspection.entity != None:
#                     inspectionEntity = inspection.entity.dmaster
#                     inspection_title=str(inspection.shortcode) + ' Inspection of ' + str(inspectionEntity) + ' - ' + str(detail) + ' by ' + str(loginUser.designation) + ' on ' + str((datetime.datetime.strptime(start_date,'%Y-%m-%d')).strftime('%d-%m-%Y'))
#                 else:
#                     inspectionEntity = None
#                     res123=list(section_master.objects.filter(secid=section).values('section_code'))[0]['section_code']
#                     inspection_title=str(inspection.shortcode) + ' Inspection of Section - ' + str(res123) + ' by ' + str(loginUser.designation) + ' on ' + str((datetime.datetime.strptime(start_date,'%Y-%m-%d')).strftime('%d-%m-%Y'))

                
#                 inspection_note_no= str(year)+'/'+str(loginUser.designation) + '/' + str(inspection.name) + '/' + str(max_id)
#                 saving=str(radios2) + '/' + str(remarks11)
#                 systemDateTime = currentDateTime.strftime("%Y-%m-%d %H:%M:%S")
#                 reportPath = '/pdfDetails/?id='+str(max_id)
                
#                 if inspectionId == '':
#                     obj1=m2.einspection_details.objects.create(masterTableFlag=masterTableStatus,finalizeStart= finalizeStart,finalizeEnd=finalizeEnd,status = 1,instypeid=inspection,inspected_on=start_date, start_date=start_date,              end_date=end_date,start_time=start_time,end_time=end_time,
#                             inspection_title=inspection_title,designation=loginUser,inspection_note_no=inspection_note_no,ratings=ratings1,abnormal=saving,dept=department,
#                             rly_id_id=railways,div_id_id=division,entitydetails=inspectionEntity,entityid=detail,created_by=loginUser.empno.empno,lastmodified_by=loginUser.empno.empno,is_scheduled=is_scheduled,
#                             created_on=systemDateTime,lastmodified_on=systemDateTime,section_id=section,inspection_type=inspection_type,documents=documents,report_path=reportPath,commanDepartment=commanDepartment)
                    
#                     inspectionId = max_id
#                 else:
#                     obj1=m2.einspection_details.objects.filter(einspno = inspectionId).update(masterTableFlag=masterTableStatus,finalizeStart= finalizeStart,finalizeEnd=finalizeEnd,status = 1,instypeid=inspection,end_date=end_date,end_time=end_time,
#                             inspection_title=inspection_title,designation=loginUser,inspection_note_no=inspection_note_no,ratings=ratings1,abnormal=saving,dept=department,
#                             rly_id_id=railways,div_id_id=division,entitydetails=inspectionEntity,entityid=detail,lastmodified_by=loginUser.empno.empno,is_scheduled=is_scheduled,
#                             lastmodified_on=systemDateTime,section_id=section,inspection_type=inspection_type,documents=documents,report_path=reportPath,commanDepartment=commanDepartment)
                
#                 copyToOfficer = request.POST.getlist('copyToOfficer')
#                 if len(copyToOfficer) > 0:
#                     copy_to_id = ''
#                     copy_to_desig = ''
#                     for li1 in copyToOfficer:
#                         level1_data = list(Level_Desig.objects.filter(designation_code=li1).values('designation_code','designation'))
#                         if len(level1_data)>0:
#                             if copy_to_id != '':
#                                 copy_to_id = copy_to_id + ','
#                             if copy_to_desig != '':
#                                 copy_to_desig = copy_to_desig + ','
#                             copy_to_id = copy_to_id + str(level1_data[0]['designation_code'])
#                             copy_to_desig = copy_to_desig + level1_data[0]['designation']

#                     if mm6.copyto_mails.objects.filter(doc_id=inspectionId, area_flag=0, doc_table='e').exists():
#                         mm6.copyto_mails.objects.filter(doc_id=inspectionId, area_flag=0, doc_table='e').update(sender_id_id=loginUser.designation_code, receiver_id=copy_to_id, receiver_desig=copy_to_desig)
#                     else:
#                         mm6.copyto_mails.objects.create(sender_id_id=loginUser.designation_code, doc_id=inspectionId, area_flag=0, doc_table='e', receiver_id=copy_to_id, receiver_desig=copy_to_desig)



#                 for ia in range(len(actorDetailsData)):
#                     actorId = actorDetailsData[ia]['actorId']
#                     actorName = actorDetailsData[ia]['actor']
#                     actorValue = [request.POST.get('actor'+actorName)]
#                     tval = []
#                     if  actorValue != ['']:   
#                         for av in actorValue:
#                             #av = av.split('-')[0]
#                             tval.append(av)
#                             if not m2.actor_with_inspection_details.objects.filter(einspno_id=inspectionId,actorId_id=actorId,value=av).exists():

#                                 lst121 = list(actor_details.objects.filter(actorId=actorId).values())
#                                 viewName = lst121[0]['viewName']
#                                 ViewFilter = lst121[0]['viewFilter'] 
#                                 viewColumn = lst121[0]['viewColumn'].split(',')
#                                 cursor = connection.cursor()
#                                 viewData=[]
#                                 avVal = (av.split('-')[0]).strip()
#                                 print(viewName, ViewFilter, avVal)
#                                 qry = ''' select * from "%s" where "%s" = '%s';''' % (viewName, ViewFilter, avVal)
#                                 cursor.execute(qry)
#                                 viewData.extend(cursor.fetchall())
#                                 cursor.close()
#                                 dictData={}
#                                 for icol in range(len(viewColumn)):
#                                     dictData[viewColumn[icol]] = viewData[0][icol]

#                                 m2.actor_with_inspection_details.objects.create(einspno_id=inspectionId,actorId_id=actorId,value=av,details = dictData)
                        
#                     m2.actor_with_inspection_details.objects.filter(~Q(value__in=tval),einspno=inspectionId,actorId=actorId).delete()

#                 count = 0
#                 totalQidUsed = []
#                 for adata in ajaxdata:
#                     a = adata.split('@#@')
#                     comploc = a[6]
#                     question_id = a[1]
#                     count += 1
#                     radioval = None
#                     tickId = 'tick@'+a[7]+'@'+str(count)
#                     tickVal = request.POST.get(tickId)
#                     if tickVal !=None:
#                         obj2=m2.questionare_master.objects.filter(qid = question_id)[0]
#                         if a[0] == '1':
#                             dataid = 'userinput' + str(count)
#                             datavalue = request.POST.get(dataid)

#                             if datavalue == '' or datavalue == None:
#                                 continue
#                             else:
#                                 departmentId = 'department1' + str(count)
#                                 officer = 'officer11' + str(count)
#                                 remarks = 'remarks' + str(count)
                                

#                                 departmentId = request.POST.get(departmentId)
#                                 officer = request.POST.get(officer)
#                                 remarks = request.POST.get(remarks)
#                                 if comploc == 'None':
#                                     location = None
#                                 else:
#                                     if comploc == 'Pole Location' or comploc == 'Number':
#                                         idloc = 'location1' + str(count)
#                                         location = request.POST.getlist(idloc)
#                                         loc=''
#                                         for l in range(len(location)):
#                                             if l!=0:
#                                                 loc = loc+';'
#                                             loc = loc + location[l]
#                                         location = loc
#                                     elif comploc == 'Coach Number':
#                                         idloc = 'location1' + str(count)
#                                         location = request.POST.get(idloc)
#                                     elif comploc == 'Direction':
#                                         idloc = 'location' + str(count)
#                                         location = request.POST.get(idloc)
                                    
#                         elif a[0] == '2':
#                             dataid = 'roption' + str(count)
#                             datavalue = request.POST.get(dataid)
#                             if datavalue == '' or datavalue == None:
#                                 continue
#                             else:
#                                 if m2.radio_options.objects.filter(rlabel=datavalue,rid=obj2.roption1.rid).exists():
#                                     radioval = obj2.roption1.rid
#                                 elif m2.radio_options.objects.filter(rlabel=datavalue,rid=obj2.roption2.rid).exists():
#                                     radioval = obj2.roption2.rid
#                                 else:
#                                     radioval = None
#                                 departmentId = 'department1' + str(count)
#                                 officer = 'officer11' + str(count)
#                                 remarks = 'remarks' + str(count)
                                

#                                 departmentId = request.POST.get(departmentId)
#                                 officer = request.POST.get(officer)
#                                 remarks = request.POST.get(remarks)
#                                 if comploc == 'None':
#                                     location = None
#                                 else:
#                                     if comploc == 'Pole Location' or comploc == 'Number':
#                                         idloc = 'location1' + str(count)
#                                         location = request.POST.getlist(idloc)
#                                         loc=''
#                                         for l in range(len(location)):
#                                             if l!=0:
#                                                 loc = loc+';'
#                                             loc = loc + location[l]
#                                         location = loc
#                                     elif comploc == 'Coach Number':
#                                         idloc = 'location1' + str(count)
#                                         location = request.POST.get(idloc)
#                                     elif comploc == 'Direction':
#                                         idloc = 'location' + str(count)
#                                         location = request.POST.get(idloc)
#                         elif a[0] == '3':
#                             dataid = 'doption' + str(count)
#                             datavalue = request.POST.get(dataid)
#                             if datavalue == '' or datavalue == None:
#                                 continue
#                             else:
#                                 departmentId = 'department1' + str(count)
#                                 officer = 'officer11' + str(count)
#                                 remarks = 'remarks' + str(count)
                                

#                                 departmentId = request.POST.get(departmentId)
#                                 officer = request.POST.get(officer)
#                                 remarks = request.POST.get(remarks)
#                                 if comploc == 'None':
#                                     location = None
#                                 else:
#                                     if comploc == 'Pole Location' or comploc == 'Number':
#                                         idloc = 'location1' + str(count)
#                                         location = request.POST.getlist(idloc)
#                                         loc=''
#                                         for l in range(len(location)):
#                                             if l!=0:
#                                                 loc = loc+';'
#                                             loc = loc + location[l]
#                                         location = loc
#                                     elif comploc == 'Coach Number':
#                                         idloc = 'location1' + str(count)
#                                         location = request.POST.get(idloc)
#                                     elif comploc == 'Direction':
#                                         idloc = 'location' + str(count)
#                                         location = request.POST.get(idloc)
#                         elif a[0] == '4':
#                             dataid = 'date' + str(count)
#                             datavalue = request.POST.get(dataid)
#                             if datavalue == '' or datavalue == None:
#                                 continue
#                             else:
#                                 departmentId = 'department1' + str(count)
#                                 officer = 'officer11' + str(count)
#                                 remarks = 'remarks' + str(count)
                                

#                                 departmentId = request.POST.get(departmentId)
#                                 officer = request.POST.get(officer)
#                                 remarks = request.POST.get(remarks)
#                                 if comploc == 'None':
#                                     location = None
#                                 else:
#                                     if comploc == 'Pole Location' or comploc == 'Number':
#                                         idloc = 'location1' + str(count)
#                                         location = request.POST.getlist(idloc)
#                                         loc=''
#                                         for l in range(len(location)):
#                                             if l!=0:
#                                                 loc = loc+';'
#                                             loc = loc + location[l]
#                                         location = loc
#                                     elif comploc == 'Coach Number':
#                                         idloc = 'location1' + str(count)
#                                         location = request.POST.get(idloc)
#                                     elif comploc == 'Direction':
#                                         idloc = 'location' + str(count)
#                                         location = request.POST.get(idloc)
#                         elif a[0] == '5':
#                             dataid = 'time' + str(count)
#                             datavalue = request.POST.get(dataid)
#                             if datavalue == '' or datavalue == None:
#                                 continue
#                             else:
#                                 departmentId = 'department1' + str(count)
#                                 officer = 'officer11' + str(count)
#                                 remarks = 'remarks' + str(count)
                                

#                                 departmentId = request.POST.get(departmentId)
#                                 officer = request.POST.get(officer)
#                                 remarks = request.POST.get(remarks)
#                                 if comploc == 'None':
#                                     location = None
#                                 else:
#                                     if comploc == 'Pole Location' or comploc == 'Number':
#                                         idloc = 'location1' + str(count)
#                                         location = request.POST.getlist(idloc)
#                                         loc=''
#                                         for l in range(len(location)):
#                                             if l!=0:
#                                                 loc = loc+';'
#                                             loc = loc + location[l]
#                                         location = loc
#                                     elif comploc == 'Coach Number':
#                                         idloc = 'location1' + str(count)
#                                         location = request.POST.get(idloc)
#                                     elif comploc == 'Direction':
#                                         idloc = 'location' + str(count)
#                                         location = request.POST.get(idloc)
#                         elif a[0] == '6':
#                             dataid = 'file' + str(count)
                            
#                             try:
#                                 if len(request.FILES) != 0:
#                                     supdoc = request.FILES[dataid]
#                                     folder='media/images11/'
#                                     fs=FileSystemStorage(location=folder)  
#                                     files=fs.save(supdoc.name,supdoc)      
#                                     datavalue = fs.url(files)
#                                     datavalue = str(datavalue).split('media/')
#                                     datavalue = 'images11/'+datavalue[1]
#                                 else:
#                                     datavalue = None
#                             except: 
#                                 datavalue = None
                            
                            
#                             if datavalue == '' or datavalue == None:
#                                 continue
#                             else:
#                                 departmentId = 'department1' + str(count)
#                                 officer = 'officer11' + str(count)
#                                 remarks = 'remarks' + str(count)
                                
#                                 departmentId = request.POST.get(departmentId)
#                                 officer = request.POST.get(officer)
#                                 remarks = request.POST.get(remarks)
#                                 if comploc == 'None':
#                                     location = None
#                                 else:
#                                     if comploc == 'Pole Location' or comploc == 'Number':
#                                         idloc = 'location1' + str(count)
#                                         location = request.POST.getlist(idloc)
#                                         loc=''
#                                         for l in range(len(location)):
#                                             if l!=0:
#                                                 loc = loc+';'
#                                             loc = loc + location[l]
#                                         location = loc
#                                     elif comploc == 'Coach Number':
#                                         idloc = 'location1' + str(count)
#                                         location = request.POST.get(idloc)
#                                     elif comploc == 'Direction':
#                                         idloc = 'location' + str(count)
#                                         location = request.POST.get(idloc)
#                         elif a[0] == '9':
                            
#                             dataid = 'checkbox#' + str(a[1])
#                             datavalue = request.POST.getlist(dataid)
                            
#                             if len(datavalue) == 0:
#                                 continue
#                             else:
#                                 str1 =''
#                                 for iii in range(len(datavalue)):
#                                     if iii != 0:
#                                         str1 = str1 + '$'
#                                     str1 = str1 + datavalue[iii]
#                                 datavalue = str1
#                                 departmentId = 'department1' + str(count)
#                                 officer = 'officer11' + str(count)
#                                 remarks = 'remarks' + str(count)
#                                 departmentId = request.POST.get(departmentId)
#                                 officer = request.POST.get(officer)
#                                 remarks = request.POST.get(remarks)
#                                 if comploc == 'None':
#                                     location = None
#                                 else:
#                                     if comploc == 'Pole Location' or comploc == 'Number':
#                                         idloc = 'location1' + str(count)
#                                         location = request.POST.getlist(idloc)
#                                         loc=''
#                                         for l in range(len(location)):
#                                             if l!=0:
#                                                 loc = loc+';'
#                                             loc = loc + location[l]
#                                         location = loc


#                                     elif comploc == 'Coach Number':
#                                         idloc = 'location1' + str(count)
#                                         location = request.POST.get(idloc)
#                                     elif comploc == 'Direction':
#                                         idloc = 'location' + str(count)
#                                         location = request.POST.get(idloc)
#                         elif a[0] == '10':
                            
#                             dataid = 'checkbox' + str(a[1])
#                             datavalue = request.POST.getlist(dataid)
                            
#                             if len(datavalue) == 0:
#                                 continue
#                             else:
#                                 str1 =''
#                                 for iii in range(len(datavalue)):
#                                     if iii != 0:
#                                         str1 = str1 + '$'
#                                     str1 = str1 + datavalue[iii]
#                                 datavalue = str1
#                                 departmentId = 'department1' + str(count)
#                                 officer = 'officer11' + str(count)
#                                 remarks = 'remarks' + str(count)
#                                 departmentId = request.POST.get(departmentId)
#                                 officer = request.POST.get(officer)
#                                 remarks = request.POST.get(remarks)
#                                 if comploc == 'None':
#                                     location = None
#                                 else:
#                                     if comploc == 'Pole Location' or comploc == 'Number':
#                                         idloc = 'location1' + str(count)
#                                         location = request.POST.getlist(idloc)
#                                         loc=''
#                                         for l in range(len(location)):
#                                             if l!=0:
#                                                 loc = loc+';'
#                                             loc = loc + location[l]
#                                         location = loc


#                                     elif comploc == 'Coach Number':
#                                         idloc = 'location1' + str(count)
#                                         location = request.POST.get(idloc)
#                                     elif comploc == 'Direction':
#                                         idloc = 'location' + str(count)
#                                         location = request.POST.get(idloc)
                        
#                         else:
#                             dataid = 'userinput' + str(count)
#                             datavalue = request.POST.get(dataid)
#                             if datavalue == '' or datavalue == None:
#                                 continue
#                             else:
#                                 departmentId = 'department1' + str(count)
#                                 officer = 'officer11' + str(count)
#                                 remarks = 'remarks' + str(count)
#                                 departmentId = request.POST.get(departmentId)
#                                 officer = request.POST.get(officer)
#                                 remarks = request.POST.get(remarks)
#                                 if comploc == 'None':
#                                     location = None
#                                 else:
#                                     if comploc == 'Pole Location' or comploc == 'Number':
#                                         idloc = 'location1' + str(count)
#                                         location = request.POST.getlist(idloc)
#                                         loc=''
#                                         for l in range(len(location)):
#                                             if l!=0:
#                                                 loc = loc+';'
#                                             loc = loc + location[l]
#                                         location = loc


#                                     elif comploc == 'Coach Number':
#                                         idloc = 'location1' + str(count)
#                                         location = request.POST.get(idloc)
#                                     elif comploc == 'Direction':
#                                         idloc = 'location' + str(count)
#                                         location = request.POST.get(idloc)
                                
#                         totalQidUsed.append(int(question_id))
#                         if not m2.einspection_item_detail.objects.filter(einspno = inspectionId).exists():
#                             item = m2.einspection_item_detail.objects.create(status=0,einspno_id=inspectionId,qid_id=question_id,value=datavalue,qncat=obj2.instypeid_id,
#                                 qtype='e-Inspection',created_by=loginUser.empno.empno,lastmodified_by=loginUser.empno.empno,
#                                 created_on=systemDateTime,lastmodified_on=systemDateTime,location=location,remarks=remarks,value_id_id=radioval)
#                             try:
#                                 mark = Level_Desig.objects.filter(designation_code = officer)[0]
#                                 m2.einsp_marked.objects.create(designation_by=designations[0]['designation'],eitemid=item,marked_to=mark,marked_emp_id=mark.empno_id,status_flag=1,department_id=departmentId,
#                                                             designation = mark.designation,
#                                                     created_by=loginUser.empno.empno,lastmodified_by=loginUser.empno.empno,
#                                                     created_on=systemDateTime,lastmodified_on=systemDateTime)
#                             except:
#                                     pass
#                         else:
#                             if m2.einspection_item_detail.objects.filter(einspno = inspectionId,qid=question_id).exists():
#                                 item = m2.einspection_item_detail.objects.filter(einspno = inspectionId,qid=question_id).update(status=0,value=datavalue,qncat=obj2.instypeid_id,
#                                 qtype='e-Inspection',lastmodified_by=loginUser.empno.empno,
#                                 lastmodified_on=systemDateTime,location=location,remarks=remarks,value_id_id=radioval)
#                                 try:
#                                     mark = Level_Desig.objects.filter(designation_code = officer)[0]
                                    
#                                     item = m2.einspection_item_detail.objects.filter(einspno = inspectionId,qid=question_id)[0]
                                    
#                                     m2.einsp_marked.objects.filter(eitemid = item.eitemid).update(designation_by=designations[0]['designation'],marked_to=mark,marked_emp_id=mark.empno_id,status_flag=1,department_id=departmentId,designation = mark.designation,lastmodified_by=loginUser.empno.empno,lastmodified_on=systemDateTime)
#                                 except:
#                                     pass
#                             else:
#                                 item = m2.einspection_item_detail.objects.create(status=0,einspno_id=inspectionId,qid_id=question_id,value=datavalue,qncat=obj2.instypeid_id,
#                                     qtype='e-Inspection',created_by=loginUser.empno.empno,lastmodified_by=loginUser.empno.empno,
#                                     created_on=systemDateTime,lastmodified_on=systemDateTime,location=location,remarks=remarks,value_id_id=radioval)
#                                 try:
#                                     mark = Level_Desig.objects.filter(designation_code = officer)[0]
#                                     m2.einsp_marked.objects.create(designation_by=designations[0]['designation'],eitemid=item,marked_to=mark,marked_emp_id=mark.empno_id,status_flag=1,department_id=departmentId,
#                                                                 designation = mark.designation,
#                                                     created_by=loginUser.empno.empno,lastmodified_by=loginUser.empno.empno,
#                                                     created_on=systemDateTime,lastmodified_on=systemDateTime)
#                                 except:
#                                     pass
                
#                 m2.einsp_marked.objects.filter(Q(eitemid__in=m2.einspection_item_detail.objects.filter(einspno=inspectionId).values('eitemid'))).update(status_flag=1)
#                 m2.einsp_marked.objects.filter(Q(eitemid__in=m2.einspection_item_detail.objects.exclude(qid__in=totalQidUsed).filter(einspno=inspectionId).values('eitemid'))).delete()
#                 m2.einspection_item_detail.objects.filter(einspno=inspectionId).update(status=1)
#                 m2.einspection_item_detail.objects.exclude(qid__in=totalQidUsed).filter(einspno=inspectionId).delete()
#                 return redirect('inspection_doneby_list')
        
        
#         inspType= 'Create'
#         einspDetails=[]
#         allData =[]
        
      
            
#         actorPresent = []
#         edit_copy_to = []
#         if inspectionId != '':
#             if m2.einspection_details.objects.filter(status=0,einspno = inspectionId).exists():
#                 inspType= 'Edit'
#                 einspDetails = list(m2.einspection_details.objects.filter(einspno = inspectionId).values('masterTableFlag','is_scheduled','section_id','start_date','end_date','start_time','end_time','rly_id_id','div_id_id','ratings','abnormal','documents','commanDepartment','finalizeStart','finalizeEnd','inspection_type','entityid'))
#                 start_date = einspDetails[0]['start_date'].strftime('%d-%m-%Y')
#                 dateNo = start_date
#                 start_time = str(einspDetails[0]['start_time'])[:5]
#                 masterTableStatus = einspDetails[0]['masterTableFlag']
#                 if einspDetails[0]['end_date'] != None:
#                     end_date = einspDetails[0]['end_date'].strftime('%d-%m-%Y')
#                 else:
#                     end_date =''
#                 if einspDetails[0]['end_time'] != None:
#                     end_time = str(einspDetails[0]['end_time'])[:5]
#                 else:
#                     end_time =''
#                 einspDetails[0].update({'start_date':start_date,'end_date':end_date,'start_time':start_time,'end_time':end_time})
#                 allData =[] 
#                 for adata in ajaxdata:
#                     a = adata.split('@#@')
#                     comploc = a[6]
#                     question_id = a[1]
#                     itemData = list(m2.einspection_item_detail.objects.filter(einspno = inspectionId,qid=question_id).values('value','remarks','location','eitemid'))
                    
#                     if len(itemData)>0:
#                         mrkData = list(m2.einsp_marked.objects.filter(eitemid = itemData[0]['eitemid']).values('department','marked_to','department__department_name'))
#                         if len(mrkData)>0:
#                             department = mrkData[0]['department']
#                             marked_to = mrkData[0]['marked_to']
#                             departmentName = mrkData[0]['department__department_name']
#                         else:
#                             department = ''
#                             marked_to = ''
#                             departmentName = ''
#                         officer_list = ''
#                         if department != '':
#                             userDiv=railwayLocationMaster.objects.filter(rly_unit_code=str(einspDetails[0]['div_id_id']))[0]
#                             #list(Level_Desig.objects.filter(rly_unit__parent_location_code=userDiv.parent_location_code,department_code__department_code=department).values())
#                             officer_list = list(Level_Desig.objects.filter(rly_unit__parent_location_code=userDiv.parent_location_code,department_code__department_code=department).values('designation_code','designation'))
#                         dataValueEnc = ''
#                         remarksEnc = ''
#                         if itemData[0]['value'] != None:
#                             dataValueEnc = encryptWithAesEinspect(itemData[0]['value'])
#                         if itemData[0]['remarks'] != None:
#                             remarksEnc = encryptWithAesEinspect(itemData[0]['remarks'])
#                         lst = {'chk':'Y','qid':question_id,'datavalue':dataValueEnc,'departmentId':department,'departmentName':departmentName,'officer_list':officer_list,'officer':marked_to,'remarks':remarksEnc,'location':itemData[0]['location'],'loc_type':comploc}

                        
#                     else:
#                         lst = {'chk':'N'}
                    
#                     allData.append(lst)
#                 commanDept = einspDetails[0]['commanDepartment']
#                 if commanDept == '' or commanDept == None:
#                     pass
#                 else:
#                     commanDept = commanDept.split(';')
#                     departmentsAll=list(departMast.objects.filter(delete_flag=False,department_code__in=commanDept).values().order_by('department_name'))
#                 #  actorId,value,einspno
                
#                 for i in range(len(actorDetailsData)):
#                     actdetails = list(m2.actor_with_inspection_details.objects.filter(einspno=inspectionId,actorId=actorDetailsData[i]['actorId']).values_list('value',flat=True))
#                     if len(actdetails)>0:
#                         actorPresent.append({'actor':actorDetailsData[i]['actor'],'data':actdetails})

#                 edit_copy_to = list(mm6.copyto_mails.objects.filter(doc_id=inspectionId, area_flag=0, doc_table='e').values_list('receiver_id',flat=True))
#             else:
#                 messages.error(request,'Already Finalized, Cannot be Edited')
#                 return redirect('showMenuEdit')

        
       
#         context={
           
#             'actorPresent':json.dumps(actorPresent),
#             'actorDetailsData':actorDetailsData,
#             'inspType':inspType,
#             'einspDetails':json.dumps(einspDetails),
#             'allData':json.dumps(allData),
#             'ajaxdata':json.dumps(ajaxdata),
#             'insp_sideMenu':json.dumps(insp_sideMenu),
#             'menu': name2,
#             'name':name,
#             'questform': ques,
#             'queslen':queslen,
#             'cardId':cardId,
#             'id':id,
#             'choicetype':choicetype,
#             'designations':designations,
#             'designations1':designations[0]['designation'],
#             'station':station,
#             'userRailways':userRailways,
#             'userDivision':userDivision,
#             'railwayZone':railwayZone,
#             'divisionParent':divisionParent,
#             'newdivision':newdivision,
#             'sideMenu':sidemenu,
#             'departmentsAll':departmentsAll,
#             'sidebarLength':sidemenuLength,
#             'defaultStation':defaultStation,
#             'defaultSection':defaultSection,
#             'dateNo':dateNo,
#             'questions':questions,
#             'defaultEntity':defaultEntity,
#             'dateNo2':dateNo2,
#             'subCategoryAll':subCategoryAll,
#             'startTime':startTime,
#             'inspectionId':inspectionId,
#             'departmentsAllComman':departmentsAllComman,
#             'defaultEntityLength':len(defaultEntity),
#             'masterTableStatus':masterTableStatus,
#             'other_entity_data':other_entity_data,
#             'other_entity_len':other_entity_len,
#             'copyTo_all':copyTo_all,
#             'edit_copy_to':json.dumps(edit_copy_to),
#         }
#         return render(request, 'eInspectionUserForm.html', context)
#     else:
#         return HttpResponseRedirect('/login') 

@login_required
def showMenu(request):
    if request.user.user_role == 'user':
        id=request.GET.get('id')  
        cardId=request.GET.get('cardId') 
        masterTableStatus = '0' 

        inspectionId=request.GET.get('inspectionId')
        if inspectionId is None:
            inspectionId = ''

        edittypeData=request.GET.get('edittypeData')
        if edittypeData is None:
            edittypeData = ''

        name=inspectiontype_master.objects.filter(instypeid=id)[0]
        # print(name)
        station=list(station_master.objects.filter(delete_flag=False).values())
        departmentsAll = list(departMast.objects.filter(delete_flag=False).values().order_by('department_name'))
        
        departmentsAllComman = list(departMast.objects.filter(delete_flag=False).values().order_by('department_name'))
        subCategoryAll=list(question_sub_category_master.objects.filter(disable_flag=False).values().order_by('sub_category'))
        
        copyTo_all = Level_Desig.objects.filter(delete_flag=False, rly_unit__isnull=False).values('designation_code','designation').order_by('hierarchy_level')
        
        data=[]
        ques=list(m2.questionare_master.objects.filter(instypeid_id__delete_flag=False,instypeid_id__disable_flag=False,instypeid_id__parent_id=id,delete_flag=False,disable_flag=False).values('qid','activity','choicetype__cid','doption__did', 'roption1__rid', 'roption2__rid',
        'instypeid_id__name','instypeid_id__instypeid','instypeid_id__concerned_dept','instypeid_id__concerned_dept__department_name').order_by('instypeid_id__instypeid').distinct('instypeid_id__instypeid','activity'))
        print(len(ques))
        choicetype=list(m2.questionare_master.objects.filter(instypeid_id=id).values('choicetype','doption','roption1','roption2'))

        questions=m2.questionare_master.objects.filter(instypeid_id__delete_flag=False,instypeid_id__disable_flag=False,instypeid_id__parent_id=id,delete_flag=False,disable_flag=False).values('instypeid_id__name','activity','instypeid_id__parent_id','instypeid_id','choicetype__cid','doption__did', 'roption1__rid', 
        'roption2__rid', 'qid','roption1_id__rlabel','roption2_id__rlabel','instypeid_id__instypeid','roption1_id__rscore','roption1_id__rlabel','depending_ques','dependent_ques','dependending_column'
        ,'location_id','location_id__lmaster','compulsary','desc','roption2_id__rscore','actionBy','mixedChoices','weightage' ).order_by('instypeid_id','qid')
       
       
        ajaxdata=[]
        count=0
        for i in range(len(questions)):
            mixedChoicesEnc = ''
            activity_data = ''
            if questions[i]['activity'] != None:
                activity_data = encryptWithAesEinspect(questions[i]['activity'])
            if questions[i]['mixedChoices'] != None:
                mixedChoicesEnc = encryptWithAesEinspect(questions[i]['mixedChoices'])
            neg_val = ''
            if questions[i]['roption1__rid'] != None:
                radio_score1 = list(m2.radio_options.objects.filter(rscore=0,rid=questions[i]['roption1__rid']).values('rlabel'))
                if len(radio_score1) == 0:
                    radio_score2 = list(m2.radio_options.objects.filter(rscore=0,rid=questions[i]['roption2__rid']).values('rlabel'))
                    if len(radio_score2) == 0:
                        neg_val = ''
                    else:
                        neg_val = radio_score2[0]['rlabel']
                else:
                    neg_val = radio_score1[0]['rlabel']
            ajaxdata.append(str(questions[i]['choicetype__cid'])+'@#@'+str(questions[i]['qid'])+'@#@'+str(questions[i]['roption1_id__rscore'])+'@#@'+str(questions[i]['location_id'])+'@#@'+str(questions[i]['compulsary'])+'@#@'+str(activity_data)+'@#@'+str(questions[i]['location_id__lmaster'])+'@#@'+str(questions[i]['instypeid_id'])+'@#@'+str(questions[i]['roption2_id__rlabel'])+'@#@'+neg_val+'@#@'+mixedChoicesEnc) 
       
            try:
                if questions[i]['instypeid_id__name'] ==  questions[i+1]['instypeid_id__name']:
                    count+=1
                    questions[i].update({'questionNo':count})
                else:
                    count+=1
                    questions[i].update({'questionNo':count})
                    count=0
            except:
                count+=1
                questions[i].update({'questionNo':count})
            
        
            if questions[i]['choicetype__cid']==3:  
                doption=list(m2.dropdown_options.objects.filter(did=questions[i]['doption__did']).values('dmaster','table_name','column_name'))  #doption contains list of dlabels
                if len(doption)!=0:
                    table_name = doption[0]['table_name']
                    column_name = ''
                    col_name = doption[0]['column_name'].split(',')
                    col_len = len(col_name)
                    class_name = globals()[doption[0]['table_name']]
                    result1=list(class_name.objects.values()) 
                    res = ''
                    data = []
                    if len(result1)!=0:
                        for ii in range(len(result1)):
                            for ijk in range(len(col_name)):
                                if result1[ii][col_name[ijk]] is not None:
                                    if ijk == 0:
                                        res = str(result1[ii][col_name[ijk]])
                                    else:
                                        res = res + ' ' + str(result1[ii][col_name[ijk]])
                            data.append(res)
                    data.sort()
                    lendata = 'dropDown'
                    if len(data) > 10000:
                        lendata = 'text'

                    questions[i].update({'data':data,'data_len_type':lendata})
                else:
                    pass
        
            elif questions[i]['choicetype__cid']==9:
                questions[i].update({'mixedChoices':questions[i]['mixedChoices'].split('$')})
            elif questions[i]['choicetype__cid']==10:
                questions[i].update({'mixedChoices':questions[i]['mixedChoices'].split('$')})
            elif questions[i]['choicetype__cid']==7:
                questions[i].update({'mixedChoices':questions[i]['mixedChoices'].split('$')})

            colorLst = list(actor_with_question.objects.filter(questionId=questions[i]['qid']).values('actionId_id__color_code','actionId_id__actorName').distinct())
            actorListQues = ''
            for iColor in range(len(colorLst)):
                if iColor != 0:
                    actorListQues += '$'
                actorListQues +=   colorLst[iColor]['actionId_id__actorName']  

            questions[i].update({'colorLst':colorLst,'actorListQues':actorListQues})
        queslen=len(questions)
        name2 = list(inspectiontype_master.objects.filter(parent_id=id).values('name','instypeid','inspection_image').order_by('instypeid')) 
        sidemenu=m2.questionare_master.objects.select_related('instypeid_id').filter(instypeid_id__delete_flag=False,instypeid_id__disable_flag=False,instypeid_id__parent_id=id,disable_flag=False,delete_flag=False).distinct('instypeid_id').order_by('instypeid_id')
        insp_sideMenu = []
        
        for i in sidemenu:
            insp_sideMenu.append(i.instypeid_id.instypeid)
        
        
        length=len(name2)
        designations = list(Level_Desig.objects.filter(Q(official_email_ID=request.user) | Q(official_email_ID=request.user.email)).values("designation","rly_unit","d_level"))
        
        userDivision=''
        divisionParent=''
        newdivision=[]
        defaultStation=[]
        defaultSection=[]
        userRailways=Level_Desig.objects.filter(official_email_ID = request.user)[0]
        
        
        if userRailways.rly_unit.location_type == 'DIV':
            userDivision = railwayLocationMaster.objects.filter(rly_unit_code=userRailways.rly_unit.rly_unit_code)[0]
        
            divisionParent = railwayLocationMaster.objects.filter(location_code = userDivision.parent_location_code)[0]
            defaultStation=list(station_master.objects.filter(rly_id_id=userDivision,delete_flag=False).values())
            defaultSection=list(section_master.objects.filter(Q(div_id_id_id=userDivision,delete_flag=False,section_name__isnull=False) & ~Q(section_name='') ).values().order_by('section_name'))
        
        elif userRailways.rly_unit.location_type == 'ZR':
            divisionParent = railwayLocationMaster.objects.filter(location_code = userRailways.rly_unit.location_code)[0]
            defaultStation=list(station_master.objects.filter(rly_id_id=divisionParent,delete_flag=False,station_name__isnull=False).values())
            defaultSection=list(section_master.objects.filter(Q(rly_id_id_id=divisionParent,delete_flag=False,section_name__isnull=False) & ~Q(Q(section_name='') | Q(section_name='null')) ).values().order_by('section_name'))
        
        elif userRailways.rly_unit.location_type == 'RB':
            divisionParent = railwayLocationMaster.objects.filter(location_code = userRailways.rly_unit.location_code)[0]
            defaultStation=list(station_master.objects.filter(delete_flag=False,station_name__isnull=False).values())
            defaultSection=list(section_master.objects.filter(Q(delete_flag=False,section_name__isnull=False) & ~Q(Q(section_name='') | Q(section_name='null')) ).values().order_by('section_name'))
        
        else:
            return render(request, 'eInspectionUserForm_notauthorize.html')
        
        try:
            railwayZone=list(railwayLocationMaster.objects.filter(Q(location_type='ZR') & ~Q(rly_unit_code=divisionParent.rly_unit_code)).values())
            newdivision=list(railwayLocationMaster.objects.filter(parent_location_code=divisionParent.location_code,location_type='DIV').values())
        except:
            railwayZone=list(railwayLocationMaster.objects.filter(location_type='ZR').values())
        
        sidemenuLength=len(sidemenu)    
        
        defaultEntity = []
       
        other_entity_len = 0
        other_entity_data = ''
        if name.other_entity is not None:
            other_entity_len = 1
            other_entity_data = name.other_entity
        if name.entity is None:
            if name.other_entity is None:
                pass
        
        else:
            
            doption=list(m2.dropdown_options.objects.filter(dmaster=name.entity.dmaster).values('dmaster','table_name','column_name','filterName','filterValue'))
            if len(doption)!=0:
                try:
                    if divisionParent != '':
                        rlyNewValue = list(railwayLocationMaster.objects.filter(rly_unit_code=divisionParent.rly_unit_code).values())
                    else:
                        rlyNewValue = railwayZone
                    if userDivision != '':
                        divNewValue = list(railwayLocationMaster.objects.filter(rly_unit_code=userDivision.rly_unit_code).values())
                    else:
                        divNewValue =  newdivision
                    
                    if len(divNewValue) == 0:
                        divNewValue = list(railwayLocationMaster.objects.filter(parent_rly_unit_code=divisionParent.rly_unit_code).values())
                    
                    rlyNextId = [i['rly_unit_code'] for i in rlyNewValue]
                    rlyNextVal = [i['location_code'] for i in rlyNewValue]
                    divNextId = [i['rly_unit_code'] for i in divNewValue]
                    divNextVal = [i['location_code'] for i in divNewValue]
                except:
                    rlyNextId = []
                    rlyNextVal = []
                    divNextId = []
                    divNextVal = []
                
                table_name = doption[0]['table_name']
                column_name = ''
                col_name = doption[0]['column_name'].split(',')
                col_len = len(col_name)
                class_name = globals()[doption[0]['table_name']]

                filterValue = doption[0]['filterValue']
                filterValueList = []
                if filterValue != None:
                    if filterValue == 'Division Id':
                        filterValueList = divNextId
                    elif filterValue == 'Division Value':
                        filterValueList = divNextVal
                    elif filterValue == 'Railway Id':
                        filterValueList = rlyNextId
                    elif filterValue == 'Railway Value':
                        filterValueList = rlyNextVal
                    elif  filterValue ==  'Division Value':
                        filterValueList = divNextVal
                filterName = doption[0]['filterName']
                if filterName != None:
                    if filterName != 'passing_division':
                        kargs = {f'{filterName}__in':filterValueList}
                        result1=list(class_name.objects.filter(**kargs).values()) 
                    else:

                        
                        result1 = []
                        for i in filterValueList:
                            kargs = {f'{filterName}__icontains':i}
                            result1 += list(class_name.objects.filter(**kargs).values())

                        
                    
                else:
                    result1=list(class_name.objects.values()) 

                data = []
                if len(result1)!=0:
                    for ii in range(len(result1)):
                        res = {}
                        for ijk in range(len(col_name)):
                            if col_len >= 2:
                                if result1[ii][col_name[ijk]] is not None:
                                    if ijk == 0:
                                        res.update({'id':result1[ii][col_name[ijk]]})
                                    elif ijk == 1:
                                        res.update({'desc':result1[ii][col_name[ijk]]})
                                    else:
                                        break
                                else:
                                    res.update({'id':result1[ii][col_name[ijk]],'desc':result1[ii][col_name[ijk]]})
                                    
                        defaultEntity.append(res)
        
        if defaultEntity != []:
            defaultEntity=sorted(defaultEntity, key=lambda hqwise:hqwise['desc'])
       
        # print(defaultEntity)
        import datetime  
        dateNo = datetime.date.strftime(datetime.date.today(), "%d/%m/%Y")
        dateNo2 = datetime.date.strftime(datetime.date.today(), "%d-%m-%Y")
        startTime = datetime.datetime.strftime(datetime.datetime.today(), "%H:%M")

        # ############  actor 
        # actorDetails = list(actor_with_inspType.objects.filter(inspType=id,disable_flag=False,).values('actorId_id__actorName','actorId_id__actorId','actorId_id__tableName','actorId_id__colName','actorId_id__filterName','actorId_id__filterValue','actorId_id__color_code').order_by('slno'))
        # actorDetailsData = []
        # if len(actorDetails) > 0:
        #     try:
        #         divUser = userDivision.rly_unit_code
        #     except:
        #         divUser = None
        #     rlyUser = divisionParent.rly_unit_code
        #     for i in range(len(actorDetails)):
        #         actorId = actorDetails[i]['actorId_id__actorId']
        #         actorName = actorDetails[i]['actorId_id__actorName']
        #         table_name = actorDetails[i]['actorId_id__tableName']
        #         col_name = actorDetails[i]['actorId_id__colName'].split(',')
        #         filterName = actorDetails[i]['actorId_id__filterName']
        #         filterValue = actorDetails[i]['actorId_id__filterValue']
        #         color_code = actorDetails[i]['actorId_id__color_code']
        #         use_color = 'N'
        #         if color_code != None:
        #             use_color = 'Y'
        #         filterArgs = {}
        #         if filterName == 'Railway Code':
        #             filterArgs = {filterValue:rlyUser}
        #         elif  filterName == 'Division Code':
        #             filterArgs = {filterValue:divUser}

        #         col_len = len(col_name)
                
        #         class_name = globals()[table_name]
        #         result1=list(class_name.objects.filter(**filterArgs).values()) 
                
        #         res = ''
        #         data = []
        #         if len(result1)!=0:
        #             for ii in range(len(result1)):
        #                 for ijk in range(len(col_name)):
        #                     if result1[ii][col_name[ijk]] is not None:
        #                         if ijk == 0:
        #                             res = str(result1[ii][col_name[ijk]])
        #                         else:
        #                             res = res + ' - ' + str(result1[ii][col_name[ijk]])
        #                 data.append(res)
                
              
        #         questions67 = list(m2.questionare_master.objects.filter(choicetype__in=['2','9'],instypeid_id__in=inspectiontype_master.objects.filter(parent_id=id,delete_flag=False,disable_flag=False).values('instypeid'),qid__in=m2.actor_with_question.objects.filter(actionId_id__actorName=actorName,disable_flag=False).values('questionId')).values('qid','activity','weightage','mixedChoices','choicetype'))
        #         totalScoreActor = 0
        #         if len(questions67) > 0:
        #             for j1 in range(len(questions67)):
        #                 if questions67[j1]['choicetype'] in [9]:
        #                     totalScoreActor += (len(questions67[j1]['mixedChoices'].split('$')) * questions67[j1]['weightage'])
                            
        #                 else:
        #                     totalScoreActor += questions67[j1]['weightage']
                        
        #         actorDetailsData.append({'totalScoreActor':totalScoreActor,'scoreObtained':totalScoreActor,'actor':actorName , 'actorId':actorId ,'data':data,'color_code':color_code,'use_color':use_color})

        actorDetails = list(actor_with_inspType.objects.filter(inspType=id,disable_flag=False,).values('actorId_id__viewactorName','actorId_id__actorName','actorId_id__actorId','actorId_id__tableName','actorId_id__colName','actorId_id__filterName','actorId_id__filterValue','actorId_id__color_code').order_by('slno'))
        actorDetailsData = []
        if len(actorDetails) > 0:
            try:
                divUser = userDivision.rly_unit_code
            except:
                divUser = None
            rlyUser = divisionParent.rly_unit_code
            cursor = connection.cursor()
            for i in range(len(actorDetails)):
                actorId = actorDetails[i]['actorId_id__actorId']
                actorName = actorDetails[i]['actorId_id__actorName']
                table_name = actorDetails[i]['actorId_id__tableName']
                col_name = actorDetails[i]['actorId_id__colName'].split(',')
                filterName = actorDetails[i]['actorId_id__filterName']
                filterValue = actorDetails[i]['actorId_id__filterValue']
                color_code = actorDetails[i]['actorId_id__color_code']
                viewactorName = actorDetails[i]['actorId_id__viewactorName']
                use_color = 'N'
                if color_code != None:
                    use_color = 'Y'
                # print(divUser,type(divUser))
                if filterName == 'Railway Code':
                    if rlyUser != None:
                        qry = ''' select data from "%s" where filter = '%s';''' % (viewactorName, rlyUser)
                    else:
                        qry = ''' select data from "%s";''' % (viewactorName)
                elif filterName == 'Division Code':
                    if divUser != None:
                        qry = ''' select data from "%s" where filter = '%s';''' % (viewactorName, divUser)
                    else:
                        qry = ''' select data from "%s";''' % (viewactorName)
                else:
                    qry = ''' select data from "%s" ;''' % (viewactorName)
                # if filterName == None and len(col_name)== 1:
                
                #     qry = ''' select "%s" from "%s"; ''' % (col_name[0],table_name)
                    
                # elif filterName == None and len(col_name)== 2:
                #     qry = ''' select CONCAT("%s",' - ',"%s") from "%s"; ''' % (col_name[0],col_name[1],'myadmin_'+table_name)
                
                # elif filterName == 'Railway Code' and len(col_name)== 1:
                #     qry = ''' select "%s" from "%s" where "%s" = '%s';''' % (col_name[0],'myadmin_'+table_name,filterValue,rlyUser)
                # elif filterName == 'Railway Code' and len(col_name)== 2:
                #     qry = ''' select CONCAT("%s",' - ',"%s") from "%s" where "%s" = '%s'; ''' % (col_name[0],col_name[1],'myadmin_'+table_name,filterValue,rlyUser)
                # elif filterName == 'Division Code' and len(col_name)== 1:
                #     qry = ''' select "%s" from "%s" where "%s" = '%s' where "%s" = '%s';''' % (col_name[0],'myadmin_'+table_name,filterValue,divUser)
                # elif filterName == 'Division Code' and len(col_name)== 2:
                #     qry = ''' select CONCAT("%s",' - ',"%s") from "%s" where "%s" = '%s'; ''' % (col_name[0],col_name[1],'myadmin_'+table_name,filterValue,divUser)
                
                cursor.execute(qry)
                data=cursor.fetchall()
                
                # filterArgs = {}
                # if filterName == 'Railway Code':
                #     filterArgs = {filterValue:rlyUser}
                # elif  filterName == 'Division Code':
                #     filterArgs = {filterValue:divUser}

                # col_len = len(col_name)
                
                # class_name = globals()[table_name]
                # result1=list(class_name.objects.filter(**filterArgs).values()) 
                
                # res = ''
                # data = []
                # if len(result1)!=0:
                #     for ii in range(len(result1)):
                #         for ijk in range(len(col_name)):
                #             if result1[ii][col_name[ijk]] is not None:
                #                 if ijk == 0:
                #                     res = str(result1[ii][col_name[ijk]])
                #                 else:
                #                     res = res + ' - ' + str(result1[ii][col_name[ijk]])
                #         data.append(res)
                
              
                questions67 = list(m2.questionare_master.objects.filter(choicetype__in=['2','9'],instypeid_id__in=inspectiontype_master.objects.filter(parent_id=id,delete_flag=False,disable_flag=False).values('instypeid'),qid__in=m2.actor_with_question.objects.filter(actionId_id__actorName=actorName,disable_flag=False).values('questionId')).values('qid','activity','weightage','mixedChoices','choicetype'))
                totalScoreActor = 0
                if len(questions67) > 0:
                    for j1 in range(len(questions67)):
                        if questions67[j1]['choicetype'] in [9]:
                            totalScoreActor += (len(questions67[j1]['mixedChoices'].split('$')) * questions67[j1]['weightage'])
                        else:
                            totalScoreActor += questions67[j1]['weightage']
                        
                actorDetailsData.append({'totalScoreActor':totalScoreActor,'scoreObtained':totalScoreActor,'actor':actorName , 'actorId':actorId ,'data':data,'color_code':color_code,'use_color':use_color})

            cursor.close()
        
        # if send_to:
        #         if m6.copyto_mails.objects.filter(doc_id=inspection_id, area_flag=0, doc_table='i').exists():
        #             m6.copyto_mails.objects.filter(doc_id=inspection_id, area_flag=0, doc_table='i').update(sender_id_id=ddesig, receiver_id=send_to, receiver_desig=send_desig)
        #         else:
        #             m6.copyto_mails.objects.create(sender_id_id=ddesig, doc_id=inspection_id, area_flag=0, doc_table='i', receiver_id=send_to, receiver_desig=send_desig)

        
        if request.method == 'POST':
            submitvalue = request.POST.get('submit')
            commanDesignation = request.POST.getlist('commanDesignation') 
            commanOfficer = ''
            for l in range(len(commanDesignation)):
                if l!=0:
                    commanOfficer = commanOfficer+';'
                commanOfficer = commanOfficer + commanDesignation[l]
            commanDesignation = commanOfficer
            # print(commanDesignation,'commanDesignation')
            
            if 'Save as Draft & Continue' == submitvalue:
                inspectionId=request.POST.get('inspectionId')
                request.POST.get('user')
                commanDepartment = request.POST.getlist('commanDepartment') 
                comman = ''
                for l in range(len(commanDepartment)):
                    if l!=0:
                        comman = comman+';'
                    comman = comman + commanDepartment[l]
                commanDepartment = comman
                
                start_date = request.POST.get('userdata4')
                start_date = (datetime.datetime.strptime(start_date,'%d-%m-%Y')).strftime('%Y-%m-%d')
                start_time = request.POST.get('userdata5') 
                end_date = request.POST.get('userdata6') 
                masterTableStatus = request.POST.get('masterTableStatus')
                if end_date == '':
                    end_date = None
                else:
                    end_date = (datetime.datetime.strptime(end_date,'%d-%m-%Y')).strftime('%Y-%m-%d')
                 
                end_time = request.POST.get('userdata7')
                if end_time == '':
                    end_time = None 
                inspid = request.POST.get('id')
                
                entity = request.POST.get('entitylbl') 
                radios2 = request.POST.get('abnormal') 
                remarks11 = request.POST.get('userdata15')
                detail = request.POST.get('userdata9') 
                inspectionType = int(request.POST.get('supnight'))  
                ratings1 = request.POST.get('ratings1')  
                finalizeStart = request.POST.get('finalizeStart')   
                finalizeEnd = request.POST.get('finalizeEnd')
                if ratings1 == None:
                    ratings1 = None

                if radios2 == 'no':
                    saving = 'no'
                else:
                    saving = 'yes/'+remarks11
                
                
                if inspectionType == 3:
                    is_scheduled = False
                    inspection_type = 3
                elif inspectionType == 2:
                    is_scheduled = True
                    inspection_type=2
                elif inspectionType == 1:
                    is_scheduled = True
                    inspection_type = 1
                else:
                    is_scheduled = True
                    inspection_type = 0

                try:
                    if len(request.FILES) != 0:
                        supdoc = request.FILES['userdata14']
                        folder='media/documents/'
                        fs=FileSystemStorage(location=folder)  
                        files=fs.save(supdoc.name,supdoc)      
                        documents = fs.url(files)
                        documents = str(documents).split('media/')
                        documents = 'documents/'+documents[1]
                    else:
                        documents = None
                except: 
                    documents = None
                # railways=railwayLocationMaster.objects.filter(rly_unit_code=railways)[0]
                # division=railwayLocationMaster.objects.filter(rly_unit_code=division)[0]
                email=str(request.user)
                max_id=0
                temp=list(m2.einspection_details.objects.filter(delete_flag=False).values())
                if len(temp)!=0:
                    max_id = m2.einspection_details.objects.aggregate(Max('einspno'))['einspno__max']
                    max_id+=1 
                else:
                    max_id=1

                loginUser=Level_Desig.objects.filter(official_email_ID=email)[0]
                department=departMast.objects.filter(department_name=loginUser.department)[0]

                currentDateTime = datetime.datetime.now()
                date = currentDateTime.date()
                year=date.strftime("%Y")
                inspection=inspectiontype_master.objects.filter(instypeid=id,delete_flag=False)[0]
                if inspection.entity != None:
                    inspectionEntity = inspection.entity.dmaster
                    inspection_title=str(inspection.shortcode) + ' Inspection of ' + str(inspectionEntity) + ' - ' + str(detail) + ' by ' + str(loginUser.designation) + ' on ' + str((datetime.datetime.strptime(start_date,'%Y-%m-%d')).strftime('%d-%m-%Y'))
                elif inspection.other_entity is not None:
                    inspectionEntity = inspection.other_entity
                    inspection_title=str(inspection.shortcode) + ' Inspection of ' + str(inspectionEntity) + ' - ' + str(detail) + ' by ' + str(loginUser.designation) + ' on ' + str((datetime.datetime.strptime(start_date,'%Y-%m-%d')).strftime('%d-%m-%Y'))


                else:
                    inspectionEntity = None
                    inspection_title=str(inspection.shortcode) + ' Inspection  by ' + str(loginUser.designation) + ' on ' + str((datetime.datetime.strptime(start_date,'%Y-%m-%d')).strftime('%d-%m-%Y'))


                inspection_note_no= str(year)+'/'+str(loginUser.designation) + '/' + str(inspection.shortcode) + '/' + str(max_id)
                saving=str(radios2) + '/' + str(remarks11)
                systemDateTime = currentDateTime.strftime("%Y-%m-%d %H:%M:%S")
                reportPath = '/pdfDetails/?id='+str(max_id)
                
                if inspectionId == '':
                    obj1=m2.einspection_details.objects.create(masterTableFlag=masterTableStatus,finalizeStart= finalizeStart,finalizeEnd=finalizeEnd,status = 0,instypeid=inspection,inspected_on=start_date, start_date=start_date,end_date=end_date,start_time=start_time,end_time=end_time,
                            inspection_title=inspection_title,designation=loginUser,inspection_note_no=inspection_note_no,ratings=ratings1,abnormal=saving,dept=department,
                            rly_id_id=None,div_id_id=None,entitydetails=inspectionEntity,entityid=detail,created_by=loginUser.empno.empno,lastmodified_by=loginUser.empno.empno,is_scheduled=is_scheduled,
                            created_on=systemDateTime,lastmodified_on=systemDateTime,section_id=None,inspection_type=inspection_type,documents=documents,report_path=reportPath,commanDepartment=commanDepartment,commanDesignation=commanDesignation)
                    
                    inspectionId = max_id
                else:
                    obj1=m2.einspection_details.objects.filter(einspno = inspectionId).update(masterTableFlag=masterTableStatus,finalizeStart= finalizeStart,finalizeEnd=finalizeEnd,status = 0,instypeid=inspection,end_date=end_date,end_time=end_time,
                            inspection_title=inspection_title,designation=loginUser,inspection_note_no=inspection_note_no,ratings=ratings1,abnormal=saving,dept=department,
                            rly_id_id=None,div_id_id=None,entitydetails=inspectionEntity,entityid=detail,lastmodified_by=loginUser.empno.empno,is_scheduled=is_scheduled,
                            lastmodified_on=systemDateTime,section_id=None,inspection_type=inspection_type,documents=documents,report_path=reportPath,commanDepartment=commanDepartment,commanDesignation=commanDesignation)
                
                railways = request.POST.getlist('userdata0') 
                division = request.POST.getlist('userdata1') 
                section = request.POST.getlist('userdata17')
                for i in railways:
                    if not m2.einsp_multi_location.objects.filter(einspno = inspectionId,item=i,type='HQ').exists():
                        m2.einsp_multi_location.objects.create(einspno_id = inspectionId,item=i,type='HQ')
                m2.einsp_multi_location.objects.filter(~Q(item__in=railways),einspno = inspectionId,type='HQ')

                for i in division:
                    if not m2.einsp_multi_location.objects.filter(einspno = inspectionId,item=i,type='DIV').exists():
                        m2.einsp_multi_location.objects.create(einspno_id = inspectionId,item=i,type='DIV')
                m2.einsp_multi_location.objects.filter(~Q(item__in=division),einspno = inspectionId,type='DIV')

                for i in section:
                    if not m2.einsp_multi_location.objects.filter(einspno = inspectionId,item=i,type='SEC').exists():
                        m2.einsp_multi_location.objects.create(einspno_id = inspectionId,item=i,type='SEC')
                m2.einsp_multi_location.objects.filter(~Q(item__in=section),einspno = inspectionId,type='SEC')

                
                if inspection.instypeid == 221:
                    
                    train_no_input = request.POST.get('train_no_input')
                    train_start_time = request.POST.get('train_start_time')
                    train_start_time = (datetime.datetime.strptime(train_start_time,'%d/%m/%Y')).strftime('%Y-%m-%d')
                    if not m2.einspection_coach_details.objects.filter(einspno = inspectionId,type='TRAIN').exists():
                        m2.einspection_coach_details.objects.create(einspno_id = inspectionId,item=train_no_input,type='TRAIN',startdate=train_start_time)
                    else:
                        m2.einspection_coach_details.objects.filter(einspno_id = inspectionId,type='TRAIN').update(item=train_no_input,startdate=train_start_time)
                    coachData = request.POST.getlist('coachData')
                    for i in coachData:
                        if not m2.einspection_coach_details.objects.filter(einspno = inspectionId,item=i,type='COACH').exists():
                            m2.einspection_coach_details.objects.create(einspno_id = inspectionId,item=i,type='COACH')
                    m2.einspection_coach_details.objects.filter(~Q(item__in=coachData),einspno = inspectionId,type='COACH')

                copyToOfficer = request.POST.getlist('copyToOfficer')
                if len(copyToOfficer) > 0:
                    copy_to_id = ''
                    copy_to_desig = ''
                    for li1 in copyToOfficer:
                        level1_data = list(Level_Desig.objects.filter(designation_code=li1).values('designation_code','designation'))
                        if len(level1_data)>0:
                            if copy_to_id != '':
                                copy_to_id = copy_to_id + ','
                            if copy_to_desig != '':
                                copy_to_desig = copy_to_desig + ','
                            copy_to_id = copy_to_id + str(level1_data[0]['designation_code'])
                            copy_to_desig = copy_to_desig + level1_data[0]['designation']

                    if mm6.copyto_mails.objects.filter(doc_id=inspectionId, area_flag=0, doc_table='e').exists():
                        mm6.copyto_mails.objects.filter(doc_id=inspectionId, area_flag=0, doc_table='e').update(sender_id_id=loginUser.designation_code, receiver_id=copy_to_id, receiver_desig=copy_to_desig)
                    else:
                        mm6.copyto_mails.objects.create(sender_id_id=loginUser.designation_code, doc_id=inspectionId, area_flag=0, doc_table='e', receiver_id=copy_to_id, receiver_desig=copy_to_desig)


                for ia in range(len(actorDetailsData)):
                    actorId = actorDetailsData[ia]['actorId']
                    actorName = actorDetailsData[ia]['actor']
                    actorValue = [request.POST.get('actor'+actorName)]
                    tval = []
                    if  actorValue != ['']:   
                        for av in actorValue:
                            #av = av.split('-')[0]
                            tval.append(av)
                            if not m2.actor_with_inspection_details.objects.filter(einspno_id=inspectionId,actorId_id=actorId,value=av).exists():

                                lst121 = list(actor_details.objects.filter(actorId=actorId).values())
                                viewName = lst121[0]['viewName']
                                ViewFilter = lst121[0]['viewFilter'] 
                                viewColumn = lst121[0]['viewColumn'].split(',')
                                cursor = connection.cursor()
                                viewData=[]
                                avVal = (av.split('-')[0]).strip()
                                print(viewName, ViewFilter, avVal)
                                qry = ''' select * from "%s" where "%s" = '%s';''' % (viewName, ViewFilter, avVal)
                                cursor.execute(qry)
                                viewData.extend(cursor.fetchall())
                                cursor.close()
                                dictData={}
                                for icol in range(len(viewColumn)):
                                    dictData[viewColumn[icol]] = viewData[0][icol]

                                m2.actor_with_inspection_details.objects.create(einspno_id=inspectionId,actorId_id=actorId,value=av,details = dictData)
                        
                    m2.actor_with_inspection_details.objects.filter(~Q(value__in=tval),einspno=inspectionId,actorId=actorId).delete()

                count = 0
                totalQidUsed=[]
                for adata in ajaxdata:
                    a = adata.split('@#@')
                    comploc = a[6]
                    question_id = a[1]
                    count += 1
                    tickId = 'tick@'+a[7]+'@'+str(count)
                    tickVal = request.POST.get(tickId)
                    radioval = None
                    if tickVal !=None:
                        obj2=m2.questionare_master.objects.filter(qid = question_id)[0]
                        if a[0] == '1':
                            dataid = 'userinput' + str(count)
                            datavalue = request.POST.get(dataid)

                            if datavalue == '' or datavalue == None:
                                continue
                            else:
                                departmentId = 'department1' + str(count)
                                officer = 'officer11' + str(count)
                                remarks = 'remarks' + str(count)
                                

                                departmentId = request.POST.get(departmentId)
                                officer = request.POST.get(officer)
                                remarks = request.POST.get(remarks)
                                if comploc == 'None':
                                    location = None
                                else:
                                    if comploc == 'Pole Location' or comploc == 'Number':
                                        idloc = 'location1' + str(count)
                                        location = request.POST.getlist(idloc)
                                        loc=''
                                        for l in range(len(location)):
                                            if l!=0:
                                                loc = loc+';'
                                            loc = loc + location[l]
                                        location = loc
                                    elif comploc == 'Coach Number':
                                        idloc = 'location1' + str(count)
                                        location = request.POST.get(idloc)
                                    elif comploc == 'Direction':
                                        idloc = 'location' + str(count)
                                        location = request.POST.get(idloc)
                        elif a[0] == '2':
                            dataid = 'roption' + str(count)
                            datavalue = request.POST.get(dataid)

                            if datavalue == '' or datavalue == None:
                                continue
                            else:
                               
                                if m2.radio_options.objects.filter(rlabel=datavalue,rid=obj2.roption1.rid).exists():
                                    radioval = obj2.roption1.rid
                                elif m2.radio_options.objects.filter(rlabel=datavalue,rid=obj2.roption2.rid).exists():
                                    radioval = obj2.roption2.rid
                                else:
                                    radioval = None
                                departmentId = 'department1' + str(count)
                                officer = 'officer11' + str(count)
                                remarks = 'remarks' + str(count)
                                

                                departmentId = request.POST.get(departmentId)
                                officer = request.POST.get(officer)
                                remarks = request.POST.get(remarks)
                                if comploc == 'None':
                                    location = None
                                else:
                                    if comploc == 'Pole Location' or comploc == 'Number':
                                        idloc = 'location1' + str(count)
                                        location = request.POST.getlist(idloc)
                                        loc=''
                                        for l in range(len(location)):
                                            if l!=0:
                                                loc = loc+';'
                                            loc = loc + location[l]
                                        location = loc
                                    elif comploc == 'Coach Number':
                                        idloc = 'location1' + str(count)
                                        location = request.POST.get(idloc)
                                    elif comploc == 'Direction':
                                        idloc = 'location' + str(count)
                                        location = request.POST.get(idloc)
                                        
                        elif a[0] == '3':
                            dataid = 'doption' + str(count)
                            datavalue = request.POST.get(dataid)
                            if datavalue == '' or datavalue == None:
                                continue
                            else:
                                departmentId = 'department1' + str(count)
                                officer = 'officer11' + str(count)
                                remarks = 'remarks' + str(count)
                                

                                departmentId = request.POST.get(departmentId)
                                officer = request.POST.get(officer)
                                remarks = request.POST.get(remarks)
                                if comploc == 'None':
                                    location = None
                                else:
                                    if comploc == 'Pole Location' or comploc == 'Number':
                                        idloc = 'location1' + str(count)
                                        location = request.POST.getlist(idloc)
                                        loc=''
                                        for l in range(len(location)):
                                            if l!=0:
                                                loc = loc+';'
                                            loc = loc + location[l]
                                        location = loc
                                    elif comploc == 'Coach Number':
                                        idloc = 'location1' + str(count)
                                        location = request.POST.get(idloc)
                                    elif comploc == 'Direction':
                                        idloc = 'location' + str(count)
                                        location = request.POST.get(idloc)
                        elif a[0] == '4':
                            dataid = 'date' + str(count)
                            datavalue = request.POST.get(dataid)
                            if datavalue == '' or datavalue == None:
                                continue
                            else:
                                departmentId = 'department1' + str(count)
                                officer = 'officer11' + str(count)
                                remarks = 'remarks' + str(count)
                                

                                departmentId = request.POST.get(departmentId)
                                officer = request.POST.get(officer)
                                remarks = request.POST.get(remarks)
                                if comploc == 'None':
                                    location = None
                                else:
                                    if comploc == 'Pole Location' or comploc == 'Number':
                                        idloc = 'location1' + str(count)
                                        location = request.POST.getlist(idloc)
                                        loc=''
                                        for l in range(len(location)):
                                            if l!=0:
                                                loc = loc+';'
                                            loc = loc + location[l]
                                        location = loc
                                    elif comploc == 'Coach Number':
                                        idloc = 'location1' + str(count)
                                        location = request.POST.get(idloc)
                                    elif comploc == 'Direction':
                                        idloc = 'location' + str(count)
                                        location = request.POST.get(idloc)
                        elif a[0] == '5':
                            dataid = 'time' + str(count)
                            datavalue = request.POST.get(dataid)
                            if datavalue == '' or datavalue == None:
                                continue
                            else:
                                departmentId = 'department1' + str(count)
                                officer = 'officer11' + str(count)
                                remarks = 'remarks' + str(count)
                                

                                departmentId = request.POST.get(departmentId)
                                officer = request.POST.get(officer)
                                remarks = request.POST.get(remarks)
                                if comploc == 'None':
                                    location = None
                                else:
                                    if comploc == 'Pole Location' or comploc == 'Number':
                                        idloc = 'location1' + str(count)
                                        location = request.POST.getlist(idloc)
                                        loc=''
                                        for l in range(len(location)):
                                            if l!=0:
                                                loc = loc+';'
                                            loc = loc + location[l]
                                        location = loc
                                    elif comploc == 'Coach Number':
                                        idloc = 'location1' + str(count)
                                        location = request.POST.get(idloc)
                                    elif comploc == 'Direction':
                                        idloc = 'location' + str(count)
                                        location = request.POST.get(idloc)
                        elif a[0] == '6':
                            dataid = 'file' + str(count)
                            
                            try:
                                if len(request.FILES) != 0:
                                    supdoc = request.FILES[dataid]
                                    folder='media/Einspection/'
                                    fs=FileSystemStorage(location=folder)  
                                    files=fs.save(supdoc.name,supdoc)      
                                    datavalue = fs.url(files)
                                    datavalue = str(datavalue).split('media/')
                                    datavalue = 'Einspection/'+datavalue[1]
                                else:
                                    datavalue = None
                            except: 
                                datavalue = None
                            
                            
                            if datavalue == '' or datavalue == None:
                                continue
                            else:
                                departmentId = 'department1' + str(count)
                                officer = 'officer11' + str(count)
                                remarks = 'remarks' + str(count)
                                
                                departmentId = request.POST.get(departmentId)
                                officer = request.POST.get(officer)
                                remarks = request.POST.get(remarks)
                                if comploc == 'None':
                                    location = None
                                else:
                                    if comploc == 'Pole Location' or comploc == 'Number':
                                        idloc = 'location1' + str(count)
                                        location = request.POST.getlist(idloc)
                                        loc=''
                                        for l in range(len(location)):
                                            if l!=0:
                                                loc = loc+';'
                                            loc = loc + location[l]
                                        location = loc
                                    elif comploc == 'Coach Number':
                                        idloc = 'location1' + str(count)
                                        location = request.POST.get(idloc)
                                    elif comploc == 'Direction':
                                        idloc = 'location' + str(count)
                                        location = request.POST.get(idloc)
                        elif a[0] == '9':
                            
                            dataid = 'checkbox#' + str(a[1])
                            datavalue = request.POST.getlist(dataid)
                            
                            if len(datavalue) == 0:
                                continue
                            else:
                                str1 =''
                                for iii in range(len(datavalue)):
                                    if iii != 0:
                                        str1 = str1 + '$'
                                    str1 = str1 + datavalue[iii]
                                datavalue = str1
                                departmentId = 'department1' + str(count)
                                officer = 'officer11' + str(count)
                                remarks = 'remarks' + str(count)
                                departmentId = request.POST.get(departmentId)
                                officer = request.POST.get(officer)
                                remarks = request.POST.get(remarks)
                                if comploc == 'None':
                                    location = None
                                else:
                                    if comploc == 'Pole Location' or comploc == 'Number':
                                        idloc = 'location1' + str(count)
                                        location = request.POST.getlist(idloc)
                                        loc=''
                                        for l in range(len(location)):
                                            if l!=0:
                                                loc = loc+';'
                                            loc = loc + location[l]
                                        location = loc


                                    elif comploc == 'Coach Number':
                                        idloc = 'location1' + str(count)
                                        location = request.POST.get(idloc)
                                    elif comploc == 'Direction':
                                        idloc = 'location' + str(count)
                                        location = request.POST.get(idloc)
                        elif a[0] == '10':
                            
                            dataid = 'checkbox' + str(a[1])
                            datavalue = request.POST.getlist(dataid)
                            
                            if len(datavalue) == 0:
                                continue
                            else:
                                str1 =''
                                for iii in range(len(datavalue)):
                                    if iii != 0:
                                        str1 = str1 + '$'
                                    str1 = str1 + datavalue[iii]
                                datavalue = str1
                                departmentId = 'department1' + str(count)
                                officer = 'officer11' + str(count)
                                remarks = 'remarks' + str(count)
                                departmentId = request.POST.get(departmentId)
                                officer = request.POST.get(officer)
                                remarks = request.POST.get(remarks)
                                if comploc == 'None':
                                    location = None
                                else:
                                    if comploc == 'Pole Location' or comploc == 'Number':
                                        idloc = 'location1' + str(count)
                                        location = request.POST.getlist(idloc)
                                        loc=''
                                        for l in range(len(location)):
                                            if l!=0:
                                                loc = loc+';'
                                            loc = loc + location[l]
                                        location = loc


                                    elif comploc == 'Coach Number':
                                        idloc = 'location1' + str(count)
                                        location = request.POST.get(idloc)
                                    elif comploc == 'Direction':
                                        idloc = 'location' + str(count)
                                        location = request.POST.get(idloc)
                        
                        else:
                            dataid = 'userinput' + str(count)
                            datavalue = request.POST.get(dataid)
                            if datavalue == '' or datavalue == None:
                                continue
                            else:
                                departmentId = 'department1' + str(count)
                                officer = 'officer11' + str(count)
                                remarks = 'remarks' + str(count)
                                departmentId = request.POST.get(departmentId)
                                officer = request.POST.get(officer)
                                remarks = request.POST.get(remarks)
                                if comploc == 'None':
                                    location = None
                                else:
                                    if comploc == 'Pole Location' or comploc == 'Number':
                                        idloc = 'location1' + str(count)
                                        location = request.POST.getlist(idloc)
                                        loc=''
                                        for l in range(len(location)):
                                            if l!=0:
                                                loc = loc+';'
                                            loc = loc + location[l]
                                        location = loc


                                    elif comploc == 'Coach Number':
                                        idloc = 'location1' + str(count)
                                        location = request.POST.get(idloc)
                                    elif comploc == 'Direction':
                                        idloc = 'location' + str(count)
                                        location = request.POST.get(idloc)

                        totalQidUsed.append(int(question_id))
                        if not m2.einspection_item_detail.objects.filter(einspno = inspectionId).exists():
                            item = m2.einspection_item_detail.objects.create(status=0,einspno_id=inspectionId,qid_id=question_id,value=datavalue,qncat=obj2.instypeid_id,
                                qtype='e-Inspection',created_by=loginUser.empno.empno,lastmodified_by=loginUser.empno.empno,
                                created_on=systemDateTime,lastmodified_on=systemDateTime,location=location,remarks=remarks,value_id_id=radioval)
                            try:
                                mark = Level_Desig.objects.filter(designation_code = officer)[0]
                                m2.einsp_marked.objects.create(designation_by=designations[0]['designation'],eitemid=item,marked_to=mark,marked_emp_id=mark.empno_id,status_flag=1,department_id=departmentId,
                                                            designation = mark.designation,
                                                    created_by=loginUser.empno.empno,lastmodified_by=loginUser.empno.empno,
                                                    created_on=systemDateTime,lastmodified_on=systemDateTime)
                            except:
                                pass
                        else:
                            if m2.einspection_item_detail.objects.filter(einspno = inspectionId,qid=question_id).exists():
                                item = m2.einspection_item_detail.objects.filter(einspno = inspectionId,qid=question_id).update(status=0,value=datavalue,qncat=obj2.instypeid_id,
                                qtype='e-Inspection',lastmodified_by=loginUser.empno.empno,
                                lastmodified_on=systemDateTime,location=location,remarks=remarks,value_id_id=radioval)
                                
                                try:
                                    mark = Level_Desig.objects.filter(designation_code = officer)[0]
                                    
                                    item = m2.einspection_item_detail.objects.filter(einspno = inspectionId,qid=question_id)[0]
                                    
                                    m2.einsp_marked.objects.filter(eitemid = item.eitemid).update(designation_by=designations[0]['designation'],marked_to=mark,marked_emp_id=mark.empno_id,status_flag=1,department_id=departmentId,designation = mark.designation,lastmodified_by=loginUser.empno.empno,lastmodified_on=systemDateTime)
                                except:
                                    pass
                            else:
                                item = m2.einspection_item_detail.objects.create(status=0,einspno_id=inspectionId,qid_id=question_id,value=datavalue,qncat=obj2.instypeid_id,
                                    qtype='e-Inspection',created_by=loginUser.empno.empno,lastmodified_by=loginUser.empno.empno,
                                    created_on=systemDateTime,lastmodified_on=systemDateTime,location=location,remarks=remarks,value_id_id=radioval)
                                try:
                                    mark = Level_Desig.objects.filter(designation_code = officer)[0]
                                    m2.einsp_marked.objects.create(designation_by=designations[0]['designation'],eitemid=item,marked_to=mark,marked_emp_id=mark.empno_id,status_flag=1,department_id=departmentId,
                                                                designation = mark.designation,
                                                    created_by=loginUser.empno.empno,lastmodified_by=loginUser.empno.empno,
                                                    created_on=systemDateTime,lastmodified_on=systemDateTime)
                                except:
                                    pass

                m2.einsp_marked.objects.filter(Q(eitemid__in=m2.einspection_item_detail.objects.filter(einspno=inspectionId).values('eitemid'))).update(status_flag=0)       
                m2.einsp_marked.objects.filter(Q(eitemid__in=m2.einspection_item_detail.objects.exclude(qid__in=totalQidUsed).filter(einspno=inspectionId).values('eitemid'))).delete()
                m2.einspection_item_detail.objects.exclude(qid__in=totalQidUsed).filter(einspno=inspectionId).delete()
                return HttpResponseRedirect(f'/showMenu/?id={id}&inspectionId={inspectionId}')
                #return redirect('draft_inspection_form')
            
            if 'Save as Draft' == submitvalue:
                inspectionId=request.POST.get('inspectionId')
                request.POST.get('user')
                commanDepartment = request.POST.getlist('commanDepartment') 
                comman = ''
                for l in range(len(commanDepartment)):
                    if l!=0:
                        comman = comman+';'
                    comman = comman + commanDepartment[l]
                commanDepartment = comman
                # railways = request.POST.get('userdata0') 
                # division = request.POST.get('userdata1') 
                start_date = request.POST.get('userdata4')
                start_date = (datetime.datetime.strptime(start_date,'%d-%m-%Y')).strftime('%Y-%m-%d')
                start_time = request.POST.get('userdata5') 
                end_date = request.POST.get('userdata6') 
                masterTableStatus = request.POST.get('masterTableStatus')
                if end_date == '':
                    end_date = None
                else:
                    end_date = (datetime.datetime.strptime(end_date,'%d-%m-%Y')).strftime('%Y-%m-%d')
                 
                end_time = request.POST.get('userdata7')
                if end_time == '':
                    end_time = None 
                inspid = request.POST.get('id')
                detail = request.POST.get('userdata9')
                entity = request.POST.get('entitylbl') 
                radios2 = request.POST.get('abnormal') 
                remarks11 = request.POST.get('userdata15')
                # section = request.POST.get('userdata17') 
                inspectionType = int(request.POST.get('supnight'))   
                ratings1 = request.POST.get('ratings1')  
                finalizeStart = request.POST.get('finalizeStart')   
                finalizeEnd = request.POST.get('finalizeEnd')
                if ratings1 == None:
                    ratings1 = None

                if radios2 == 'no':
                    saving = 'no'
                else:
                    saving = 'yes/'+remarks11
                # inspectionType = inspectionType.split(' ')
                # if len(inspectionType) == 3:
                #     is_scheduled = False
                #     inspection_type=3
                # elif inspectionType[1] == 'Surprise':
                #     is_scheduled = False
                #     inspection_type=1
                # elif inspectionType[1] == 'Night':
                #     is_scheduled = True
                #     inspection_type=2
                # else:
                #     is_scheduled = True
                #     inspection_type=4

                if inspectionType == 3:
                    is_scheduled = False
                    inspection_type = 3
                elif inspectionType == 2:
                    is_scheduled = True
                    inspection_type=2
                elif inspectionType == 1:
                    is_scheduled = True
                    inspection_type = 1
                else:
                    is_scheduled = True
                    inspection_type = 0

                try:
                    if len(request.FILES) != 0:
                        supdoc = request.FILES['userdata14']
                        folder='media/documents/'
                        fs=FileSystemStorage(location=folder)  
                        files=fs.save(supdoc.name,supdoc)      
                        documents = fs.url(files)
                        documents = str(documents).split('media/')
                        documents = 'documents/'+documents[1]
                    else:
                        documents = None
                except: 
                    documents = None
                # railways=railwayLocationMaster.objects.filter(rly_unit_code=railways)[0]
                # division=railwayLocationMaster.objects.filter(rly_unit_code=division)[0]
                email=str(request.user)
                max_id=0
                temp=list(m2.einspection_details.objects.filter(delete_flag=False).values())
                if len(temp)!=0:
                    max_id = m2.einspection_details.objects.aggregate(Max('einspno'))['einspno__max']
                    max_id+=1 
                else:
                    max_id=1

                loginUser=Level_Desig.objects.filter(official_email_ID=email)[0]
                department=departMast.objects.filter(department_name=loginUser.department)[0]

                currentDateTime = datetime.datetime.now()
                date = currentDateTime.date()
                year=date.strftime("%Y")
                inspection=inspectiontype_master.objects.filter(instypeid=id,delete_flag=False)[0]
                if inspection.entity != None:
                    inspectionEntity = inspection.entity.dmaster
                    inspection_title=str(inspection.shortcode) + ' Inspection of ' + str(inspectionEntity) + ' - ' + str(detail) + ' by ' + str(loginUser.designation) + ' on ' + str((datetime.datetime.strptime(start_date,'%Y-%m-%d')).strftime('%d-%m-%Y'))
                elif inspection.other_entity is not None:
                    inspectionEntity = inspection.other_entity
                    inspection_title=str(inspection.shortcode) + ' Inspection of ' + str(inspectionEntity) + ' - ' + str(detail) + ' by ' + str(loginUser.designation) + ' on ' + str((datetime.datetime.strptime(start_date,'%Y-%m-%d')).strftime('%d-%m-%Y'))

                else:
                    inspectionEntity = None
                    # res123=list(section_master.objects.filter(secid=section).values('section_code'))[0]['section_code']
                    inspection_title=str(inspection.shortcode) + ' Inspection by ' + str(loginUser.designation) + ' on ' + str((datetime.datetime.strptime(start_date,'%Y-%m-%d')).strftime('%d-%m-%Y'))


                inspection_note_no= str(year)+'/'+str(loginUser.designation) + '/' + str(inspection.shortcode) + '/' + str(max_id)
                saving=str(radios2) + '/' + str(remarks11)
                systemDateTime = currentDateTime.strftime("%Y-%m-%d %H:%M:%S")
                reportPath = '/pdfDetails/?id='+str(max_id)
                
                if inspectionId == '':
                    obj1=m2.einspection_details.objects.create(masterTableFlag=masterTableStatus,finalizeStart= finalizeStart,finalizeEnd=finalizeEnd,status = 0,instypeid=inspection,inspected_on=start_date, start_date=start_date,              end_date=end_date,start_time=start_time,end_time=end_time,
                            inspection_title=inspection_title,designation=loginUser,inspection_note_no=inspection_note_no,ratings=ratings1,abnormal=saving,dept=department,
                            rly_id_id=None,div_id_id=None,entitydetails=inspectionEntity,entityid=detail,created_by=loginUser.empno.empno,lastmodified_by=loginUser.empno.empno,is_scheduled=is_scheduled,
                            created_on=systemDateTime,lastmodified_on=systemDateTime,section_id=None,inspection_type=inspection_type,documents=documents,report_path=reportPath,commanDepartment=commanDepartment,commanDesignation=commanDesignation)
                    
                    inspectionId = max_id
                else:
                    obj1=m2.einspection_details.objects.filter(einspno = inspectionId).update(masterTableFlag=masterTableStatus,finalizeStart= finalizeStart,finalizeEnd=finalizeEnd,status = 0,instypeid=inspection,end_date=end_date,end_time=end_time,
                            inspection_title=inspection_title,designation=loginUser,inspection_note_no=inspection_note_no,ratings=ratings1,abnormal=saving,dept=department,
                            rly_id_id=None,div_id_id=None,entitydetails=inspectionEntity,entityid=detail,lastmodified_by=loginUser.empno.empno,is_scheduled=is_scheduled,
                            lastmodified_on=systemDateTime,section_id=None,inspection_type=inspection_type,documents=documents,report_path=reportPath,commanDepartment=commanDepartment,commanDesignation=commanDesignation)
                
                railways = request.POST.getlist('userdata0') 
                division = request.POST.getlist('userdata1') 
                section = request.POST.getlist('userdata17')
                for i in railways:
                    if not m2.einsp_multi_location.objects.filter(einspno = inspectionId,item=i,type='HQ').exists():
                        m2.einsp_multi_location.objects.create(einspno_id = inspectionId,item=i,type='HQ')
                m2.einsp_multi_location.objects.filter(~Q(item__in=railways),einspno = inspectionId,type='HQ')

                for i in division:
                    if not m2.einsp_multi_location.objects.filter(einspno = inspectionId,item=i,type='DIV').exists():
                        m2.einsp_multi_location.objects.create(einspno_id = inspectionId,item=i,type='DIV')
                m2.einsp_multi_location.objects.filter(~Q(item__in=division),einspno = inspectionId,type='DIV')

                for i in section:
                    if not m2.einsp_multi_location.objects.filter(einspno = inspectionId,item=i,type='SEC').exists():
                        m2.einsp_multi_location.objects.create(einspno_id = inspectionId,item=i,type='SEC')
                m2.einsp_multi_location.objects.filter(~Q(item__in=section),einspno = inspectionId,type='SEC')

                # print(inspection,'inspection')
                if inspection.instypeid == 221:
                    train_no_input = request.POST.get('train_no_input')
                    train_start_time = request.POST.get('train_start_time')
                    train_start_time = (datetime.datetime.strptime(train_start_time,'%d/%m/%Y')).strftime('%Y-%m-%d')
                    if not m2.einspection_coach_details.objects.filter(einspno = inspectionId,type='TRAIN').exists():
                        m2.einspection_coach_details.objects.create(einspno_id = inspectionId,item=train_no_input,type='TRAIN',startdate=train_start_time)
                    else:
                        m2.einspection_coach_details.objects.filter(einspno_id = inspectionId,type='TRAIN').update(item=train_no_input,startdate=train_start_time)
                    coachData = request.POST.getlist('coachData')
                    # print(coachData)
                    for i in coachData:
                        if not m2.einspection_coach_details.objects.filter(einspno = inspectionId,item=i,type='COACH').exists():
                            m2.einspection_coach_details.objects.create(einspno_id = inspectionId,item=i,type='COACH')
                    m2.einspection_coach_details.objects.filter(~Q(item__in=coachData),einspno = inspectionId,type='COACH')
                
                copyToOfficer = request.POST.getlist('copyToOfficer')
                if len(copyToOfficer) > 0:
                    copy_to_id = ''
                    copy_to_desig = ''
                    for li1 in copyToOfficer:
                        level1_data = list(Level_Desig.objects.filter(designation_code=li1).values('designation_code','designation'))
                        if len(level1_data)>0:
                            if copy_to_id != '':
                                copy_to_id = copy_to_id + ','
                            if copy_to_desig != '':
                                copy_to_desig = copy_to_desig + ','
                            copy_to_id = copy_to_id + str(level1_data[0]['designation_code'])
                            copy_to_desig = copy_to_desig + level1_data[0]['designation']

                    if mm6.copyto_mails.objects.filter(doc_id=inspectionId, area_flag=0, doc_table='e').exists():
                        mm6.copyto_mails.objects.filter(doc_id=inspectionId, area_flag=0, doc_table='e').update(sender_id_id=loginUser.designation_code, receiver_id=copy_to_id, receiver_desig=copy_to_desig)
                    else:
                        mm6.copyto_mails.objects.create(sender_id_id=loginUser.designation_code, doc_id=inspectionId, area_flag=0, doc_table='e', receiver_id=copy_to_id, receiver_desig=copy_to_desig)


                for ia in range(len(actorDetailsData)):
                    actorId = actorDetailsData[ia]['actorId']
                    actorName = actorDetailsData[ia]['actor']
                    actorValue = [request.POST.get('actor'+actorName)]
                    tval = []
                    if  actorValue != ['']:   
                        for av in actorValue:
                            #av = av.split('-')[0]
                            tval.append(av)
                            if not m2.actor_with_inspection_details.objects.filter(einspno_id=inspectionId,actorId_id=actorId,value=av).exists():

                                lst121 = list(actor_details.objects.filter(actorId=actorId).values())
                                viewName = lst121[0]['viewName']
                                ViewFilter = lst121[0]['viewFilter'] 
                                viewColumn = lst121[0]['viewColumn'].split(',')
                                cursor = connection.cursor()
                                viewData=[]
                                avVal = (av.split('-')[0]).strip()
                                print(viewName, ViewFilter, avVal)
                                qry = ''' select * from "%s" where "%s" = '%s';''' % (viewName, ViewFilter, avVal)
                                cursor.execute(qry)
                                viewData.extend(cursor.fetchall())
                                cursor.close()
                                dictData={}
                                for icol in range(len(viewColumn)):
                                    dictData[viewColumn[icol]] = viewData[0][icol]

                                m2.actor_with_inspection_details.objects.create(einspno_id=inspectionId,actorId_id=actorId,value=av,details = dictData)
                        
                    m2.actor_with_inspection_details.objects.filter(~Q(value__in=tval),einspno=inspectionId,actorId=actorId).delete()

                count = 0
                totalQidUsed=[]
                for adata in ajaxdata:
                    a = adata.split('@#@')
                    comploc = a[6]
                    question_id = a[1]
                    count += 1
                    tickId = 'tick@'+a[7]+'@'+str(count)
                    tickVal = request.POST.get(tickId)
                    radioval = None
                    if tickVal !=None:
                        obj2=m2.questionare_master.objects.filter(qid = question_id)[0]
                        if a[0] == '1':
                            dataid = 'userinput' + str(count)
                            datavalue = request.POST.get(dataid)

                            if datavalue == '' or datavalue == None:
                                continue
                            else:
                                departmentId = 'department1' + str(count)
                                officer = 'officer11' + str(count)
                                remarks = 'remarks' + str(count)
                                

                                departmentId = request.POST.get(departmentId)
                                officer = request.POST.get(officer)
                                remarks = request.POST.get(remarks)
                                if comploc == 'None':
                                    location = None
                                else:
                                    if comploc == 'Pole Location' or comploc == 'Number':
                                        idloc = 'location1' + str(count)
                                        location = request.POST.getlist(idloc)
                                        loc=''
                                        for l in range(len(location)):
                                            if l!=0:
                                                loc = loc+';'
                                            loc = loc + location[l]
                                        location = loc
                                    elif comploc == 'Coach Number':
                                        idloc = 'location1' + str(count)
                                        location = request.POST.get(idloc)
                                    elif comploc == 'Direction':
                                        idloc = 'location' + str(count)
                                        location = request.POST.get(idloc)
                        elif a[0] == '2':
                            dataid = 'roption' + str(count)
                            datavalue = request.POST.get(dataid)

                            if datavalue == '' or datavalue == None:
                                continue
                            else:
                               
                                if m2.radio_options.objects.filter(rlabel=datavalue,rid=obj2.roption1.rid).exists():
                                    radioval = obj2.roption1.rid
                                elif m2.radio_options.objects.filter(rlabel=datavalue,rid=obj2.roption2.rid).exists():
                                    radioval = obj2.roption2.rid
                                else:
                                    radioval = None
                                departmentId = 'department1' + str(count)
                                officer = 'officer11' + str(count)
                                remarks = 'remarks' + str(count)
                                

                                departmentId = request.POST.get(departmentId)
                                officer = request.POST.get(officer)
                                remarks = request.POST.get(remarks)
                                if comploc == 'None':
                                    location = None
                                else:
                                    if comploc == 'Pole Location' or comploc == 'Number':
                                        idloc = 'location1' + str(count)
                                        location = request.POST.getlist(idloc)
                                        loc=''
                                        for l in range(len(location)):
                                            if l!=0:
                                                loc = loc+';'
                                            loc = loc + location[l]
                                        location = loc
                                    elif comploc == 'Coach Number':
                                        idloc = 'location1' + str(count)
                                        location = request.POST.get(idloc)
                                    elif comploc == 'Direction':
                                        idloc = 'location' + str(count)
                                        location = request.POST.get(idloc)
                                        
                        elif a[0] == '3':
                            dataid = 'doption' + str(count)
                            datavalue = request.POST.get(dataid)
                            if datavalue == '' or datavalue == None:
                                continue
                            else:
                                departmentId = 'department1' + str(count)
                                officer = 'officer11' + str(count)
                                remarks = 'remarks' + str(count)
                                

                                departmentId = request.POST.get(departmentId)
                                officer = request.POST.get(officer)
                                remarks = request.POST.get(remarks)
                                if comploc == 'None':
                                    location = None
                                else:
                                    if comploc == 'Pole Location' or comploc == 'Number':
                                        idloc = 'location1' + str(count)
                                        location = request.POST.getlist(idloc)
                                        loc=''
                                        for l in range(len(location)):
                                            if l!=0:
                                                loc = loc+';'
                                            loc = loc + location[l]
                                        location = loc
                                    elif comploc == 'Coach Number':
                                        idloc = 'location1' + str(count)
                                        location = request.POST.get(idloc)
                                    elif comploc == 'Direction':
                                        idloc = 'location' + str(count)
                                        location = request.POST.get(idloc)
                        elif a[0] == '4':
                            dataid = 'date' + str(count)
                            datavalue = request.POST.get(dataid)
                            if datavalue == '' or datavalue == None:
                                continue
                            else:
                                departmentId = 'department1' + str(count)
                                officer = 'officer11' + str(count)
                                remarks = 'remarks' + str(count)
                                

                                departmentId = request.POST.get(departmentId)
                                officer = request.POST.get(officer)
                                remarks = request.POST.get(remarks)
                                if comploc == 'None':
                                    location = None
                                else:
                                    if comploc == 'Pole Location' or comploc == 'Number':
                                        idloc = 'location1' + str(count)
                                        location = request.POST.getlist(idloc)
                                        loc=''
                                        for l in range(len(location)):
                                            if l!=0:
                                                loc = loc+';'
                                            loc = loc + location[l]
                                        location = loc
                                    elif comploc == 'Coach Number':
                                        idloc = 'location1' + str(count)
                                        location = request.POST.get(idloc)
                                    elif comploc == 'Direction':
                                        idloc = 'location' + str(count)
                                        location = request.POST.get(idloc)
                        elif a[0] == '5':
                            dataid = 'time' + str(count)
                            datavalue = request.POST.get(dataid)
                            if datavalue == '' or datavalue == None:
                                continue
                            else:
                                departmentId = 'department1' + str(count)
                                officer = 'officer11' + str(count)
                                remarks = 'remarks' + str(count)
                                

                                departmentId = request.POST.get(departmentId)
                                officer = request.POST.get(officer)
                                remarks = request.POST.get(remarks)
                                if comploc == 'None':
                                    location = None
                                else:
                                    if comploc == 'Pole Location' or comploc == 'Number':
                                        idloc = 'location1' + str(count)
                                        location = request.POST.getlist(idloc)
                                        loc=''
                                        for l in range(len(location)):
                                            if l!=0:
                                                loc = loc+';'
                                            loc = loc + location[l]
                                        location = loc
                                    elif comploc == 'Coach Number':
                                        idloc = 'location1' + str(count)
                                        location = request.POST.get(idloc)
                                    elif comploc == 'Direction':
                                        idloc = 'location' + str(count)
                                        location = request.POST.get(idloc)
                        elif a[0] == '6':
                            dataid = 'file' + str(count)
                            
                            try:
                                if len(request.FILES) != 0:
                                    supdoc = request.FILES[dataid]
                                    folder='media/Einspection/'
                                    fs=FileSystemStorage(location=folder)  
                                    files=fs.save(supdoc.name,supdoc)      
                                    datavalue = fs.url(files)
                                    datavalue = str(datavalue).split('media/')
                                    datavalue = 'Einspection/'+datavalue[1]
                                else:
                                    datavalue = None
                            except: 
                                datavalue = None
                            
                            
                            if datavalue == '' or datavalue == None:
                                continue
                            else:
                                departmentId = 'department1' + str(count)
                                officer = 'officer11' + str(count)
                                remarks = 'remarks' + str(count)
                                
                                departmentId = request.POST.get(departmentId)
                                officer = request.POST.get(officer)
                                remarks = request.POST.get(remarks)
                                if comploc == 'None':
                                    location = None
                                else:
                                    if comploc == 'Pole Location' or comploc == 'Number':
                                        idloc = 'location1' + str(count)
                                        location = request.POST.getlist(idloc)
                                        loc=''
                                        for l in range(len(location)):
                                            if l!=0:
                                                loc = loc+';'
                                            loc = loc + location[l]
                                        location = loc
                                    elif comploc == 'Coach Number':
                                        idloc = 'location1' + str(count)
                                        location = request.POST.get(idloc)
                                    elif comploc == 'Direction':
                                        idloc = 'location' + str(count)
                                        location = request.POST.get(idloc)
                        elif a[0] == '9':
                            
                            dataid = 'checkbox#' + str(a[1])
                            datavalue = request.POST.getlist(dataid)
                            
                            if len(datavalue) == 0:
                                continue
                            else:
                                str1 =''
                                for iii in range(len(datavalue)):
                                    if iii != 0:
                                        str1 = str1 + '$'
                                    str1 = str1 + datavalue[iii]
                                datavalue = str1
                                departmentId = 'department1' + str(count)
                                officer = 'officer11' + str(count)
                                remarks = 'remarks' + str(count)
                                departmentId = request.POST.get(departmentId)
                                officer = request.POST.get(officer)
                                remarks = request.POST.get(remarks)
                                if comploc == 'None':
                                    location = None
                                else:
                                    if comploc == 'Pole Location' or comploc == 'Number':
                                        idloc = 'location1' + str(count)
                                        location = request.POST.getlist(idloc)
                                        loc=''
                                        for l in range(len(location)):
                                            if l!=0:
                                                loc = loc+';'
                                            loc = loc + location[l]
                                        location = loc


                                    elif comploc == 'Coach Number':
                                        idloc = 'location1' + str(count)
                                        location = request.POST.get(idloc)
                                    elif comploc == 'Direction':
                                        idloc = 'location' + str(count)
                                        location = request.POST.get(idloc)
                        elif a[0] == '10':
                            
                            dataid = 'checkbox' + str(a[1])
                            datavalue = request.POST.getlist(dataid)
                            
                            if len(datavalue) == 0:
                                continue
                            else:
                                str1 =''
                                for iii in range(len(datavalue)):
                                    if iii != 0:
                                        str1 = str1 + '$'
                                    str1 = str1 + datavalue[iii]
                                datavalue = str1
                                departmentId = 'department1' + str(count)
                                officer = 'officer11' + str(count)
                                remarks = 'remarks' + str(count)
                                departmentId = request.POST.get(departmentId)
                                officer = request.POST.get(officer)
                                remarks = request.POST.get(remarks)
                                if comploc == 'None':
                                    location = None
                                else:
                                    if comploc == 'Pole Location' or comploc == 'Number':
                                        idloc = 'location1' + str(count)
                                        location = request.POST.getlist(idloc)
                                        loc=''
                                        for l in range(len(location)):
                                            if l!=0:
                                                loc = loc+';'
                                            loc = loc + location[l]
                                        location = loc


                                    elif comploc == 'Coach Number':
                                        idloc = 'location1' + str(count)
                                        location = request.POST.get(idloc)
                                    elif comploc == 'Direction':
                                        idloc = 'location' + str(count)
                                        location = request.POST.get(idloc)
                        
                        else:
                            dataid = 'userinput' + str(count)
                            datavalue = request.POST.get(dataid)
                            if datavalue == '' or datavalue == None:
                                continue
                            else:
                                departmentId = 'department1' + str(count)
                                officer = 'officer11' + str(count)
                                remarks = 'remarks' + str(count)
                                departmentId = request.POST.get(departmentId)
                                officer = request.POST.get(officer)
                                remarks = request.POST.get(remarks)
                                if comploc == 'None':
                                    location = None
                                else:
                                    if comploc == 'Pole Location' or comploc == 'Number':
                                        idloc = 'location1' + str(count)
                                        location = request.POST.getlist(idloc)
                                        loc=''
                                        for l in range(len(location)):
                                            if l!=0:
                                                loc = loc+';'
                                            loc = loc + location[l]
                                        location = loc


                                    elif comploc == 'Coach Number':
                                        idloc = 'location1' + str(count)
                                        location = request.POST.get(idloc)
                                    elif comploc == 'Direction':
                                        idloc = 'location' + str(count)
                                        location = request.POST.get(idloc)

                        totalQidUsed.append(int(question_id))
                        if not m2.einspection_item_detail.objects.filter(einspno = inspectionId).exists():
                            item = m2.einspection_item_detail.objects.create(status=0,einspno_id=inspectionId,qid_id=question_id,value=datavalue,qncat=obj2.instypeid_id,
                                qtype='e-Inspection',created_by=loginUser.empno.empno,lastmodified_by=loginUser.empno.empno,
                                created_on=systemDateTime,lastmodified_on=systemDateTime,location=location,remarks=remarks,value_id_id=radioval)
                            try:
                                mark = Level_Desig.objects.filter(designation_code = officer)[0]
                                m2.einsp_marked.objects.create(designation_by=designations[0]['designation'],eitemid=item,marked_to=mark,marked_emp_id=mark.empno_id,status_flag=1,department_id=departmentId,
                                                            designation = mark.designation,
                                                    created_by=loginUser.empno.empno,lastmodified_by=loginUser.empno.empno,
                                                    created_on=systemDateTime,lastmodified_on=systemDateTime)
                            except:
                                pass
                        else:
                            if m2.einspection_item_detail.objects.filter(einspno = inspectionId,qid=question_id).exists():
                                item = m2.einspection_item_detail.objects.filter(einspno = inspectionId,qid=question_id).update(status=0,value=datavalue,qncat=obj2.instypeid_id,
                                qtype='e-Inspection',lastmodified_by=loginUser.empno.empno,
                                lastmodified_on=systemDateTime,location=location,remarks=remarks,value_id_id=radioval)
                                
                                try:
                                    mark = Level_Desig.objects.filter(designation_code = officer)[0]
                                    
                                    item = m2.einspection_item_detail.objects.filter(einspno = inspectionId,qid=question_id)[0]
                                    
                                    m2.einsp_marked.objects.filter(eitemid = item.eitemid).update(designation_by=designations[0]['designation'],marked_to=mark,marked_emp_id=mark.empno_id,status_flag=1,department_id=departmentId,designation = mark.designation,lastmodified_by=loginUser.empno.empno,lastmodified_on=systemDateTime)
                                except:
                                    pass
                            else:
                                item = m2.einspection_item_detail.objects.create(status=0,einspno_id=inspectionId,qid_id=question_id,value=datavalue,qncat=obj2.instypeid_id,
                                    qtype='e-Inspection',created_by=loginUser.empno.empno,lastmodified_by=loginUser.empno.empno,
                                    created_on=systemDateTime,lastmodified_on=systemDateTime,location=location,remarks=remarks,value_id_id=radioval)
                                try:
                                    mark = Level_Desig.objects.filter(designation_code = officer)[0]
                                    m2.einsp_marked.objects.create(designation_by=designations[0]['designation'],eitemid=item,marked_to=mark,marked_emp_id=mark.empno_id,status_flag=1,department_id=departmentId,
                                                                designation = mark.designation,
                                                    created_by=loginUser.empno.empno,lastmodified_by=loginUser.empno.empno,
                                                    created_on=systemDateTime,lastmodified_on=systemDateTime)
                                except:
                                    pass
                        
                m2.einsp_marked.objects.filter(Q(eitemid__in=m2.einspection_item_detail.objects.filter(einspno=inspectionId).values('eitemid'))).update(status_flag=0)
                m2.einsp_marked.objects.filter(Q(eitemid__in=m2.einspection_item_detail.objects.exclude(qid__in=totalQidUsed).filter(einspno=inspectionId).values('eitemid'))).delete()
                m2.einspection_item_detail.objects.exclude(qid__in=totalQidUsed).filter(einspno=inspectionId).delete()
                #return HttpResponseRedirect(f'/showMenu/?id={id}&inspectionId={inspectionId}')
                return redirect('draft_inspection_form')
            

            elif 'Save and Finalize' == submitvalue:
                inspectionId=request.POST.get('inspectionId')
                request.POST.get('user')
                commanDepartment = request.POST.getlist('commanDepartment') 
                comman = ''
                for l in range(len(commanDepartment)):
                    if l!=0:
                        comman = comman+';'
                    comman = comman + commanDepartment[l]
                commanDepartment = comman
                # railways = request.POST.get('userdata0') 
                # division = request.POST.get('userdata1') 
                start_date = request.POST.get('userdata4')
                start_date = (datetime.datetime.strptime(start_date,'%d-%m-%Y')).strftime('%Y-%m-%d')
                start_time = request.POST.get('userdata5') 
                end_date = request.POST.get('userdata6') 
                if end_date == '':
                    end_date = None
                else:
                    end_date = (datetime.datetime.strptime(end_date,'%d-%m-%Y')).strftime('%Y-%m-%d')
                 
                end_time = request.POST.get('userdata7')
                if end_time == '':
                    end_time = None 
                inspid = request.POST.get('id')
                detail = request.POST.get('userdata9')
                # print(detail,'    hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh      ')
                masterTableStatus = request.POST.get('masterTableStatus')
                entity = request.POST.get('entitylbl') 
                radios2 = request.POST.get('abnormal') 
                remarks11 = request.POST.get('userdata15')
                # section = request.POST.get('userdata17') 
                inspectionType = int(request.POST.get('supnight'))   
                ratings1 = request.POST.get('ratings1')  
                finalizeStart = request.POST.get('finalizeStart')   
                finalizeEnd = request.POST.get('finalizeEnd')
                if ratings1 == None:
                    ratings1 = None

                if radios2 == 'no':
                    saving = 'no'
                else:
                    saving = 'yes/'+remarks11
                
                if inspectionType == 3:
                    is_scheduled = False
                    inspection_type = 3
                elif inspectionType == 2:
                    is_scheduled = True
                    inspection_type=2
                elif inspectionType == 1:
                    is_scheduled = True
                    inspection_type = 1
                else:
                    is_scheduled = True
                    inspection_type = 0

                try:
                    if len(request.FILES) != 0:
                        supdoc = request.FILES['userdata14']
                        folder='media/documents/'
                        fs=FileSystemStorage(location=folder)  
                        files=fs.save(supdoc.name,supdoc)      
                        documents = fs.url(files)
                        documents = str(documents).split('media/')
                        documents = 'documents/'+documents[1]
                    else:
                        documents = None
                except: 
                    documents = None
                # railways=railwayLocationMaster.objects.filter(rly_unit_code=railways)[0]
                # division=railwayLocationMaster.objects.filter(rly_unit_code=division)[0]
                email=str(request.user)
                max_id=0
                temp=list(m2.einspection_details.objects.filter(delete_flag=False).values())
                if len(temp)!=0:
                    max_id = m2.einspection_details.objects.aggregate(Max('einspno'))['einspno__max']
                    max_id+=1 
                else:
                    max_id=1

                loginUser=Level_Desig.objects.filter(official_email_ID=email)[0]
                department=departMast.objects.filter(department_name=loginUser.department)[0]

                currentDateTime = datetime.datetime.now()
                date = currentDateTime.date()
                year=date.strftime("%Y")
                inspection=inspectiontype_master.objects.filter(instypeid=id,delete_flag=False)[0]
                if inspection.entity != None:
                    inspectionEntity = inspection.entity.dmaster
                    inspection_title=str(inspection.shortcode) + ' Inspection of ' + str(inspectionEntity) + ' - ' + str(detail) + ' by ' + str(loginUser.designation) + ' on ' + str((datetime.datetime.strptime(start_date,'%Y-%m-%d')).strftime('%d-%m-%Y'))
                elif inspection.other_entity is not None:
                    inspectionEntity = inspection.other_entity
                    inspection_title=str(inspection.shortcode) + ' Inspection of ' + str(inspectionEntity) + ' - ' + str(detail) + ' by ' + str(loginUser.designation) + ' on ' + str((datetime.datetime.strptime(start_date,'%Y-%m-%d')).strftime('%d-%m-%Y'))

                else:
                    inspectionEntity = None
                    #res123=list(section_master.objects.filter(secid=section).values('section_code'))[0]['section_code']
                    inspection_title=str(inspection.shortcode) + ' Inspection by ' + str(loginUser.designation) + ' on ' + str((datetime.datetime.strptime(start_date,'%Y-%m-%d')).strftime('%d-%m-%Y'))

                
                inspection_note_no= str(year)+'/'+str(loginUser.designation) + '/' + str(inspection.name) + '/' + str(max_id)
                saving=str(radios2) + '/' + str(remarks11)
                systemDateTime = currentDateTime.strftime("%Y-%m-%d %H:%M:%S")
                reportPath = '/pdfDetails/?id='+str(max_id)
                
                if inspectionId == '':
                    obj1=m2.einspection_details.objects.create(masterTableFlag=masterTableStatus,finalizeStart= finalizeStart,finalizeEnd=finalizeEnd,status = 1,instypeid=inspection,inspected_on=start_date, start_date=start_date,              end_date=end_date,start_time=start_time,end_time=end_time,
                            inspection_title=inspection_title,designation=loginUser,inspection_note_no=inspection_note_no,ratings=ratings1,abnormal=saving,dept=department,
                            rly_id_id=None,div_id_id=None,entitydetails=inspectionEntity,entityid=detail,created_by=loginUser.empno.empno,lastmodified_by=loginUser.empno.empno,is_scheduled=is_scheduled,
                            created_on=systemDateTime,lastmodified_on=systemDateTime,section_id=None,inspection_type=inspection_type,documents=documents,report_path=reportPath,commanDepartment=commanDepartment,commanDesignation=commanDesignation)
                    
                    inspectionId = max_id
                else:
                    obj1=m2.einspection_details.objects.filter(einspno = inspectionId).update(masterTableFlag=masterTableStatus,finalizeStart= finalizeStart,finalizeEnd=finalizeEnd,status = 1,instypeid=inspection,end_date=end_date,end_time=end_time,
                            inspection_title=inspection_title,designation=loginUser,inspection_note_no=inspection_note_no,ratings=ratings1,abnormal=saving,dept=department,
                            rly_id_id=None,div_id_id=None,entitydetails=inspectionEntity,entityid=detail,lastmodified_by=loginUser.empno.empno,is_scheduled=is_scheduled,
                            lastmodified_on=systemDateTime,section_id=None,inspection_type=inspection_type,documents=documents,report_path=reportPath,commanDepartment=commanDepartment,commanDesignation=commanDesignation)
                
                railways = request.POST.getlist('userdata0') 
                division = request.POST.getlist('userdata1') 
                section = request.POST.getlist('userdata17')
                for i in railways:
                    if not m2.einsp_multi_location.objects.filter(einspno = inspectionId,item=i,type='HQ').exists():
                        m2.einsp_multi_location.objects.create(einspno_id = inspectionId,item=i,type='HQ')
                m2.einsp_multi_location.objects.filter(~Q(item__in=railways),einspno = inspectionId,type='HQ')

                for i in division:
                    if not m2.einsp_multi_location.objects.filter(einspno = inspectionId,item=i,type='DIV').exists():
                        m2.einsp_multi_location.objects.create(einspno_id = inspectionId,item=i,type='DIV')
                m2.einsp_multi_location.objects.filter(~Q(item__in=division),einspno = inspectionId,type='DIV')

                for i in section:
                    if not m2.einsp_multi_location.objects.filter(einspno = inspectionId,item=i,type='SEC').exists():
                        m2.einsp_multi_location.objects.create(einspno_id = inspectionId,item=i,type='SEC')
                m2.einsp_multi_location.objects.filter(~Q(item__in=section),einspno = inspectionId,type='SEC')

                if inspection.instypeid == 221:
                    train_no_input = request.POST.get('train_no_input')
                    train_start_time = request.POST.get('train_start_time')
                    train_start_time = (datetime.datetime.strptime(train_start_time,'%d/%m/%Y')).strftime('%Y-%m-%d')
                    if not m2.einspection_coach_details.objects.filter(einspno = inspectionId,type='TRAIN').exists():
                        m2.einspection_coach_details.objects.create(einspno_id = inspectionId,item=train_no_input,type='TRAIN',startdate=train_start_time)
                    else:
                        m2.einspection_coach_details.objects.filter(einspno_id = inspectionId,type='TRAIN').update(item=train_no_input,startdate=train_start_time)
                    coachData = request.POST.getlist('coachData')
                    for i in coachData:
                        if not m2.einspection_coach_details.objects.filter(einspno = inspectionId,item=i,type='COACH').exists():
                            m2.einspection_coach_details.objects.create(einspno_id = inspectionId,item=i,type='COACH')
                    m2.einspection_coach_details.objects.filter(~Q(item__in=railways),einspno = inspectionId,type='COACH')

                copyToOfficer = request.POST.getlist('copyToOfficer')
                if len(copyToOfficer) > 0:
                    copy_to_id = ''
                    copy_to_desig = ''
                    for li1 in copyToOfficer:
                        level1_data = list(Level_Desig.objects.filter(designation_code=li1).values('designation_code','designation'))
                        if len(level1_data)>0:
                            if copy_to_id != '':
                                copy_to_id = copy_to_id + ','
                            if copy_to_desig != '':
                                copy_to_desig = copy_to_desig + ','
                            copy_to_id = copy_to_id + str(level1_data[0]['designation_code'])
                            copy_to_desig = copy_to_desig + level1_data[0]['designation']

                    if mm6.copyto_mails.objects.filter(doc_id=inspectionId, area_flag=0, doc_table='e').exists():
                        mm6.copyto_mails.objects.filter(doc_id=inspectionId, area_flag=0, doc_table='e').update(sender_id_id=loginUser.designation_code, receiver_id=copy_to_id, receiver_desig=copy_to_desig)
                    else:
                        mm6.copyto_mails.objects.create(sender_id_id=loginUser.designation_code, doc_id=inspectionId, area_flag=0, doc_table='e', receiver_id=copy_to_id, receiver_desig=copy_to_desig)



                for ia in range(len(actorDetailsData)):
                    actorId = actorDetailsData[ia]['actorId']
                    actorName = actorDetailsData[ia]['actor']
                    actorValue = [request.POST.get('actor'+actorName)]
                    tval = []
                    if  actorValue != ['']:   
                        for av in actorValue:
                            #av = av.split('-')[0]
                            tval.append(av)
                            if not m2.actor_with_inspection_details.objects.filter(einspno_id=inspectionId,actorId_id=actorId,value=av).exists():

                                lst121 = list(actor_details.objects.filter(actorId=actorId).values())
                                viewName = lst121[0]['viewName']
                                ViewFilter = lst121[0]['viewFilter'] 
                                viewColumn = lst121[0]['viewColumn'].split(',')
                                cursor = connection.cursor()
                                viewData=[]
                                avVal = (av.split('-')[0]).strip()
                                print(viewName, ViewFilter, avVal)
                                qry = ''' select * from "%s" where "%s" = '%s';''' % (viewName, ViewFilter, avVal)
                                cursor.execute(qry)
                                viewData.extend(cursor.fetchall())
                                cursor.close()
                                dictData={}
                                for icol in range(len(viewColumn)):
                                    dictData[viewColumn[icol]] = viewData[0][icol]

                                m2.actor_with_inspection_details.objects.create(einspno_id=inspectionId,actorId_id=actorId,value=av,details = dictData)
                        
                    m2.actor_with_inspection_details.objects.filter(~Q(value__in=tval),einspno=inspectionId,actorId=actorId).delete()

                count = 0
                totalQidUsed = []
                for adata in ajaxdata:
                    a = adata.split('@#@')
                    comploc = a[6]
                    question_id = a[1]
                    count += 1
                    radioval = None
                    tickId = 'tick@'+a[7]+'@'+str(count)
                    tickVal = request.POST.get(tickId)
                    if tickVal !=None:
                        obj2=m2.questionare_master.objects.filter(qid = question_id)[0]
                        if a[0] == '1':
                            dataid = 'userinput' + str(count)
                            datavalue = request.POST.get(dataid)

                            if datavalue == '' or datavalue == None:
                                continue
                            else:
                                departmentId = 'department1' + str(count)
                                officer = 'officer11' + str(count)
                                remarks = 'remarks' + str(count)
                                

                                departmentId = request.POST.get(departmentId)
                                officer = request.POST.get(officer)
                                remarks = request.POST.get(remarks)
                                if comploc == 'None':
                                    location = None
                                else:
                                    if comploc == 'Pole Location' or comploc == 'Number':
                                        idloc = 'location1' + str(count)
                                        location = request.POST.getlist(idloc)
                                        loc=''
                                        for l in range(len(location)):
                                            if l!=0:
                                                loc = loc+';'
                                            loc = loc + location[l]
                                        location = loc
                                    elif comploc == 'Coach Number':
                                        idloc = 'location1' + str(count)
                                        location = request.POST.get(idloc)
                                    elif comploc == 'Direction':
                                        idloc = 'location' + str(count)
                                        location = request.POST.get(idloc)
                                    
                        elif a[0] == '2':
                            dataid = 'roption' + str(count)
                            datavalue = request.POST.get(dataid)
                            if datavalue == '' or datavalue == None:
                                continue
                            else:
                                if m2.radio_options.objects.filter(rlabel=datavalue,rid=obj2.roption1.rid).exists():
                                    radioval = obj2.roption1.rid
                                elif m2.radio_options.objects.filter(rlabel=datavalue,rid=obj2.roption2.rid).exists():
                                    radioval = obj2.roption2.rid
                                else:
                                    radioval = None
                                departmentId = 'department1' + str(count)
                                officer = 'officer11' + str(count)
                                remarks = 'remarks' + str(count)
                                

                                departmentId = request.POST.get(departmentId)
                                officer = request.POST.get(officer)
                                remarks = request.POST.get(remarks)
                                if comploc == 'None':
                                    location = None
                                else:
                                    if comploc == 'Pole Location' or comploc == 'Number':
                                        idloc = 'location1' + str(count)
                                        location = request.POST.getlist(idloc)
                                        loc=''
                                        for l in range(len(location)):
                                            if l!=0:
                                                loc = loc+';'
                                            loc = loc + location[l]
                                        location = loc
                                    elif comploc == 'Coach Number':
                                        idloc = 'location1' + str(count)
                                        location = request.POST.get(idloc)
                                    elif comploc == 'Direction':
                                        idloc = 'location' + str(count)
                                        location = request.POST.get(idloc)
                        elif a[0] == '3':
                            dataid = 'doption' + str(count)
                            datavalue = request.POST.get(dataid)
                            if datavalue == '' or datavalue == None:
                                continue
                            else:
                                departmentId = 'department1' + str(count)
                                officer = 'officer11' + str(count)
                                remarks = 'remarks' + str(count)
                                

                                departmentId = request.POST.get(departmentId)
                                officer = request.POST.get(officer)
                                remarks = request.POST.get(remarks)
                                if comploc == 'None':
                                    location = None
                                else:
                                    if comploc == 'Pole Location' or comploc == 'Number':
                                        idloc = 'location1' + str(count)
                                        location = request.POST.getlist(idloc)
                                        loc=''
                                        for l in range(len(location)):
                                            if l!=0:
                                                loc = loc+';'
                                            loc = loc + location[l]
                                        location = loc
                                    elif comploc == 'Coach Number':
                                        idloc = 'location1' + str(count)
                                        location = request.POST.get(idloc)
                                    elif comploc == 'Direction':
                                        idloc = 'location' + str(count)
                                        location = request.POST.get(idloc)
                        elif a[0] == '4':
                            dataid = 'date' + str(count)
                            datavalue = request.POST.get(dataid)
                            if datavalue == '' or datavalue == None:
                                continue
                            else:
                                departmentId = 'department1' + str(count)
                                officer = 'officer11' + str(count)
                                remarks = 'remarks' + str(count)
                                

                                departmentId = request.POST.get(departmentId)
                                officer = request.POST.get(officer)
                                remarks = request.POST.get(remarks)
                                if comploc == 'None':
                                    location = None
                                else:
                                    if comploc == 'Pole Location' or comploc == 'Number':
                                        idloc = 'location1' + str(count)
                                        location = request.POST.getlist(idloc)
                                        loc=''
                                        for l in range(len(location)):
                                            if l!=0:
                                                loc = loc+';'
                                            loc = loc + location[l]
                                        location = loc
                                    elif comploc == 'Coach Number':
                                        idloc = 'location1' + str(count)
                                        location = request.POST.get(idloc)
                                    elif comploc == 'Direction':
                                        idloc = 'location' + str(count)
                                        location = request.POST.get(idloc)
                        elif a[0] == '5':
                            dataid = 'time' + str(count)
                            datavalue = request.POST.get(dataid)
                            if datavalue == '' or datavalue == None:
                                continue
                            else:
                                departmentId = 'department1' + str(count)
                                officer = 'officer11' + str(count)
                                remarks = 'remarks' + str(count)
                                

                                departmentId = request.POST.get(departmentId)
                                officer = request.POST.get(officer)
                                remarks = request.POST.get(remarks)
                                if comploc == 'None':
                                    location = None
                                else:
                                    if comploc == 'Pole Location' or comploc == 'Number':
                                        idloc = 'location1' + str(count)
                                        location = request.POST.getlist(idloc)
                                        loc=''
                                        for l in range(len(location)):
                                            if l!=0:
                                                loc = loc+';'
                                            loc = loc + location[l]
                                        location = loc
                                    elif comploc == 'Coach Number':
                                        idloc = 'location1' + str(count)
                                        location = request.POST.get(idloc)
                                    elif comploc == 'Direction':
                                        idloc = 'location' + str(count)
                                        location = request.POST.get(idloc)
                        elif a[0] == '6':
                            dataid = 'file' + str(count)
                            
                            try:
                                if len(request.FILES) != 0:
                                    supdoc = request.FILES[dataid]
                                    folder='media/images11/'
                                    fs=FileSystemStorage(location=folder)  
                                    files=fs.save(supdoc.name,supdoc)      
                                    datavalue = fs.url(files)
                                    datavalue = str(datavalue).split('media/')
                                    datavalue = 'images11/'+datavalue[1]
                                else:
                                    datavalue = None
                            except: 
                                datavalue = None
                            
                            
                            if datavalue == '' or datavalue == None:
                                continue
                            else:
                                departmentId = 'department1' + str(count)
                                officer = 'officer11' + str(count)
                                remarks = 'remarks' + str(count)
                                
                                departmentId = request.POST.get(departmentId)
                                officer = request.POST.get(officer)
                                remarks = request.POST.get(remarks)
                                if comploc == 'None':
                                    location = None
                                else:
                                    if comploc == 'Pole Location' or comploc == 'Number':
                                        idloc = 'location1' + str(count)
                                        location = request.POST.getlist(idloc)
                                        loc=''
                                        for l in range(len(location)):
                                            if l!=0:
                                                loc = loc+';'
                                            loc = loc + location[l]
                                        location = loc
                                    elif comploc == 'Coach Number':
                                        idloc = 'location1' + str(count)
                                        location = request.POST.get(idloc)
                                    elif comploc == 'Direction':
                                        idloc = 'location' + str(count)
                                        location = request.POST.get(idloc)
                        elif a[0] == '9':
                            
                            dataid = 'checkbox#' + str(a[1])
                            datavalue = request.POST.getlist(dataid)
                            
                            if len(datavalue) == 0:
                                continue
                            else:
                                str1 =''
                                for iii in range(len(datavalue)):
                                    if iii != 0:
                                        str1 = str1 + '$'
                                    str1 = str1 + datavalue[iii]
                                datavalue = str1
                                departmentId = 'department1' + str(count)
                                officer = 'officer11' + str(count)
                                remarks = 'remarks' + str(count)
                                departmentId = request.POST.get(departmentId)
                                officer = request.POST.get(officer)
                                remarks = request.POST.get(remarks)
                                if comploc == 'None':
                                    location = None
                                else:
                                    if comploc == 'Pole Location' or comploc == 'Number':
                                        idloc = 'location1' + str(count)
                                        location = request.POST.getlist(idloc)
                                        loc=''
                                        for l in range(len(location)):
                                            if l!=0:
                                                loc = loc+';'
                                            loc = loc + location[l]
                                        location = loc


                                    elif comploc == 'Coach Number':
                                        idloc = 'location1' + str(count)
                                        location = request.POST.get(idloc)
                                    elif comploc == 'Direction':
                                        idloc = 'location' + str(count)
                                        location = request.POST.get(idloc)
                        elif a[0] == '10':
                            
                            dataid = 'checkbox' + str(a[1])
                            datavalue = request.POST.getlist(dataid)
                            
                            if len(datavalue) == 0:
                                continue
                            else:
                                str1 =''
                                for iii in range(len(datavalue)):
                                    if iii != 0:
                                        str1 = str1 + '$'
                                    str1 = str1 + datavalue[iii]
                                datavalue = str1
                                departmentId = 'department1' + str(count)
                                officer = 'officer11' + str(count)
                                remarks = 'remarks' + str(count)
                                departmentId = request.POST.get(departmentId)
                                officer = request.POST.get(officer)
                                remarks = request.POST.get(remarks)
                                if comploc == 'None':
                                    location = None
                                else:
                                    if comploc == 'Pole Location' or comploc == 'Number':
                                        idloc = 'location1' + str(count)
                                        location = request.POST.getlist(idloc)
                                        loc=''
                                        for l in range(len(location)):
                                            if l!=0:
                                                loc = loc+';'
                                            loc = loc + location[l]
                                        location = loc


                                    elif comploc == 'Coach Number':
                                        idloc = 'location1' + str(count)
                                        location = request.POST.get(idloc)
                                    elif comploc == 'Direction':
                                        idloc = 'location' + str(count)
                                        location = request.POST.get(idloc)
                        
                        else:
                            dataid = 'userinput' + str(count)
                            datavalue = request.POST.get(dataid)
                            if datavalue == '' or datavalue == None:
                                continue
                            else:
                                departmentId = 'department1' + str(count)
                                officer = 'officer11' + str(count)
                                remarks = 'remarks' + str(count)
                                departmentId = request.POST.get(departmentId)
                                officer = request.POST.get(officer)
                                remarks = request.POST.get(remarks)
                                if comploc == 'None':
                                    location = None
                                else:
                                    if comploc == 'Pole Location' or comploc == 'Number':
                                        idloc = 'location1' + str(count)
                                        location = request.POST.getlist(idloc)
                                        loc=''
                                        for l in range(len(location)):
                                            if l!=0:
                                                loc = loc+';'
                                            loc = loc + location[l]
                                        location = loc


                                    elif comploc == 'Coach Number':
                                        idloc = 'location1' + str(count)
                                        location = request.POST.get(idloc)
                                    elif comploc == 'Direction':
                                        idloc = 'location' + str(count)
                                        location = request.POST.get(idloc)
                                
                        totalQidUsed.append(int(question_id))
                        if not m2.einspection_item_detail.objects.filter(einspno = inspectionId).exists():
                            item = m2.einspection_item_detail.objects.create(status=0,einspno_id=inspectionId,qid_id=question_id,value=datavalue,qncat=obj2.instypeid_id,
                                qtype='e-Inspection',created_by=loginUser.empno.empno,lastmodified_by=loginUser.empno.empno,
                                created_on=systemDateTime,lastmodified_on=systemDateTime,location=location,remarks=remarks,value_id_id=radioval)
                            try:
                                mark = Level_Desig.objects.filter(designation_code = officer)[0]
                                m2.einsp_marked.objects.create(designation_by=designations[0]['designation'],eitemid=item,marked_to=mark,marked_emp_id=mark.empno_id,status_flag=1,department_id=departmentId,
                                                            designation = mark.designation,
                                                    created_by=loginUser.empno.empno,lastmodified_by=loginUser.empno.empno,
                                                    created_on=systemDateTime,lastmodified_on=systemDateTime)
                            except:
                                    pass
                        else:
                            if m2.einspection_item_detail.objects.filter(einspno = inspectionId,qid=question_id).exists():
                                item = m2.einspection_item_detail.objects.filter(einspno = inspectionId,qid=question_id).update(status=0,value=datavalue,qncat=obj2.instypeid_id,
                                qtype='e-Inspection',lastmodified_by=loginUser.empno.empno,
                                lastmodified_on=systemDateTime,location=location,remarks=remarks,value_id_id=radioval)
                                try:
                                    mark = Level_Desig.objects.filter(designation_code = officer)[0]
                                    
                                    item = m2.einspection_item_detail.objects.filter(einspno = inspectionId,qid=question_id)[0]
                                    
                                    m2.einsp_marked.objects.filter(eitemid = item.eitemid).update(designation_by=designations[0]['designation'],marked_to=mark,marked_emp_id=mark.empno_id,status_flag=1,department_id=departmentId,designation = mark.designation,lastmodified_by=loginUser.empno.empno,lastmodified_on=systemDateTime)
                                except:
                                    pass
                            else:
                                item = m2.einspection_item_detail.objects.create(status=0,einspno_id=inspectionId,qid_id=question_id,value=datavalue,qncat=obj2.instypeid_id,
                                    qtype='e-Inspection',created_by=loginUser.empno.empno,lastmodified_by=loginUser.empno.empno,
                                    created_on=systemDateTime,lastmodified_on=systemDateTime,location=location,remarks=remarks,value_id_id=radioval)
                                try:
                                    mark = Level_Desig.objects.filter(designation_code = officer)[0]
                                    m2.einsp_marked.objects.create(designation_by=designations[0]['designation'],eitemid=item,marked_to=mark,marked_emp_id=mark.empno_id,status_flag=1,department_id=departmentId,
                                                                designation = mark.designation,
                                                    created_by=loginUser.empno.empno,lastmodified_by=loginUser.empno.empno,
                                                    created_on=systemDateTime,lastmodified_on=systemDateTime)
                                except:
                                    pass
                
                m2.einsp_marked.objects.filter(Q(eitemid__in=m2.einspection_item_detail.objects.filter(einspno=inspectionId).values('eitemid'))).update(status_flag=1)
                m2.einsp_marked.objects.filter(Q(eitemid__in=m2.einspection_item_detail.objects.exclude(qid__in=totalQidUsed).filter(einspno=inspectionId).values('eitemid'))).delete()
                m2.einspection_item_detail.objects.filter(einspno=inspectionId).update(status=1)
                m2.einspection_item_detail.objects.exclude(qid__in=totalQidUsed).filter(einspno=inspectionId).delete()
                return redirect('inspection_doneby_list')
        
        
        inspType= 'Create'
        einspDetails=[]
        allData =[]
          
        actorPresent = []
        edit_copy_to = []
        editrailway = []
        editdivision = []
        editsection = []
        desigAll=[]
        editcoaches=[]
        edit_train_details = [{'startdate':'','item':''}]
        if inspectionId != '':
            if m2.einspection_details.objects.filter(status=0,einspno = inspectionId).exists():
                inspType= 'Edit'
                einspDetails = list(m2.einspection_details.objects.filter(einspno = inspectionId).values('masterTableFlag','is_scheduled','section_id','start_date','end_date','start_time','end_time','rly_id_id','div_id_id','ratings','abnormal','documents','commanDepartment','finalizeStart','finalizeEnd','inspection_type','entityid','commanDesignation'))
                start_date = einspDetails[0]['start_date'].strftime('%d-%m-%Y')
                dateNo = start_date
                start_time = str(einspDetails[0]['start_time'])[:5]
                masterTableStatus = einspDetails[0]['masterTableFlag']
                if einspDetails[0]['end_date'] != None:
                    end_date = einspDetails[0]['end_date'].strftime('%d-%m-%Y')
                else:
                    end_date =''
                if einspDetails[0]['end_time'] != None:
                    end_time = str(einspDetails[0]['end_time'])[:5]
                else:
                    end_time =''
                einspDetails[0].update({'start_date':start_date,'end_date':end_date,'start_time':start_time,'end_time':end_time})
                allData =[] 

                editrailway = list(m2.einsp_multi_location.objects.filter(einspno = inspectionId,type='HQ').values_list('item', flat = True))
                newdivision = list(railwayLocationMaster.objects.filter(parent_location_code__in=railwayLocationMaster.objects.filter(rly_unit_code__in=editrailway).values('location_code'),location_type='DIV').values())
                editdivision = list(m2.einsp_multi_location.objects.filter(einspno = inspectionId,type='DIV').values_list('item', flat = True))
                defaultSection = list(section_master.objects.filter(div_id_id_id__in=editdivision,delete_flag=False).values().order_by('section_code'))
                editsection = list(m2.einsp_multi_location.objects.filter(einspno = inspectionId,type='SEC').values_list('item', flat = True))
                
                editcoaches = list(m2.einspection_coach_details.objects.filter(einspno = inspectionId,type='COACH').values_list('item', flat = True))
                edit_train_details = list(m2.einspection_coach_details.objects.filter(einspno = inspectionId,type='TRAIN').values())
                if len(edit_train_details):
                    if edit_train_details[0]['startdate'] != None:
                        # print(type(edit_train_details[0]['startdate']),edit_train_details[0]['startdate'])
                        startdate11= edit_train_details[0]['startdate'].strftime('%d/%m/%Y')
                        edit_train_details[0].update({'startdate':startdate11})
                else:
                    edit_train_details = [{'startdate':'','item':''}]
                for adata in ajaxdata:
                    a = adata.split('@#@')
                    comploc = a[6]
                    question_id = a[1]
                    itemData = list(m2.einspection_item_detail.objects.filter(einspno = inspectionId,qid=question_id).values('value','remarks','location','eitemid'))
                    
                    if len(itemData)>0:
                        mrkData = list(m2.einsp_marked.objects.filter(eitemid = itemData[0]['eitemid']).values('department','marked_to','department__department_name'))
                        if len(mrkData)>0:
                            department = mrkData[0]['department']
                            marked_to = mrkData[0]['marked_to']
                            departmentName = mrkData[0]['department__department_name']
                        else:
                            department = ''
                            marked_to = ''
                            departmentName = ''
                        officer_list = ''
                        
                        if department != '':
                            userDiv=railwayLocationMaster.objects.filter(rly_unit_code__in=editdivision).values('parent_location_code')
       
                            designations = list(Level_Desig.objects.filter(Q(official_email_ID=request.user) | Q(official_email_ID=request.user.email)).values("designation"))
                            if len(designations) > 0:
                                officer_list=list(Level_Desig.objects.exclude(designation = designations[0]['designation']).filter(rly_unit__parent_location_code__in=userDiv,department_code__department_code=department).values('designation_code','designation'))
                            else:
                                officer_list=list(Level_Desig.objects.filter(rly_unit__parent_location_code__in=userDiv,department_code__department_code=department).values('designation_code','designation'))
                            
                            #list(Level_Desig.objects.filter(rly_unit__parent_location_code=userDiv.parent_location_code,department_code__department_code=department).values())
                            #officer_list = list(Level_Desig.objects.filter(rly_unit__parent_location_code__in=userDiv,department_code__department_code=department).values('designation_code','designation'))
                        
                        dataValueEnc = ''
                        remarksEnc = ''
                        if itemData[0]['value'] != None:
                            dataValueEnc = encryptWithAesEinspect(itemData[0]['value'])
                        if itemData[0]['remarks'] != None:
                            remarksEnc = encryptWithAesEinspect(itemData[0]['remarks'])
                        lst = {'chk':'Y','qid':question_id,'datavalue':dataValueEnc,'departmentId':department,'departmentName':departmentName,'officer_list':officer_list,'officer':marked_to,'remarks':remarksEnc,'location':itemData[0]['location'],'loc_type':comploc}

                        
                    else:
                        lst = {'chk':'N'}
                    
                    allData.append(lst)
                commanDept = einspDetails[0]['commanDepartment']
                if commanDept == '' or commanDept == None:
                    pass
                else:
                    commanDept = commanDept.split(';')
                    departmentsAll=list(departMast.objects.filter(delete_flag=False,department_code__in=commanDept).values().order_by('department_name'))
                #  actorId,value,einspno
                commanDesig = einspDetails[0]['commanDesignation']
                if commanDesig == '' or commanDesig == None:
                    pass
                else:
                    commanDesig = commanDesig.split(';')
                    desigAll=list(Level_Desig.objects.filter(delete_flag=False,designation_code__in=commanDesig).values('designation_code','designation').order_by('designation'))
                for i in range(len(actorDetailsData)):
                    actdetails = list(m2.actor_with_inspection_details.objects.filter(einspno=inspectionId,actorId=actorDetailsData[i]['actorId']).values_list('value',flat=True))
                    if len(actdetails)>0:
                        actorPresent.append({'actor':actorDetailsData[i]['actor'],'data':actdetails})

                edit_copy_to = list(mm6.copyto_mails.objects.filter(doc_id=inspectionId, area_flag=0, doc_table='e').values_list('receiver_id',flat=True))

            elif edittypeData == 'new':
                inspType= 'Edit'
                einspDetails = list(m2.einspection_details.objects.filter(einspno = inspectionId).values('masterTableFlag','is_scheduled','section_id','start_date','end_date','start_time','end_time','rly_id_id','div_id_id','ratings','abnormal','documents','commanDepartment','finalizeStart','finalizeEnd','inspection_type','entityid','commanDesignation'))
                start_date = einspDetails[0]['start_date'].strftime('%d-%m-%Y')
                dateNo = start_date
                start_time = str(einspDetails[0]['start_time'])[:5]
                masterTableStatus = einspDetails[0]['masterTableFlag']
                if einspDetails[0]['end_date'] != None:
                    end_date = einspDetails[0]['end_date'].strftime('%d-%m-%Y')
                else:
                    end_date =''
                if einspDetails[0]['end_time'] != None:
                    end_time = str(einspDetails[0]['end_time'])[:5]
                else:
                    end_time =''
                einspDetails[0].update({'start_date':start_date,'end_date':end_date,'start_time':start_time,'end_time':end_time})
                allData =[] 

                editrailway = list(m2.einsp_multi_location.objects.filter(einspno = inspectionId,type='HQ').values_list('item', flat = True))
                newdivision = list(railwayLocationMaster.objects.filter(parent_location_code__in=railwayLocationMaster.objects.filter(rly_unit_code__in=editrailway).values('location_code'),location_type='DIV').values())
                editdivision = list(m2.einsp_multi_location.objects.filter(einspno = inspectionId,type='DIV').values_list('item', flat = True))
                defaultSection = list(section_master.objects.filter(div_id_id_id__in=editdivision,delete_flag=False).values().order_by('section_code'))
                editsection = list(m2.einsp_multi_location.objects.filter(einspno = inspectionId,type='SEC').values_list('item', flat = True))
                editcoaches = list(m2.einspection_coach_details.objects.filter(einspno = inspectionId,type='COACH').values_list('item', flat = True))
                edit_train_details = list(m2.einspection_coach_details.objects.filter(einspno = inspectionId,type='TRAIN').values())
                if len(edit_train_details):
                    if edit_train_details[0]['startdate'] != None:
                        # print(type(edit_train_details[0]['startdate']),edit_train_details[0]['startdate'])
                        startdate11= edit_train_details[0]['startdate'].strftime('%d/%m/%Y')
                        edit_train_details[0].update({'startdate':startdate11})
                else:
                    edit_train_details = [{'startdate':'','item':''}]
                for adata in ajaxdata:
                    a = adata.split('@#@')
                    comploc = a[6]
                    question_id = a[1]
                    itemData = list(m2.einspection_item_detail.objects.filter(einspno = inspectionId,qid=question_id).values('value','remarks','location','eitemid'))
                    
                    if len(itemData)>0:
                        mrkData = list(m2.einsp_marked.objects.filter(eitemid = itemData[0]['eitemid']).values('department','marked_to','department__department_name'))
                        if len(mrkData)>0:
                            department = mrkData[0]['department']
                            marked_to = mrkData[0]['marked_to']
                            departmentName = mrkData[0]['department__department_name']
                        else:
                            department = ''
                            marked_to = ''
                            departmentName = ''
                        officer_list = ''
                        
                        if department != '':
                            userDiv=railwayLocationMaster.objects.filter(rly_unit_code__in=editdivision).values('parent_location_code')
       
                            designations = list(Level_Desig.objects.filter(Q(official_email_ID=request.user) | Q(official_email_ID=request.user.email)).values("designation"))
                            if len(designations) > 0:
                                officer_list=list(Level_Desig.objects.exclude(designation = designations[0]['designation']).filter(rly_unit__parent_location_code__in=userDiv,department_code__department_code=department).values('designation_code','designation'))
                            else:
                                officer_list=list(Level_Desig.objects.filter(rly_unit__parent_location_code__in=userDiv,department_code__department_code=department).values('designation_code','designation'))
                            
                            #list(Level_Desig.objects.filter(rly_unit__parent_location_code=userDiv.parent_location_code,department_code__department_code=department).values())
                            #officer_list = list(Level_Desig.objects.filter(rly_unit__parent_location_code__in=userDiv,department_code__department_code=department).values('designation_code','designation'))
                        
                        dataValueEnc = ''
                        remarksEnc = ''
                        if itemData[0]['value'] != None:
                            dataValueEnc = encryptWithAesEinspect(itemData[0]['value'])
                        if itemData[0]['remarks'] != None:
                            remarksEnc = encryptWithAesEinspect(itemData[0]['remarks'])
                        lst = {'chk':'Y','qid':question_id,'datavalue':dataValueEnc,'departmentId':department,'departmentName':departmentName,'officer_list':officer_list,'officer':marked_to,'remarks':remarksEnc,'location':itemData[0]['location'],'loc_type':comploc}

                        
                    else:
                        lst = {'chk':'N'}
                    
                    allData.append(lst)
                commanDept = einspDetails[0]['commanDepartment']
                if commanDept == '' or commanDept == None:
                    pass
                else:
                    commanDept = commanDept.split(';')
                    departmentsAll=list(departMast.objects.filter(delete_flag=False,department_code__in=commanDept).values().order_by('department_name'))
                
                commanDesig = einspDetails[0]['commanDesignation']
                if commanDesig == '' or commanDesig == None:
                    pass
                else:
                    commanDesig = commanDesig.split(';')
                    desigAll=list(Level_Desig.objects.filter(delete_flag=False,designation_code__in=commanDesig).values('designation_code','designation').order_by('designation'))
                #  actorId,value,einspno
                
                for i in range(len(actorDetailsData)):
                    actdetails = list(m2.actor_with_inspection_details.objects.filter(einspno=inspectionId,actorId=actorDetailsData[i]['actorId']).values_list('value',flat=True))
                    if len(actdetails)>0:
                        actorPresent.append({'actor':actorDetailsData[i]['actor'],'data':actdetails})

                edit_copy_to = list(mm6.copyto_mails.objects.filter(doc_id=inspectionId, area_flag=0, doc_table='e').values_list('receiver_id',flat=True))

                inspectionId = ''
            else:
                messages.error(request,'Already Finalized, Cannot be Edited')
                return redirect('showMenuEdit')

        # coach_numbers = list(coach_master.objects.filter().values_list('coach_no',flat=True))
        print(edit_train_details,'edit_train_details')
        context={
           'editrailway':json.dumps(editrailway),
           'editdivision':json.dumps(editdivision),
           'editsection':json.dumps(editsection),
            'actorPresent':json.dumps(actorPresent),
            'actorDetailsData':actorDetailsData,
            'inspType':inspType,
            'einspDetails':json.dumps(einspDetails),
            'allData':json.dumps(allData),
            'ajaxdata':json.dumps(ajaxdata),
            'insp_sideMenu':json.dumps(insp_sideMenu),
            'menu': name2,
            'name':name,
            'questform': ques,
            'queslen':queslen,
            'cardId':cardId,
            'id':id,
            'choicetype':choicetype,
            'designations':designations,
            'designations1':designations[0]['designation'],
            'station':station,
            'userRailways':userRailways,
            'userDivision':userDivision,
            'railwayZone':railwayZone,
            'divisionParent':divisionParent,
            'newdivision':newdivision,
            'sideMenu':sidemenu,
            'departmentsAll':departmentsAll,
            'desigAll':desigAll,
            'sidebarLength':sidemenuLength,
            'defaultStation':defaultStation,
            'defaultSection':defaultSection,
            'editcoaches':editcoaches,
            'edit_train_details':edit_train_details[0],
            'dateNo':dateNo,
            'questions':questions,
            'defaultEntity':defaultEntity,
            'dateNo2':dateNo2,
            'subCategoryAll':subCategoryAll,
            'startTime':startTime,
            'inspectionId':inspectionId,
            'departmentsAllComman':departmentsAllComman,
            'defaultEntityLength':len(defaultEntity),
            'masterTableStatus':masterTableStatus,
            'other_entity_data':other_entity_data,
            'other_entity_len':other_entity_len,
            'copyTo_all':copyTo_all,
            'edit_copy_to':json.dumps(edit_copy_to),
            # 'coach_numbers':coach_numbers
        }
        return render(request, 'eInspectionUserForm.html', context)
    else:
        return HttpResponseRedirect('/login') 



def changeEntityData(request):
    if request.method == 'GET':
        entity = request.GET.get('entity')
        
        try:
            divisionParent = json.loads(request.GET.get('rly'))
        except:
            divisionParent = []
        try:
            userDivision = json.loads(request.GET.get('division'))
        except:
            userDivision = []
        # userDivision = request.GET.get('division')
        # divisionParent = request.GET.get('rly')
        defaultEntity=[]
        
        doption=list(m2.dropdown_options.objects.filter(dmaster=entity).values('dmaster','table_name','column_name','filterName','filterValue'))
        if len(doption)!=0:
            try:
                rlyNewValue = []
                divNewValue = []
                if len(divisionParent) != 0:
                    rlyNewValue = list(railwayLocationMaster.objects.filter(rly_unit_code__in=divisionParent).values())

                if len(userDivision) != 0:
                    divNewValue = list(railwayLocationMaster.objects.filter(rly_unit_code__in=userDivision).values())
                if len(userDivision) == 0:
                    divNewValue = list(railwayLocationMaster.objects.filter(parent_rly_unit_code__in=divisionParent).values())


               
                
                rlyNextId = [i['rly_unit_code'] for i in rlyNewValue]
                rlyNextVal = [i['location_code'] for i in rlyNewValue]
                divNextId = [i['rly_unit_code'] for i in divNewValue]
                divNextVal = [i['location_code'] for i in divNewValue]
            except:
                rlyNextId = []
                rlyNextVal = []
                divNextId = []
                divNextVal = []
            
            table_name = doption[0]['table_name']
            column_name = ''
            col_name = doption[0]['column_name'].split(',')
            col_len = len(col_name)
            class_name = globals()[doption[0]['table_name']]

            filterValue = doption[0]['filterValue']
            filterValueList = []
            if filterValue != None:
                if filterValue == 'Division Id':
                    filterValueList = divNextId
                elif filterValue == 'Division Value':
                    filterValueList = divNextVal
                elif filterValue == 'Railway Id':
                    filterValueList = rlyNextId
                elif filterValue == 'Railway Value':
                    filterValueList = rlyNextVal
                elif  filterValue ==  'Division Value':
                    filterValueList = divNextVal
            filterName = doption[0]['filterName']
            if filterName != None:
                if filterName != 'passing_division':
                    kargs = {f'{filterName}__in':filterValueList}
                    result1=list(class_name.objects.filter(**kargs).values()) 
                else:

                    
                    result1 = []
                    for i in filterValueList:
                        kargs = {f'{filterName}__icontains':i}
                        result1 += list(class_name.objects.filter(**kargs).values())

                    
                
            else:
                result1=list(class_name.objects.values()) 

            data = []
            if len(result1)!=0:
                for ii in range(len(result1)):
                    res = {}
                    for ijk in range(len(col_name)):
                        if col_len >= 2:
                            if result1[ii][col_name[ijk]] is not None:
                                if ijk == 0:
                                    res.update({'id':result1[ii][col_name[ijk]]})
                                elif ijk == 1:
                                    res.update({'desc':result1[ii][col_name[ijk]]})
                                else:
                                    break
                            else:
                                res.update({'id':result1[ii][col_name[ijk]],'desc':result1[ii][col_name[ijk]]})
                                
                    defaultEntity.append(res)
        
        return JsonResponse(defaultEntity,safe=False)
    return JsonResponse({'success':False})

def getConcernedOfficer(request):
    cuser=request.user
    if request.user.user_role == 'guest':
        cuser=request.user.guest_email

    rly_code=Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].rly_unit.location_code
    rly_unit_code=Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].rly_unit.rly_unit_code
    parent_loc=Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].rly_unit.parent_location_code
    parent_loc_id=Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].rly_unit.parent_rly_unit_code
    div_code=rly_code
    div_unit_code=rly_unit_code
    if parent_loc!='RB':
        div_code=rly_code
        rly_code=parent_loc
        div_unit_code=parent_loc_id
    if request.method == "GET":
        division = json.loads(request.GET.get('division'))
        zone = json.loads(request.GET.get('zone'))
        if zone is None:
            zone = [].append(str(rly_unit_code))
        if division is None:
            division = list(railwayLocationMaster.objects.filter(parent_rly_unit_code__in=zone))
        type_of_call = request.GET.get('type_of_call')
        if type_of_call == 'commanDesignation':
            department = json.loads(request.GET.get('commanDepartment'))
            last_val = request.GET.get('last_val')
            # print(department)
            if last_val is None or last_val == '':
                result=list(Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter((Q(hq_id__in=zone)|Q(div_id__in=division)),department_code__in=department).values('designation_code','designation').distinct().order_by('designation'))
            else:
                result=list(Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter((Q(hq_id__in=zone)|Q(div_id__in=division)),department_code__in=department,designation__istartswith=last_val).values('designation_code','designation').distinct().order_by('designation'))

        else:
            department = request.GET.get('department')
            result = list(Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter((Q(hq_id__in=zone)|Q(div_id__in=division)),department_code=department).values('designation_code','designation'))

        
        return JsonResponse(result,safe=False)
    return JsonResponse({"success":False},status=400)



def getAllDepartment(request):
    if request.method == 'GET':
        result = list(departMast.objects.filter(delete_flag=False).values().order_by('department_name'))
        return JsonResponse(result,safe=False)
    return JsonResponse({'success':False})


def showMenuEdit(request):
    empnox = Level_Desig.objects.filter(Q(official_email_ID=request.user) | Q(official_email_ID=request.user.email))
    desigId = ''
    empno = ''
    if empnox:
        empno = empnox[0].empno_id
        desig = empnox[0].designation
        desigId = empnox[0].designation_code
    data = m2.einspection_details.objects.filter(status=0,created_by=empno,instypeid__isnull=False).all().order_by('-einspno')
    context = {
        'data':data,
    }
    return render(request, 'eInspectionUserFormEdit.html', context)

def showMenuFinal(request):
    empnox = Level_Desig.objects.filter(Q(official_email_ID=request.user) | Q(official_email_ID=request.user.email))
    desigId = ''
    empno = ''
    if empnox:
        empno = empnox[0].empno_id
        desig = empnox[0].designation
        desigId = empnox[0].designation_code
    data = m2.einspection_details.objects.filter(~Q(status=0),created_by=empno,instypeid__isnull=False).all().order_by('-einspno')
    pending = m2.einspection_details.objects.filter(status=1,created_by=empno,instypeid__isnull=False).all().order_by('-einspno')
    closed = m2.einspection_details.objects.filter(status=4,created_by=empno,instypeid__isnull=False).all().order_by('-einspno')
    if request.method == 'POST' and request.is_ajax():
        data_type = request.POST.get('data_type')
        if data_type == 'PendingDetails':
            einspno = request.POST.get('einspno')
            inspectionData = list(m2.einspection_details.objects.filter(einspno = einspno).values('instypeid_id','rly_id_id__location_code','div_id_id__location_code','inspected_on','entitydetails','inspection_note_no','inspection_title'))
            
            
            inspid = inspectionData[0]['instypeid_id']
            question = {}
            category = list(inspectiontype_master.objects.filter(parent_id=inspid,instypeid__in=m2.einspection_item_detail.objects.filter(einspno=einspno).values('qncat')).values('name','instypeid'))
            inspectionDetails = []
            for j in range(len(category)):
                categoryData = []
                chk = 0
                qu = list(m2.questionare_master.objects.filter(instypeid_id_id=category[j]['instypeid'], qid__in = m2.einspection_item_detail.objects.filter(einspno=einspno).values('qid')).values('activity','qid','choicetype').order_by('qid'))
                for i in range(len(qu)):
                    answer = list(m2.einspection_item_detail.objects.filter(einspno_id=einspno,qid_id=qu[i]['qid']).values('value','eitemid'))
                    ans = ''
                    ctype = qu[i]['choicetype']
                    if len(answer)>0:
                        ans = answer[0]['value']
                        item = answer[0]['eitemid']
                        dept = ''
                        desig = ''
                        status = ''
                        det =  list(m2.einsp_marked.objects.filter(eitemid = item).values('department_id__department_name','designation','status_flag'))                           
                        if len(det) > 0:
                            dept = det[0]['department_id__department_name']
                            desig = det[0]['designation']
                            status = det[0]['status_flag']

                    categoryData.append({'ctype':ctype,'obs':qu[i]['activity'],'val':ans,'dept':dept,'desig':desig,'status':status,'chk':chk,'category':category[j]['name']})
                    chk = 1   
                inspectionDetails.append(categoryData)
            context = {
                'inspectionData':inspectionData,
                'inspectionDetails':inspectionDetails,
            }

            return JsonResponse(context,safe=False)
        if data_type == 'ClosedDetails':
            einspno = request.POST.get('einspno')
            inspectionData = list(m2.einspection_details.objects.filter(einspno = einspno).values('instypeid_id','rly_id_id__location_code','div_id_id__location_code','inspected_on','entitydetails','inspection_note_no','inspection_title'))
            
            
            inspid = inspectionData[0]['instypeid_id']
            question = {}
            category = list(inspectiontype_master.objects.filter(parent_id=inspid,instypeid__in=m2.einspection_item_detail.objects.filter(einspno=einspno).values('qncat')).values('name','instypeid'))
            inspectionDetails = []
            for j in range(len(category)):
                categoryData = []
                chk = 0
                qu = list(m2.questionare_master.objects.filter(instypeid_id_id=category[j]['instypeid'], qid__in = m2.einspection_item_detail.objects.filter(einspno=einspno).values('qid')).values('activity','qid','choicetype').order_by('qid'))
                for i in range(len(qu)):
                    answer = list(m2.einspection_item_detail.objects.filter(einspno_id=einspno,qid_id=qu[i]['qid']).values('value','eitemid'))
                    ans = ''
                    ctype = qu[i]['choicetype']
                    if len(answer)>0:
                        ans = answer[0]['value']
                        item = answer[0]['eitemid']
                        dept = ''
                        desig = ''
                        status = ''
                        det =  list(m2.einsp_marked.objects.filter(eitemid = item).values('department_id__department_name','designation','status_flag'))                           
                        if len(det) > 0:
                            dept = det[0]['department_id__department_name']
                            desig = det[0]['designation']
                            status = det[0]['status_flag']

                    categoryData.append({'ctype':ctype,'obs':qu[i]['activity'],'val':ans,'dept':dept,'desig':desig,'status':status,'chk':chk,'category':category[j]['name']})
                    chk = 1   
                inspectionDetails.append(categoryData)
            context = {
                'inspectionData':inspectionData,
                'inspectionDetails':inspectionDetails,
            }

            return JsonResponse(context,safe=False)
       
        return JsonResponse({'success':False},status=400)
    context = {
        'data':data,
        'closed':closed,
        'pending':pending,
    }
    return render(request, 'eInspectionUserFormFinal.html', context)



################################################################### def addQ145(request): ###################################################
def addQ145(request):
    try:
        if request.method == 'POST':
            # print('Saving The Data')
            id=request.POST.get('id')
            railways=request.POST.get('railways')
            division=request.POST.get('division')
            start_date=request.POST.get('start_date')
            start_date=(datetime.strptime(start_date,"%d-%m-%Y")).strftime("%Y-%m-%d")
            start_time=request.POST.get('start_time')
            end_date=request.POST.get('end_date')
            end_date=(datetime.strptime(end_date,"%d-%m-%Y")).strftime("%Y-%m-%d")
            end_time=request.POST.get('end_time')
            detail=request.POST.get('detail')
            is_schedule=request.POST.get('is_scheduled')
            abnormal=request.POST.get('abnormal')
            ratingsEinpection=request.POST.get('ratingsEinpection')
            section=request.POST.get('section')
            inspectionType=request.POST.get('inspectionType')
            # inspection_of=request.POST.get('inspection_of')
            # # print('inspectionType: ',inspectionType)
            # # print('Section: ',section)
            # # print('ID: ',id)
            # # print(ratingsEinpection,' :ratingsEinpection')

            score=0
            if ratingsEinpection:
                pass
            else:
                ratingsEinpection=5
                
            railways=railwayLocationMaster.objects.filter(rly_unit_code=railways)[0]
            division=railwayLocationMaster.objects.filter(rly_unit_code=division)[0]

            try:
                remarks11=request.POST.get('remarks')
                if remarks11=='' or remarks11==None:
                    remarks11=''
                # # print(remarks11,' remarks')
            except:
                remarks11 = ''
            # try:
            #     documents=request.FILES['documents']
            # except:
            #     documents = ''
            email=str(request.user)
            str2=request.POST.getlist('str2[]')
            # print('length: ',len(str2))
            for i in range(len(str2)):
                str2[i]=str2[i].split('@#@')
            max_id=0
            temp=list(m2.einspection_details.objects.filter(delete_flag=False).values())
            if len(temp)!=0:
                max_id = m2.einspection_details.objects.aggregate(Max('einspno'))['einspno__max']
                max_id+=1 
            else:
                max_id=1

            loginUser=Level_Desig.objects.filter(official_email_ID=email)[0]
            department=departMast.objects.filter(department_name=loginUser.department)[0]

            currentDateTime = datetime.now()
            date = currentDateTime.date()
            year=date.strftime("%Y")
            inspection=inspectiontype_master.objects.filter(instypeid=id,delete_flag=False)[0]
            inspection_title=str(inspection.name) + ' Inspection of ' + str(inspection.entity.dmaster) + ' - ' + str(detail) + ' by ' + str(loginUser.designation) + ' on ' + str(date)
            
            inspection_note_no= str(year)+'/'+str(loginUser.designation) + '/' + str(inspection.name) + '/' + str(max_id)

            saving=str(abnormal) + '/' + str(remarks11)
            systemDateTime = datetime.now()
            systemDateTime = systemDateTime.strftime("%Y-%m-%d %H:%M:%S")

            if is_schedule=='Surprise':
                if len(inspectionType.split(' '))==2:
                    obj1=m2.einspection_details.objects.create(status = 0,instypeid=inspection,inspected_on=start_date, start_date=start_date,end_date=end_date,start_time=start_time,end_time=end_time,
                    inspection_title=inspection_title,designation=loginUser,inspection_note_no=inspection_note_no,ratings=ratingsEinpection,abnormal=saving,documents=None,dept=department,
                    rly_id_id=railways,div_id_id=division,entitydetails=inspection.entity.dmaster,entityid=detail,created_by=loginUser.empno.empno,lastmodified_by=loginUser.empno.empno,is_scheduled=False,
                    created_on=systemDateTime,lastmodified_on=systemDateTime,section_id=section,inspection_type=3)
                else:
                    if inspectionType.split(' ')[0] == 'Suprise':
                        obj1=m2.einspection_details.objects.create(status = 0,instypeid=inspection,inspected_on=start_date, start_date=start_date,end_date=end_date,start_time=start_time,end_time=end_time,
                        inspection_title=inspection_title,designation=loginUser,inspection_note_no=inspection_note_no,ratings=ratingsEinpection,abnormal=saving,documents=None,dept=department,
                        rly_id_id=railways,div_id_id=division,entitydetails=inspection.entity.dmaster,entityid=detail,created_by=loginUser.empno.empno,lastmodified_by=loginUser.empno.empno,is_scheduled=False,
                        created_on=systemDateTime,lastmodified_on=systemDateTime,section_id=section,inspection_type=1)
                    else:
                        obj1=m2.einspection_details.objects.create(status = 0,instypeid=inspection,inspected_on=start_date, start_date=start_date,end_date=end_date,start_time=start_time,end_time=end_time,
                        inspection_title=inspection_title,designation=loginUser,inspection_note_no=inspection_note_no,ratings=ratingsEinpection,abnormal=saving,documents=None,dept=department,
                        rly_id_id=railways,div_id_id=division,entitydetails=inspection.entity.dmaster,entityid=detail,created_by=loginUser.empno.empno,lastmodified_by=loginUser.empno.empno,is_scheduled=False,
                        created_on=systemDateTime,lastmodified_on=systemDateTime,section_id=section,inspection_type=2)

            
            else:
                obj1=m2.einspection_details.objects.create(status = 0,instypeid=inspection,inspected_on=start_date,start_date=start_date,end_date=end_date,start_time=start_time,end_time=end_time,
                inspection_title=inspection_title,designation=loginUser,inspection_note_no=inspection_note_no,ratings=ratingsEinpection,abnormal=saving,documents=None,dept=department,
                rly_id_id=railways,div_id_id=division,entitydetails=inspection.entity.dmaster,entityid=detail,created_by=loginUser.empno.empno,lastmodified_by=loginUser.empno.empno,is_scheduled=True,
                created_on=systemDateTime,lastmodified_on=systemDateTime,section_id=section,inspection_type=4)

            for i in range(len(str2)):
                if str2[i][0]!='' and str2[i][0]!='Null':
                    obj2=m2.questionare_master.objects.filter(qid=str2[i][1])[0]
                    #Text
                    if obj2.choicetype.cid == 1:
                        try:
                            answer=str2[i][0].split('@@@')[0]
                        except:
                            answer=str2[i][0].split('@@@')[0]

                        try:
                            locationData=",".join(str2[i][3].split('@@@')[:-1])
                        except:
                            locationData=None
                        m2.einspection_item_detail.objects.create(status=0,einspno=obj1,qid=obj2,value=answer,qncat=obj2.instypeid_id,
                        qtype='e-Inspection',created_by=loginUser.empno.empno,lastmodified_by=loginUser.empno.empno,
                        created_on=systemDateTime,lastmodified_on=systemDateTime,location=locationData,remarks=str2[i][4])
                    #Radio
                    elif obj2.choicetype.cid == 2:
                        checker=str2[i][0][0:8]
                        value=str2[i][0].split('@@@')[1]
                        remarks=str2[i][0].split('@@@')[2]
                        try:
                            locationData=",".join(str2[i][3].split('@@@')[:-1])
                        except:
                            locationData=None                   
                        if checker=='roption1':
                            # if roption1 is not a scoring option
                            if obj2.roption1.rscore =='' or obj2.roption1.rscore==None:
                                m2.einspection_item_detail.objects.create(status=0,einspno=obj1,qid=obj2,value_id=obj2.roption1,value=value,qncat=obj2.instypeid_id,
                                qtype='e-Inspection',created_by=loginUser.empno.empno,lastmodified_by=loginUser.empno.empno,
                                created_on=systemDateTime,lastmodified_on=systemDateTime,location=locationData,remarks=str2[i][4])
                            else:
                                # if roption1 is a scoring option
                                # radio = m2.radio_options.objects.filter(rlabel=value,rscore=0)
                                item=m2.einspection_item_detail.objects.create(status=0,einspno=obj1,qid=obj2,value_id=obj2.roption1,value=value,qncat=obj2.instypeid_id,
                                qtype='e-Inspection',created_by=loginUser.empno.empno,lastmodified_by=loginUser.empno.empno,
                                created_on=systemDateTime,lastmodified_on=systemDateTime,location=locationData,remarks=str2[i][4])
                                # officerVal=str2[i][0].split('@@@')[3]
                                departmentVal=str2[i][0].split('@@@')[3]
                                
                                if inspection.entity.dmaster == 'Train':
                                    data=train_master.objects.filter(train_no=detail)[0]
                                    # data->division->department->head bo
                                    try:
                                        mark=Level_Desig.objects.filter(department_code_id=departmentVal,rly_unit=data.div_id_id,d_level='BO',head_flag=6)[0]
                                        m2.einsp_marked.objects.create(eitemid=item,marked_to=mark,marked_emp_id=mark.empno.empno,status_flag=1,
                                        created_by=loginUser.empno.empno,lastmodified_by=loginUser.empno.empno,
                                        created_on=systemDateTime,lastmodified_on=systemDateTime)
                                    except:
                                        mark=Level_Desig.objects.filter(department_code_id=departmentVal,rly_unit=data.div_id_id,d_level='DRM',head_flag=3)[0]
                                        m2.einsp_marked.objects.create(eitemid=item,marked_to=mark,marked_emp_id=mark.empno.empno,status_flag=1,
                                        created_by=loginUser.empno.empno,lastmodified_by=loginUser.empno.empno,
                                        created_on=systemDateTime,lastmodified_on=systemDateTime)
                                        # print('No Such Designation')
                                        
                                elif inspection.entity.dmaster =='Station':
                                    data=station_master.objects.filter(stnshortcode=detail)[0]
                                    try:
                                        mark=Level_Desig.objects.filter(department_code_id=departmentVal,rly_unit=data.div_id_id,d_level='BO',head_flag=6)[0]
                                        # print('mark: ',mark)
                                        m2.einsp_marked.objects.create(eitemid=item,marked_to=mark,marked_emp_id=mark.empno.empno,status_flag=1,
                                        created_by=loginUser.empno.empno,lastmodified_by=loginUser.empno.empno,
                                        created_on=systemDateTime,lastmodified_on=systemDateTime)
                                    except:
                                        mark=Level_Desig.objects.filter(department_code_id=departmentVal,rly_unit=data.div_id_id,d_level='DRM',head_flag=3)[0]
                                        m2.einsp_marked.objects.create(eitemid=item,marked_to=mark,marked_emp_id=mark.empno.empno,status_flag=1,
                                        created_by=loginUser.empno.empno,lastmodified_by=loginUser.empno.empno,
                                        created_on=systemDateTime,lastmodified_on=systemDateTime)
                                        # print('No Such Designation')

                                elif inspection.entity.dmaster == 'Loco':
                                    data=section_master.objects.filter(loco_id=detail)[0]
                                    try:
                                        mark=Level_Desig.objects.filter(department_code_id=departmentVal,rly_unit=data.div_id_id,d_level='BO',head_flag=6)[0]
                                        # print('mark: ',mark)
                                        m2.einsp_marked.objects.create(eitemid=item,marked_to=mark,marked_emp_id=mark.empno.empno,status_flag=1,
                                        created_by=loginUser.empno.empno,lastmodified_by=loginUser.empno.empno,
                                        created_on=systemDateTime,lastmodified_on=systemDateTime)
                                    except:
                                        mark=Level_Desig.objects.filter(department_code_id=departmentVal,rly_unit=data.div_id_id,d_level='DRM',head_flag=3)[0]
                                        m2.einsp_marked.objects.create(eitemid=item,marked_to=mark,marked_emp_id=mark.empno.empno,status_flag=1,
                                        created_by=loginUser.empno.empno,lastmodified_by=loginUser.empno.empno,
                                        created_on=systemDateTime,lastmodified_on=systemDateTime)
                                        # print('No Such Designation')

                                elif inspection.entity.dmaster == 'Running Rooom':
                                    data=runningroom_master.objects.filter(rr_code=detail)[0]
                                    try:
                                        mark=Level_Desig.objects.filter(department_code_id=departmentVal,rly_unit=data.div_id_id,d_level='BO',head_flag=6)[0]
                                        # print('mark: ',mark)
                                        m2.einsp_marked.objects.create(eitemid=item,marked_to=mark,marked_emp_id=mark.empno.empno,status_flag=1,
                                        created_by=loginUser.empno.empno,lastmodified_by=loginUser.empno.empno,
                                        created_on=systemDateTime,lastmodified_on=systemDateTime)
                                    except:
                                        mark=Level_Desig.objects.filter(department_code_id=departmentVal,rly_unit=data.div_id_id,d_level='DRM',head_flag=3)[0]
                                        m2.einsp_marked.objects.create(eitemid=item,marked_to=mark,marked_emp_id=mark.empno.empno,status_flag=1,
                                        created_by=loginUser.empno.empno,lastmodified_by=loginUser.empno.empno,
                                        created_on=systemDateTime,lastmodified_on=systemDateTime)
                                        # print('No Such Designation')

                        elif checker=='roption2':
                            score+=1
                            m2.einspection_item_detail.objects.create(status=0,einspno=obj1,qid=obj2,value_id=obj2.roption2,value=value,qncat=obj2.instypeid_id,
                            qtype='e-Inspection',created_by=loginUser.empno.empno,lastmodified_by=loginUser.empno.empno,
                            created_on=systemDateTime,lastmodified_on=systemDateTime,location=locationData,remarks=str2[i][4])
                    
                    #Dropdown
                    elif obj2.choicetype.cid == 3:
                        try:
                            answer=str2[i][0].split('@@@')[0]
                        except:
                            answer=str2[i][0].split('@@@')[0]
                        try:
                            locationData=",".join(str2[i][3].split('@@@')[:-1])
                        except:
                            locationData=None
                        m2.einspection_item_detail.objects.create(status=0,einspno=obj1,qid=obj2,value=answer,qncat=obj2.instypeid_id,
                        qtype='e-Inspection',created_by=loginUser.empno.empno,lastmodified_by=loginUser.empno.empno,created_on=systemDateTime,
                        lastmodified_on=systemDateTime,location=locationData,remarks=str2[i][4])
                    
                    #Date
                    elif obj2.choicetype.cid == 4:
                        try:
                            answer=str2[i][0].split('@@@')[0]
                        except:
                            answer=str2[i][0].split('@@@')[0]
                        try:
                            locationData=",".join(str2[i][3].split('@@@')[:-1])
                        except:
                            locationData=None
                        m2.einspection_item_detail.objects.create(status=0,einspno=obj1,qid=obj2,value=answer,qncat=obj2.instypeid_id,
                        qtype='e-Inspection',created_by=loginUser.empno.empno,lastmodified_by=loginUser.empno.empno,created_on=systemDateTime,
                        lastmodified_on=systemDateTime,location=locationData,remarks=str2[i][4])
                    
                    #Time
                    elif obj2.choicetype.cid == 5:
                        try:
                            answer=str2[i][0].split('@@@')[0]
                        except:
                            answer=str2[i][0].split('@@@')[0]
                        try:
                            locationData=",".join(str2[i][3].split('@@@')[:-1])
                        except:
                            locationData=None
                        m2.einspection_item_detail.objects.create(status=0,einspno=obj1,qid=obj2,value=answer,qncat=obj2.instypeid_id,
                        qtype='e-Inspection',created_by=loginUser.empno.empno,lastmodified_by=loginUser.empno.empno,created_on=systemDateTime,
                        lastmodified_on=systemDateTime,location=locationData,remarks=str2[i][4])

                    #Document
                    elif obj2.choicetype.cid == 6:
                        try:
                            locationData=",".join(str2[i][3].split('@@@')[:-1])
                        except:
                            locationData=None
                        m2.einspection_item_detail.objects.create(status=0,einspno=obj1,qid=obj2,qncat=obj2.instypeid_id,
                        qtype='e-Inspection',created_by=loginUser.empno.empno,lastmodified_by=loginUser.empno.empno,created_on=systemDateTime,
                        lastmodified_on=systemDateTime,location=locationData,remarks=str2[i][4])

                

            # Saving Report Path
            reportPath = '/pdfDetails/?id='+str(obj1.einspno)
            m2.einspection_details.objects.filter(einspno=obj1.einspno).update(report_path=reportPath)
            return JsonResponse({'success':True})

    except:   
        # if an error occurs the entry created in einspection_details table will be deleted and an error response is sent
        m2.einspection_details.objects.filter(einspno=obj1.einspno).delete()
        return JsonResponse({'success':False})
    return JsonResponse({'success':False})




def getDataEntity(request):
    if request.method == 'GET':
        entity=request.GET.get('entity')
        entityNo=request.GET.get('entityNo')
        if entity == 'Loco':
            result=list(loco_master.objects.filter(loco_id=entityNo,delete_flag=False).values())
        elif entity == 'Train':
            result=list(train_master.objects.filter(train_no=entityNo,delete_flag=False).values('tnid','train_no','train_name','tn_category','stnsource_code_id','stnsource_code_id__station_name','stndest_code_id','stndest_code_id__station_name','total_coach','primary_maint_depot','secondary_maint_depot','trainowngrly2_id','trainowngrly2_id__station_name'))
        elif entity == 'Station':
            result=list(station_master.objects.filter(stnshortcode=entityNo,delete_flag=False).values())
        elif entity == 'Section':
            result=list(section_master.objects.filter(secid=entityNo,delete_flag=False).values())
        elif entity == 'Running Room':
            result=list(train_master.objects.filter(rr_code=entityNo,delete_flag=False).values())
        ## print(result)
        return JsonResponse(result,safe=False)
    return JsonResponse({'success':False})

def getStationSectionWise(request):
    if request.method == 'GET':
        result=[]
        section=request.GET.get('section')
        relation=section_master.objects.filter(secid=section,delete_flag=False)[0]
        temp=[]
        result=list(section_master.objects.filter(Q(route__startswith=relation.secstart_code.stnshortcode,route__contains=relation.secend_code.stnshortcode) | Q(route__contains=relation.secstart_code.stnshortcode,route__startswith=relation.secend_code.stnshortcode)).values())
        for i in range(len(result)):
            temp += result[i]['route'].split('-')

        result_route = set(temp)
        result_route = (list(result_route))
        result=list(station_master.objects.filter(stnshortcode__in=result_route).values().order_by('station_name'))        
        return JsonResponse(result,safe=False)
    return JsonResponse({"success":False},status=400)



def getSectionDash(request):
    if request.method =='GET':
        division = json.loads(request.GET.get('division'))
        
        result=list(section_master.objects.filter(div_id_id_id__in=division,delete_flag=False).values().order_by('section_code'))
        # # print(result,'yhgbyuhu')
        return JsonResponse(result,safe=False)
    return JsonResponse({"success":False},status=400)
      

def getDependentData(request):
    if request.method == 'GET':
        qsid=request.GET.get('qsid')
        name= request.GET.get('name')
        value = request.GET.get('value').split(' ')[0]
        result=[]
        question=m2.questionare_master.objects.filter(qid=name).values('doption_id__dmaster','depending_ques')[0]
        if question['depending_ques'] is not None:
            depending_ques = question['depending_ques'].split(',')
            question2=list(m2.questionare_master.objects.filter(qid__in=depending_ques,delete_flag=False,disable_flag=False).values())
            doption=list(m2.dropdown_options.objects.filter(dmaster=question['doption_id__dmaster']).values('dmaster','table_name','column_name'))
            if len(doption)!=0:
                class_name = globals()[doption[0]['table_name']]
                col_filter = doption[0]['column_name'].split(',')[0]
                keys ={col_filter:value}
                for i in range(len(question2)):
                    col_name = question2[i]['dependending_column']
                    result1=list(class_name.objects.filter(**keys).values(col_name).distinct()) 
                    if len(result1) == 0:
                        typ = 'TEXT'
                        value = 'No Data is Present in Master'
                    elif len(result1) == 1:
                        typ = 'TEXT'
                        value = result1[0][col_name]
                    else:
                        typ = 'DROP'
                        value =list(map(lambda x : x[col_name],result1))
                    
                    ######  seperator
                    seperator = list(m2.seperator_options.objects.filter(table_name=doption[0]['table_name'],seperator_column=col_name).values('seperator'))
                    if len(seperator) > 0:
                        typ = 'DROP'
                        sp_val = seperator[0]['seperator']
                        value = value.split(sp_val)

                    result.append({'qid':question2[i]['qid'],'type':typ,'value':value,'key':col_filter})
        return JsonResponse(result,safe=False)
    return JsonResponse({"success":False},status=400)


def getZoneEinsp(request):
    if request.method == "GET":
        zone = json.loads(request.GET.get('zone'))
        #userSelectedRailways=railwayLocationMaster.objects.filter(rly_unit_code__in=zone).values('rly_unit_code')
        # # print('userSelectedRailways',userSelectedRailways.location_code)
        result=list(railwayLocationMaster.objects.filter(parent_location_code__in=railwayLocationMaster.objects.filter(rly_unit_code__in=zone).values('location_code'),location_type='DIV').values())
        # # print('gtthg',len(result))
        # rly_unit_code = list(railwayLocationMaster.objects.filter(rly_unit_code=zone,rly_unit_code=division).values('rly_unit_code'))
        return JsonResponse(result,safe=False)
    return JsonResponse({"success":False},status=400)


def checkFillofStation(request):
    if request.method == 'GET':
        start_station= request.GET.get('start_station')
        end_station= request.GET.get('end_station')
        entity=request.GET.get('entity')
        # # print('start_station:',start_station,end_station,entity)
        start_station=station_master.objects.filter(stnshortcode=start_station)[0]
        end_station=station_master.objects.filter(stnshortcode=end_station)[0]
        result=[]
        if entity=='Train':
            result=list(train_master.objects.filter().values('tnid','train_no','train_name'))
        elif entity=='Running Room':
            result=list(runningroom_master.objects.filter(stnshortcode=start_station).values())
        elif entity=='Station':
            result=list(station_master.objects.filter(stnshortcode=start_station.stnshortcode).values())
            # # print('result:',len(result))
        return JsonResponse(result,safe=False)
    return JsonResponse({"success":False},status=400)


@login_required
def eInspectionUserForm(request):
    return render(request, 'eInspectionUserForm.html')


def palyResponse(request):
    if request.method =='GET':
        railways=request.GET.get('railways')
        division=request.GET.get('division')
        result1=railwayLocationMaster.objects.filter(rly_unit_code=railways)[0]
        result2=railwayLocationMaster.objects.filter(rly_unit_code=division)[0]

        # # print(result,'yhgbyuhu')
        railways=result1.location_code
        division=result2.location_description
        # # print(division,railways)
        return JsonResponse({'railways':railways,'division':division},safe=False)
    return JsonResponse({"success":False},status=400)



def myfun(request):
    id=request.GET.get('id')
    # print(id)
    menubar = list(inspectiontype_master.objects.filter(parent_id="2").values('name','inspection_image'))
    # print(menubar)
    ajaxdata=[]
    return JsonResponse({'menubar':menubar, 'ajaxdata':ajaxdata},safe=False)
  




#############################################################################################################################################################
# ROSTER FORM
#############################################################################################################################################################

def name_wise(request):
    if request.method== "GET":
        emp = request.GET.get('empno')
        # name=list(m1.empmast.objects.filter(empno=empno).order_by('empname').values('empname'))
        name=list(Level_Desig.objects.filter(empno=emp).values('empno_id__empname'))
        # # print(name)
    
        return JsonResponse({"status":1,'name':name})


def name_wise_m(request):
    if request.method== "GET":
        empno = request.GET.get('empno')
        name=list(Level_Desig.objects.filter(empno=empno).values('empno_id__empname'))

        return JsonResponse({"status":1,'name':name})


def saveDataa(request):
    if request.method=='POST':
        id=request.POST.get('id')
        detailid=[]
        detailid= json.loads(request.POST.get('detailid'))
        # # print("id0000000000",type(detailid))
        if id!='None':
            # # print('inside1')
            roster_no=request.POST.get('roster_no')      
            email=str(request.user.username)
            # designation in form
            designation = request.POST.get('designation') 
            designationCh = request.POST.get('designationCh') 
            # # print("designationCh",designation)
            section = request.POST.get('section')
            sectionCh = request.POST.get('sectionCh')
            # # print("sectionCh",sectionCh)
            secid=section_master.objects.filter(section_code=section)[0]
            secidCh=section_master.objects.filter(section_code=sectionCh)[0]
          
            # # print("--------",secidCh.secid)
            # splitting section into secid and section code
            # secid=section.split(',')[0]
            # section_code=section.split(',')[1]
            inspectionof = request.POST.get('inspectionof') 
            inspectionofCh = request.POST.get('inspectionofCh') 
            # # print("inspectionofCh",inspectionofCh)
            detail=request.POST.get('detail')
            detailCh=request.POST.get('detailCh')
            # # print("detailCh",detailCh)
            doi = request.POST.get('doi')
            doi=datetime.strptime(doi,"%d/%m/%Y")
            # # print("?????777777777777777??",doi)
            doi=str(doi)
            x=doi.split(' ')[0]

            doiCh = request.POST.get('doiCh')
            doiCh=datetime.strptime(doiCh,"%d/%m/%Y")
            # # print("doiCh",doiCh)
            doiCh=str(doiCh)
            xCh=doiCh.split(' ')[0]


            # designation code
            desgc=Level_Desig.objects.filter(designation=designation)[0]
            desgcCh=Level_Desig.objects.filter(designation=designationCh)[0]  

        
            # desiglogin=Level_Desig.objects.filter(official_email_ID=email)[0]
            desig=list(AdminMaster.objects.filter(user_id=email).values('designation'))
            desiglogin=desig[0]['designation']

            section1 = request.POST.get('section1')
            section1Ch = request.POST.get('section1Ch')
            
            secid1=section_master.objects.filter(section_code=section1)[0]
            secid1Ch=section_master.objects.filter(section_code=section1Ch)[0]
            # secid1=section1.split(',')[0]
            # section_code1=section1.split(',')[1]
            inspectionof1 = request.POST.get('inspectionof1') 
            inspectionof1Ch = request.POST.get('inspectionof1Ch') 
            detail1=request.POST.get('detail1')
            detail1Ch=request.POST.get('detail1Ch')

            doi1 = request.POST.get('doi1')
            doi1=datetime.strptime(doi1,"%d/%m/%Y")
     
            doi1=str(doi1)
            x1=doi1.split(' ')[0]

            doi1Ch = request.POST.get('doi1Ch')
            doi1Ch=datetime.strptime(doi1Ch,"%d/%m/%Y")
  
            doi1Ch=str(doi1Ch)
            x1Ch=doi1Ch.split(' ')[0]
       

        
            section2 = request.POST.get('section2')
            secid2=section_master.objects.filter(section_code=section2)[0]
            section2Ch = request.POST.get('section2Ch')
            secid2Ch=section_master.objects.filter(section_code=section2Ch)[0]
            # splitting section into secid and section code
            # secid2=section2.split(',')[0]
            # section_code2=section2.split(',')[1]
            inspectionof2 = request.POST.get('inspectionof2') 
            inspectionof2Ch = request.POST.get('inspectionof2Ch') 
       
            detail2=request.POST.get('detail2')
            detail2Ch=request.POST.get('detail2Ch')
            doi2 = request.POST.get('doi2')
            doi2=datetime.strptime(doi2,"%d/%m/%Y")

            doi2=str(doi2)
            x2=doi2.split(' ')[0]

            doi2Ch = request.POST.get('doi2Ch')
            doi2Ch=datetime.strptime(doi2Ch,"%d/%m/%Y")
          
            doi2Ch=str(doi2Ch)
            x2Ch=doi2Ch.split(' ')[0]

            systemDateTime = datetime.now()
            systemDateTime = systemDateTime.strftime("%Y-%m-%d %H:%M:%S")
            

            global_count=request.POST.get('global_count')

            m2.roster_detail.objects.filter(roster_id_id=id,rostdetailid=detailid[0]).update(status=1,roster_id_id=roster_no, created_by=desiglogin,lastmodified_by=desiglogin,designation=desgc[0],doi=x,inspectionof=inspectionof,section=secid.secid,detail=detail,created_on=systemDateTime,lastmodified_on=systemDateTime)
            m2.roster_detail.objects.filter(roster_id_id=id,rostdetailid=detailid[1]).update(status=1,roster_id_id=roster_no,created_by=desiglogin,lastmodified_by=desiglogin,designation=desgc[0],doi=x1,inspectionof=inspectionof1,section=secid1.secid,detail=detail1,created_on=systemDateTime,lastmodified_on=systemDateTime)
            m2.roster_detail.objects.filter(roster_id_id=id,rostdetailid=detailid[2]).update(status=1,roster_id_id=roster_no,created_by=desiglogin,lastmodified_by=desiglogin,designation=desgc[0],doi=x2,inspectionof=inspectionof2,section=secid2.secid,detail=detail2,created_on=systemDateTime,lastmodified_on=systemDateTime)
            # print("Data saved successfully in table(submit update,parent)")

            for i in range(len(global_count+1)):
                secidCh=section_master.objects.filter(section_code=sectionCh[i])[0]
                secidCh=secidCh.secid
              
                secid1Ch=section_master.objects.filter(section_code=section1Ch[i])[0]
                secid1Ch=secid1Ch.secid
                secid2Ch=section_master.objects.filter(section_code=section2Ch[i])[0]
                secid2Ch=secid2Ch.secid

                doiCh1=datetime.strptime(doiCh[i],"%d/%m/%Y")
                doiCh2=str(doiCh1)
                xCh=doiCh2.split(' ')[0]
              

                doi1Ch1=datetime.strptime(doi1Ch[i],"%d/%m/%Y")
                doi1Ch2=str(doi1Ch1)
                x1Ch=doi1Ch2.split(' ')[0]

                doi2Ch1=datetime.strptime(doi2Ch[i],"%d/%m/%Y")
         
                doi2Ch2=str(doi2Ch1)
                x2Ch=doi2Ch2.split(' ')[0]

                desgcCh=Level_Desig.objects.filter(empno=designationCh[i])[0]  
              

            m2.roster_detail.objects.filter(roster_id_id=id,rostdetailid=detailid[0]).update(status=1,roster_id_id=roster_no, created_by=desiglogin,lastmodified_by=desiglogin,designation=desgcCh[i],doi=xCh,inspectionof=inspectionofCh[i],section=secidCh,detail=detailCh[i],created_on=systemDateTime,lastmodified_on=systemDateTime)
            m2.roster_detail.objects.filter(roster_id_id=id,rostdetailid=detailid[1]).update(status=1,roster_id_id=roster_no,created_by=desiglogin,lastmodified_by=desiglogin,designation=desgcCh[i],doi=x1Ch,inspectionof=inspectionof1Ch[i],section=secid1Ch.secid,detail=detail1Ch[i],created_on=systemDateTime,lastmodified_on=systemDateTime)
            m2.roster_detail.objects.filter(roster_id_id=id,rostdetailid=detailid[2]).update(status=1,roster_id_id=roster_no,created_by=desiglogin,lastmodified_by=desiglogin,designation=desgcCh[i],doi=x2Ch,inspectionof=inspectionof2Ch[i],section=secid2Ch.secid,detail=detail2Ch[i],created_on=systemDateTime,lastmodified_on=systemDateTime)
            # print("Data saved successfully in table(submit update,child)") 

        else:
            roster_no=request.POST.get('roster_no')
            # print("dddddddddd_out",roster_no)
            global_count=int(request.POST.get('global_count'))
            # print("dddddddddd_global_count",global_count)
            email=str(request.user.username)
            # designation in form
            designationCh = json.loads(request.POST.get('designationCh'))
           
            sectionCh = json.loads(request.POST.get('sectionCh'))
            

            # secid=section_master.objects.filter(section_code=section)[0]
       
            # splitting section into secid and section code
            # secid=section.split(',')[0]
            # section_code=section.split(',')[1]
            # inspectionof = request.POST.get('inspectionof') 
            inspectionofCh = json.loads(request.POST.get('inspectionofCh'))
           
            detailCh=json.loads(request.POST.get('detailCh'))
            
            # doi = request.POST.get('doi')
            # doi=datetime.strptime(doi,"%d/%m/%Y")
           
            # doi=str(doi)
            # x=doi.split(' ')[0]
            doiCh = json.loads(request.POST.get('doiCh'))
          
            section1Ch = json.loads(request.POST.get('section1Ch'))
            # print("section",section1Ch)
            inspectionof1Ch = json.loads(request.POST.get('inspectionof1Ch'))
                # detail1=request.POST.get('detail1')
            detail1Ch=json.loads(request.POST.get('detail1Ch'))
            doi1Ch = json.loads(request.POST.get('doi1Ch'))

            section2Ch = json.loads(request.POST.get('section2Ch'))
            inspectionof2Ch = json.loads(request.POST.get('inspectionof2Ch'))
           
            detail2Ch=json.loads(request.POST.get('detail2Ch'))
            doi2Ch = json.loads(request.POST.get('doi2Ch'))

            # desiglogin=Level_Desig.objects.filter(official_email_ID=email)[0]
            desig=list(AdminMaster.objects.filter(user_id=email).values('designation'))
            desiglogin=desig[0]['designation']

            systemDateTime = datetime.now()
            systemDateTime = systemDateTime.strftime("%Y-%m-%d %H:%M:%S")


            if(global_count=='0'):
                m2.roster_detail.objects.create(status=1,roster_id_id=roster_no,created_by=desiglogin,lastmodified_by=desiglogin,designation=desgcCh[0],doi=xCh,inspectionof=inspectionofCh[0],section=secidCh.secid,detail=detailCh[0],created_on=systemDateTime,lastmodified_on=systemDateTime)
                m2.roster_detail.objects.create(status=1,roster_id_id=roster_no,created_by=desiglogin,lastmodified_by=desiglogin,designation=desgcCh[0],doi=x1Ch,inspectionof=inspectionof1Ch[0],section=secid1Ch.secid,detail=detail1Ch[0],created_on=systemDateTime,lastmodified_on=systemDateTime)
                m2.roster_detail.objects.create(status=1,roster_id_id=roster_no,created_by=desiglogin,lastmodified_by=desiglogin,designation=desgcCh[0],doi=x2Ch,inspectionof=inspectionof2Ch[0],section=secid2Ch.secid,detail=detail2Ch[0],created_on=systemDateTime,lastmodified_on=systemDateTime)
                # print("Data saved successfully in table(parent)")

            else:
                for i in range(global_count+1):
                    secidCh=section_master.objects.filter(section_code=sectionCh[i])[0]
                    secidCh=secidCh.secid
                    
                    if section1Ch!= [None]:
                        secid1Ch=section_master.objects.filter(section_code=section1Ch[i])[0]
                        secid1Ch=secid1Ch.secid

                        doi1Ch1=datetime.strptime(doi1Ch[i],"%d/%m/%Y")
                        doi1Ch2=str(doi1Ch1)
                        x1Ch=doi1Ch2.split(' ')[0]

                    if section2Ch!= [None]:    
                        secid2Ch=section_master.objects.filter(section_code=section2Ch[i])[0]
                        secid2Ch=secid2Ch.secid

                        doi2Ch1=datetime.strptime(doi2Ch[i],"%d/%m/%Y")
                        doi2Ch2=str(doi2Ch1)
                        x2Ch=doi2Ch2.split(' ')[0]

                    doiCh1=datetime.strptime(doiCh[i],"%d/%m/%Y")
                    doiCh2=str(doiCh1)
                    xCh=doiCh2.split(' ')[0]
                  

                    desgcCh=Level_Desig.objects.filter(empno=designationCh[i])[0]  

                    m2.roster_detail.objects.create(status=1,roster_id_id=roster_no, created_by=desiglogin,lastmodified_by=desiglogin,designation=desgcCh,doi=xCh,inspectionof=inspectionofCh[i],section=secidCh,detail=detailCh[i],created_on=systemDateTime,lastmodified_on=systemDateTime)
                    if section1Ch!= [None]:
                        m2.roster_detail.objects.create(status=1,roster_id_id=roster_no,created_by=desiglogin,lastmodified_by=desiglogin,designation=desgcCh,doi=x1Ch,inspectionof=inspectionof1Ch[i],section=secid1Ch,detail=detail1Ch[i],created_on=systemDateTime,lastmodified_on=systemDateTime)
                    if section2Ch!= [None]:
                        m2.roster_detail.objects.create(status=1,roster_id_id=roster_no,created_by=desiglogin,lastmodified_by=desiglogin,designation=desgcCh,doi=x2Ch,inspectionof=inspectionof2Ch[i],section=secid2Ch,detail=detail2Ch[i],created_on=systemDateTime,lastmodified_on=systemDateTime)
                    # print("Data saved successfully in table (submit(child))")
      
        return JsonResponse({"success":True},safe=False)
    return JsonResponse({"success":False},status=404)





def saveDraft(request):
    if request.method=='POST':
        id=request.POST.get('id')
        email=str(request.user.username)
        desig=list(AdminMaster.objects.filter(user_id=email).values('designation'))
        desiglogin=desig[0]['designation']
        # print("1234",id)
        detailid=json.loads(request.POST.get('detailid'))
        
        if id!="None":
            # print('inside1234')
            roster_no=request.POST.get('roster_no')      
            email=str(request.user)
            # designation in form
            designation = request.POST.get('designation') 
         
            designationCh = request.POST.get('designationCh') 
        
            section = request.POST.get('section')
            sectionCh = request.POST.get('sectionCh')
          
            secid=section_master.objects.filter(section_code=section)[0]
            secidCh=section_master.objects.filter(section_code=sectionCh)[0]
          
            # splitting section into secid and section code
            # secid=section.split(',')[0]
            # section_code=section.split(',')[1]
            inspectionof = request.POST.get('inspectionof') 
            inspectionofCh = request.POST.get('inspectionofCh') 
        
            detail=request.POST.get('detail')
            detailCh=request.POST.get('detailCh')
       
            doi = request.POST.get('doi')
            doi=datetime.strptime(doi,"%d/%m/%Y")
       
            doi=str(doi)
            x=doi.split(' ')[0]

            doiCh = request.POST.get('doiCh')
            doiCh=datetime.strptime(doiCh,"%d/%m/%Y")
        
            doiCh=str(doiCh)
            xCh=doiCh.split(' ')[0]

            # designation code
            desgc=Level_Desig.objects.filter(designation=designation)[0]
            desgcCh=Level_Desig.objects.filter(designation=designationCh)[0]  

        
            # desiglogin=Level_Desig.objects.filter(official_email_ID=email)[0]

            section1 = request.POST.get('section1')
            section1Ch = request.POST.get('section1Ch')
        
            secid1=section_master.objects.filter(section_code=section1)[0]
            secid1Ch=section_master.objects.filter(section_code=section1Ch)[0]
            # secid1=section1.split(',')[0]
            # section_code1=section1.split(',')[1]
            inspectionof1 = request.POST.get('inspectionof1') 
            inspectionof1Ch = request.POST.get('inspectionof1Ch') 
            detail1=request.POST.get('detail1')
            detail1Ch=request.POST.get('detail1Ch')

            doi1 = request.POST.get('doi1')
            doi1=datetime.strptime(doi1,"%d/%m/%Y")
            # # print("?????777777777777777??",doi)
            doi1=str(doi1)
            x1=doi1.split(' ')[0]

            doi1Ch = request.POST.get('doi1Ch')
            doi1Ch=datetime.strptime(doi1Ch,"%d/%m/%Y")
            # # print("?????777777777777777??",doi)
            doi1Ch=str(doi1Ch)
            x1Ch=doi1Ch.split(' ')[0]

        
            section2 = request.POST.get('section2')
            secid2=section_master.objects.filter(section_code=section2)[0]
            section2Ch = request.POST.get('section2Ch')
            secid2Ch=section_master.objects.filter(section_code=section2Ch)[0]
            # splitting section into secid and section code
            # secid2=section2.split(',')[0]
            # section_code2=section2.split(',')[1]
            inspectionof2 = request.POST.get('inspectionof2') 
            inspectionof2Ch = request.POST.get('inspectionof2Ch') 
           
            detail2=request.POST.get('detail2')
            detail2Ch=request.POST.get('detail2Ch')
            doi2 = request.POST.get('doi2')
            doi2=datetime.strptime(doi2,"%d/%m/%Y")
            # # print("?????????????????",doi)
            doi2=str(doi2)
            x2=doi2.split(' ')[0]

            doi2Ch = request.POST.get('doi2Ch')
            doi2Ch=datetime.strptime(doi2Ch,"%d/%m/%Y")
            # # print("?????????????????",doi)
            doi2Ch=str(doi2Ch)
            x2Ch=doi2Ch.split(' ')[0]

            systemDateTime = datetime.now()
            systemDateTime = systemDateTime.strftime("%Y-%m-%d %H:%M:%S")
            # # print('systemDateTime: ',systemDateTime)
            # # print('designation',designation)

            # global_count=request.POST.get('global_count')

            # # print("section id:" , secid)
            if(global_count=='0'):
                m2.roster_detail.objects.filter(roster_id_id=id,rostdetailid=detailid[0]).update(status=0,roster_id_id=roster_no, created_by=desiglogin.empno.empno,lastmodified_by=desiglogin.empno.empno,designation=desgc,doi=x,inspectionof=inspectionof,section=secid.secid,detail=detail,created_on=systemDateTime,lastmodified_on=systemDateTime)
                m2.roster_detail.objects.filter(roster_id_id=id,rostdetailid=detailid[1]).update(status=0,roster_id_id=roster_no,created_by=desiglogin.empno.empno,lastmodified_by=desiglogin.empno.empno,designation=desgc,doi=x1,inspectionof=inspectionof1,section=secid1.secid,detail=detail1,created_on=systemDateTime,lastmodified_on=systemDateTime)
                m2.roster_detail.objects.filter(roster_id_id=id,rostdetailid=detailid[2]).update(status=0,roster_id_id=roster_no,created_by=desiglogin.empno.empno,lastmodified_by=desiglogin.empno.empno,designation=desgc,doi=x2,inspectionof=inspectionof2,section=secid2.secid,detail=detail2,created_on=systemDateTime,lastmodified_on=systemDateTime)
                # print("Data saved successfully in table(submit update(draft,parent))")

            else:
                m2.roster_detail.objects.filter(roster_id_id=id,rostdetailid=detailid[0]).update(status=0,roster_id_id=roster_no, created_by=desiglogin.empno.empno,lastmodified_by=desiglogin.empno.empno,designation=desgc,doi=x,inspectionof=inspectionof,section=secid.secid,detail=detail,created_on=systemDateTime,lastmodified_on=systemDateTime)
                m2.roster_detail.objects.filter(roster_id_id=id,rostdetailid=detailid[1]).update(status=0,roster_id_id=roster_no,created_by=desiglogin.empno.empno,lastmodified_by=desiglogin.empno.empno,designation=desgc,doi=x1,inspectionof=inspectionof1,section=secid1.secid,detail=detail1,created_on=systemDateTime,lastmodified_on=systemDateTime)
                m2.roster_detail.objects.filter(roster_id_id=id,rostdetailid=detailid[2]).update(status=0,roster_id_id=roster_no,created_by=desiglogin.empno.empno,lastmodified_by=desiglogin.empno.empno,designation=desgc,doi=x2,inspectionof=inspectionof2,section=secid2.secid,detail=detail2,created_on=systemDateTime,lastmodified_on=systemDateTime)
                # print("Data saved successfully in table(submit update(draft,parent))")

                for i in range(len(global_count)):
                    m2.roster_detail.objects.filter(roster_id_id=id,rostdetailid=detailid[0]).update(status=0,roster_id_id=roster_no, created_by=desiglogin.empno.empno,lastmodified_by=desiglogin.empno.empno,designation=desgcCh,doi=xCh,inspectionof=inspectionofCh,section=secidCh.secid,detail=detailCh,created_on=systemDateTime,lastmodified_on=systemDateTime)
                    m2.roster_detail.objects.filter(roster_id_id=id,rostdetailid=detailid[1]).update(status=0,roster_id_id=roster_no,created_by=desiglogin.empno.empno,lastmodified_by=desiglogin.empno.empno,designation=desgcCh,doi=x1Ch,inspectionof=inspectionof1Ch,section=secid1Ch.secid,detail=detail1Ch,created_on=systemDateTime,lastmodified_on=systemDateTime)
                    m2.roster_detail.objects.filter(roster_id_id=id,rostdetailid=detailid[2]).update(status=0,roster_id_id=roster_no,created_by=desiglogin.empno.empno,lastmodified_by=desiglogin.empno.empno,designation=desgcCh,doi=x2Ch,inspectionof=inspectionof2Ch,section=secid2Ch.secid,detail=detail2Ch,created_on=systemDateTime,lastmodified_on=systemDateTime)
                    # print("Data saved successfully in table(submit update,draft(child))") 

        else:
            roster_no=request.POST.get('roster_no')
            # print("dddddddddd_outside",roster_no)
            global_count=int(request.POST.get('global_count'))
            # print("dddddddddd_global_count",global_count)
            email=str(request.user)
            # designation in form
            # designation = request.POST.get('designation') 
            designationCh = json.loads(request.POST.get('designationCh'))
           
            # section = request.POST.get('section')
            sectionCh = json.loads(request.POST.get('sectionCh'))
        

            # secid=section_master.objects.filter(section_code=section)[0]
            # # print("--------",secidCh.secid)
            # splitting section into secid and section code
            # secid=section.split(',')[0]
            # section_code=section.split(',')[1]
            # inspectionof = request.POST.get('inspectionof') 
            inspectionofCh = json.loads(request.POST.get('inspectionofCh'))
          
            # detail=request.POST.get('detail')
            detailCh=json.loads(request.POST.get('detailCh'))
            # # print("detailCh",detailCh)
            # doi = request.POST.get('doi')
            # doi=datetime.strptime(doi,"%d/%m/%Y")
            # # print("?????777777777777777??",doi)
            # doi=str(doi)
            # x=doi.split(' ')[0]
            doiCh = json.loads(request.POST.get('doiCh'))
            
            section1Ch = json.loads(request.POST.get('section1Ch'))
            
            inspectionof1Ch = json.loads(request.POST.get('inspectionof1Ch'))
                # detail1=request.POST.get('detail1')
            detail1Ch=json.loads(request.POST.get('detail1Ch'))
            doi1Ch = json.loads(request.POST.get('doi1Ch'))

            section2Ch = json.loads(request.POST.get('section2Ch'))
            inspectionof2Ch = json.loads(request.POST.get('inspectionof2Ch'))
            
                # detail2=request.POST.get('detail2')
            detail2Ch=json.loads(request.POST.get('detail2Ch'))
            doi2Ch = json.loads(request.POST.get('doi2Ch'))

            systemDateTime = datetime.now()
            systemDateTime = systemDateTime.strftime("%Y-%m-%d %H:%M:%S")
           
            if(global_count=='0'):
                m2.roster_detail.objects.create(status=0,roster_id_id=roster_no,created_by=desiglogin.empno.empno,lastmodified_by=desiglogin.empno.empno,designation=desgc,doi=xCh,inspectionof=inspectionofCh[0],section=secidCh.secid,detail=detailCh[0],created_on=systemDateTime,lastmodified_on=systemDateTime)
                m2.roster_detail.objects.create(status=0,roster_id_id=roster_no,created_by=desiglogin.empno.empno,lastmodified_by=desiglogin.empno.empno,designation=desgc,doi=x1Ch,inspectionof=inspectionof1Ch[0],section=secid1Ch.secid,detail=detail1Ch[0],created_on=systemDateTime,lastmodified_on=systemDateTime)
                m2.roster_detail.objects.create(status=0,roster_id_id=roster_no,created_by=desiglogin.empno.empno,lastmodified_by=desiglogin.empno.empno,designation=desgc,doi=x2Ch,inspectionof=inspectionof2Ch[0],section=secid2Ch.secid,detail=detail2Ch[0],created_on=systemDateTime,lastmodified_on=systemDateTime)
                # print("Data saved successfully in table(draft,parent)")

            else:      
                for i in range(global_count+1):
                    secidCh=section_master.objects.filter(section_code=sectionCh[i])[0]
                    secidCh=secidCh.secid

                    if section1Ch!=[None]:
                        secid1Ch=section_master.objects.filter(section_code=section1Ch[i])[0]
                        secid1Ch=secid1Ch.secid

                        doi1Ch1=datetime.strptime(doi1Ch[i],"%d/%m/%Y")
                        doi1Ch2=str(doi1Ch1)
                        x1Ch=doi1Ch2.split(' ')[0]
                    
                    if section2Ch!=[None]:
                        secid2Ch=section_master.objects.filter(section_code=section2Ch[i])[0]
                        secid2Ch=secid2Ch.secid

                        doi2Ch1=datetime.strptime(doi2Ch[i],"%d/%m/%Y")
                        # # print("?????????????????",doi)
                        doi2Ch2=str(doi2Ch1)
                        x2Ch=doi2Ch2.split(' ')[0]

                    doiCh1=datetime.strptime(doiCh[i],"%d/%m/%Y")
                    doiCh2=str(doiCh1)
                    xCh=doiCh2.split(' ')[0]
               

                    desgcCh=Level_Desig.objects.filter(empno=designationCh[i])[0]  
                  

                    m2.roster_detail.objects.create(status=0,roster_id_id=roster_no, created_by=desiglogin,lastmodified_by=desiglogin,designation=desgcCh,doi=xCh,inspectionof=inspectionofCh[i],section=secidCh,detail=detailCh[i],created_on=systemDateTime,lastmodified_on=systemDateTime)
                    if section1Ch!=[None]:  
                        m2.roster_detail.objects.create(status=0,roster_id_id=roster_no,created_by=desiglogin,lastmodified_by=desiglogin,designation=desgcCh,doi=x1Ch,inspectionof=inspectionof1Ch[i],section=secid1Ch,detail=detail1Ch[i],created_on=systemDateTime,lastmodified_on=systemDateTime)
                    if section2Ch!=[None]: 
                        m2.roster_detail.objects.create(status=0,roster_id_id=roster_no,created_by=desiglogin,lastmodified_by=desiglogin,designation=desgcCh,doi=x2Ch,inspectionof=inspectionof2Ch[i],section=secid2Ch,detail=detail2Ch[i],created_on=systemDateTime,lastmodified_on=systemDateTime)
                    # print("Data saved successfully in table(child)")
            
            # print("Data saved successfully in table(draft)")
            m2.einsp_roster.objects.filter(erosterid=roster_no).update(status=0)
            # messages.success(request,'Data has been submitted')
        
        return JsonResponse({"success":True},safe=False)
    return JsonResponse({"success":False},status=404)





def delet(request):
    try:
        if request.method=='GET':
            rostdetailid= request.GET.get('rostdetailid')
            # # print(">>>>>>>>>>>>>>>>>>>>>>",rostdetailid)
            m2.roster_detail.objects.filter(rostdetailid=rostdetailid).update(delete_flag=True)
            
            return JsonResponse({'success':True},safe=False)
        return JsonResponse({'success':False},status=404)  
    except:
        print("The operation can't be performed!")


@login_required
def roster_schedule(request):
    return render(request,'roster_schedule.html')


def delet1(request):
    try:
        if request.method=='GET':
            erosterid= request.GET.get('erosterid')
        
            m2.einsp_roster.objects.filter(erosterid=erosterid).update(delete_flag=True)
            # # print(erosterid)
           
            return JsonResponse({'success':True})
        return JsonResponse({'success':False},status=404)  
    except:
        print("The operation can't be performed!")


def train_details(request):
    if request.method == "GET":
        email=str(request.user)
        username=request.user.username
        rlyid=list(AdminMaster.objects.filter(user_id=username).values('rly_id'))
        rlyid2=rlyid[0]['rly_id']
        
        train_no=[]
        stnshortcode=[]
        # try:
        # designation=Level_Desig.objects.filter(official_email_ID=email)[0]
        # a=designation.rly_unit_id
        # # print(a)

        train_no=list(train_master.objects.filter(div_id_id=rlyid2).values_list('train_no',flat = True).distinct())
        # # print(train_no,"train")
        stnshortcode=list(station_master.objects.filter(div_id_id=rlyid2).values_list('stnshortcode',flat = True).distinct())
        # # print("station",stnshortcode)
        # except:
        #     # print('Error')
        context={
        'train_no':train_no,
        'stnshortcode':stnshortcode
       }   
        return JsonResponse(context, safe = False)
    return JsonResponse({"success":False}, status=400)


@login_required
def roster(request):
    email=str(request.user)
    # # print('email', email)
    username= request.user.username
    if request.user.user_role == 'admin_roster':
        id=request.GET.get('id')
        # # print("????????????????????????????????",id)

        global_count=request.GET.get('global_count')
        # # print("????????????????????????????????",global_count)

        railwayZone=list(railwayLocationMaster.objects.filter(location_type='ZR').values())
        
        user0=list(m2.roster_detail.objects.filter(roster_id=id).values('rostdetailid'))
        count_tb=int(len(user0)/3)
        # # print("------------------",count_tb)    
        user2=[]
        for i in range(len(user0)):
            user2.append(user0[i]['rostdetailid'])

        details=[]
        doi=[]
        inspectionof=[]
        sectionn_code=[]
        designationn=[]

        new_user7 =[]
        if id!=None:   #for edit part 
            user6=m2.einsp_roster.objects.filter(erosterid=id).values()[0]
            user7=list(m2.roster_detail.objects.filter(roster_id_id=id).values('rostdetailid','doi','inspectionof','designation','section','detail', 'designation__designation', 'designation__empno_id__empname'))
            # for i in range(len(user7)):
            for i in range(0, len(user7)+1, 3):
                new_user7.append(i)
            try:
                for y in range(len(new_user7)):
                    for j in range(new_user7[y], new_user7[y+1]):
                        print(j)
                # for x in range(0, j):
                    # new_user7.append(user7[j])
                    # print(y,"-----------------") 
            except:
                pass
            
            # for i in range(len(user7)):
            #     details.append(user7[i]['detail'])
            # # print(detail,'detail')

            
            # for i in range(len(user7)):
            #     doi.append(user7[i]['doi'].strftime('%d/%m/%Y'))
            # # print(doi,'doi')

            
            # for i in range(len(user7)):
            #     inspectionof.append(user7[i]['inspectionof'])
            # # print(inspectionof,'inspectionof')

            # sectiondraft=[]
            
            for i in range(len(user7)):
                # sectiondraft.append(user7[i]['section'])
                section1=section_master.objects.filter(secid=user7[i]['section']).values('section_code')[0]
                user7[i].update({'section_code': section1['section_code']})
                

            # for i in range(len(user7)):
            #     # sectiondraft.append(user7[i]['section'])
            #     desigg=Level_Desig.objects.filter(designation_code=user7[i]['designation']).values('designation','empno_id__empname')[0]
            #     # # print(desigg)
            #     a=desigg['designation']
            #     b=desigg['empno_id__empname']
            #     designationn.append(a)
            #     designationn.append(b)

            # # print("designation",designationn)
            # # print("designation",desigg['empno_id__empname'])
            # # print("designation",desigg['empno_id__empname'])
            
            fdate=str(user6['fromdate'].strftime('%d-%m-%Y'))
            # # print(fdate)
            tdate=str(user6['todate'].strftime('%d-%m-%Y'))
            user6.update({'fdate':fdate,'tdate':tdate})
            # # print("user7",user7)
        else:
            user6=[],
            user7=[]
        # section_code=list(section_master.objects.values('section_code','secid').order_by('section_code').distinct())
        # empname=list(m1.empmast.objects.values('empname').order_by('empname').distinct())
        shortcode=list(inspectiontype_master.objects.values('shortcode','instypeid').distinct('shortcode'))
        rlyid=list(AdminMaster.objects.filter(user_id=username).values('rly_id'))
        rlyid2=rlyid[0]['rly_id']
        # desgc=list(Level_Desig.objects.filter(rly_unit_id=rlyid2).values('designation','empno')).order_by('designation').distinct())
        # # print('acsdcvfffffffffffffffffffffffff',desgc)
        empno=list(Level_Desig.objects.filter(rly_unit_id=rlyid2).values('designation','empno').order_by('designation').distinct())
        # # print('empnoooooo',empno)
        section=[]
        try:
            # designation=Level_Desig.objects.filter(official_email_ID=email)[0]
            # a=designation.rly_unit_id
            section=list(section_master.objects.filter(div_id_id=rlyid2).values('section_code','secid').order_by('section_code').distinct())
            # # print("sectionnnn",section)
        except:
            print('Error')
    
        date_to_disable_ft=list(m2.einsp_roster.objects.values('fromdate','todate'))
        # from datetime import date, timedelta
        list_of_dates = []
        for i in range(len(date_to_disable_ft)):
            start_date =  date_to_disable_ft[i]['fromdate']
            end_date = date_to_disable_ft[i]['todate']    # perhaps date.now()

            delta = end_date - start_date   # returns timedelta
            
            for i in range(delta.days + 1):
                day = start_date + timedelta(days=i)
                list_of_dates.append(str(day.strftime('%d-%m-%Y')))
            # # print("55555555555555555",list_of_dates)
        # date_to_disable_ft=list(m2.einsp_roster.objects.filter(fromdate__range=('fromdate','todate')).values('fromdate','todate'))

        # # print("55555555555555555",date_to_disable_ft)
        # date_to_disable_ftt=[]
        # for i in range(len(date_to_disable_ft)):
        #     date_to_disable_ftt.append(str(date_to_disable_ft[i]['fromdate'].strftime('%d-%m-%Y')))
        #     date_to_disable_ftt.append(str(date_to_disable_ft[i]['todate'].strftime("%d-%m-%Y")))
            # date_to_disable_ftt=date_to_disable_ftt.strftime('%d/%m/%Y')
        # # print("5577777777",str(date_to_disable_ftt))


        date_to_disable_doi=list(m2.roster_detail.objects.values('doi'))
        # # print("55555555555555555",date_to_disable_doi)
        date_to_disable_doii=[]

        for i in range(len(date_to_disable_doi)):
            date_to_disable_doii.append(str(date_to_disable_doi[i]['doi'].strftime('%d-%m-%Y')))
        # # print("iiiiiiiiiiiiiiiiiiiiii",str(date_to_disable_doii))

        context={
            'user2':user2,
            'count_tb1':count_tb,
            'railwayZone':railwayZone,
            'count_tb':range(count_tb),
            'id':id,
            'date_to_disable_ft':list_of_dates,
            'date_to_disable_doi':date_to_disable_doii,
            'empno':empno,
            'section_code':section,
            # 'empname':empname,
            'shortcode':shortcode,
            'user6':user6,
            'detail':details,
            'doi':doi,
            'inspectionof':inspectionof,
            'sectionn_code':sectionn_code,
            'designationn':designationn,
        }
        return render(request,"roster.html",context)
    else:
        return HttpResponseRedirect('/login') 



@login_required
def roster_list(request):
    email=str(request.user)
    # print('email', email)
    username= request.user.username
    if request.user.user_role == 'admin_roster':
        return render(request, 'roster_list.html')
    else:
        return HttpResponseRedirect('/login')

def roster_draft(request):
    email=str(request.user)
    # print('email', email)
    username= request.user.username
    if request.user.user_role == 'admin_roster': 
        tdate=request.GET.get('val')
        roster_no=request.GET.get('erosterid')
        # # print("hhhiiii",roster_no)
        frdate=''
        todate=''
        # # print(tdate)
        if len(tdate)>0:
            frdate=tdate.split('@')[0]
            todate=tdate.split('@')[1]
        # section_code=list(section_master.objects.values('section_code','secid').order_by('section_code').distinct())
        # empname=list(m1.empmast.objects.values('empname').order_by('empname').distinct())
        shortcode=list(inspectiontype_master.objects.values('shortcode','instypeid').distinct('shortcode'))
        rlyid=list(AdminMaster.objects.filter(user_id=username).values('rly_id'))
        rlyid2=rlyid[0]['rly_id']
        # # print('acsdcvfffffffffffffffffffffffff',desgc)
        empno=list(Level_Desig.objects.filter(rly_unit_id=rlyid2).values('designation','empno').order_by('designation').distinct())
        # # print('empnoooooo',empno)
        section=[]
        try:
        #     designation=Level_Desig.objects.filter(official_email_ID=email)[0]
        #     a=designation.rly_unit_id
            section=list(section_master.objects.filter(div_id_id=rlyid2).values('section_code','secid').order_by('section_code').distinct())
        except:
            print('Error')
        context={
            'empno':empno,
            'section_code':section,
            # 'empname':empname,
            'shortcode':shortcode,
            'frdate':frdate,
            'todate':todate,
            'roster_no':roster_no,
        }
        return render(request, 'roster_draft.html',context)
    else:
        return HttpResponseRedirect('/login')
    


@login_required
def roster_draft_list(request):  
    username= request.user.username
    if request.user.user_role == 'admin_roster': 
        return render(request, 'roster_draft_list.html')
    else:
        return HttpResponseRedirect('/login')


def showUserDataa(request):
    roster_no=request.GET.get('roster_no')
    # # print("helloooooooooooooooo",roster_no)
    enddatedt=request.GET.get('enddatedt')
    strtdt=request.GET.get('strtdt')
    strtdt=datetime.strptime(strtdt,"%d/%m/%y")
    enddatedt=datetime.strptime(enddatedt,"%d/%m/%y")
    # # print(strtdt,enddatedt)
    user = list(m2.roster_detail.objects.filter(roster_id_id=roster_no,delete_flag=False).values().order_by('-rostdetailid'))
    user1 = list(m2.roster_detail.objects.filter(roster_id_id=roster_no).values('rostdetailid'))
    # # print('detail id: ',user1) 
    # # print('ytgy: ',user[0]['designation'])
    for i in range(len(user)): 
        user1=list(Level_Desig.objects.filter(designation_code=user[i]['designation_id']).values('designation').distinct())
        user[i].update({'xyz':user1[0]['designation']})
        # # print(user[i].update({'xyz':user1[0]['designation']}))
        # # print('heloooooooooooooooooooooooooooooo')
        dat=''
        if user[i]['doi'] is not None:
            dat=user[i]['doi'].strftime('%d/%m/%y')
            user[i].update({'doi':dat})
            # # print("dateee", user[i]['doi'])
        if user[i]['inspectionof']:
            user2=list(
                inspectiontype_master.objects.filter(shortcode=user[i]['inspectionof']).values('shortcode'))
            user[i].update({'abc':user2[0]['shortcode']})
    for i in range(len(user)): 
        user2=list(section_master.objects.filter(secid=user[i]['section']).values('section_code').distinct())
        user[i].update({'abcd':user2[0]['section_code']})
        # # print(user[i].update({'xyz':user1[0]['designation']}))
        # # print('heloooooooooooooooooooooooooooooo')
     
    return JsonResponse({'user':user, 'user1':user},safe=False)


def showUserDataDraft(request):
    roster_no=request.GET.get('roster_no')
    # # print("hellooo",roster_no)
    enddatedt=request.GET.get('enddatedt')
    strtdt=request.GET.get('strtdt')
    strtdt=datetime.strptime(strtdt,"%d/%m/%y")
    enddatedt=datetime.strptime(enddatedt,"%d/%m/%y")
    # # print(strtdt,enddatedt)
    # user = list(m2.roster_detail.objects.filter(doi__range=[strtdt,enddatedt],delete_flag=False,status=0).values().order_by('-rostdetailid'))
    user = list(m2.roster_detail.objects.filter(roster_id_id=roster_no,delete_flag=False,status=0).values().order_by('-rostdetailid'))
    user1 = list(m2.roster_detail.objects.filter(roster_id_id=roster_no).values('rostdetailid'))
    # # print("detailid",user)
    # sec=user1.section
    # # print("sec",sec)
    # secid=list(section_master.objects.filter(secid=sec).values('section_code'))
    # # print("section/////////////////",secid)

    # # print('ytgy: ',user[0]['designation'])
    for i in range(len(user)): 
        user1=list(Level_Desig.objects.filter(designation_code=user[i]['designation_id']).values('designation').distinct())
        user[i].update({'xyz':user1[0]['designation']})
        # # print(user[i].update({'xyz':user1[0]['designation']}))
        # # print('heloooooooooooooooooooooooooooooo')
        user2=list(section_master.objects.filter(secid=user[i]['section']).values('section_code').distinct())
        # # print("user2",user2)
        user[i].update({'sec':user2[0]['section_code']})
        dat=''
        if user[i]['doi'] is not None:
            dat=user[i]['doi'].strftime('%d/%m/%y')
            user[i].update({'doi':dat})
            # # print("dateee", user[i]['doi'])
        if user[i]['inspectionof']:
            user3=list(inspectiontype_master.objects.filter(shortcode=user[i]['inspectionof']).values('shortcode'))
            # # print("hi",user3)
            user[i].update({'abc':user3[0]['shortcode']})
            # # print("dateee", user3[i]['shortcode'])
   
    # # print('User: ',user)  
    return JsonResponse({'user':user},safe=False)



def roster_details2(request):
    email=str(request.user)
    # print('email', email)
    username= request.user.username
    if request.user.user_role == 'admin_roster': 
        tdate=request.GET.get('val')
        frdate=''
        todate=''
        # # print(tdate)
        if len(tdate)>0:
            frdate=tdate.split('@')[0]
            todate=tdate.split('@')[1]
        empno=list(Level_Desig.objects.values('designation','empno').distinct())
        # section_code=list(section_master.objects.values('section_code','secid').order_by('section_code').distinct())
        section=[]
        empname=list(m1.empmast.objects.values('empname').order_by('empname').distinct())
        shortcode=list(inspectiontype_master.objects.values('shortcode','instypeid').distinct('shortcode'))
        try:
            designation=Level_Desig.objects.filter(official_email_ID=email)[0]
            # # print('designation: ',designation)
            # # print('sfhzvxhjbsxjbjsn', designation.rly_unit_id)
            a=designation.rly_unit_id
            # # print (a)
            section=list(section_master.objects.filter(div_id_id=a).values('section_code','secid').order_by('section_code').distinct())
            # # print('Section: ',section)
        except:
            print('Error ')
        context={
            'empno':empno,
            'section_code':section,
            'empname':empname,
            'shortcode':shortcode,
            'frdate':frdate,
            'todate':todate,
        }
        return render(request,'roster_details2.html',context)
    else:
        return HttpResponseRedirect('/login')
    


def showUserData1(request):
    user = list(m2.einsp_roster.objects.exclude(status=0).filter(delete_flag=False).values().order_by('-erosterid'))
    # # print("userrrr",user)
    curr_date=date.today()
    # curr_date=curr_date.strftime('%d/%m/%y')
    # # print('Current Date: ',curr_date)


    for i in range(len(user)):
        # id=user[i]['erosterid']
        # # print("rosterrr id123456789",id)
        dat=''
        if user[i]['fromdate'] is not None:
            datt=user[i]['fromdate']
            dat=user[i]['fromdate'].strftime('%d/%m/%y')
            user[i].update({'fromdate':dat})
        dat1=''
        if user[i]['todate'] is not None:
            datt1=user[i]['todate']
            dat1=user[i]['todate'].strftime('%d/%m/%y')
            user[i].update({'todate':dat1})
        
        if datt < curr_date and datt1 < curr_date:
            if user[i]['status']=='3':
                user[i].update({'status1':'Completed'})
            if user[i]['status']!='3':
                m2.einsp_roster.objects.filter(erosterid=user[i]['erosterid']).update(status=3)
            # s3=user[i]['status1']
            # # print('s3',s3)
            # id=user[i]['erosterid']
            # m2.einsp_roster.objects.filter(erosterid=id).update(status=0)

        elif datt > curr_date and datt1 > curr_date:
            if user[i]['status']=='0':
                user[i].update({'status1':'Draft'})
                if user[i]['status']!='0':
                    m2.einsp_roster.objects.filter(erosterid=user[i]['erosterid']).update(status=0)
            else:
                user[i].update({'status1':'Pending'})
                if user[i]['status']!='1':
                    m2.einsp_roster.objects.filter(erosterid=user[i]['erosterid']).update(status=1)

            # s1=user[i]['status1']
            # # print('s1',s1)
            # id=user[i]['erosterid']
            # m2.einsp_roster.objects.filter(erosterid=id).update(status=1)

        elif datt <= curr_date and datt1 >= curr_date:
            if user[i]['status']=='0':
                user[i].update({'status1':'Draft'})
                # if user[i]['status']!='0':
                #     m2.einsp_roster.objects.filter(erosterid=user[i]['erosterid']).update(status=0)
            else:
                user[i].update({'status1':'Ongoing'})
                if user[i]['status']!='2':
                    m2.einsp_roster.objects.filter(erosterid=user[i]['erosterid']).update(status=2)
            # # print('s2',s2)

        else:
            user[i].update({'status1': 'Ongoing'})
            # id=user[i]['erosterid']
            # m2.einsp_roster.objects.filter(erosterid=id).update(status=2)
    #     user1=list(models.Level_Desig.objects.filter(e
    # mpno=user[i]['inspection_officer_id']).values('designation').distinct())
    #     user[i].update({'xyz':user1[0]['designation']})
    # # print(user)
    # # print('User: ',user[5]['inspectionof'])
    # for i in range(len(user)):
    #     if user[i]['inspectionof']:
    #         user2=list(inspectiontype_master.objects.filter(instypeid=user[i]['inspectionof']).values('shortcode'))
    #         user[i].update({'abc':user2[0]['shortcode']})


    # for created_by update
    # for i in range(len(user)):
    #     user1=list(Level_Desig.objects.filter(empno_id=user[i]['created_by']).values('designation').distinct())
    #     user[i].update({'xyz':user1[0]['designation']})
      
    return JsonResponse({'user':user},safe=False)



def showDraftData1(request):
    
    user = list(m2.einsp_roster.objects.filter(status=0,delete_flag=False).values().order_by('-erosterid'))
    # # print("2222222222222222",user)
    curr_date=date.today()
    # curr_date=curr_date.strftime('%d/%m/%y')
    # # print('Current Date: ',curr_date)
    
    for i in range(len(user)):
        id=user[i]['erosterid']
        # # print("rosterrr id//////////",id)
        dat=''
        if user[i]['fromdate'] is not None:
            datt=user[i]['fromdate']
            dat=user[i]['fromdate'].strftime('%d/%m/%y')
            user[i].update({'fromdate':dat})

        dat1=''
        if user[i]['todate'] is not None:
            datt1=user[i]['todate']
            dat1=user[i]['todate'].strftime('%d/%m/%y')
            user[i].update({'todate':dat1})
        
        if datt < curr_date and datt1 < curr_date:
            user[i].update({'status1':'Completed'})
            # if user[i]['status']!='3':
            #     m2.einsp_roster.objects.filter(erosterid=user[i]['erosterid']).update(status=3)
            s3=user[i]['status1']
            
        elif datt > curr_date and datt1 > curr_date:
            if user[i]['status']=='1':
                user[i].update({'status1':'Pending'})
                # if user[i]['status']!='1':
                #     m2.einsp_roster.objects.filter(erosterid=user[i]['erosterid']).update(status=1)
            else:
                user[i].update({'status1':'Draft'})
                if user[i]['status']!='0':
                    m2.einsp_roster.objects.filter(erosterid=user[i]['erosterid']).update(status=0)

        elif datt <= curr_date and datt1 >= curr_date:
            if user[i]['status']=='2':
                user[i].update({'status1':'Ongoing'})
                # if user[i]['status']!='2':
                #     m2.einsp_roster.objects.filter(erosterid=user[i]['erosterid']).update(status=2)
            # s2=user[i]['status1']
            else:
                user[i].update({'status1':'Draft'})
                if user[i]['status']!='0':
                    m2.einsp_roster.objects.filter(erosterid=user[i]['erosterid']).update(status=0)
            # # print('s2',s2)

        # else:
        #     user[i].update({'status1': 'Ongoing'})

            
            # m2.einsp_roster.objects.filter(erosterid=id).update(status=2)
    #     user1=list(models.Level_Desig.objects.filter(e
    # mpno=user[i]['inspection_officer_id']).values('designation').distinct())
    #     user[i].update({'xyz':user1[0]['designation']})
    # # print(user)
    # # print('User: ',user[5]['inspectionof'])
    # for i in range(len(user)):
    #     if user[i]['inspectionof']:
    #         user2=list(inspectiontype_master.objects.filter(instypeid=user[i]['inspectionof']).values('shortcode'))
    #         user[i].update({'abc':user2[0]['shortcode']})
    # for i in range(len(user)):
    #     user1=list(Level_Desig.objects.filter(empno_id=user[i]['created_by']).values('designation').distinct())
    #     user[i].update({'xyz':user1[0]['designation']})
        # # print(user[i]['xyz'])
        # # print('created byyyyyyyyyyyy')  
    return JsonResponse({'user':user},safe=False)



def edit_details(request):
    if request.method=='GET':
        id=request.GET.get('id')
        # # print("????????????????????????????????",id)
        user=m2.roster_detail.objects.filter(rostdetailid=id).values().distinct()[0]
        user1=m2.roster_detail.objects.filter(rostdetailid=id)[0]
        # # print(user1.doi)
        dte=user1.doi
        doi2=datetime.strftime(dte,"%d/%m/%Y")
        # # print("ff",doi2)
        
        desig=user1.designation_id
        # # print(desig)
        designation=Level_Desig.objects.filter(designation_code=desig).values('designation','empno_id__empname')[0]
        # # print("designation",designation['empno_id__empname'])
        sec=user1.section
        inspection=user1.inspectionof
        # # print("sec",sec)
        # # print("sec",inspection)
        secc=section_master.objects.filter(secid=sec)[0]
        # secid=secc.section_code
        # # print("sect",secid)
    
        # # print(user)
        return JsonResponse({'user':user,'date':doi2,'designation':designation['designation'],'empname':designation['empno_id__empname'],'section':secc.section_code},safe=False)


def edit_details_draft(request):
    if request.method=='GET':
        id=request.GET.get('id')
        # # print("????????????????????????????????",id)
        user=list(m2.einsp_roster.objects.filter(erosterid=id).values('fromdate','todate').distinct())
        user0=list(m2.roster_detail.objects.filter(roster_id=id).values('rostdetailid'))
        user2=[]
        for i in range(len(user0)):
            user2.append(user0[i]['rostdetailid'])
        # detailid=user2.rostdetailid
        # # print("11111111111111",user2)

        user1=[]
        for i in range(len(user)):
            user1.append(str(user[i]['fromdate'].strftime('%d-%m-%Y')))
            user1.append(str(user[i]['todate'].strftime("%d-%m-%Y")))
        # user1=m2.roster_detail.objects.filter(rostdetailid=id)[0]
        # # print("hiii",user1)
    
        # # print("#####################",user)
        return JsonResponse({'user1':user1,'id':id, 'user2':user2},safe=False)


def saveDuration(request):
    if request.method=='POST':
        rosterid=request.POST.get('rosterid')
        # # print("rosterid",rosterid)
        detailid=request.POST.get('detailid')
        # # print("detailid",detailid)
        username= request.user.username
        desig=list(AdminMaster.objects.filter(user_id=username).values('designation'))
        desiglogin=desig[0]['designation']
        fromdate = request.POST.get('fromdate')
        # # print("hhhhhh",fromdate)
        todate = request.POST.get('todate')
        try:
            fromdate=datetime.strptime(fromdate,"%d-%m-%Y")
            todate=datetime.strptime(todate,"%d-%m-%Y")
        except:
            fromdate=datetime.strptime(fromdate,"%d/%m/%Y")
            todate=datetime.strptime(todate,"%d/%m/%Y")
        
        # designation=Level_Desig.objects.filter(official_email_ID=email)[0]
        # divid=designation.rly_unit_id
        rlyid=list(AdminMaster.objects.filter(user_id=username).values('rly_id'))
        rlyid2=rlyid[0]['rly_id']
        divid=railwayLocationMaster.objects.filter(rly_unit_code=rlyid2)[0]
        
        lcode=divid.parent_location_code
        
        rlyid=railwayLocationMaster.objects.filter(location_code=lcode)[0]
        # # print("rlyid", rlyid)
        systemDateTime = datetime.now()
        systemDateTime = systemDateTime.strftime("%Y-%m-%d %H:%M:%S")
      
        m2.einsp_roster.objects.create(status=0,div_id_id=divid,rly_id_id=rlyid,fromdate=fromdate,todate=todate,created_on=systemDateTime,lastmodified_on=systemDateTime,created_by=desiglogin,lastmodified_by=desiglogin)
        # print("Data saved successfully in table")
        obj = list(m2.einsp_roster.objects.values().order_by('-erosterid'))[0]
        # user0=list(m2.roster_detail.objects.filter(roster_id=id).values('rostdetailid'))
        # user2=[]
        # for i in range(len(user0)):
        #     user2.append(user0[i]['rostdetailid'])
        # # detailid=user2.rostdetailid
       
        datestore=list(m2.roster_detail.objects.values('doi'))
        # # print('date list',datestore)

        return JsonResponse({"obj":obj,"detailid":detailid},safe=False)
    return JsonResponse({"success":False},status=404)


def saveDurationUpdate(request):
    if request.method=='POST':
        rosterid=request.POST.get('rosterid')
        # # print("rosterid",rosterid)
        detailid=request.POST.get('detailid')
        # # print("detailid",detailid)
        email=str(request.user.username)
        desig=list(AdminMaster.objects.filter(user_id=email).values('designation'))
        desiglogin=desig[0]['designation']
        fromdate = request.POST.get('fromdate')
        # # print("hhhhhh",fromdate)
        todate = request.POST.get('todate')
        try:
            fromdate=datetime.strptime(fromdate,"%d-%m-%Y")
            todate=datetime.strptime(todate,"%d-%m-%Y")
        except:
            fromdate=datetime.strptime(fromdate,"%d/%m/%Y")
            todate=datetime.strptime(todate,"%d/%m/%Y")
        
        # designation=Level_Desig.objects.filter(official_email_ID=email)[0]
        # divid=designation.rly_unit_id
        rlyid=list(AdminMaster.objects.filter(user_id=email).values('rly_id'))
        rlyid2=rlyid[0]['rly_id']
        divid=railwayLocationMaster.objects.filter(rly_unit_code=rlyid2)[0]
        # # print("div id", divid)
        lcode=divid.parent_location_code
        # # print("location code",lcode)
        rlyid=railwayLocationMaster.objects.filter(location_code=lcode)[0]
        # # print("rlyid", rlyid)
        systemDateTime = datetime.now()
        systemDateTime = systemDateTime.strftime("%Y-%m-%d %H:%M:%S")
      
        m2.einsp_roster.objects.filter(erosterid=rosterid).update(status=0,div_id_id=divid,rly_id_id=rlyid,fromdate=fromdate,todate=todate,created_on=systemDateTime,lastmodified_on=systemDateTime,created_by=desiglogin,lastmodified_by=desiglogin)
        # print("Data saved successfully in table(update)")
        obj = list(m2.einsp_roster.objects.values().order_by('-erosterid'))[0]

        return JsonResponse({"obj":obj,"detailid":detailid},safe=False)
    return JsonResponse({"success":False},status=404)


def DurationFinal(request):
    if request.method=='POST':
        rosterid=request.POST.get('rosterid')
        # # print("rosterid",rosterid)
        roster=request.POST.get('roster')
        # # print("roster",roster)
        email=str(request.user.username)
        desig=list(AdminMaster.objects.filter(user_id=email).values('designation'))
        desiglogin=desig[0]['designation']
        fromdate = request.POST.get('fromdate')
        # # print("hhhhhh",fromdate)
        todate = request.POST.get('todate')
        try:
            fromdate=datetime.strptime(fromdate,"%d-%m-%Y")
            todate=datetime.strptime(todate,"%d-%m-%Y")
        except:
            fromdate=datetime.strptime(fromdate,"%d/%m/%Y")
            todate=datetime.strptime(todate,"%d/%m/%Y")
        
        # designation=Level_Desig.objects.filter(official_email_ID=email)[0]
        # divid=designation.rly_unit_id
        rlyid=list(AdminMaster.objects.filter(user_id=email).values('rly_id'))
        rlyid2=rlyid[0]['rly_id']
        divid=railwayLocationMaster.objects.filter(rly_unit_code=rlyid2)[0]

        lcode=divid.parent_location_code
        # # print("location code",lcode)
        rlyid=railwayLocationMaster.objects.filter(location_code=lcode)[0]
        # # print("rlyid", rlyid)
        systemDateTime = datetime.now()
        systemDateTime = systemDateTime.strftime("%Y-%m-%d %H:%M:%S")
      
        m2.einsp_roster.objects.filter(erosterid=roster).update(status=1,div_id_id=divid,rly_id_id=rlyid,fromdate=fromdate,todate=todate,created_on=systemDateTime,lastmodified_on=systemDateTime,created_by=desiglogin,lastmodified_by=desiglogin)
        # print("Data saved successfully in table(without id)")
        obj = list(m2.einsp_roster.objects.values().order_by('-erosterid'))[0]

        return JsonResponse({"obj":obj},safe=False)
    return JsonResponse({"success":False},status=404)


def DurationFinal_id(request):
    if request.method=='POST':
        rosterid=request.POST.get('rosterid')
        # # print("rosterid1",rosterid)
        detailid=request.POST.get('detailid')
        # # print("hiidetailid",detailid)
        email=str(request.user.username)
        desig=list(AdminMaster.objects.filter(user_id=email).values('designation'))
        desiglogin=desig[0]['designation']
        fromdate = request.POST.get('fromdate')
        # # print("hhhhhh1",fromdate)
        todate = request.POST.get('todate')
        try:
            fromdate=datetime.strptime(fromdate,"%d-%m-%Y")
            todate=datetime.strptime(todate,"%d-%m-%Y")
        except:
            fromdate=datetime.strptime(fromdate,"%d/%m/%Y")
            todate=datetime.strptime(todate,"%d/%m/%Y")
        
        # designation=Level_Desig.objects.filter(official_email_ID=email)[0]
        # divid=designation.rly_unit_id
        rlyid=list(AdminMaster.objects.filter(user_id=email).values('rly_id'))
        rlyid2=rlyid[0]['rly_id']
        divid=railwayLocationMaster.objects.filter(rly_unit_code=rlyid2)[0]
        lcode=divid.parent_location_code
        # # print("location code",lcode)
        rlyid=railwayLocationMaster.objects.filter(location_code=lcode)[0]
        # # print("rlyid", rlyid)
        systemDateTime = datetime.now()
        systemDateTime = systemDateTime.strftime("%Y-%m-%d %H:%M:%S")
      
        m2.einsp_roster.objects.filter(erosterid=rosterid).update(status=1,div_id_id=divid,rly_id_id=rlyid,fromdate=fromdate,todate=todate,created_on=systemDateTime,lastmodified_on=systemDateTime,created_by=desiglogin,lastmodified_by=desiglogin)
        # print("Data saved successfully in table(id)")
        obj = list(m2.einsp_roster.objects.values().order_by('-erosterid'))[0]

        return JsonResponse({"obj":obj},safe=False)
    return JsonResponse({"success":False},status=404)


def DurationUpDraft(request):
    if request.method=='POST':
        rosterid=request.POST.get('rosterid')
        # # print("rosterid",rosterid)
        roster=request.POST.get('roster')
        # # print("roster",roster)
        email=str(request.user.username)
        desig=list(AdminMaster.objects.filter(user_id=email).values('designation'))
        desiglogin=desig[0]['designation']
        fromdate = request.POST.get('fromdate')
        # # print("hhhhhh",fromdate)
        todate = request.POST.get('todate')
        try:
            fromdate=datetime.strptime(fromdate,"%d-%m-%Y")
            todate=datetime.strptime(todate,"%d-%m-%Y")
        except:
            fromdate=datetime.strptime(fromdate,"%d/%m/%Y")
            todate=datetime.strptime(todate,"%d/%m/%Y")
        
        # designation=Level_Desig.objects.filter(official_email_ID=email)[0]
        # divid=designation.rly_unit_id
        rlyid=list(AdminMaster.objects.filter(user_id=email).values('rly_id'))
        rlyid2=rlyid[0]['rly_id']
        divid=railwayLocationMaster.objects.filter(rly_unit_code=rlyid2)[0]
        lcode=divid.parent_location_code
        # # print("location code",lcode)
        rlyid=railwayLocationMaster.objects.filter(location_code=lcode)[0]
        # # print("rlyid", rlyid)
        systemDateTime = datetime.now()
        systemDateTime = systemDateTime.strftime("%Y-%m-%d %H:%M:%S")
      
        m2.einsp_roster.objects.filter(erosterid=roster).update(status=0,div_id_id=divid,rly_id_id=rlyid,fromdate=fromdate,todate=todate,created_on=systemDateTime,lastmodified_on=systemDateTime,created_by=desiglogin,lastmodified_by=desiglogin)
        # print("Data saved successfully in table(without id(draft))")
        obj = list(m2.einsp_roster.objects.values().order_by('-erosterid'))[0]

        return JsonResponse({"obj":obj},safe=False)
    return JsonResponse({"success":False},status=404)


def DurationUp_id(request):
    if request.method=='POST':
        rosterid=request.POST.get('rosterid')
        # # print("rosterid",rosterid)
        email=str(request.user.username)
        desig=list(AdminMaster.objects.filter(user_id=email).values('designation'))
        desiglogin=desig[0]['designation']
        fromdate = request.POST.get('fromdate')
        # # print("hhhhhh",fromdate)
        todate = request.POST.get('todate')
        try:
            fromdate=datetime.strptime(fromdate,"%d-%m-%Y")
            todate=datetime.strptime(todate,"%d-%m-%Y")
        except:
            fromdate=datetime.strptime(fromdate,"%d/%m/%Y")
            todate=datetime.strptime(todate,"%d/%m/%Y")
        
        # designation=Level_Desig.objects.filter(official_email_ID=email)[0]
        # divid=designation.rly_unit_id
        rlyid=list(AdminMaster.objects.filter(user_id=email).values('rly_id'))
        rlyid2=rlyid[0]['rly_id']
        divid=railwayLocationMaster.objects.filter(rly_unit_code=rlyid2)[0]
        # # print("div id", divid)
        lcode=divid.parent_location_code
        # # print("location code",lcode)
        rlyid=railwayLocationMaster.objects.filter(location_code=lcode)[0]
        # # print("rlyid", rlyid)
        systemDateTime = datetime.now()
        systemDateTime = systemDateTime.strftime("%Y-%m-%d %H:%M:%S")
      
        m2.einsp_roster.objects.filter(erosterid=rosterid).update(status=0,div_id_id=divid,rly_id_id=rlyid,fromdate=fromdate,todate=todate,created_on=systemDateTime,lastmodified_on=systemDateTime,created_by=desiglogin,lastmodified_by=desiglogin)
        # print("Data saved successfully in table(id(draft))")
        obj = list(m2.einsp_roster.objects.values().order_by('-erosterid'))[0]
    
        return JsonResponse({"obj":obj},safe=False)
    return JsonResponse({"success":False},status=404)


def getFilterValue(request):
    if request.method=='GET':
        date1 = request.GET.get('date1')
        date2 = request.GET.get('date2')
        # # print(">>>>>>>>>>>>>>>>>>>>>>>>",date1)
        # # print(">>>>>>>>>>>>>>>>>>>>>>>>",date2)
        # status = request.GET.get('status')
        # # print(status)
       
        # date1=datetime.strptime(date1,'%d-%m-%Y')
        # date2=datetime.strptime(date2,'%d-%m-%Y')
# slicing
        d1=str(date1)
        dte='' . join(map(str,d1))
        dte1=dte[6:10]+"-"+dte[3:5]+"-"+dte[0:2]
        # # print("jjjjjjjjjjjjjjj",dte1)
        d2=str(date2)
        dtee='' . join(map(str,d2))
        dte2=dtee[6:10]+"-"+dtee[3:5]+"-"+dtee[0:2]
        # # print("jjjjjjjjjjjjjjj",dte2)
        curr_date=date.today()
        # curr_date=curr_date.strftime('%d/%m/%y')
        if dte1 and dte2 :
            user = list(m2.einsp_roster.objects.exclude(status=0).filter(fromdate__range=[dte1,dte2],delete_flag=False).values().order_by('-erosterid'))

            # for i in range(len(user)):
            #     user1=list(Level_Desig.objects.filter(empno_id=user[i]['created_by']).values('designation').distinct())
            #     user[i].update({'xyz':user1[0]['designation']}) 

            for i in range(len(user)):       
                dat=''
                if user[i]['fromdate'] is not None:
                    datt=user[i]['fromdate']
                    dat=user[i]['fromdate'].strftime('%d/%m/%y')
                    user[i].update({'fromdate':dat})
                dat1=''
                if user[i]['todate'] is not None:
                    datt1=user[i]['todate']
                    dat1=user[i]['todate'].strftime('%d/%m/%y')
                    user[i].update({'todate':dat1})
                
                if datt < curr_date and datt1 < curr_date:
                    user[i].update({'status1':'Completed'})
                    if user[i]['status']!='3':
                        m2.einsp_roster.objects.filter(erosterid=user[i]['erosterid']).update(status=3)
            

                elif datt > curr_date and datt1 > curr_date:
                    if user[i]['status']=='1':
                        user[i].update({'status1':'Pending'})
                    else:
                        user[i].update({'status1':'Pending'})
                        m2.einsp_roster.objects.filter(erosterid=user[i]['erosterid']).update(status=1)
                            
                    # else:
                    #     user[i].update({'status1':'Draft'})
                    #     if user[i]['status']!='0':
                    #         m2.einsp_roster.objects.filter(erosterid=user[i]['erosterid']).update(status=0)

                elif datt <= curr_date and datt1 >= curr_date:
                    if user[i]['status']=='2':
                        user[i].update({'status1':'Ongoing'})
                    else:
                        user[i].update({'status1':'Ongoing'})
                        m2.einsp_roster.objects.filter(erosterid=user[i]['erosterid']).update(status=2)
                    # else:
                    #     user[i].update({'status1':'Draft'})
                    #     if user[i]['status']!='0':
                    #         m2.einsp_roster.objects.filter(erosterid=user[i]['erosterid']).update(status=0)
                    # s2=user[i]['status1']
                    # # print('s2',s2)

                else:
                    user[i].update({'status1': 'Ongoing'})
        
        return JsonResponse({'user':user},safe=False)




def getFilterValueDraft(request):
    if request.method=='GET':
        # user = list(m2.einsp_roster.objects.filter(status=0,delete_flag=False).values().order_by('-erosterid'))
        # # print("2222222222222222",user)
        date1 = request.GET.get('date1')
        date2 = request.GET.get('date2')

# slicing
        d1=str(date1)
        dte='' . join(map(str,d1))
        dte1=dte[6:10]+"-"+dte[3:5]+"-"+dte[0:2]
        # # print("jjjjjjjjjjjjjjj",dte1)
        d2=str(date2)
        dtee='' . join(map(str,d2))
        dte2=dtee[6:10]+"-"+dtee[3:5]+"-"+dtee[0:2]
        # # print("jjjjjjjjjjjjjjj",dte2)
        curr_date=date.today()
        # curr_date=curr_date.strftime('%d/%m/%y')
        if dte1 and dte2 :
            user = list(m2.einsp_roster.objects.filter(status=0,fromdate__range=[dte1,dte2],delete_flag=False).values().order_by('-erosterid'))

            # for i in range(len(user)):
            #     user1=list(Level_Desig.objects.filter(empno_id=user[i]['created_by']).values('designation').distinct())
            #     user[i].update({'xyz':user1[0]['designation']}) 

            for i in range(len(user)):       
                dat=''
                if user[i]['fromdate'] is not None:
                    datt=user[i]['fromdate']
                    dat=user[i]['fromdate'].strftime('%d/%m/%y')
                    user[i].update({'fromdate':dat})
                dat1=''
                if user[i]['todate'] is not None:
                    datt1=user[i]['todate']
                    dat1=user[i]['todate'].strftime('%d/%m/%y')
                    user[i].update({'todate':dat1})
                
                if datt < curr_date and datt1 < curr_date:
                    user[i].update({'status1':'Completed'})
                    if user[i]['status']!='3':
                        m2.einsp_roster.objects.filter(erosterid=user[i]['erosterid']).update(status=3)
                   
            

                elif datt > curr_date and datt1 > curr_date:
                    if user[i]['status']=='1':
                        user[i].update({'status1':'Pending'})
                    elif user[i]['status']!='1':
                            m2.einsp_roster.objects.filter(erosterid=user[i]['erosterid']).update(status=1)
                    else:
                        user[i].update({'status1':'Draft'})
                        if user[i]['status']!='0':
                            m2.einsp_roster.objects.filter(erosterid=user[i]['erosterid']).update(status=0)

                elif datt <= curr_date and datt1 >= curr_date:
                    if user[i]['status']=='2':
                        user[i].update({'status1':'Ongoing'})
                    elif user[i]['status']!='2':
                        m2.einsp_roster.objects.filter(erosterid=user[i]['erosterid']).update(status=2)
                    else:
                        user[i].update({'status1':'Draft'})
                        if user[i]['status']!='0':
                            m2.einsp_roster.objects.filter(erosterid=user[i]['erosterid']).update(status=0)        
                    # s2=user[i]['status1']
                    # # print('s2',s2)

                else:
                    user[i].update({'status1': 'Ongoing'})
        
        return JsonResponse({'user':user},safe=False)



@login_required
def view_roster(request):
    email=str(request.user)
    # print('email', email)
    username= request.user.username
    if request.user.user_role == 'admin_roster': 
       
        tdate=request.GET.get('val')
        roster_no=request.GET.get('erosterid')
        # # print("hhhiiii",roster_no)
        frdate=''
        todate=''
        # # print(tdate)
        if len(tdate)>0:
            frdate=tdate.split('@')[0]
            todate=tdate.split('@')[1]
        # section_code=list(section_master.objects.values('section_code','secid').order_by('section_code').distinct())

        # empname=list(m1.empmast.objects.values('empname').order_by('empname').distinct())
        shortcode=list(inspectiontype_master.objects.values('shortcode','instypeid').distinct('shortcode'))
        rlyid=list(AdminMaster.objects.filter(user_id=username).values('rly_id'))
        rlyid2=rlyid[0]['rly_id']
        # desgc=list(Level_Desig.objects.filter(rly_unit_id=rlyid2).values('designation','empno')).order_by('designation').distinct())
        # # print('acsdcvfffffffffffffffffffffffff',desgc)
        empno=list(Level_Desig.objects.filter(rly_unit_id=rlyid2).values('designation','empno').order_by('designation').distinct())
        section=[]
        try:
            # designation=Level_Desig.objects.filter(official_email_ID=email)[0]
            # a=designation.rly_unit_id
            section=list(section_master.objects.filter(div_id_id=rlyid2).values('section_code','secid').order_by('section_code').distinct())
        except:
            print('Error')
        context={
            'empno':empno,
            'section_code':section,
            # 'empname':empname,
            'shortcode':shortcode,
            'frdate':frdate,
            'todate':todate,
            'roster_no':roster_no,
        }
        return render(request,'view_roster.html',context)
    else:
        return HttpResponseRedirect('/login')



def update_m(request):
    if request.method=='POST':
        email=str(request.user.username)
        # designation in form
        designation = request.POST.get('designation')  
        # id=designation.rostdetailid
        
        doi = request.POST.get('doi')
        doi=datetime.strptime(doi,"%d/%m/%Y")
        # # print("?????????????????",doi)
        doi=str(doi)
        x=doi.split(' ')[0]
        # # print('uduu ',x)
        id=request.POST.get('id')
        inspectionof = request.POST.get('inspectionof')
        section = request.POST.get('section')
        # # print("......",section)
        detail=request.POST.get('detail')
        # designation code
        desgc=Level_Desig.objects.filter(designation=designation)[0]  
        # # print("designation code:",desgc)
        # # print(type(section),section)
        # desiglogin=Level_Desig.objects.filter(designation=email)[0]
        
        secid=section.split(',')[0]
        # section_code=section.split(',')[1]
        # # print(id,designation,x,inspectionof,section_code,detail)
        m2.roster_detail.objects.filter(rostdetailid=id).update(status=1,designation=desgc,doi=x,inspectionof=inspectionof,section=secid,detail=detail)
           
        return JsonResponse({'success':True})
    return JsonResponse({'success':False},status=400)

def update_m1(request):
    if request.method=='POST':
        email=str(request.user)
        # designation in form
        designation = request.POST.get('designation1')

        # # print("ooooo",designation)  
        # id=designation.rostdetailid
        
        doi = request.POST.get('doi1')
        # # print("......",doi)
        doi=datetime.strptime(doi,"%d/%m/%Y")
        # # print("?????????????????",doi)
        doi=str(doi)
        x=doi.split(' ')[0]
        # # print('uduu ',x)
        id=request.POST.get('id')
        inspectionof = request.POST.get('inspectionof1')
        # # print("ooooo",inspectionof) 
        section = request.POST.get('section1')
        # # print("sssssssss",section)
        detail=request.POST.get('detail1')
        # # print("ooooo",inspectionof) 
        # designation code
        desgc=Level_Desig.objects.filter(designation=designation).values('designation_code') 

        # # print("designation code:",desgc)
        # # print(type(section),section)
        # desiglogin=Level_Desig.objects.filter(official_email_ID=email)[0]
        
        # secid=section.split(',')[0]
        # section_code=section.split(',')[1]
        sec=section_master.objects.filter(section_code=section).values('secid')
        m2.roster_detail.objects.filter(rostdetailid=id).update(status=0,designation=desgc,doi=x,inspectionof=inspectionof,section=sec,detail=detail)
           
        return JsonResponse({'success':True})
    return JsonResponse({'success':False},status=400)



def update_m2(request):
    if request.method=='POST':
        email=str(request.user)
        # designation in form
        designation = request.POST.get('designation')
 
        # id=designation.rostdetailid
        
        doi = request.POST.get('doi')
        # # print("......",doi)
        doi=datetime.strptime(doi,"%d/%m/%Y")
        # # print("?????????????????",doi)
        doi=str(doi)
        x=doi.split(' ')[0]
        # # print('uduu ',x)
        id=request.POST.get('id')
        inspectionof = request.POST.get('inspectionof')
        # # print("ooooo",inspectionof) 
        section = request.POST.get('section')
        # # print("sssssssss",section)
        detail=request.POST.get('detail')
        # # print("ooooo",inspectionof) 
        # designation code
        desgc=Level_Desig.objects.filter(designation=designation).values('designation_code') 

        sec=section_master.objects.filter(section_code=section).values('secid')
      
        m2.roster_detail.objects.filter(rostdetailid=id).update(status=1,designation=desgc,doi=x,inspectionof=inspectionof,section=sec,detail=detail)
           
        return JsonResponse({'success':True})
    return JsonResponse({'success':False},status=400)
def user(request):
    return render(request,'user.html') 
def inspection_view(request):
    return render(request,'inspection_view.html')
def inspection_add(request):
    return render(request,'inspection_add.html')

def UNDERDEV(request):
    return render(request,'UNDERDEV.html')

#########################################################################################################################
## Inspection Conducted
#########################################################################################################################
@login_required
def inspection_conducted(request):
    email=str(request.user)
    userDetails=Level_Desig.objects.filter(official_email_ID=email)[0]
    # print('userDetails: ',userDetails)
    department=userDetails.department
    parent_desig_code=userDetails.parent_desig_code
    # print('department: ',department,type(department))
    # print('parent_desig_code: ',parent_desig_code,type(parent_desig_code))
    bo=list(Level_Desig.objects.filter(parent_desig_code=userDetails.designation_code).values().distinct())
    check='normal'
    if request.method=='GET':
        check=request.GET.get('check')
    
    if check=='reset':
        bo=[]
    # print('bo anjalii',bo)
    
    context={
        'bo':bo,
    }
    return render(request,'inspection_conducted.html',context)


def showInspect(request):
    if request.method=='GET':
        email=str(request.user)
        rly = list(Level_Desig.objects.filter(official_email_ID=email).values('rly_unit_id'))
        ltype = list(railwayLocationMaster.objects.filter(rly_unit_code=rly[0]['rly_unit_id']).values('location_type','location_code'))
        # print("ltype",ltype)
        if ltype[0]['location_type'] == 'ZR':
            rly1 = list(railwayLocationMaster.objects.filter(parent_location_code=ltype[0]['location_code'],location_type='DIV').values_list('rly_unit_code',flat=True))
            # desgn = list(Level_Desig.objects.filter(rly_unit_id__in=rly1).values_list('designation_code',flat=True))
            desgn = list(Level_Desig.objects.filter(official_email_ID=email).values_list('designation_code',flat=True))
        else:
            rly1 = list(Level_Desig.objects.filter(official_email_ID=email).values_list('rly_unit_id',flat=True))
            desgn = list(Level_Desig.objects.filter(official_email_ID=email).values_list('designation_code',flat=True))
        # # print("rlys",rly1)

        userDetails=Level_Desig.objects.filter(official_email_ID=email)[0]
        # print('userDetails: ',userDetails)
        department=userDetails.department
        parent_desig_code=userDetails.parent_desig_code
        # print('department: ',department,type(department))
        # print('parent_desig_code: ',parent_desig_code,type(parent_desig_code))
        fromdate = request.GET.get('fromdate')
        todate = request.GET.get('todate')
        desgn1=request.GET.get('desgn')
        # print(fromdate)
        # print(todate)
        # print(desgn1)
        if desgn1=="Select":
            bo=list(Level_Desig.objects.filter(parent_desig_code__in=desgn).values().distinct())
        else:
            bo=list(Level_Desig.objects.filter(parent_desig_code__in=desgn,designation=desgn1).values().distinct())

        # print('bo: ',len(bo))
        
        fromdate = datetime.strptime(fromdate,'%d/%m/%Y')
        todate = datetime.strptime(todate,'%d/%m/%Y')
        details = list(m2.einspection_details.objects.filter(instypeid_id__isnull=False,designation__department=department,designation__parent_desig_code=userDetails.designation_code, inspected_on__date__range=[fromdate, todate]).values('inspected_on','designation_id','entitydetails').distinct())
        # # print(details)
        answer = {}
        for i in range(len(details)):
            date1=details[i]['inspected_on']
            hello={}
            for j in range(len(bo)):
                bo1=bo[j]['designation_code']
                # # print("bo1",bo1)
                # # print('cvcshgagj':bo1)
                ent_details=list(m2.einspection_details.objects.filter(instypeid_id__isnull=False,designation_id=bo1, inspected_on=date1).values('instypeid_id','entityid'))
                
                # print(ent_details)
                if ent_details:
                    scode=list(inspectiontype_master.objects.filter(instypeid=ent_details[0]['instypeid_id']).values('shortcode'))
                    ent_details[0].update({'instypeid_id':scode[0]['shortcode']})
                    # print("Hello",ent_details)
                    # if bo[j]['designation']==
                    hello.update({bo[j]['designation']:ent_details})
                else:
                    hello.update({bo[j]['designation']:[{"entityid":'','instypeid_id':''}]})
                # print("hello",hello)
                # # print('entity',ent_details)
            # print('......')
            date2=details[i]['inspected_on'].strftime('%d/%m/%Y')
            # print(date2)
            # # print("det:",details)

            # print("hello",hello)
            answer.update({str(date2):hello})
            # print("ans",answer)
        diff = todate-fromdate
        # print(diff.days)
        data=['Designation']
        data1=[]
        data2=[]
        for i in range(0,diff.days+1):
            data.append((fromdate+timedelta(days=i)).strftime('%d/%m/%Y'))
            data2.append((fromdate+timedelta(days=i)).strftime('%Y-%m-%d'))
        data1.append(data)
        for i in range(len(bo)):
            bo3=[]
            bo3.append(bo[i]['designation'])
            for j in range(0,len(data2)):
                details = list(m2.einspection_details.objects.filter(instypeid_id__isnull=False,designation__department=department,designation__parent_desig_code=userDetails.designation_code, inspected_on=data2[j]).values('inspected_on','designation_id','entitydetails').distinct())
                if len(details)>0:
                    date1=details[0]['inspected_on']
                    bo2=bo[i]['designation_code']
                    ent_details=list(m2.einspection_details.objects.filter(instypeid_id__isnull=False,designation_id=bo2, inspected_on=date1).values('instypeid_id','entityid'))
                    if ent_details:
                        scode=list(inspectiontype_master.objects.filter(instypeid=ent_details[0]['instypeid_id']).values('shortcode'))
                        shortcode=scode[0]['shortcode']
                        bo3.append(str(shortcode)+' - '+str(ent_details[0]['entityid']))
                    else:
                        bo3.append('-')
                else:
                        bo3.append('-')
            data1.append(bo3)

        


        # print(data1)
        context={
            # 'details':details,
            'bo':bo,
            'bo1':data1,
            'answer':answer
            # 'mylist':mylist,     
        }
    return JsonResponse(context,safe=False)


def searchInspect(request):
    check='normal'
    if request.method=='GET':
        check=request.GET.get('check')

        email=str(request.user)
        rly = list(Level_Desig.objects.filter(official_email_ID=email).values('rly_unit_id'))
        ltype = list(railwayLocationMaster.objects.filter(rly_unit_code=rly[0]['rly_unit_id']).values('location_type','location_code'))
        # print("ltype",ltype)
        if ltype[0]['location_type'] == 'ZR':
            rly1 = list(railwayLocationMaster.objects.filter(parent_location_code=ltype[0]['location_code'],location_type='DIV').values_list('rly_unit_code',flat=True))
            # desgn = list(Level_Desig.objects.filter(rly_unit_id__in=rly1).values_list('designation_code',flat=True))
            desgn = list(Level_Desig.objects.filter(official_email_ID=email).values_list('designation_code',flat=True))
        else:
            rly1 = list(Level_Desig.objects.filter(official_email_ID=email).values_list('rly_unit_id',flat=True))
            desgn = list(Level_Desig.objects.filter(official_email_ID=email).values_list('designation_code',flat=True))
        # # print("rlys",rly1)
        
        userDetails=Level_Desig.objects.filter(official_email_ID=email)[0]
        # print('userDetails: ',userDetails)
        department=userDetails.department
        parent_desig_code=userDetails.parent_desig_code
        # print('department: ',department,type(department))
        # print('parent_desig_code: ',parent_desig_code,type(parent_desig_code))

        fromdate = request.GET.get('fromdate')
        todate = request.GET.get('todate')
        desgn1=request.GET.get('desgn')
        # print(fromdate)
        # print(todate)
        # print(desgn1)
        if desgn1=="Select":
            bo=list(Level_Desig.objects.filter(parent_desig_code__in=desgn).values().distinct())
        else:
            bo=list(Level_Desig.objects.filter(parent_desig_code__in=desgn,designation=desgn1).values().distinct())
        # for i in range(len(bo)):
        #     bo1=bo[0]['designation']
        #     myid=list(Level_Desig.objects.filter(designation=bo1).values('designation_code'))
        #     mylist=list(m2.einspection_details.objects.filter(designation=myid[0]['designation_code']).values('inspected_on','entitydetails'))

        # print('bo: ',len(bo))
        
        fromdate = datetime.strptime(fromdate,'%d/%m/%Y')
        todate = datetime.strptime(todate,'%d/%m/%Y')
        details = list(m2.einspection_details.objects.filter(instypeid_id__isnull=False,designation__department=department,designation__parent_desig_code=userDetails.designation_code, inspected_on__date__range=[fromdate, todate]).values('inspected_on','designation_id','entitydetails').distinct())
        # # print(details)
        answer = {}
        for i in range(len(details)):
            date1=details[i]['inspected_on']
            hello={}
            for j in range(len(bo)):
                bo1=bo[j]['designation_code']
                # # print("bo1",bo1)
                # # print('cvcshgagj':bo1)
                ent_details=list(m2.einspection_details.objects.filter(instypeid_id__isnull=False,designation_id=bo1, inspected_on=date1).values('instypeid_id','entityid'))
                
                # print(ent_details)
                if ent_details:
                    scode=list(inspectiontype_master.objects.filter(instypeid=ent_details[0]['instypeid_id']).values('shortcode'))
                    ent_details[0].update({'instypeid_id':scode[0]['shortcode']})
                    # print("Hello",ent_details)
                    # if bo[j]['designation']==
                    hello.update({bo[j]['designation']:ent_details})
                else:
                    hello.update({bo[j]['designation']:[{"entityid":'','instypeid_id':''}]})
                # print("hello",hello)
                # # print('entity',ent_details)
            # print('......')
            date2=details[i]['inspected_on'].strftime('%d/%m')
            # print(date2)
            # # print("det:",details)

            # print("hello",hello)
            answer.update({str(date2):hello})
            # print("ans",answer)
        diff = todate-fromdate
        # print(diff.days)
        data=['Designation']
        data1=[]
        data2=[]
        for i in range(0,diff.days+1):
            data.append((fromdate+timedelta(days=i)).strftime('%d/%m'))
            data2.append((fromdate+timedelta(days=i)).strftime('%Y-%m-%d'))
        data1.append(data)
        for i in range(len(bo)):
            bo3=[]
            bo3.append(bo[i]['designation'])
            for j in range(0,len(data2)):
                details = list(m2.einspection_details.objects.filter(instypeid_id__isnull=False,designation__department=department,designation__parent_desig_code=userDetails.designation_code, inspected_on=data2[j]).values('inspected_on','designation_id','entitydetails').distinct())
                if len(details)>0:
                    date1=details[0]['inspected_on']
                    bo2=bo[i]['designation_code']
                    ent_details=list(m2.einspection_details.objects.filter(instypeid_id__isnull=False,designation_id=bo2, inspected_on=date1).values('instypeid_id','entityid'))
                    if ent_details:
                        scode=list(inspectiontype_master.objects.filter(instypeid=ent_details[0]['instypeid_id']).values('shortcode'))
                        shortcode=scode[0]['shortcode']
                        bo3.append(str(shortcode)+' - '+str(ent_details[0]['entityid']))
                    else:
                        bo3.append('-')
                else:
                        bo3.append('-')
            data1.append(bo3)

      
        if check=='reset':
            bo=[]

        # print("data1",len(bo))
    
        context={
            # 'details':details,
            'bo':bo,
            'bo1':data1,
            'answer':answer
            # 'mylist':mylist,     
        }
    return JsonResponse(context,safe=False)


def inspectionConductedexcel(request):
    email=str(request.user)
    rly = list(Level_Desig.objects.filter(official_email_ID=email).values('rly_unit_id'))
    ltype = list(railwayLocationMaster.objects.filter(rly_unit_code=rly[0]['rly_unit_id']).values('location_type','location_code'))
    # print("ltype",ltype)
    if ltype[0]['location_type'] == 'ZR':
        rly1 = list(railwayLocationMaster.objects.filter(parent_location_code=ltype[0]['location_code'],location_type='DIV').values_list('rly_unit_code',flat=True))
        # desgn = list(Level_Desig.objects.filter(rly_unit_id__in=rly1).values_list('designation_code',flat=True))
        desgn = list(Level_Desig.objects.filter(official_email_ID=email).values_list('designation_code',flat=True))
    else:
        rly1 = list(Level_Desig.objects.filter(official_email_ID=email).values_list('rly_unit_id',flat=True))
        desgn = list(Level_Desig.objects.filter(official_email_ID=email).values_list('designation_code',flat=True))
    # # print("rlys",rly1)
    
    userDetails=Level_Desig.objects.filter(official_email_ID=email)[0]
    # print('userDetails: ',userDetails)
    department=userDetails.department
    parent_desig_code=userDetails.parent_desig_code
    # print('department: ',department,type(department))
    # print('parent_desig_code: ',parent_desig_code,type(parent_desig_code))

    fromdate = request.GET.get('fromdate')
    todate = request.GET.get('todate')
    desgn1=request.GET.get('desgn')
    # print(fromdate)
    # print(todate)
    # print(desgn1)
    if desgn1=="Select":
        bo=list(Level_Desig.objects.filter(parent_desig_code__in=desgn).values().distinct())
    else:
        bo=list(Level_Desig.objects.filter(parent_desig_code__in=desgn,designation=desgn1).values().distinct())


    # print('bo: ',len(bo))
    
    fromdate = datetime.strptime(fromdate,'%d/%m/%Y')
    todate = datetime.strptime(todate,'%d/%m/%Y')
    details = list(m2.einspection_details.objects.filter(instypeid_id__isnull=False,designation__department=department,designation__parent_desig_code=userDetails.designation_code, inspected_on__date__range=[fromdate, todate]).values('inspected_on','designation_id','entitydetails').distinct())
    # # print(details)
    answer = {}
    for i in range(len(details)):
        date1=details[i]['inspected_on']
        hello={}
        for j in range(len(bo)):
            bo1=bo[j]['designation_code']
            # # print("bo1",bo1)
            # # print('cvcshgagj':bo1)
            ent_details=list(m2.einspection_details.objects.filter(instypeid_id__isnull=False,designation_id=bo1, inspected_on=date1).values('instypeid_id','entityid'))
            
            # print(ent_details)
            if ent_details:
                scode=list(inspectiontype_master.objects.filter(instypeid=ent_details[0]['instypeid_id']).values('shortcode'))
                ent_details[0].update({'instypeid_id':scode[0]['shortcode']})
                # print("Hello",ent_details)
                # if bo[j]['designation']==
                hello.update({bo[j]['designation']:ent_details})
            else:
                hello.update({bo[j]['designation']:[{"entityid":'','instypeid_id':''}]})
            # print("hello",hello)
            # # print('entity',ent_details)
        # print('......')
        date2=details[i]['inspected_on'].strftime('%d/%m')
        # print(date2)
        # # print("det:",details)

        # print("hello",hello)
        answer.update({str(date2):hello})
        # print("ans",answer)
    diff = todate-fromdate
    # print(diff.days)
    data=['Designation']
    data1=[]
    data2=[]
    for i in range(0,diff.days+1):
        data.append((fromdate+timedelta(days=i)).strftime('%d/%m'))
        data2.append((fromdate+timedelta(days=i)).strftime('%Y-%m-%d'))
    data1.append(data)
    for i in range(len(bo)):
        bo3=[]
        bo3.append(bo[i]['designation'])
        for j in range(0,len(data2)):
            details = list(m2.einspection_details.objects.filter(instypeid_id__isnull=False,designation__department=department,designation__parent_desig_code=userDetails.designation_code, inspected_on=data2[j]).values('inspected_on','designation_id','entitydetails').distinct())
            if len(details)>0:
                date1=details[0]['inspected_on']
                bo2=bo[i]['designation_code']
                ent_details=list(m2.einspection_details.objects.filter(instypeid_id__isnull=False,designation_id=bo2, inspected_on=date1).values('instypeid_id','entityid'))
                if ent_details:
                    scode=list(inspectiontype_master.objects.filter(instypeid=ent_details[0]['instypeid_id']).values('shortcode'))
                    shortcode=scode[0]['shortcode']
                    bo3.append(str(shortcode)+' - '+str(ent_details[0]['entityid']))
                else:
                    bo3.append('-')
            else:
                
                    bo3.append('-')
        data1.append(bo3)
    # print(data1)
    context={
        # 'details':details,
        'bo':bo,
        'bo1':data1,
        'answer':answer
        # 'mylist':mylist,     
    }
    response=HttpResponse(content_type='application/ms-excel')  
    response['Content-Disposition'] = 'attachment; filename="inspectionConductedReport.xls"'
    import xlwt 
    from xlwt import Workbook
    wb = Workbook() 
    sheet1 = wb.add_sheet('Sheet 1')
    style= xlwt.easyxf("font: bold on;borders: top_color black, bottom_color black, right_color black, left_color black,\
                    left thin, right thin, top thin, bottom thin;")
    style1= xlwt.easyxf("borders: top_color black, bottom_color black, right_color black, left_color black,\
                    left thin, right thin, top thin, bottom thin;")  
    heading1 = "Train Inspection Review Report" 
    row=1
    sheet1.write_merge(row,row,5,8,heading1,style=style)
    from datetime import date
    currDate = datetime.now().strftime("%d-%m-%Y")
    row=3
    
    sheet1.write_merge(row,row,0,4,'Date :'+currDate)
    row=4
    sheet1.write_merge(row,row,0,0,'S.No.',style=style)
    for i in range(len(data1)):
        for j in range(len(data1[i])):
            # # print(data1[i][j])
            if i==0:
                sheet1.write_merge(row,row,1+j,1+j,data1[i][j],style=style)
        break
    
    index=1
    row=row+1
    for i in range(len(data1)):
        if i!=0:
            sheet1.write_merge(row,row,0,0,i,style=style)
        for j in range(len(data1[i])):
            if i!=0:
                sheet1.write_merge(row,row,1+j,1+j,data1[i][j],style=style)
        row+=1
        index+=1
    wb.save(response)
    return response



def trainReport(request): 
    return render(request, 'linen_report.html')

def trainInspect(request):
    check='normal'
    if request.method=='GET':
        # print('Inside Train Inspect')
        fromdate=request.GET.get('fromdate')
        todate=request.GET.get('todate')
        check=request.GET.get('check')
       
        fromdate=datetime.strptime(fromdate,'%d-%m-%Y')
        todate=datetime.strptime(todate,'%d-%m-%Y')
 
        l11=list(inspectiontype_master.objects.filter(instypeid=23).values('name')) 

        email=str(request.user)
        
        desig=Level_Desig.objects.filter(official_email_ID=email)[0]
        railways=railwayLocationMaster.objects.filter(rly_unit_code=desig.rly_unit_id)[0]
        # print("railways",railways)

        if desig.d_level=='DRM':
            result = list(m2.einspection_item_detail.objects.filter(einspno_id__inspected_on__date__range=[fromdate,todate],einspno_id__instypeid_id__entity_id__dmaster='Train',einspno_id__designation_id__rly_unit_id=railways,qid_id__instypeid_id='23').values('qid_id__activity','qid_id__instypeid_id','einspno_id__entityid','einspno_id').order_by('einspno_id__entityid').distinct('einspno_id__entityid'))
            insId=list(m2.questionare_master.objects.filter(instypeid_id_id=23,choicetype_id=2).values('activity','instypeid_id','instypeid_id__name','qid'))

        elif desig.d_level=='GM':
            result = list(m2.einspection_item_detail.objects.filter(Q(einspno_id__inspected_on__date__range=[fromdate,todate],einspno_id__instypeid_id__entity_id__dmaster='Train',einspno_id__designation_id__rly_unit_id__parent_location_code=railways.location_code,qid_id__instypeid_id='23') | Q(einspno_id__designation_id__rly_unit_id=railways,einspno_id__instypeid_id__entity_id__dmaster='Train',einspno_id__inspected_on__date__range=[fromdate,todate],qid_id__instypeid_id='23' )).values('qid_id__activity','qid_id__instypeid_id','einspno_id__entityid','einspno_id').order_by('einspno_id__entityid').distinct('einspno_id__entityid'))
            insId=list(m2.questionare_master.objects.filter(instypeid_id_id=23,choicetype_id=2).values('activity','instypeid_id','instypeid_id__name','qid'))
 
        else: 
            result = list(m2.einspection_item_detail.objects.filter(dept=desig.department,einspno_id__inspected_on__date__range=[fromdate,todate],einspno_id__instypeid_id__entity_id__dmaster='Train',einspno_id__designation_id__rly_unit_id=railways,qid_id__instypeid_id='23').values('qid_id__activity','qid_id__instypeid_id','einspno_id__entityid','einspno_id').order_by('einspno_id__entityid').distinct('einspno_id__entityid'))
            insId=list(m2.questionare_master.objects.filter(instypeid_id_id=23,choicetype_id=2).values('activity','instypeid_id','instypeid_id__name','qid'))
        # # print("insId", insId)

        for i in range(len(result)): 
            if desig.d_level=='DRM':    
                count = m2.einspection_details.objects.filter(designation_id__rly_unit_id=railways,instypeid_id__name='On Board',entityid=result[i]['einspno_id__entityid']).count()
            elif desig.d_level=='GM':
                count = m2.einspection_details.objects.filter(designation_id__rly_unit_id__parent_location_code=railways.location_code,instypeid_id__name='On Board',entityid=result[i]['einspno_id__entityid']).count()
            else:
                count = m2.einspection_details.objects.filter(dept=desig.department,designation_id__rly_unit_id=railways,instypeid_id__name='On Board',entityid=result[i]['einspno_id__entityid']).count()
            result[i].update({'count':count})
            total,average=0,0
            for j in range(len(insId)):
                if desig.d_level=='DRM':
                    count2=m2.einspection_item_detail.objects.filter(einspno_id=result[i]['einspno_id'],qid_id=insId[j]['qid'],value_id_id__rscore=1).count()
                elif desig.d_level=='GM': 
                    count2=m2.einspection_item_detail.objects.filter(einspno_id=result[i]['einspno_id'],qid_id=insId[j]['qid'],value_id_id__rscore=1).count()
                else:
                    count2=m2.einspection_item_detail.objects.filter(einspno_id=result[i]['einspno_id'],qid_id=insId[j]['qid'],value_id_id__rscore=1).count()

                total+=int(count2)
                result[i].update({insId[j]['activity']:count2})
                average=total/(len(insId))
                result[i].update({'total':total,'average':average})
    if check=='reset':
        # print('Inside Train Inspect RESET')
        todate=datetime.now()
        # todate=str(todate)[0:11]
        todate=todate.strftime('%Y-%m-%d')

        fromdate=datetime.now() - timedelta(days=7)
        # fromdate=str(fromdate)[0-11]
        fromdate=fromdate.strftime('%Y-%m-%d')

        # print(fromdate,todate,': fromdate,todate')
        l11=list(inspectiontype_master.objects.filter(instypeid=23).values('name')) 
        email=str(request.user)
        # print(email,'email')
        desig=Level_Desig.objects.filter(official_email_ID=email)[0]
        railways=railwayLocationMaster.objects.filter(rly_unit_code=desig.rly_unit_id)[0]
        # print("railways",railways)

        if desig.d_level=='DRM':
            result = list(m2.einspection_item_detail.objects.filter(einspno_id__inspected_on__date__range=[fromdate,todate],einspno_id__instypeid_id__entity_id__dmaster='Train',einspno_id__designation_id__rly_unit_id=railways,qid_id__instypeid_id='23').values('qid_id__activity','qid_id__instypeid_id','einspno_id__entityid','einspno_id').order_by('einspno_id__entityid').distinct('einspno_id__entityid'))
            insId=list(m2.questionare_master.objects.filter(instypeid_id_id=23,choicetype_id=2).values('activity','instypeid_id','instypeid_id__name','qid'))
            # print('result: ',result)
        elif desig.d_level=='GM':
            result = list(m2.einspection_item_detail.objects.filter(Q(einspno_id__inspected_on__date__range=[fromdate,todate],einspno_id__instypeid_id__entity_id__dmaster='Train',einspno_id__designation_id__rly_unit_id__parent_location_code=railways.location_code,qid_id__instypeid_id='23') | Q(einspno_id__designation_id__rly_unit_id=railways,einspno_id__instypeid_id__entity_id__dmaster='Train',einspno_id__inspected_on__date__range=[fromdate,todate],qid_id__instypeid_id='23' )).values('qid_id__activity','qid_id__instypeid_id','einspno_id__entityid','einspno_id').order_by('einspno_id__entityid').distinct('einspno_id__entityid'))
            insId=list(m2.questionare_master.objects.filter(instypeid_id_id=23,choicetype_id=2).values('activity','instypeid_id','instypeid_id__name','qid'))
 
        else: 
            result = list(m2.einspection_item_detail.objects.filter(dept=desig.department,einspno_id__inspected_on__date__range=[fromdate,todate],einspno_id__instypeid_id__entity_id__dmaster='Train',einspno_id__designation_id__rly_unit_id=railways,qid_id__instypeid_id='23').values('qid_id__activity','qid_id__instypeid_id','einspno_id__entityid','einspno_id').order_by('einspno_id__entityid').distinct('einspno_id__entityid'))
            insId=list(m2.questionare_master.objects.filter(instypeid_id_id=23,choicetype_id=2).values('activity','instypeid_id','instypeid_id__name','qid'))
        # # print("insId", insId)

        for i in range(len(result)): 
            if desig.d_level=='DRM':    
                count = m2.einspection_details.objects.filter(designation_id__rly_unit_id=railways,instypeid_id__name='On Board',entityid=result[i]['einspno_id__entityid']).count()
            elif desig.d_level=='GM':
                count = m2.einspection_details.objects.filter(designation_id__rly_unit_id__parent_location_code=railways.location_code,instypeid_id__name='On Board',entityid=result[i]['einspno_id__entityid']).count()
            else:
                count = m2.einspection_details.objects.filter(dept=desig.department,designation_id__rly_unit_id=railways,instypeid_id__name='On Board',entityid=result[i]['einspno_id__entityid']).count()
            result[i].update({'count':count})
            total,average=0,0
            for j in range(len(insId)):
                if desig.d_level=='DRM':
                    count2=m2.einspection_item_detail.objects.filter(einspno_id=result[i]['einspno_id'],qid_id=insId[j]['qid'],value_id_id__rscore=1).count()
                elif desig.d_level=='GM': 
                    count2=m2.einspection_item_detail.objects.filter(einspno_id=result[i]['einspno_id'],qid_id=insId[j]['qid'],value_id_id__rscore=1).count()
                else:
                    count2=m2.einspection_item_detail.objects.filter(einspno_id=result[i]['einspno_id'],qid_id=insId[j]['qid'],value_id_id__rscore=1).count()

                total+=int(count2)
                result[i].update({insId[j]['activity']:count2})
                average=total/(len(insId))
                result[i].update({'total':total,'average':average})
        
        

    # print("data",len(result),result)
    context={
        'header': insId,    
        'result':result,
        
    }

    return JsonResponse(context,safe=False)



def trainInspectpdf(request):

    fromdate=request.GET.get('fromdate')
    todate=request.GET.get('todate')
    
    fromdate=datetime.strptime(fromdate,'%d-%m-%Y')
    todate=datetime.strptime(todate,'%d-%m-%Y')
    todaydate = datetime.today()

    l11=list(inspectiontype_master.objects.filter(instypeid=23).values('name')) 

    email=str(request.user)
    
    desig=Level_Desig.objects.filter(official_email_ID=email)[0]
    railways=railwayLocationMaster.objects.filter(rly_unit_code=desig.rly_unit_id)[0]
    # print("railways",railways)

    if desig.d_level=='DRM':
        result = list(m2.einspection_item_detail.objects.filter(einspno_id__inspected_on__date__range=[fromdate,todate],einspno_id__instypeid_id__entity_id__dmaster='Train',einspno_id__designation_id__rly_unit_id=railways,qid_id__instypeid_id='23').values('qid_id__activity','qid_id__instypeid_id','einspno_id__entityid','einspno_id').order_by('einspno_id__entityid').distinct('einspno_id__entityid'))
        insId=list(m2.questionare_master.objects.filter(instypeid_id_id=23,choicetype_id=2).values('activity','instypeid_id','instypeid_id__name','qid'))

    elif desig.d_level=='GM':
        result = list(m2.einspection_item_detail.objects.filter(Q(einspno_id__inspected_on__date__range=[fromdate,todate],einspno_id__instypeid_id__entity_id__dmaster='Train',einspno_id__designation_id__rly_unit_id__parent_location_code=railways.location_code,qid_id__instypeid_id='23') | Q(einspno_id__designation_id__rly_unit_id=railways,einspno_id__instypeid_id__entity_id__dmaster='Train',einspno_id__inspected_on__date__range=[fromdate,todate],qid_id__instypeid_id='23' )).values('qid_id__activity','qid_id__instypeid_id','einspno_id__entityid','einspno_id').order_by('einspno_id__entityid').distinct('einspno_id__entityid'))
        insId=list(m2.questionare_master.objects.filter(instypeid_id_id=23,choicetype_id=2).values('activity','instypeid_id','instypeid_id__name','qid'))

    else: 
        result = list(m2.einspection_item_detail.objects.filter(dept=desig.department,einspno_id__inspected_on__date__range=[fromdate,todate],einspno_id__instypeid_id__entity_id__dmaster='Train',einspno_id__designation_id__rly_unit_id=railways,qid_id__instypeid_id='23').values('qid_id__activity','qid_id__instypeid_id','einspno_id__entityid','einspno_id').order_by('einspno_id__entityid').distinct('einspno_id__entityid'))
        insId=list(m2.questionare_master.objects.filter(instypeid_id_id=23,choicetype_id=2).values('activity','instypeid_id','instypeid_id__name','qid'))
    # # print("insId", insId)

    for i in range(len(result)): 
        if desig.d_level=='DRM':    
            count = m2.einspection_details.objects.filter(designation_id__rly_unit_id=railways,instypeid_id__name='On Board',entityid=result[i]['einspno_id__entityid']).count()
        elif desig.d_level=='GM':
            count = m2.einspection_details.objects.filter(designation_id__rly_unit_id__parent_location_code=railways.location_code,instypeid_id__name='On Board',entityid=result[i]['einspno_id__entityid']).count()
        else:
            count = m2.einspection_details.objects.filter(dept=desig.department,designation_id__rly_unit_id=railways,instypeid_id__name='On Board',entityid=result[i]['einspno_id__entityid']).count()
        result[i].update({'count':count})
        total,average=0,0
        cntList=[]
        for j in range(len(insId)):
            if desig.d_level=='DRM':
                count2=m2.einspection_item_detail.objects.filter(einspno_id=result[i]['einspno_id'],qid_id=insId[j]['qid'],value_id_id__rscore=1).count()
            elif desig.d_level=='GM': 
                count2=m2.einspection_item_detail.objects.filter(einspno_id=result[i]['einspno_id'],qid_id=insId[j]['qid'],value_id_id__rscore=1).count()
            else:
                count2=m2.einspection_item_detail.objects.filter(einspno_id=result[i]['einspno_id'],qid_id=insId[j]['qid'],value_id_id__rscore=1).count()

            total+=int(count2)
            cntList.append(count2)
            # result[i].update({insId[j]['activity']:count2})
            result[i].update({'header':cntList})            
            average=total/(len(insId))
            result[i].update({'total':total,'average':average})

    # print("data",len(result),result)
    context={
        'header': insId,    
        'result':result,
        'fromdate':fromdate,
        'todate':todate,
        'todaydate':todaydate,
    }
    # # print("data",context)

    submitbtn=request.GET.get('submitbtn')
    # print(submitbtn)

    if submitbtn=='PDF':
        pdf=utils.render_to_pdf('linen_report_pdf.html',context)
        return pdf
    elif submitbtn=='excel':   

        import xlwt 
        from xlwt import Workbook
        response = HttpResponse(content_type='application/ms-excel')
        response['Content-Disposition'] = 'attachment; filename="station_inspection_Report.xls"'
        wb = Workbook() 
        sheet1 = wb.add_sheet('Sheet 1')
        style= xlwt.easyxf("font: bold on;borders: top_color black, bottom_color black, right_color black, left_color black,\
                        left thin, right thin, top thin, bottom thin;")
        style1= xlwt.easyxf("borders: top_color black, bottom_color black, right_color black, left_color black,\
                        left thin, right thin, top thin, bottom thin;")  

        heading1 = "LINEN   REPORT"
        row=1
        sheet1.write_merge(row,row,7,9,heading1,style=style)
        from datetime import date
        currDate = datetime.now().strftime("%d-%m-%Y")
        row=3
                                
        sheet1.write_merge(row,row,1,5,'Date :'+currDate)
        row=5
        sheet1.write_merge(row,row,1,2,'Train Number',style=style)
        # sheet1.write_merge(row,row,3,4,'Station Category',style=style)                                                 
        sheet1.write_merge(row,row,3,4,'Inspection Count',style=style)
        j=5
        for i in range(len(insId)):
            k=j+2
            sheet1.write_merge(row,row,j,k,insId[i]['activity'],style=style)
            j=k+1
        sheet1.write_merge(row,row,j,j+1,'Total Score',style=style)
        sheet1.write_merge(row,row,j+2,j+3,'Average Score',style=style)
        
                                
        index=1
        row=row+1
        
        for i in range(len(result)):
            sheet1.write_merge(row,row,1,2,result[i]['einspno_id__entityid'],style=style1)
            # sheet1.write_merge(row,row,3,4,result[i]['startstn_id__station_cat'],style=style1)                        
            sheet1.write_merge(row,row,3,4,result[i]['count'],style=style1)
            k = 5
            for j in range(len(result[i]['header'])):
                k = k-j
                l = k+2
                sheet1.write_merge(row,row,j+k,j+l,result[i]['header'][j],style=style1)
                k = j+l+1
                
            sheet1.write_merge(row,row,k,k+1,result[i]['total'],style=style1)
            sheet1.write_merge(row,row,k+2,k+3,result[i]['average'],style=style1)
            row+=1                       
            index+=1
        
        wb.save(response)
    return response



# def inspection_conducted(request):
#     email=str(request.user)
#     userDetails=Level_Desig.objects.filter(official_email_ID=email)[0]
#     # print('userDetails: ',userDetails)
#     department=userDetails.department
#     parent_desig_code=userDetails.parent_desig_code
#     # print('department: ',department,type(department))
#     # print('parent_desig_code: ',parent_desig_code,type(parent_desig_code))
#     bo=list(Level_Desig.objects.filter(parent_desig_code=userDetails.designation_code).values().distinct())
#     context={
#         'bo':bo,
#     }
#     return render(request,'inspection_conducted.html',context)

# def showInspect(request):
#     if request.method=='GET':
#         email=str(request.user)
#         userDetails=Level_Desig.objects.filter(official_email_ID=email)[0]
#         # print('userDetails: ',userDetails)
#         department=userDetails.department
#         parent_desig_code=userDetails.parent_desig_code
#         # print('department: ',department,type(department))
#         # print('parent_desig_code: ',parent_desig_code,type(parent_desig_code))
#         fromdate = request.GET.get('fromdate')
#         todate = request.GET.get('todate')
#         desgn1=request.GET.get('desgn')
#         # print(fromdate)
#         # print(todate)
#         # print(desgn1)
#         if desgn1=="Select":
#             bo=list(Level_Desig.objects.filter(parent_desig_code=userDetails.designation_code).values().distinct())
#         else:
#             bo=list(Level_Desig.objects.filter(parent_desig_code=userDetails.designation_code,designation=desgn1).values().distinct())

#         # print('bo: ',len(bo))
        
#         fromdate = datetime.strptime(fromdate,'%d-%m-%Y')
#         todate = datetime.strptime(todate,'%d-%m-%Y')
#         details = list(m2.einspection_details.objects.filter(designation__department=department,designation__parent_desig_code=userDetails.designation_code, inspected_on__date__range=[fromdate, todate]).values('inspected_on','designation_id','entitydetails').distinct())
#         # # print(details)
#         answer = {}
#         for i in range(len(details)):
#             date1=details[i]['inspected_on']
#             hello={}
#             for j in range(len(bo)):
#                 bo1=bo[j]['designation_code']
#                 # # print("bo1",bo1)
#                 # # print('cvcshgagj':bo1)
#                 ent_details=list(m2.einspection_details.objects.filter(designation_id=bo1, inspected_on=date1).values('instypeid_id','entityid'))
                
#                 # print(ent_details)
#                 if ent_details:
#                     scode=list(inspectiontype_master.objects.filter(instypeid=ent_details[0]['instypeid_id']).values('shortcode'))
#                     ent_details[0].update({'instypeid_id':scode[0]['shortcode']})
#                     # print("Hello",ent_details)
#                     # if bo[j]['designation']==
#                     hello.update({bo[j]['designation']:ent_details})
#                 else:
#                     hello.update({bo[j]['designation']:[{"entityid":'','instypeid_id':''}]})
#                 # print("hello",hello)
#                 # # print('entity',ent_details)
#             # print('......')
#             date2=details[i]['inspected_on'].strftime('%d/%m/%Y')
#             # print(date2)
#             # # print("det:",details)

#             # print("hello",hello)
#             answer.update({str(date2):hello})
#             # print("ans",answer)
#         diff = todate-fromdate
#         # print(diff.days)
#         data=['Designation']
#         data1=[]
#         data2=[]
#         for i in range(0,diff.days+1):
#             data.append((fromdate+timedelta(days=i)).strftime('%d-%m-%Y'))
#             data2.append((fromdate+timedelta(days=i)).strftime('%Y-%m-%d'))
#         data1.append(data)
#         for i in range(len(bo)):
#             bo3=[]
#             bo3.append(bo[i]['designation'])
#             for j in range(0,len(data2)):
#                 details = list(m2.einspection_details.objects.filter(designation__department=department,designation__parent_desig_code=userDetails.designation_code, inspected_on=data2[j]).values('inspected_on','designation_id','entitydetails').distinct())
#                 if len(details)>0:
#                     date1=details[0]['inspected_on']
#                     bo2=bo[i]['designation_code']
#                     ent_details=list(m2.einspection_details.objects.filter(designation_id=bo2, inspected_on=date1).values('instypeid_id','entityid'))
#                     if ent_details:
#                         scode=list(inspectiontype_master.objects.filter(instypeid=ent_details[0]['instypeid_id']).values('shortcode'))
#                         shortcode=scode[0]['shortcode']
#                         bo3.append(str(shortcode)+' - '+str(ent_details[0]['entityid']))
#                     else:
#                         bo3.append('-')
#                 else:
#                         bo3.append('-')
#             data1.append(bo3)

        


#         # print(data1)
#         context={
#             # 'details':details,
#             'bo':bo,
#             'bo1':data1,
#             'answer':answer
#             # 'mylist':mylist,     
#         }
#     return JsonResponse(context,safe=False)

# def searchInspect(request):
#     if request.method=='GET':
#         email=str(request.user)
#         userDetails=Level_Desig.objects.filter(official_email_ID=email)[0]
#         # print('userDetails: ',userDetails)
#         department=userDetails.department
#         parent_desig_code=userDetails.parent_desig_code
#         # print('department: ',department,type(department))
#         # print('parent_desig_code: ',parent_desig_code,type(parent_desig_code))
#         fromdate = request.GET.get('fromdate')
#         todate = request.GET.get('todate')
#         desgn1=request.GET.get('desgn')
#         # print(fromdate)
#         # print(todate)
#         # print(desgn1)
#         if desgn1=="Select":
#             bo=list(Level_Desig.objects.filter(parent_desig_code=userDetails.designation_code).values().distinct())
#         else:
#             bo=list(Level_Desig.objects.filter(parent_desig_code=userDetails.designation_code,designation=desgn1).values().distinct())
#         # for i in range(len(bo)):
#         #     bo1=bo[0]['designation']
#         #     myid=list(Level_Desig.objects.filter(designation=bo1).values('designation_code'))
#         #     mylist=list(m2.einspection_details.objects.filter(designation=myid[0]['designation_code']).values('inspected_on','entitydetails'))

#         # print('bo: ',len(bo))
        
#         fromdate = datetime.strptime(fromdate,'%d-%m-%Y')
#         todate = datetime.strptime(todate,'%d-%m-%Y')
#         details = list(m2.einspection_details.objects.filter(designation__department=department,designation__parent_desig_code=userDetails.designation_code, inspected_on__date__range=[fromdate, todate]).values('inspected_on','designation_id','entitydetails').distinct())
#         # # print(details)
#         answer = {}
#         for i in range(len(details)):
#             date1=details[i]['inspected_on']
#             hello={}
#             for j in range(len(bo)):
#                 bo1=bo[j]['designation_code']
#                 # # print("bo1",bo1)
#                 # # print('cvcshgagj':bo1)
#                 ent_details=list(m2.einspection_details.objects.filter(designation_id=bo1, inspected_on=date1).values('instypeid_id','entityid'))
                
#                 # print(ent_details)
#                 if ent_details:
#                     scode=list(inspectiontype_master.objects.filter(instypeid=ent_details[0]['instypeid_id']).values('shortcode'))
#                     ent_details[0].update({'instypeid_id':scode[0]['shortcode']})
#                     # print("Hello",ent_details)
#                     # if bo[j]['designation']==
#                     hello.update({bo[j]['designation']:ent_details})
#                 else:
#                     hello.update({bo[j]['designation']:[{"entityid":'','instypeid_id':''}]})
#                 # print("hello",hello)
#                 # # print('entity',ent_details)
#             # print('......')
#             date2=details[i]['inspected_on'].strftime('%d/%m/%Y')
#             # print(date2)
#             # # print("det:",details)

#             # print("hello",hello)
#             answer.update({str(date2):hello})
#             # print("ans",answer)
#         diff = todate-fromdate
#         # print(diff.days)
#         data=['Designation']
#         data1=[]
#         data2=[]
#         for i in range(0,diff.days+1):
#             data.append((fromdate+timedelta(days=i)).strftime('%d-%m-%Y'))
#             data2.append((fromdate+timedelta(days=i)).strftime('%Y-%m-%d'))
#         data1.append(data)
#         for i in range(len(bo)):
#             bo3=[]
#             bo3.append(bo[i]['designation'])
#             for j in range(0,len(data2)):
#                 details = list(m2.einspection_details.objects.filter(designation__department=department,designation__parent_desig_code=userDetails.designation_code, inspected_on=data2[j]).values('inspected_on','designation_id','entitydetails').distinct())
#                 if len(details)>0:
#                     date1=details[0]['inspected_on']
#                     bo2=bo[i]['designation_code']
#                     ent_details=list(m2.einspection_details.objects.filter(designation_id=bo2, inspected_on=date1).values('instypeid_id','entityid'))
#                     if ent_details:
#                         scode=list(inspectiontype_master.objects.filter(instypeid=ent_details[0]['instypeid_id']).values('shortcode'))
#                         shortcode=scode[0]['shortcode']
#                         bo3.append(str(shortcode)+' - '+str(ent_details[0]['entityid']))
#                     else:
#                         bo3.append('-')
#                 else:
#                         bo3.append('-')
#             data1.append(bo3)

        


#         # print(data1)
#         context={
#             # 'details':details,
#             'bo':bo,
#             'bo1':data1,
#             'answer':answer
#             # 'mylist':mylist,     
#         }
#     return JsonResponse(context,safe=False)


#############################################################################################################################################################
# Inspection Detail Report
#############################################################################################################################################################
@login_required
def footPlate_report(request):
    if request.method=='GET':
        email = request.user
        rly = list(Level_Desig.objects.filter(official_email_ID=email).values('rly_unit_id'))
        ltype = list(railwayLocationMaster.objects.filter(rly_unit_code=rly[0]['rly_unit_id']).values('location_type','location_code'))
        # # print("ltype",ltype)
        if ltype[0]['location_type'] == 'ZR':
            rly1 = list(railwayLocationMaster.objects.filter(parent_location_code=ltype[0]['location_code'],location_type='DIV').values_list('rly_unit_code',flat=True))
        else:
            rly1 = list(Level_Desig.objects.filter(official_email_ID=email).values_list('rly_unit_id',flat=True))
        # # print("rlys",rly1)
        desgn = list(Level_Desig.objects.filter(rly_unit_id__in=rly1).values_list('designation_code',flat=True))
        # # print("desgns",desgn)
        l1 = list(m2.einspection_details.objects.filter(designation_id__in=desgn).values_list('designation_id',flat=True))
        desgn_no = list(Level_Desig.objects.filter(designation_code__in=l1).values('designation'))
        secn = list(m2.einspection_details.objects.filter(designation_id__in=desgn).values_list('section_id',flat=True))
        secn_no = list(section_master.objects.filter(secid__in=secn).values('section_code'))
        ins_type = list(inspectiontype_master.objects.filter(parent_id="-1",delete_flag=False).values('name'))
        codes = []
        if ins_type == "Station":
            codes = list(station_master.objects.filter(delete_flag=False).values('stnshortcode'))
        elif ins_type == "Running Room":
            codes = list(runningroom_master.objects.filter(delete_flag=False).values('rr_code'))
        else:
            codes = list(train_master.objects.filter(delete_flag=False).values('train_no'))
        context={
            'desg_no': desgn_no,
            'sec_no': secn_no,
            'insp_type': ins_type,
        }
    return render(request,'footPlate_report.html',context) 


def showDetails(request):
    if request.method=='GET':
        email = request.user
        rly = list(Level_Desig.objects.filter(official_email_ID=email).values('rly_unit_id'))
        ltype = list(railwayLocationMaster.objects.filter(rly_unit_code=rly[0]['rly_unit_id']).values('location_type','location_code'))
        # # print("ltype",ltype)
        if ltype[0]['location_type'] == 'ZR':
            rly1 = list(railwayLocationMaster.objects.filter(parent_location_code=ltype[0]['location_code'],location_type='DIV').values_list('rly_unit_code',flat=True))
            # desgn = list(Level_Desig.objects.filter(rly_unit_id__in=rly1).values_list('designation_code',flat=True))
            desgn = list(Level_Desig.objects.filter(official_email_ID=email).values_list('designation_code',flat=True))
        else:
            rly1 = list(Level_Desig.objects.filter(official_email_ID=email).values_list('rly_unit_id',flat=True))
            desgn = list(Level_Desig.objects.filter(official_email_ID=email).values_list('designation_code',flat=True))
        # # print("rlys",rly1)
        # desgn = list(Level_Desig.objects.filter(rly_unit_id__in=rly1).values_list('designation_code',flat=True))
        # # print("desgns",desgn)
        # l1 = list(m2.einspection_details.objects.filter(designation_id__in=desgn).values_list('designation_id',flat=True))
        # desgc = list(Level_Desig.objects.filter(official_email_ID=email).values('designation_code'))[0]['designation_code']
        # # print(desgc)
        #datedetail= list(m2.einspection_details.objects.filter(delete_flag=False).values('inspected_on')).date()
        details = list(m2.einspection_details.objects.filter(delete_flag=False,designation_id__in=desgn,instypeid__isnull=False).values('inspected_on','designation_id','einspno','instypeid_id','section_id').order_by('-inspected_on'))
        # # print(details)
        for i in range(len(details)):
            l1 = list(m2.einspection_details.objects.filter(einspno=details[i]['einspno']).values('entitydetails'))
            l2 = list(m2.einspection_details.objects.filter(einspno=details[i]['einspno']).values('entityid'))
            if details[i]['inspected_on']:
                # # print(details[i]['inspected_on'])
                date = details[i]['inspected_on'].strftime('%d/%m/%y')
            else:
                date = 'NA'
            instype = list(inspectiontype_master.objects.filter(instypeid=details[i]['instypeid_id']).values('name'))
            # # print(instype)
            details[i].update({'instype':instype[0]['name'], 'inspected_on': date, 'l1':l1[0]['entitydetails'], 'l2':l2[0]['entityid']})
            desgn = list(Level_Desig.objects.filter(designation_code=details[i]['designation_id']).values('designation'))
            # # print(details)
            details[i].update({'designation':desgn[0]['designation']})
            sectn = list(section_master.objects.filter(secid=details[i]['section_id']).values('section_code'))
            if len(sectn):
                details[i].update({'section_code':sectn[0]['section_code']})
            else:
                details[i].update({'section_code':'NA'})
    # # print(len(details),'details')
    # # print("det",details)
    return JsonResponse({'details':details},safe=False)


def searchDetails(request):
    if request.method=='GET':
        date1 = request.GET.get('date')
        desgn1 = request.GET.get('desgn')
        insp1 = request.GET.get('insp')
        insp_val1 = request.GET.get('insp_val')
        sec = request.GET.get('sec')
        # # print(date1)
        # # print("sec",sec)
        secid = section_master.objects.filter(section_code=sec).values('secid')
        if secid:
            sec = secid[0]['secid']
        if sec==None:
            sec="Select"
        # # print("sec",sec)
        if date1:
            fromdate = date1.split('-')[0]
            todate = date1.split('-')[1]
        else:
            fromdate=None
            todate=None
        # # print(fromdate)
        # # print(todate)
        email = request.user
        rly = list(Level_Desig.objects.filter(official_email_ID=email).values('rly_unit_id'))
        ltype = list(railwayLocationMaster.objects.filter(rly_unit_code=rly[0]['rly_unit_id']).values('location_type','location_code'))
        # # print("ltype",ltype)
        if ltype[0]['location_type'] == 'ZR':
            rly1 = list(railwayLocationMaster.objects.filter(parent_location_code=ltype[0]['location_code'],location_type='DIV').values_list('rly_unit_code',flat=True))
        else:
            rly1 = list(Level_Desig.objects.filter(official_email_ID=email).values_list('rly_unit_id',flat=True))
        # # print("rlys",rly1)
        desgn_no = list(Level_Desig.objects.filter(rly_unit_id__in=rly1).values_list('designation_code'))
        # secn_no = list(section_master.objects.filter(div_id_id=rly[0]['rly_unit_id']).values('secid'))
        # # print("helloo",rly,desgn_no)
        # desgid = list(Level_Desig.objects.filter(designation=desgn1).values('designation_id'))
        # # print(desgn1)
        try:
            # date1 = datetime.strptime(date1,'%d-%m-%Y')
            fromdate = datetime.strptime(fromdate,'%d/%m/%y')
            todate = datetime.strptime(todate,'%d/%m/%y')
        except:
            # date1 = None
            fromdate = None
            todate = None
        # # print(fromdate)
        # # print(todate)
        # # # print(date1)
        # # print(desgn1)
        # # print(insp1)
        # # print(insp_val1)
        if insp_val1=="":
            insp_val1="Select"
        # # print(insp_val1)
        if fromdate!=None or desgn1!="Select" or insp1!="Select" or sec!="Select":
            if fromdate!=None and desgn1=="Select" and insp1=="Select":
                if sec=="Select":
                    details = list(m2.einspection_details.objects.filter(inspected_on__date__range=[fromdate,todate],designation_id__in=desgn_no).values('inspected_on','designation_id','einspno','instypeid_id','section_id').order_by('-inspected_on'))
                else:
                    details = list(m2.einspection_details.objects.filter(inspected_on__date__range=[fromdate,todate],section=sec,designation_id__in=desgn_no).values('inspected_on','designation_id','einspno','instypeid_id','section_id').order_by('-inspected_on'))
            elif fromdate!=None and desgn1!="Select" and insp1=="Select":
                desgc = Level_Desig.objects.filter(designation=desgn1).values('designation_code')
                # # print(desgc)
                if sec=="Select":
                    details = list(m2.einspection_details.objects.values('inspected_on','designation_id','einspno','section_id','instypeid_id').filter(inspected_on__date__range=[fromdate,todate],designation_id=desgc[0]['designation_code']))
                else:
                    details = list(m2.einspection_details.objects.values('inspected_on','designation_id','einspno','section_id','instypeid_id').filter(inspected_on__date__range=[fromdate,todate],designation_id=desgc[0]['designation_code'],section=sec))
            elif fromdate!=None and desgn1!="Select" and insp1!="Select":
                desgc = Level_Desig.objects.filter(designation=desgn1).values('designation_code')
                insid = inspectiontype_master.objects.filter(name=insp1).values('instypeid')
                if insp_val1=="Select":
                    if sec=="Select":
                        details = list(m2.einspection_details.objects.filter(inspected_on__date__range=[fromdate,todate],designation_id=desgc[0]['designation_code'],instypeid_id=insid[0]['instypeid']).values('inspected_on','designation_id','einspno','instypeid_id','section_id').order_by('-inspected_on'))
                    else:
                        details = list(m2.einspection_details.objects.filter(inspected_on__date__range=[fromdate,todate],designation_id=desgc[0]['designation_code'],instypeid_id=insid[0]['instypeid'],section=sec).values('inspected_on','designation_id','einspno','instypeid_id','section_id').order_by('-inspected_on'))
                else:
                    if sec=="Select":
                        details = list(m2.einspection_details.objects.filter(inspected_on__date__range=[fromdate,todate],designation_id=desgc[0]['designation_code'],instypeid_id=insid[0]['instypeid'],entityid=insp_val1).values('inspected_on','designation_id','einspno','instypeid_id','section_id').order_by('-inspected_on'))
                    else:
                        details = list(m2.einspection_details.objects.filter(inspected_on__date__range=[fromdate,todate],designation_id=desgc[0]['designation_code'],instypeid_id=insid[0]['instypeid'],entityid=insp_val1,section=sec).values('inspected_on','designation_id','einspno','instypeid_id','section_id').order_by('-inspected_on'))
                
            elif fromdate==None and desgn1!="Select" and insp1=="Select":
                desgc = Level_Desig.objects.filter(designation=desgn1).values('designation_code')
                if sec=="Select":
                    details = list(m2.einspection_details.objects.filter(designation_id=desgc[0]['designation_code']).values('inspected_on','designation_id','einspno','instypeid_id','section_id'))
                else:
                    details = list(m2.einspection_details.objects.filter(designation_id=desgc[0]['designation_code'],section=sec).values('inspected_on','designation_id','einspno','instypeid_id','section_id'))
                # # print("Hello",details)
            elif fromdate==None and desgn1!="Select" and insp1!="Select":
                desgc = Level_Desig.objects.filter(designation=desgn1).values('designation_code')
                insid = inspectiontype_master.objects.filter(name=insp1).values('instypeid')
                if insp_val1=="Select":
                    if sec=="Select":
                        details = list(m2.einspection_details.objects.filter(Q(designation_id=desgc[0]['designation_code']) & Q(instypeid_id=insid[0]['instypeid'])).values('inspected_on','designation_id','einspno','instypeid_id','section_id').order_by('-inspected_on'))
                    else:
                        details = list(m2.einspection_details.objects.filter(Q(designation_id=desgc[0]['designation_code']) & Q(instypeid_id=insid[0]['instypeid']) & Q(section=sec)).values('inspected_on','designation_id','einspno','instypeid_id','section_id').order_by('-inspected_on'))
                else:
                    if sec=="Select":
                        details = list(m2.einspection_details.objects.filter(Q(designation_id=desgc[0]['designation_code']) & Q(instypeid_id=insid[0]['instypeid']) & Q(entityid=insp_val1)).values('inspected_on','designation_id','einspno','instypeid_id','section_id').order_by('-inspected_on'))
                    else:
                        details = list(m2.einspection_details.objects.filter(Q(designation_id=desgc[0]['designation_code']) & Q(instypeid_id=insid[0]['instypeid']) & Q(entityid=insp_val1) & Q(section=sec)).values('inspected_on','designation_id','einspno','instypeid_id','section_id').order_by('-inspected_on'))
            elif fromdate==None and desgn1=="Select" and insp1!="Select":
                insid = inspectiontype_master.objects.filter(name=insp1).values('instypeid')
                if insp_val1=="Select":
                    if sec=="Select":
                        details = list(m2.einspection_details.objects.filter(instypeid_id=insid[0]['instypeid'],designation_id__in=desgn_no).values('inspected_on','designation_id','einspno','instypeid_id','section_id').order_by('-inspected_on'))
                    else:
                        details = list(m2.einspection_details.objects.filter(instypeid_id=insid[0]['instypeid'],section=sec,designation_id__in=desgn_no).values('inspected_on','designation_id','einspno','instypeid_id','section_id').order_by('-inspected_on'))
                else:
                    if sec=="Select":
                        details = list(m2.einspection_details.objects.filter(instypeid_id=insid[0]['instypeid'],entityid=insp_val1).values('inspected_on','designation_id','einspno','instypeid_id','section_id').order_by('-inspected_on'))
                    else:
                        details = list(m2.einspection_details.objects.filter(instypeid_id=insid[0]['instypeid'],entityid=insp_val1,section=sec).values('inspected_on','designation_id','einspno','instypeid_id','section_id').order_by('-inspected_on'))
            elif fromdate!=None and desgn1=="Select" and insp1!="Select":
                insid = inspectiontype_master.objects.filter(name=insp1).values('instypeid')
                if insp_val1=="Select":
                    if sec=="Select":
                        details = list(m2.einspection_details.objects.filter(Q(inspected_on__date__range=[fromdate,todate]) & Q(instypeid_id=insid[0]['instypeid']) & Q(designation_id__in=desgn_no)).values('inspected_on','designation_id','einspno','instypeid_id','section_id').order_by('-inspected_on'))
                    else:
                        details = list(m2.einspection_details.objects.filter(Q(inspected_on__date__range=[fromdate,todate]) & Q(instypeid_id=insid[0]['instypeid']) & Q(section=sec) & Q(designation_id__in=desgn_no)).values('inspected_on','designation_id','einspno','instypeid_id','section_id').order_by('-inspected_on'))
                else:
                    if sec=="Select":
                        details = list(m2.einspection_details.objects.filter(Q(inspected_on__date__range=[fromdate,todate]) & Q(instypeid_id=insid[0]['instypeid']) & Q(entityid=insp_val1) & Q(designation_id__in=desgn_no)).values('inspected_on','designation_id','einspno','instypeid_id','section_id').order_by('-inspected_on'))
                    else:
                        details = list(m2.einspection_details.objects.filter(Q(inspected_on__date__range=[fromdate,todate]) & Q(instypeid_id=insid[0]['instypeid']) & Q(entityid=insp_val1) & Q(section=sec) & Q(designation_id__in=desgn_no)).values('inspected_on','designation_id','einspno','instypeid_id','section_id').order_by('-inspected_on'))
            else:
                details = list(m2.einspection_details.objects.filter(section=sec,designation_id__in=desgn_no).values('inspected_on','designation_id','einspno','instypeid_id','section_id'))

            for i in range(len(details)):
                if details[i]['inspected_on']:
                    date = details[i]['inspected_on'].strftime('%d/%m/%y')
                else:
                    date = 'NA'
                l1 = list(m2.einspection_details.objects.filter(einspno=details[i]['einspno']).values('entitydetails'))
                # # print(l1)
                l2 = list(m2.einspection_details.objects.filter(einspno=details[i]['einspno']).values('entityid'))
                # # print(l2)
                instype = list(inspectiontype_master.objects.filter(instypeid=details[i]['instypeid_id']).values('name'))
                if len(instype)==0:
                    instype.append({'name': 'None'})
                # # print(instype)
                details[i].update({'instype':instype[0]['name'], 'inspected_on': date, 'l1':l1[0]['entitydetails'], 'l2':l2[0]['entityid']})
                desgn = list(Level_Desig.objects.filter(designation_code=details[i]['designation_id']).values('designation'))
                details[i].update({'designation':desgn[0]['designation']})
                sectn = list(section_master.objects.filter(secid=details[i]['section_id']).values('section_code'))
                if len(sectn):
                    details[i].update({'section_code':sectn[0]['section_code']})
                else:
                    details[i].update({'section_code':'NA'})
            # # print(details)
        else:
            email = request.user
            rly = list(Level_Desig.objects.filter(official_email_ID=email).values('rly_unit_id'))
            ltype = list(railwayLocationMaster.objects.filter(rly_unit_code=rly[0]['rly_unit_id']).values('location_type','location_code'))
            # # print("ltype",ltype)
            if ltype[0]['location_type'] == 'ZR':
                rly1 = list(railwayLocationMaster.objects.filter(parent_location_code=ltype[0]['location_code'],location_type='DIV').values_list('rly_unit_code',flat=True))
                desgn = list(Level_Desig.objects.filter(official_email_ID=email).values_list('designation_code',flat=True))
            else:
                # rly1 = list(Level_Desig.objects.filter(official_email_ID=email).values_list('rly_unit_id',flat=True))
                desgn = list(Level_Desig.objects.filter(official_email_ID=email).values_list('designation_code',flat=True))
            # # print("rlys",rly1)
            # desgn = list(Level_Desig.objects.filter(rly_unit_id__in=rly1).values_list('designation_code',flat=True))
            # # print("desgns",desgn)
            # desgc = list(Level_Desig.objects.filter(official_email_ID=email).values('designation_code'))[0]['designation_code']
            # # print(desgc)
            #datedetail= list(m2.einspection_details.objects.filter(delete_flag=False).values('inspected_on')).date()
            details = list(m2.einspection_details.objects.filter(delete_flag=False,designation_id__in=desgn).values('inspected_on','designation_id','einspno','instypeid_id','section_id'))
            # details = list(m2.einspection_details.objects.values('inspected_on','designation_id','einspno','instypeid_id','section_id'))
            # # print("ddtaisl",details)
            for i in range(len(details)):
                if details[i]['inspected_on']:
                    date = details[i]['inspected_on'].strftime('%d/%m/%y')
                else:
                    date = 'NA'  
                l1 = list(m2.einspection_details.objects.filter(einspno=details[i]['einspno']).values('entitydetails'))
                l2 = list(m2.einspection_details.objects.filter(einspno=details[i]['einspno']).values('entityid'))
                instype = list(inspectiontype_master.objects.filter(instypeid=details[i]['instypeid_id']).values('name'))
                details[i].update({'instype':instype[0]['name'], 'inspected_on': date, 'l1':l1[0]['entitydetails'], 'l2':l2[0]['entityid']})
                desgn = list(Level_Desig.objects.filter(designation_code=details[i]['designation_id']).values('designation'))
                details[i].update({'designation':desgn[0]['designation']})
                sectn = list(section_master.objects.filter(secid=details[i]['section_id']).values('section_code'))
                if len(sectn):
                    details[i].update({'section_code':sectn[0]['section_code']})
                else:
                    details[i].update({'section_code':'NA'})
            # # print("HEYY",details)
    return JsonResponse({'details':details},safe=False)



@login_required
def viewDetails(request):
    ss=0
    id=request.GET.get('id')
    l1 = m2.einspection_details.objects.filter(einspno=id).values('entitydetails')
    l2 = m2.einspection_details.objects.filter(einspno=id).values('entityid')
    rating=m2.einspection_details.objects.filter(einspno=id).values('ratings')
    abnormal=m2.einspection_details.objects.filter(einspno=id).values('abnormal')
    if abnormal[0]['abnormal']=="No":
        abn = "No"
        remark="NA"
    else:
        abn=abnormal[0]['abnormal'].split('/')[0]
        remark=abnormal[0]['abnormal'].split('/')[1]
    stdate=m2.einspection_details.objects.filter(einspno=id).values('start_date')
    enddate=m2.einspection_details.objects.filter(einspno=id).values('end_date')
    sttime=m2.einspection_details.objects.filter(einspno=id).values('start_time')
    endtime=m2.einspection_details.objects.filter(einspno=id).values('end_time')
    rlyid = m2.einspection_details.objects.filter(einspno=id).values('rly_id_id_id')
    divid = m2.einspection_details.objects.filter(einspno=id).values('div_id_id_id')
    # print('rlyid',rlyid)
    rly = railwayLocationMaster.objects.filter(rly_unit_code=rlyid[0]['rly_id_id_id']).values('location_description')
    div = railwayLocationMaster.objects.filter(rly_unit_code=divid[0]['div_id_id_id']).values('location_description')
    # print('rly: ',rly[0]['location_description'])
    date=m2.einspection_details.objects.filter(einspno=id).values('inspected_on')
    desgc=m2.einspection_details.objects.filter(einspno=id).values('designation_id')
    desgn=Level_Desig.objects.filter(designation_code=desgc[0]['designation_id']).values('designation','empno_id')
    name=m1.empmast.objects.filter(empno=desgn[0]['empno_id']).values('empname')
    fromstationid=m2.einspection_details.objects.filter(einspno=id).values('startstn_id')
    # # print(fromstationid)
    tostationid=m2.einspection_details.objects.filter(einspno=id).values('endstn_id')
    fromstation=station_master.objects.filter(stnshortcode=fromstationid[0]['startstn_id']).values('station_name')
    # # print(fromstation)
    tostation=station_master.objects.filter(stnshortcode=tostationid[0]['endstn_id']).values('station_name')
    
    desgn=Level_Desig.objects.filter(designation_code=desgc[0]['designation_id']).values('designation')
    # formDetails = {}
    # # print(date)
    inspid = list(m2.einspection_details.objects.filter(einspno=id).values('instypeid_id'))[0]['instypeid_id']
    # # print(inspid)
    instype = inspectiontype_master.objects.filter(instypeid=inspid).values('name')
    # formDetails.update({'date':date,'name':name,'fromstation':fromstation,'tostation':tostation,'desgn':desgn,'instype':instype})
    # # print(formDetails)
    question = {}
    category = list(inspectiontype_master.objects.filter(parent_id=inspid).values('name','instypeid'))
    for j in range(len(category)):
        answer={}
        qu = list(m2.questionare_master.objects.filter(instypeid_id_id=category[j]['instypeid']).values('activity','qid'))
        for i in range(len(qu)):
            answer.update({qu[i]['activity']:m2.einspection_item_detail.objects.filter(einspno_id=id,qid_id=qu[i]['qid']).values('value')})
        question.update({category[j]['name']:answer})
        # # print("ques",question)
    context = {
        'question':question,
        'date':date,
        'instype':instype,
        'desgn':desgn,
        'fromstation':fromstation,
        'tostation':tostation,
        'name':name,
        'l1':l1,
        'l2':l2,
        'ss':ss,
        'rly':rly,
        'div':div,
        'stdate':stdate,
        'enddate':enddate,
        'sttime':sttime,
        'endtime':endtime,
        'rating':rating,
        'abn':abn,
        'remark':remark,
    }
    # id=request.GET.get('id')
    # inspid = list(m2.einspection_details.objects.filter(einspno=id).values('instypeid_id'))[0]['instypeid_id']
    # # for i in range(len(inspid)):
    # question = {}
    # category = list(inspectiontype_master.objects.filter(parent_id=inspid).values('name','instypeid'))
    # # # print(category)
    # hello={}
    # # for j in range(len(category)):
    # #     # answer={}
    # #     question.update({category[j]['name']:list(m2.questionare_master.objects.filter(instypeid_id_id=category[j]['instypeid']).values('activity','qid'))})
    # #     for i,k in question.items():
    # #         # print("iand j",k)
    # #         # # print(question[i])
    # #         # qu = question[i]
    # #         answer = {}
    # #         for l in range(0,len(k)):
    # #             # print("l",k[l]['qid'])
    # #             answer.update({k[l]['qid']:list(m2.einspection_item_detail.objects.filter(einspno_id=id,qid_id=k[l]['qid']).values('value'))})
    # #         # print("answer",answer)
    # #         # hello.update('question':question)
    # #         # hello.update('answer':answer)
    # #         # print(hello)
    #         # question.update(answer)
    #     # question.update(answer)

    # for j in range(len(category)):
    #     answer={}
    #     qu = list(m2.questionare_master.objects.filter(instypeid_id_id=category[j]['instypeid']).values('activity','qid'))
    #     # # print(qu)
    #     for i in range(len(qu)):
    #         answer.update({qu[i]['activity']:m2.einspection_item_detail.objects.filter(einspno_id=id,qid_id=qu[i]['qid']).values('value')})
        
    #     # # print("ans",answer)
    #     # answer.update(qu)
    #     # # # print(answer)
    #     question.update({category[j]['name']:answer})
    #     # # print("ques",question)
    # #     question.update({category[j]['name']:list(m2.questionare_master.objects.filter(instypeid_id_id=category[j]['instypeid']).values('activity','qid'))})
    # #     for i,k in question.items():
    # #         # print("iand j",k)
    # #         # # print(question[i])
    # #         # qu = question[i]
    # #         answer = {}
    # #         for l in range(0,len(k)):
    # #             # print("l",k[l]['qid'])
    # #             answer.update({k[l]['qid']:list(m2.einspection_item_detail.objects.filter(einspno_id=id,qid_id=k[l]['qid']).values('value'))})
    # #         # print("answer",answer)
    # #         # hello.update('question':question)
    # #         # hello.update('answer':answer)
    # #         # print(hello)
    # #         question.update(answer)
    # #     question.update(answer)
    # # # print("ques",question)
    # # # print("ans",answer)
    # # # print("cate",category)
    # context = {
    #     'question':question,
    # }
    return render(request,'viewDetails.html',context) 

@login_required
def pdfDetails(request):
    ss=0
    id=request.GET.get('id')
    copy_to_details = []
    edit_copy_to = list(mm6.copyto_mails.objects.filter(doc_id=id, area_flag=0, doc_table='e').values('receiver_id'))
    if len(edit_copy_to) > 0:
        edit_copy_to = edit_copy_to[0]['receiver_id'].split(',')
        for li1 in edit_copy_to:
            level1_data = list(Level_Desig.objects.filter(designation_code=li1).values('designation_code','designation'))
            if len(level1_data)>0:
                copy_to_details.append(level1_data[0]['designation'])
                

    l1 = m2.einspection_details.objects.filter(einspno=id).values('inspection_note_no','entitydetails', 'entityid', 'section','start_date','start_time','end_date','end_time','instypeid_id','designation_id__designation','created_by','entitydetails','inspection_title','inspected_on','ratings','abnormal','instypeid_id__name')  #inspection_title
    other_entity = list(inspectiontype_master.objects.filter(instypeid=l1[0]['instypeid_id']).values('other_entity'))
    if other_entity[0]['other_entity'] != None:
        other_entity = other_entity[0]['other_entity']
    else:
        other_entity = None
    name=m1.empmast.objects.filter(empno=l1[0]['created_by']).values('empname','empmname','emplname')

    rating = None
    if l1[0]['ratings'] !=None:
        rating = l1[0]['ratings']
    if l1[0]['abnormal']=="No":
        abn = "No"
        remark="NA"
    else:
        abn=l1[0]['abnormal'].split('/')[0]
        remark=l1[0]['abnormal'].split('/')[1]
    
    if l1[0]['entitydetails'] != None:
        f1 =  l1[0]['entitydetails']
        first =' : ' +l1[0]['entityid']
        
        editsection = list(m2.einsp_multi_location.objects.filter(einspno = id,type='SEC').values_list('item', flat = True))
        if len(editsection)>0:
            f2 = 'Section'
            defaultSection=list(section_master.objects.filter(secid__in=editsection).values('section_name','section_code').order_by('section_name'))
            second = ' : '
            for i in range(len(defaultSection)):
                if second != ' : ':
                    second += ', '
                second += defaultSection[0]['section_code'] + ' - '+defaultSection[0]['section_name']
        else:
            defaultSection=list(section_master.objects.filter(secid=l1[0]['section']).values('section_name','section_code').order_by('section_name'))
            f2 = 'Section'
            second = ' : '+ defaultSection[0]['section_code'] + ' - '+defaultSection[0]['section_name']
    elif l1[0]['entitydetails'] == None and other_entity != None:
        f1 =  other_entity
        first =' : ' +l1[0]['entityid']
        editsection = list(m2.einsp_multi_location.objects.filter(einspno = id,type='SEC').values_list('item', flat = True))
        if len(editsection)>0:
            f2 = 'Section'
            defaultSection=list(section_master.objects.filter(secid__in=editsection).values('section_name','section_code').order_by('section_name'))
            second = ' : '
            for i in range(len(defaultSection)):
                if second != ' : ':
                    second += ', '
                second += defaultSection[0]['section_code'] + ' - '+defaultSection[0]['section_name']
        else:
            defaultSection=list(section_master.objects.filter(secid=l1[0]['section']).values('section_name','section_code').order_by('section_name'))
            f2 = 'Section'
            second = ' : '+ defaultSection[0]['section_code'] + ' - '+defaultSection[0]['section_name']
    else:
        editsection = list(m2.einsp_multi_location.objects.filter(einspno = id,type='SEC').values_list('item', flat = True))
        if len(editsection)>0:
            f1 = 'Section'
            defaultSection=list(section_master.objects.filter(secid__in=editsection).values('section_name','section_code').order_by('section_name'))
            first = ' : '
            for i in range(len(defaultSection)):
                if first != ' : ':
                    first += ', '
                first += defaultSection[0]['section_code'] + ' - '+defaultSection[0]['section_name']
        else:
            defaultSection=list(section_master.objects.filter(secid=l1[0]['section']).values('section_name','section_code').order_by('section_name'))
            f1 = 'Section'
            first = ' : '+ defaultSection[0]['section_code'] + ' - '+defaultSection[0]['section_name']
        f2 = ''
        second = ''
    start_time = ''
    end_time = ''
    if l1[0]['start_time'] != None:
        start_time = str(l1[0]['start_time'].strftime("%H:%M:%S"))
    if l1[0]['end_time'] != None:
        end_time = str(l1[0]['end_time'].strftime("%H:%M:%S"))
    # fromstationid=m2.einspection_details.objects.filter(einspno=id).values('startstn_id')
    # tostationid=m2.einspection_details.objects.filter(einspno=id).values('endstn_id')
    # fromstation=station_master.objects.filter(stnshortcode=fromstationid[0]['startstn_id']).values('station_name')
    # tostation=station_master.objects.filter(stnshortcode=tostationid[0]['endstn_id']).values('station_name')
    actorDetails1 = list(m2.actor_with_inspection_details.objects.filter(einspno=id).values('actorId_id').distinct())
    actorData = []
    for j in range(len(actorDetails1)):
        actorDetails = list(m2.actor_with_inspection_details.objects.filter(einspno=id,actorId_id=actorDetails1[j]['actorId_id']).values('actorId_id__actorName','actorId_id','details'))
        tempHead = []
        tempData = []
        for i in range(len(actorDetails)):
            if actorDetails[0]['details'] != None:
                str1 = (actorDetails[i]['details'][1:len(actorDetails[i]['details'])-1]).split(',')
                tempData1 = []
                for j in str1:
                    str2 = j.split(':')
                    if i == 0:
                        tempHead.append((str2[0].strip())[1:len((str2[0].strip()))-1])
                    tempData1.append((str2[1].strip())[1:len((str2[1].strip()))-1])
                tempData.append(tempData1)
        if len(tempData) != 0:
            actorData.append({'actor':actorDetails[i]['actorId_id__actorName'],'head':tempHead,'data':tempData})
    question = []
    import string
    alphNumber = list(string.ascii_uppercase)
    category = list(inspectiontype_master.objects.filter(parent_id=l1[0]['instypeid_id'],instypeid__in=m2.einspection_item_detail.objects.filter(einspno=id).values('qncat')).values('name','instypeid'))
    for j in range(len(category)):
        answer = []
        if j < 26:
            alphNum = alphNumber[j]
        else:
            alphNum = 'A'+ str(alphNumber[j])

        qu = list(m2.questionare_master.objects.filter(instypeid_id_id=category[j]['instypeid'], qid__in = m2.einspection_item_detail.objects.filter(einspno=id).values('qid')).values('activity','qid','choicetype'))
      
        for i in range(len(qu)):
            data = list(m2.einspection_item_detail.objects.filter(einspno_id=id,qid_id=qu[i]['qid']).values('value','eitemid','remarks' ,'location'))
            mark = m2.einsp_marked.objects.filter(eitemid = data[0]['eitemid']).values('designation')
            if mark:
                mark = mark[0]['designation']
            else:
                mark = ''
            if qu[i]['choicetype'] in [9,10]:
                dv = data[0]['value'].replace('$',', ')
            else:
                dv = data[0]['value']
            rRem = []
            if qu[i]['choicetype'] == 8:
                rGiven = int(data[0]['value'])
                for i1 in range(1,11):
                    if i1 <= rGiven:
                        rRem.append(1)
                    else:
                        rRem.append(0)
            

            
            answer.append({'rRem':rRem,'choicetype':qu[i]['choicetype'],'activity':qu[i]['activity'],'value':dv,'remarks':data[0]['remarks'],'mark':mark,'loc':data[0]['location']})
        question.append({'category':category[j]['name'],'answer':answer,'alphNum':alphNum})
    if request.is_secure():
        protocol = 'https://'
    else:
        protocol = 'http://'
    urlData=protocol+str(request.get_host())+'/media/'
    context = {
        'question':question,
        'name':name,
        'l1':l1,
        'rating':rating,
        'abn':abn,
        'remark':remark,
        'first':first,
        'second':second,
        'f1':f1,
        'f2':f2,
        'start_time':start_time,
        'end_time':end_time,
        'actorData':actorData,
        'urlData':urlData,
        'copy_to_details':copy_to_details,
    }
    pdf=utils.render_to_pdf('pdfDetails.html',context)
    return pdf





def getValues(request):
    if request.method == "GET":
        insp = request.GET.get('insp')
        # # print('insp:',insp)
        insp_val = request.GET.get('insp_val')
        # answer = {}
        if insp == "Station":
            codes = list(station_master.objects.filter(delete_flag=False).values_list('stnshortcode',flat=True))
        elif insp == "Running Room":
            codes = list(runningroom_master.objects.filter(delete_flag=False).values_list('rr_code',flat=True))
        else:
            codes = list(train_master.objects.filter(delete_flag=False).values_list('train_no',flat=True))
        # # print(answer)
        # # print("codes",codes)
        return JsonResponse(codes,safe=False)
    return JsonResponse({"success":False},status=400)

def getstations(request):
    if request.method == 'GET':
        rail = request.GET.get('rail')
        # # print(rail)
        stationlist = list(station_master.objects.filter(div_id_id__rly_unit_code = rail).values('station_name','stnshortcode'))
        # # print('Station List',len(stationlist))
        return JsonResponse(stationlist,safe=False)
    return JsonResponse({"success":False}, status=400)


def endStation(request):
    if request.method=='GET':
        start_station=request.GET.get('start_station')
        end=list(station_master.objects.filter(stnshortcode=start_station).values())
        # # print('jnjnjknkj',end)
        return JsonResponse(end,safe=False)
    return JsonResponse({"success":False},status=400)


def ValidateDateOfInsp(request):
    if request.method == 'GET':
        # getdate = request.GET.get('value')
        # inspection_of = request.GET.get('inspected_of')
        cardId = request.GET.get('cardId')
        starttime = request.GET.get('starttime') +':00'
        startdate = request.GET.get('startdate')
        # print(starttime,startdate,'starttime,startdate')

        date = str(datetime.strptime(startdate,'%d-%m-%Y'))
        curdate = datetime.now()
        curdate = str(curdate.date())

        try:
            loginUser=Level_Desig.objects.filter(official_email_ID=request.user)[0]
        except:
            loginUser=''
        
        if m2.einspection_details.objects.filter(instypeid_id = cardId,created_on__contains = curdate[0:10],
        created_by=loginUser.empno_id,start_date=date[0:10],instypeid_id__isnull=False,end_time__gte=starttime):
            status=1
        else:
            status = 0
        # print('status',status)
        return JsonResponse({'status':status},safe=False)
    return JsonResponse({"success":False}, status=400)


def checkFillofDepartment(request):
    if request.method == 'POST':
        result = []
        finalList = request.POST.getlist('finalList[]')
        result = list(m2.questionare_master.objects.filter(qid__in=finalList).values())
        # # print('finalList',result)
        return JsonResponse(result,safe=False)
    return JsonResponse({'success':False})





def getStationCode(request):
    if request.method == 'GET':
        station = request.GET.get('station')
        code1 = list(station_master.objects.filter(station_name=station).values('stnshortcode'))
        code=code1[0]['stnshortcode']
        # print('stnshortcode ' ,code)
        return JsonResponse({'code':code},safe=False)
    return JsonResponse({"success":False},status=400)

def getSectionCode(request):
    if request.method == 'GET':
        section = request.GET.get('section')
        code1 = list(section_master.objects.filter(section_code=section).values('section_code'))
        code=code1[0]['section_code']
        # print('section_code ' ,code)
        return JsonResponse({'code':code},safe=False)
    return JsonResponse({"success":False},status=400)

@login_required
def stationInsp(request):
    myval='withoutsearch'
    myl1=[]
    myl2=[]
    l1 = list(station_master.objects.filter(~Q(station_cat=None)).values('station_cat').distinct('station_cat'))
    for i in range(len(l1)):
        myl1.append(l1[i]['station_cat'])
    # context = {
    #     'stncats': l1, 
    # }
    # # print("nwdhdhehdu",myl1)
    # # print("nwdhdhehdu",l1)
    email = request.user
    rlycode = list(Level_Desig.objects.filter(official_email_ID=email).values('rly_unit_id','designation_code'))
    # # print(rlycode)
    rly = list(Level_Desig.objects.filter(official_email_ID=email).values('rly_unit_id'))
    ltype = list(railwayLocationMaster.objects.filter(rly_unit_code=rly[0]['rly_unit_id']).values('location_type','location_code'))
    # # print("ltype",ltype,rly)
    if ltype[0]['location_type'] == 'ZR':
        rly1 = list(railwayLocationMaster.objects.filter(parent_location_code=ltype[0]['location_code'],location_type='DIV').values_list('rly_unit_code',flat=True))
        # desgn = list(Level_Desig.objects.filter(rly_unit_id__in=rly1).values_list('designation_code',flat=True))
        desgn = list(Level_Desig.objects.filter(official_email_ID=email).values_list('designation_code',flat=True))
        # # print(rly1,desgn)
    else:
        rly1 = list(Level_Desig.objects.filter(official_email_ID=email).values_list('rly_unit_id',flat=True))
        desgn = list(Level_Desig.objects.filter(official_email_ID=email).values_list('designation_code',flat=True))
    # # print("rlys",rly1)
    division=list(railwayLocationMaster.objects.filter(rly_unit_code=rlycode[0]['rly_unit_id']).values('location_code'))
    div=division[0]['location_code']
    # # print("vidhi",division[0]['location_code'])
    details = {}
    fromdate = request.GET.get('fromdate')
    todate = request.GET.get('todate')
    stncat1 = request.GET.getlist('stncat1[]')
    if fromdate:
        fromdate = datetime.strptime(fromdate,"%d-%m-%Y")
    if todate:
        todate = datetime.strptime(todate,"%d-%m-%Y")
    # # print("from",fromdate)
    # # print("to",todate)
    # # print("stncat1",stncat1)
    if(stncat1):
        l11 = list(station_master.objects.filter(Q(station_cat__in=stncat1) & Q(div_id_id_id__in=rly1)).values('station_cat','stnshortcode').distinct('station_cat'))
    else:
        l11 = list(station_master.objects.filter(~Q(station_cat=None) & Q(div_id_id_id__in=rly1)).values('station_cat','stnshortcode').distinct('station_cat'))
    # # print(l1)
    for i in range(len(l11)):
            myl2.append(l11[i]['station_cat'])
    totalscheduled = []
    inspcompleted = []
    for i in range(len(l11)):
        if stncat1:
            l2 = list(station_master.objects.filter(Q(station_cat__in=stncat1) & Q(div_id_id_id__in=rly1) & Q(station_cat=l11[i]['station_cat'])).values('stnshortcode'))
        else:
            l2 = list(station_master.objects.filter(~Q(station_cat=None) & Q(div_id_id_id__in=rly1) & Q(station_cat=l11[i]['station_cat'])).values('stnshortcode'))
        # l3 = []
        # # print("#####",l2)
        a=0
        mx = 0
        mn = len(l11)
        mxins = ""
        mnins = ""
        a1 = 0
        a2 = 0
        for j in range(len(l2)):
            if fromdate and todate:
                totsch = list(m2.einspection_details.objects.filter(Q(inspected_on__date__range=[fromdate,todate]) & Q(div_id_id_id__in=rly1) & Q(entityid=l2[j]['stnshortcode']) & Q(inspection_type=4)).values('einspno','entityid'))
                inspcomp = list(m2.einspection_details.objects.filter(Q(inspected_on__date__range=[fromdate,todate])& Q(div_id_id_id__in=rly1) & Q(entityid=l2[j]['stnshortcode']) & Q(status=4)).values('einspno','entityid'))
            else:
                totsch = list(m2.einspection_details.objects.filter(Q(div_id_id_id__in=rly1) & Q(entityid=l2[j]['stnshortcode']) & Q(inspection_type=4)).values('einspno','entityid'))
                inspcomp = list(m2.einspection_details.objects.filter(Q(div_id_id_id__in=rly1) & Q(entityid=l2[j]['stnshortcode']) & Q(status=4)).values('einspno','entityid'))
            # # print("totsch",totsch)
            # # print("inspcomp",inspcomp)
            a1 += len(totsch)
            a2 += len(inspcomp)
            if fromdate and todate:
                l3 = list(m2.einspection_details.objects.filter(Q(inspected_on__date__range=[fromdate,todate]) & Q(div_id_id_id__in=rly1) & Q(entityid=l2[j]['stnshortcode'])).values('einspno'))
            else:
                l3 = list(m2.einspection_details.objects.filter(Q(div_id_id_id__in=rly1) & Q(entityid=l2[j]['stnshortcode'])).values('einspno'))
            # # print("l3",l3)
            # # print("length",len(l3))
            # # print("mn",mn)
            if len(l3) and len(l3) > mx:
                mx = len(l3)
                mxins = list(station_master.objects.filter(stnshortcode=l2[j]['stnshortcode']).values('station_name'))[0]['station_name']
            if len(l3) and len(l3) < mn:
                mn = len(l3)
                mnins = list(station_master.objects.filter(stnshortcode=l2[j]['stnshortcode']).values('station_name'))[0]['station_name']
            # # print("l3",l3)
            if len(l3):
                a = a+len(l3)
        # # print("count",a)
        if mn==len(l11):
            mn1=""
        else:
            mn1="("+str(mn)+")"
        if mx==0:
            mx1=""
        else:
            mx1="("+str(mx)+")"
        totalscheduled.append(a1)
        inspcompleted.append(a2)
        # totalscheduled.append(len(totsch))
        # inspcompleted.append(len(inspcomp))
        details.update({l1[i]['station_cat']:{'cnt':len(l2), 'tot':a, 'mxins':mxins, 'mx':mx1, 'mnins': mnins, 'mn': mn1, 'totsch': totsch, 'inspcomp': inspcomp,'l1':myl2}})
    
    # totalscheduled = []
    # inspcompleted = []
    # # print(details)
    # for k in range(len(details)):
    #     # print("hiii",details[k])
    #     totalscheduled.append(details[k]['totsch'])
    #     inspcompleted.append(details[k]['inspcomp'])
    # # print("details",details)
    # # print("hiiii",inspcompleted,totalscheduled)
    # # print('xyz',inspcompleted)
    # # print('xyz',totalscheduled)

    per=[]
    for i in range(len(totalscheduled)):
        if(totalscheduled[i] or inspcompleted[i] != 0):
            per.append(inspcompleted[i]/totalscheduled[i])
        else:
            per.append(0)
        # # print(inspcompleted[i])
        # # print(totalscheduled[i])

    # # print('******',per)


#     mylist1 = {
#   "successFlag": True,
#   "records": [
#     {
#       "srlNo": 1,
#       "scheduleDate": "2022-10-18",
#       "zoneCode": "IR",
#       "trainCount": 1965,
#       "nltCount": 1556,
#       "trainTypeGroup": "M"
#     },
#     {
#       "srlNo": 2,
#       "scheduleDate": "2022-10-17",
#       "zoneCode": "IR",
#       "trainCount": 4,
#       "nltCount": 0,
#       "trainTypeGroup": "O"
#     }]}
#     # print(mylist1['records'])
#     for i in range(len(mylist1['records'])):
#         # # print(mylist1['records'][i]['scheduleDate'])
#         m2.Punctuality_Service_Output.objects.create(Scheduled_Date=mylist1['records'][i]['scheduleDate'],Zone_Code=mylist1['records'][i]['zoneCode'],train_count=mylist1['records'][i]['trainCount'],nlt_count=mylist1['records'][i]['nltCount'],train_group=mylist1['records'][i]['trainTypeGroup'])
        

#     mylist2 = {
#   "successFlag": True,
#   "records": [
#   {
#     "srlNo": 1,
#     "scheduleDate": "2022-10-14",
#     "zoneCode": "CR",
#     "causeCode": "ELEC",
#     "departmentCode": "",
#     "duration": 0,
#     "trainTypeGroup": "O"
#   },
#   {
#     "srlNo": 2,
#     "scheduleDate": "2022-10-11",
#     "zoneCode": "ECR",
#     "causeCode": "ELEC",
#     "departmentCode": "",
#     "duration": 0,
#     "trainTypeGroup": "O"
#     }]}
#     # print(mylist2['records'])
#     for i in range(len(mylist2['records'])):
#         # # print(mylist1['records'][i]['scheduleDate'])
#         m2.Cause_Service_Output.objects.create(Scheduled_Date=mylist2['records'][i]['scheduleDate'],Zone_Code=mylist2['records'][i]['zoneCode'],cause_code=mylist2['records'][i]['causeCode'],department_code=mylist2['records'][i]['departmentCode'],duration=mylist2['records'][i]['duration'],train_group=mylist2['records'][i]['trainTypeGroup'])
        
#     mylist3 = {
#   "fromDate": "20-Oct-2022",
#   "toDate": "30-Oct-2022",
#   "vRecordList": [
#     {
#       "classification": "BLOCKS",
#       "failureCode": "CNST",
#       "failureSubCode": "BBCNST",
#       "yearType": 1,
#       "division": "BB",
#       "zone": "CR",
#       "AF": 0,
#       "TD": 0,
#       "duration": 0,
#       "averageMinutes": 0,
#       "date": "2022-11-1"
#     },
#     {
#       "classification": "BLOCKS",
#       "failureCode": "CNST",
#       "failureSubCode": "BBCNST",
#       "yearType": 2,
#       "division": "BB",
#       "zone": "CR",
#       "AF": 0,
#       "TD": 0,
#       "duration": 0,
#       "averageMinutes": 0,
#       "date": "2022-11-2"
#     }]}
#     # print(mylist3['vRecordList'])
#     for i in range(len(mylist3['vRecordList'])):
#         # # print(mylist1['records'][i]['scheduleDate'])
#         m2.Asset_Reliability.objects.create(Date=mylist3['vRecordList'][i]['date'],Zone=mylist3['vRecordList'][i]['zone'],classification=mylist3['vRecordList'][i]['classification'],failure_code=mylist3['vRecordList'][i]['failureCode'],failure_subcode=mylist3['vRecordList'][i]['failureSubCode'],duration=mylist3['vRecordList'][i]['duration'],division=mylist3['vRecordList'][i]['division'],AF=mylist3['vRecordList'][i]['AF'],TD=mylist3['vRecordList'][i]['TD'],yearType=mylist3['vRecordList'][i]['yearType'],average_minutes=mylist3['vRecordList'][i]['averageMinutes'])
        
    context={
    'myval':myval,
    'totalscheduled':totalscheduled,
    'inspcompleted':inspcompleted,
    'per':per,
    'stncats2': myl1, 
    'stncats': l1,
    'div':div,
    'stncats3':myl2
    }
    return render(request,'stationInsp.html',context)


def searchDet(request):
    myval='searchvala'
    if request.method=='GET' and request.is_ajax():
        myl1=[]
        myl2=[]
        l11 = list(station_master.objects.filter(~Q(station_cat=None)).values('station_cat').distinct('station_cat'))
        for i in range(len(l11)):
            myl1.append(l11[i]['station_cat'])
        email = request.user
        # rlycode = list(Level_Desig.objects.filter(official_email_ID=email).values('rly_unit_id','designation_code'))
        # # print(rlycode)
        rly = list(Level_Desig.objects.filter(official_email_ID=email).values('rly_unit_id'))
        ltype = list(railwayLocationMaster.objects.filter(rly_unit_code=rly[0]['rly_unit_id']).values('location_type','location_code'))
        
        if ltype[0]['location_type'] == 'ZR':
            rly1 = list(railwayLocationMaster.objects.filter(parent_location_code=ltype[0]['location_code'],location_type='DIV').values_list('rly_unit_code',flat=True))
            # desgn = list(Level_Desig.objects.filter(rly_unit_id__in=rly1).values_list('designation_code',flat=True))
            desgn = list(Level_Desig.objects.filter(official_email_ID=email).values_list('designation_code',flat=True))
            
        else:
            rly1 = list(Level_Desig.objects.filter(official_email_ID=email).values_list('rly_unit_id',flat=True))
            desgn = list(Level_Desig.objects.filter(official_email_ID=email).values_list('designation_code',flat=True))
        # # print("rlys",rly1)
        details = {}
        fromdate = request.GET.get('fromdate')
        todate = request.GET.get('todate')
        stncat1 = request.GET.getlist('stncat1[]')
        if fromdate:
            fromdate = datetime.strptime(fromdate,"%d-%m-%Y")
        if todate:
            todate = datetime.strptime(todate,"%d-%m-%Y")
        # # print("from",fromdate)
        # # print("to",todate)
        # # print("stncat1",stncat1)
        if(stncat1):
            l1 = list(station_master.objects.filter(Q(station_cat__in=stncat1) & Q(div_id_id_id__in=rly1)).values('station_cat','stnshortcode').distinct('station_cat'))
        else:
            l1 = list(station_master.objects.filter(~Q(station_cat=None) & Q(div_id_id_id__in=rly1)).values('station_cat','stnshortcode').distinct('station_cat'))
        # # print("l1",l1)
        for i in range(len(l1)):
            myl2.append(l1[i]['station_cat'])
        totalscheduled = []
        inspcompleted = []
        for i in range(len(l1)):
            if stncat1:
                l2 = list(station_master.objects.filter(Q(station_cat__in=stncat1) & Q(div_id_id_id__in=rly1) & Q(station_cat=l1[i]['station_cat'])).values('stnshortcode'))
            else:
                l2 = list(station_master.objects.filter(~Q(station_cat=None) & Q(div_id_id_id__in=rly1) & Q(station_cat=l1[i]['station_cat'])).values('stnshortcode'))
            # l3 = []
            a=0
            mx = 0
            mn = 1000
            mxins = ""
            mnins = ""
            a1 = 0
            a2 = 0
            bestrating = 0
            beststation = ""
            mximpr = 0
            improvst = ""
            for j in range(len(l2)):
                if fromdate and todate:
                    totsch = list(m2.einspection_details.objects.filter(Q(inspected_on__date__range=[fromdate,todate]) & Q(div_id_id_id__in=rly1) & Q(entityid=l2[j]['stnshortcode']) & Q(inspection_type=4)).values('einspno','entityid'))
                    inspcomp = list(m2.einspection_details.objects.filter(Q(inspected_on__date__range=[fromdate,todate])& Q(div_id_id_id__in=rly1) & Q(entityid=l2[j]['stnshortcode']) & Q(status=4)).values('einspno','entityid'))
                else:
                    totsch = list(m2.einspection_details.objects.filter(Q(div_id_id_id__in=rly1) & Q(entityid=l2[j]['stnshortcode']) & Q(inspection_type=4)).values('einspno','entityid'))
                    inspcomp = list(m2.einspection_details.objects.filter(Q(div_id_id_id__in=rly1) & Q(entityid=l2[j]['stnshortcode']) & Q(status=4)).values('einspno','entityid'))
                # # print("totsch",totsch)
                # # print("inspcomp",inspcomp)
                a1 += len(totsch)
                a2 += len(inspcomp)
                if fromdate and todate:
                    l3 = list(m2.einspection_details.objects.filter(Q(inspected_on__date__range=[fromdate,todate]) & Q(div_id_id_id__in=rly1) & Q(entityid=l2[j]['stnshortcode'])).values('einspno'))
                else:
                    l3 = list(m2.einspection_details.objects.filter(Q(div_id_id_id__in=rly1) & Q(entityid=l2[j]['stnshortcode'])).values('einspno'))
                # # print("l3",l3)
                # # print("length",len(l3))
                # # print("mn",mn)
                r1 = 0
                prev = -1
                impr = 0
                ypoints=[]
                mnper = 10000
                mxper = -10000
                for k in range(len(l3)):
                    vid = list(m2.einspection_item_detail.objects.filter(einspno_id=l3[k]['einspno']).values('value_id_id'))
                    # scr = m2.einspection_item_detail.objects.filter(einspno_id=l3[k]['einspno'],score=1).count()
                    # # print("vid",vid)
                    cur = 0
                    for k1 in range(len(vid)):
                        sc = list(m2.radio_options.objects.filter(rid=vid[k1]['value_id_id']).values('rscore'))
                        if len(sc):
                            r1 = sc[0]['rscore']+1
                            cur = sc[0]['rscore']+1
                    # # print("HeLLOOOO",cur,scr)
                    if prev != -1 and prev > 0:
                        impr = ((cur-prev)*100)/prev
                        ypoints.append(impr)
                        if(mnper > cur-prev):
                            mnper = cur-prev
                        if(mxper < cur-prev):
                            mxper = cur-prev
                    prev = cur
                # # print("Array",ypoints)
                y = np.array(ypoints)

                # Compute the area using the composite trapezoidal rule.
                area = np.trapz(y, dx=(mxper+mnper)/2)
                # # print("area =", area)
                    
                if len(l3) and r1/len(l3) >= bestrating:
                    bestrating = r1
                    beststation = list(station_master.objects.filter(stnshortcode=l2[j]['stnshortcode']).values('station_name'))[0]['station_name']
                if mximpr < impr:
                    mximpr = impr
                    improvst = list(station_master.objects.filter(stnshortcode=l2[j]['stnshortcode']).values('station_name'))[0]['station_name']
                
                if len(l3) and len(l3) >= mx:
                    mx = len(l3)
                    mxins = list(station_master.objects.filter(stnshortcode=l2[j]['stnshortcode']).values('station_name'))[0]['station_name']
                    # # print("Paridhi:",mx,mxins)
                if len(l3) and len(l3) <= mn:
                    mn = len(l3)
                    mnins = list(station_master.objects.filter(stnshortcode=l2[j]['stnshortcode']).values('station_name'))[0]['station_name']
                    # # print("Paridhi:",mn,mnins)
                
                if len(l3):
                    a = a+len(l3)
            # # print("count",a)
            
            mn1="("+str(mn)+")"
            if mx==0:
                mx1=""
                mn1=""
            else:
                mx1="("+str(mx)+")"
            if mx==a:
                mn1=mx1
                mnins = mxins
            totalscheduled.append(a1)
            inspcompleted.append(a2)
            
            details.update({l1[i]['station_cat']:{'best':beststation,'improving':improvst,'cnt':len(l2), 'tot':a, 'mxins':mxins, 'mx':mx1, 'mnins': mnins, 'mn': mn1, 'totsch': totalscheduled, 'inspcomp':  inspcompleted,'l1':myl2}})
        # # print(details)
        # # print(details)
    # # print("hiiii2",inspcompleted,totalscheduled)
    # # print('xyz2',inspcompleted)
    # # print('xyz2',totalscheduled)

    per=[]
    for i in range(len(totalscheduled)):
        if(totalscheduled[i] or inspcompleted[i] != 0):
            per.append(inspcompleted[i]/totalscheduled[i])
        else:
            per.append(0)

    # # print('******2',per)
    # # print("Details",details)
    # y = np.array([20,25,33,50])

    # # Compute the area using the composite trapezoidal rule.
    # area = trapz(y, dx=25)
    # # print("area =", area)

    y = np.array([5,10,5,15])

    # Compute the area using the composite trapezoidal rule.
    area = np.trapz(y, dx=5)
    # # print("area =", area)

    context={
    'myval':myval,
    'totalscheduled':totalscheduled,
    'inspcompleted':inspcompleted,
    'per':per,
    # 'stncats22': myl1, 
    'stncats2': l1,
    # 'div2':div,
    # 'details':details
    }
    # return render(request,'stationInsp.html',context)
    return JsonResponse({'details':details,'length':len(details)},safe=False)
    

def showDet(request):
    if request.method=='GET' and request.is_ajax():
        email = request.user
        # rlycode = list(Level_Desig.objects.filter(official_email_ID=email).values('rly_unit_id','designation_code'))
        # # print(rlycode)
        rly = list(Level_Desig.objects.filter(official_email_ID=email).values('rly_unit_id'))
        ltype = list(railwayLocationMaster.objects.filter(rly_unit_code=rly[0]['rly_unit_id']).values('location_type','location_code'))
        
        if ltype[0]['location_type'] == 'ZR':
            rly1 = list(railwayLocationMaster.objects.filter(parent_location_code=ltype[0]['location_code'],location_type='DIV').values_list('rly_unit_code',flat=True))
            # desgn = list(Level_Desig.objects.filter(rly_unit_id__in=rly1).values_list('designation_code',flat=True))
            desgn = list(Level_Desig.objects.filter(official_email_ID=email).values_list('designation_code',flat=True))
            # print(rly1,desgn)
        else:
            rly1 = list(Level_Desig.objects.filter(official_email_ID=email).values_list('rly_unit_id',flat=True))
            desgn = list(Level_Desig.objects.filter(official_email_ID=email).values_list('designation_code',flat=True))
        # # print("rlys",rly1)
        myl2=[]
        details = {}
        l1 = list(station_master.objects.filter(~Q(station_cat=None) & Q(div_id_id_id__in=rly1)).values('station_cat','stnshortcode').distinct('station_cat'))
        
        for i in range(len(l1)):
            myl2.append(l1[i]['station_cat'])
        # # print("l1",l1)
        for i in range(len(l1)):
            l2 = list(station_master.objects.filter(~Q(station_cat=None) & Q(div_id_id_id__in=rly1) & Q(station_cat=l1[i]['station_cat'])).values('stnshortcode'))
            # # print(l2)
            # l3 = []
            a=0
            mx = 0
            mn = 1000
            mxins = ""
            mnins = ""
            bestrating = 0
            beststation = ""
            mximpr = 0
            improvst = ""
            for j in range(len(l2)):
                l3 = list(m2.einspection_details.objects.filter(Q(div_id_id_id__in=rly1) & Q(entityid=l2[j]['stnshortcode'])).values('einspno','inspected_on').order_by('inspected_on'))
                # # print("l3",l3)
                r1 = 0
                prev = -1
                impr = 0
                ypoints=[]
                mnper = 10000
                mxper = -10000
                for k in range(len(l3)):
                    vid = list(m2.einspection_item_detail.objects.filter(einspno_id=l3[k]['einspno']).values('value_id_id'))
                    # scr = m2.einspection_item_detail.objects.filter(einspno_id=l3[k]['einspno'],score=1).count()
                    # # print("vid",vid)
                    cur = 0
                    for k1 in range(len(vid)):
                        sc = list(m2.radio_options.objects.filter(rid=vid[k1]['value_id_id']).values('rscore'))
                        if len(sc):
                            r1 = sc[0]['rscore']+1
                            cur = sc[0]['rscore']+1
                    # # print("HeLLOOOO",cur,scr)
                    if prev != -1 and prev > 0:
                        impr = ((cur-prev)*100)/prev
                        ypoints.append(impr)
                        if(mnper > cur-prev):
                            mnper = cur-prev
                        if(mxper < cur-prev):
                            mxper = cur-prev
                    prev = cur
                # # print("Array",ypoints)
                y = np.array(ypoints)

                # Compute the area using the composite trapezoidal rule.
                area = np.trapz(y, dx=(mxper+mnper)/2)
                # # print("area =", area)
                    
                if len(l3) and r1/len(l3) >= bestrating:
                    bestrating = r1
                    beststation = list(station_master.objects.filter(stnshortcode=l2[j]['stnshortcode']).values('station_name'))[0]['station_name']
                if mximpr < impr:
                    mximpr = impr
                    improvst = list(station_master.objects.filter(stnshortcode=l2[j]['stnshortcode']).values('station_name'))[0]['station_name']
                
                if len(l3) and len(l3) >= mx:
                    mx = len(l3)
                    mxins = list(station_master.objects.filter(stnshortcode=l2[j]['stnshortcode']).values('station_name'))[0]['station_name']
                    # # print("Paridhi:",mx,mxins)
                if len(l3) and len(l3) <= mn:
                    mn = len(l3)
                    mnins = list(station_master.objects.filter(stnshortcode=l2[j]['stnshortcode']).values('station_name'))[0]['station_name']
                    # # print("Paridhi:",mn,mnins)
                
                if len(l3):
                    a = a+len(l3)
            # # print("count",a)
            
            mn1="("+str(mn)+")"
            if mx==0:
                mx1=""
                mn1=""
            else:
                mx1="("+str(mx)+")"
            if mx==a:
                mn1=mx1
                mnins = mxins
            totsch = m2.einspection_details.objects.filter(Q(div_id_id_id__in=rly1) & Q(entityid=l2[j]['stnshortcode']) & Q(designation_id__in=desgn) & Q(inspection_type=4)).count()
            inspcomp = m2.einspection_details.objects.filter(Q(div_id_id_id__in=rly1) & Q(entityid=l2[j]['stnshortcode']) & Q(designation_id__in=desgn) & Q(status=4)).count()
            details.update({l1[i]['station_cat']:{'improving': improvst,'best': beststation,'cnt':len(l2), 'tot':a, 'mxins':mxins, 'mx':mx1, 'mnins': mnins, 'mn': mn1, 'totsch': totsch, 'inspcom': inspcomp,'l1':myl2}})
        
    return JsonResponse({'details':details,'length':len(details)},safe=False)



####################################################### paridhi reports ###############################################

# def updateEinspUser(request):
#     if request.method=='GET': 
#         byOthersAction = request.GET.get('byOthersAction')
        
        
#         id = request.GET.get('id')
#         msg = 'Not updated, please contact admin'
#         if byOthersAction == 'pending':
#             date=request.GET.get('modalDate').split('-')
#             date= date[2]+'-'+date[1]+'-'+date[0]
#             m2.einsp_marked.objects.filter(id=id).update(target_date=date,target_date_given_on=datetime.today())
#             msg = 'Target Date is updated successfully'
#         elif byOthersAction == 'close':
#             modalremarks=request.GET.get('modalremarks')
#             curdate = datetime.today()
#             m2.einsp_marked.objects.filter(id=id).update(compliance=modalremarks,compliance_recieved_on=curdate,status_flag=4)
#             msg = 'Deficiency closed successfully'
#         elif byOthersAction == 'revert':
#             revertremarks=request.GET.get('revertremarks')
#             curdate = datetime.today()
#             m2.einsp_marked.objects.filter(id=id).update(compliance=revertremarks,compliance_recieved_on=curdate,status_flag=4, revert = 1,reverted_on=curdate)
#             msg = 'Deficiency Reverted successfully'
#         elif byOthersAction == 'forward':
#             forwardToId=request.GET.get('forwardToId')
#             forwardToRemarks=request.GET.get('forwardToRemarks')
#             empnox = Level_Desig.objects.filter(Q(official_email_ID=request.user) | Q(official_email_ID=request.user.email))
#             empno = ''
#             desgn_prev = None
#             desgc =None
#             if empnox:
#                 empno = empnox[0].empno_id
#                 desgn = empnox[0].designation
#                 desgc = empnox[0].designation_code

#             itemid = m2.einsp_marked.objects.filter(id=id)
#             designation1 = Level_Desig.objects.filter(designation_code=forwardToId)
#             eitemid = None
#             designation = None
#             if itemid:
#                 eitemid = itemid[0].id
#             if designation1:
#                 designation = designation1[0].designation
#             if m2.einsp_forward_marked.objects.filter(marked_no=eitemid,forwardTo_id=forwardToId).exists():
#                 msg = 'Deficiency already Forwarded, cannot be forwarded again'
#             else:
#                 m2.einsp_forward_marked.objects.create(forwardTo_id=forwardToId,forwardBy_id=desgc,designationTo=designation,designationBy=desgn,marked_no_id=eitemid,remarks=forwardToRemarks,created_date=datetime.today(),created_by=empno,status_flag=1)
#                 msg = 'Deficiency Forwarded successfully'
#         return JsonResponse(msg,safe=False)
#     return JsonResponse({'success':False},status=404) 



# def updateEinspUser(request):
#     if request.method=='GET': 
#         byOthersAction = request.GET.get('byOthersAction')
#         id = request.GET.get('id')
#         msg = 'Not updated, please contact admin'
#         empnox = Level_Desig.objects.filter(Q(official_email_ID=request.user) | Q(official_email_ID=request.user.email))
#         empno = ''
#         desgn_prev = None
#         desgc =None
#         if empnox:
#             empno = empnox[0].empno_id
#             desgn = empnox[0].designation
#             desgc = empnox[0].designation_code


#         if byOthersAction == 'pending':
#             date=request.GET.get('modalDate').split('-')
#             date= date[2]+'-'+date[1]+'-'+date[0]
#             m2.einsp_marked.objects.filter(id=id).update(target_date=date,target_date_given_on=datetime.today())
#             msg = 'Target Date is updated successfully'

#         elif byOthersAction == 'close':
#             modalremarks=request.GET.get('compliance')
#             targetDate=request.GET.get('targetDate')
#             print(modalremarks,targetDate,id,byOthersAction)
#             curdate = datetime.today()
#             reject=None
#             id = request.GET.get('marked_no')
#             # print(m2.einsp_marked.objects.filter(id=id).values())
#             if (m2.einsp_marked.objects.filter(id=id).values())[0]['reject'] == 1:
#                 reject = 2
#             if targetDate:
#                 t_date = datetime.strptime(targetDate, '%d/%m/%y').strftime('%Y-%m-%d')
#                 if modalremarks:
#                     m2.einsp_marked.objects.filter(id=id).update(compliance=modalremarks,compliance_recieved_on=curdate,status_flag=2,target_date=t_date,target_date_given_on=curdate, reject=reject)
#                 else:
#                     modalremarks='It will be done by '+targetDate
#                     m2.einsp_marked.objects.filter(id=id).update(compliance=modalremarks,compliance_recieved_on=curdate,status_flag=2,target_date=t_date,target_date_given_on=curdate, reject=reject)

#                 all_values= m2.einsp_marked.objects.filter(id=id).values('eitemid__einspno__designation','created_on','eitemid__qid__activity','eitemid__value','eitemid__remarks')
#                 task_det="Question: "+ all_values[0]['eitemid__qid__activity']+"\n Value: "+all_values[0]['eitemid__value']+"\n Remarks: "+all_values[0]['eitemid__remarks']
#                 if m1.target_compliance.objects.filter(marked_einsp_id=id).exists():
#                     m1.target_compliance.objects.filter(marked_einsp_id=id).update(status_flag=1,target_date=t_date,pending_with_id=desgc,assigned_by_id=all_values[0]['eitemid__einspno__designation'],init_date=all_values[0]['created_on'],task_flag=3,task_descp=task_det)
#                 else:
#                     m1.target_compliance.objects.create(marked_einsp_id=id,status_flag=1,target_date=t_date,pending_with_id=desgc,assigned_by_id=all_values[0]['eitemid__einspno__designation'],init_date=all_values[0]['created_on'],task_flag=3,task_descp=task_det)
        
#             else:
#                 m2.einsp_marked.objects.filter(id=id).update(compliance=modalremarks,compliance_recieved_on=curdate,status_flag=0, reject=reject)
#             msg = 'Compliance Saved as Draft'

#         elif byOthersAction == 'submit':
#             ins_id = request.GET.get('ins_id')
#             curdate = datetime.today()
#             if m2.einsp_marked.objects.exclude(compliance=None).filter(eitemid__einspno=ins_id,marked_to_id=desgc).exists():
#                 m2.einsp_marked.objects.exclude(Q(compliance=None)).filter(eitemid__einspno=ins_id,marked_to_id=desgc).update(compliance_recieved_on=curdate,status_flag=4)
#                 total_marked = m2.einsp_marked.objects.filter(eitemid__einspno=ins_id).count()
#                 complied = m2.einsp_marked.objects.filter(eitemid__einspno=ins_id, status_flag=4).count()
#                 if total_marked == complied:
#                     m2.einspection_details.objects.filter(einspno=ins_id).update(status=4)
#                 msg = 'Deficiency Closed'
#             else:
#                 msg = 'Kindly Reply and Save First'


#         elif byOthersAction == 'revert':
#             revertremarks=request.GET.get('revertremarks')
#             curdate = datetime.today()
#             m2.einsp_marked.objects.filter(id=id).update(compliance=revertremarks,compliance_recieved_on=curdate,status_flag=4, revert = 1,reverted_on=curdate)
#             msg = 'Deficiency Reverted successfully'


#         elif byOthersAction == 'forward':
#             id=json.loads(request.GET.get('id'))
#             forwardToId=json.loads(request.GET.get('forwardToId'))
#             furtherFwd=request.GET.get('furtherFwd').strip()
#             # print(id, type(id), len(id))
#             marks=[]
#             if ',' in id:
#                 id=(id.strip('[')).strip(']')
#                 id = id.split(',')
#                 for m in id:
#                     m=((m.strip('"')).strip(" ")).strip("'")
#                     marks.append(m)
#             else:
#                 marks.append(id)
           
#             forwardToRemarks=''
            
#             for m in marks:
#                 itemid = m2.einsp_marked.objects.filter(id=m)
#                 for f in forwardToId:
#                     designation1 = Level_Desig.objects.filter(designation=f)
#                     eitemid = None
#                     designation = None
#                     if itemid:
#                         eitemid = itemid[0].id
#                     if designation1:
#                         designation = designation1[0].designation
#                         desig_code=designation1[0].designation_code

#                     if furtherFwd is '0' or furtherFwd == '0' or furtherFwd is None:
#                         furtherFwd=None
#                         if m2.einsp_forward_marked.objects.filter(marked_no=eitemid,forwardTo_id=desig_code, further_forward =furtherFwd).exists():
#                             msg = 'Deficiency already Forwarded, cannot be forwarded again'
#                         else:
#                             m2.einsp_marked.objects.filter(id=m).update(status_flag=3)
#                             m2.einsp_forward_marked.objects.create(forwardTo_id=desig_code,forwardBy_id=desgc,designationTo=designation,designationBy=desgn,marked_no_id=eitemid,remarks=forwardToRemarks,created_date=datetime.today(),created_by=empno,status_flag=1)
#                             msg = 'Deficiency Forwarded successfully'
#                     else:
#                         if m2.einsp_forward_marked.objects.filter(marked_no=eitemid,forwardTo_id=desig_code,forwardBy_id=desgc,further_forward =furtherFwd).exists():
#                             msg = 'Deficiency already Forwarded, cannot be forwarded again'
#                         else:
#                             print(eitemid,desgc)
#                             forwardId=m2.einsp_forward_marked.objects.filter(marked_no=eitemid,forwardTo_id=desgc,further_forward =None).values('forwardId')[0]['forwardId']
#                             m2.einsp_forward_marked.objects.create(forwardTo_id=desig_code,forwardBy_id=desgc,designationTo=designation,designationBy=desgn,marked_no_id=eitemid,remarks=forwardToRemarks,created_date=datetime.today(),created_by=empno,status_flag=1, further_forward=1,parent_forward_id=forwardId)
#                             msg = 'Deficiency Forwarded successfully'
        
#         elif byOthersAction == 'reject_forward':
#             forward_id=request.GET.get('forward_id')
#             forwardToRemarks=request.GET.get('forwardToRemarks')
#             m2.einsp_forward_marked.objects.filter(forwardId=forward_id).update(remarks=forwardToRemarks,rejected_on=datetime.today(),status_flag=3)
#             msg = 'Compliance rejected successfully'
        
#         return JsonResponse(msg,safe=False)
#     return JsonResponse({'success':False},status=404) 

# def updateEinspUser(request):
#     if request.method=='GET': 
#         byOthersAction = request.GET.get('byOthersAction')
#         id = request.GET.get('id')
#         msg = 'Not updated, please contact admin'
#         empnox = Level_Desig.objects.filter(Q(official_email_ID=request.user) | Q(official_email_ID=request.user.email))
#         empno = ''
#         desgn_prev = None
#         desgc =None
#         if empnox:
#             empno = empnox[0].empno_id
#             desgn = empnox[0].designation
#             desgc = empnox[0].designation_code


#         if byOthersAction == 'pending':
#             date=request.GET.get('modalDate').split('-')
#             date= date[2]+'-'+date[1]+'-'+date[0]
#             m2.einsp_marked.objects.filter(id=id).update(target_date=date,target_date_given_on=datetime.today())
#             msg = 'Target Date is updated successfully'

#         elif byOthersAction == 'close':
#             modalremarks=request.GET.get('compliance')
#             targetDate=request.GET.get('targetDate')
#             print(modalremarks,targetDate,id,byOthersAction)
#             curdate = datetime.today()
#             reject=None
#             id = request.GET.get('marked_no')
#             # print(m2.einsp_marked.objects.filter(id=id).values())
#             if (m2.einsp_marked.objects.filter(id=id).values())[0]['reject'] == 1:
#                 reject = 2
#             if targetDate:
#                 t_date = datetime.strptime(targetDate, '%d/%m/%y').strftime('%Y-%m-%d')
#                 if modalremarks:
#                     m2.einsp_marked.objects.filter(id=id).update(compliance=modalremarks,compliance_recieved_on=curdate,status_flag=2,target_date=t_date,target_date_given_on=curdate, reject=reject)
#                 else:
#                     modalremarks='It will be done by '+targetDate
#                     m2.einsp_marked.objects.filter(id=id).update(compliance=modalremarks,compliance_recieved_on=curdate,status_flag=2,target_date=t_date,target_date_given_on=curdate, reject=reject)

#                 all_values= m2.einsp_marked.objects.filter(id=id).values('eitemid__einspno__designation','created_on','eitemid__qid__activity','eitemid__value','eitemid__remarks')
#                 task_det="Question: "+ all_values[0]['eitemid__qid__activity']+"\n Value: "+all_values[0]['eitemid__value']+"\n Remarks: "+all_values[0]['eitemid__remarks']
#                 if m1.target_compliance.objects.filter(marked_einsp_id=id).exists():
#                     m1.target_compliance.objects.filter(marked_einsp_id=id).update(status_flag=1,target_date=t_date,pending_with_id=desgc,assigned_by_id=all_values[0]['eitemid__einspno__designation'],init_date=all_values[0]['created_on'],task_flag=3,task_descp=task_det)
#                 else:
#                     m1.target_compliance.objects.create(marked_einsp_id=id,status_flag=1,target_date=t_date,pending_with_id=desgc,assigned_by_id=all_values[0]['eitemid__einspno__designation'],init_date=all_values[0]['created_on'],task_flag=3,task_descp=task_det)
        
#             else:
#                 m2.einsp_marked.objects.filter(id=id).update(compliance=modalremarks,compliance_recieved_on=curdate,status_flag=0, reject=reject)
#             msg = 'Compliance Saved as Draft'

#         elif byOthersAction == 'submit':
#             ins_id = request.GET.get('ins_id')
#             curdate = datetime.today()
#             if m2.einsp_marked.objects.exclude(compliance=None).filter(eitemid__einspno=ins_id,marked_to_id=desgc).exists():
#                 m2.einsp_marked.objects.exclude(Q(compliance=None)).filter(eitemid__einspno=ins_id,marked_to_id=desgc).update(compliance_recieved_on=curdate,status_flag=4)
#                 total_marked = m2.einsp_marked.objects.filter(eitemid__einspno=ins_id).count()
#                 complied = m2.einsp_marked.objects.filter(eitemid__einspno=ins_id, status_flag=4).count()
#                 if total_marked == complied:
#                     m2.einspection_details.objects.filter(einspno=ins_id).update(status=4)
#                 msg = 'Deficiency Closed'
#             else:
#                 msg = 'Kindly Reply and Save First'


#         elif byOthersAction == 'revert':
#             revertremarks=request.GET.get('revertremarks')
#             curdate = datetime.today()
#             m2.einsp_marked.objects.filter(id=id).update(compliance=revertremarks,compliance_recieved_on=curdate,status_flag=4, revert = 1,reverted_on=curdate)
#             msg = 'Deficiency Reverted successfully'


#         elif byOthersAction == 'forward':
#             id=json.loads(request.GET.get('id'))
#             forwardToId=json.loads(request.GET.get('forwardToId'))
#             furtherFwd=request.GET.get('furtherFwd').strip()
#             # print(id, type(id), len(id))
#             marks=[]
#             if ',' in id:
#                 id=(id.strip('[')).strip(']')
#                 id = id.split(',')
#                 for m in id:
#                     m=((m.strip('"')).strip(" ")).strip("'")
#                     marks.append(m)
#             else:
#                 marks.append(id)
           
#             forwardToRemarks=''
            
#             for m in marks:
#                 itemid = m2.einsp_marked.objects.filter(id=m)
#                 for f in forwardToId:
#                     designation1 = Level_Desig.objects.filter(designation=f)
#                     eitemid = None
#                     designation = None
#                     if itemid:
#                         eitemid = itemid[0].id
#                     if designation1:
#                         designation = designation1[0].designation
#                         desig_code=designation1[0].designation_code

#                     if furtherFwd == '0' or furtherFwd is None:
#                         furtherFwd=None
#                         if m2.einsp_forward_marked.objects.filter(marked_no=eitemid,forwardTo_id=desig_code, further_forward =furtherFwd).exists():
#                             msg = 'Deficiency already Forwarded, cannot be forwarded again'
#                         else:
#                             m2.einsp_marked.objects.filter(id=m).update(status_flag=3)
#                             m2.einsp_forward_marked.objects.create(forwardTo_id=desig_code,forwardBy_id=desgc,designationTo=designation,designationBy=desgn,marked_no_id=eitemid,remarks=forwardToRemarks,created_date=datetime.today(),created_by=empno,status_flag=1)
#                             msg = 'Deficiency Forwarded successfully'
#                     else:
#                         if m2.einsp_forward_marked.objects.filter(marked_no=eitemid,forwardTo_id=desig_code,forwardBy_id=desgc,further_forward =furtherFwd).exists():
#                             msg = 'Deficiency already Forwarded, cannot be forwarded again'
                        
#                         else:
#                             lst = []
#                             lst = phase2check_prev_forwarded(eitemid,desgc,lst)
#                             if desig_code in lst:
#                                 msg = f'Deficiency cannot be Forwarded, since it is forwarded to you by {designation}'
#                             else:
#                                 try:
#                                     forwardId=m2.einsp_forward_marked.objects.filter(marked_no=eitemid,forwardTo_id=desgc,further_forward =None).values('forwardId')[0]['forwardId']
#                                 except:
#                                     forwardId = None
#                                 m2.einsp_forward_marked.objects.create(forwardTo_id=desig_code,forwardBy_id=desgc,designationTo=designation,designationBy=desgn,marked_no_id=eitemid,remarks=forwardToRemarks,created_date=datetime.today(),created_by=empno,status_flag=1, further_forward=1,parent_forward_id=forwardId)
#                                 msg = 'Deficiency Forwarded successfully'
        
#         elif byOthersAction == 'reject_forward':
#             forward_id=request.GET.get('forward_id')
#             forwardToRemarks=request.GET.get('forwardToRemarks')
#             m2.einsp_forward_marked.objects.filter(forwardId=forward_id).update(remarks=forwardToRemarks,rejected_on=datetime.today(),status_flag=3)
#             msg = 'Compliance rejected successfully'
        
#         return JsonResponse(msg,safe=False)
#     return JsonResponse({'success':False},status=404) 



def updateEinspUser(request):
    if request.method=='GET': 
        byOthersAction = request.GET.get('byOthersAction')
        id = request.GET.get('id')
        msg = 'Not updated, please contact admin'
        empnox = Level_Desig.objects.filter(Q(official_email_ID=request.user) | Q(official_email_ID=request.user.email))
        empno = ''
        desgn_prev = None
        desgc =None
        if empnox:
            empno = empnox[0].empno_id
            desgn = empnox[0].designation
            desgc = empnox[0].designation_code


        if byOthersAction == 'pending':
            date=request.GET.get('modalDate').split('-')
            date= date[2]+'-'+date[1]+'-'+date[0]
            m2.einsp_marked.objects.filter(id=id).update(target_date=date,target_date_given_on=datetime.today())
            msg = 'Target Date is updated successfully'

        elif byOthersAction == 'close':
            modalremarks=request.GET.get('compliance')
            targetDate=request.GET.get('targetDate')
            curdate = datetime.today()
            reject=None
            #id = request.GET.get('marked_no')
            # print(m2.einsp_marked.objects.filter(id=id).values())
            if (m2.einsp_marked.objects.filter(id=int(id)).values())[0]['reject'] == 1:
                reject = 2
            if targetDate:
                t_date = datetime.strptime(targetDate, '%d/%m/%y').strftime('%Y-%m-%d')
                if modalremarks:
                    m2.einsp_marked.objects.filter(id=id).update(compliance=modalremarks,compliance_recieved_on=curdate,status_flag=2,target_date=t_date,target_date_given_on=curdate, reject=reject)
                else:
                    modalremarks='It will be done by '+targetDate
                    m2.einsp_marked.objects.filter(id=id).update(compliance=modalremarks,compliance_recieved_on=curdate,status_flag=2,target_date=t_date,target_date_given_on=curdate, reject=reject)

                all_values= m2.einsp_marked.objects.filter(id=id).values('eitemid__einspno__designation','created_on','eitemid__qid__activity','eitemid__value','eitemid__remarks')
                task_det="Question: "+ all_values[0]['eitemid__qid__activity']+"\n Value: "+all_values[0]['eitemid__value']+"\n Remarks: "+all_values[0]['eitemid__remarks']
                if m1.target_compliance.objects.filter(marked_einsp_id=id).exists():
                    m1.target_compliance.objects.filter(marked_einsp_id=id).update(status_flag=1,target_date=t_date,pending_with_id=desgc,assigned_by_id=all_values[0]['eitemid__einspno__designation'],init_date=all_values[0]['created_on'],task_flag=3,task_descp=task_det)
                else:
                    m1.target_compliance.objects.create(marked_einsp_id=id,status_flag=1,target_date=t_date,pending_with_id=desgc,assigned_by_id=all_values[0]['eitemid__einspno__designation'],init_date=all_values[0]['created_on'],task_flag=3,task_descp=task_det)
        
            else:
                m2.einsp_marked.objects.filter(id=id).update(compliance=modalremarks,compliance_recieved_on=curdate,status_flag=0, reject=reject)
            msg = 'Compliance Saved as Draft'

        elif byOthersAction == 'submit':
            ins_id = request.GET.get('ins_id')
            curdate = datetime.today()
            if m2.einsp_marked.objects.exclude(compliance=None).filter(eitemid__einspno=ins_id,marked_to_id=desgc).exists():
                m2.einsp_marked.objects.exclude(Q(compliance=None)).filter(eitemid__einspno=ins_id,marked_to_id=desgc).update(compliance_recieved_on=curdate,status_flag=4)
                total_marked = m2.einsp_marked.objects.filter(eitemid__einspno=ins_id).count()
                complied = m2.einsp_marked.objects.filter(eitemid__einspno=ins_id, status_flag=4).count()
                if total_marked == complied:
                    m2.einspection_details.objects.filter(einspno=ins_id).update(status=4)
                msg = 'Deficiency Closed'
            else:
                msg = 'Kindly Reply and Save First'


        elif byOthersAction == 'revert':
            revertremarks=request.GET.get('revertremarks')
            curdate = datetime.today()
            m2.einsp_marked.objects.filter(id=id).update(compliance=revertremarks,compliance_recieved_on=curdate,status_flag=4, revert = 1,reverted_on=curdate)
            msg = 'Deficiency Reverted successfully'


        elif byOthersAction == 'forward':
            id=json.loads(request.GET.get('id'))
            forwardToId=json.loads(request.GET.get('forwardToId'))
            furtherFwd=request.GET.get('furtherFwd').strip()
            # print(id, type(id), len(id))
            marks=[]
            if ',' in id:
                id=(id.strip('[')).strip(']')
                id = id.split(',')
                for m in id:
                    m=((m.strip('"')).strip(" ")).strip("'")
                    marks.append(m)
            else:
                marks.append(id)
           
            forwardToRemarks=''
            
            for m in marks:
                itemid = m2.einsp_marked.objects.filter(id=m)
                for f in forwardToId:
                    designation1 = Level_Desig.objects.filter(designation=f)
                    eitemid = None
                    designation = None
                    if itemid:
                        eitemid = itemid[0].id
                    if designation1:
                        designation = designation1[0].designation
                        desig_code=designation1[0].designation_code

                    if furtherFwd == '0' or furtherFwd is None:
                        furtherFwd=None
                        if m2.einsp_forward_marked.objects.filter(marked_no=eitemid,forwardTo_id=desig_code, further_forward =furtherFwd).exists():
                            msg = 'Deficiency already Forwarded, cannot be forwarded again'
                        else:
                            m2.einsp_marked.objects.filter(id=m).update(status_flag=3)
                            m2.einsp_forward_marked.objects.create(forwardTo_id=desig_code,forwardBy_id=desgc,designationTo=designation,designationBy=desgn,marked_no_id=eitemid,remarks=forwardToRemarks,created_date=datetime.today(),created_by=empno,status_flag=1)
                            msg = 'Deficiency Forwarded successfully'
                    else:
                        if m2.einsp_forward_marked.objects.filter(marked_no=eitemid,forwardTo_id=desig_code,forwardBy_id=desgc,further_forward =furtherFwd).exists():
                            msg = 'Deficiency already Forwarded, cannot be forwarded again'
                        
                        else:
                            lst = []
                            lst = phase2check_prev_forwarded(eitemid,desgc,lst)
                            if desig_code in lst:
                                msg = f'Deficiency cannot be Forwarded, since it is forwarded to you by {designation}'
                            else:
                                try:
                                    forwardId=m2.einsp_forward_marked.objects.filter(marked_no=eitemid,forwardTo_id=desgc,further_forward =None).values('forwardId')[0]['forwardId']
                                except:
                                    forwardId = None
                                m2.einsp_forward_marked.objects.create(forwardTo_id=desig_code,forwardBy_id=desgc,designationTo=designation,designationBy=desgn,marked_no_id=eitemid,remarks=forwardToRemarks,created_date=datetime.today(),created_by=empno,status_flag=1, further_forward=1,parent_forward_id=forwardId)
                                msg = 'Deficiency Forwarded successfully'
        
        elif byOthersAction == 'reject_forward':
            forward_id=request.GET.get('forward_id')
            forwardToRemarks=request.GET.get('forwardToRemarks')
            m2.einsp_forward_marked.objects.filter(forwardId=forward_id).update(remarks=forwardToRemarks,rejected_on=datetime.today(),status_flag=3)
            msg = 'Compliance rejected successfully'
        
        return JsonResponse(msg,safe=False)
    return JsonResponse({'success':False},status=404) 



def phase2check_prev_forwarded(eitemid,forwardBy_id,lst):
   
    data = list(m2.einsp_forward_marked.objects.filter(marked_no=eitemid,forwardTo=forwardBy_id).values('forwardBy'))
   
    for i in range(len(data)):
        if data[i]['forwardBy'] not in lst:
            lst.append(data[i]['forwardBy'])
            phase2check_prev_forwarded(eitemid,data[i]['forwardBy'],lst)
    return lst



def updateForwarded(request):
    if request.method=="GET" and request.is_ajax():
        forwardToId=request.GET.get('forwardToId')
        forwardToRemarks=request.GET.get('forwardToRemarks')
        id=request.GET.get('id')
        data = list(m2.einsp_marked.objects.filter(id=id).values())
        m2.einsp_marked.objects.filter(id=id).update(revert=2)
        maxId =m2.einsp_marked.objects.aggregate(Max('id'))
        maxId = maxId['id__max'] + 1
        designation1 = Level_Desig.objects.filter(designation_code=forwardToId)
        designation = None
        emp_id = None
        if designation1:
            designation = designation1[0].designation
            emp_id = designation1[0].empno_id
        data[0].update({'id':maxId,'designation':designation,'marked_to_id':forwardToId,'marked_emp_id':emp_id,'status_flag':1,'compliance':None,'compliance_recieved_on':None,'revert':None,'reverted_on':None,'lastmodified_on':datetime.today(),'created_on':datetime.today(),'target_date':None,'target_date_given_on':None})
        m2.einsp_marked.objects.create(**data[0])
        return JsonResponse({'success':True},safe=False)
    return JsonResponse({'success':False},status=400) 

def actionEinspForByMe(request):
    if request.method=="GET":
        id = request.GET.get('id')
        flag = 0
        date11 =''  
        l2 = list(m2.einsp_forward_marked.objects.filter(marked_no=id).values('designationTo','designationBy','remarks','status_flag','reply_on','compliance','created_date').order_by('created_date'))
        l1 = list(m2.einsp_marked.objects.filter(id=id).values('designation_by','designation','department','compliance','created_on','target_date','revert','status_flag','eitemid_id__remarks','compliance_recieved_on','target_date_given_on','reverted_on').order_by('created_on'))
        details = []
        showhide = 0
        revert = 0
        # for i in range(len(l1)):
        #     if l1[i]['created_on']:
        #         date = l1[i]['created_on'].strftime('%d/%m/%y')
        #     else:
        #         date = 'NA'
        #     if l1[i]['compliance_recieved_on']:
        #         cdate = l1[i]['compliance_recieved_on'].strftime('%d/%m/%y')
        #     else:
        #         cdate = 'NA'
        #     if l1[i]['target_date'] != None:
        #         st="Pending"
        #         comp = "Will be Done By :-" +str(l1[i]['target_date'].strftime('%d/%m/%y'))
        #         details.append({'sdt':l1[i]['created_on'],'from':l1[i]['designation_by'],'to':l1[i]['designation'],'date':date,'status':st+' : '+str(comp),'remarks':l1[i]['eitemid_id__remarks'],'cdate':l1[i]['target_date_given_on'].strftime('%d/%m/%y')})
            
        #     if l1[i]['status_flag']==1 and l1[i]['target_date'] == None and l1[i]['revert'] == None:
        #         st="Pending"
        #         comp = ""
        #     elif l1[i]['status_flag']==1 and l1[i]['target_date'] != None:
        #         st="Pending"
        #         comp = "Will be Done By :-" +str(l1[i]['target_date'].strftime('%d/%m/%y'))
        #         date11 = str(l1[i]['target_date'].strftime('%d-%m-%Y'))
        #         flag = 1
        #     elif l1[i]['status_flag']==4  and l1[i]['revert'] != None:
        #         st="Closed"
        #         comp = "Reverted Remarks :- " +str(l1[i]['compliance'])
        #         showhide = 1
        #         revert = 1
        #     else:
        #         st="Closed"
        #         comp = str(l1[i]['compliance'])  
        #         showhide = 1
                
            
            
        #     details.append({'sdt':l1[i]['created_on'],'from':l1[i]['designation_by'],'to':l1[i]['designation'],'date':date,'status':st+' : '+str(comp),'remarks':l1[i]['eitemid_id__remarks'],'cdate':cdate})
        
        for i in range(len(l2)):
            if l2[i]['status_flag']==1:
                st="Forwarded"
                comp = ""
            elif l2[i]['status_flag']==2:
                st="Replied"
                comp = l2[i]['compliance']
            elif l2[i]['status_flag']==3:
                st="Rejected"
                comp = l2[i]['compliance']

            if l2[i]['created_date']:
                date = l2[i]['created_date'].strftime('%d/%m/%y')
            else:
                date = 'NA'
            if l2[i]['reply_on']:
                cdate = l2[i]['reply_on'].strftime('%d/%m/%y')
            else:
                cdate = 'NA'
            details.append({'sdt':l2[i]['created_date'],'from':l2[i]['designationBy'],'to':l2[i]['designationTo'],'date':date,'status':st+' : '+str(comp),'remarks':l2[i]['remarks'],'cdate':cdate})
        
        dept = list(Level_Desig.objects.filter(department_code = l1[0]['department'] ).values('designation_code','designation').order_by('designation'))
        return JsonResponse({'revert':revert,'flag':flag,'date':date11,'details':details,'dept':dept,'showhide':showhide},safe=False) 
    return JsonResponse({'success':False},status=404)

def actionEinspForToMe(request):
    if request.method=="GET":
        id = request.GET.get('id')
        flag = 0
        date11 ='' 

        empnox = Level_Desig.objects.filter(Q(official_email_ID=request.user) | Q(official_email_ID=request.user.email))
        desgn =None
        if empnox:
            desgn = empnox[0].designation
        # l1 = list(m2.einsp_marked.objects.filter(id=id).values('designation_by','designation','department','compliance','created_on','target_date','revert','status_flag','eitemid_id__remarks','compliance_recieved_on','target_date_given_on','reverted_on').order_by('created_on'))
        l2 = list(m2.einsp_forward_marked.objects.filter(marked_no=id,designationTo=desgn).values('designationTo','designationBy','remarks','status_flag','reply_on','compliance','created_date','forwardId').order_by('created_date'))

        details = []
        showhide = 0
        revert = 0
        forwardId = 0
        for i in range(len(l2)):
            forwardId = l2[i]['forwardId']
            if l2[i]['status_flag']==1:
                st="Forwarded"
                comp = ""
                revert = 1
            elif l2[i]['status_flag']==2:
                st="Replied"
                comp = l2[i]['compliance']
            elif l2[i]['status_flag']==3:
                st="Rejected"
                comp = l2[i]['compliance']

            if l2[i]['created_date']:
                date = l2[i]['created_date'].strftime('%d/%m/%y')
            else:
                date = 'NA'
            if l2[i]['reply_on']:
                cdate = l2[i]['reply_on'].strftime('%d/%m/%y')
            else:
                cdate = 'NA'
            details.append({'sdt':l2[i]['created_date'],'from':l2[i]['designationBy'],'to':l2[i]['designationTo'],'date':date,'status':st+' : '+str(comp),'remarks':l2[i]['remarks'],'cdate':cdate})
       
        return JsonResponse({'forwardId':forwardId,'revert':revert,'flag':flag,'date':date11,'details':details},safe=False) 
    return JsonResponse({'success':False},status=404)

def updateForwardToMeData(request):
    if request.method=="GET" and request.is_ajax():
        empnox = Level_Desig.objects.filter(Q(official_email_ID=request.user) | Q(official_email_ID=request.user.email))
        empno = ''
        desgn_prev = None
        desgc =None
        if empnox:
            empno = empnox[0].empno_id
            desgn = empnox[0].designation
            desgc = empnox[0].designation_code
        compliance=request.GET.get('compliance')
        id=request.GET.get('id')  
        byOthersAction=request.GET.get('byOthersAction')
        print(compliance,id,byOthersAction)
        if byOthersAction == 'draft':
            m2.einsp_forward_marked.objects.filter(forwardId=id).update(status_flag=0,reply_on=datetime.today(),compliance=compliance)
            msg = 'Compliance saved as draft successfully'

        elif byOthersAction == 'submit':
            ins_id = request.GET.get('ins_id')
            curdate = datetime.today()
            if m2.einsp_forward_marked.objects.exclude(compliance=None).filter(marked_no__eitemid__einspno=ins_id,forwardTo_id=desgc,status_flag=0).exists():
                m2.einsp_forward_marked.objects.exclude(compliance=None).filter(marked_no__eitemid__einspno=ins_id,forwardTo_id=desgc,status_flag=0).update(reply_on=curdate,status_flag=2)
                msg = 'Deficiency Closed'
            else:
                msg = 'Kindly Reply and Save First'
        else:
            m2.einsp_forward_marked.objects.filter(forwardId=id).update(status_flag=3,reply_on=datetime.today(),compliance=compliance)
        
        return JsonResponse(msg,safe=False)
    return JsonResponse({'success':False},status=400) 

def actionEinspByMe(request):
    if request.method=="GET":
        id = request.GET.get('id')
        flag = 0
        date11 =''  
        l2 = list(m2.einsp_forward_marked.objects.filter(marked_no=id).values('designationTo','designationBy','remarks','status_flag','reply_on','compliance','created_date').order_by('created_date'))
        l1 = list(m2.einsp_marked.objects.filter(id=id).values('designation_by','designation','department','compliance','created_on','target_date','revert','status_flag','eitemid_id__remarks','compliance_recieved_on','target_date_given_on','reverted_on').order_by('created_on'))
        details = []
        showhide = 0
        revert = 0
        for i in range(len(l1)):
            if l1[i]['created_on']:
                date = l1[i]['created_on'].strftime('%d/%m/%y')
            else:
                date = 'NA'
            if l1[i]['compliance_recieved_on']:
                cdate = l1[i]['compliance_recieved_on'].strftime('%d/%m/%y')
            else:
                cdate = 'NA'
            if l1[i]['target_date'] != None:
                st="Pending"
                comp = "Will be Done By :-" +str(l1[i]['target_date'].strftime('%d/%m/%y'))
                details.append({'sdt':l1[i]['created_on'],'from':l1[i]['designation_by'],'to':l1[i]['designation'],'date':date,'status':st+' : '+str(comp),'remarks':l1[i]['eitemid_id__remarks'],'cdate':l1[i]['target_date_given_on'].strftime('%d/%m/%y')})
            
            if l1[i]['status_flag']==1 and l1[i]['target_date'] == None and l1[i]['revert'] == None:
                st="Pending"
                comp = ""
            elif l1[i]['status_flag']==1 and l1[i]['target_date'] != None:
                st="Pending"
                comp = "Will be Done By :-" +str(l1[i]['target_date'].strftime('%d/%m/%y'))
                date11 = str(l1[i]['target_date'].strftime('%d-%m-%Y'))
                flag = 1
            elif l1[i]['status_flag']==4  and l1[i]['revert'] != None:
                st="Closed"
                comp = "Reverted Remarks :- " +str(l1[i]['compliance'])
                showhide = 1
                revert = 1
            else:
                st="Closed"
                comp = str(l1[i]['compliance'])  
                showhide = 1
                
            
            
            details.append({'sdt':l1[i]['created_on'],'from':l1[i]['designation_by'],'to':l1[i]['designation'],'date':date,'status':st+' : '+str(comp),'remarks':l1[i]['eitemid_id__remarks'],'cdate':cdate})
        
        for i in range(len(l2)):
            if l2[i]['status_flag']==1:
                st="Forwarded"
                comp = ""
            elif l2[i]['status_flag']==2:
                st="Replied"
                comp = l2[i]['compliance']
            elif l2[i]['status_flag']==3:
                st="Rejected"
                comp = l2[i]['compliance']

            if l2[i]['created_date']:
                date = l2[i]['created_date'].strftime('%d/%m/%y')
            else:
                date = 'NA'
            if l2[i]['reply_on']:
                cdate = l2[i]['reply_on'].strftime('%d/%m/%y')
            else:
                cdate = 'NA'
            details.append({'sdt':l2[i]['created_date'],'from':l2[i]['designationBy'],'to':l2[i]['designationTo'],'date':date,'status':st+' : '+str(comp),'remarks':l2[i]['remarks'],'cdate':cdate})
        print(revert)
        dept = list(Level_Desig.objects.filter(department_code = l1[0]['department'] ).values('designation_code','designation').order_by('designation'))
        return JsonResponse({'revert':revert,'flag':flag,'date':date11,'details':details,'dept':dept,'showhide':showhide},safe=False) 
    return JsonResponse({'success':False},status=404)


def actionEinsp(request):
    if request.method=="GET":
        id = request.GET.get('id')
        flag = 0
        date11 =''  
        l2 = list(m2.einsp_forward_marked.objects.filter(marked_no=id).values('designationTo','designationBy','remarks','status_flag','reply_on','compliance','created_date').order_by('created_date'))
        l1 = list(m2.einsp_marked.objects.filter(id=id).values('designation_by','designation','department','compliance','created_on','target_date','revert','status_flag','eitemid_id__remarks','compliance_recieved_on','target_date_given_on','reverted_on').order_by('created_on'))
        details = []
        showhide = 0
        for i in range(len(l1)):
            if l1[i]['created_on']:
                date = l1[i]['created_on'].strftime('%d/%m/%y')
            else:
                date = 'NA'
            if l1[i]['compliance_recieved_on']:
                cdate = l1[i]['compliance_recieved_on'].strftime('%d/%m/%y')
            else:
                cdate = 'NA'
            if l1[i]['target_date'] != None:
                st="Pending"
                comp = "Will be Done By :-" +str(l1[i]['target_date'].strftime('%d/%m/%y'))
                details.append({'sdt':l1[i]['created_on'],'from':l1[i]['designation_by'],'to':l1[i]['designation'],'date':date,'status':st+' : '+str(comp),'remarks':l1[i]['eitemid_id__remarks'],'cdate':l1[i]['target_date_given_on'].strftime('%d/%m/%y')})
            
            if l1[i]['status_flag']==1 and l1[i]['target_date'] == None and l1[i]['revert'] == None:
                st="Pending"
                comp = ""
            elif l1[i]['status_flag']==1 and l1[i]['target_date'] != None:
                st="Pending"
                comp = "Will be Done By :-" +str(l1[i]['target_date'].strftime('%d/%m/%y'))
                date11 = str(l1[i]['target_date'].strftime('%d-%m-%Y'))
                flag = 1
            elif l1[i]['status_flag']==4  and l1[i]['revert'] != None:
                st="Closed"
                comp = "Reverted Remarks :- " +str(l1[i]['compliance'])
                showhide = 1
            else:
                st="Closed"
                comp = str(l1[i]['compliance'])  
                showhide = 1
                
            
            
            details.append({'sdt':l1[i]['created_on'],'from':l1[i]['designation_by'],'to':l1[i]['designation'],'date':date,'status':st+' : '+str(comp),'remarks':l1[i]['eitemid_id__remarks'],'cdate':cdate})
        
        for i in range(len(l2)):
            if l2[i]['status_flag']==1:
                st="Forwarded"
                comp = ""
            elif l2[i]['status_flag']==2:
                st="Replied"
                comp = l2[i]['compliance']
            elif l2[i]['status_flag']==3:
                st="Rejected"
                comp = l2[i]['compliance']

            if l2[i]['created_date']:
                date = l2[i]['created_date'].strftime('%d/%m/%y')
            else:
                date = 'NA'
            if l2[i]['reply_on']:
                cdate = l2[i]['reply_on'].strftime('%d/%m/%y')
            else:
                cdate = 'NA'
            details.append({'sdt':l2[i]['created_date'],'from':l2[i]['designationBy'],'to':l2[i]['designationTo'],'date':date,'status':st+' : '+str(comp),'remarks':l2[i]['remarks'],'cdate':cdate})
      
        dept = list(Level_Desig.objects.filter(department_code = l1[0]['department'] ).values('designation_code','designation').order_by('designation'))
        return JsonResponse({'flag':flag,'date':date11,'details':details,'dept':dept,'showhide':showhide},safe=False) 
    return JsonResponse({'success':False},status=404)

def actionSiri(request):
    if request.method=="GET":
        id = request.GET.get('id')
    flag = 0
    comp = list(m2.report_it.objects.filter(id=id).values('remarks'))[0]['remarks']
    if comp:
        flag = 1
        rem1 = comp.split(' - ')[0]
        date11 = comp.split(' - ')[1]
    else:
        date11 = ''
    return JsonResponse({'flag':flag,'date':date11},safe=False)    

def updateSiriUser(request):
    # print('hdgyuasjz')
    if request.method=='GET':
        modalremarks=request.GET.get('modalremarks')
        date=request.GET.get('modalDate')
        id = request.GET.get('id')
        # print(type(date),' ',type(modalremarks))
        # print(id,' ',date,' ',modalremarks)
        if date =='' or modalremarks != '':
            # print('remarks ',modalremarks)
            m2.report_it.objects.filter(id=id).update(remarks=modalremarks)
            m2.report_it.objects.filter(id=id).update(status_flag=4)
        if modalremarks =='':
            # print('date' ,date)
            date=datetime.strptime(date,'%d-%m-%Y')
            date = date.strftime('%d/%m/%y')
            ans = "Will be done by - " + str(date)
            m2.report_it.objects.filter(id=id).update(remarks=ans)      
        return JsonResponse({'success':True})
    return JsonResponse({'success':False},status=404) 

def stationReviewpdf(request):
    # myl1=[]
    # myl2=[]
    # myl1=[]
    # myl2=[]
    l11 = list(station_master.objects.filter(~Q(station_cat=None)).values('station_cat').distinct('station_cat'))
    # for i in range(len(l11)):
    #     myl1.append(l11[i]['station_cat'])
    email = request.user
    rlycode = list(Level_Desig.objects.filter(official_email_ID=email).values('rly_unit_id','designation_code'))
    # # print(rlycode)
    rly = list(Level_Desig.objects.filter(official_email_ID=email).values('rly_unit_id'))
    ltype = list(railwayLocationMaster.objects.filter(rly_unit_code=rly[0]['rly_unit_id']).values('location_type','location_code'))
    # print("ltype",ltype,rly)
    if ltype[0]['location_type'] == 'ZR':
        rly1 = list(railwayLocationMaster.objects.filter(parent_location_code=ltype[0]['location_code'],location_type='DIV').values_list('rly_unit_code',flat=True))
        # desgn = list(Level_Desig.objects.filter(rly_unit_id__in=rly1).values_list('designation_code',flat=True))
        desgn = list(Level_Desig.objects.filter(official_email_ID=email).values_list('designation_code',flat=True))
        # print(rly1,desgn)
    else:
        rly1 = list(Level_Desig.objects.filter(official_email_ID=email).values_list('rly_unit_id',flat=True))
        desgn = list(Level_Desig.objects.filter(official_email_ID=email).values_list('designation_code',flat=True))
    # # print("rlys",rly1)
    division=list(railwayLocationMaster.objects.filter(rly_unit_code=rlycode[0]['rly_unit_id']).values('location_code'))
    div=division[0]['location_code']
    details = {}
    fromdate = request.GET.get('fromdate')
    todate = request.GET.get('todate')
    stncat1 = request.GET.get('stncat1')
    # print(stncat1,fromdate,todate)
    if fromdate:
        fromdate = datetime.strptime(fromdate,"%d-%m-%Y")
    if todate:
        todate = datetime.strptime(todate,"%d-%m-%Y")
    # # print("from",fromdate)
    # # print("to",todate)
    # # print("stncat1",stncat1)
    if stncat1=='null':
        stncat1 = None
    if(stncat1):
        l1 = list(station_master.objects.filter(Q(station_cat__in=stncat1) & Q(div_id_id_id__in=rly1)).values('station_cat','stnshortcode').distinct('station_cat'))
    else:
        l1 = list(station_master.objects.filter(~Q(station_cat=None) & Q(div_id_id_id__in=rly1)).values('station_cat','stnshortcode').distinct('station_cat'))
    # print("l1",l1)
    # for i in range(len(l1)):
    #     myl2.append(l1[i]['station_cat'])
    # totalscheduled = []
    # inspcompleted = []
    for i in range(len(l1)):
        if stncat1:
            l2 = list(station_master.objects.filter(Q(station_cat__in=stncat1) & Q(div_id_id_id__in=rly1) & Q(station_cat=l1[i]['station_cat'])).values('stnshortcode'))
        else:
            l2 = list(station_master.objects.filter(~Q(station_cat=None) & Q(div_id_id_id__in=rly1) & Q(station_cat=l1[i]['station_cat'])).values('stnshortcode'))
        # l3 = []
        a=0
        mx = 0
        mn = 1000
        mxins = ""
        mnins = ""
        a1 = 0
        a2 = 0
        bestrating = 0
        beststation = ""
        mximpr = 0
        improvst = ""
        for j in range(len(l2)):
            # if fromdate and todate:
            #     totsch = list(m2.einspection_details.objects.filter(Q(inspected_on__date__range=[fromdate,todate]) & Q(div_id_id_id__in=rly1) & Q(entityid=l2[j]['stnshortcode']) & Q(inspection_type=4)).values('einspno','entityid'))
            #     inspcomp = list(m2.einspection_details.objects.filter(Q(inspected_on__date__range=[fromdate,todate])& Q(div_id_id_id__in=rly1) & Q(entityid=l2[j]['stnshortcode']) & Q(status=4)).values('einspno','entityid'))
            # else:
            #     totsch = list(m2.einspection_details.objects.filter(Q(div_id_id_id__in=rly1) & Q(entityid=l2[j]['stnshortcode']) & Q(inspection_type=4)).values('einspno','entityid'))
            #     inspcomp = list(m2.einspection_details.objects.filter(Q(div_id_id_id__in=rly1) & Q(entityid=l2[j]['stnshortcode']) & Q(status=4)).values('einspno','entityid'))
            # # print("totsch",totsch)
            # # print("inspcomp",inspcomp)
            # a1 += len(totsch)
            # a2 += len(inspcomp)
            if fromdate and todate:
                l3 = list(m2.einspection_details.objects.filter(Q(inspected_on__date__range=[fromdate,todate]) & Q(div_id_id_id__in=rly1) & Q(entityid=l2[j]['stnshortcode'])).values('einspno'))
            else:
                l3 = list(m2.einspection_details.objects.filter(Q(div_id_id_id__in=rly1) & Q(entityid=l2[j]['stnshortcode'])).values('einspno'))
            # # print("l3",l3)
            # # print("length",len(l3))
            # # print("mn",mn)
            r1 = 0
            prev = -1
            impr = 0
            ypoints=[]
            mnper = 10000
            mxper = -10000
            for k in range(len(l3)):
                vid = list(m2.einspection_item_detail.objects.filter(einspno_id=l3[k]['einspno']).values('value_id_id'))
                # scr = m2.einspection_item_detail.objects.filter(einspno_id=l3[k]['einspno'],score=1).count()
                # # print("vid",vid)
                cur = 0
                for k1 in range(len(vid)):
                    sc = list(m2.radio_options.objects.filter(rid=vid[k1]['value_id_id']).values('rscore'))
                    if len(sc):
                        r1 = sc[0]['rscore']+1
                        cur = sc[0]['rscore']+1
                # # print("HeLLOOOO",cur,scr)
                if prev != -1 and prev > 0:
                    impr = ((cur-prev)*100)/prev
                    ypoints.append(impr)
                    if(mnper > cur-prev):
                        mnper = cur-prev
                    if(mxper < cur-prev):
                        mxper = cur-prev
                prev = cur
            # # print("Array",ypoints)
            y = np.array(ypoints)

            # Compute the area using the composite trapezoidal rule.
            area = np.trapz(y, dx=(mxper+mnper)/2)
            # # print("area =", area)
                
            if len(l3) and r1/len(l3) >= bestrating:
                bestrating = r1
                beststation = list(station_master.objects.filter(stnshortcode=l2[j]['stnshortcode']).values('station_name'))[0]['station_name']
            if mximpr < impr:
                mximpr = impr
                improvst = list(station_master.objects.filter(stnshortcode=l2[j]['stnshortcode']).values('station_name'))[0]['station_name']
            
            if len(l3) and len(l3) >= mx:
                mx = len(l3)
                mxins = list(station_master.objects.filter(stnshortcode=l2[j]['stnshortcode']).values('station_name'))[0]['station_name']
                # # print("Paridhi:",mx,mxins)
            if len(l3) and len(l3) <= mn:
                mn = len(l3)
                mnins = list(station_master.objects.filter(stnshortcode=l2[j]['stnshortcode']).values('station_name'))[0]['station_name']
                # # print("Paridhi:",mn,mnins)
            
            if len(l3):
                a = a+len(l3)
        # # print("count",a)
        
        mn1="("+str(mn)+")"
        if mx==0:
            mx1=""
            mn1=""
        else:
            mx1="("+str(mx)+")"
        if mx==a:
            mn1=mx1
            mnins = mxins
        # totalscheduled.append(a1)
        # inspcompleted.append(a2)
        
        details.update({l1[i]['station_cat']:{'best':beststation,'improving':improvst,'cnt':len(l2), 'tot':a, 'mxins':mxins, 'mx':mx1, 'mnins': mnins, 'mn': mn1}})


    # per=[]
    # for i in range(len(totalscheduled)):
    #     if(totalscheduled[i] or inspcompleted[i] != 0):
    #         per.append(inspcompleted[i]/totalscheduled[i])
    #     else:
    #         per.append(0)

    # # print('******2',per)
    # # print("Details",details)
    # y = np.array([20,25,33,50])

    # # Compute the area using the composite trapezoidal rule.
    # area = trapz(y, dx=25)
    # # print("area =", area)

    y = np.array([5,10,5,15])

    # Compute the area using the composite trapezoidal rule.
    area = np.trapz(y, dx=5)
    # # print("area =", area)

    context={
    # 'totalscheduled':totalscheduled,
    # 'inspcompleted':inspcompleted,
    # 'per':per,
    # # 'stncats22': myl1, 
    # 'stncats2': l1,
    # # 'div2':div,
    'details':details,
    'div':div,
    }
    submitbtn=request.GET.get('submitbtn')
    # print(submitbtn)
    if submitbtn=='PDF':
        pdf=utils.render_to_pdf('station_inspection_pdf.html',context)
        return pdf
    elif submitbtn=='excel':                 
        import xlwt 
        from xlwt import Workbook
        response = HttpResponse(content_type='application/ms-excel')
        response['Content-Disposition'] = 'attachment; filename="station_inspection_Report.xls"'
        wb = Workbook() 
        sheet1 = wb.add_sheet('Sheet 1')
        style= xlwt.easyxf("font: bold on;borders: top_color black, bottom_color black, right_color black, left_color black,\
                        left thin, right thin, top thin, bottom thin;")
        style1= xlwt.easyxf("borders: top_color black, bottom_color black, right_color black, left_color black,\
                        left thin, right thin, top thin, bottom thin;")  
        heading1 = div+" Station Inspection Review"
        row=1
        sheet1.write_merge(row,row,6,9,heading1,style=style)
        from datetime import date
        currDate = datetime.now().strftime("%d-%m-%Y")
        row=3
                                
        sheet1.write_merge(row,row,0,4,'Date :'+currDate)
        row=4
        sheet1.write(row,0,'S.No.',style=style)
        sheet1.write_merge(row,row,1,2,'Station Category',style=style)
        sheet1.write_merge(row,row,3,4,'Total Inspections',style=style)                                                 
        sheet1.write_merge(row,row,5,7,'Max. Inspected',style=style)
        sheet1.write_merge(row,row,8,10,'Min. Inspected',style=style)
        sheet1.write_merge(row,row,11,13,'Improving',style=style)
        sheet1.write_merge(row,row,14,16,'Best Station',style=style)
        
                                
        index=1
        row=row+1
        # # print('0000000000000000000000000000',donor)
        for i,j in details.items() :
            # print("+++++++++++++---------------------")  
            sheet1.write(row,0,index,style=style1)
            sheet1.write_merge(row,row,1,2,i+'('+str(j['cnt'])+')',style=style1)
            sheet1.write_merge(row,row,3,4,j['tot'],style=style1)                        
            sheet1.write_merge(row,row,5,7,j['mxins']+j['mx'],style=style1)
            sheet1.write_merge(row,row,8,10,j['mnins']+j['mn'],style=style1)
            sheet1.write_merge(row,row,11,13,j['improving'],style=style1)
            sheet1.write_merge(row,row,14,16,j['best'],style=style1)
                                       
            row+=1
            # print("+++++++++++++")                          
            index+=1
        wb.save(response)
    return response

def DeficiencyReportpdf(request):
    email=str(request.user)
    date1 = request.GET.get('date')
    reportedby = request.GET.get('reportedby')
    actionby = request.GET.get('actionby')
    status = request.GET.get('status')
    prio = request.GET.get('prio')
    # # print("Data",date1,reportedby,actionby,status,prio)
    if date1:
        fromdate = date1.split('-')[0]
        todate = date1.split('-')[1]
    try:
        # date1 = datetime.strptime(date1,'%d-%m-%Y')
        fromdate = datetime.strptime(fromdate,'%d/%m/%y')
        todate = datetime.strptime(todate,'%d/%m/%y')
    except:
        # date1 = None
        fromdate = None
        todate = None
    # # print(fromdate)
    # # print(todate)
    if fromdate!=None or reportedby!="Select" or actionby!="Select" or status!="Select" or prio!="Select":
        # rly = list(Level_Desig.objects.filter(official_email_ID=email).values('rly_unit_id'))
        rly = list(Level_Desig.objects.filter(official_email_ID=email).values('rly_unit_id'))
        ltype = list(railwayLocationMaster.objects.filter(rly_unit_code=rly[0]['rly_unit_id']).values('location_type','location_code'))
        # # print("ltype",ltype)
        if ltype[0]['location_type'] == 'ZR':
            rly1 = list(railwayLocationMaster.objects.filter(parent_location_code=ltype[0]['location_code'],location_type='DIV').values_list('rly_unit_code',flat=True))
        else:
            rly1 = list(Level_Desig.objects.filter(official_email_ID=email).values_list('rly_unit_id',flat=True))
        # # print("rlys",rly1)
        # desgn_no = list(Level_Desig.objects.filter(rly_unit_id__in=rly1).values_list('designation_code'))
        # # print("helloo",rly,desgn_no)
        desgn = list(Level_Desig.objects.filter(rly_unit_id__in=rly1).values_list('designation_code',flat=True))
        if reportedby=="Select":
            reportedby = list(m2.einsp_marked.objects.filter(marked_to_id__in=desgn).values_list('created_by',flat=True))
            # remail = list(m2.report_it.objects.filter(designation_code_id__in=desgn).values_list('empno_report',flat=True))
        else:
            remail = list(Level_Desig.objects.filter(designation=reportedby).values_list('official_email_ID',flat=True))
            reportedby = list(Level_Desig.objects.filter(designation=reportedby).values_list('empno_id',flat=True))
        # # print("Reporrt",reportedby)
        if actionby=="Select":
            actionby = list(m2.einsp_marked.objects.filter(marked_to_id__in=desgn).values_list('marked_emp_id',flat=True))
            # siriactionby = list(m2.siri_marked.objects.filter(marked_to_id__in=desgn).values_list('marked_emp_id',flat=True))
        else:
            siriactionby = list(Level_Desig.objects.filter(designation=actionby).values_list('empno_id',flat=True))
            # # print(siriactionby)
            actionby = list(Level_Desig.objects.filter(designation=actionby).values_list('empno_id',flat=True))
            
        # # print("Actionn",actionby)
        # # print("SiriActionn",siriactionby)
        if status=="Select":
            status = list(m2.einsp_marked.objects.values_list('status_flag',flat=True))
            # status += list(m2.report_it.objects.values_list('status_flag',flat=True))
        else:
            if status=="Pending":
                status = [1]
            else:
                status = [4]
        # # print("Status",status)
        pr=0
        # if prio=="Select":
        #     prio = list(m2.questionare_master.objects.values_list('priority',flat=True))
        # else:
        #     pr=1
        #     prio = {prio}
        # # print("Priority",prio)
        # siri11 = list(m2.siri_marked.objects.filter(marked_emp_id__in=siriactionby).values_list('report_it_id_id',flat=True))
        if fromdate and todate:
            l1 = list(m2.einsp_marked.objects.filter(created_by__in=reportedby,marked_emp_id__in=actionby,status_flag__in=status,created_on__date__range=[fromdate,todate]).values('eitemid_id','created_on','status_flag','created_by','id','compliance','marked_emp_id'))
            # if prio=="Select":
            #     ll1 = list(m2.report_it.objects.filter(id__in=siri11,reporttime__date__range=[fromdate,todate],empno_report__in=remail,status_flag__in=status).values('id','issuetitle','location','priority','reporttime','remarks','status_flag','designation_code_id','entityDetails','entity'))
            # else:
            #     ll1 = list(m2.report_it.objects.filter(id__in=siri11,reporttime__date__range=[fromdate,todate],empno_report__in=remail,status_flag__in=status,priority=prio).values('id','issuetitle','location','priority','reporttime','remarks','status_flag','designation_code_id','entityDetails','entity'))
        else:
            l1 = list(m2.einsp_marked.objects.filter(created_by__in=reportedby,marked_emp_id__in=actionby,status_flag__in=status).values('eitemid_id','created_on','status_flag','created_by','id','compliance','marked_emp_id'))
            # # print(remail,status,prio)
            # if prio=="Select":
            #     ll1 = list(m2.report_it.objects.filter(id__in=siri11,empno_report__in=remail,status_flag__in=status).values('id','issuetitle','location','priority','reporttime','remarks','status_flag','designation_code_id','entityDetails','entity'))
            # else:
            #     ll1 = list(m2.report_it.objects.filter(id__in=siri11,empno_report__in=remail,status_flag__in=status,priority=prio).values('id','issuetitle','location','priority','reporttime','remarks','status_flag','designation_code_id','entityDetails','entity'))
        # # print("Paridhiiiiiii",l1)
        # # print("Hiyaaaaaaaa",ll1)
        ans={}
        # siriAns={}
        for i in range(len(l1)):
            l2=list(m2.einspection_item_detail.objects.filter(eitemid=l1[i]['eitemid_id']).values('value','qid_id','qncat_id','einspno_id'))
            if l2[0]['qncat_id']!='':
                pid = list(inspectiontype_master.objects.filter(instypeid=l2[0]['qncat_id']).values('parent_id'))
                ltype = list(inspectiontype_master.objects.filter(instypeid=pid[0]['parent_id']).values('name'))[0]['name']
            else:
                ltype = 'CIRI'
            l3=list(Level_Desig.objects.filter(empno_id=l1[i]['created_by']).values('designation_code','designation'))
            l7=list(Level_Desig.objects.filter(empno_id=l1[i]['marked_emp_id']).values('designation_code','designation'))
            l4=list(Level_Desig.objects.filter(designation_code=l3[0]['designation_code']).values('rly_unit_id'))[0]['rly_unit_id']
            l5=list(m2.einspection_details.objects.filter(einspno=l2[0]['einspno_id']).values('entitydetails','entityid'))
            if l2[0]['qid_id']!='':
                if prio=="Select":
                    l6=list(m2.questionare_master.objects.filter(Q(qid=l2[0]['qid_id'])).values_list('priority',flat=True))
                    l8=list(m2.questionare_master.objects.filter(Q(qid=l2[0]['qid_id'])).values('activity'))
                    defi = str(l8[0]['activity'])+ " - " + str(l2[0]['value'])
                else:
                    l6=list(m2.questionare_master.objects.filter(Q(qid=l2[0]['qid_id']) & Q(priority=prio)).values_list('priority',flat=True))
                    l8=list(m2.questionare_master.objects.filter(Q(qid=l2[0]['qid_id']) & Q(priority=prio)).values('activity'))
                    defi = str(l8[0]['activity'])+ " - " + str(l2[0]['value'])
            else:
                l6=list(m2.einspection_details.objects.filter(einspno=l2[0]['einspno_id']).values_list('priority',flat=True))
                defi = str(l2[0]['value'])
            # # print("l2",l2)
            # # print("l8",l8)
            # # print("l6",l6)
            if l1[i]['status_flag']==1:
                st="Pending"
            else:
                st="Closed"
            if l1[i]['created_on']:
                # # print(details[i]['inspected_on'])
                date = l1[i]['created_on'].strftime('%d/%m/%y')
            else:
                date = 'NA'
            if l1[i]['compliance']:
                comp=l1[i]['compliance']
            else:
                comp="NA"
            
            # # print(pr)
            if pr==1:
                if len(l6): 
                    if len(l8):
                        
                        ans.update({l1[i]['id']:{'rem':defi, 'repo':l3[0]['designation'],'date':date,'loc':ltype,'st':st,'act':l7[0]['designation'],'pr':l6,'comp':comp,'entdet':l5[0]['entitydetails'],'entid':l5[0]['entityid']}})   
            else:
                if l8:
                    
                    ans.update({l1[i]['id']:{'rem':defi, 'repo':l3[0]['designation'],'date':date,'loc':ltype,'st':st,'act':l7[0]['designation'],'pr':l6,'comp':comp,'entdet':l5[0]['entitydetails'],'entid':l5[0]['entityid']}})
        # # print(ans)
        # for i in range(len(ll1)):
        #     if ll1[i]['reporttime']:
        #         # # print(details[i]['inspected_on'])
        #         date = ll1[i]['reporttime'].strftime('%d/%m/%y')
        #     else:
        #         date = 'NA'
        #     if ll1[i]['status_flag']==1:
        #         st="Pending"
        #     else:
        #         st="Closed"
        #     ll2 = list(Level_Desig.objects.filter(designation_code=ll1[i]['designation_code_id']).values('designation'))
        #     siriAns.update({ll1[i]['id']:{'rem':ll1[i]['issuetitle'],'repo':ll2[0]['designation'],'date':date,'loc':'SIRI','st':st,'act':'NA','pr':ll1[i]['priority'],'comp':ll1[i]['remarks'],'entdet':ll1[i]['entityDetails'],'entid':ll1[i]['entity']}})
    else: 
        rly = list(Level_Desig.objects.filter(official_email_ID=email).values('rly_unit_id'))
        ltype = list(railwayLocationMaster.objects.filter(rly_unit_code=rly[0]['rly_unit_id']).values('location_type','location_code'))
        # # print("ltype",ltype)
        if ltype[0]['location_type'] == 'ZR':
            rly1 = list(railwayLocationMaster.objects.filter(parent_location_code=ltype[0]['location_code'],location_type='DIV').values_list('rly_unit_code',flat=True))
            # desgn = list(Level_Desig.objects.filter(rly_unit_id__in=rly1).values_list('designation_code',flat=True))
            # desgc = list(Level_Desig.objects.filter(rly_unit_id__in=rly1).values_list('designation',flat=True))
            desgn = list(Level_Desig.objects.filter(official_email_ID=email).values_list('designation_code',flat=True))
            desgc = list(Level_Desig.objects.filter(official_email_ID=email).values_list('designation',flat=True))
            # # print(desgc)
        else:
            # rly1 = list(Level_Desig.objects.filter(official_email_ID=email).values_list('rly_unit_id',flat=True))
            desgn = list(Level_Desig.objects.filter(official_email_ID=email).values_list('designation_code',flat=True))
            desgc = list(Level_Desig.objects.filter(official_email_ID=email).values_list('designation',flat=True))
            # # print(desgc)   
        # desgc = list(Level_Desig.objects.filter(official_email_ID=email).values('designation_code','designation'))
        # # print(desgc)
        l1 = list(m2.einsp_marked.objects.filter(marked_to_id__in=desgn).values('eitemid_id','created_on','status_flag','created_by','id','compliance','marked_to_id'))
        ans={}
        # siriAns={}
        # ll3 = list(m2.siri_marked.objects.filter(marked_to_id__in=desgn).values_list('report_it_id_id',flat=True))
        # ll1 = list(m2.report_it.objects.filter(id__in=ll3).values('id','issuetitle','location','priority','reporttime','remarks','status_flag','designation_code_id','entityDetails','entity'))
        # # print("ll3",ll3)
        for i in range(len(l1)):
            l2=list(m2.einspection_item_detail.objects.filter(eitemid=l1[i]['eitemid_id']).values('value','qid_id','qncat_id','einspno_id'))
            if l2[0]['qncat_id']!='':
                pid = list(inspectiontype_master.objects.filter(instypeid=l2[0]['qncat_id']).values('parent_id'))
                ltype = list(inspectiontype_master.objects.filter(instypeid=pid[0]['parent_id']).values('name'))[0]['name']
            else:
                ltype = 'CIRI'
            l3=list(Level_Desig.objects.filter(empno_id=l1[i]['created_by']).values('designation_code','designation'))
            l4=list(Level_Desig.objects.filter(designation_code=l3[0]['designation_code']).values('rly_unit_id'))[0]['rly_unit_id']
            l5=list(m2.einspection_details.objects.filter(einspno=l2[0]['einspno_id']).values('entitydetails','entityid'))
            if l2[0]['qid_id']!='':
                l6=list(m2.questionare_master.objects.filter(qid=l2[0]['qid_id']).values('activity','priority'))
                defi = str(l6[0]['activity'])+ " - " + str(l2[0]['value'])
            else:
                l6=list(m2.einspection_details.objects.filter(einspno=l2[0]['einspno_id']).values('priority'))
                defi = str(l2[0]['value'])
            l7=list(Level_Desig.objects.filter(designation_code=l1[i]['marked_to_id']).values('designation'))
            if l1[i]['status_flag']==1:
                st="Pending"
            else:
                st="Closed"
            if l1[i]['created_on']:
                # # print(details[i]['inspected_on'])
                date = l1[i]['created_on'].strftime('%d/%m/%y')
            else:
                date = 'NA'
            if l1[i]['compliance']:
                comp=l1[i]['compliance']
            else:
                comp="NA"
            # defi = str(l6[0]['activity'])+ " - " + str(l2[0]['value'])
            ans.update({l1[i]['id']:{'rem':defi, 'repo':l3[0]['designation'],'date':date,'loc':ltype,'st':st,'act':l7[0]['designation'],'pr':l6[0]['priority'],'comp':comp,'entdet':l5[0]['entitydetails'],'entid':l5[0]['entityid']}})
        # for i in range(len(ll1)):
        #     if ll1[i]['reporttime']:
        #         # # print(details[i]['inspected_on'])
        #         date = ll1[i]['reporttime'].strftime('%d/%m/%y')
        #     else:
        #         date = 'NA'
        #     if ll1[i]['status_flag']==1:
        #         st="Pending"
        #     else:
        #         st="Closed"
        #     ll2 = list(Level_Desig.objects.filter(designation_code=ll1[i]['designation_code_id']).values('designation'))
        #     ll4 = list(m2.siri_marked.objects.filter(report_it_id_id=ll1[i]['id']).values('marked_to_id'))
        #     ll5 = list(Level_Desig.objects.filter(designation_code=ll4[0]['marked_to_id']).values('designation'))
        #     siriAns.update({ll1[i]['id']:{'rem':ll1[i]['issuetitle'],'repo':ll2[0]['designation'],'date':date,'loc':'SIRI','st':st,'act':ll5[0]['designation'],'pr':ll1[i]['priority'],'comp':ll1[i]['remarks'],'entdet':ll1[i]['entityDetails'],'entid':ll1[i]['entity']}})

        # # print("Ans",ans)
        # # print("SiriAns",siriAns)
    # # print("Ans",ans)
    # # print("SiriAns",siriAns)
    context={
        'details':ans,
        # 'detailsSiri':siriAns,
    }
    submitbtn=request.GET.get('submitbtn')
    # # print(submitbtn)
    if submitbtn=='PDF':
        pdf=utils.render_to_pdf('DefieciencyReport_pdf.html',context)
        return pdf
    elif submitbtn=='excel':                 
        import xlwt 
        from xlwt import Workbook
        response = HttpResponse(content_type='application/ms-excel')
        response['Content-Disposition'] = 'attachment; filename="station_inspection_Report.xls"'
        wb = Workbook() 
        sheet1 = wb.add_sheet('Sheet 1')
        style= xlwt.easyxf("font: bold on;borders: top_color black, bottom_color black, right_color black, left_color black,\
                        left thin, right thin, top thin, bottom thin;")
        style1= xlwt.easyxf("borders: top_color black, bottom_color black, right_color black, left_color black,\
                        left thin, right thin, top thin, bottom thin;")  
        heading1 = "Deficiency Report"
        row=1
        sheet1.write_merge(row,row,6,8,heading1,style=style)
        from datetime import date
        currDate = datetime.now().strftime("%d-%m-%Y")
        row=3
                                
        sheet1.write_merge(row,row,0,4,'Date :'+currDate)
        row=4
        sheet1.write_merge(row,row,1,2,'Reported On',style=style)
        sheet1.write_merge(row,row,3,7,'Deficiency',style=style)                                                 
        sheet1.write_merge(row,row,8,9,'Reported By',style=style)
        sheet1.write_merge(row,row,10,14,'Inspection Type',style=style)
        sheet1.write_merge(row,row,15,15,'Action By',style=style)
        sheet1.write_merge(row,row,16,18,'Remarks',style=style)
        
                                
        index=1
        row=row+1
        # # print('0000000000000000000000000000',donor)
        for i,j in ans.items() :
            # print("+++++++++++++---------------------")  
            sheet1.write(row,0,index,style=style1)
            sheet1.write_merge(row,row,1,2,j['date'],style=style1)
            sheet1.write_merge(row,row,3,7,j['rem'],style=style1)                        
            sheet1.write_merge(row,row,8,9,j['repo'],style=style1)
            sheet1.write_merge(row,row,10,14,j['loc']+' Inspection Of '+j['entdet']+' '+j['entid'],style=style1)
            sheet1.write_merge(row,row,15,15,j['act'],style=style1)
            sheet1.write_merge(row,row,16,18,j['st']+': '+j['comp'],style=style1)
                                       
            row+=1
            # print("+++++++++++++")                          
            index+=1

        wb.save(response)
    return response


##########   new changes

@login_required
def complienceForm(request):
    email = request.user
    rly = list(Level_Desig.objects.filter(official_email_ID=email).values('rly_unit_id'))
    ltype = list(railwayLocationMaster.objects.filter(rly_unit_code=rly[0]['rly_unit_id']).values('location_type','location_code'))
    if ltype[0]['location_type'] == 'ZR':
        rly1 = list(railwayLocationMaster.objects.filter(parent_location_code=ltype[0]['location_code'],location_type='DIV').values_list('rly_unit_code',flat=True))
    else:
        rly1 = list(Level_Desig.objects.filter(official_email_ID=email).values_list('rly_unit_id',flat=True))

    desgn_no = list(Level_Desig.objects.filter(rly_unit_id__in=rly1).values('designation'))
    desgn = list(Level_Desig.objects.filter(rly_unit_id__in=rly1).values_list('designation_code',flat=True))
    repo = list(m2.einsp_marked.objects.filter(marked_to_id__in=desgn).values_list('created_by',flat=True))

    rep_by = list(Level_Desig.objects.filter(Q(empno_id__in=repo)).values('designation'))

    context={
            'desg_no': desgn_no,
            'rep_by':rep_by,
            # 'action_by': action,
        }
    return render(request,'complienceForm.html',context)  


def showCompliance(request):
    if request.method=='GET':
        email=str(request.user)
        valType = request.GET.get('valType')
        empnox = Level_Desig.objects.filter(Q(official_email_ID=request.user) | Q(official_email_ID=request.user.email))
        desgc = []
        empno = ''
        desgn =[]
        rly = ''
        if empnox:
            empno = empnox[0].empno_id
            desgn = [empnox[0].designation]
            desgc = [empnox[0].designation_code]
            rly = empnox[0].rly_unit_id
        ltype = list(railwayLocationMaster.objects.filter(rly_unit_code=rly).values('location_type','location_code'))
        if valType == 'byMe':                                                 
            l1 = list(m2.einsp_marked.objects.filter(created_by=empno).values('eitemid_id','created_on','status_flag','created_by','id','compliance','marked_to_id','marked_emp_id','designation_by','target_date','revert','designation','id').order_by('-created_on'))
        elif valType == 'byOthers':
            l1 = list(m2.einsp_marked.objects.filter(marked_to_id__in=desgc).values('eitemid_id','created_on','status_flag','created_by','id','compliance','marked_to_id','marked_emp_id','designation_by','target_date','revert','designation','id').order_by('-created_on'))
        elif valType == 'forByMe':
            l1 = list(m2.einsp_marked.objects.filter(id__in=m2.einsp_forward_marked.objects.filter(created_by=empno).values('marked_no')).values('eitemid_id','created_on','status_flag','created_by','id','compliance','marked_to_id','marked_emp_id','designation_by','target_date','revert','designation','id').order_by('-created_on'))
        elif valType == 'forToMe':
            l1 = list(m2.einsp_marked.objects.filter(id__in=m2.einsp_forward_marked.objects.filter(designationTo__in=desgn).values('marked_no')).values('eitemid_id','created_on','status_flag','created_by','id','compliance','marked_to_id','marked_emp_id','designation_by','target_date','revert','designation','id').order_by('-created_on'))

        elif valType == 'pending':
            pass
        elif valType == 'closed':
            pass
        elif valType == 'target':
            pass
        else:
            l1 = list(m2.einsp_marked.objects.filter(marked_to_id__in=desgn).values('eitemid_id','created_on','status_flag','created_by','id','compliance','marked_to_id','marked_emp_id','designation_by','target_date','revert','designation','id').order_by('-created_on'))
        
        ans={}
        for i in range(len(l1)):
            l2=list(m2.einspection_item_detail.objects.filter(eitemid=l1[i]['eitemid_id']).values('value','qid_id','qncat_id','einspno_id'))
            l5=list(m2.einspection_details.objects.filter(einspno=l2[0]['einspno_id']).values('entitydetails','entityid'))
            if len(l5) == 0:
                continue
            if l2[0]['qncat_id']!='':
                pid = list(inspectiontype_master.objects.filter(instypeid=l2[0]['qncat_id']).values('parent_id'))
                if pid:
                    ltype = list(inspectiontype_master.objects.filter(instypeid=pid[0]['parent_id']).values('name'))[0]['name']
                else:
                    ltype = ''
            else:
                ltype = 'CIRI'
            
            l3=list(Level_Desig.objects.filter(empno_id=l1[i]['created_by']).values('designation_code','designation'))
            if len(l3) == 0:
                continue
            if l2[0]['qid_id']!='':
                l6=list(m2.questionare_master.objects.filter(qid=l2[0]['qid_id']).values('activity','priority'))
                if len(l6) and len(l2):
                    defi = str(l6[0]['activity'])+ " - " + str(l2[0]['value'])
                else:
                    defi = ''
            else:
                l6=list(m2.einspection_details.objects.filter(einspno=l2[0]['einspno_id']).values('priority'))
                defi = str(l2[0]['value'])
            l7=list(Level_Desig.objects.filter(designation_code=l1[i]['marked_to_id']).values('designation'))
            if len(l7) == 0:
                continue
            if l1[i]['status_flag']==1 and l1[i]['target_date'] == None and l1[i]['revert'] == None:
                st="Pending"
                comp = ""
            elif l1[i]['status_flag']==1 and l1[i]['target_date'] != None:
                st="Pending"
                comp = "Will be Done By :-" +str(l1[i]['target_date'].strftime('%d/%m/%y'))

            elif l1[i]['status_flag']==4 and l1[i]['revert'] != None:
                st="Closed"
                comp = "Reverted Remarks :- " +str(l1[i]['compliance'])
            else:
                st="Closed"
                comp = str(l1[i]['compliance'])
            if st == "Pending":
                for_data=list(m2.einsp_forward_marked.objects.filter(marked_no = l1[i]['id'],status_flag=1,designationBy=desgc).values())
                if(len(for_data)):
                    comp ='Forwarded To ' + for_data[0]['designationTo']
            if l1[i]['created_on']:
                date = l1[i]['created_on'].strftime('%d/%m/%y')
            else:
                date = 'NA'
          
            if len(l6):
                pr11 = l6[0]['priority']
            else:
                pr11 = ''
            
            if valType == 'forByMe':
                        for_data=list(m2.einsp_forward_marked.objects.filter(marked_no = l1[i]['id']).values())
                        designationTo=''
                        created_date=''
                        st=''
                        comp=''
                        for ii in range(len(for_data)):
                            if ii != 0:
                                designationTo = designationTo + '@$@'
                                created_date = created_date + '@$@'
                                st = st + '@$@'
                                comp = comp + '@$@'

                            designationTo += for_data[ii]['designationTo']
                            created_date += for_data[ii]['created_date'].strftime('%d/%m/%y')
                            if for_data[ii]['status_flag'] == 1:
                                st += 'Pending'
                                comp += ' '+for_data[ii]['designationBy'] +' Remarks- '+   for_data[ii]['remarks']
                            elif for_data[ii]['status_flag'] == 2:
                                st += 'Closed'
                                comp += ' '+ for_data[ii]['designationBy'] +' Remarks- '+   for_data[ii]['remarks']
                                comp += ', '+ for_data[ii]['designationTo'] +' Compliance- '+   for_data[ii]['compliance']
                            else:
                                st += 'Closed & '
                                comp += 'Reverted '+ for_data[ii]['designationBy'] +' Remarks- '+   for_data[ii]['remarks']
                                comp += ', '+ for_data[ii]['designationTo'] +'Compliance- '+   for_data[ii]['compliance']
                        try:
                            if defi!='':
                                ans.update({l1[i]['id']:{'designationTo':designationTo,'created_date':created_date,'rem':defi, 'repo':l3[0]['designation'],'date':date,'loc':ltype,'st':st,'act':l7[0]['designation'],'pr':pr11,'comp':comp,'entdet':l5[0]['entitydetails'],'entid':l5[0]['entityid']}})
        
                        except:
                            pass
            elif valType == 'forToMe':
                for_data=list(m2.einsp_forward_marked.objects.filter(marked_no = l1[i]['id']).values())
                if(len(for_data)):
                    designationTo = for_data[0]['designationBy']
                    created_date = for_data[0]['created_date'].strftime('%d/%m/%y')
                    if for_data[0]['status_flag'] == 1:
                        st = 'Pending'
                        comp = ' '+ for_data[0]['designationBy'] +' Remarks- '+   for_data[0]['remarks']
                    elif for_data[0]['status_flag'] == 2:
                        st = 'Closed'
                        comp = ' '+ for_data[0]['designationBy'] +' Remarks- '+   for_data[0]['remarks']
                        comp += ', '+ for_data[0]['designationTo'] +' Compliance- '+   for_data[0]['compliance']
                    else:
                        st = 'Closed & '
                        comp = 'Reverted \n'+ for_data[0]['designationBy'] +' Remarks- '+   for_data[0]['remarks']
                        comp += ', '+ for_data[0]['designationTo'] +' Compliance- '+   for_data[0]['compliance']
                try:
                    if defi!='':
                        ans.update({l1[i]['id']:{'designationTo':designationTo,'created_date':created_date,'rem':defi, 'repo':l3[0]['designation'],'date':date,'loc':ltype,'st':st,'act':l7[0]['designation'],'pr':pr11,'comp':comp,'entdet':l5[0]['entitydetails'],'entid':l5[0]['entityid']}})
        
                except:
                    pass
            else:
                if defi!='':
                    ans.update({l1[i]['id']:{'rem':defi, 'repo':l3[0]['designation'],'date':date,'loc':ltype,'st':st,'act':l7[0]['designation'],'pr':pr11,'comp':comp,'entdet':l5[0]['entitydetails'],'entid':l5[0]['entityid']}})
        
    return JsonResponse({'details':ans},safe=False)

def searchCompliance(request):
    if request.method=='GET':
        email=str(request.user)
        date1 = request.GET.get('date')
        reportedby = request.GET.get('reportedby')
        actionby = request.GET.get('actionby')
        status = request.GET.get('status')
        prio = request.GET.get('prio')
        valType = request.GET.get('valType')
        empnox = Level_Desig.objects.filter(Q(official_email_ID=request.user) | Q(official_email_ID=request.user.email))
        empno = ''
        desgn_prev =None
        if empnox:
            empno = empnox[0].empno_id
            desgn_prev = empnox[0].designation
        if date1:
            fromdate = date1.split('-')[0]
            todate = date1.split('-')[1]
        m2.einsp_marked.objects.filter(created_by=empno,designation_by__isnull=True).update(designation_by=desgn_prev)
        
        try:
            fromdate = datetime.strptime(fromdate,'%d/%m/%y')
            todate = datetime.strptime(todate,'%d/%m/%y')
        except:
            fromdate = None
            todate = None
        if fromdate!=None or reportedby!="Select" or actionby!="Select" or status!="Select" or prio!="Select":
            rly = list(Level_Desig.objects.filter(official_email_ID=email).values('rly_unit_id'))
            ltype = list(railwayLocationMaster.objects.filter(rly_unit_code=rly[0]['rly_unit_id']).values('location_type','location_code'))
            if ltype[0]['location_type'] == 'ZR':
                rly1 = list(railwayLocationMaster.objects.filter(parent_location_code=ltype[0]['location_code'],location_type='DIV').values_list('rly_unit_code',flat=True))
            else:
                rly1 = list(Level_Desig.objects.filter(official_email_ID=email).values_list('rly_unit_id',flat=True))

            desgn = list(Level_Desig.objects.filter(rly_unit_id__in=rly1).values_list('designation_code',flat=True))
            if reportedby=="Select":
                reportedby = list(m2.einsp_marked.objects.values_list('created_by',flat=True).distinct())
            else:
                remail = list(Level_Desig.objects.filter(designation=reportedby).values_list('official_email_ID',flat=True))
                reportedby = list(Level_Desig.objects.filter(designation=reportedby).values_list('empno_id',flat=True).distinct())
            if actionby=="Select":
                actionby = list(m2.einsp_marked.objects.values_list('marked_emp_id',flat=True).distinct())
            else:
                siriactionby = list(Level_Desig.objects.filter(designation=actionby).values_list('empno_id',flat=True).distinct())
                actionby = list(Level_Desig.objects.filter(designation=actionby).values_list('empno_id',flat=True).distinct())
                
    
            if status=="Select":
                status = list(m2.einsp_marked.objects.values_list('status_flag',flat=True))
            else:
                if status=="Pending":
                    status = [1]
                else:
                    status = [4]
            pr=0
            if fromdate and todate:
                if valType == 'byMe':
                    l1 = list(m2.einsp_marked.objects.exclude(~Q(created_by=empno)).filter(created_by__in=reportedby,marked_emp_id__in=actionby,status_flag__in=status,created_on__date__range=[fromdate,todate]).values('eitemid_id','created_on','status_flag','created_by','id','compliance','marked_emp_id','designation_by','revert','designation','target_date','id').order_by('-eitemid_id'))
                elif valType == 'byOthers':
                    l1 = list(m2.einsp_marked.objects.exclude(~Q(marked_to_id__in=desgn)).filter(created_by__in=reportedby,marked_emp_id__in=actionby,status_flag__in=status,created_on__date__range=[fromdate,todate]).values('eitemid_id','created_on','status_flag','created_by','id','compliance','marked_emp_id','designation_by','revert','designation','target_date','id').order_by('-eitemid_id'))
                elif valType == 'forByMe':
                    l1 = list(m2.einsp_marked.objects.filter(id__in=m2.einsp_forward_marked.objects.filter(created_by=empno).values('marked_no'),created_by__in=reportedby,marked_emp_id__in=actionby,status_flag__in=status,created_on__date__range=[fromdate,todate]).values('eitemid_id','created_on','status_flag','created_by','id','compliance','marked_emp_id','designation_by','revert','designation','target_date','id').order_by('-eitemid_id'))
                elif valType == 'forToMe':
                    l1 = list(m2.einsp_marked.objects.filter(id__in=m2.einsp_forward_marked.objects.filter(designationTo=desgn_prev).values('marked_no'),created_by__in=reportedby,marked_emp_id__in=actionby,status_flag__in=status,created_on__date__range=[fromdate,todate]).values('eitemid_id','created_on','status_flag','created_by','id','compliance','marked_emp_id','designation_by','revert','designation','target_date','id').order_by('-eitemid_id'))
            
            else:
                if valType == 'byMe':
                    print(status,'status',reportedby,actionby,status)
                    l1 = list(m2.einsp_marked.objects.exclude(~Q(created_by=empno)).filter(created_by__in=reportedby,marked_emp_id__in=actionby,status_flag__in=status).values('eitemid_id','created_on','status_flag','created_by','id','compliance','marked_emp_id','designation_by','target_date','revert','designation','id').order_by('-eitemid_id'))
                elif valType == 'byOthers':
                    l1 = list(m2.einsp_marked.objects.exclude(~Q(marked_to_id__in=desgn)).filter(created_by__in=reportedby,marked_emp_id__in=actionby,status_flag__in=status).values('eitemid_id','created_on','status_flag','created_by','id','compliance','marked_emp_id','designation_by','target_date','revert','designation','id').order_by('-eitemid_id'))
                elif valType == 'forByMe':
                    l1 = list(m2.einsp_marked.objects.filter(id__in=m2.einsp_forward_marked.objects.filter(created_by=empno).values('marked_no'),created_by__in=reportedby,marked_emp_id__in=actionby,status_flag__in=status).values('eitemid_id','created_on','status_flag','created_by','id','compliance','marked_emp_id','designation_by','target_date','revert','designation','id').order_by('-eitemid_id'))
                
                elif valType == 'forToMe':
                    l1 = list(m2.einsp_marked.objects.filter(id__in=m2.einsp_forward_marked.objects.filter(designationTo=desgn_prev).values('marked_no'),created_by__in=reportedby,marked_emp_id__in=actionby,status_flag__in=status).values('eitemid_id','created_on','status_flag','created_by','id','compliance','marked_emp_id','designation_by','target_date','revert','designation','id').order_by('-eitemid_id'))

            ans={}
            for i in range(len(l1)):
                # try:
                    l2=list(m2.einspection_item_detail.objects.filter(eitemid=l1[i]['eitemid_id']).values('value','qid_id','qncat_id','einspno_id'))
                    if l2[0]['qncat_id']!='':
                        pid = list(inspectiontype_master.objects.filter(instypeid=l2[0]['qncat_id']).values('parent_id'))
                        if pid:
                            ltype = list(inspectiontype_master.objects.filter(instypeid=pid[0]['parent_id']).values('name'))[0]['name']
                        else:
                            ltype = ''
                    else:
                        ltype = 'CIRI'
                    
                    l5=list(m2.einspection_details.objects.filter(einspno=l2[0]['einspno_id']).values('entitydetails','entityid'))
                    if l2[0]['qid_id']!='':
                        if prio=="Select":
                            l6=list(m2.questionare_master.objects.filter(Q(qid=l2[0]['qid_id'])).values_list('priority',flat=True))
                            l8=list(m2.questionare_master.objects.filter(Q(qid=l2[0]['qid_id'])).values('activity'))
                            if len(l6) and len(l8):
                                defi = str(l8[0]['activity'])+ " - " + str(l2[0]['value'])
                        else:
                            l6=list(m2.questionare_master.objects.filter(Q(qid=l2[0]['qid_id']) & Q(priority=prio)).values_list('priority',flat=True))
                            l8=list(m2.questionare_master.objects.filter(Q(qid=l2[0]['qid_id']) & Q(priority=prio)).values('activity'))
                            if len(l6) and len(l8):
                                defi = str(l8[0]['activity'])+ " - " + str(l2[0]['value'])
                    else:
                        l6=list(m2.einspection_details.objects.filter(einspno=l2[0]['einspno_id']).values_list('priority',flat=True))
                        defi = str(l2[0]['value'])
                    if l1[i]['status_flag']==1 and l1[i]['target_date'] == None and l1[i]['revert'] == None:
                        st="Pending"
                        comp = ""
                    elif l1[i]['status_flag']==1 and l1[i]['target_date'] != None:
                        st="Pending"
                        comp = "Will be Done By :-" +str(l1[i]['target_date'].strftime('%d/%m/%y'))

                    elif l1[i]['status_flag']==4  and l1[i]['revert'] != None:
                        st="Closed"
                        comp = "Reverted Remarks :- " +str(l1[i]['compliance'])
                    else:
                        st="Closed"
                        comp = str(l1[i]['compliance'])

                    if st == "Pending":
                        for_data=list(m2.einsp_forward_marked.objects.filter(marked_no = l1[i]['id'],status_flag=1,designationBy=desgn_prev).values())
                        if(len(for_data)):
                            comp ='Forwarded To ' + for_data[0]['designationTo']
                    if l1[i]['created_on']:
                        date = l1[i]['created_on'].strftime('%d/%m/%y')
                    else:
                        date = 'NA'
                    
                    if valType == 'forByMe':
                        for_data=list(m2.einsp_forward_marked.objects.filter(marked_no = l1[i]['id']).values())
                        designationTo=''
                        created_date=''
                        st=''
                        comp=''
                        for ii in range(len(for_data)):
                            if ii != 0:
                                designationTo = designationTo + '@$@'
                                created_date = created_date + '@$@'
                                st = st + '@$@'
                                comp = comp + '@$@'

                            designationTo += for_data[ii]['designationTo']
                            created_date += for_data[ii]['created_date'].strftime('%d/%m/%y')
                            if for_data[ii]['status_flag'] == 1:
                                st += 'Pending'
                                comp += ' '+for_data[ii]['designationBy'] +' Remarks- '+   for_data[ii]['remarks']
                            elif for_data[ii]['status_flag'] == 2:
                                st += 'Closed'
                                comp += ' '+ for_data[ii]['designationBy'] +' Remarks- '+   for_data[ii]['remarks']
                                comp += ', '+ for_data[ii]['designationTo'] +' Compliance- '+   for_data[ii]['compliance']
                            else:
                                st += 'Closed & '
                                comp += 'Reverted '+ for_data[ii]['designationBy'] +' Remarks- '+   for_data[ii]['remarks']
                                comp += ', '+ for_data[ii]['designationTo'] +'Compliance- '+   for_data[ii]['compliance']
                        try:
                            if pr==1:
                                if len(l6): 
                                    if len(l8):
                                        ans.update({l1[i]['id']:{'designationTo':designationTo,'created_date':created_date,'rem':defi, 'repo':l1[i]['designation_by'],'date':date,'loc':ltype,'st':st,'act':l1[i]['designation'],'pr':l6,'comp':comp,'entdet':l5[0]['entitydetails'],'entid':l5[0]['entityid']}})   
                            else:
                                if l8:
                                    ans.update({l1[i]['id']:{'designationTo':designationTo,'created_date':created_date,'rem':defi, 'repo':l1[i]['designation_by'],'date':date,'loc':ltype,'st':st,'act':l1[i]['designation'],'pr':l6,'comp':comp,'entdet':l5[0]['entitydetails'],'entid':l5[0]['entityid']}})

                        except:
                            pass
                    elif valType == 'forToMe':
                        for_data=list(m2.einsp_forward_marked.objects.filter(marked_no = l1[i]['id']).values())
                        if(len(for_data)):
                            designationTo = for_data[0]['designationBy']
                            created_date = for_data[0]['created_date'].strftime('%d/%m/%y')
                            if for_data[0]['status_flag'] == 1:
                                st = 'Pending'
                                comp = ' '+ for_data[0]['designationBy'] +' Remarks- '+   for_data[0]['remarks']
                            elif for_data[0]['status_flag'] == 2:
                                st = 'Closed'
                                comp = ' '+ for_data[0]['designationBy'] +' Remarks- '+   for_data[0]['remarks']
                                comp += ', '+ for_data[0]['designationTo'] +' Compliance- '+   for_data[0]['compliance']
                            else:
                                st = 'Closed & '
                                comp = 'Reverted \n'+ for_data[0]['designationBy'] +' Remarks- '+   for_data[0]['remarks']
                                comp += ', '+ for_data[0]['designationTo'] +' Compliance- '+   for_data[0]['compliance']
                        try:
                            if pr==1:
                                if len(l6): 
                                    if len(l8):
                                        ans.update({l1[i]['id']:{'designationTo':designationTo,'created_date':created_date,'rem':defi, 'repo':l1[i]['designation_by'],'date':date,'loc':ltype,'st':st,'act':l1[i]['designation'],'pr':l6,'comp':comp,'entdet':l5[0]['entitydetails'],'entid':l5[0]['entityid']}})   
                            else:
                                if l8:
                                    ans.update({l1[i]['id']:{'designationTo':designationTo,'created_date':created_date,'rem':defi, 'repo':l1[i]['designation_by'],'date':date,'loc':ltype,'st':st,'act':l1[i]['designation'],'pr':l6,'comp':comp,'entdet':l5[0]['entitydetails'],'entid':l5[0]['entityid']}})

                        except:
                            pass
                    else:
                        try:
                            if pr==1:
                                if len(l6): 
                                    if len(l8):
                                        ans.update({l1[i]['id']:{'rem':defi, 'repo':l1[i]['designation_by'],'date':date,'loc':ltype,'st':st,'act':l1[i]['designation'],'pr':l6,'comp':comp,'entdet':l5[0]['entitydetails'],'entid':l5[0]['entityid']}})   
                            else:
                                if l8:
                                    ans.update({l1[i]['id']:{'rem':defi, 'repo':l1[i]['designation_by'],'date':date,'loc':ltype,'st':st,'act':l1[i]['designation'],'pr':l6,'comp':comp,'entdet':l5[0]['entitydetails'],'entid':l5[0]['entityid']}})
                        except:
                            pass
                # except:
                #     pass
        else: 
            rly = list(Level_Desig.objects.filter(official_email_ID=email).values('rly_unit_id'))
            ltype = list(railwayLocationMaster.objects.filter(rly_unit_code=rly[0]['rly_unit_id']).values('location_type','location_code'))
            if ltype[0]['location_type'] == 'ZR':
                rly1 = list(railwayLocationMaster.objects.filter(parent_location_code=ltype[0]['location_code'],location_type='DIV').values_list('rly_unit_code',flat=True))
         
                desgn = list(Level_Desig.objects.filter(official_email_ID=email).values_list('designation_code',flat=True))
                desgc = list(Level_Desig.objects.filter(official_email_ID=email).values_list('designation',flat=True))
            else:
                desgn = list(Level_Desig.objects.filter(official_email_ID=email).values_list('designation_code',flat=True))
                desgc = list(Level_Desig.objects.filter(official_email_ID=email).values_list('designation',flat=True))
            if valType == 'byMe':
                l1 = list(m2.einsp_marked.objects.filter(created_by=empno).values('eitemid_id','created_on','status_flag','created_by','id','compliance','marked_to_id','designation_by','target_date','revert','designation','id').order_by('-created_on'))
            elif valType == 'byOthers':
                l1 = list(m2.einsp_marked.objects.filter(marked_to_id__in=desgn).values('eitemid_id','created_on','status_flag','created_by','id','compliance','marked_to_id','designation_by','target_date','revert','designation','id').order_by('-created_on'))


            elif valType == 'forByMe':
                l1 = list(m2.einsp_marked.objects.filter(id__in=m2.einsp_forward_marked.objects.filter(created_by=empno).values('marked_no')).values('eitemid_id','created_on','status_flag','created_by','id','compliance','marked_to_id','designation_by','target_date','revert','designation','id').order_by('-created_on'))
                

            elif valType == 'forToMe':
                l1 = list(m2.einsp_marked.objects.filter(id__in=m2.einsp_forward_marked.objects.filter(designationTo=desgn_prev).values('marked_no')).values('eitemid_id','created_on','status_flag','created_by','id','compliance','marked_to_id','designation_by','target_date','revert','designation','id').order_by('-created_on'))
                
            # l1 = list(m2.einsp_marked.objects.filter(marked_to_id__in=desgn).values('eitemid_id','created_on','status_flag','created_by','id','compliance','marked_to_id'))
            ans={}
  
            for i in range(len(l1)):
                # try:
                    l2=list(m2.einspection_item_detail.objects.filter(eitemid=l1[i]['eitemid_id']).values('value','qid_id','qncat_id','einspno_id'))
                    if l2[0]['qncat_id']!='':
                        pid = list(inspectiontype_master.objects.filter(instypeid=l2[0]['qncat_id']).values('parent_id'))
                        try:
                            ltype = list(inspectiontype_master.objects.filter(instypeid=pid[0]['parent_id']).values('name'))[0]['name']
                        except:
                            continue
                    else:
                        ltype = 'CIRI'
                    l5=list(m2.einspection_details.objects.filter(einspno=l2[0]['einspno_id']).values('entitydetails','entityid'))
                    if l2[0]['qid_id']!='':
                        l6=list(m2.questionare_master.objects.filter(qid=l2[0]['qid_id']).values('activity','priority'))
                        defi = str(l6[0]['activity'])+ " - " + str(l2[0]['value'])
                    else:
                        l6=list(m2.einspection_details.objects.filter(einspno=l2[0]['einspno_id']).values('priority'))
                        defi = str(l2[0]['value'])
                    if l1[i]['status_flag']==1 and l1[i]['target_date'] == None and l1[i]['revert'] == None:
                        st="Pending"
                        comp = ""
                    elif l1[i]['status_flag']==1 and l1[i]['target_date'] != None:
                        st="Pending"
                        comp = "Will be Done By :-" +str(l1[i]['target_date'].strftime('%d/%m/%y'))

                    elif l1[i]['status_flag']==4 and l1[i]['revert'] != None:
                        st="Closed"
                        comp = "Reverted Remarks :- " +str(l1[i]['compliance'])
                    else:
                        st="Closed"
                        comp = str(l1[i]['compliance'])
                    if st == "Pending":
                        for_data=list(m2.einsp_forward_marked.objects.filter(marked_no = l1[i]['id'],status_flag=1,designationBy=desgn_prev).values())
                        if(len(for_data)):
                            comp ='Forwarded To ' + for_data[0]['designationTo']
                    if l1[i]['created_on']:
                        date = l1[i]['created_on'].strftime('%d/%m/%y')
                    else:
                        date = 'NA'
                    if valType == 'forByMe':
                        for_data=list(m2.einsp_forward_marked.objects.filter(marked_no = l1[i]['id']).values())
                        designationTo=''
                        created_date=''
                        st=''
                        comp=''
                        for ii in range(len(for_data)):
                            if ii != 0:
                                designationTo = designationTo + '@$@'
                                created_date = created_date + '@$@'
                                st = st + '@$@'
                                comp = comp + '@$@'

                            designationTo += for_data[ii]['designationTo']
                            created_date += for_data[ii]['created_date'].strftime('%d/%m/%y')
                            if for_data[ii]['status_flag'] == 1:
                                st += 'Pending'
                                comp += ' '+for_data[ii]['designationBy'] +' Remarks- '+   for_data[ii]['remarks']
                            elif for_data[ii]['status_flag'] == 2:
                                st += 'Closed'
                                comp += ' '+ for_data[ii]['designationBy'] +' Remarks- '+   for_data[ii]['remarks']
                                comp += ', '+ for_data[ii]['designationTo'] +' Compliance- '+   for_data[ii]['compliance']
                            else:
                                st += 'Closed & '
                                comp += 'Reverted '+ for_data[ii]['designationBy'] +' Remarks- '+   for_data[ii]['remarks']
                                comp += ', '+ for_data[ii]['designationTo'] +'Compliance- '+   for_data[ii]['compliance']
                        
                        try:
                            ans.update({l1[i]['id']:{'designationTo':designationTo,'created_date':created_date,'rem':defi, 'repo':l1[i]['designation_by'],'date':date,'loc':ltype,'st':st,'act':l1[i]['designation'],'pr':l6[0]['priority'],'comp':comp,'entdet':l5[0]['entitydetails'],'entid':l5[0]['entityid']}})
                        except:
                            pass
                        
                    elif valType == 'forToMe':
                        
                        for_data=list(m2.einsp_forward_marked.objects.filter(marked_no = l1[i]['id'],designationTo=desgn_prev).values())
                        if(len(for_data)):
                            designationTo = for_data[0]['designationBy']
                            created_date = for_data[0]['created_date'].strftime('%d/%m/%y')
                            if for_data[0]['status_flag'] == 1:
                                st = 'Pending'
                                comp = ' '+ for_data[0]['designationBy'] +' Remarks- '+   for_data[0]['remarks']
                            elif for_data[0]['status_flag'] == 2:
                                st = 'Closed'
                                comp = ' '+ for_data[0]['designationBy'] +' Remarks- '+   for_data[0]['remarks']
                                comp += ', '+ for_data[0]['designationTo'] +' Compliance- '+   for_data[0]['compliance']
                            else:
                                st = 'Closed & '
                                comp = 'Reverted \n'+ for_data[0]['designationBy'] +' Remarks- '+   for_data[0]['remarks']
                                comp += ', '+ for_data[0]['designationTo'] +' Compliance- '+   for_data[0]['compliance']
                        try:
                            ans.update({l1[i]['id']:{'designationTo':designationTo,'created_date':created_date,'rem':defi, 'repo':l1[i]['designation_by'],'date':date,'loc':ltype,'st':st,'act':l1[i]['designation'],'pr':l6[0]['priority'],'comp':comp,'entdet':l5[0]['entitydetails'],'entid':l5[0]['entityid']}})
                        except:
                            pass
                    else:
                        try:
                            ans.update({l1[i]['id']:{'rem':defi, 'repo':l1[i]['designation_by'],'date':date,'loc':ltype,'st':st,'act':l1[i]['designation'],'pr':l6[0]['priority'],'comp':comp,'entdet':l5[0]['entitydetails'],'entid':l5[0]['entityid']}})
                        except:
                            pass
    print(ans)
    return JsonResponse({'details':ans},safe=False)


################################################# swasti ##########################################


# swasti start


def zoneChangeStation(request):
    if request.method=='GET':
        zone=request.GET.get('zone')
        division=list(railwayLocationMaster.objects.filter(location_type='DIV',parent_location_code=zone).distinct('location_code').values('location_code'))
        return JsonResponse(division, safe=False)
    return JsonResponse({"success:False"},status=400)
        

# station functions

def viewStation(request):
    try:
        # print('6789')
        if request.method=='GET':
            id1=request.GET.get('id')

            obj=list(station_master.objects.filter(stnshortcode=id1).values('stnshortcode','station_name','rly_id_id__location_code','div_id_id__location_code'))

            return JsonResponse({'obj':obj}, safe=False)
    except:
        pass
    return JsonResponse({'success':False},status=400)   

def saveStation1(request):
    try:

        if request.method=='GET':
            id1=request.GET.get('id')
            obj=list(station_master.objects.filter(stnshortcode=id1).values('station_name'))

            return JsonResponse({'obj':obj}, safe=False)
    except:
        pass
        
    return JsonResponse({'success':False},status=400)   

    
def UpdateStation(request):
    try:
        if request.method=='GET':
            idd=request.GET.get('stcode')
            name=request.GET.get('name')
            station_master.objects.filter(stnshortcode=idd).update(station_name=name)
            return JsonResponse({'success':True}, safe=False)
        return JsonResponse({'success':False},status=400)
    except:
        pass
        
def delStation(request):
    try:
        if request.method=='GET':
            stcode=request.GET.get('stcode')
            station_master.objects.filter(stnshortcode=stcode).update(delete_flag=True)
            return JsonResponse({'success':True})
        return JsonResponse({'success':False},status=404)
    except:
        print('Error')


def ssName(request):
    if request.method == 'GET':
        zone1 = request.GET.get('zone') 
        division1 = request.GET.get('division') 
        # # print('zone: ',zone)
        zone = railwayLocationMaster.objects.filter(location_code=zone1,location_type='ZR')[0]
        division = railwayLocationMaster.objects.filter(location_code=division1,location_type='DIV')[0]
        # print('zone:',zone,division)
        section=list(section_master.objects.filter(rly_id_id=zone.rly_unit_code,div_id_id=division.rly_unit_code).values())
        # print('gvbhjb:',section)
        # name=station_master.objects.filter(stnshortcode=section.secstart_code_id)[0]
        # name2=station_master.objects.filter(stnshortcode=section.secend_code_id)[0]
        # # print('tghbjnk',section)
        for i in range(len(section)):
            name=station_master.objects.filter(stnshortcode=section[i]['secstart_code_id'])[0]
            name2=station_master.objects.filter(stnshortcode=section[i]['secend_code_id'])[0]
            xx = str(name.station_name) + '-' + str(name2.station_name)
            # print('SECTION NAME: ',xx)
            section[i].update({'combinedName': xx })
        # print('section: ',name,name2)
        return JsonResponse(section, safe=False)
    return JsonResponse({'success':False},status=404)
    # except:
    #     # print('Error')
    
    
def cardsCategories(request):
    zone=list(railwayLocationMaster.objects.filter(location_type='ZR').values())
    sourceStation=station_master.objects.values('stnshortcode')
    destStation=station_master.objects.values('stnshortcode')
    owning=station_master.objects.values('stnshortcode')
    trainCat=traincat_master.objects.values('tn_category')
    secStart=station_master.objects.values('stnshortcode')
    secEnd=station_master.objects.values('stnshortcode')
    rStation=station_master.objects.values('stnshortcode')
    vialist=list(station_master.objects.values('station_name'))
    shortcode=[]
    if request.method == "POST":
        submitvalue = request.POST.get('submit')
        if submitvalue == 'station':
            stationName = request.POST.get('stationName')
            station_code=request.POST.get('stationId')
            zone1 = request.POST.get('zone')
            zoneSelect=railwayLocationMaster.objects.filter(location_code=zone1)[0]
            # print('ZONESELECT',zoneSelect)
            division=list(railwayLocationMaster.objects.filter(location_type='DIV',parent_location_code=zone1).distinct('location_code').values('location_code'))
            # print("DIVISION list", division)
            division1=request.POST.get('division')
            # print('division1', division1)
            divisionSelect=railwayLocationMaster.objects.filter(location_code=division1)[0]
            # print('divisionSelect',divisionSelect)

            name=station_master.objects.filter(stnshortcode=station_code)
            
          
            if name:
                messages.warning(request, 'STATION WITH THIS SHORTCODE ALREADY EXISTS ADD ANOTHER STATION !!')
                return redirect('cardsCategories')
            
            else:
                station_master.objects.create(stnshortcode=station_code,lastmodified_by=request.user,created_by=request.user,station_name=stationName,rly_id_id_id=zoneSelect.rly_unit_code,div_id_id_id=divisionSelect.rly_unit_code)
           
            # print(stationName,'  ',station_code)

            msg=list(station_master.objects.filter(stnshortcode=station_code).values())
            if msg:
                # print("Message:Message")
                messages.success(request,'Data Added Successfully')
                return redirect('cardsCategories')
            else:
                messages.error(request,'Error while adding data')


        elif submitvalue == 'train':
            # print('hi123')
            trainNumber = request.POST.get('trainNumber')
            # print('train number', trainNumber)
            trainName = request.POST.get('trainName')
            # print('train name', trainName)
           
            dest = request.POST.get('destStation')
            source = request.POST.get('SourceStation')
            owningRly=request.POST.get('owning')
            # print('Owning: ',owningRly)
            category=request.POST.get('trainCat')
            source=station_master.objects.filter(stnshortcode=source)[0]
            dest=station_master.objects.filter(stnshortcode=dest)[0]
            # category=traincat_master.objects.filter(tn_category=category)[0]
            #owningRly=station_master.objects.get(stnshortcode=owningRly)
            totalCoaches = request.POST.get('totalCoaches')
           

            owningSelect=station_master.objects.filter(stnshortcode=owningRly)[0]
            # print('owningSelect',owningSelect)

            test=train_master.objects.filter(train_no=trainNumber)
            
          
            if test:
                messages.warning(request, 'TRAIN WITH THIS TRAIN NUMBER ALREADY EXISTS ADD ANOTHER TRAIN !!')
                return redirect('cardsCategories')
            
            else:
                 train_master.objects.create(train_no=trainNumber,train_name=trainName,stnsource_code=source,stndest_code=dest,tn_category=category,total_coach=totalCoaches,created_by=request.user,lastmodified_by=request.user,trainowngrly2=owningSelect)
          
            msg=list(train_master.objects.filter(train_no=trainNumber).values())
            if msg:
                # print("Message:Message")
                messages.success(request,'Data Added Successfully')
                return redirect('cardsCategories')
            else:
                messages.error(request,'Error while adding data')

        elif submitvalue=='section':
        
            sectionStart=request.POST.get('sectionStartCode')
            # print('secStart',sectionStart)
            sectionEnd=request.POST.get('sectionEndCode')
            # print('secEnd',sectionEnd)
            sectionCode=request.POST.get('sectionCode')
            sectionName=request.POST.get('sectionName')
            via=request.POST.get('viaName')
            # print('vialist',via)
          

            via=station_master.objects.filter(station_name=via)[0]
            # print('via',via)

            # sectionRoute=request.POST.get('route')
            # route=request.POST.get('route')

            sectionLength=float(request.POST.get('sectionLength'))
            # print('dfcgvh:',type(sectionLength))
            # divisionId=request.POST.get('division')

            sectionStart=station_master.objects.filter(stnshortcode=sectionStart)[0]
            # print('sectionStart',sectionStart)
            sectionEnd=station_master.objects.filter(stnshortcode=sectionEnd)[0]
            # print('sectionEnd',sectionEnd)
            
            zoneSec = request.POST.get('zone')
            # print('sectionZone', zoneSec)
            zoneSelect=railwayLocationMaster.objects.filter(location_code=zoneSec)[0]
            # print('SectionZoneSelect',zoneSelect)


            division=railwayLocationMaster.objects.filter(location_type='DIV',parent_location_code=zoneSec).distinct('location_code').values('location_code')
            # print('division list of section', division)
            
            divisionSec=request.POST.get('division')
            # print('section division',divisionSec)

            divisionSelect=railwayLocationMaster.objects.filter(location_code=divisionSec)[0]
            # print('divisionSelect',divisionSelect)

            # test=section_master.objects.filter(section_code=sectionCode)
            
          
            # if test:
            #     messages.warning(request, 'SECTION WITH THIS SECTION CODE ALREADY EXISTS ADD ANOTHER SECTION !!')
            #     return redirect('cardsCategories')

            # else:
            section_master.objects.create(secstart_code=sectionStart,secend_code=sectionEnd,section_code=sectionCode,section_length=sectionLength,created_by=request.user,lastmodified_by=request.user,rly_id_id_id=zoneSelect.rly_unit_code,div_id_id_id=divisionSelect.rly_unit_code,via=via)

            
           

            # print("data",zoneSec, sectionLength,sectionCode)

            msg=list(section_master.objects.filter(section_code=sectionCode).values())
            if msg:
                # print("Message:Message")
                messages.success(request,'Data Added Successfully')
                return redirect('cardsCategories')
            else:
                messages.error(request,'Error while adding data')


        
        elif submitvalue =='runningRoom':
            runningRoomName=request.POST.get('runningRoomName')
            runningRoomCode=request.POST.get('runningRoomCode')
            runningStation =request.POST.get('rStation')
            # print('ggggggggggggggggggg   ',runningStation)
            runningStation=station_master.objects.get(stnshortcode=runningStation)

            zoneRr = request.POST.get('zone')
            # print('RrZone', zoneRr)
            zoneSelect=railwayLocationMaster.objects.filter(location_code=zoneRr)[0]
            # print('rrZoneSelect',zoneSelect)

            divisionRr=list(railwayLocationMaster.objects.filter(location_type='DIV',parent_location_code=zoneRr).distinct('location_code').values('location_code'))
            # print('Running room division list',divisionRr)

            division=request.POST.get('divisionRr')
            # print('Running room division',division)

            divisionSelect=railwayLocationMaster.objects.filter(location_code=division)[0]
            # print(' division select',divisionSelect)

            # divisionid=list(railwayLocationMaster.objects.filter(location_code=division).values('rly_unit_code'))
            # # print('division id ',divisionid[0]['rly_unit_code'])

            # code=list(station_master.objects.filter(rly_id_id=divisionid[0]['rly_unit_code']).values('stnshortcode'))
            
            # for i in range(len(code)):
            #     shortcode.append(code[i]['stnshortcode'])
            # # print('shortcode ',shortcode)   

            test=runningroom_master.objects.filter(rr_code=runningRoomCode)
            
          
            if test:
                messages.warning(request, 'RUNNINGROOM WITH THIS RR CODE ALREADY EXISTS ADD ANOTHER RUNNINGROOM !!')
                return redirect('cardsCategories')
            
            else: 
                runningroom_master.objects.create(rr_name=runningRoomName, rr_code=runningRoomCode,created_by=request.user,lastmodified_by=request.user,stnshortcode=runningStation,rly_id_id_id=zoneSelect.rly_unit_code,div_id_id_id=divisionSelect.rly_unit_code)

            # print('RR',runningRoomName,'  ',runningRoomCode," ", zoneRr)

            msg=list(runningroom_master.objects.filter(rr_code=runningRoomCode).values())
            if msg:
                # print("Message:Message")
                messages.success(request,'Data Added Successfully')
                return redirect('cardsCategories')
            else:
                messages.error(request,'Error while adding data')

    # To show data in tables
    # print('hhhhhhhh   ')
    if request.method == "GET":
        typ=request.GET.get('type')

        # print('hhhhhhhh',typ)
        if typ=='viewStation':
            data = list(station_master.objects.filter(delete_flag=False).values('station_name','stnshortcode','rly_id_id__location_code','div_id_id__location_code'))
            # data = list(models.station_master.objects.select_related('railwaylocationmaster').values())
            # # print('train data',data)
           
            return JsonResponse(data, safe = False)

        elif typ=='viewTrain':
            data=list(train_master.objects.filter(delete_flag=False).values('tnid','train_no','train_name','tn_category','stnsource_code','stndest_code','total_coach','trainowngrly2__stnshortcode'))
            return JsonResponse(data, safe = False)

        elif typ=='viewSection':
             data=list(section_master.objects.filter(delete_flag=False).values( 'secid','section_code','div_id_id__location_code','section_length','rly_id_id__location_code','via'))
             
             return JsonResponse(data, safe = False)
        
        elif typ=='viewRr':
              data=list(runningroom_master.objects.filter(delete_flag=False).values( 'rrid','rr_name','rr_code','stnshortcode','rly_id_id__location_code','div_id_id__location_code'))
              return JsonResponse(data, safe = False)
        


        return JsonResponse({"success":False}, status=400)

    # print('secStart: ',len(secStart))
    context={
        'zone': zone,
        'sourceStation':sourceStation,
        'destStation':destStation,
        'owning':owning,
        'trainCat':trainCat,
        'secStart':secStart,
        'secEnd':secEnd,
        'rStation':rStation,
        'vialist':vialist,
        
        # 'division':division,
    
    }
          
    return render(request, 'adminCards.html', context)


#     return render(request, 'adminCards.html')
def adminCards(request): 
    return render(request, 'adminCards.html')

# train functions

def zoneChangeTrain(request):
    if request.method=='GET':
        zone=request.GET.get('zone')
        # # print('zone', zone)
        division=list(railwayLocationMaster.objects.filter(location_type='DIV',parent_location_code=zone).distinct('location_code').values('location_code'))
        # # print('division', division)
        return JsonResponse(division, safe=False)
    return JsonResponse({"success:False"},status=400)

def viewTrain(request):
    # print('12345')
    try:
        # print('6789')
        if request.method=='GET':
            id1=request.GET.get('id')
            # print('id',id1)
            obj=list(train_master.objects.filter(tnid=id1).values('tnid','train_no','train_name','tn_category','stnsource_code','stndest_code','trainowngrly2','total_coach'))
            # print('obj',obj)
            return JsonResponse({'obj':obj}, safe=False)
    except:
        print('Error')
    return JsonResponse({'success':False},status=400)   

def saveTrain(request):
    # print('12345')
    try:
        # print('6789')
        if request.method=='GET':
            id1=request.GET.get('id')
            # print('id',id1)
            obj=list(train_master.objects.filter(tnid=id1).values('tnid','train_no','train_name','tn_category','stnsource_code','stndest_code','trainowngrly2','total_coach'))
            # print('obj',obj)
            return JsonResponse({'obj':obj}, safe=False)
    except:
        print('Error')
    return JsonResponse({'success':False},status=400)   

def updateTrain(request):
    try:
        if request.method=='GET':
            idd=request.GET.get('trainid')
            # print("id",idd)
            update_trainNumber=request.GET.get('trainNumber')
            update_trainName=request.GET.get('trainName')
            update_trainCat=request.GET.get('trainCat')
            update_src=request.GET.get('rc')
            update_dest=request.GET.get('dest')
            update_Owning=request.GET.get('Owning')
            update_coaches=request.GET.get('coaches')
            
           
            # print("update_trainNumber:",update_trainNumber)
            # obj=list(models.station_master.objects.filter(stnshortcode=idd).update(station_name=name))
            train_master.objects.filter(tnid=idd).update(train_no=update_trainNumber,train_name=update_trainName,tn_category=update_trainCat,stnsource_code=update_src,stndest_code=update_dest,trainowngrly2=update_Owning,total_coach=update_coaches)
            # # print('object update: ',obj)
            return JsonResponse({'success':True}, safe=False)
        return JsonResponse({'success':False},status=400)
    except:
        print('Error')

def delTrain(request):
    try:
        if request.method=='GET':
            trainid=request.GET.get('trainid')
            train_master.objects.filter(tnid=trainid).update(delete_flag=True)
            return JsonResponse({'success':True})
        return JsonResponse({'success':False},status=404)
    except:
        print('Error')
       

    # section functions

def sectionStartChange(request):
    if request.method=='GET':
        sectionStartCode=request.GET.get('secStart')
        # print('sectionStartCode', sectionStartCode)
        sectionEndCode=list(station_master.objects.filter(~Q(stnshortcode=sectionStartCode)).values('stnshortcode'))
        return JsonResponse(sectionEndCode, safe=False)
    return JsonResponse({"success:False"},status=400)

def getSectionCodeName(request):
    
    if request.method == 'GET':
    
        start=request.GET.get('sectionStartCode')
        end=request.GET.get('sectionEndCode')
        combinedName=[]
        names=list(station_master.objects.filter(Q(stnshortcode=start) | Q(stnshortcode=end)).values('station_name'))
        try:
            combinedName = str(names[0]['station_name']) + '-' + str(names[1]['station_name'])
        except:
            pass
        # print('names: ',combinedName)
        return JsonResponse(combinedName, safe=False)
    return JsonResponse({"success:False"},status=400)


def zoneChangeSection(request):
    if request.method=='GET':
        zone=request.GET.get('zone')
        # # print('zone', zone)
        division=list(railwayLocationMaster.objects.filter(location_type='DIV',parent_location_code=zone).distinct('location_code').values('location_code'))
        # # print('division', division)
        return JsonResponse(division, safe=False)
    return JsonResponse({"success:False"},status=400)



def viewSection(request):
    # # print('12345')
    try:
        # # print('6789')
        if request.method=='GET':
            id1=request.GET.get('id')
            # print('id',id1)
            obj=list(section_master.objects.filter(secid=id1).values('secid','section_code','secstart_code','secend_code','division_code','railway_code','section_length', 'via'))
          
            return JsonResponse({'obj':obj}, safe=False)
    except:
        print('Error')
    return JsonResponse({'success':False},status=400) 

def saveSection(request):
    # print('12345')
    try:
        # print('6789')
        if request.method=='GET':
            id1=request.GET.get('id')
            # print('id',id1)
            obj=list(section_master.objects.filter(secid=id1).values('secstart_code','secend_code','section_code','section_length', 'via'))
            # print('sectionobj',obj)
            return JsonResponse({'obj':obj}, safe=False)
    except:
        print('Error')
    return JsonResponse({'success':False},status=400) 


def updateSection(request):
    # try:
        if request.method=='GET':
            idd=request.GET.get('sectionid')
            # print("id",idd)
             
            update_sectionStartCode=request.GET.get('secStartCode')
            # print("sectionStartCode",update_sectionStartCode)
            update_sectionEndCode=request.GET.get('secEndCode')
            update_sectionCode=request.GET.get('secCode')
            update_sectionName=request.GET.get('secName')
            # update_route=request.GET.get('route')
            update_via=request.GET.get('via')
            update_length=request.GET.get('length')
            # update_divId=request.GET.get('divId')
         
            # print("update_sectionCode:",update_sectionStartCode)
            section_master.objects.filter(secid=idd).update(secstart_code_id=update_sectionStartCode,secend_code_id=update_sectionEndCode,section_code=update_sectionCode,section_name=update_sectionName,section_length=update_length,via=update_via)
            
            return JsonResponse({'success':True},safe=False)
        return JsonResponse({'success':False},status=400)
    # except:
    #     # print('Error')

def delSection(request):
    try:
        if request.method=='GET':
            trainid=request.GET.get('trainid')
            section_master.objects.filter(secid=trainid).update(delete_flag=True)
            return JsonResponse({'success':True})
        return JsonResponse({'success':False},status=404)
    except:
        print('Error')


#   runningRoom functions

def zoneChangeRr(request):
    if request.method=='GET':
        zone=request.GET.get('zone')
        # print('zone', zone)
        division=list(railwayLocationMaster.objects.filter(location_type='DIV',parent_location_code=zone).distinct('location_code').values('location_code'))
        # print('division', division)
        return JsonResponse(division, safe=False)
    return JsonResponse({"success:False"},status=400)

def viewRunningRoom(request):
    # print('12345')
    try:
        # print('6789')
        if request.method=='GET':
            id1=request.GET.get('idRr')
            # print('id',id1)
            obj=list(runningroom_master.objects.filter(rrid=id1).values('rrid','rr_name','rr_code','stnshortcode','rly_id_id__location_code','div_id_id__location_code'))
            # print('RunningRoomObj',obj)
            return JsonResponse({'obj':obj}, safe=False)
    except:
        print('Error')
    return JsonResponse({'success':False},status=400) 


def saveRr(request):
    # print('12345')
    try:
        # print('6789')
        if request.method=='GET':
            id1=request.GET.get('id')
            # print('id',id1)
            obj=list(runningroom_master.objects.filter(rrid=id1).values('rr_name','rr_code','stnshortcode'))
            # print('RunningRoomObj',obj)
            return JsonResponse({'obj':obj}, safe=False)
    except:
        print('Error')
    return JsonResponse({'success':False},status=400) 

def updateRr(request):
    try:
        if request.method=='GET':
            idd=request.GET.get('Rrid')
            # print("id",idd)
            update_Rrname=request.GET.get('Rrname')
            update_Rrcode=request.GET.get('Rrcode')
            update_stationCode=request.GET.get('stationcode')
            
         
            # print("update_Rrname:",update_Rrname)
          
            models.runningroom_master.objects.filter(rrid=idd).update(rr_name=update_Rrname,rr_code=update_Rrcode,stnshortcode=update_stationCode)
          
            return JsonResponse({'success':True}, safe=False)
        return JsonResponse({'success':False},status=400)
    except:
        print('Error')

def delRr(request):
    try:
        if request.method=='GET':
            Rrid=request.GET.get('Rrid')
            runningroom_master.objects.filter(rrid=Rrid).update(delete_flag=True)
            return JsonResponse({'success':True})
        return JsonResponse({'success':False},status=404)
    except:
        print('Error')


####################### VIEWS station report start ############################
def stationReport(request):
    l1=list(inspectiontype_master.objects.filter(parent_id=2).values('name'))
    finalList=[]
    stns=[]
    category=[]
    check='normal'
    if request.method=='GET':
        l1=[]
        l1=list(inspectiontype_master.objects.filter(parent_id=2).values('name'))
        check=request.GET.get('check')
        email=str(request.user)
 
        desig=Level_Desig.objects.filter(official_email_ID=email)[0]
        railways=railwayLocationMaster.objects.filter(rly_unit_code=desig.rly_unit_id)[0]
        # # print('railwaysssss',railways)

        if desig.d_level=='DRM':
            finalList=list(m2.einspection_details.objects.filter(Q(designation_id__rly_unit_id=railways,instypeid_id__name='Station', 
            instypeid_id__isnull=False,entityid__isnull=False) & ~Q(entityid='')).values('einspno','inspected_on','entityid','div_id_id_id','rly_id_id_id').order_by('entityid').distinct('entityid')) 
            insId=list(inspectiontype_master.objects.filter(parent_id=2).values('instypeid','name'))

        elif desig.d_level=='GM':
            finalList=list(m2.einspection_details.objects.filter(Q(designation_id__rly_unit_id__parent_location_code=railways.location_code,instypeid_id__name='Station',instypeid_id__isnull=False,entityid__isnull=False)| Q(designation_id__rly_unit_id=railways,instypeid_id__name='Station',instypeid_id__isnull=False,entityid__isnull=False) & ~Q(entityid='')).values('einspno','inspected_on','entityid','div_id_id_id','rly_id_id_id').order_by('entityid').distinct('entityid')) 
            insId=list(inspectiontype_master.objects.filter(parent_id=2).values('instypeid','name'))
            # # print('ishi',railways.location_code)


            ####PENDING FOR BO

        else:
            finalList=list(m2.einspection_details.objects.filter(Q( dept=desig.department, designation_id__rly_unit_id=railways,instypeid_id__name='Station',instypeid_id__isnull=False,entityid__isnull=False) & ~Q(entityid='')).values('einspno','inspected_on','entityid','div_id_id_id','rly_id_id_id').order_by('entityid').distinct('entityid')) 
            insId=list(inspectiontype_master.objects.filter(parent_id=2).values('instypeid','name'))

        stns = []
        category=set()
        for i in range(len(finalList)):
            try:
                station=station_master.objects.filter(stnshortcode=finalList[i]['entityid'])[0]
                station_name=station.station_name
                station_category=station.station_cat
            except:
                station_name=''
                station_category=''    
            finalList[i].update({'station_name':station_name,'station_category':station_category})
            if station_name or station_category:
                stns.append(station_name)
                category.add(station_category)    
        category=list(category)  

        # # print('category: ',category)  
    # # print('finalList1', finalList)

    if check=='reset':
        finalList=[]

    # # print(finalList)
    # # print('category: ',category)
    # # print('stations',stns)

    context={
        'header': l1,
        'finalList':finalList,
        'stns':stns,
        'category':category,
    }


    return render(request, 'stationReport.html',context)

def stationInspect(request):
    l1=list(inspectiontype_master.objects.filter(parent_id=2).values('name'))
    finalList=[]
    stns=[]
    category=[]
    check='normal'
    if request.method=='GET':
        fromdate=request.GET.get('fromdate')
        todate=request.GET.get('todate')
        stn=request.GET.get('stn')
        cat=request.GET.get('cat')
        # # print('fromdate',fromdate)
        check=request.GET.get('check')

        fromdate=datetime.strptime(fromdate,'%d-%m-%Y')
        todate=datetime.strptime(todate,'%d-%m-%Y')

        # # print('-----------------------------------------------------------------------------------------')
        stationCatCh=request.GET.getlist('stationCatCh[]')
        stationCh=request.GET.getlist('stationCh[]')

        
        data1=list(station_master.objects.filter(station_name__in=stationCh,  station_cat__in=stationCatCh).values('stnshortcode'))

        dataList=[]
        for i in range(len(data1)):
            dataList.append(data1[i]['stnshortcode'])

        
        # # print('-----------------------------------------------------------------------------------------')
        
        l1=[]
        l1=list(inspectiontype_master.objects.filter(parent_id=2).values('name'))        
        email=str(request.user)

 
        desig=Level_Desig.objects.filter(official_email_ID=email)[0]
        railways=railwayLocationMaster.objects.filter(rly_unit_code=desig.rly_unit_id)[0]
        # # print('railwaysssss',railways)

        if desig.d_level=='DRM':
            finalList=list(m2.einspection_details.objects.filter(Q(designation_id__rly_unit_id=railways,instypeid_id__name='Station',entityid__in=dataList, instypeid_id__isnull=False,entityid__isnull=False,inspected_on__date__range=[fromdate,todate]) & ~Q(entityid='')).values('einspno','inspected_on','entityid','div_id_id_id','rly_id_id_id').order_by('entityid').distinct('entityid')) 
            insId=list(inspectiontype_master.objects.filter(parent_id=2).values('instypeid','name'))

        elif desig.d_level=='GM':
            finalList=list(m2.einspection_details.objects.filter(Q(designation_id__rly_unit_id__parent_location_code=railways.location_code,instypeid_id__name='Station',entityid__in=dataList,instypeid_id__isnull=False,entityid__isnull=False,inspected_on__date__range=[fromdate,todate])| Q(designation_id__rly_unit_id=railways,instypeid_id__name='Station',entityid__in=dataList,instypeid_id__isnull=False,entityid__isnull=False,inspected_on__date__range=[fromdate,todate]) & ~Q(entityid='')).values('einspno','inspected_on','entityid','div_id_id_id','rly_id_id_id').order_by('entityid').distinct('entityid')) 
            insId=list(inspectiontype_master.objects.filter(parent_id=2).values('instypeid','name'))
            # # print('ishi',railways.location_code)


            ####PENDING FOR BO

        else:
            finalList=list(m2.einspection_details.objects.filter(Q( dept=desig.department, designation_id__rly_unit_id=railways,instypeid_id__name='Station',instypeid_id__isnull=False,entityid__in=dataList,entityid__isnull=False,inspected_on__date__range=[fromdate,todate]) & ~Q(entityid='')).values('einspno','inspected_on','entityid','div_id_id_id','rly_id_id_id').order_by('entityid').distinct('entityid')) 
            insId=list(inspectiontype_master.objects.filter(parent_id=2).values('instypeid','name'))

        stns=[]
        category=[]

        for i in range(len(finalList)):
            if desig.d_level=='DRM':
                count=m2.einspection_details.objects.filter(div_id_id_id=railways,instypeid_id__name='Station',entityid=finalList[i]['entityid'],instypeid_id__isnull=False).count()

            elif desig.d_level=='GM':
                count=m2.einspection_details.objects.filter(rly_id_id_id=railways,instypeid_id__name='Station',entityid=finalList[i]['entityid'],instypeid_id__isnull=False).count()

            else:
                count=m2.einspection_details.objects.filter(dept=desig.department,div_id_id_id=railways,instypeid_id__name='Station',entityid=finalList[i]['entityid'],instypeid_id__isnull=False).count()

                
            finalList[i].update({'count':count})
            station=station_master.objects.filter(stnshortcode=finalList[i]['entityid'])[0]
            total,average=0,0
            

            for j in range(len(insId)):
                if desig.d_level=='DRM':
                    count2=m2.einspection_item_detail.objects.filter(einspno_id__div_id_id_id=finalList[i]['div_id_id_id'],qncat_id=insId[j]['instypeid'],value_id_id__rscore=1,einspno_id__entityid=finalList[i]['entityid'],qid_id__isnull=False).values().count()

                elif desig.d_level=='GM':
                    count2=m2.einspection_item_detail.objects.filter(einspno_id__rly_id_id_id=finalList[i]['rly_id_id_id'],qncat_id=insId[j]['instypeid'],value_id_id__rscore=1,einspno_id__entityid=finalList[i]['entityid'],qid_id__isnull=False).values().count()

                else:
                    count2=m2.einspection_item_detail.objects.filter(einspno_id__dept=desig.department,einspno_id__div_id_id_id=finalList[i]['div_id_id_id'],qncat_id=insId[j]['instypeid'],value_id_id__rscore=1,einspno_id__entityid=finalList[i]['entityid'],qid_id__isnull=False).values().count()


                
                total+=int(count2)
                finalList[i].update({insId[j]['name']:count2})
            average=total/(len(insId))

            finalList[i].update({'total':total,'average':average,'station_name':station.station_name,'station_category':station.station_cat})
            stns.append(station.station_name)
            category.append(station.station_cat)

    # # print('finalist', finalList)  

    if check=='reset':
        todate=datetime.now()
        # todate=str(todate)[0:11]
        todate=todate.strftime('%Y-%m-%d')

        fromdate=datetime.now() - timedelta(days=7)
        # fromdate=str(fromdate)[0-11]
        fromdate=fromdate.strftime('%Y-%m-%d')

        
        stn=request.GET.get('stn')
        cat=request.GET.get('cat')
        # # print('fromdate',fromdate)

        # fromdate=datetime.strptime(fromdate,'%d-%m-%Y')
        # todate=datetime.strptime(todate,'%d-%m-%Y')
        # # print('todate',todate)
        # # print(stn,cat)
        # # print('-----------------------------------------------------------------------------------------')
        stationCatCh=request.GET.getlist('stationCatCh[]')
        stationCh=request.GET.getlist('stationCh[]')
        # # print('stationCh=request.GET',stationCh)
        # # print('stationCatCh=request.GET',stationCatCh)
        
        data1=list(station_master.objects.filter(station_name__in=stationCh,  station_cat__in=stationCatCh).values('stnshortcode'))
        dataList=[]
        for i in range(len(data1)):
            dataList.append(data1[i]['stnshortcode'])
        # # print('ABCDEF',dataList)
        
        # # print('-----------------------------------------------------------------------------------------')
        
        l1=[]
        l1=list(inspectiontype_master.objects.filter(parent_id=2).values('name'))        
        email=str(request.user)

 
        desig=Level_Desig.objects.filter(official_email_ID=email)[0]
        railways=railwayLocationMaster.objects.filter(rly_unit_code=desig.rly_unit_id)[0]
        # # print('railwaysssss',railways)

        if desig.d_level=='DRM':
            finalList=list(m2.einspection_details.objects.filter(Q(designation_id__rly_unit_id=railways,instypeid_id__name='Station', instypeid_id__isnull=False,entityid__isnull=False,inspected_on__date__range=[fromdate,todate]) & ~Q(entityid='')).values('einspno','inspected_on','entityid','div_id_id_id','rly_id_id_id').order_by('entityid').distinct('entityid')) 
            insId=list(inspectiontype_master.objects.filter(parent_id=2).values('instypeid','name'))

        elif desig.d_level=='GM':
            finalList=list(m2.einspection_details.objects.filter(Q(designation_id__rly_unit_id__parent_location_code=railways.location_code,instypeid_id__name='Station',instypeid_id__isnull=False,entityid__isnull=False,inspected_on__date__range=[fromdate,todate])| Q(designation_id__rly_unit_id=railways,instypeid_id__name='Station',instypeid_id__isnull=False,entityid__isnull=False,inspected_on__date__range=[fromdate,todate]) & ~Q(entityid='')).values('einspno','inspected_on','entityid','div_id_id_id','rly_id_id_id').order_by('entityid').distinct('entityid')) 
            insId=list(inspectiontype_master.objects.filter(parent_id=2).values('instypeid','name'))
            # # print('ishi',railways.location_code)


            ####PENDING FOR BO

        else:
            finalList=list(m2.einspection_details.objects.filter(Q( dept=desig.department, designation_id__rly_unit_id=railways,instypeid_id__name='Station',instypeid_id__isnull=False,entityid__isnull=False,inspected_on__date__range=[fromdate,todate]) & ~Q(entityid='')).values('einspno','inspected_on','entityid','div_id_id_id','rly_id_id_id').order_by('entityid').distinct('entityid')) 
            insId=list(inspectiontype_master.objects.filter(parent_id=2).values('instypeid','name'))

        stns=[]
        category=[]

        for i in range(len(finalList)):
            if desig.d_level=='DRM':
                count=m2.einspection_details.objects.filter(div_id_id_id=railways,instypeid_id__name='Station',entityid=finalList[i]['entityid'],instypeid_id__isnull=False).count()

            elif desig.d_level=='GM':
                count=m2.einspection_details.objects.filter(rly_id_id_id=railways,instypeid_id__name='Station',entityid=finalList[i]['entityid'],instypeid_id__isnull=False).count()

            else:
                count=m2.einspection_details.objects.filter(dept=desig.department,div_id_id_id=railways,instypeid_id__name='Station',entityid=finalList[i]['entityid'],instypeid_id__isnull=False).count()

                
            finalList[i].update({'count':count})
            try:
                station=station_master.objects.filter(stnshortcode=finalList[i]['entityid'])[0]
                station_name=station.station_name
                station_category=station.station_cat
            except:
                station_name=''
                station_category=''    
            total,average=0,0
            

            for j in range(len(insId)):
                if desig.d_level=='DRM':
                    count2=m2.einspection_item_detail.objects.filter(einspno_id__div_id_id_id=finalList[i]['div_id_id_id'],qncat_id=insId[j]['instypeid'],value_id_id__rscore=1,einspno_id__entityid=finalList[i]['entityid'],qid_id__isnull=False).values().count()

                elif desig.d_level=='GM':
                    count2=m2.einspection_item_detail.objects.filter(einspno_id__rly_id_id_id=finalList[i]['rly_id_id_id'],qncat_id=insId[j]['instypeid'],value_id_id__rscore=1,einspno_id__entityid=finalList[i]['entityid'],qid_id__isnull=False).values().count()

                else:
                    count2=m2.einspection_item_detail.objects.filter(einspno_id__dept=desig.department,einspno_id__div_id_id_id=finalList[i]['div_id_id_id'],qncat_id=insId[j]['instypeid'],value_id_id__rscore=1,einspno_id__entityid=finalList[i]['entityid'],qid_id__isnull=False).values().count()


                
                total+=int(count2)
                finalList[i].update({insId[j]['name']:count2})
            average=total/(len(insId))
            if station_name or station_category:
                finalList[i].update({'total':total,'average':average,'station_name':station.station_name,'station_category':station.station_cat})
                stns.append(station.station_name)
                category.append(station.station_cat)
        
    context={
        'header': l1,
        'finalList':finalList,
        'stns':stns,
        'category':category,
    }

    return JsonResponse(context,safe=False)


def stationReportPdf(request):
    fromdate=request.GET.get('fromdate')
    todate=request.GET.get('todate')
    
    fromdate=datetime.strptime(fromdate,'%d-%m-%Y')
    todate=datetime.strptime(todate,'%d-%m-%Y')
    stationCatCh=request.GET.getlist('stationCatCh[]')
    stationCh=request.GET.getlist('stationCh[]')
       
    l1=[]
    l1=list(inspectiontype_master.objects.filter(parent_id=2).values('name'))        
    email=str(request.user)

    desig=Level_Desig.objects.filter(official_email_ID=email)[0]
    railways=railwayLocationMaster.objects.filter(rly_unit_code=desig.rly_unit_id)[0]


    if desig.d_level=='DRM':
        finalList=list(m2.einspection_details.objects.filter(Q(designation_id__rly_unit_id=railways,instypeid_id__name='Station', instypeid_id__isnull=False,entityid__isnull=False,inspected_on__date__range=[fromdate,todate]) & ~Q(entityid='')).values('einspno','inspected_on','entityid','div_id_id_id','rly_id_id_id').order_by('entityid').distinct('entityid')) 
        # insId=list(inspectiontype_master.objects.filter(parent_id=2).values('instypeid','name'))

    elif desig.d_level=='GM':
        finalList=list(m2.einspection_details.objects.filter(Q(designation_id__rly_unit_id__parent_location_code=railways.location_code,instypeid_id__name='Station',instypeid_id__isnull=False,entityid__isnull=False,inspected_on__date__range=[fromdate,todate])| Q(designation_id__rly_unit_id=railways,instypeid_id__name='Station',instypeid_id__isnull=False,entityid__isnull=False,inspected_on__date__range=[fromdate,todate]) & ~Q(entityid='')).values('einspno','inspected_on','entityid','div_id_id_id','rly_id_id_id').order_by('entityid').distinct('entityid')) 
        # insId=list(inspectiontype_master.objects.filter(parent_id=2).values('instypeid','name'))
        # # print('ishi',railways.location_code)



    else:
        finalList=list(m2.einspection_details.objects.filter(Q( dept=desig.department, designation_id__rly_unit_id=railways,instypeid_id__name='Station',instypeid_id__isnull=False,entityid__isnull=False,inspected_on__date__range=[fromdate,todate]) & ~Q(entityid='')).values('einspno','inspected_on','entityid','div_id_id_id','rly_id_id_id').order_by('entityid').distinct('entityid')) 
        # insId=list(inspectiontype_master.objects.filter(parent_id=2).values('instypeid','name'))


    insId=list(inspectiontype_master.objects.filter(parent_id=2).values('instypeid','name'))
    
    for i in range(len(finalList)):
        
        if desig.d_level=='DRM':
            count=m2.einspection_details.objects.filter(div_id_id_id=railways,instypeid_id__name='Station',entityid=finalList[i]['entityid'],instypeid_id__isnull=False).count()

        elif desig.d_level=='GM':
            count=m2.einspection_details.objects.filter(rly_id_id_id=railways,instypeid_id__name='Station',entityid=finalList[i]['entityid'],instypeid_id__isnull=False).count()

        else:
            count=m2.einspection_details.objects.filter(dept=desig.department,div_id_id_id=railways,instypeid_id__name='Station',instypeid_id__isnull=False,entityid=finalList[i]['entityid']).count()   

        finalList[i].update({'count':count})
        try:
            station=station_master.objects.filter(stnshortcode=finalList[i]['entityid'])[0]
            station_category=station.station_cat
            station_name=station.station_name
        except:
            station_category=''
            station_name=''   
        total,average=0,0
        cntList=[]
        
        for j in range(len(insId)):
            if desig.d_level=='DRM':

                count2=m2.einspection_item_detail.objects.filter(einspno_id__div_id_id_id=finalList[i]['div_id_id_id'],qid_id__isnull=False,qncat_id=insId[j]['instypeid'],value_id_id__rscore=1,einspno_id__entityid=finalList[i]['entityid']).values().count()

            elif desig.d_level=='GM':
                count2=m2.einspection_item_detail.objects.filter(einspno_id__rly_id_id_id=finalList[i]['rly_id_id_id'],qncat_id=insId[j]['instypeid'],qid_id__isnull=False,value_id_id__rscore=1,einspno_id__entityid=finalList[i]['entityid']).values().count()

            else:
                count2=m2.einspection_item_detail.objects.filter(einspno_id__dept=desig.department,einspno_id__div_id_id_id=finalList[i]['div_id_id_id'],qncat_id=insId[j]['instypeid'],value_id_id__rscore=1,einspno_id__entityid=finalList[i]['entityid'],qid_id__isnull=False).values().count()
                

            total+=int(count2)
            cntList.append(count2)
        finalList[i].update({'header':cntList})
        average=total/(len(insId))

        finalList[i].update({'total':total,'average':average,'station_name':station_name,'station_category':station_category})
        
    # print('finalistttttt',finalList)

  
    context={
        'header': l1,
        'finalList':finalList,
        'fromdate':fromdate,
        'todate': todate,
    }

    submitbtn=request.GET.get('submitbtn')
    # # print(submitbtn)

    if submitbtn=='PDF':

        pdf=utils.render_to_pdf("stationReportPdf.html",context_dict=context)
        return pdf

    elif submitbtn=='excel':   

        import xlwt 
        from xlwt import Workbook
        response = HttpResponse(content_type='application/ms-excel')
        response['Content-Disposition'] = 'attachment; filename="station_inspection_Report.xls"'
        wb = Workbook() 
        sheet1 = wb.add_sheet('Sheet 1')
        style= xlwt.easyxf("font: bold on;borders: top_color black, bottom_color black, right_color black, left_color black,\
                        left thin, right thin, top thin, bottom thin;")
        style1= xlwt.easyxf("borders: top_color black, bottom_color black, right_color black, left_color black,\
                        left thin, right thin, top thin, bottom thin;")  

        heading1 = "STATION   REPORT"
        row=1
        sheet1.write_merge(row,row,7,9,heading1,style=style)
        from datetime import date
        currDate = datetime.now().strftime("%d-%m-%Y")
        row=3
                                
        sheet1.write_merge(row,row,1,5,'Date :'+currDate)
        row=5
        sheet1.write_merge(row,row,1,2,'Station Name',style=style)
        sheet1.write_merge(row,row,3,4,'Station Category',style=style)                                                 
        sheet1.write_merge(row,row,5,6,'Inspection Count',style=style)
        j=7
        for i in range(len(l1)):
            k=j+2
            sheet1.write_merge(row,row,j,k,l1[i]['name'],style=style)
            j=k+1
        sheet1.write_merge(row,row,j,j+1,'Total Score',style=style)
        sheet1.write_merge(row,row,j+2,j+3,'Average Score',style=style)
        
                                
        index=1
        row=row+1
        
        for i in range(len(finalList)):
            sheet1.write_merge(row,row,1,2,finalList[i]['station_name'],style=style1)
            sheet1.write_merge(row,row,3,4,finalList[i]['station_category'],style=style1)                        
            sheet1.write_merge(row,row,5,6,finalList[i]['count'],style=style1)
            k = 7
            for j in range(len(finalList[i]['header'])):
                k = k-j
                l = k+2
                sheet1.write_merge(row,row,j+k,j+l,finalList[i]['header'][j],style=style1)
                k = j+l+1
                
            sheet1.write_merge(row,row,k,k+1,finalList[i]['total'],style=style1)
            sheet1.write_merge(row,row,k+2,k+3,finalList[i]['average'],style=style1)
            row+=1                       
            index+=1
       
        wb.save(response)
    return response


########################## VIEWS SWASTI STATION REPORT END ##############
def viewquestions(request):
    if request.method == "GET":
        status = request.GET.get('data_id') 
        # Question 
        if status == '1':
            thead = ["sno","category name","entity related","edit","delete"]
            inspect=list(m2.questionare_master.objects.filter(delete_flag=False).values().order_by('qid'))
            for i in range(len(inspect)):
                lst=list(inspectiontype_master.objects.filter(instypeid=inspect[i]["instypeid_id_id"]).values('name','parent_id'))
                inspect_cat=list(inspectiontype_master.objects.filter(instypeid=lst[0]['parent_id']).values('name'))
                lst2=list(m2.choicetype_master.objects.filter(cid=inspect[i]["choicetype_id"]).values('input_type'))
                # print(lst,lst2,inspect_cat)
                if len(inspect_cat) == 0:
                    inspect_cat.append({'name': 'NA'})
                inspect[i].update({'name':lst[0]['name'], 'choicetype':lst2[0]['input_type'],'inspect_cat':inspect_cat[0]['name']})
        # Question Catregory
        elif status == '2':
            thead = ["sno","category name","entity related","edit","delete"]
            inspect=list(inspectiontype_master.objects.filter(~Q(parent_id='-1') & Q(delete_flag=False) & ~Q(parent_id=None)).values('name','desc','sub_category_id__sub_category','shortcode','entity_id__dmaster','inspection_image','instypeid','entity_id','parent_id','disable_flag').order_by('instypeid'))
           
            for i in range(len(inspect)):
                parent_cat=list(inspectiontype_master.objects.filter(instypeid=inspect[i]["parent_id"]).values('name'))
                if parent_cat:
                    parent_cat = parent_cat[0]['name']
                else:
                    parent_cat = None
                inspect[i]['parent_cat']=parent_cat
                if not inspect[i]['entity_id']:
                    entity = inspectiontype_master.objects.filter(instypeid=inspect[i]['parent_id']).values('entity_id__dmaster')[0]
                    inspect[i].update({'entity_id__dmaster':entity['entity_id__dmaster']})
        
        # Inspection Category
        elif status == '3':
            thead = ["sno","category name","category code","entity related","image","edit","delete"]
            inspect=list(inspectiontype_master.objects.filter(delete_flag=False,parent_id='-1').values('desc','name','shortcode','entity_id__dmaster','inspection_image','instypeid','disable_flag','version','concerned_dept_id__department_name').order_by('instypeid'))
        return JsonResponse({'status':status,'thead':thead,'inspect':inspect},safe=False)
    return JsonResponse({"success":False}, status=400)

########################################################### neilotpal ################
def analysis_report(request):
    ins_type = list(inspectiontype_master.objects.filter(parent_id="-1",delete_flag=False).values('shortcode'))
    context={
        'insp_type': ins_type
    }
    return render(request,"analysis_report.html",context)

def searchEInspectDetails(request):
    if request.method=='GET':
        fromdate=request.GET.get('fromdate')
        todate=request.GET.get('todate')
        insp=request.GET.get('insp')
        priority=request.GET.get('priority')
        report_type=request.GET.get('report_type')
        # print("Date",fromdate,todate)
        # print(insp)
        # print(priority)
        # print(report_type)
        fromdate = datetime.strptime(fromdate,'%d/%m/%Y')
        # print(fromdate)
        todate = datetime.strptime(todate,'%d/%m/%Y')
        # print(todate)
        email=str(request.user)
        # print(email)
        # rly = list(Level_Desig.objects.filter(official_email_ID=email).values('rly_unit_id'))
        rly = list(Level_Desig.objects.filter(official_email_ID=email).values('rly_unit_id'))
        ltype = list(railwayLocationMaster.objects.filter(rly_unit_code=rly[0]['rly_unit_id']).values('location_type','location_code'))
        # # print("ltype",ltype)
        if ltype[0]['location_type'] == 'ZR':
            rly1 = list(railwayLocationMaster.objects.filter(parent_location_code=ltype[0]['location_code'],location_type='DIV').values_list('rly_unit_code',flat=True))
        else:
            rly1 = list(Level_Desig.objects.filter(official_email_ID=email).values_list('rly_unit_id',flat=True))
        # # print("rlys",rly1)
        # print(rly)
        div= list(railwayLocationMaster.objects.filter(rly_unit_code=rly[0]['rly_unit_id']).values('location_code'))
        # print(div)
        desgn = list(Level_Desig.objects.filter(rly_unit_id__in=rly1).values('empno_id'))
        # print(desgn)

        ans={}
        qu=[]
        date_wise_frequency={}
        for i in range(len(desgn)):
            l1=list(m2.einsp_marked.objects.filter(created_on__date__range=[fromdate,todate],created_by=desgn[i]['empno_id']).values('created_on').distinct('created_on'))
            # print(l1)
            for j in range(len(l1)):
                date1 = l1[j]['created_on'].strftime('%d/%m/%y')
                l2=list(m2.einsp_marked.objects.filter(created_on__date=l1[j]['created_on'],created_by=desgn[i]['empno_id']).values('eitemid_id__qid_id','eitemid_id__qid_id__instypeid_id_id__shortcode').annotate(count=Count('eitemid_id__qid_id')))
                # # print(l2)
                ans.update({date1:l2})
                
            
            for a,b in ans.items():
                if len(b):
                    for l in range(len(b)):
                        if insp!="Select" or priority!="Select" or report_type!="Select":
                            if insp=="Select" and priority=="Select" and report_type!="Select":
                                qu += list(m2.questionare_master.objects.filter(Q(option1=report_type) | Q(option2=report_type),qid=b[l]['eitemid_id__qid_id']).values('qid','activity').distinct())
                            elif insp=="Select" and priority!="Select" and report_type=="Select":
                                qu += list(m2.questionare_master.objects.filter(qid=b[l]['eitemid_id__qid_id'],priority=priority).values('qid','activity').distinct())
                            elif insp=="Select" and priority!="Select" and report_type!="Select":
                                qu += list(m2.questionare_master.objects.filter(Q(option1=report_type) | Q(option2=report_type),qid=b[l]['eitemid_id__qid_id'],priority=priority).values('qid','activity').distinct())
                            elif insp!="Select" and priority=="Select" and report_type=="Select":
                                qu += list(m2.questionare_master.objects.filter(qid=b[l]['eitemid_id__qid_id'],instypeid_id_id__shortcode=insp).values('qid','activity').distinct())
                            elif insp!="Select" and priority=="Select" and report_type!="Select":
                                qu += list(m2.questionare_master.objects.filter(Q(option1=report_type) | Q(option2=report_type),qid=b[l]['eitemid_id__qid_id'],instypeid_id_id__shortcode=insp).values('qid','activity').distinct())
                            elif insp!="Select" and priority!="Select" and report_type=="Select":
                                qu += list(m2.questionare_master.objects.filter(qid=b[l]['eitemid_id__qid_id'],instypeid_id_id__shortcode=insp,priority=priority).values('qid','activity').distinct())
                            elif insp!="Select" and priority!="Select" and report_type!="Select":
                                qu += list(m2.questionare_master.objects.filter(Q(option1=report_type) | Q(option2=report_type),qid=b[l]['eitemid_id__qid_id'],instypeid_id_id__shortcode=insp,priority=priority).values('qid','activity').distinct())
                        else:
                            qu += list(m2.questionare_master.objects.filter(qid=b[l]['eitemid_id__qid_id']).values('qid','activity').distinct())

            
            for j in range(len(qu)):
                qidd = qu[j]['qid']
                x1={}
                for p,q in ans.items():
                    if len(q):
                        flag=False
                        for l in range(len(q)):
                            if q[l]['eitemid_id__qid_id']==qidd:
                                flag=True
                                x1.update({p:q[l]['count']})
                        if flag==False:
                            x1.update({p: 0})

        
                if len(x1):
                    date_wise_frequency.update({qu[j]['activity']:x1})
      
        
         
        context = {
            'ans': date_wise_frequency,
        }
    return JsonResponse(context,safe=False)

def AnalysisReportpdf(request):
    fromdate=request.GET.get('fromdate')
    todate=request.GET.get('todate')
    insp=request.GET.get('insp')
    priority=request.GET.get('priority')
    report_type=request.GET.get('report_type')
    # print("Date",fromdate,todate)
    # print(insp)
    # print(priority)
    # print(report_type)
    fromdate = datetime.strptime(fromdate,'%d/%m/%Y')
    # print(fromdate)
    todate = datetime.strptime(todate,'%d/%m/%Y')
    # print(todate)
    email=str(request.user)
    # print(email)
    rly = list(Level_Desig.objects.filter(official_email_ID=email).values('rly_unit_id'))
    ltype = list(railwayLocationMaster.objects.filter(rly_unit_code=rly[0]['rly_unit_id']).values('location_type','location_code'))
    # # print("ltype",ltype)
    if ltype[0]['location_type'] == 'ZR':
        rly1 = list(railwayLocationMaster.objects.filter(parent_location_code=ltype[0]['location_code'],location_type='DIV').values_list('rly_unit_code',flat=True))
    else:
        rly1 = list(Level_Desig.objects.filter(official_email_ID=email).values_list('rly_unit_id',flat=True))
    # # print("rlys",rly1)
    # print(rly)
    div= list(railwayLocationMaster.objects.filter(rly_unit_code=rly[0]['rly_unit_id']).values('location_code'))
    # print(div)
    desgn = list(Level_Desig.objects.filter(rly_unit_id__in=rly1).values('empno_id'))
    # print(desgn)

    ans={}
    qu=[]
    date_wise_frequency={}
    for i in range(len(desgn)):
        l1=list(m2.einsp_marked.objects.filter(created_on__date__range=[fromdate,todate],created_by=desgn[i]['empno_id']).values('created_on__date').distinct('created_on__date'))

        for j in range(len(l1)):
            date1 = l1[j]['created_on__date'].strftime('%d/%m/%y')
            l2=list(m2.einsp_marked.objects.filter(created_on__date=l1[j]['created_on__date'],created_by=desgn[i]['empno_id']).values('eitemid_id__qid_id','eitemid_id__qid_id__instypeid_id_id__shortcode').annotate(count=Count('eitemid_id__qid_id')))
            # print(l2)
            l1[j]['created_on__date']=date1
            ans.update({date1:l2})
            
        
        for a,b in ans.items():
            if len(b):
                for l in range(len(b)):
                    if insp!="Select" or priority!="Select" or report_type!="Select":
                        if insp=="Select" and priority=="Select" and report_type!="Select":
                            qu += list(m2.questionare_master.objects.filter(Q(option1=report_type) | Q(option2=report_type),qid=b[l]['eitemid_id__qid_id']).values('qid','activity').distinct())
                        elif insp=="Select" and priority!="Select" and report_type=="Select":
                            qu += list(m2.questionare_master.objects.filter(qid=b[l]['eitemid_id__qid_id'],priority=priority).values('qid','activity').distinct())
                        elif insp=="Select" and priority!="Select" and report_type!="Select":
                            qu += list(m2.questionare_master.objects.filter(Q(option1=report_type) | Q(option2=report_type),qid=b[l]['eitemid_id__qid_id'],priority=priority).values('qid','activity').distinct())
                        elif insp!="Select" and priority=="Select" and report_type=="Select":
                            qu += list(m2.questionare_master.objects.filter(qid=b[l]['eitemid_id__qid_id'],instypeid_id_id__shortcode=insp).values('qid','activity').distinct())
                        elif insp!="Select" and priority=="Select" and report_type!="Select":
                            qu += list(m2.questionare_master.objects.filter(Q(option1=report_type) | Q(option2=report_type),qid=b[l]['eitemid_id__qid_id'],instypeid_id_id__shortcode=insp).values('qid','activity').distinct())
                        elif insp!="Select" and priority!="Select" and report_type=="Select":
                            qu += list(m2.questionare_master.objects.filter(qid=b[l]['eitemid_id__qid_id'],instypeid_id_id__shortcode=insp,priority=priority).values('qid','activity').distinct())
                        elif insp!="Select" and priority!="Select" and report_type!="Select":
                            qu += list(m2.questionare_master.objects.filter(Q(option1=report_type) | Q(option2=report_type),qid=b[l]['eitemid_id__qid_id'],instypeid_id_id__shortcode=insp,priority=priority).values('qid','activity').distinct())
                    else:
                        qu += list(m2.questionare_master.objects.filter(qid=b[l]['eitemid_id__qid_id']).values('qid','activity').distinct())

        
        for j in range(len(qu)):
            qidd = qu[j]['qid']
            x1={}
            for p,q in ans.items():
                if len(q):
                    flag=False
                    for l in range(len(q)):
                        if q[l]['eitemid_id__qid_id']==qidd:
                            flag=True
                            x1.update({p:q[l]['count']})
                    if flag==False:
                        x1.update({p: 0})

    
            if len(x1):
                date_wise_frequency.update({qu[j]['activity']:x1})
    # print(date_wise_frequency,"daa")
    context = {
        'ans': date_wise_frequency,
        'date': l1,
    }
    submitbtn=request.GET.get('submitbtn')
    # print(submitbtn)
    if submitbtn=='PDF':
        pdf=utils.render_to_pdf('AnalysisReport_pdf.html',context)
        return pdf
    elif submitbtn=='excel':                 
        import xlwt 
        from xlwt import Workbook
        response = HttpResponse(content_type='application/ms-excel')
        response['Content-Disposition'] = 'attachment; filename="Analysis_Report.xls"'
        wb = Workbook() 
        sheet1 = wb.add_sheet('Sheet 1')
        style= xlwt.easyxf("font: bold on;borders: top_color black, bottom_color black, right_color black, left_color black,\
                        left thin, right thin, top thin, bottom thin;")
        style1= xlwt.easyxf("borders: top_color black, bottom_color black, right_color black, left_color black,\
                        left thin, right thin, top thin, bottom thin;")  
        heading1 = "Analysis Report"
        row=1
        sheet1.write_merge(row,row,6,8,heading1,style=style)
        from datetime import date
        currDate = datetime.now().strftime("%d-%m-%Y")
        row=3
                                
        sheet1.write_merge(row,row,0,4,'Date :'+currDate)
        row=4
        sheet1.write_merge(row,row,1,1,'SNo.',style=style)
        sheet1.write_merge(row,row,2,10,'Deficiency',style=style)                                                 
        for i in range(len(l1)):
            sheet1.write_merge(row,row,11+i,11+i,l1[i]['created_on__date'],style=style) 
        
                                
        index=1
        row=row+1
      
        s=0
        for i,j in date_wise_frequency.items() :
            s=s+1
            sheet1.write_merge(row,row,1,1,s,style=style1)
            sheet1.write_merge(row,row,2,10,i,style=style1)
            a=0
            for k,l in j.items():
                sheet1.write_merge(row,row,11+a,11+a,l,style=style1)
                a=a+1
            
                                       
            row+=1
           
            index+=1

        wb.save(response)
    return response

#######################################################################################################################################
# Supriya Changes(Report)
#######################################################################################################################################

def getdivisionDataOnLogin(email):
    desig=Level_Desig.objects.filter(official_email_ID=email)[0]
    railways=railwayLocationMaster.objects.filter(rly_unit_code=desig.rly_unit_id)[0]
    # # print(desig,railways)
    finalLsit=[]
    einspection=m2.einspection_details.objects.values('einspno','instypeid','inspected_on','inspection_title','designation','inspection_note_no','dept','startstn','endstn','entityid','lastmodified_by','created_by','created_on','lastmodified_on','section','start_date','end_date','rly_id_id','div_id_id','designation__designation').distinct('designation__designation')
    # # print('einspection: ',einspection)
    for i in range(len(einspection)):
        
        level=Level_Desig.objects.filter(empno_id=einspection[i]['created_by'],rly_unit_id=railways)
        if level:
            finalLsit.append(einspection[i])
    # # print('create',finalLsit)
    # # print('finalLsit:',len(finalLsit))
    return finalLsit


###############################SUPRIYA##########
def InspectionSummary_report(request):
    if request.method=='GET':
        email = request.user            
        desig=Level_Desig.objects.filter(official_email_ID=email)[0]
        railways=railwayLocationMaster.objects.filter(rly_unit_code=desig.rly_unit_id)[0]
        if desig.d_level == 'DRM':
            finalList=list(m2.einspection_details.objects.filter(designation_id__rly_unit_id=railways,instypeid_id__isnull=False).values('einspno','inspected_on','entityid','div_id_id_id','rly_id_id_id','designation__designation','designation_id').order_by('designation_id').distinct('designation_id')) 

        elif desig.d_level=='GM':
            finalList=list(m2.einspection_details.objects.filter(Q(designation_id__rly_unit_id__parent_location_code=railways.location_code,instypeid_id__isnull=False)| Q(designation_id__rly_unit_id=railways,instypeid_id__isnull=False) ).values('einspno','inspected_on','entityid','div_id_id_id','rly_id_id_id','designation__designation','designation_id').order_by('designation_id').distinct('designation_id'))
            # # print(finalList)    

        else:
            finalList=list(m2.einspection_details.objects.filter( dept=desig.department, designation_id__rly_unit_id=railways,instypeid_id__isnull=False).values('einspno','inspected_on','entityid','div_id_id_id','rly_id_id_id').order_by('designation_id').distinct('designation_id'))
        
        insid = list(inspectiontype_master.objects.filter(parent_id='-1',delete_flag=False).values().order_by('instypeid'))
        
        for i in range(len(finalList)):
            fCount=0
            for j in range(len(insid)):
                count = m2.einspection_details.objects.filter(Q(instypeid_id__name=insid[j]['name']) & Q(designation_id=finalList[i]['designation_id'])).count()
                # if desig.d_level == 'DRM':
                #     count = m2.einspection_details.objects.filter(Q(instypeid_id__name=insid[j]['name']) & Q(div_id_id_id=finalList[i]['div_id_id_id'],designation_id=finalList[i]['designation_id'])).count()
                # elif desig.d_level == 'GM':
                #     count = m2.einspection_details.objects.filter(Q(instypeid_id__name=insid[j]['name']) & Q(designation_id=finalList[i]['designation_id'])).count()
                finalList[i].update({insid[j]['name']:count})
                # # print('des',finalList[i]['designation_id'])
                # # print('asdf',finalList[i][insid[j]['name']])
                fCount+=count
            finalList[i].update({'total':fCount})

            # print('1', finalList)

        
        
        desig=[]
        for i in range (len(finalList)):
            desig.append(finalList[i]['designation__designation'])
        division=list(Level_Desig.objects.values('designation'))
        ### print("division ",desig)


        div=[]
        for i in range(len(division)):
            div.append(division[i]['designation'])


        
                
        # print('length',  len(finalList))   
        
        x=list(inspectiontype_master.objects.filter(parent_id=-1).values('shortcode').order_by('instypeid'))
        # ### print("xxxxx ",x)
        shortcode=[]
        for i in range(len(x)):
            shortcode.append(x[i]['shortcode'])
        # # print('finallistttttt', finallist)  
        context={
            'shortcode':shortcode,
            'finalList':finalList,
            'insid':insid,
            'desig':desig,
            'division':division,
            'div':div,
        }  
        return render(request,'InspectionSummary_report.html',context)

def showdetailsISR(request):
    if request.method=='GET':
        desig=Level_Desig.objects.filter(official_email_ID=request.user)[0]
        railways=railwayLocationMaster.objects.filter(rly_unit_code=desig.rly_unit_id)[0]
        if desig.d_level == 'DRM':
            finalList=list(m2.einspection_details.objects.filter(designation_id__rly_unit_id=railways,instypeid_id__isnull=False).values('einspno','inspected_on','entityid','div_id_id_id','rly_id_id_id','designation__designation','designation_id').order_by('designation_id').distinct('designation_id')) 

        elif desig.d_level=='GM':
            finalList=list(m2.einspection_details.objects.filter(Q(designation_id__rly_unit_id__parent_location_code=railways.location_code,instypeid_id__isnull=False)| Q(designation_id__rly_unit_id=railways,instypeid_id__isnull=False) ).values('einspno','inspected_on','entityid','div_id_id_id','rly_id_id_id','designation__designation','designation_id').order_by('designation_id').distinct('designation_id'))
            # # print(finalList)    

        else:
            finalList=list(m2.einspection_details.objects.filter( dept=desig.department, designation_id__rly_unit_id=railways,instypeid_id__isnull=False).values('einspno','inspected_on','entityid','div_id_id_id','rly_id_id_id').order_by('designation_id').distinct('designation_id'))
        
        insid = list(inspectiontype_master.objects.filter(parent_id='-1',delete_flag=False).values().order_by('instypeid'))
        
        for i in range(len(finalList)):
            fCount=0
            for j in range(len(insid)):
                count = m2.einspection_details.objects.filter(Q(instypeid_id__name=insid[j]['name']) & Q(designation_id=finalList[i]['designation_id'])).count()
             
                finalList[i].update({insid[j]['name']:count})
                # # print('des',finalList[i]['designation_id'])
                # # print('asdf',finalList[i][insid[j]['name']])
                fCount+=count
            finalList[i].update({'total':fCount})

            # print('1', finalList)
                
        # print('length',  len(finalList))   
        context={
            'finalList':finalList,
            'insid':insid,
        }
        return JsonResponse(context,safe=False)


def searchdetailsISR(request):
    if request.method=='GET':
        ### print('inside searchdetailsISR')
        ### print('#################################################################################################')
        date1 = request.GET.get('dateofInsp1')
        date2 = request.GET.get('dateofInsp2')
        check=request.GET.get('check')
        # print('check',check,date1,date2)
        # rlyorg= request.GET.get('rlyorg')
        # try:
        date3=datetime.strptime(date1,'%d/%m/%Y')
        date4=datetime.strptime(date2,'%d/%m/%Y')
        
        # except:
        #     date3=''
        #     date4=''
        # print('date3,date4',date3,date4)
        desig=Level_Desig.objects.filter(official_email_ID=request.user)[0]
        railways=railwayLocationMaster.objects.filter(rly_unit_code=desig.rly_unit_id)[0]
        # print(railways,'railways')
        if desig.d_level == 'DRM':
            finalList=list(m2.einspection_details.objects.filter(designation_id__rly_unit_id=railways,instypeid_id__isnull=False,created_on__date__range=[date3,date4]).values('einspno','inspected_on','entityid','div_id_id_id','rly_id_id_id','designation__designation','designation_id').order_by('designation_id').distinct('designation_id')) 

         
        elif desig.d_level=='GM':
            finalList=list(m2.einspection_details.objects.filter(Q(designation_id__rly_unit_id__parent_location_code=railways.location_code,instypeid_id__isnull=False)| Q(designation_id__rly_unit_id=railways,instypeid_id__isnull=False,created_on__date__range=[date3,date4]) ).values('einspno','inspected_on','entityid','div_id_id_id','rly_id_id_id','designation__designation','designation_id').order_by('designation_id').distinct('designation_id'))
            # # print(finalList)    

        else:
            finalList=list(m2.einspection_details.objects.filter( dept=desig.department, designation_id__rly_unit_id=railways,instypeid_id__isnull=False,created_on__date__range=[date3,date4]).values('einspno','inspected_on','entityid','div_id_id_id','rly_id_id_id').order_by('designation_id').distinct('designation_id'))
        # print('FINALLIST: ',finalList)
        insid = list(inspectiontype_master.objects.filter(parent_id='-1',delete_flag=False).values().order_by('instypeid'))
        
        for i in range(len(finalList)):
            fCount=0
            for j in range(len(insid)):
                count = m2.einspection_details.objects.filter(Q(instypeid_id__name=insid[j]['name']) & Q(designation_id=finalList[i]['designation_id'],created_on__date__range=[date3,date4])).count()
         
                finalList[i].update({insid[j]['name']:count})
                # # print('des',finalList[i]['designation_id'])
                # # print('asdf',finalList[i][insid[j]['name']])
                fCount+=count
            finalList[i].update({'total':fCount})
            
                
        # print('sadaw',finalList)
        # print('dcbsjbk')
        # ### print(date1.strptime('%d-%m-%Y'))
        ### print(date2)
        

        shortcode=[]
        if check=='reset':
            date1=datetime.now()

            date1=date1.strftime('%Y-%m-%d')

            date2=datetime.now() - timedelta(days=7)
            # fromdate=str(fromdate)[0-11]
            date2=date2.strftime('%Y-%m-%d')

            # print(date1,date2,': fromdate,todate')
            # print('check1234',check)
            email = request.user            
            desig=Level_Desig.objects.filter(official_email_ID=request.user)[0]
            railways=railwayLocationMaster.objects.filter(rly_unit_code=desig.rly_unit_id)[0]
            # print(railways,'railways')
            if desig.d_level == 'DRM':
                finalList=list(m2.einspection_details.objects.filter(designation_id__rly_unit_id=railways,instypeid_id__isnull=False,created_on__date__range=[date1,date2]).values('einspno','inspected_on','entityid','div_id_id_id','rly_id_id_id','designation__designation','designation_id').order_by('designation_id').distinct('designation_id')) 

            
            elif desig.d_level=='GM':
                finalList=list(m2.einspection_details.objects.filter(Q(designation_id__rly_unit_id__parent_location_code=railways.location_code,instypeid_id__isnull=False)| Q(designation_id__rly_unit_id=railways,instypeid_id__isnull=False,created_on__date__range=[date1,date2]) ).values('einspno','inspected_on','entityid','div_id_id_id','rly_id_id_id','designation__designation','designation_id').order_by('designation_id').distinct('designation_id'))
                # # print(finalList)    

            else:
                finalList=list(m2.einspection_details.objects.filter( dept=desig.department, designation_id__rly_unit_id=railways,instypeid_id__isnull=False,created_on__date__range=[date1,date2]).values('einspno','inspected_on','entityid','div_id_id_id','rly_id_id_id').order_by('designation_id').distinct('designation_id'))
            # print('FINALLIST: ',finalList)
            insid = list(inspectiontype_master.objects.filter(parent_id='-1',delete_flag=False).values().order_by('instypeid'))
            
            for i in range(len(finalList)):
                fCount=0
                for j in range(len(insid)):
                    count = m2.einspection_details.objects.filter(Q(instypeid_id__name=insid[j]['name']) & Q(designation_id=finalList[i]['designation_id'],created_on__date__range=[date3,date4])).count()
            
                    finalList[i].update({insid[j]['name']:count})
                    # # print('des',finalList[i]['designation_id'])
                    # # print('asdf',finalList[i][insid[j]['name']])
                    fCount+=count
                finalList[i].update({'total':fCount})
                
                    
            # print('sadaw',finalList)

            
            
            desig=[]
            for i in range (len(finalList)):
                desig.append(finalList[i]['designation__designation'])
            division=list(Level_Desig.objects.values('designation'))
            # # print("division ",desig)


            div=[]
            for i in range(len(division)):
                div.append(division[i]['designation'])


            
                    
            # print('length',  len(finalList))   
            
            x=list(inspectiontype_master.objects.filter(parent_id=-1).values('shortcode').order_by('instypeid'))
            # ### print("xxxxx ",x)
            
            for i in range(len(x)):
                shortcode.append(x[i]['shortcode'])
          
        context={
            'finalList':finalList,
            'insid':insid,
            'shortcode':shortcode,
            
        }
       
        
        ### print('rrrrrrrrrrr ', rlyorg)
        return JsonResponse(context,safe=False)
    # return JsonResponse({"success":False},status=400)





def inspectionsummaryReportPdf(request):
    
        
        fromdate = request.GET.get('fromdate')
        # print("FROJRTGHOR0", fromdate)
        todate = request.GET.get('todate')

        fromdate=datetime.strptime(fromdate,'%d/%m/%Y')
        todate=datetime.strptime(todate,'%d/%m/%Y')
        
        from datetime import date

        # currDate = datetime.now().strftime("%d-%m-%Y")
        currDate = datetime.today()
      
        desig=Level_Desig.objects.filter(official_email_ID=request.user)[0]
        railways=railwayLocationMaster.objects.filter(rly_unit_code=desig.rly_unit_id)[0]
        # print(railways,'railways')
        if desig.d_level == 'DRM':
            finalList=list(m2.einspection_details.objects.filter(designation_id__rly_unit_id=railways,instypeid_id__isnull=False,created_on__date__range=[fromdate,todate]).values('einspno','inspected_on','entityid','div_id_id_id','rly_id_id_id','designation__designation','designation_id').order_by('designation_id').distinct('designation_id')) 

         
        elif desig.d_level=='GM':
            finalList=list(m2.einspection_details.objects.filter(Q(designation_id__rly_unit_id__parent_location_code=railways.location_code,instypeid_id__isnull=False)| Q(designation_id__rly_unit_id=railways,instypeid_id__isnull=False,created_on__date__range=[fromdate,todate]) ).values('einspno','inspected_on','entityid','div_id_id_id','rly_id_id_id','designation__designation','designation_id').order_by('designation_id').distinct('designation_id'))
            # # print(finalList)    

        else:
            finalList=list(m2.einspection_details.objects.filter( dept=desig.department, designation_id__rly_unit_id=railways,instypeid_id__isnull=False,created_on__date__range=[fromdate,todate]).values('einspno','inspected_on','entityid','div_id_id_id','rly_id_id_id').order_by('designation_id').distinct('designation_id'))
        # print('FINALLIST: ',finalList)
        insid = list(inspectiontype_master.objects.filter(parent_id='-1',delete_flag=False).values().order_by('instypeid'))
        shortcode=[]
        for i in range(len(finalList)):
                    fCount=0
                    cntList=[]
                    for j in range(len(insid)):
                        count = m2.einspection_details.objects.filter(Q(instypeid_id__name=insid[j]['name']) & Q(designation_id=finalList[i]['designation_id'],created_on__date__range=[fromdate,todate])).count()
                        cntList.append(count)

                        finalList[i].update({insid[j]['name']:count})
                    
                        fCount+=count
                    finalList[i].update({'total':fCount})
                    finalList[i].update({'header':cntList})
                    x=list(inspectiontype_master.objects.filter(parent_id=-1).values('shortcode').order_by('instypeid'))
                
                    
                    for i in range(len(x)):
                        shortcode.append(x[i]['shortcode'])
                    
        for i in range(len(insid)):
            pass    
            

        context={
            'finalList':finalList,
            'insid':insid,
            'fromdate':fromdate,
            'todate':todate,
            'currDate':currDate,
            'shortcode':shortcode,
            
        }



        submitbtn=request.GET.get('submitbtn')
        # print(submitbtn)

        if submitbtn=='PDF':

            pdf=utils.render_to_pdf('inspectionsummaryReportPdf.html',context)
            return pdf

        elif submitbtn=='excel':   

            import xlwt 
            from xlwt import Workbook
            response = HttpResponse(content_type='application/ms-excel')
            response['Content-Disposition'] = 'attachment; filename="Inspection_Summary_Report.xls"'
            wb = Workbook() 
            sheet1 = wb.add_sheet('Sheet 1')
            style= xlwt.easyxf("font: bold on;borders: top_color black, bottom_color black, right_color black, left_color black,\
                            left thin, right thin, top thin, bottom thin;")
            style1= xlwt.easyxf("borders: top_color black, bottom_color black, right_color black, left_color black,\
                            left thin, right thin, top thin, bottom thin;")  

            heading1 = "INSPECTION SUMMARY REPORT"
            row=1
            sheet1.write_merge(row,row,6,13,heading1,style=style)
            from datetime import date
            currDate = datetime.now().strftime("%d-%m-%Y")
            row=3
                                    
            sheet1.write_merge(row,row,1,5,'Date :'+currDate)
            row=5
            sheet1.write_merge(row,row,1,2,'Designation',style=style)

           
            j=3
            for i in range(len(x)):
                 k=j+2
                 sheet1.write_merge(row,row,j,k,x[i]['shortcode'],style=style)
                 j=k+1


            sheet1.write_merge(row,row,j,j+1,'Total Score',style=style)
            # sheet1.write_merge(row,row,j+2,j+3,'Average Score',style=style)

                                    
            index=1
            row=row+1

        for i in range(len(finalList)):
            sheet1.write_merge(row,row,1,2,finalList[i]['designation__designation'],style=style1)
        #     sheet1.write_merge(row,row,3,4,finalList[i]['station_category'],style=style1)                        
        #     sheet1.write_merge(row,row,5,6,finalList[i]['count'],style=style1)
            k = 3
            for j in range(len(finalList[i]['header'])):
                k = k-j
                l = k+2
                sheet1.write_merge(row,row,j+k,j+l,finalList[i]['header'][j],style=style1)
                k = j+l+1
                
        #     sheet1.write_merge(row,row,k,k+1,finalList[i]['total'],style=style1)
            sheet1.write_merge(row,row,k,k+1,finalList[i]['total'],style=style1)
            row+=1                       
            index+=1

        wb.save(response)
        return response




###################################### PARUL/SWASTI/ISHIKA ###################################
def OBHSreport(request):
    # view--->view_train_via_div_rly_split ---->passing_rly, passing_div
    email=str(request.user)
    userDetails=Level_Desig.objects.filter(official_email_ID=email)[0]
        
    # print('userDetails: ',userDetails)
    
    parent_desig_code=userDetails.parent_desig_code
    desig=userDetails.designation
    # x=desig.index('/')
    # rl=desig[x+1:]
    # # print('INDEX:',rl)
    rly=userDetails.rly_unit_id
    rlycheck=list(railwayLocationMaster.objects.filter(rly_unit_code=rly).values('location_type'))
    # print(rlycheck)
    rlycode=railwayLocationMaster.objects.filter(rly_unit_code=rly).all()
    # print(rlycode)
    # if(rlycheck[0]['location_type']=='ZR'):
    #    tr=list(train_master.objects.filter(passing_rly=rl).all())
    # # elif(rlycheck=='DIV'):
    # elif(rlycheck[0]['location_type']=='DIV'):
    #    tr=list(train_master.objects.filter(passing_division=rl).all())   
    # else:
    tr=list(train_master.objects.filter().all())   
    context={
        'tr':tr,
    }
    return render(request,'OBHS_report.html',context)


def searchOBHS(request):
    if request.method=='GET':
        email=str(request.user)
        userDetails=Level_Desig.objects.filter(official_email_ID=email)[0]
        
        # # print('userDetails: ',userDetails)
        department=userDetails.department
        parent_desig_code=userDetails.parent_desig_code
        rly=userDetails.rly_unit_id
        
        # # print('parent_desig_code',parent_desig_code)
        # # print('rly',rly)
        rlycheck=list(railwayLocationMaster.objects.filter(rly_unit_code=rly).values())
        

        # # print('department: ',department,type(department))
        # # print('parent_desig_code: ',parent_desig_code,type(parent_desig_code))
        fromdate = request.GET.get('fromdate')
        todate = request.GET.get('todate')
        train=request.GET.get('tr')
        # # print(fromdate)
        # # print(todate)
        # # print(train)
        # # print(rly)
       
        value_id=list((m2.radio_options).objects.values('rid'))
        ob=list(inspectiontype_master.objects.filter(shortcode='OB',parent_id=-1).values('instypeid').distinct())
        genC=list(inspectiontype_master.objects.filter(parent_id=ob[0]['instypeid'],name='General Commercial').values('instypeid'))
        genM=list(inspectiontype_master.objects.filter(parent_id=ob[0]['instypeid'],name='General Mechanical').values('instypeid'))
        bo=list(m2.questionare_master.objects.filter(Q(instypeid_id_id=genM[0]['instypeid'])|Q(instypeid_id_id=genC[0]['instypeid'],choicetype_id=2)).values().order_by('qid'))
        
       
        # # print('bo: ',bo)
        
        fromdate = datetime.strptime(fromdate,'%d-%m-%Y')
        todate = datetime.strptime(todate,'%d-%m-%Y')
        # # print(fromdate)
        # # print(todate)

        insp_date=list(m2.einspection_details.objects.filter(entityid=train,entitydetails='Train',inspected_on__date__range=[fromdate,todate]).values('inspected_on').distinct('inspected_on'))
        # # print(insp_date)
       

        answer = {}
        qu={}
        datewise_freq={}
        ans={}
        for i in range(len(insp_date)):
            date1 = insp_date[i]['inspected_on'].strftime('%d-%m-%Y')
            details=list(m2.einspection_details.objects.filter(entityid=train,entitydetails='Train',inspected_on=insp_date[i]['inspected_on']).values('einspno'))
            
            l1=[]
            for j in range(len(details)):
                l1 += list(m2.einspection_item_detail.objects.filter(einspno_id=details[j]['einspno'],value_id_id__rscore=1).values('qid_id'))
            
            freq={}
            for item in l1:
                qid=item['qid_id']
                if (qid in freq):
                    freq[qid] += 1
                else:
                    freq[qid] = 1
            datewise_freq.update({date1:freq})
        # # print('datewise_freq',datewise_freq)
        ans={}
        for j in range(len(bo)):
            qidd = bo[j]['qid']
            x1={}
            for p,q in datewise_freq.items():
                flag=False
                for a,b in q.items():
                    if a==qidd:
                        flag=True
                        x1.update({p:b})
                       
                if flag==False:
                    x1.update({p:0})

            # # print(x1)
            if len(x1):
                ans.update({bo[j]['activity']:x1})
        # # print('ans',ans)
        # # print(len(bo))
      
        context={
            'ans':ans,    
        }
    return JsonResponse(context,safe=False)     



###################################### Train Review Report ###################################
def Train_inspection(request):
    train=[]
    email = request.user
    check='normal'
    rlycode = list(Level_Desig.objects.filter(official_email_ID=email).values('rly_unit_id','designation_code','rly_unit_id__location_type'))
    divcode= list(railwayLocationMaster.objects.filter(rly_unit_code=rlycode[0]['rly_unit_id']).values('location_code','parent_location_code','location_type'))
    
    if rlycode[0]['rly_unit_id__location_type']=='DIV':
        
        train = list(train_master.objects.filter(Q(passing_division__contains=divcode[0]['location_code'])).values('tn_category').distinct('tn_category'))
        train1=list(train_master.objects.values('tn_category').distinct())
    elif rlycode[0]['rly_unit_id__location_type']=='ZR':
        
        train = list(train_master.objects.filter(Q(passing_rly__contains=divcode[0]['location_code'])).values('tn_category').distinct('tn_category'))
        train1=list(train_master.objects.values('tn_category').distinct())
    else:
        train = list(train_master.objects.values('tn_category',).distinct('tn_category'))
        train1=list(train_master.objects.values('tn_category').distinct())

    # for i in range(len(train1)):
        
    mytrain=[]
    for i in range(len(train)):
        mytrain.append(train[i]['tn_category'])

    # # print("*****train",mytrain)
    context={
        'train':train,
        'mytrain':mytrain,

    }
    return render(request,'Train_inspection.html',context)
    

def showTrain(request):                                                                                                                                        
    if request.method=='GET' and request.is_ajax():
        email = request.user
        rlycode = list(Level_Desig.objects.filter(official_email_ID=email).values('rly_unit_id','designation_code','rly_unit_id__location_type'))
        divcode= list(railwayLocationMaster.objects.filter(rly_unit_code=rlycode[0]['rly_unit_id']).values('location_code'))

        # print(rlycode)
        details = {}
        # l1 = list(train_master.objects.filter(div_id_id_id=rlycode[0]['rly_unit_id']).values('tn_category',).distinct('tn_category'))
        l1 = list(train_master.objects.filter(Q(passing_division__contains=divcode[0]['location_code'])).values('tn_category').distinct('tn_category'))

        mytrain=[]
        for i in range(len(l1)):
            mytrain.append(l1[i]['tn_category'])
        for i in range(len(l1)):
            ql2 = list(train_master.objects.filter(Q(passing_division__contains=divcode[0]['location_code'])&Q(tn_category=l1[i]['tn_category'])).values('train_no','train_name'))
            # l3 = []
            a=0
            mx = 0
            mn = len(l1)
            mxins = ""
            mnins = ""
            for j in range(len(l2)):
                if rlycode[0]['rly_unit_id__location_type']=='DIV':
                    l3 = list(m2.einspection_details.objects.filter(Q(div_id_id_id=rlycode[0]['rly_unit_id']) & Q(entityid=l2[j]['train_no'])).values('einspno'))
                # # print("l3",l3)
                elif rlycode[0]['rly_unit_id__location_type']=='ZR':
                    l3 = list(m2.einspection_details.objects.filter(Q(rly_id_id_id=rlycode[0]['rly_unit_id']) & Q(entityid=l2[j]['train_no'])).values('einspno'))
                else:
                    l3 = list(m2.einspection_details.objects.filter(Q(entityid=l2[j]['train_no']) )).values('einspno')
                    # print("l3  ",l3)
                    if len(l3) and len(l3) > mx:
                        mx=len(l3)
                        mxins = list(train_master.objects.filter(train_no=l2[j]['train_no']).values('train_name'))[0]['train_name']
                    if len(l3) and len(l3) < mn:
                        mn = len(l3)
                        mnins = list(train_master.objects.filter(train_no=l2[j]['train_no']).values('train_name'))[0]['train_name']
                    # # print("l3",l3)
                    if len(l3):
                        a=a+len(l3)
                # # print("count",a)
                if mn==len(l1)+1:
                    mn1=""
                else:
                    mn1="("+str(mn)+")"
                if mx==0:
                    mx1=""
                else:
                    mx1="("+str(mx)+")"
                details.update({l1[i]['tn_category']: {'cnt':len(l2),'tot':a, 'mxins':mxins, 'mx':mx1, 'mnins': mnins, 'mn': mn1,'mytrain':mytrain}})
            # print(details)
        return JsonResponse({'details':details},safe=False)


def searchTrain(request):
    check='normal'
    if request.method=='GET' and request.is_ajax():
        email = request.user
        rlycode = list(Level_Desig.objects.filter(official_email_ID=email).values('rly_unit_id','designation_code','rly_unit_id__location_type'))
        divcode= list(railwayLocationMaster.objects.filter(rly_unit_code=rlycode[0]['rly_unit_id']).values('location_code','parent_location_code','location_type'))
        # # print("rlycode",rlycode,divcode)
        details={}
        fromdate = request.GET.get('fromdate')
        todate = request.GET.get('todate')
        train=request.GET.get('train')
        check=request.GET.get('check')
        if fromdate:
            fromdate=datetime.strptime(fromdate, "%d/%m/%Y")
        if todate:
            todate=datetime.strptime(todate, "%d/%m/%Y")
        

        if(train!="Select"):
            if rlycode[0]['rly_unit_id__location_type']=='DIV':
                l1 = list(train_master.objects.filter(Q(tn_category=train) & Q(passing_division__contains=divcode[0]['location_code'])).values('tn_category').distinct('tn_category'))
                # # print("div66666",l1)


            elif rlycode[0]['rly_unit_id__location_type']=='ZR':
                l1 = list(train_master.objects.filter(Q(tn_category=train) & Q(passing_rly__contains=divcode[0]['location_code'])).values('tn_category').distinct('tn_category'))
                # # print("rly6666",l1)

            else:
                l1 = list(train_master.objects.filter(Q(tn_category=train)).values('tn_category').distinct('tn_category'))
        else:
            if rlycode[0]['rly_unit_id__location_type']=='DIV':

                l1 = list(train_master.objects.filter(Q(passing_division__contains=divcode[0]['location_code'])).values('tn_category').distinct('tn_category'))
                # # print("div66666",l1)

            elif rlycode[0]['rly_unit_id__location_type']=='ZR':
                l1 = list(train_master.objects.filter(Q(passing_rly__contains=divcode[0]['location_code'])).values('tn_category').distinct('tn_category'))
                # # print("rly6666",divcode[0]['location_code'])

            else:
                l1 = list(train_master.objects.filter(Q(tn_category=train)).values('tn_category').distinct('tn_category'))


            # # print("l1",l1)
        mytrain=[]
        for i in range(len(l1)):
            mytrain.append(l1[i]['tn_category'])
        for i in range(len(l1)):
            if (train!="Select"):
                if rlycode[0]['rly_unit_id__location_type']=='DIV':
                # l2 = list(train_master.objects.filter(Q(tn_category=train) & Q(div_id_id_id=rlycode[0]['rly_unit_id']) & Q(tn_category=l1[i]['tn_category'])).values('train_no','train_name'))
                    l2 = list(train_master.objects.filter(Q(tn_category=train) & Q(passing_division__contains=divcode[0]['location_code']) & Q(tn_category=l1[i]['tn_category'])).values('train_no','train_name'))
                elif rlycode[0]['rly_unit_id__location_type']=='ZR':
                    l2 = list(train_master.objects.filter(Q(tn_category=train) & Q(passing_rly__contains=divcode[0]['location_code']) & Q(tn_category=l1[i]['tn_category'])).values('train_no','train_name'))
                else:
                    l2 = list(train_master.objects.filter(Q(tn_category=train)) & Q(tn_category=l1[i]['tn_category'])).values('train_no','train_name')


            else:
                if rlycode[0]['rly_unit_id__location_type']=='DIV':
                # l2 = list(train_master.objects.filter(Q(div_id_id_id=rlycode[0]['rly_unit_id'])&Q(tn_category=l1[i]['tn_category'])).values('train_no','train_name'))
                   l2 = list(train_master.objects.filter(Q(passing_division__contains=divcode[0]['location_code'])&Q(tn_category=l1[i]['tn_category'])).values('train_no','train_name'))
                elif rlycode[0]['rly_unit_id__location_type']=='ZR':
                    l2 = list(train_master.objects.filter(Q(passing_rly__contains=divcode[0]['location_code'])&Q(tn_category=l1[i]['tn_category'])).values('train_no','train_name'))
                else:
                    l2 = list(train_master.objects.filter(Q(passing_division__contains=divcode[0]['location_code'])&Q(tn_category=l1[i]['tn_category'])).values('train_no','train_name'))


            # # print("l2",l2)
            # # print("rlycode[0]['rly_unit_id__location_type']",rlycode[0]['rly_unit_id__location_type'])

            a=0
            mx = 0
            mn = 1000
            # # print('mn', mn)
            mxins = ""                                             
            mnins = ""
            mxinfo=[]
            mninfo=[]
            for j in range(len(l2)):
                if fromdate and todate:
                    if rlycode[0]['rly_unit_id__location_type']=='DIV':
                    # # print('hello1')
                        l3 = list(m2.einspection_details.objects.filter(Q(inspected_on__date__range=[fromdate,todate]) & Q(entityid=l2[j]['train_no']) & Q(div_id_id_id=rlycode[0]['rly_unit_id'])).values('einspno','inspected_on'))
                    # # print("l3",l3)
                    elif rlycode[0]['rly_unit_id__location_type']=='ZR':
                        # # print("rlycode[0]['rly_unit_id']",rlycode[0]['rly_unit_id'])
                        l3 = list(m2.einspection_details.objects.filter(Q(inspected_on__date__range=[fromdate,todate]) & Q(entityid=l2[j]['train_no']) & Q(rly_id_id_id=rlycode[0]['rly_unit_id']) ).values('einspno','inspected_on'))
                        
                    else:
                        l3 = list(m2.einspection_details.objects.filter(Q(inspected_on__date__range=[fromdate,todate]) & Q(entityid=l2[j]['train_no']) ).values('einspno','inspected_on'))

                    
                else:
                    if rlycode[0]['rly_unit_id__location_type']=='DIV':
                        l3 = list(m2.einspection_details.objects.filter(Q(div_id_id_id=rlycode[0]['rly_unit_id']) & Q(entityid=l2[j]['train_no']) ).values('einspno'))
                    # # print("l3",l3)
                    elif rlycode[0]['rly_unit_id__location_type']=='ZR':
                        l3 = list(m2.einspection_details.objects.filter(Q(rly_id_id_id=rlycode[0]['rly_unit_id']) & Q(entityid=l2[j]['train_no']) ).values('einspno'))
                        
                    else:
                        l3 = list(m2.einspection_details.objects.filter(Q(entityid=l2[j]['train_no']) ).values('einspno'))


                if len(l3) and len(l3) >= mx:
                    mx=len(l3)
                    mxins = list(train_master.objects.filter(train_no=l2[j]['train_no']).values('train_no'))[0]['train_no']
                    # # print("mxins",mxins)
                    mxinfo=list(train_master.objects.filter(train_no=mxins).values('train_name','stnsource_code_id','stndest_code_id'))
                    # # print("mxinfo",mxinfo)
                    # # print("l33333",l3)
                if len(l3) and len(l3) <= mn:
                    mn = len(l3)
                    mnins = list(train_master.objects.filter(train_no=l2[j]['train_no']).values('train_no'))[0]['train_no']
                    mninfo=list(train_master.objects.filter(train_no=mnins).values('train_name','stnsource_code_id','stndest_code_id'))
                    # # print("mninfo",mninfo)
                    # # print("l3",l3)2
            # # print("l3",l3)
                if len(l3):
                    a=a+len(l3)
            # # print("a",a)

            # # print("count",a)
            strmxinfo=''
            for ii in mxinfo:
                strmxinfo=ii['train_name']+', '+ii['stnsource_code_id']+', '+ii['stndest_code_id']
            
            strmninfo=''
            for ii in mninfo:
                strmninfo=ii['train_name']+', '+ii['stnsource_code_id']+', '+ii['stndest_code_id']
            
            mn1="("+str(mn)+")"
            if mx == 0:
                mn1=""
                mx1=""
            else:
                mx1="("+str(mx)+")"

            if mx==a:
                mn1=mx1
                mnins=mxins
            details.update({l1[i]['tn_category']: {'cnt':len(l2),'tot':a, 'mxins':mxins, 'mx':mx1, 'mnins': mnins, 'mn': mn1, 'mxinfo':strmxinfo, 'mninfo':strmninfo,'mytrain':mytrain}})
        # # print('hgsdg',len(details))
        if check=='reset':
            email = request.user
            rlycode = list(Level_Desig.objects.filter(official_email_ID=email).values('rly_unit_id','designation_code','rly_unit_id__location_type'))
            divcode= list(railwayLocationMaster.objects.filter(rly_unit_code=rlycode[0]['rly_unit_id']).values('location_code','parent_location_code','location_type'))
            # # print("rlycode",rlycode,divcode)
            details={}
            # fromdate = request.GET.get('fromdate')
            # todate = request.GET.get('todate')
            # train=request.GET.get('train')
            # check=request.GET.get('check')
            # if fromdate:
            #     fromdate=datetime.strptime(fromdate, "%d/%m/%Y")
            # if todate:
            #     todate=datetime.strptime(todate, "%d/%m/%Y")
            

            if(train!="Select"):
                if rlycode[0]['rly_unit_id__location_type']=='DIV':
                    l1 = list(train_master.objects.filter(Q(tn_category=train) & Q(passing_division__contains=divcode[0]['location_code'])).values('tn_category').distinct('tn_category'))
                    # # print("div66666",l1)


                elif rlycode[0]['rly_unit_id__location_type']=='ZR':
                    l1 = list(train_master.objects.filter(Q(tn_category=train) & Q(passing_rly__contains=divcode[0]['location_code'])).values('tn_category').distinct('tn_category'))
                    # # print("rly6666",l1)

                else:
                    l1 = list(train_master.objects.filter(Q(tn_category=train)).values('tn_category').distinct('tn_category'))
            else:
                if rlycode[0]['rly_unit_id__location_type']=='DIV':

                    l1 = list(train_master.objects.filter(Q(passing_division__contains=divcode[0]['location_code'])).values('tn_category').distinct('tn_category'))
                    # # print("div66666",l1)

                elif rlycode[0]['rly_unit_id__location_type']=='ZR':
                    l1 = list(train_master.objects.filter(Q(passing_rly__contains=divcode[0]['location_code'])).values('tn_category').distinct('tn_category'))
                    # # print("rly6666",divcode[0]['location_code'])

                else:
                    l1 = list(train_master.objects.filter(Q(tn_category=train)).values('tn_category').distinct('tn_category'))


                # # print("l1",l1)
            mytrain=[]
            for i in range(len(l1)):
                mytrain.append(l1[i]['tn_category'])
            for i in range(len(l1)):
                if (train!="Select"):
                    if rlycode[0]['rly_unit_id__location_type']=='DIV':
                    # l2 = list(train_master.objects.filter(Q(tn_category=train) & Q(div_id_id_id=rlycode[0]['rly_unit_id']) & Q(tn_category=l1[i]['tn_category'])).values('train_no','train_name'))
                        l2 = list(train_master.objects.filter(Q(tn_category=train) & Q(passing_division__contains=divcode[0]['location_code']) & Q(tn_category=l1[i]['tn_category'])).values('train_no','train_name'))
                    elif rlycode[0]['rly_unit_id__location_type']=='ZR':
                        l2 = list(train_master.objects.filter(Q(tn_category=train) & Q(passing_rly__contains=divcode[0]['location_code']) & Q(tn_category=l1[i]['tn_category'])).values('train_no','train_name'))
                    else:
                        l2 = list(train_master.objects.filter(Q(tn_category=train)) & Q(tn_category=l1[i]['tn_category'])).values('train_no','train_name')


                else:
                    if rlycode[0]['rly_unit_id__location_type']=='DIV':
                    # l2 = list(train_master.objects.filter(Q(div_id_id_id=rlycode[0]['rly_unit_id'])&Q(tn_category=l1[i]['tn_category'])).values('train_no','train_name'))
                        l2 = list(train_master.objects.filter(Q(passing_division__contains=divcode[0]['location_code'])&Q(tn_category=l1[i]['tn_category'])).values('train_no','train_name'))
                    elif rlycode[0]['rly_unit_id__location_type']=='ZR':
                        l2 = list(train_master.objects.filter(Q(passing_rly__contains=divcode[0]['location_code'])&Q(tn_category=l1[i]['tn_category'])).values('train_no','train_name'))
                    else:
                        l2 = list(train_master.objects.filter(Q(passing_division__contains=divcode[0]['location_code'])&Q(tn_category=l1[i]['tn_category'])).values('train_no','train_name'))


                # # print("l2",l2)
                # # print("rlycode[0]['rly_unit_id__location_type']",rlycode[0]['rly_unit_id__location_type'])

                a=0
                mx = 0
                mn = 1000
                # # print('mn', mn)
                mxins = ""                                                                                                                                                  
                mnins = ""
                mxinfo=[]
                mninfo=[]
                for j in range(len(l2)):
                    if fromdate and todate:
                        if rlycode[0]['rly_unit_id__location_type']=='DIV':
                        # # print('hello1')
                            l3 = list(m2.einspection_details.objects.filter(Q(inspected_on__date__range=[fromdate,todate]) & Q(entityid=l2[j]['train_no']) & Q(div_id_id_id=rlycode[0]['rly_unit_id'])).values('einspno','inspected_on'))
                        # # print("l3",l3)
                        elif rlycode[0]['rly_unit_id__location_type']=='ZR':
                            # # print("rlycode[0]['rly_unit_id']",rlycode[0]['rly_unit_id'])
                            l3 = list(m2.einspection_details.objects.filter(Q(inspected_on__date__range=[fromdate,todate]) & Q(entityid=l2[j]['train_no']) & Q(rly_id_id_id=rlycode[0]['rly_unit_id']) ).values('einspno','inspected_on'))
                            
                        else:
                            l3 = list(m2.einspection_details.objects.filter(Q(inspected_on__date__range=[fromdate,todate]) & Q(entityid=l2[j]['train_no']) ).values('einspno','inspected_on'))

                        
                    else:
                        if rlycode[0]['rly_unit_id__location_type']=='DIV':
                            l3 = list(m2.einspection_details.objects.filter(Q(div_id_id_id=rlycode[0]['rly_unit_id']) & Q(entityid=l2[j]['train_no']) ).values('einspno'))
                        # # print("l3",l3)
                        elif rlycode[0]['rly_unit_id__location_type']=='ZR':
                            l3 = list(m2.einspection_details.objects.filter(Q(rly_id_id_id=rlycode[0]['rly_unit_id']) & Q(entityid=l2[j]['train_no']) ).values('einspno'))
                            
                        else:
                            l3 = list(m2.einspection_details.objects.filter(Q(entityid=l2[j]['train_no']) ).values('einspno'))


                    if len(l3) and len(l3) >= mx:
                        mx=len(l3)
                        mxins = list(train_master.objects.filter(train_no=l2[j]['train_no']).values('train_no'))[0]['train_no']
                        # # print("mxins",mxins)
                        mxinfo=list(train_master.objects.filter(train_no=mxins).values('train_name','stnsource_code_id','stndest_code_id'))
                        # # print("mxinfo",mxinfo)
                        # # print("l33333",l3)
                    if len(l3) and len(l3) <= mn:
                        mn = len(l3)
                        mnins = list(train_master.objects.filter(train_no=l2[j]['train_no']).values('train_no'))[0]['train_no']
                        mninfo=list(train_master.objects.filter(train_no=mnins).values('train_name','stnsource_code_id','stndest_code_id'))
                        # # print("mninfo",mninfo)
                        # # print("l3",l3)2
                # # print("l3",l3)
                    if len(l3):
                        a=a+len(l3)
                # # print("a",a)

                # # print("count",a)
                strmxinfo=''
                for ii in mxinfo:
                    strmxinfo=ii['train_name']+', '+ii['stnsource_code_id']+', '+ii['stndest_code_id']
                
                strmninfo=''
                for ii in mninfo:
                    strmninfo=ii['train_name']+', '+ii['stnsource_code_id']+', '+ii['stndest_code_id']
                
                mn1="("+str(mn)+")"
                if mx == 0:
                    mn1=""
                    mx1=""
                else:
                    mx1="("+str(mx)+")"

                if mx==a:
                    mn1=mx1
                    mnins=mxins
                details.update({l1[i]['tn_category']: {'cnt':len(l2),'tot':a, 'mxins':mxins, 'mx':mx1, 'mnins': mnins, 'mn': mn1, 'mxinfo':strmxinfo, 'mninfo':strmninfo,'mytrain':mytrain}})
        context={
            'details':details,
        }
    return JsonResponse({'details':details},safe=False)


from datetime import datetime
def trainReviewpdf(request):
    email = request.user
    rlycode = list(Level_Desig.objects.filter(official_email_ID=email).values('rly_unit_id','designation_code','rly_unit_id__location_type'))
    divcode= list(railwayLocationMaster.objects.filter(rly_unit_code=rlycode[0]['rly_unit_id']).values('location_code','parent_location_code','location_type'))
    # # print("rlycode",rlycode,divcode)
    details={}
    fromdate = request.GET.get('fromdate')
    todate = request.GET.get('todate')
    train=request.GET.get('train')
    todaydate = datetime.today()
    if fromdate:
        fromdate=datetime.strptime(fromdate, "%d/%m/%Y")
    if todate:
        todate=datetime.strptime(todate, "%d/%m/%Y")
    # # print('dfgvhbjndd',rlycode)
    # # print("from",fromdate)
    # # print("to",todate)
    # # print("sdsAdaSDA",train)

    if(train!="Select"):
        if rlycode[0]['rly_unit_id__location_type']=='DIV':
            l1 = list(train_master.objects.filter(Q(tn_category=train) & Q(passing_division__contains=divcode[0]['location_code'])).values('tn_category').distinct('tn_category'))
            # # print("div66666",l1)
        elif rlycode[0]['rly_unit_id__location_type']=='ZR':
            l1 = list(train_master.objects.filter(Q(tn_category=train) & Q(passing_rly__contains=divcode[0]['location_code'])).values('tn_category').distinct('tn_category'))
            # # print("rly6666",l1)

        else:
            l1 = list(train_master.objects.filter(Q(tn_category=train)).values('tn_category').distinct('tn_category'))
    else:
        if rlycode[0]['rly_unit_id__location_type']=='DIV':

            l1 = list(train_master.objects.filter(Q(passing_division__contains=divcode[0]['location_code'])).values('tn_category').distinct('tn_category'))
            # # print("div66666",l1)

        elif rlycode[0]['rly_unit_id__location_type']=='ZR':
            l1 = list(train_master.objects.filter(Q(passing_rly__contains=divcode[0]['location_code'])).values('tn_category').distinct('tn_category'))
            # # print("rly6666",divcode[0]['location_code'])

        else:
            l1 = list(train_master.objects.filter(Q(tn_category=train)).values('tn_category').distinct('tn_category'))


        # # print("l1",l1)
    mytrain=[]
    for i in range(len(l1)):
        mytrain.append(l1[i]['tn_category'])
    for i in range(len(l1)):
        if (train!="Select"):
            if rlycode[0]['rly_unit_id__location_type']=='DIV':
            # l2 = list(train_master.objects.filter(Q(tn_category=train) & Q(div_id_id_id=rlycode[0]['rly_unit_id']) & Q(tn_category=l1[i]['tn_category'])).values('train_no','train_name'))
                l2 = list(train_master.objects.filter(Q(tn_category=train) & Q(passing_division__contains=divcode[0]['location_code']) & Q(tn_category=l1[i]['tn_category'])).values('train_no','train_name'))
            elif rlycode[0]['rly_unit_id__location_type']=='ZR':
                l2 = list(train_master.objects.filter(Q(tn_category=train) & Q(passing_rly__contains=divcode[0]['location_code']) & Q(tn_category=l1[i]['tn_category'])).values('train_no','train_name'))
            else:
                l2 = list(train_master.objects.filter(Q(tn_category=train)) & Q(tn_category=l1[i]['tn_category'])).values('train_no','train_name')


        else:
            if rlycode[0]['rly_unit_id__location_type']=='DIV':
            # l2 = list(train_master.objects.filter(Q(div_id_id_id=rlycode[0]['rly_unit_id'])&Q(tn_category=l1[i]['tn_category'])).values('train_no','train_name'))
                l2 = list(train_master.objects.filter(Q(passing_division__contains=divcode[0]['location_code'])&Q(tn_category=l1[i]['tn_category'])).values('train_no','train_name'))
            elif rlycode[0]['rly_unit_id__location_type']=='ZR':
                l2 = list(train_master.objects.filter(Q(passing_rly__contains=divcode[0]['location_code'])&Q(tn_category=l1[i]['tn_category'])).values('train_no','train_name'))
            else:
                l2 = list(train_master.objects.filter(Q(passing_division__contains=divcode[0]['location_code'])&Q(tn_category=l1[i]['tn_category'])).values('train_no','train_name'))


        # # print("l2",l2)
        a=0
        mx = 0
        mn = 1000
        # # print('mn', mn)
        mxins = ""                                                                                                                                                  
        mnins = ""
        mxinfo=[]
        mninfo=[]
        for j in range(len(l2)):
            if fromdate and todate:
                if rlycode[0]['rly_unit_id__location_type']=='DIV':
                # # print('hello1')
                    l3 = list(m2.einspection_details.objects.filter(Q(inspected_on__date__range=[fromdate,todate]) & Q(entityid=l2[j]['train_no']) & Q(div_id_id_id=rlycode[0]['rly_unit_id']) ).values('einspno','inspected_on'))
                # # print("l3",l3)
                elif rlycode[0]['rly_unit_id__location_type']=='ZR':
                    l3 = list(m2.einspection_details.objects.filter(Q(inspected_on__date__range=[fromdate,todate]) & Q(entityid=l2[j]['train_no']) & Q(rly_id_id_id=rlycode[0]['rly_unit_id']) ).values('einspno','inspected_on'))
                else:
                    l3 = list(m2.einspection_details.objects.filter(Q(inspected_on__date__range=[fromdate,todate]) & Q(entityid=l2[j]['train_no'])).values('einspno','inspected_on'))

              
            else:
                if rlycode[0]['rly_unit_id__location_type']=='DIV':
                    l3 = list(m2.einspection_details.objects.filter(Q(div_id_id_id=rlycode[0]['rly_unit_id']) & Q(entityid=l2[j]['train_no']) ).values('einspno'))
                # # print("l3",l3)
                elif rlycode[0]['rly_unit_id__location_type']=='ZR':
                    
                    l3 = list(m2.einspection_details.objects.filter( Q(entityid=l2[j]['train_no']) ).values('einspno'))
                else:
                    l3 = list(m2.einspection_details.objects.filter(Q(entityid=l2[j]['train_no']) ).values('einspno'))


            if len(l3) and len(l3) >= mx:
                mx=len(l3)
                mxins = list(train_master.objects.filter(train_no=l2[j]['train_no']).values('train_no'))[0]['train_no']
                # # print("mxins",mxins)
                mxinfo=list(train_master.objects.filter(train_no=mxins).values('train_name','stnsource_code_id','stndest_code_id'))
                # # print("mxinfo",mxinfo)
                # # print("l33333",l3)
            if len(l3) and len(l3) <= mn:
                mn = len(l3)
                mnins = list(train_master.objects.filter(train_no=l2[j]['train_no']).values('train_no'))[0]['train_no']
                mninfo=list(train_master.objects.filter(train_no=mnins).values('train_name','stnsource_code_id','stndest_code_id'))
                # # print("mninfo",mninfo)
                # # print("l3",l3)2
        # # print("l3",l3)
            if len(l3):
                a=a+len(l3)
        # # print("a",a)

        # # print("count",a)
        strmxinfo=''
        for ii in mxinfo:
            strmxinfo=ii['train_name']+', '+ii['stnsource_code_id']+', '+ii['stndest_code_id']
        
        strmninfo=''
        for ii in mninfo:
            strmninfo=ii['train_name']+', '+ii['stnsource_code_id']+', '+ii['stndest_code_id']
        
        mn1="("+str(mn)+")"
        if mx == 0:
            mn1=""
            mx1=""
        else:
            mx1="("+str(mx)+")"

        if mx==a:
            mn1=mx1
            mnins=mxins
        details.update({l1[i]['tn_category']: {'cnt':len(l2),'tot':a, 'mxins':mxins, 'mx':mx1, 'mnins': mnins, 'mn': mn1, 'mxinfo':strmxinfo, 'mninfo':strmninfo,'mytrain':mytrain}})
    context={'details':details,
            'fromdate':fromdate,
            'todate':todate,
            'todaydate':todaydate,
          
    }
    # # print(details)
    submitbtn=request.GET.get('submitbtn')
    # print(submitbtn)
    if submitbtn=='PDF':
        pdf=utils.render_to_pdf('train_inspection_pdf.html',context)
        return pdf
    elif submitbtn=='excel':
        import xlwt 
        from xlwt import Workbook
        response = HttpResponse(content_type='application/ms-excel')
        response['Content-Disposition'] = 'attachment; filename="train_inspection_Report.xls"'
        wb = Workbook() 
        sheet1 = wb.add_sheet('Sheet 1')
        style= xlwt.easyxf("font: bold on;borders: top_color black, bottom_color black, right_color black, left_color black,\
                        left thin, right thin, top thin, bottom thin;")
        style1= xlwt.easyxf("borders: top_color black, bottom_color black, right_color black, left_color black,\
                        left thin, right thin, top thin, bottom thin;")  
        heading1 = "Train Inspection Review" 
        row=1
        sheet1.write_merge(row,row,6,9,heading1,style=style)
        from datetime import date
        currDate = datetime.now().strftime("%d-%m-%Y")
        row=3
                                
        sheet1.write_merge(row,row,0,4,'Date :'+currDate)
        row=4
        sheet1.write(row,0,'S.No.',style=style)
        sheet1.write_merge(row,row,1,2,'Train Category',style=style)
        sheet1.write_merge(row,row,3,4,'Total Inspections',style=style)                                                 
        sheet1.write_merge(row,row,5,10,'Max. Inspected',style=style)
        sheet1.write_merge(row,row,11,16,'Min. Inspected',style=style)
        
                                
        index=1
        row=row+1
        # # print('0000000000000000000000000000',donor)
        # for i,j in details.items() :
        #     # print("+++++++++++++---------------------")  
        #     sheet1.write(row,0,index,style=style1)
        #     sheet1.write_merge(row,row,1,2,i+'('+str(j['cnt'])+')',style=style1)
        #     sheet1.write_merge(row,row,3,4,j['tot'],style=style1)                        
        #     sheet1.write_merge(row,row,5,7,j['mxins']+j['mx'],style=style1)
        #     sheet1.write_merge(row,row,8,10,j['mnins']+j['mn'],style=style1)
                                    
        #     row+=1
        #     # print("+++++++++++++")                          
        #     index+=1
        
        for i in range(len(details)):
            # # print(details[i]['key'])
            sheet1.write(row,0,index,style=style1)
            sheet1.write_merge(row,row,1,2,str(details[i]['key'])+' ('+str(details[i]['val'][0]['cnt'])+')',style=style1)
            sheet1.write_merge(row,row,3,4,details[i]['val'][0]['tot'],style=style1)
            sheet1.write_merge(row,row,5,10,str(details[i]['val'][0]['mxins'])+' '+str(details[i]['val'][0]['mx'])+' '+str(details[i]['val'][0]['mxinfo']),style=style1)
            sheet1.write_merge(row,row,11,16,str(details[i]['val'][0]['mnins'])+' '+str(details[i]['val'][0]['mn'])+' '+str(details[i]['val'][0]['mninfo']),style=style1)
            # for j in range(len(details[i])):
            #     # print(details[i]['val'][0]['cnt'])
            row+=1
            index+=1
            # for a,b in details[i].items():
            #     # print(a)
            #     # print(b)
        # # print("hello")
        # # print(details[0]['val'][0]['cnt'])
        # print(details)
        wb.save(response)
    return response


def OBHS_report(request):
    email=str(request.user)
    userDetails=Level_Desig.objects.filter(official_email_ID=email)[0]
    todate=date.today()
    fromdate=todate-timedelta(days=7)
    todate1=todate.strftime('%d/%m/%Y')
    fromdate1=fromdate.strftime('%d/%m/%Y')
    parent_desig_code=userDetails.parent_desig_code
    desig=userDetails.designation
    x=desig.index('/')
    rl=desig[x+1:]
    # # print('INDEX:',rl)
    rly=userDetails.rly_unit_id
    rlycheck=list(railwayLocationMaster.objects.filter(rly_unit_code=rly).all())
    # print(rlycheck[0].location_type)
    rlycode=railwayLocationMaster.objects.filter(rly_unit_code=rly).all()
    # # print(rlycode[0].location_code)
    if(rlycheck[0].location_type=='ZR'):
       tr=list(train_master.objects.filter(passing_rly__contains=rlycode[0].location_code).all())
    if(rlycheck[0].location_type=='DIV') :
        tr=list(train_master.objects.filter(passing_division__contains=rlycode[0].location_code).all())
        # # print("hello")
    
    else:
      tr=list(train_master.objects.filter().all())
    context={
        'tr':tr
    }
    return render(request,'OBHS_report.html',context)


############################### Apeksha 
def disableQuest(request):
    try:
        if request.method=='GET':
            instypeid=request.GET.get('qid')
            inspectiontype_master.objects.filter(instypeid=instypeid).update(disable_flag=True, lastmodified_on=datetime.now())
            return JsonResponse({'success':True})
        return JsonResponse({'success':False},status=404)
    except:
        print('Error')

def enableQuest(request):
    try:
        if request.method=='GET':
            instypeid=request.GET.get('qid')
            inspectiontype_master.objects.filter(instypeid=instypeid).update(disable_flag=False, lastmodified_on=datetime.now())
            return JsonResponse({'success':True})
        return JsonResponse({'success':False},status=404)
    except:
        print('Error')

def disableinspect(request):
    if request.method=='GET':
        instypeid=request.GET.get('qid')
        inspectiontype_master.objects.filter(instypeid=instypeid).update(disable_flag=True, lastmodified_on=datetime.now())
        menu=inspectiontype_master.objects.filter(instypeid=instypeid)[0]
        url='/showMenu/?id='+str(menu.instypeid)
        m2.custom_menu.objects.filter(url=url).update(delete_flag = True)
        return JsonResponse({'success':True})
    return JsonResponse({'success':False},status=404)
    
def enableinspect(request):
    if request.method=='GET':
        instypeid=request.GET.get('qid')
        print(instypeid)
        menu=inspectiontype_master.objects.filter(instypeid=instypeid)[0]
        url='/showMenu/?id='+str(menu.instypeid)
        inspectiontype_master.objects.filter(name=menu.name).update(disable_flag=True, lastmodified_on=datetime.now())
        if not m2.custom_menu.objects.filter(url=url).exists():
            version = menu.version
            v1 = list(inspectiontype_master.objects.filter(name = menu.name).values('version').order_by('-version'))
            if len(v1)>0:
                v1 = v1[0]['version']
            else:
                v1 = 1
            if version == v1:   
                m2.custom_menu.objects.filter(menu=menu.name).update(delete_flag = True)
                max_id2 = m2.custom_menu.objects.aggregate(Max('id'))
                if max_id2['id__max'] is not None:
                    max_id2= max_id2['id__max'] + 1 
                else:
                    max_id2 = 1
                m2.custom_menu.objects.create(id=max_id2,m_id=max_id2,menu=menu.name,role='user',parent_id=2,url=url)
                inspectiontype_master.objects.filter(instypeid=instypeid).update(disable_flag=False, lastmodified_on=datetime.now())
                msg = 'Success'
            else:
                msg = 'Cannot Enabled, since Higher version is available'
        else:
            version = menu.version
            v1 = list(inspectiontype_master.objects.filter(name = menu.name).values('version').order_by('-version'))
            if len(v1)>0:
                v1 = v1[0]['version']
            else:
                v1 = 1
            if version == v1:
                m2.custom_menu.objects.filter(url=url).update(delete_flag = False,menu=menu.name)
                inspectiontype_master.objects.filter(instypeid=instypeid).update(disable_flag=False, lastmodified_on=datetime.now())

                msg = 'Success'
            else:
                msg = 'Cannot Enabled, since Higher version is available'

        return JsonResponse(msg, safe=False)
    return JsonResponse({'success':False},status=404)


def disbalequest3(request):
    if request.method=='GET':
        qid=request.GET.get('qid')
        m2.questionare_master.objects.filter(qid=qid).update(disable_flag=True,lastmodified_on=datetime.now())
        return JsonResponse({'success':True})
    return JsonResponse({'success':False},status=404)
    
def enablequest3(request):
    if request.method=='GET':
        qid=request.GET.get('qid')
        m2.questionare_master.objects.filter(qid=qid).update(disable_flag=False,lastmodified_on=datetime.now())
        return JsonResponse({'success':True})
    return JsonResponse({'success':False},status=404)
   

def filter_masterform(request):
    try:
        if request.method == 'POST' and request.is_ajax():
            inspectCat=request.POST.get('inspectCat')
            
            # # print(inspectCat)
            # inspect=list(inspectiontype_master.objects.filter(delete_flag=False,parent_id='-1', name=inspectCat).values('name','shortcode','entity_id__dmaster','inspection_image','instypeid','disable_flag').order_by('instypeid'))
            # # print(inspect)
            # inspect=list(inspectiontype_master.objects.filter(delete_flag=False,parent_id='-1').values('name','shortcode','entity_id__dmaster','inspection_image','instypeid','disable_flag').order_by('instypeid'))
            # status = request.GET.get('data_id') 
            status=request.POST.get('id')
            # Question 
            if status == '1':
                quescat_name=request.POST.get('quescat_name')
                if quescat_name!='0':
                    categories=[int(quescat_name)]
                else:
                    insp_cat=list(inspectiontype_master.objects.filter(parent_id=inspectCat).values('instypeid'))
                    # # print(insp_cat)
                    categories=[]
                    for i in insp_cat:
                        categories.append(i['instypeid'])
                # print(categories)
                inspect=list(m2.questionare_master.objects.filter(delete_flag=False,instypeid_id_id__in=categories).values().order_by('qid'))
                for i in range(len(inspect)):
                    # # print(inspect[i])
                    lst=list(inspectiontype_master.objects.filter(instypeid=inspect[i]["instypeid_id_id"]).values('name','parent_id'))
                    inspect_cat=list(inspectiontype_master.objects.filter(instypeid=lst[0]['parent_id']).values('name'))
                    lst2=list(m2.choicetype_master.objects.filter(cid=inspect[i]["choicetype_id"]).values('input_type'))
                    inspect[i].update({'name':lst[0]['name'], 'choicetype':lst2[0]['input_type'],'inspect_cat':inspect_cat[0]['name']})
            
            # Question Catregory
            elif status == '2':
                # thead = ["sno","category name","entity related","edit","delete"]
                inspect=list(inspectiontype_master.objects.filter(~Q(parent_id='-1') & Q(delete_flag=False) & ~Q(parent_id=None), parent_id=inspectCat).values('name','shortcode','entity_id__dmaster','inspection_image','instypeid','entity_id','parent_id','disable_flag').order_by('instypeid'))
                for i in range(len(inspect)):
                    parent_cat=list(inspectiontype_master.objects.filter(instypeid=inspect[i]["parent_id"]).values('name'))[0]['name']
                    inspect[i]['parent_cat']=parent_cat
                    # # print(i, parent_cat,inspect[i])
                    if not inspect[i]['entity_id']:
                        entity = inspectiontype_master.objects.filter(instypeid=inspect[i]['parent_id']).values('entity_id__dmaster')[0]
                        inspect[i].update({'entity_id__dmaster':entity['entity_id__dmaster']})
            
            # Inspection Category
            elif status == '3':
                thead = ["sno","category name","category code","entity related","image","edit","delete"]
                inspect=list(inspectiontype_master.objects.filter(delete_flag=False,parent_id='-1').values('name','shortcode','entity_id__dmaster','inspection_image','instypeid','disable_flag').order_by('instypeid'))
            
            # # print(inspect)   
            return JsonResponse({'success':True,'inspect':inspect, 'status':status},safe=False)
        return JsonResponse({'success':False},status=404)

    except:
        print('Error')   




# def performanceRating(request):
#     email=str(request.user)
#     userDetails=Level_Desig.objects.filter(official_email_ID=email)[0]
#     userDetails=userDetails.empno.empno

#     performance = []
#     inspType = list(inspectiontype_master.objects.filter(parent_id='-1',delete_flag=False,disable_flag=False).values('instypeid','name'))
#     for i in range(len(inspType)):
#         actorDetails = list(actor_with_inspType.objects.filter(inspType=inspType[i]['instypeid'],disable_flag=False,).values('actorId_id__actorName','actorId_id__actorId').order_by('actorId_id__actorName'))
#         catType = list(inspectiontype_master.objects.filter(parent_id=inspType[i]['instypeid'],delete_flag=False,disable_flag=False,instypeid__in=m2.questionare_master.objects.filter(choicetype='2').values('instypeid_id')).values('instypeid','name'))
        
        
#         for j in range(len(catType)):
#             for k in range(len(actorDetails)):
#                 pDet = list(m2.actor_with_question.objects.filter(actionId=actorDetails[k]['actorId_id__actorId'],questionId__in=m2.questionare_master.objects.filter(choicetype='2',instypeid_id=catType[j]['instypeid']).values('qid'),disable_flag=False).values_list('questionId',flat=True))
#                 totalScore = 0
#                 totLst =list(m2.questionare_master.objects.filter(qid__in = pDet,roption1_id__rscore__isnull = False,roption2_id__rscore__isnull = False).values('roption1_id__rscore','roption2_id__rscore'))
#                 for i1 in range(len(totLst)):
#                     if totLst[i1]['roption1_id__rscore'] > 0:
#                         totalScore = totalScore + totLst[i1]['roption1_id__rscore']
#                     elif totLst[i1]['roption2_id__rscore'] > 0:
#                         totalScore = totalScore + totLst[i1]['roption2_id__rscore']
#                 avg1 = totalScore
#                 diffActorVal = list(m2.actor_with_inspection_details.objects.filter(actorId = actorDetails[k]['actorId_id__actorId']).values_list('value',flat=True).distinct())
#                 for i2 in range(len(diffActorVal)):
#                     diffInsp = list(m2.actor_with_inspection_details.objects.filter(actorId = actorDetails[k]['actorId_id__actorId'],value = diffActorVal[i2]).values_list('einspno',flat=True).distinct())
#                     totalScore = avg1 * len(diffInsp)
#                     if totalScore > 0:
#                         totalNegScore = m2.einspection_item_detail.objects.filter(qid__in = pDet,einspno__in=diffInsp,value_id_id__rscore__lt = 1).count()
#                         posScore = totalScore - totalNegScore

#                         rating = float((posScore / totalScore) * 10)
#                         intRating = int(rating)
#                         if rating > intRating and float(str(intRating)+'.25') >= rating:
#                             finalRating = str(intRating)
#                         elif rating > float(str(intRating)+'.25') and float(str(intRating)+'.75') >= rating:
#                             finalRating = str(intRating)+'.5'
#                         elif float(str(intRating)+'.75') < rating: 
#                              finalRating = str(intRating + 1)
#                         else:
#                             finalRating = str(intRating)
                        
#                         avg = round(posScore / len(diffInsp) , 2)
#                         performance.append({'sperinsp':avg1,'avg':avg,'diffInsp':len(diffInsp),'totalScore':totalScore,'posScore':posScore,'insp':inspType[i]['name'],'category':catType[j]['name'],'actor':actorDetails[k]['actorId_id__actorName'],'value':diffActorVal[i2],'rating':finalRating})

#     context = {
#         'performance':performance,
#     }
#     return render(request,'performanceRating.html',context)



def performanceRating(request):
    try:
        email=str(request.user)
        userDetails=Level_Desig.objects.filter(official_email_ID=email)[0]
        userDetails=userDetails.empno.empno
    except:
        messages.error(request,'You are not Authorized, please contact admin')

    selType = 'Insp'
    typeValue = 'inspectionType'
    performance = []
    if request.method == 'GET':
            selType = 'Insp'
            typeValue = 'inspectionType'
            minInspCount = 0
            inspType = list(inspectiontype_master.objects.filter(parent_id='-1',delete_flag=False,disable_flag=False).values('instypeid','name'))
            for i in range(len(inspType)):
                actorDetails = list(actor_with_inspType.objects.filter(inspType=inspType[i]['instypeid'],disable_flag=False,).values('actorId_id__actorName','actorId_id__actorId').order_by('actorId_id__actorName'))
                catType = list(inspectiontype_master.objects.filter(parent_id=inspType[i]['instypeid'],delete_flag=False,disable_flag=False,instypeid__in=m2.questionare_master.objects.filter(choicetype__in=['2','9']).values('instypeid_id')).values_list('instypeid',flat=True))
                eInspDet = list(einspection_details.objects.filter(instypeid=inspType[i]['instypeid']).values_list('einspno',flat=True))
                actAll = []
                for k in range(len(actorDetails)):
                    pDet = list(m2.actor_with_question.objects.filter(actionId=actorDetails[k]['actorId_id__actorId'],questionId__in=m2.questionare_master.objects.filter(choicetype__in=['2','9'],instypeid_id__in=catType).values('qid'),disable_flag=False).values_list('questionId',flat=True))
                    totalScore = 0
                    totLst =list(m2.questionare_master.objects.filter(qid__in = pDet).values('roption1_id__rscore','roption2_id__rscore','weightage','mixedChoices'))
                    for i1 in range(len(totLst)):
                        if totLst[i1]['roption1_id__rscore'] != None and totLst[i1]['roption1_id__rscore'] > 0:
                            totalScore = totalScore + (totLst[i1]['roption1_id__rscore'] * totLst[i1]['weightage'])
                        elif totLst[i1]['roption2_id__rscore'] != None and totLst[i1]['roption2_id__rscore'] > 0:
                            totalScore = totalScore + (totLst[i1]['roption2_id__rscore'] * totLst[i1]['weightage'])
                        else:
                            mixedChoices = len(str(totLst[i1]['mixedChoices']).split('$')) * totLst[i1]['weightage']
                            totalScore = totalScore + mixedChoices
                    avg1 = totalScore
                    diffActorVal = list(m2.actor_with_inspection_details.objects.filter(actorId = actorDetails[k]['actorId_id__actorId'],einspno__in=eInspDet).values_list('value',flat=True).distinct())
                    
                    perAll = []
                    for i2 in range(len(diffActorVal)):
                        diffInsp = list(m2.actor_with_inspection_details.objects.filter(actorId = actorDetails[k]['actorId_id__actorId'],value = diffActorVal[i2],einspno__in=eInspDet).values_list('einspno',flat=True).distinct())
                        if len(diffInsp) > minInspCount:
                            totalScore = avg1 * len(diffInsp)
                            if totalScore > 0:
                                totalNegScore = m2.einspection_item_detail.objects.filter(qid__in = pDet,einspno__in=diffInsp,value_id_id__rscore__lt = 1).count()
                                totalNegScoreMixedChoices = list(m2.einspection_item_detail.objects.filter(qid__in = pDet,einspno__in=diffInsp,value_id__isnull = True).values('value'))
                                totalTMC = 0
                                for tmc in range(len(totalNegScoreMixedChoices)):
                                    totalTMC = totalTMC + len(str(totalNegScoreMixedChoices[tmc]['value']).split('$'))

                                posScore = totalScore - (totalNegScore+totalTMC)
                                avg = round(posScore / len(diffInsp) , 2)
                                perAll.append({'sperinsp':avg1,'avg':avg,'diffInsp':len(diffInsp),'totalScore':totalScore,'posScore':posScore,'value':diffActorVal[i2]})
                    
                    if len(perAll) > 0:
                        perAll = sorted(perAll , key = lambda x: x['avg'])
                        if len(perAll) > 5:
                            best5 = perAll[len(perAll)-5:] 
                            best5 = sorted(best5 , key = lambda x: x['avg'], reverse = True)
                            worst5 = perAll[:5]
                        else:
                            best5 = sorted(perAll , key = lambda x: x['avg'], reverse = True)
                            worst5 = perAll
                        actAll.append({'actor':actorDetails[k]['actorId_id__actorName'],'len':len(best5),'best5':best5,'worst5':worst5})

                actLen = 0
                inspC1 = '1'
                if len(actAll) > 0:
                    for i2 in range(len(actAll)):
                        actLen = actLen + actAll[i2]['len']
                    for i2 in range(len(actAll)):
                        
                        for i3 in range(len(actAll[i2]['best5'])):
                            aChk = '0'
                            if i3 == 0:
                                aChk = '1'  
                            
                            performance.append({'inspChk':inspC1,'insp':inspType[i]['name'],'actlen':actLen,'achk':aChk,'actor':actAll[i2]['actor'],'len':actAll[i2]['len'],'bsperinsp':actAll[i2]['best5'][i3]['sperinsp'],'bavg':actAll[i2]['best5'][i3]['avg'],'bdiffInsp':actAll[i2]['best5'][i3]['diffInsp'],'btotalScore':actAll[i2]['best5'][i3]['totalScore'],'bposScore':actAll[i2]['best5'][i3]['posScore'],'bvalue':actAll[i2]['best5'][i3]['value'],
                            'wsperinsp':actAll[i2]['worst5'][i3]['sperinsp'],'wavg':actAll[i2]['worst5'][i3]['avg'],'wdiffInsp':actAll[i2]['worst5'][i3]['diffInsp'],'wtotalScore':actAll[i2]['worst5'][i3]['totalScore'],'wposScore':actAll[i2]['worst5'][i3]['posScore'],'wvalue':actAll[i2]['worst5'][i3]['value']})   
                            if inspC1 == '1':
                                inspC1 = '0'
                        
    if request.method == 'POST':
        submitValue = request.POST.get('submit')
        if submitValue == 'inspectionType':
            selType = 'Insp'
            typeValue = 'inspectionType'
            minInspCount = 0
            inspType = list(inspectiontype_master.objects.filter(parent_id='-1',delete_flag=False,disable_flag=False).values('instypeid','name'))
            for i in range(len(inspType)):
                actorDetails = list(actor_with_inspType.objects.filter(inspType=inspType[i]['instypeid'],disable_flag=False,).values('actorId_id__actorName','actorId_id__actorId').order_by('actorId_id__actorName'))
                catType = list(inspectiontype_master.objects.filter(parent_id=inspType[i]['instypeid'],delete_flag=False,disable_flag=False,instypeid__in=m2.questionare_master.objects.filter(choicetype__in=['2','9']).values('instypeid_id')).values_list('instypeid',flat=True))
                eInspDet = list(einspection_details.objects.filter(instypeid=inspType[i]['instypeid']).values_list('einspno',flat=True))

                # for j in range(len(catType)):
                actAll = []
                for k in range(len(actorDetails)):
                    pDet = list(m2.actor_with_question.objects.filter(actionId=actorDetails[k]['actorId_id__actorId'],questionId__in=m2.questionare_master.objects.filter(choicetype__in=['2','9'],instypeid_id__in=catType).values('qid'),disable_flag=False).values_list('questionId',flat=True))
                    totalScore = 0
                    totLst =list(m2.questionare_master.objects.filter(qid__in = pDet).values('roption1_id__rscore','roption2_id__rscore','weightage','mixedChoices'))
                    for i1 in range(len(totLst)):
                        if totLst[i1]['roption1_id__rscore'] != None and totLst[i1]['roption1_id__rscore'] > 0:
                            totalScore = totalScore + (totLst[i1]['roption1_id__rscore'] * totLst[i1]['weightage'])
                        elif totLst[i1]['roption2_id__rscore'] != None and totLst[i1]['roption2_id__rscore'] > 0:
                            totalScore = totalScore + (totLst[i1]['roption2_id__rscore'] * totLst[i1]['weightage'])
                        else:
                            mixedChoices = len(str(totLst[i1]['mixedChoices']).split('$')) * totLst[i1]['weightage']
                            totalScore = totalScore + mixedChoices
                    avg1 = totalScore
                    diffActorVal = list(m2.actor_with_inspection_details.objects.filter(actorId = actorDetails[k]['actorId_id__actorId'],einspno__in=eInspDet).values_list('value',flat=True).distinct())
                    perAll = []
                    for i2 in range(len(diffActorVal)):
                        diffInsp = list(m2.actor_with_inspection_details.objects.filter(actorId = actorDetails[k]['actorId_id__actorId'],value = diffActorVal[i2],einspno__in=eInspDet).values_list('einspno',flat=True).distinct())
                        if len(diffInsp) > minInspCount:
                            totalScore = avg1 * len(diffInsp)
                            if totalScore > 0:
                                totalNegScore = m2.einspection_item_detail.objects.filter(qid__in = pDet,einspno__in=diffInsp,value_id_id__rscore__lt = 1).count()
                                totalNegScoreMixedChoices = list(m2.einspection_item_detail.objects.filter(qid__in = pDet,einspno__in=diffInsp,value_id__isnull = True).values('value'))
                                totalTMC = 0
                                for tmc in range(len(totalNegScoreMixedChoices)):
                                    totalTMC = totalTMC + len(str(totalNegScoreMixedChoices[tmc]['value']).split('$'))
                                posScore = totalScore - (totalNegScore+totalTMC)
                                avg = round(posScore / len(diffInsp) , 2)
                                perAll.append({'sperinsp':avg1,'avg':avg,'diffInsp':len(diffInsp),'totalScore':totalScore,'posScore':posScore,'value':diffActorVal[i2]})
                    
                    if len(perAll) > 0:
                        perAll = sorted(perAll , key = lambda x: x['avg'])
                        if len(perAll) > 5:
                            best5 = perAll[len(perAll)-5:] 
                            best5 = sorted(best5 , key = lambda x: x['avg'], reverse = True)
                            worst5 = perAll[:5]
                        else:
                            best5 = sorted(perAll , key = lambda x: x['avg'], reverse = True)
                            worst5 = perAll
                        actAll.append({'actor':actorDetails[k]['actorId_id__actorName'],'len':len(best5),'best5':best5,'worst5':worst5})

                actLen = 0
                inspC1 = '1'
                if len(actAll) > 0:
                    for i2 in range(len(actAll)):
                        actLen = actLen + actAll[i2]['len']
                    for i2 in range(len(actAll)):
                        
                        for i3 in range(len(actAll[i2]['best5'])):
                            aChk = '0'
                            if i3 == 0:
                                aChk = '1'  
                            
                            performance.append({'inspChk':inspC1,'insp':inspType[i]['name'],'actlen':actLen,'achk':aChk,'actor':actAll[i2]['actor'],'len':actAll[i2]['len'],'bsperinsp':actAll[i2]['best5'][i3]['sperinsp'],'bavg':actAll[i2]['best5'][i3]['avg'],'bdiffInsp':actAll[i2]['best5'][i3]['diffInsp'],'btotalScore':actAll[i2]['best5'][i3]['totalScore'],'bposScore':actAll[i2]['best5'][i3]['posScore'],'bvalue':actAll[i2]['best5'][i3]['value'],
                            'wsperinsp':actAll[i2]['worst5'][i3]['sperinsp'],'wavg':actAll[i2]['worst5'][i3]['avg'],'wdiffInsp':actAll[i2]['worst5'][i3]['diffInsp'],'wtotalScore':actAll[i2]['worst5'][i3]['totalScore'],'wposScore':actAll[i2]['worst5'][i3]['posScore'],'wvalue':actAll[i2]['worst5'][i3]['value']})   
                            if inspC1 == '1':
                                print('hello')
                                inspC1 = '0'
        
        else:
            selType = 'Cat'
            typeValue = 'categoryType'
            inspType = list(inspectiontype_master.objects.filter(parent_id='-1',delete_flag=False,disable_flag=False).values('instypeid','name'))
            for i in range(len(inspType)):
                actorDetails = list(actor_with_inspType.objects.filter(inspType=inspType[i]['instypeid'],disable_flag=False,).values('actorId_id__actorName','actorId_id__actorId').order_by('actorId_id__actorName'))
                catType = list(inspectiontype_master.objects.filter(parent_id=inspType[i]['instypeid'],delete_flag=False,disable_flag=False,instypeid__in=m2.questionare_master.objects.filter(choicetype__in=['2','9']).values('instypeid_id')).values('instypeid','name'))
                eInspDet = list(einspection_details.objects.filter(instypeid=inspType[i]['instypeid']).values_list('einspno',flat=True))

                
                for j in range(len(catType)):
                    for k in range(len(actorDetails)):
                        pDet = list(m2.actor_with_question.objects.filter(actionId=actorDetails[k]['actorId_id__actorId'],questionId__in=m2.questionare_master.objects.filter(choicetype__in=['2','9'],instypeid_id=catType[j]['instypeid']).values('qid'),disable_flag=False).values_list('questionId',flat=True))
                        totalScore = 0
                        totLst =list(m2.questionare_master.objects.filter(qid__in = pDet).values('roption1_id__rscore','roption2_id__rscore','weightage','mixedChoices'))
                        for i1 in range(len(totLst)):
                            if totLst[i1]['roption1_id__rscore'] != None and totLst[i1]['roption1_id__rscore'] > 0:
                                totalScore = totalScore + (totLst[i1]['roption1_id__rscore'] * totLst[i1]['weightage'])
                            elif totLst[i1]['roption2_id__rscore'] != None and totLst[i1]['roption2_id__rscore'] > 0:
                                totalScore = totalScore + (totLst[i1]['roption2_id__rscore'] * totLst[i1]['weightage'])
                            else:
                                mixedChoices = len(str(totLst[i1]['mixedChoices']).split('$')) * totLst[i1]['weightage']
                                totalScore = totalScore + mixedChoices
                        avg1 = totalScore
                        diffActorVal = list(m2.actor_with_inspection_details.objects.filter(actorId = actorDetails[k]['actorId_id__actorId'],einspno__in=eInspDet).values_list('value',flat=True).distinct())
                        for i2 in range(len(diffActorVal)):
                            diffInsp = list(m2.actor_with_inspection_details.objects.filter(actorId = actorDetails[k]['actorId_id__actorId'],value = diffActorVal[i2],einspno__in=eInspDet).values_list('einspno',flat=True).distinct())
                            totalScore = avg1 * len(diffInsp)
                            if totalScore > 0:
                                totalNegScore = m2.einspection_item_detail.objects.filter(qid__in = pDet,einspno__in=diffInsp,value_id_id__rscore__lt = 1).count()
                                totalNegScoreMixedChoices = list(m2.einspection_item_detail.objects.filter(qid__in = pDet,einspno__in=diffInsp,value_id__isnull = True).values('value'))
                                totalTMC = 0
                                for tmc in range(len(totalNegScoreMixedChoices)):
                                    totalTMC = totalTMC + len(str(totalNegScoreMixedChoices[tmc]['value']).split('$'))
                                posScore = totalScore - (totalNegScore+totalTMC)

                                rating = float((posScore / totalScore) * 10)
                                intRating = int(rating)
                                if rating > intRating and float(str(intRating)+'.25') >= rating:
                                    finalRating = str(intRating)
                                elif rating > float(str(intRating)+'.25') and float(str(intRating)+'.75') >= rating:
                                    finalRating = str(intRating)+'.5'
                                elif float(str(intRating)+'.75') < rating: 
                                        finalRating = str(intRating + 1)
                                else:
                                    finalRating = str(intRating)
                                avg = round(posScore / len(diffInsp) , 2)
                                performance.append({'sperinsp':avg1,'avg':avg,'diffInsp':len(diffInsp),'totalScore':totalScore,'posScore':posScore,'insp':inspType[i]['name'],'category':catType[j]['name'],'actor':actorDetails[k]['actorId_id__actorName'],'value':diffActorVal[i2],'rating':finalRating})
   
    context = {
        'performance':performance,
        'selType':selType,
        'typeValue':typeValue,
    }
    return render(request,'performanceRating.html',context)


def actorForm(request):
    try:
        current_user = request.user
        if str(request.user).startswith('admin'):
            actual_user = str(request.user).split('admin')[1]
        else:
            actual_user = request.user
        empnox = AdminMaster.objects.filter(Q(admin_email=actual_user), user_id__isnull=False).values('rly','user_id')            
        userDetails = None
        if empnox:
            userDetails = empnox[0]['user_id']
        else:
            messages.error(request,'You are not Authorized, please contact admin')
            context={}
            return render(request,'actorForm.html',context)
    except:
        messages.error(request,'You are not Authorized, please contact admin')
        context={}
        return render(request,'actorForm.html',context)
   
    
    if request.method == 'POST' and request.is_ajax():
        postType = request.POST.get('postType')
        if postType == 'deficiency-details':
            inspId = request.POST.get('inspId')  
            catType = list(inspectiontype_master.objects.filter(parent_id=inspId,delete_flag=False,disable_flag=False,instypeid__in=m2.questionare_master.objects.filter(choicetype='2').values('instypeid_id')).values('instypeid','name'))
            actorDetails = list(actor_with_inspType.objects.filter(inspType=inspId).values('actorId_id__actorName','actorId_id__actorId').order_by('actorId_id__actorName'))
            defDetails = []
            presentDetails = []
            for i in range(len(catType)):
                questions = list(m2.questionare_master.objects.filter(choicetype__in=['2','9'],instypeid_id=catType[i]['instypeid']).values('qid','activity'))
                if len(questions) > 0:
                    defDetails.append({'typ':'cat','name':catType[i]['name']})
                    for j in range(len(questions)):
                        defDetails.append({'typ':'def','name':questions[j]['activity'],'qid':questions[j]['qid'],'slno': j+1})
                        pDet = list(m2.actor_with_question.objects.filter(questionId=questions[j]['qid'],disable_flag=False).values('questionId','actionId'))
                        if len(pDet)>0:
                            for k in range(len(pDet)):
                                presentDetails.append(str(pDet[k]['questionId'])+str(pDet[k]['actionId']))

        
            context = {
                'actorDetails':actorDetails,
                'defDetails':defDetails,
                'presentDetails':presentDetails,

            }
            return JsonResponse(context, safe = False)  
        
        
        return JsonResponse({"success":False}, status=400)  
    if request.method == 'POST':
        submitValue = request.POST.get('submit') 
          
        if submitValue == 'addDeficiency':
            try:
                inspId = request.POST.get('inspTypeForDef')  
                catType = list(inspectiontype_master.objects.filter(parent_id=inspId,delete_flag=False,disable_flag=False,instypeid__in=m2.questionare_master.objects.filter(choicetype='2').values('instypeid_id')).values('instypeid','name'))
                actorDetails = list(actor_with_inspType.objects.filter(inspType=inspId).values('actorId_id__actorName','actorId_id__actorId').order_by('actorId_id__actorName').distinct())
                defDetails = []
                for i in range(len(catType)):
                    questions = list(m2.questionare_master.objects.filter(choicetype__in=['2','9'],instypeid_id=catType[i]['instypeid']).values('qid'))
                    if len(questions) > 0:
                        for k in range(len(questions)):
                            for j in range(len(actorDetails)):
                                checkId = 'def'+str(questions[k]['qid'])+str(actorDetails[j]['actorId_id__actorId'])
                                val = request.POST.get(checkId)
                                if val !=None:
                                    if not m2.actor_with_question.objects.filter(questionId=questions[k]['qid'],actionId=actorDetails[j]['actorId_id__actorId']).exists():
                                        m2.actor_with_question.objects.create(questionId_id=questions[k]['qid'],actionId_id=actorDetails[j]['actorId_id__actorId'],created_by=userDetails,lastmodified_by=userDetails,created_on=datetime.now(),lastmodified_on=datetime.now())
                                    else:
                                        m2.actor_with_question.objects.filter(questionId_id=questions[k]['qid'],actionId_id=actorDetails[j]['actorId_id__actorId']).update(lastmodified_by=userDetails,lastmodified_on=datetime.now(),disable_flag=False)
                                else:
                                    m2.actor_with_question.objects.filter(questionId_id=questions[k]['qid'],actionId_id=actorDetails[j]['actorId_id__actorId']).update(lastmodified_by=userDetails,lastmodified_on=datetime.now(),disable_flag=True)
                messages.success(request,'Successfully done the changes')
            except:
                messages.error(request,'Some error occured, please contact admin')
           
        if submitValue == 'addActor':
            try:
                inspId = request.POST.get('inspType')
                actorId = request.POST.getlist('actor')
                msg1 = ''
                msg2 = ''
                for i in actorId:
                    if actor_with_inspType.objects.filter(actorId=i,inspType=inspId).exists():
                        lst1 = list(actor_details.objects.filter(actorId=i).values('actorName'))
                        if msg1 != '':
                            msg1 = msg1 + ', '
                        msg1 = msg1+ lst1[0]['actorName']
                    else:
                        actor_with_inspType.objects.create(actorId_id=i,inspType_id=inspId,created_by=userDetails,lastmodified_by=userDetails,created_on=datetime.now(),lastmodified_on=datetime.now())
                        lst1 = list(actor_details.objects.filter(actorId=i).values('actorName'))
                        if msg2 != '':
                            msg2 = msg2 + ', '
                        msg2 = msg2 + lst1[0]['actorName']
                    msg = ''
                if msg2 != '':
                    msg = 'Data Added for ' + msg2 + ' Actor &'
                if msg1 != '':
                    msg +=  ' Data already exist for '+msg1+' actor and cannot be added.'
                messages.success(request,msg)
            except:
                messages.error(request,'Some error occured, please contact admin')
    
    inspType = list(inspectiontype_master.objects.filter(parent_id='-1',delete_flag=False,disable_flag=False).values('instypeid','name'))
    allActor = list(actor_details.objects.values('actorId','actorName'))
    lst = list(actor_with_inspType.objects.values('inspType','inspType_id__name').distinct().order_by('inspType'))
    actorList = []
    for i in range(len(lst)):
        lst1 = list(actor_with_inspType.objects.filter(inspType = lst[i]['inspType']).values_list('actorId_id__actorName',flat=True))
        allAct = ', '.join(lst1)
        actorList.append({'inspType':lst[i]['inspType_id__name'],'allActor':allAct})
    context = {
        'inspType':inspType,
        'allActor':allActor,
        'actorList':actorList,

    }
    return render(request,'actorForm.html',context)


def openAllPerformance(request, insp, actor):
    performance = []
    inspType = list(inspectiontype_master.objects.filter(parent_id='-1',delete_flag=False,disable_flag=False,name=insp).values('instypeid','name'))
    for i in range(len(inspType)):
        actorDetails = list(actor_with_inspType.objects.filter(inspType=inspType[i]['instypeid'],disable_flag=False,actorId_id__actorName=actor).values('actorId_id__actorName','actorId_id__actorId').order_by('actorId_id__actorName'))
        catType = list(inspectiontype_master.objects.filter(parent_id=inspType[i]['instypeid'],delete_flag=False,disable_flag=False,instypeid__in=m2.questionare_master.objects.filter(choicetype='2').values('instypeid_id')).values_list('instypeid',flat=True))
        eInspDet = list(einspection_details.objects.filter(instypeid=inspType[i]['instypeid']).values_list('einspno',flat=True))

        for k in range(len(actorDetails)):
            pDet = list(m2.actor_with_question.objects.filter(actionId=actorDetails[k]['actorId_id__actorId'],questionId__in=m2.questionare_master.objects.filter(choicetype__in=['2','9'],instypeid_id__in=catType).values('qid'),disable_flag=False).values_list('questionId',flat=True))
            
            totalScore = 0
            totLst =list(m2.questionare_master.objects.filter(qid__in = pDet).values('roption1_id__rscore','roption2_id__rscore','weightage','mixedChoices'))
            
            for i1 in range(len(totLst)):
                
                if totLst[i1]['roption1_id__rscore'] != None and totLst[i1]['roption1_id__rscore'] > 0:
                    totalScore = totalScore + (totLst[i1]['roption1_id__rscore'] * totLst[i1]['weightage'])
                elif totLst[i1]['roption2_id__rscore'] != None and totLst[i1]['roption2_id__rscore'] > 0:
                    totalScore = totalScore + (totLst[i1]['roption2_id__rscore'] * totLst[i1]['weightage'])
                else:
                    mixedChoices = len(str(totLst[i1]['mixedChoices']).split('$')) * totLst[i1]['weightage']
                    totalScore = totalScore + mixedChoices
            avg1 = totalScore
            diffActorVal = list(m2.actor_with_inspection_details.objects.filter(actorId = actorDetails[k]['actorId_id__actorId'],einspno__in=eInspDet).values_list('value',flat=True).distinct())
          
            for i2 in range(len(diffActorVal)):
                diffInsp = list(m2.actor_with_inspection_details.objects.filter(actorId = actorDetails[k]['actorId_id__actorId'],value = diffActorVal[i2],einspno__in=eInspDet).values_list('einspno',flat=True).distinct())
               
                totalScore = avg1 * len(diffInsp)
                if totalScore > 0:
                    totalNegScore = m2.einspection_item_detail.objects.filter(qid__in = pDet,einspno__in=diffInsp,value_id_id__rscore__lt = 1).count()
                    totalNegScoreMixedChoices = list(m2.einspection_item_detail.objects.filter(qid__in = pDet,einspno__in=diffInsp,value_id__isnull = True).values('value'))
                    totalTMC = 0
                    for tmc in range(len(totalNegScoreMixedChoices)):
                        totalTMC = totalTMC + len(str(totalNegScoreMixedChoices[tmc]['value']).split('$'))

                    posScore = totalScore - (totalNegScore+totalTMC)
                    avg = round(posScore / len(diffInsp) , 2)
                    performance.append({'sperinsp':avg1,'avg':avg,'diffInsp':len(diffInsp),'totalScore':totalScore,'posScore':posScore,'value':diffActorVal[i2]})
            
           
    performance = sorted(performance, key = lambda x: x['avg'],reverse = True)
    context = {
        'insp':insp,
        'actor':actor,
        'performance':performance,

    }
    return render(request,'openAllPerformance.html',context)


def fiStartPage(request):
    email=str(request.user)
    userDetails=Level_Desig.objects.filter(official_email_ID=email)[0]
    userDetails=userDetails.empno.empno
    allDepartment=list(departMast.objects.filter(delete_flag=False).values('department_name','department_code').order_by('department_name'))
    deptId = '07'
    if request.method == 'POST':
        submitValue = request.POST.get('submit')
        if submitValue == 'deptTypeId':
            deptId = request.POST.get('department_code')
    inspType = list(inspectiontype_master.objects.filter(parent_id='-1',delete_flag=False,disable_flag=False,concerned_dept=deptId).values('instypeid','name'))


    
    context = {
        'allDepartment':allDepartment,
        'inspType':inspType,
        'deptId':deptId,
        

    }
    return render(request,'fiStartPage.html',context)

def openAllQuestions(request, actor, insp):
    inspId = list(inspectiontype_master.objects.filter(name=insp,parent_id='-1',delete_flag=False,disable_flag=False).values('instypeid'))[0]['instypeid']
   
    catType = list(inspectiontype_master.objects.filter(parent_id=inspId,delete_flag=False,disable_flag=False,instypeid__in=m2.questionare_master.objects.filter(choicetype__in=['2','9']).values('instypeid_id')).values('instypeid','name'))

    defDetails = []
    for i in range(len(catType)): 
        questions = list(m2.questionare_master.objects.filter(choicetype__in=['2','9'],instypeid_id=catType[i]['instypeid'],qid__in=m2.actor_with_question.objects.filter(actionId_id__actorName=actor,disable_flag=False).values('questionId')).values('qid','activity','weightage','mixedChoices','choicetype'))
        if len(questions) > 0:
            defDetails.append({'typ':'cat','name':catType[i]['name']})
            for j in range(len(questions)):
                if questions[j]['choicetype'] in [9]:
                    total = len(questions[j]['mixedChoices'].split('$')) * questions[j]['weightage']
                else:
                    total = questions[j]['weightage']
                defDetails.append({'typ':'def','name':questions[j]['activity'],'qid':questions[j]['qid'],'slno': j+1,'weightage':total})
                

    context = {
        'insp':insp,
        'actor':actor,
        'defDetails':defDetails,
    }
    return render(request,'openAllQuestions.html',context)


from django.db import connection
def openActorDetails(request, actor, val):
    lst1 = list(actor_details.objects.filter(actorName=actor).values())
    viewName = lst1[0]['viewName']
    ViewFilter = lst1[0]['viewFilter'] 
    viewColumn = lst1[0]['viewColumn'].split(',')
    val = val.split('$$$')
    cursor = connection.cursor()
    viewData=[]
    for i in val:
        qry = ''' select * from "%s" where "%s" = '%s';''' % (viewName, ViewFilter, i)
        cursor.execute(qry)
        viewData.extend(cursor.fetchall())
    cursor.close()
    context = {
        'insp':val,
        'actor':actor,
        'viewData':viewData,
        'viewColumn':viewColumn,
    }
    return render(request,'openActorDetails.html',context)





####  with library encrypt hindi fint also
import base64 
from Crypto.Cipher import AES
from Crypto.Util.Padding import pad,unpad

def encryptWithAesEinspect(data):
        key = 'AAAAAAAAAAAAAAAA'
        iv =  'BBBBBBBBBBBBBBBB'.encode('utf-8')
        data= pad(data.encode(),16)
        cipher = AES.new(key.encode('utf-8'),AES.MODE_CBC,iv)
        encrypted = base64.b64encode(cipher.encrypt(data))
        return encrypted.decode("utf-8", "ignore")


def decryptWithAesEinspect(enc):
        key = 'AAAAAAAAAAAAAAAA'
        iv =  'BBBBBBBBBBBBBBBB'.encode('utf-8')
        enc = base64.b64decode(enc)
        cipher = AES.new(key.encode('utf-8'), AES.MODE_CBC, iv)
        decrypted = unpad(cipher.decrypt(enc),16)
        return decrypted.decode("utf-8", "ignore")





#############################################################################################################################################################
# SIRI FORM Start      # Ayushi Lal
#############################################################################################################################################################

@login_required
def AddIssue(request):
    email=request.user
    department1=list(Level_Desig.objects.filter(official_email_ID=email).values('department'))
    department=department1[0]['department']
    # print('department ',department)
    result2=list(departMast.objects.filter(Q(delete_flag='False') & ~Q(department_name=department)).distinct('department_name').values('department_code','department_name'))

    return render(request,"AddIssue.html",{'result2':result2,'department':department})    

def saveIssue(request):
    if request.method=='GET':
        department = request.GET.get('department')
        issue = request.GET.get('issue')
        department_code1 = list(departMast.objects.filter(department_name=department).values('department_code'))
        department_code = department_code1[0]['department_code']
        # print('department_code',department_code)
        m2.IssueCategory.objects.create(department_code_id=department_code,issue_category=issue)
        return JsonResponse({'success':True},safe=False)
    return JsonResponse({"success":False},status=400)

@login_required
def siriForm(request):
    # result=list(railwayLocationMaster.objects.filter(location_type='ZR').distinct('location_code').values('rly_unit_code','location_code'))
    instypeid = list(inspectiontype_master.objects.filter(shortcode = 'CIRI').values('instypeid'))[0]['instypeid']
    all_department = {
        'department_code': 0,
        'department_name': 'ALL'
    }
    result2=list(departMast.objects.filter(delete_flag='False').distinct('department_name').values('department_code','department_name').order_by('department_name'))
    # result2.insert(0, all_department)
    department_name = all_department['department_name'] 
    # # print('rly_unit_code',rly_unit_code);    
    # # print('work: ',result2)
    # print("\n")
    asset=list(question_sub_category_master.objects.filter(disable_flag = False).values('sub_id','sub_category').order_by('sub_id'))
    # print(asset)
    email = request.user
    rly_unit=list(Level_Desig.objects.filter(official_email_ID=email).values('rly_unit_id'))
    rly_unit1=rly_unit[0]['rly_unit_id']
    dlevel=list(Level_Desig.objects.filter(official_email_ID=email).values('d_level'))
    division=''
    zone=''
    officers=''
    if dlevel[0]['d_level']=='GM':
        zone1=list(railwayLocationMaster.objects.filter(rly_unit_code=rly_unit1).values('location_code'))
        zone=zone1[0]['location_code']
        # division1=list(railwayLocationMaster.objects.filter(rly_unit_code=rly_unit1).values('location_code'))
        # division=division1[0]['location_code']
    elif dlevel[0]['d_level']=='DRM':
        zone1=list(railwayLocationMaster.objects.filter(rly_unit_code=rly_unit1).values('parent_location_code'))
        zone=zone1[0]['parent_location_code']
        division1=list(railwayLocationMaster.objects.filter(rly_unit_code=rly_unit1).values('rly_unit_code','location_code'))
        division=division1[0]['location_code']
        division_id=division1[0]['rly_unit_code']
        officers=list(Level_Desig.objects.filter(div_id=division_id).values('designation_code','designation').order_by('designation'))
    elif dlevel[0]['d_level']=='BO':
        zone1=list(railwayLocationMaster.objects.filter(rly_unit_code=rly_unit1).values('parent_location_code'))
        zone=zone1[0]['parent_location_code']
        division1=list(railwayLocationMaster.objects.filter(rly_unit_code=rly_unit1).values('rly_unit_code','location_code'))
        division=division1[0]['location_code']  
        division_id=division1[0]['rly_unit_code']
        officers=list(Level_Desig.objects.filter(div_id=division_id).values('designation_code','designation').order_by('designation'))
    else:
        zone1=list(railwayLocationMaster.objects.filter(rly_unit_code=rly_unit1).values('parent_location_code'))
        zone=zone1[0]['parent_location_code']
        division1=list(railwayLocationMaster.objects.filter(rly_unit_code=rly_unit1).values('rly_unit_code','location_code'))
        division=division1[0]['location_code']  
        division_id=division1[0]['rly_unit_code']
        officers=list(Level_Desig.objects.filter(div_id=division_id).values('designation_code','designation').order_by('designation'))
    # zone2=list(railwayLocationMaster.objects.filter(rly_unit_code=rly_unit1).values('parent_location_code'))
    # zone3=zone2[0]['parent_location_code']
    # zone1=list(railwayLocationMaster.objects.filter(rly_unit_code=rly_unit1).values('parent_location_code'))
    # zone=zone1[0]['parent_location_code']
    # # print('zone ',zone)
    # if dlevel[0]['d_level']!='GM':
    #     division1=list(railwayLocationMaster.objects.filter(rly_unit_code=rly_unit1).values('location_code'))
    #     division=division1[0]['location_code']
    # # print('division ',division)
    print('zone',zone)
    result=list(railwayLocationMaster.objects.filter(Q(location_type='ZR') & ~Q(location_code=zone)).distinct('location_code').values('rly_unit_code','location_code'))
    divisionList=list(railwayLocationMaster.objects.filter(Q(location_type='DIV',parent_location_code=zone) & ~Q(location_code=division)).distinct('location_code').values('location_code'))
    # # print('divisionList ',divisionList)
    train=list(train_master.objects.filter(railway_code=zone,div_id_id_id=rly_unit1).values('train_no','train_name').order_by('train_name'))
    # # print('etwyqt',train
    # )
    station = list(station_master.objects.filter(railway_code=zone,div_id_id=rly_unit1).distinct('station_name').values('station_name','stnshortcode').order_by('station_name'))
    # # print('station ',station)
    sectionCode = list(section_master.objects.filter(railway_code=zone,div_id_id=rly_unit1).values('section_code').order_by('section_code'))
    # # print('sectionCode ',sectionCode)
    # station1,startStation,endStation=[],'',''
    sectioncode=[]
    +4
    for i in range(len(sectionCode)):
        sectioncode.append(sectionCode[i]['section_code'])
    # # print('sectionCode ',sectioncode)
    sectionlist,x=[],''
    # # print('sectioncode',sectioncode)
    for i in range(len(sectioncode)):
        x=list(section_master.objects.filter(section_code=sectioncode[i]).values('secstart_code_id','secend_code_id'))
        a=x[0]['secstart_code_id']
        b=x[0]['secend_code_id']
        c=a+','+b
        sectionlist.append(c)
    # # print('sectionlist ',sectionlist)
    section_code1=[]
    for i in range(len(sectionlist)):
        start=sectionlist[i].split(',')[0]
        end=sectionlist[i].split(',')[1]
        startlist=list(station_master.objects.filter(stnshortcode=start).values('station_name'))
        startstation=startlist[0]['station_name']
        endlist=list(station_master.objects.filter(stnshortcode=end).values('station_name'))
        endstation=endlist[0]['station_name']
        final = startstation+'-'+endstation
        section_code1.append(final)
    # # print(section_code1)    

    
    
    if request.method=='POST':
        rlyorg = request.POST.get('rlyorg')
        division = request.POST.get('division')
        # department = request.POST.get('department')
        # print('department: ',department)
        # print('rlyorg: ',rlyorg)
        # print('division: ',division)
        division = division.split(',')[0]
        # print('division: ',division)
        issuetitle = request.POST.get('issuetitle')
        # print('issuetitle: ',issuetitle)

        issuedescription = request.POST.get('issuedescription')
        reporttime = datetime.now()
        # reporttime = request.POST.get('reporttime')
        location = request.POST.get('location')
        # print(location)
        priority = request.POST.get('priority')
        if priority == 'High':
            priority = 1
        elif priority == 'Medium':
            priority = 2
        elif priority == 'NA':
            priority = 0
        else:
            priority = 3
        gm = request.POST.get('namegm')
        drm = request.POST.get('drm')
        # print (gm,drm)
        
        description=request.POST.get('Description')
        # # print('Description: ',description)
        if description == 'train':
            trainNo = request.POST.get('trainNo')
        elif description == 'station':
            autoStation = request.POST.get('stationname')
        elif description == 'section':
            autoSection = request.POST.get('autoSection')
        elif description == 'other':
            other = request.POST.get('addOther')
            # # print('Other:  ',other)
        
        inspectionType = request.POST.get('inspectionType')
        # print(inspectionType)
        inspectionType = inspectionType.split(' ')
        if len(inspectionType) == 3:
            is_scheduled = False
            inspection_type=3
        elif inspectionType[1] == 'Surprise':
            is_scheduled = False
            inspection_type=1
        elif inspectionType[1] == 'Night':
            is_scheduled = True
            inspection_type=2
        else:
            is_scheduled = True
            inspection_type=4

        max_id=0
        temp=list(m2.einspection_details.objects.filter(delete_flag=False).values())
        if len(temp)!=0:
            max_id = m2.einspection_details.objects.aggregate(Max('einspno'))['einspno__max']
            max_id+=1 
        else:
            max_id=1
        
        # # print('reporttime   ',reporttime)
        gmval=None
        if gm=='yes':
            gm_id = list(railwayLocationMaster.objects.filter(location_code=rlyorg).values('rly_unit_code'))
            a = gm_id[0]['rly_unit_code']
            
            desg_gm = list(Level_Desig.objects.filter(rly_unit_id=a,d_level='GM',parent_desig_code=1217).values('designation_code'))
            if len(desg_gm)>0:
                gmval=desg_gm[0]['designation_code'] 

        drmval=None  
        if drm=='yes':
            drm_id = list(railwayLocationMaster.objects.filter(parent_location_code=rlyorg,location_code=division).values('rly_unit_code'))
            b = drm_id[0]['rly_unit_code']
            # # print('bbbb ',b)
            desg_drm = list(Level_Desig.objects.filter(rly_unit_id=b,d_level='DRM').values('designation_code'))
            if len(desg_drm)>0:
                drmval = desg_drm[0]['designation_code'] 
        
        # # print('length: ',department)
        # # print('length: ',len(department))
        # department_code = department.split(',')[1]
        # dept_code=departMast.objects.filter(department_name=department_name).first().department_code
        # print(dept_code)
        # department_name,x,y=[],'',''
        # department_code=[]
        # for i in range(len(department)):
        #     x=department[i].split(',')[0]
        #     # print('x ',x)
        #     department_name.append(x)
        #     y=department[i].split(',')[1]
        #     # print('y ',type(y))
        #     department_code.append(int(y)) 
        # # print('yhhhbh: ',department_code,department_name)
        
        try:
            imagepath = request.FILES['imagepath']
            # print(imagepath,' image Path')
        except:
            imagepath='documents/Screenshot.png'
        rly_unit_code = list(railwayLocationMaster.objects.filter(parent_location_code=rlyorg,location_code=division).values('rly_unit_code'))
        
        # print('\n\nqwertyusvbdnmd',rly_unit_code)
        x = rly_unit_code[0]['rly_unit_code']

        desgn_id = list(Level_Desig.objects.filter(official_email_ID=request.user).values('designation_code'))
        designation_code_id = desgn_id[0]['designation_code']
        rlyzone = list(railwayLocationMaster.objects.filter(location_code=rlyorg).values('rly_unit_code'))
        rly_zone=rlyzone[0]['rly_unit_code']
        div_id = railwayLocationMaster.objects.filter(Q(location_code=division) & Q(location_type='DIV'))[0]
        rly_id = railwayLocationMaster.objects.filter(Q(location_code=rlyorg) & Q(location_type='ZR'))[0]
        # print('issuetitle',issuetitle)
        issuetitle_id = question_sub_category_master.objects.filter(Q(sub_id=issuetitle))[0]
        # print('issuetitle_id',issuetitle_id)
        # departmentFinal=''
        # for i in range(len(department_name)): 
        #     departmentFinal=str(department_name[i])  + '/' + str(departmentFinal)
        # # print('departmentFinal: ',departmentFinal)
        officer_designation_code = request.POST.get('officer')
        print(officer_designation_code)
        officer = list(Level_Desig.objects.filter(designation_code=officer_designation_code).values())
        print(officer)
        print(officer[0])
        inspection=inspectiontype_master.objects.filter(instypeid=instypeid,delete_flag=False)[0]
        dept_code=departMast.objects.filter(department_code=officer[0]['department_code_id'])[0]
        currentDateTime = datetime.now()
        date = currentDateTime.date()
        year=date.strftime("%Y")
        d=Level_Desig.objects.filter(official_email_ID=request.user).values('designation')
        # print(d)
        inspection_note_no = str(year)+'/'+str(d[0]['designation']) + '/' + str(inspection.name) + '/' + str(max_id)

        createdby=list(Level_Desig.objects.filter(official_email_ID=request.user).values('empno'))
        datenow1=datetime.now()
        datenow=datenow1.date()
        # # print('datenow ',datenow)
        if description == 'train':
            x='CIRI Inspection of '+ description.title() +': ' + trainNo +' - by '+ d[0]['designation'] +' on '+ str(datenow)
        elif description == 'station':
            x='CIRI Inspection of '+ description.title() +': ' + autoStation +' - by '+ d[0]['designation'] +' on '+ str(datenow)
        elif description == 'section':
            x='CIRI Inspection of '+ description.title() +': ' + autoSection +' - by '+ d[0]['designation'] +' on '+ str(datenow)
        elif description == 'other':
            x='CIRI Inspection of '+ other +' - by '+ d[0]['designation'] +' on '+ str(datenow)
        if description =='train':
            obj1 = m2.einspection_details.objects.create(entitydetails='Train',
            entityid=trainNo,
            inspected_on=reporttime,
            created_on=reporttime,
            created_by=createdby[0]['empno'],
            lastmodified_by=createdby[0]['empno'],
            lastmodified_on=reporttime,
            designation_id=designation_code_id,
            status=1,
            commanDepartment=officer[0]['department_code_id'],
            dept=dept_code,
            rly_id_id=rly_id,
            div_id_id=div_id,
            documents=imagepath,
            drm=drmval,
            gm=gmval,
            inspection_title=x,
            instypeid=inspection,
            inspection_note_no=inspection_note_no,
            is_scheduled=is_scheduled,
            inspection_type=inspection_type)
            
        elif description =='station':
            obj1 = m2.einspection_details.objects.create(entitydetails='Station',entityid=autoStation,inspected_on=reporttime,created_on=reporttime,created_by=createdby[0]['empno'],lastmodified_by=createdby[0]['empno'],lastmodified_on=reporttime,designation_id=designation_code_id,status=1,commanDepartment=officer[0]['department_code_id'],dept=dept_code,rly_id_id=rly_id,div_id_id=div_id,documents=imagepath,drm=drmval,gm=gmval,inspection_title=x,instypeid=inspection,inspection_note_no=inspection_note_no,is_scheduled=is_scheduled,inspection_type=inspection_type)

        elif description =='section':
            obj1 = m2.einspection_details.objects.create(entitydetails='Section',entityid=autoSection,inspected_on=reporttime,created_on=reporttime,created_by=createdby[0]['empno'],lastmodified_by=createdby[0]['empno'],lastmodified_on=reporttime,designation_id=designation_code_id,status=1,commanDepartment=officer[0]['department_code_id'],dept=dept_code,rly_id_id=rly_id,div_id_id=div_id,documents=imagepath,drm=drmval,gm=gmval,inspection_title=x,instypeid=inspection,inspection_note_no=inspection_note_no,is_scheduled=is_scheduled,inspection_type=inspection_type)

        elif description =='other':
            obj1 = m2.einspection_details.objects.create(entitydetails='Other',entityid=other,inspected_on=reporttime,created_on=reporttime,created_by=createdby[0]['empno'],lastmodified_by=createdby[0]['empno'],lastmodified_on=reporttime,designation_id=designation_code_id,status=1,commanDepartment=officer[0]['department_code_id'],dept=dept_code,rly_id_id=rly_id,div_id_id=div_id,documents=imagepath,drm=drmval,gm=gmval,inspection_title=x,instypeid=inspection,inspection_note_no=inspection_note_no,is_scheduled=is_scheduled,inspection_type=inspection_type)
        
        obj2=m2.einspection_item_detail.objects.create(einspno=obj1,item_type_id=issuetitle_id,status=1,remarks=issuedescription,location=location,priority=priority,qtype='SIRI',created_on=reporttime,created_by=createdby[0]['empno'],lastmodified_by=createdby[0]['empno'],lastmodified_on=reporttime)
        
        m2.einsp_marked.objects.create(eitemid=obj2,marked_to_id=officer[0]['designation_code'],marked_emp_id=officer[0]['empno_id'],forward_count=0,created_on=reporttime,created_by=createdby[0]['empno'],lastmodified_by=createdby[0]['empno'],lastmodified_on=reporttime,status_flag=1,counter=0,revert=0,designation_by=d[0]['designation'],department_id=officer[0]['department_code_id'],designation=officer[0]['designation'])

        if obj1:
            messages.success(request,'Data Added Successfully')
            return redirect('siriForm')

        else:
            messages.error(request,'Error while adding data')
            
        
        # # print('\n\ndesignation_code_id',designation_code_id,'\n')
        
    return render(request,"siriForm.html",{'result':result,'result2':result2,'zone':zone,'division':division,'divisionList':divisionList,'train':train,'station':station,'section_code1':section_code1,'asset':asset,'department_name':department_name,'officers':officers})

def getConcernedOfficerList(request):
    if request.method == "GET":
        department = request.GET.get('department')
        division = request.GET.get('division')
        division_id = list(railwayLocationMaster.objects.filter(location_code = division).values_list('rly_unit_code',flat=True))
        division_id = division_id[0]
        if department == 'ALL':
            result=list(Level_Desig.objects.exclude(official_email_ID=email).filter(div_id=division_id).values('designation_code','designation').order_by('designation'))
        else:
            result=list(Level_Desig.objects.exclude(official_email_ID=email).filter(div_id=division_id,department=department).values('designation_code','designation').order_by('designation'))
        return JsonResponse(result,safe=False)
    return JsonResponse({"success":False},status=400)

def division_wise(request):
    if request.method == "GET":
        zone = request.GET.get('rlyorg')
        division = request.GET.get('division')
        result=list(railwayLocationMaster.objects.filter(location_type='DIV',parent_location_code=zone).distinct('location_code').values('location_code'))
        return JsonResponse(result,safe=False)
    return JsonResponse({"success":False},status=400)

def getdescripwise(request):
    # print('dshakjzbcKJ')
    if request.method=='GET':
        description=request.GET.get('description')
        print('description ',description)
        division=request.GET.get('division')
        division = division.split(',')[0]
        print('division',division)
        rly_unit1=list(railwayLocationMaster.objects.filter(Q(location_code=division) & Q(location_type="DIV")).values('rly_unit_code'))
        print('rly_unit1 ',rly_unit1)
        if description =='section':
            sectionCode = list(section_master.objects.filter(div_id_id=rly_unit1[0]['rly_unit_code']).values('section_code').order_by('section_code'))
            # # print(sectionCode)
            sectioncode=[]
            for i in range(len(sectionCode)):
                sectioncode.append(sectionCode[i]['section_code'])
            sectionlist,x=[],''
            for i in range(len(sectioncode)):
                x=list(section_master.objects.filter(section_code=sectioncode[i]).values('secstart_code_id','secend_code_id'))
                a=x[0]['secstart_code_id']
                b=x[0]['secend_code_id']
                c=a+','+b
                sectionlist.append(c)
                section_code1=[]
            for i in range(len(sectionlist)):
                start=sectionlist[i].split(',')[0]
                end=sectionlist[i].split(',')[1]
                startlist=list(station_master.objects.filter(stnshortcode=start).values('station_name'))
                startstation=startlist[0]['station_name']
                endlist=list(station_master.objects.filter(stnshortcode=end).values('station_name'))
                endstation=endlist[0]['station_name']
                final = startstation+'-'+endstation
                section_code1.append(final)
            # # print(section_code1)
            return JsonResponse({'section_code1':section_code1,'description':description},safe=False)
        if description=='train':
            train=list(train_master.objects.filter(div_id_id_id=rly_unit1[0]['rly_unit_code']).values('train_no','train_name').order_by('train_name'))
            # print('train ',train)
            return JsonResponse({'train':train,'description':description},safe=False)
        if description=='station':
            station1 = list(station_master.objects.filter(div_id_id=rly_unit1[0]['rly_unit_code']).distinct('station_name').values('station_name').order_by('station_name'))
            # print(station1)
            stationname,st=[],''
            for i in range(len(station1)):
                st = station1[i]['station_name']
                stationname.append(st)
            # print(stationname)    
            return JsonResponse({'stationname':stationname,'description':description},safe=False)    
    return JsonResponse({"success":False},status=400)    

def showUserData(request):
    instypeid = list(inspectiontype_master.objects.filter(shortcode = 'CIRI').values('instypeid'))[0]['instypeid']
    if request.method=='GET':
        email = request.user
        # print(email)
        user=[]
        dlevel=list(Level_Desig.objects.filter(official_email_ID=email).values('d_level'))
        # print('dlevel',dlevel)
        dlevel1=dlevel[0]['d_level']
        # print('dlevel1',dlevel1)
        createdby=list(Level_Desig.objects.filter(official_email_ID=request.user).values('empno'))
        # print('createdby',createdby)

        if dlevel1=='GM':
            id = list(Level_Desig.objects.filter(official_email_ID=email,d_level='GM').values('designation_code'))
            # code = id[0]['designation_code']
            user = list(m2.einspection_details.objects.filter(created_by=createdby[0]['empno'], instypeid=instypeid).values('documents','created_on','dept_id__department_name','status').order_by('-einspno'))
            ids = list(m2.einspection_details.objects.filter(created_by=createdby[0]['empno'], instypeid=instypeid).values('einspno').order_by('-einspno'))
            for i in range(len(ids)):
                dataa=m2.einspection_item_detail.objects.filter(einspno=ids[i]['einspno'])[0]
                # print('dataa',dataa)
                user[i].update({'issuetitle':dataa.item_type_id.sub_category,'issuedescription':dataa.remarks,'location':dataa.location, 'priority':dataa.priority})
            # print('\n\nuserrrrrrrrr\n',user)
            return JsonResponse({'user':user,'dlevel':dlevel1},safe=False)
        if dlevel1 =="DRM":
            id = list(Level_Desig.objects.filter(official_email_ID=email,d_level='DRM').values('designation_code'))
            code = id[0]['designation_code']
            user = list(m2.einspection_details.objects.filter(created_by=createdby[0]['empno'], instypeid=instypeid).values('documents','created_on','dept_id','status').order_by('-einspno'))
            # print('user',user)
            ids = list(m2.einspection_details.objects.filter(created_by=createdby[0]['empno'], instypeid=instypeid).values('einspno').order_by('-einspno'))
            # print('ids ',ids)
            for i in range(len(ids)):
                dataa=m2.einspection_item_detail.objects.filter(einspno=ids[i]['einspno'])[0]
                # print('dataa',dataa)
                commanDepartment = user[0]['dept_id']
                # print(commanDepartment)
                dept=departMast.objects.filter(department_code=commanDepartment).values_list('department_name', flat=True).first()
                # print(dept)
                user[i].update({'issuetitle':dataa.item_type_id.sub_category,'issuedescription':dataa.remarks,'location':dataa.location, 'priority':dataa.priority, 'dept_id__department_name':dept})
            # print('\n\nuserrrrrrrrr\n',user)   
            return JsonResponse({'user':user,'dlevel':dlevel1},safe=False)

        if dlevel1 == 'BO':
            # department = request.GET.get('department')
            division = request.GET.get('division')
            # print('\n\nrequest.user',request.user) 
            rly_unit=list(Level_Desig.objects.filter(official_email_ID=request.user).values('rly_unit_id'))
            rly_unit1=rly_unit[0]['rly_unit_id']
            # print('rly_unit_id',rly_unit1)
            # rly_unit_code1 = list(railwayLocationMaster.objects.filter(rly_unit_code=rly_unit1).values('location_code'))
            # b = rly_unit_code1[0]['location_code']
            # # print('division',b)
            b=list(railwayLocationMaster.objects.filter(Q(location_code=division) & Q(location_type='DIV') ).values('rly_unit_code'))
            # print('bb ',b)
            

            department1=list(Level_Desig.objects.filter(official_email_ID=email).values('department'))
            department=department1[0]['department']
            # print('department ',department)
            # user = list(m2.einspection_details.objects.filter((Q(div_id_id=b[0]['rly_unit_code']) & Q(dept=department) & Q(instypeid=None,instypeid_id__isnull=True)) | (Q(created_by=createdby[0]['empno']))).values('documents','created_on','dept_id__department_name','location','priority','status').order_by('-einspno'))
            user = list(m2.einspection_details.objects.filter(created_by=createdby[0]['empno'], instypeid=instypeid).values('documents','created_on','dept_id__department_name','status').order_by('-einspno'))
            # # print('rttt',user[0]['dept_id__department_name'])
            ids = list(m2.einspection_details.objects.filter(created_by=createdby[0]['empno'], instypeid=instypeid).values('einspno').order_by('-einspno'))
            # print(ids)
            for i in range(len(ids)):
                # print('ids[i][einspno]',ids[i]['einspno'])
                dataa = m2.einspection_item_detail.objects.filter(einspno=ids[i]['einspno'])[0]
                # print(dataa)
                
                issuetitle = dataa.item_type_id.sub_category
                # print('issuetitle',issuetitle)
                
                user[i].update({'issuetitle':dataa.item_type_id.sub_category,'issuedescription':dataa.remarks,'location':dataa.location, 'priority':dataa.priority})
           
            # print('\n\nuserrrrrrrrr\n',user)
            return JsonResponse({'user':user,'dlevel':dlevel1},safe=False)
        else:
            user = list(m2.einspection_details.objects.filter(created_by=createdby[0]['empno'],instypeid_id=instypeid).order_by('-einspno').values('documents','created_on','dept_id__department_name','status')) 
            # print('\n\nuserrrrrrrrr\n',user)
            ids = list(m2.einspection_details.objects.filter(created_by=createdby[0]['empno'], instypeid=instypeid).values('einspno').order_by('-einspno'))
            # print(ids)
            for i in range(len(ids)):
                # print('ids[i][einspno]',ids[i]['einspno'])
                dataa = m2.einspection_item_detail.objects.filter(einspno=ids[i]['einspno'])[0]
                # print(dataa)
                
                issuetitle = dataa.item_type_id.sub_category
                # print('issuetitle',issuetitle)
                
                user[i].update({'issuetitle':dataa.item_type_id.sub_category,'issuedescription':dataa.remarks,'location':dataa.location, 'priority':dataa.priority})
           
            return JsonResponse({'user':user},safe=False)   
    return JsonResponse({'success':False},status=404)

def showUserComaplaints(request):
    if request.method=='GET':
        email = request.user
        status = request.GET.get('status', None)
        print('status',status)
        
        print(email)
        user=[]
        dlevel=list(Level_Desig.objects.filter(official_email_ID=email).values('d_level'))
        # print(dlevel)
        dlevel1=dlevel[0]['d_level']
        # print(dlevel1)
        # user_d_level = {

        # }
        createdby=list(Level_Desig.objects.filter(official_email_ID=request.user).values('empno'))
        if status == 'Pending':
            if dlevel1=='GM':
                id = Level_Desig.objects.filter(official_email_ID=email).   values('designation_code')[0]
                code = id['designation_code']
                # # print(code,'code123')
                user = list(m2.einsp_marked.objects.filter(Q(marked_to=id   ['designation_code']) & Q (eitemid_id__qid_id=None, status_flag = 1, target_date__isnull = True)).values    ('eitemid_id__item_type_id__sub_category',  'eitemid_id__remarks','eitemid_id__einspno_id__documents',    'eitemid_id__priority','eitemid_id__location',  'eitemid_id__einspno_id','eitemid_id__einspno_id__created_on',    'designation_by','designation','status_flag','target_date').order_by  ('-eitemid_id__einspno_id'))
                return JsonResponse({'user':user,'dlevel':dlevel1},safe=False)

            if dlevel1 =="DRM":
                id = Level_Desig.objects.filter(official_email_ID=email).   values('designation_code')[0]
                # print('idd',id)
                code = id['designation_code']
                # print('code',code)
                print(id['designation_code'])
                user = list(m2.einsp_marked.objects.filter(Q(marked_to=id  ['designation_code']) & Q  (eitemid_id__qid_id=None, status_flag = 1, target_date__isnull = True)).values ('eitemid_id__item_type_id__sub_category',   'eitemid_id__remarks','eitemid_id__einspno_id__documents', 'eitemid_id__priority','eitemid_id__location',   'eitemid_id__einspno_id','eitemid_id__einspno_id__created_on', 'designation_by','designation','status_flag','target_date').order_by   ('-eitemid_id__einspno_id'))
                print('\n\nuserrrrrrrrr\n',user,'\n',len(user))
                return JsonResponse({'user':user,'dlevel':dlevel1},safe=False)

            if dlevel1 == 'BO':
                id = Level_Desig.objects.filter(official_email_ID=email).   values('designation_code')[0]
                user = list(m2.einsp_marked.objects.filter(counter=0,   marked_to=id['designation_code'], status_flag = 1, target_date__isnull = True).values   ('eitemid_id__item_type_id__sub_category', 'eitemid_id__remarks','eitemid_id__einspno_id__documents',   'eitemid_id__priority','eitemid_id__location', 'eitemid_id__einspno_id','eitemid_id__einspno_id__created_on',   'designation_by','designation','status_flag','target_date').order_by ('-eitemid_id__einspno_id'))
                print(user,'bdshbhcjbajkj')
                return JsonResponse({'user':user,'dlevel':dlevel1},safe=False)
        
            else:
                id = Level_Desig.objects.filter(official_email_ID=email).   values('designation_code')[0]
                user = list(m2.einsp_marked.objects.filter(counter=0,   marked_to=id['designation_code'], status_flag = 1, target_date__isnull = True).values   ('eitemid_id__item_type_id__sub_category', 'eitemid_id__remarks','eitemid_id__einspno_id__documents',   'eitemid_id__priority','eitemid_id__location', 'eitemid_id__einspno_id','eitemid_id__einspno_id__created_on',   'designation_by','designation','status_flag','target_date').order_by ('-eitemid_id__einspno_id'))
                print(user,'bdshbhcjbajkj')
                return JsonResponse({'user':user,'dlevel':dlevel1},safe=False)
        

            return JsonResponse({'user':user},safe=False)
        elif status == 'Forwarded':
            if dlevel1=='GM':
                id = Level_Desig.objects.filter(official_email_ID=email).   values('designation_code')[0]
                code = id['designation_code']
                # # print(code,'code123')
                user = list(m2.einsp_marked.objects.filter(Q(marked_to=id   ['designation_code']) & Q (eitemid_id__qid_id=None, status_flag = 5)).values    ('eitemid_id__item_type_id__sub_category',  'eitemid_id__remarks','eitemid_id__einspno_id__documents',    'eitemid_id__priority','eitemid_id__location',  'eitemid_id__einspno_id','eitemid_id__einspno_id__created_on',    'designation_by','designation','status_flag','target_date').order_by  ('-eitemid_id__einspno_id'))
                return JsonResponse({'user':user,'dlevel':dlevel1},safe=False)

            if dlevel1 =="DRM":
                id = Level_Desig.objects.filter(official_email_ID=email).   values('designation_code')[0]
                # print('idd',id)
                code = id['designation_code']
                # print('code',code)
                print(id['designation_code'])
                user = list(m2.einsp_marked.objects.filter(Q(marked_to=id  ['designation_code']) & Q  (eitemid_id__qid_id=None, status_flag = 5)).values ('eitemid_id__item_type_id__sub_category',   'eitemid_id__remarks','eitemid_id__einspno_id__documents', 'eitemid_id__priority','eitemid_id__location',   'eitemid_id__einspno_id','eitemid_id__einspno_id__created_on', 'designation_by','designation','status_flag','target_date').order_by   ('-eitemid_id__einspno_id'))
                print('\n\nuserrrrrrrrr\n',user,'\n',len(user))
                return JsonResponse({'user':user,'dlevel':dlevel1},safe=False)

            if dlevel1 == 'BO':
                id = Level_Desig.objects.filter(official_email_ID=email).   values('designation_code')[0]
                user = list(m2.einsp_marked.objects.filter(status_flag = 5,   marked_to=id['designation_code']).values   ('eitemid_id__item_type_id__sub_category', 'eitemid_id__remarks','eitemid_id__einspno_id__documents',   'eitemid_id__priority','eitemid_id__location', 'eitemid_id__einspno_id','eitemid_id__einspno_id__created_on',   'designation_by','designation','status_flag','target_date').order_by ('-eitemid_id__einspno_id'))
                print(user,'bdshbhcjbajkj')
                return JsonResponse({'user':user,'dlevel':dlevel1},safe=False)
        
            else:
                id = Level_Desig.objects.filter(official_email_ID=email).   values('designation_code')[0]
                user = list(m2.einsp_marked.objects.filter(status_flag = 5,   marked_to=id['designation_code']).values   ('eitemid_id__item_type_id__sub_category', 'eitemid_id__remarks','eitemid_id__einspno_id__documents',   'eitemid_id__priority','eitemid_id__location', 'eitemid_id__einspno_id','eitemid_id__einspno_id__created_on',   'designation_by','designation','status_flag','target_date').order_by ('-eitemid_id__einspno_id'))
                print(user,'bdshbhcjbajkj')
                return JsonResponse({'user':user,'dlevel':dlevel1},safe=False)
        
            return JsonResponse({'user':user},safe=False)
        elif status == 'Completed':
            if dlevel1=='GM':
                id = Level_Desig.objects.filter(official_email_ID=email).   values('designation_code')[0]
                code = id['designation_code']
                # # print(code,'code123')
                user = list(m2.einsp_marked.objects.filter(Q(marked_to=id   ['designation_code']) & Q (eitemid_id__qid_id=None, status_flag = 3)).values    ('eitemid_id__item_type_id__sub_category',  'eitemid_id__remarks','eitemid_id__einspno_id__documents',    'eitemid_id__priority','eitemid_id__location',  'eitemid_id__einspno_id','eitemid_id__einspno_id__created_on',    'designation_by','designation','status_flag','target_date').order_by  ('-eitemid_id__einspno_id'))
                return JsonResponse({'user':user,'dlevel':dlevel1},safe=False)

            if dlevel1 =="DRM":
                id = Level_Desig.objects.filter(official_email_ID=email).   values('designation_code')[0]
                # print('idd',id)
                code = id['designation_code']
                # print('code',code)
                print(id['designation_code'])
                user = list(m2.einsp_marked.objects.filter(Q(marked_to=id  ['designation_code']) & Q  (eitemid_id__qid_id=None, status_flag = 3)).values ('eitemid_id__item_type_id__sub_category',   'eitemid_id__remarks','eitemid_id__einspno_id__documents', 'eitemid_id__priority','eitemid_id__location',   'eitemid_id__einspno_id','eitemid_id__einspno_id__created_on', 'designation_by','designation','status_flag','target_date').order_by   ('-eitemid_id__einspno_id'))
                print('\n\nuserrrrrrrrr\n',user,'\n',len(user))
                return JsonResponse({'user':user,'dlevel':dlevel1},safe=False)

            if dlevel1 == 'BO':
                id = Level_Desig.objects.filter(official_email_ID=email).   values('designation_code')[0]
                user = list(m2.einsp_marked.objects.filter(eitemid_id__qid_id=None, status_flag = 3,   marked_to=id['designation_code']).values   ('eitemid_id__item_type_id__sub_category', 'eitemid_id__remarks','eitemid_id__einspno_id__documents',   'eitemid_id__priority','eitemid_id__location', 'eitemid_id__einspno_id','eitemid_id__einspno_id__created_on',   'designation_by','designation','status_flag','target_date').order_by ('-eitemid_id__einspno_id'))
                print(user,'bdshbhcjbajkj')
                return JsonResponse({'user':user,'dlevel':dlevel1},safe=False)
        
            else:
                id = Level_Desig.objects.filter(official_email_ID=email).   values('designation_code')[0]
                user = list(m2.einsp_marked.objects.filter(eitemid_id__qid_id=None, status_flag = 3,   marked_to=id['designation_code']).values   ('eitemid_id__item_type_id__sub_category', 'eitemid_id__remarks','eitemid_id__einspno_id__documents',   'eitemid_id__priority','eitemid_id__location', 'eitemid_id__einspno_id','eitemid_id__einspno_id__created_on',   'designation_by','designation','status_flag','target_date').order_by ('-eitemid_id__einspno_id'))
                print(user,'bdshbhcjbajkj')
                return JsonResponse({'user':user,'dlevel':dlevel1},safe=False)
        
            return JsonResponse({'user':user},safe=False)
        elif status == 'Reverted':
            if dlevel1=='GM':
                id = Level_Desig.objects.filter(official_email_ID=email).   values('designation_code')[0]
                code = id['designation_code']
                # # print(code,'code123')
                user = list(m2.einsp_marked.objects.filter(Q(marked_to=id   ['designation_code']) & Q (eitemid_id__qid_id=None, status_flag = 4)).values    ('eitemid_id__item_type_id__sub_category',  'eitemid_id__remarks','eitemid_id__einspno_id__documents',    'eitemid_id__priority','eitemid_id__location',  'eitemid_id__einspno_id','eitemid_id__einspno_id__created_on',    'designation_by','designation','status_flag','target_date').order_by  ('-eitemid_id__einspno_id'))
                return JsonResponse({'user':user,'dlevel':dlevel1},safe=False)

            if dlevel1 =="DRM":
                id = Level_Desig.objects.filter(official_email_ID=email).   values('designation_code')[0]
                # print('idd',id)
                code = id['designation_code']
                # print('code',code)
                print(id['designation_code'])
                user = list(m2.einsp_marked.objects.filter(Q(marked_to=id  ['designation_code']) & Q  (eitemid_id__qid_id=None, status_flag = 4)).values ('eitemid_id__item_type_id__sub_category',   'eitemid_id__remarks','eitemid_id__einspno_id__documents', 'eitemid_id__priority','eitemid_id__location',   'eitemid_id__einspno_id','eitemid_id__einspno_id__created_on', 'designation_by','designation','status_flag','target_date').order_by   ('-eitemid_id__einspno_id'))
                print('\n\nuserrrrrrrrr\n',user,'\n',len(user))
                return JsonResponse({'user':user,'dlevel':dlevel1},safe=False)

            if dlevel1 == 'BO':
                id = Level_Desig.objects.filter(official_email_ID=email).   values('designation_code')[0]
                user = list(m2.einsp_marked.objects.filter(eitemid_id__qid_id=None, status_flag = 4,   marked_to=id['designation_code']).values   ('eitemid_id__item_type_id__sub_category', 'eitemid_id__remarks','eitemid_id__einspno_id__documents',   'eitemid_id__priority','eitemid_id__location', 'eitemid_id__einspno_id','eitemid_id__einspno_id__created_on',   'designation_by','designation','status_flag','target_date').order_by ('-eitemid_id__einspno_id'))
                print(user,'bdshbhcjbajkj')
                return JsonResponse({'user':user,'dlevel':dlevel1},safe=False)
        
            else:
                id = Level_Desig.objects.filter(official_email_ID=email).   values('designation_code')[0]
                user = list(m2.einsp_marked.objects.filter(eitemid_id__qid_id=None, status_flag = 4,   marked_to=id['designation_code']).values   ('eitemid_id__item_type_id__sub_category', 'eitemid_id__remarks','eitemid_id__einspno_id__documents',   'eitemid_id__priority','eitemid_id__location', 'eitemid_id__einspno_id','eitemid_id__einspno_id__created_on',   'designation_by','designation','status_flag','target_date').order_by ('-eitemid_id__einspno_id'))
                print(user,'bdshbhcjbajkj')
                return JsonResponse({'user':user,'dlevel':dlevel1},safe=False)
        
            return JsonResponse({'user':user},safe=False)
        elif status == 'In Progress':
            if dlevel1=='GM':
                id = Level_Desig.objects.filter(official_email_ID=email).   values('designation_code')[0]
                code = id['designation_code']
                # # print(code,'code123')
                user = list(m2.einsp_marked.objects.filter(Q(marked_to=id   ['designation_code']) & Q (eitemid_id__qid_id=None, status_flag = 1, target_date__isnull = False)).values    ('eitemid_id__item_type_id__sub_category',  'eitemid_id__remarks','eitemid_id__einspno_id__documents',    'eitemid_id__priority','eitemid_id__location',  'eitemid_id__einspno_id','eitemid_id__einspno_id__created_on',    'designation_by','designation','status_flag','target_date').order_by  ('-eitemid_id__einspno_id'))
                return JsonResponse({'user':user,'dlevel':dlevel1},safe=False)

            if dlevel1 =="DRM":
                id = Level_Desig.objects.filter(official_email_ID=email).   values('designation_code')[0]
                # print('idd',id)
                code = id['designation_code']
                # print('code',code)
                print(id['designation_code'])
                user = list(m2.einsp_marked.objects.filter(Q(marked_to=id  ['designation_code']) & Q  (eitemid_id__qid_id=None, status_flag = 1, target_date__isnull = False)).values ('eitemid_id__item_type_id__sub_category',   'eitemid_id__remarks','eitemid_id__einspno_id__documents', 'eitemid_id__priority','eitemid_id__location',   'eitemid_id__einspno_id','eitemid_id__einspno_id__created_on', 'designation_by','designation','status_flag','target_date').order_by   ('-eitemid_id__einspno_id'))
                print('\n\nuserrrrrrrrr\n',user,'\n',len(user))
                return JsonResponse({'user':user,'dlevel':dlevel1},safe=False)

            if dlevel1 == 'BO':
                id = Level_Desig.objects.filter(official_email_ID=email).   values('designation_code')[0]
                user = list(m2.einsp_marked.objects.filter(counter=0,   marked_to=id['designation_code'], status_flag = 1, target_date__isnull = False).values   ('eitemid_id__item_type_id__sub_category', 'eitemid_id__remarks','eitemid_id__einspno_id__documents',   'eitemid_id__priority','eitemid_id__location', 'eitemid_id__einspno_id','eitemid_id__einspno_id__created_on',   'designation_by','designation','status_flag','target_date').order_by ('-eitemid_id__einspno_id'))
                print(user,'bdshbhcjbajkj')
                return JsonResponse({'user':user,'dlevel':dlevel1},safe=False)
        
            else:
                id = Level_Desig.objects.filter(official_email_ID=email).   values('designation_code')[0]
                user = list(m2.einsp_marked.objects.filter(counter=0,   marked_to=id['designation_code'], status_flag = 1, target_date__isnull = False).values   ('eitemid_id__item_type_id__sub_category', 'eitemid_id__remarks','eitemid_id__einspno_id__documents',   'eitemid_id__priority','eitemid_id__location', 'eitemid_id__einspno_id','eitemid_id__einspno_id__created_on',   'designation_by','designation','status_flag','target_date').order_by ('-eitemid_id__einspno_id'))
                print(user,'bdshbhcjbajkj')
                return JsonResponse({'user':user,'dlevel':dlevel1},safe=False)
        
            return JsonResponse({'user':user},safe=False)
        elif status == 'Rejected':
            if dlevel1=='GM':
                id = Level_Desig.objects.filter(official_email_ID=email).   values('designation_code')[0]
                code = id['designation_code']
                # # print(code,'code123')
                user = list(m2.einsp_marked.objects.filter(Q(marked_to=id   ['designation_code']) & Q (eitemid_id__qid_id=None, reject = 1)).values    ('eitemid_id__item_type_id__sub_category',  'eitemid_id__remarks','eitemid_id__einspno_id__documents',    'eitemid_id__priority','eitemid_id__location',  'eitemid_id__einspno_id','eitemid_id__einspno_id__created_on',    'designation_by','designation','status_flag','target_date').order_by  ('-eitemid_id__einspno_id'))
                return JsonResponse({'user':user,'dlevel':dlevel1},safe=False)

            if dlevel1 =="DRM":
                id = Level_Desig.objects.filter(official_email_ID=email).   values('designation_code')[0]
                # print('idd',id)
                code = id['designation_code']
                # print('code',code)
                print(id['designation_code'])
                user = list(m2.einsp_marked.objects.filter(marked_to=id  ['designation_code'], eitemid_id__qid_id=None, reject = 1).values ('eitemid_id__item_type_id__sub_category',   'eitemid_id__remarks','eitemid_id__einspno_id__documents', 'eitemid_id__priority','eitemid_id__location',   'eitemid_id__einspno_id','eitemid_id__einspno_id__created_on', 'designation_by','designation','status_flag','target_date').order_by   ('-eitemid_id__einspno_id'))
                print('\n\nuserrrrrrrrr\n',user,'\n',len(user))
                return JsonResponse({'user':user,'dlevel':dlevel1},safe=False)

            if dlevel1 == 'BO':
                id = Level_Desig.objects.filter(official_email_ID=email).   values('designation_code')[0]
                user = list(m2.einsp_marked.objects.filter(eitemid_id__qid_id=None, reject = 1,   marked_to=id['designation_code']).values   ('eitemid_id__item_type_id__sub_category', 'eitemid_id__remarks','eitemid_id__einspno_id__documents',   'eitemid_id__priority','eitemid_id__location', 'eitemid_id__einspno_id','eitemid_id__einspno_id__created_on',   'designation_by','designation','status_flag','target_date').order_by ('-eitemid_id__einspno_id'))
                print(user,'bdshbhcjbajkj')
                return JsonResponse({'user':user,'dlevel':dlevel1},safe=False)
        
            else:
                id = Level_Desig.objects.filter(official_email_ID=email).   values('designation_code')[0]
                user = list(m2.einsp_marked.objects.filter(eitemid_id__qid_id=None, reject = 1,   marked_to=id['designation_code']).values   ('eitemid_id__item_type_id__sub_category', 'eitemid_id__remarks','eitemid_id__einspno_id__documents',   'eitemid_id__priority','eitemid_id__location', 'eitemid_id__einspno_id','eitemid_id__einspno_id__created_on',   'designation_by','designation','status_flag','target_date').order_by ('-eitemid_id__einspno_id'))
                print(user,'bdshbhcjbajkj')
                return JsonResponse({'user':user,'dlevel':dlevel1},safe=False)
        
            return JsonResponse({'user':user},safe=False)
        elif status == 'For Info':
            if dlevel1=='GM':
                id = Level_Desig.objects.filter(official_email_ID=email).   values('designation_code')[0]
                code = id['designation_code']
                # print(code,'code123')
                user = list(m2.einsp_marked.objects.filter(eitemid_id__einspno_id__gm=code, parent_mark = -1, eitemid_id__qid_id=None).values    ('eitemid_id__item_type_id__sub_category',  'eitemid_id__remarks','eitemid_id__einspno_id__documents',    'eitemid_id__priority','eitemid_id__location',  'eitemid_id__einspno_id','eitemid_id__einspno_id__created_on',    'designation_by','designation','status_flag','target_date').order_by  ('-eitemid_id__einspno_id'))
                print(user,'jhugyftdrtfrgyuhijj')
                return JsonResponse({'user':user,'dlevel':dlevel1},safe=False)

            if dlevel1 =="DRM":
                id = Level_Desig.objects.filter(official_email_ID=email).   values('designation_code')[0]
                # print('idd',id)
                code = id['designation_code']
                # print('code',code)
                print(id['designation_code'])
                user = list(m2.einsp_marked.objects.filter((Q (eitemid_id__einspno_id__drm=code)) & Q  (eitemid_id__qid_id=None, reject = 1)).values ('eitemid_id__item_type_id__sub_category',   'eitemid_id__remarks','eitemid_id__einspno_id__documents', 'eitemid_id__priority','eitemid_id__location',   'eitemid_id__einspno_id','eitemid_id__einspno_id__created_on', 'designation_by','designation','status_flag','target_date').order_by   ('-eitemid_id__einspno_id'))
                print('\n\nuserrrrrrrrr\n',user,'\n',len(user))
                return JsonResponse({'user':user,'dlevel':dlevel1},safe=False)
            return JsonResponse({'user':user},safe=False)
    
    return JsonResponse({'success':False},status=404)

def validatSearch(request):
    if request.method=='GET':
        priority = request.GET.get('priority')
        date = request.GET.get('date')
        category = request.GET.get('category')
        status = request.GET.get('status')

        # print('priority date category status',priority,date,category,status)
        result = list(m2.report_it.objects.filter(issuetitle=category,priority=priority,remarks=status).values())
        return JsonResponse({'result':result},safe=False)   
    return JsonResponse({'success':False},status=404)

def updateUser(request):
        # print('hdgyuasjz')
        if request.method=='GET':
            modalremarks=request.GET.get('modalremarks')
            Date=request.GET.get('modalDate')
            id=request.GET.get('id')
            radio=request.GET.get('radioValue')

            result=m2.einsp_marked.objects.filter(eitemid_id__einspno_id=id).order_by('-created_by').values()[0]
            designation_code=Level_Desig.objects.filter(empno_id=result['created_by'])[0]

            import datetime
            dateNo = datetime.date.strftime(datetime.date.today(), "%Y-%m-%d")
            dateNo1=datetime.datetime.now()
            # print(type(Date),' ',type(modalremarks))
            # print(id,' ',Date,' ',modalremarks)
            ids=m2.einspection_item_detail.objects.filter(einspno=id)[0]
            # print('idssss ',ids)
            if radio == 'pending':
                Date=datetime.strptime(Date,'%d/%m/%Y')
                Date=str(Date)
                # print('dateeee ',Date.split(' ')[0][0:11])
                # , target_date = date.split(' ')[0][0:11]
                curr_date=date.today()
                # print('Current Date: ',curr_date)

                m2.einsp_marked.objects.filter(eitemid=ids).update(compliance="Will be done by - " + Date.split(' ')[0][0:11], target_date=Date.split(' ')[0][0:11], target_date_given_on=curr_date) 
                    
            elif radio == 'close':
                m2.einsp_marked.objects.filter(eitemid=ids).update(compliance=modalremarks,status_flag=3)
                m2.einspection_details.objects.filter(einspno=id).update(status=4) 

            elif radio == 'revert':
                obj=m2.einsp_marked.objects.filter(id=result['id']).update(counter=int(result['counter'])+1,revert=1,reverted_on=dateNo1,lastmodified_on=dateNo,status_flag=4,lastmodified_by=result['marked_emp_id'])

                obj1=m2.einsp_marked.objects.create(eitemid=ids,marked_to=designation_code,department_id=result['department_id'],designation=designation_code.designation,designation_by=result['designation_by'],forward_count=result['forward_count'],marked_emp_id=designation_code.empno_id,compliance=modalremarks,created_by=result['marked_emp_id'],lastmodified_by=result['marked_emp_id'],created_on=dateNo1,lastmodified_on=dateNo1,revert=int(result['revert'])+1,counter=int(result['counter'])+1,parent_mark=result['id'],status_flag=1)

            # if Date =='':
            #     # print('remarks ',modalremarks)
            #     m2.einsp_marked.objects.filter(eitemid=ids).update(compliance=modalremarks,status_flag=3)
            #     m2.einspection_details.objects.filter(einspno=id).update(status=4) 
            # if modalremarks =='':
            #     # print('date' ,date)
            #     Date=datetime.strptime(Date,'%d/%m/%Y')
            #     Date=str(Date)
            #     # print('dateeee ',Date.split(' ')[0][0:11])
            #     # , target_date = date.split(' ')[0][0:11]
            #     curr_date=date.today()
            #     # print('Current Date: ',curr_date)

            #     m2.einsp_marked.objects.filter(eitemid=ids).update(compliance="Will be done by - " + Date.split(' ')[0][0:11], target_date=Date.split(' ')[0][0:11], target_date_given_on=curr_date) 
                    
            return JsonResponse({'success':True})
        return JsonResponse({'success':False},status=404)

def DataShowing(request):
    if request.method == 'GET':
        status = request.GET.get('status')
        email = request.user
        # print(email)
        # print('rfghjklfghbjnfghbjnm')
        # print('STATUS ',status)
        user=[]
        dlevel=list(Level_Desig.objects.filter(official_email_ID=email).values('d_level'))
        dlevel1=dlevel[0]['d_level']
        # print('\n\ndlevel1  ',dlevel1)
        # print('\n\ndlevel1  ',type(dlevel1))
        if dlevel1=='GM':
            id = list(Level_Desig.objects.filter(official_email_ID=email,d_level='GM').values('designation_code'))
            code = id[0]['designation_code']
            user = list(m2.report_it.objects.filter(gm=code).order_by('-id').values())
            # print('\n\nuserrrrrrrrr\n',user)
            return JsonResponse({'user':user,'dlevel':dlevel1},safe=False)
        if dlevel1 =="DRM":
            id = list(Level_Desig.objects.filter(official_email_ID=email,d_level='DRM').values('designation_code'))
            code = id[0]['designation_code']
            user = list(m2.report_it.objects.filter(drm=code).order_by('-id').values())
            # print('\n\nuserrrrrrrrr\n',user)
            return JsonResponse({'user':user,'dlevel':dlevel1},safe=False)
        if dlevel1 == 'BO':
            department = request.GET.get('department')
            division = request.GET.get('division')
            # print('\n\nrequest.user',request.user)
            email = request.user
            rly_unit=list(Level_Desig.objects.filter(official_email_ID=email).values('rly_unit_id'))
            rly_unit1=rly_unit[0]['rly_unit_id']
            # print('rly_unit_id',rly_unit1)
            rly_unit_code1 = list(railwayLocationMaster.objects.filter(rly_unit_code=rly_unit1).values('location_code'))
            b = rly_unit_code1[0]['location_code']
            # print('division',b)
            department1=list(Level_Desig.objects.filter(official_email_ID=email).values('department'))
            department=department1[0]['department']
            # print('department ',department)
            # rly_unit_code_details = list(Level_Desig.objects.filter(official_email_ID=email).values('department'))
            # # print('\n\nrly_unit_code_details ',rly_unit_code_details)
            # department = rly_unit_code_details[0]['department']
            # # print('\n\naaaaaa',a,'\n')
            user = list(m2.report_it.objects.filter(Q(division=b,department=department,remarks=status) | Q(empno_report=email,remarks=status)).order_by('-id').values())
            # print('\n\nuserrrrrrrrr\n',len(user))
            return JsonResponse({'user':user,'dlevel':dlevel1},safe=False)
        else:
            user = list(m2.report_it.objects.filter(empno_report=email).order_by('-id').values()) 
            # # print('\n\nuserrrrrrrrr\n',user)
            return JsonResponse({'user':user},safe=False)   
    return JsonResponse({'success':False},status=404)

@login_required
def showData(request):
    rly_unit=list(Level_Desig.objects.filter(official_email_ID=request.user).values('rly_unit_id'))
    rly_unit1=rly_unit[0]['rly_unit_id']
    dlevel=list(Level_Desig.objects.filter(official_email_ID=request.user).values('d_level'))
    division=''
    zone,x='',''
    d_level=dlevel[0]['d_level']
    print(d_level)
    
    if dlevel[0]['d_level']=='GM':
        zone1=list(railwayLocationMaster.objects.filter(rly_unit_code=rly_unit1).values('location_code'))
        zone=zone1[0]['location_code']
        division='--Select Division--'
        x=railwayLocationMaster.objects.filter(Q(location_code=zone) & Q(location_type='ZR')).values('rly_unit_code')
        # division1=list(railwayLocationMaster.objects.filter(rly_unit_code=rly_unit1).values('location_code'))
        # division=division1[0]['location_code']
    elif dlevel[0]['d_level']=='DRM':
        zone1=list(railwayLocationMaster.objects.filter(rly_unit_code=rly_unit1).values('parent_location_code'))
        zone=zone1[0]['parent_location_code']
        division1=list(railwayLocationMaster.objects.filter(rly_unit_code=rly_unit1).values('location_code'))
        division=division1[0]['location_code']
        x=railwayLocationMaster.objects.filter(Q(location_code=division) & Q(location_type='DIV')).values('rly_unit_code')
    elif dlevel[0]['d_level']=='BO':
        zone1=list(railwayLocationMaster.objects.filter(rly_unit_code=rly_unit1).values('parent_location_code'))
        zone=zone1[0]['parent_location_code']
        division1=list(railwayLocationMaster.objects.filter(rly_unit_code=rly_unit1).values('location_code'))
        division=division1[0]['location_code']
        x=railwayLocationMaster.objects.filter(Q(location_code=division) & Q(location_type='DIV')).values('rly_unit_code')
    else:
        zone1=list(railwayLocationMaster.objects.filter(rly_unit_code=rly_unit1).values('parent_location_code'))
        zone=zone1[0]['parent_location_code']
        division1=list(railwayLocationMaster.objects.filter(rly_unit_code=rly_unit1).values('location_code'))
        division=division1[0]['location_code']
        x=railwayLocationMaster.objects.filter(Q(location_code=division) & Q(location_type='DIV')).values('rly_unit_code')
    
    result=list(railwayLocationMaster.objects.filter(Q(location_type='ZR') & ~Q(location_code=zone)).distinct('location_code').values('rly_unit_code','location_code'))
    result2=list(departMast.objects.filter(delete_flag='False').distinct('department_name').values('department_code','department_name'))
    divisionList=list(railwayLocationMaster.objects.filter(Q(location_type='DIV',parent_location_code=zone) & ~Q(location_code=division)).distinct('location_code').values('location_code'))
    
    # # print('xxxx' ,x)
    userDiv=railwayLocationMaster.objects.filter(rly_unit_code=x[0]['rly_unit_code'])[0]
    # # print('userdiv ',userDiv)
    officer=list(Level_Desig.objects.filter(rly_unit_id=x[0]['rly_unit_code']).exclude(Q(official_email_ID=request.user)| Q(designation=None) |Q(delete_flag=True)).values('designation'))

    context={
        'result':result,
        'result2':result2,
        'zone':zone,
        'division':division,
        'divisionList':divisionList,
        'officer':officer,
        'd_level':d_level
    }
    return render(request,"showData.html",context)

def forwardToNext(request):
    if request.method=='GET':
        div=request.GET.get('div')
        officer=request.GET.get('officer')
        id=request.GET.get('id1')
        remarks=request.GET.get('modalremarks')
        # print(id,remarks,'id')
        # print('remarks',remarks)
        result=m2.einsp_marked.objects.filter(eitemid_id__einspno_id=id).order_by('-created_by').values()[0]
        # print(result,'uujncikjikji')
        item=m2.einspection_item_detail.objects.filter(einspno_id=id)[0]
        # # print(result,'safsfsf')
        import datetime  
        dateNo = datetime.date.strftime(datetime.date.today(), "%Y-%m-%d")
        dateNo1=datetime.datetime.now()
        # datenow=datenow1.date()

        designation_code=Level_Desig.objects.filter(designation=officer)[0]
        print('designation_code',designation_code)
        print('designation_code.designation',designation_code.designation)
        
        
        # print(result['counter'],'xkgsssssjhsf')

        m2.einsp_marked.objects.filter(id=result['id']).update(counter=int(result['counter'])+1,forward_count=int(result['forward_count'])+1,reverted_on=dateNo1,lastmodified_on=dateNo,status_flag=5)

        obj1=m2.einsp_marked.objects.create(eitemid=item,counter=0,parent_mark=result['id'],created_by=result['marked_emp_id'],lastmodified_by=result['marked_emp_id'],forward_count=int(result['forward_count'])+1,marked_to=designation_code,marked_emp_id=designation_code.empno_id,created_on=dateNo1,lastmodified_on=dateNo1,revert=0,compliance=remarks,department_id=result['department_id'],status_flag=1,designation=designation_code.designation,designation_by=result['designation_by'])
        # print(obj1,'hujhnjkhnik')
        return JsonResponse({"success":True},status=200)   
    return JsonResponse({'success':False},status=404)

def modalInfo(request):
    if request.method=='GET':
        id1=request.GET.get('id')
        id = Level_Desig.objects.filter(official_email_ID=str(request.user)).values('designation_code')[0]
        user = list(m2.einsp_marked.objects.filter(marked_to=id['designation_code'],eitemid_id__einspno_id=id1).values('eitemid_id__einspno_id','eitemid_id__einspno_id__created_by',
        'id','created_by','marked_to_id__designation','marked_emp_id','created_on','reverted_on','lastmodified_on','compliance'))
        
        name=list(Level_Desig.objects.filter(empno=user[0]['created_by']).values('designation'))
        # # print('id1234',name)
        return JsonResponse({'id':user,'name':name},safe=True)
    return JsonResponse({'success':False},status=404)

def forwardInfo(request):
    if request.method=='GET':
        id1=request.GET.get('id')
        result=m2.einsp_marked.objects.filter(eitemid_id__einspno_id=id1).order_by('-created_by').values()[0]
        # parentId = result['id']
        itemId = result['eitemid_id']
        # print(parentId)
        print(itemId)
        print('result',result)
        user = list(m2.einsp_marked.objects.filter(eitemid_id = itemId).exclude(parent_mark = -1).values('designation','created_on','compliance'))
        user1 = list(m2.einsp_marked.objects.filter(parent_mark = -1, eitemid_id = itemId).values('designation','created_on','eitemid_id__remarks'))
        user.append(user1[0])
        print('user',user)
        print('user1',user1)
        return JsonResponse({'user':user},safe=True)
    return JsonResponse({'success':False},status=404)

def getForwardOfficer(request):
    if request.method == "GET":
        division = request.GET.get('division')
        x=railwayLocationMaster.objects.filter(Q(location_code=division) & Q(location_type='DIV')).values('rly_unit_code')
        result=list(Level_Desig.objects.exclude(Q(official_email_ID=request.user)| Q(designation=None) |Q(delete_flag=True)).filter(rly_unit_id=x[0]['rly_unit_code']).values('designation'))
        return JsonResponse(result,safe=False)
    return JsonResponse({"success":False},status=400)
        
def department_wise(request):
    if request.method == "GET":
        department = request.GET.get('department')
        result=list(m2.IssueCategory.objects.filter(department_code=department).distinct('issue_category').values('issue_category'))
        # print(result)
        return JsonResponse(result,safe=False)
    return JsonResponse({"success":False},status=400)

def saveData(request):
    if request.method=='POST':
        rlyorg = request.POST.get('rlyorg')
        division = request.GET.get('division')

        department = request.GET.get('department')
        issuetitle = request.GET.get('issuetitle')
        issuedescription = request.GET.get('issuedescription')
        reporttime = request.POST.get('reporttime')
        location = request.GET.get('location')
        priority = request.POST.get('priority')
        imagepath = request.POST.get('imagepath')
        print(issuetitle)
        # print('department_name',department)
        #reporttime ='Sun Jan 22 21:32:58 +0000 2012'
        # reporttime = datetime.strptime(reporttime, '%a %b %d %H:%M:%S +%f %Y')
        #imagepath1 = request.GET.get('imagepath1')
        
        # print(rlyorg,division,department,issuetitle,issuedescription,location,priority,imagepath)
        m2.report_it.objects.create(rlyorg=rlyorg,division=division,department=department,issuetitle=issuetitle,issuedescription=issuedescription,location=location,priority=priority,imagepath=imagepath)
        return JsonResponse({"success":True},safe=False)
    return JsonResponse({"success":False},status=404)

def saveRemarks(request):
    try:
        if request.method=='GET':
            remarks=request.GET.get('remarks')
            id = request.GET.get('id')
            # print(remarks)
            m2.report_it.objects.filter(id=id).update(remarks=remarks)
            return JsonResponse({'success':True})
        return JsonResponse({'success':False},status=404)
    except:
        print("Error in updating record") 

def remarks(request):
    # try:
        if request.method=='GET':
            rlyorg = request.GET.get('rlyorg')
            # print("rlyorggggg",rlyorg)
            user1=m2.einsp_marked.objects.filter(eitemid_id__einspno_id=rlyorg)[0]
            # print('aaaa',user1)
            user=m2.einsp_marked.objects.filter(eitemid_id__einspno_id=rlyorg)[0]
            # print('user',user.compliance)
            flag=0
            date=''
            if user:
                flag=1
                # q=user.compliance.split(' - ')[0]
                date1=user.compliance.split(' - ')[1][0:10]
                # date=datetime.strptime(date1,'%Y-%m-%d')
            # user_obj = list(m2.report_it.objects.filter(rlyorg=rlyorg).values())
            # # print(user_obj)
            # # print('dateeee ',date1)
            # print('hxsg',user.id)
            id10=user.id
            # # print('hxsg',flag)
            return JsonResponse({'id':id10,'flag':flag,'date':date1,'rlyorg':rlyorg},safe=False)
        return JsonResponse({'success':False},status=404)
    # except:
    #     # print("Error in updating record")

def getStationCode1(request):
    if request.method == 'GET':
        stationname = request.GET.get('station')
        code1 = list(station_master.objects.filter(station_name=stationname).values('div_id_id'))
        # print('code1 ',code1)
        code2=code1[0]['div_id_id']
        # print('code2 ',code2)
        sectioncode=list(section_master.objects.filter(div_id_id=code2).values('section_code'))
        code=[]
        # # print(sectioncode)
        for i in range(len(sectioncode)):
            code.append(sectioncode[i]['section_code'])
        # # print(code)
        return JsonResponse({'code':code},safe=False)
    return JsonResponse({"success":False},status=400)
    
def getSectionCode1(request):
    if request.method == 'GET':
        sectionname = request.GET.get('section')
        # print(sectionname,' sectionname')
        x,y='',''
        x = sectionname.split('-')[0]
        y= sectionname.split('-')[1]
        # print(x,' ',y)
        startcode = list(station_master.objects.filter(station_name=x).values('stnshortcode'))
        code1=startcode[0]['stnshortcode']
        endcode = list(station_master.objects.filter(station_name=y).values('stnshortcode'))
        code2=endcode[0]['stnshortcode']
        code=code1+'-'+code2
        # print('section_code ' ,code)
        return JsonResponse({'code':code},safe=False)
    return JsonResponse({"success":False},status=400)

# CIRI saving in Phase 1
@login_required
def siriForm1(request):
    # result=list(railwayLocationMaster.objects.filter(location_type='ZR').distinct('location_code').values('rly_unit_code','location_code'))
    instypeid = list(inspectiontype_master.objects.filter(shortcode = 'CIRI').values('instypeid'))[0]['instypeid']
    all_department = {
        'department_code': 0,
        'department_name': 'ALL'
    }
    result2=list(departMast.objects.filter(delete_flag='False').distinct('department_name').values('department_code','department_name').order_by('department_name'))
    # result2.insert(0, all_department)
    department_name = all_department['department_name'] 
    # # print('rly_unit_code',rly_unit_code);    
    # # print('work: ',result2)
    # print("\n")
    asset=list(question_sub_category_master.objects.filter(disable_flag = False).values('sub_id','sub_category').order_by('sub_id'))
    # print(asset)
    email = request.user
    rly_unit=list(Level_Desig.objects.filter(official_email_ID=email).values('rly_unit_id'))
    rly_unit1=rly_unit[0]['rly_unit_id']
    dlevel=list(Level_Desig.objects.filter(official_email_ID=email).values('d_level'))
    division=''
    zone=''
    officers=''
    if dlevel[0]['d_level']=='GM':
        zone1=list(railwayLocationMaster.objects.filter(rly_unit_code=rly_unit1).values('location_code'))
        zone=zone1[0]['location_code']
        # division1=list(railwayLocationMaster.objects.filter(rly_unit_code=rly_unit1).values('location_code'))
        # division=division1[0]['location_code']
    elif dlevel[0]['d_level']=='DRM':
        zone1=list(railwayLocationMaster.objects.filter(rly_unit_code=rly_unit1).values('parent_location_code'))
        zone=zone1[0]['parent_location_code']
        division1=list(railwayLocationMaster.objects.filter(rly_unit_code=rly_unit1).values('rly_unit_code','location_code'))
        division=division1[0]['location_code']
        division_id=division1[0]['rly_unit_code']
        officers=list(Level_Desig.objects.exclude(official_email_ID=email).filter(div_id=division_id).values('designation_code','designation').order_by('designation'))
    elif dlevel[0]['d_level']=='BO':
        zone1=list(railwayLocationMaster.objects.filter(rly_unit_code=rly_unit1).values('parent_location_code'))
        zone=zone1[0]['parent_location_code']
        division1=list(railwayLocationMaster.objects.filter(rly_unit_code=rly_unit1).values('rly_unit_code','location_code'))
        division=division1[0]['location_code']  
        division_id=division1[0]['rly_unit_code']
        officers=list(Level_Desig.objects.exclude(official_email_ID=email).filter(div_id=division_id).values('designation_code','designation').order_by('designation'))
    else:
        zone1=list(railwayLocationMaster.objects.filter(rly_unit_code=rly_unit1).values('parent_location_code'))
        zone=zone1[0]['parent_location_code']
        division1=list(railwayLocationMaster.objects.filter(rly_unit_code=rly_unit1).values('rly_unit_code','location_code'))
        division=division1[0]['location_code']  
        division_id=division1[0]['rly_unit_code']
        officers=list(Level_Desig.objects.exclude(official_email_ID=email).filter(div_id=division_id).values('designation_code','designation').order_by('designation'))

    # print('zone',zone)
    result=list(railwayLocationMaster.objects.filter(Q(location_type='ZR') & ~Q(location_code=zone)).distinct('location_code').values('rly_unit_code','location_code'))
    divisionList=list(railwayLocationMaster.objects.filter(Q(location_type='DIV',parent_location_code=zone) & ~Q(location_code=division)).distinct('location_code').values('location_code'))
    # # print('divisionList ',divisionList)
    train=list(train_master.objects.filter(railway_code=zone,div_id_id_id=rly_unit1).values('train_no','train_name').order_by('train_name'))
    # # print('etwyqt',train
    # )
    station = list(station_master.objects.filter(railway_code=zone,div_id_id=rly_unit1).distinct('station_name').values('station_name','stnshortcode').order_by('station_name'))
    # # print('station ',station)
    sectionCode = list(section_master.objects.filter(railway_code=zone,div_id_id=rly_unit1).values('section_code').order_by('section_code'))
    # # print('sectionCode ',sectionCode)
    # station1,startStation,endStation=[],'',''
    sectioncode=[]
    +4
    for i in range(len(sectionCode)):
        sectioncode.append(sectionCode[i]['section_code'])
    # # print('sectionCode ',sectioncode)
    sectionlist,x=[],''
    # # print('sectioncode',sectioncode)
    for i in range(len(sectioncode)):
        x=list(section_master.objects.filter(section_code=sectioncode[i]).values('secstart_code_id','secend_code_id'))
        a=x[0]['secstart_code_id']
        b=x[0]['secend_code_id']
        c=a+','+b
        sectionlist.append(c)
    # # print('sectionlist ',sectionlist)
    section_code1=[]
    for i in range(len(sectionlist)):
        start=sectionlist[i].split(',')[0]
        end=sectionlist[i].split(',')[1]
        startlist=list(station_master.objects.filter(stnshortcode=start).values('station_name'))
        startstation=startlist[0]['station_name']
        endlist=list(station_master.objects.filter(stnshortcode=end).values('station_name'))
        endstation=endlist[0]['station_name']
        final = startstation+'-'+endstation
        section_code1.append(final)
    # # print(section_code1)    

    
    
    if request.method=='POST':
        rlyorg = request.POST.get('rlyorg')
        division = request.POST.get('division')
        # department = request.POST.get('department')
        # print('department: ',department)
        # print('rlyorg: ',rlyorg)
        # print('division: ',division)
        division = division.split(',')[0]
        # print('division: ',division)
        issuetitle = request.POST.get('issuetitle')
        # print('issuetitle: ',issuetitle)

        issuedescription = request.POST.get('issuedescription')
        reporttime = datetime.now()
        # reporttime = request.POST.get('reporttime')
        location = request.POST.get('location')
        # print(location)
        priority = request.POST.get('priority')
        if priority == 'High':
            priority = 1
        elif priority == 'Medium':
            priority = 2
        elif priority == 'NA':
            priority = 0
        else:
            priority = 3
        gm = request.POST.get('namegm')
        drm = request.POST.get('drm')
        # print (gm,drm)
        
        description=request.POST.get('Description')
        # # print('Description: ',description)
        if description == 'train':
            trainNo = request.POST.get('trainNo')
            location_val = trainNo
            location_code = list(train_master.objects.filter(train_no=trainNo).values('tnid'))[0]['tnid']
        elif description == 'station':
            autoStation = request.POST.get('stationname')
            location_code = autoStation
            location_val = list(station_master.objects.filter(stnshortcode=autoStation).values('station_name'))[0]['station_name']
        elif description == 'section':
            autoSection = request.POST.get('autoSection')
            location_val = autoSection
            location_code = list(section_master.objects.filter(section_code=autoSection).values('secid'))[0]['secid']
        elif description == 'other':
            other = request.POST.get('addOther')
            location_val = other
            location_code = NULL
            # print('Other:  ',other)
        
        inspectionType = request.POST.get('inspectionType')
        # print(inspectionType)
        inspectionType = inspectionType.split(' ')
        # if len(inspectionType) == 3:
        #     is_scheduled = False
        #     inspection_type=3
        # elif inspectionType[1] == 'Surprise':
        #     is_scheduled = False
        #     inspection_type=1
        # elif inspectionType[1] == 'Night':
        #     is_scheduled = True
        #     inspection_type=2
        # else:
        #     is_scheduled = True
        #     inspection_type=4

        inspection_type=3 #surprise inspection

        max_id=0
        temp=list(m2.einspection_details.objects.filter(delete_flag=False).values())
        if len(temp)!=0:
            max_id = m1.Inspection_details.objects.aggregate(Max('inspection_no'))['inspection_no__max']
            max_id+=1 
        else:
            max_id=1

        rly_unit_code = list(railwayLocationMaster.objects.filter(parent_location_code=rlyorg,location_code=division).values('rly_unit_code'))
        
        # print('\n\nqwertyusvbdnmd',rly_unit_code)
        x = rly_unit_code[0]['rly_unit_code']

        desgn_id = list(Level_Desig.objects.filter(official_email_ID=request.user).values('designation_code'))
        designation_code_id = desgn_id[0]['designation_code']
        rlyzone = list(railwayLocationMaster.objects.filter(location_code=rlyorg).values('rly_unit_code'))
        divzone = list(railwayLocationMaster.objects.filter(location_code=division).values('rly_unit_code'))
        
        rly_zone=rlyzone[0]['rly_unit_code']
        div_zone=divzone[0]['rly_unit_code']

        div_id = railwayLocationMaster.objects.filter(Q(location_code=division) & Q(location_type='DIV'))[0]
        rly_id = railwayLocationMaster.objects.filter(Q(location_code=rlyorg) & Q(location_type='ZR'))[0]
        # print('issuetitle',issuetitle)
        
        issuetitle_id = question_sub_category_master.objects.filter(Q(sub_id=issuetitle))[0]
        
        officer_designation_code = request.POST.get('officer')
        officer = list(Level_Desig.objects.filter(designation_code=officer_designation_code).values())
        officer_instance = Level_Desig.objects.filter(designation_code=officer_designation_code)
        
        dept_code=departMast.objects.filter(department_code=officer[0]['department_code_id'])[0]
        currentDateTime = datetime.now()
        date = currentDateTime.date()
        year=date.strftime("%Y")
        d=Level_Desig.objects.filter(official_email_ID=request.user).values('designation','designation_code','empno__empname', 'empno__empmname', 'empno__emplname')
        first_name = d[0]['empno__empname'] if d[0].get('empno__empname') else ''
        middle_name = d[0]['empno__empmname'] if d[0].get('empno__empmname') else ''
        last_name = d[0]['empno__emplname'] if d[0].get('empno__emplname') else ''

        name = ' '.join(filter(None, [first_name, middle_name, last_name]))

        createdby=list(Level_Desig.objects.filter(official_email_ID=request.user).values('empno'))
        datenow1=datetime.now()
        datenow=datenow1.date()
        
        if description == 'other':
            x='CIRI Inspection of '+ other +' - by '+ d[0]['designation'] +' on '+ str(datenow.strftime("%d/%m/%y"))
        else:
            x='CIRI Inspection of '+ description.title() +': ' + location_val +' - by '+ d[0]['designation'] +' on '+ str(datenow.strftime("%d/%m/%y"))

        note_ = str(year)+'/'+str(d[0]['designation'])+'/CIRI'+'/'
        last_note1 = m1.Inspection_details.objects.filter(inspection_note_no__istartswith=note_).aggregate(Max('insp_last'))
        if last_note1['insp_last__max'] == None:
            last_note1 = 1
            inspection_note_no = str(year)+'/'+str(d[0]['designation']) + '/CIRI/' + str(last_note1)
        else:
            last_note1 = int(last_note1['insp_last__max']) +1
            inspection_note_no = str(year)+'/'+str(d[0]['designation']) + '/CIRI/' + str(last_note1)

        # image uploading
        try:
            file = request.FILES['imagepath']
            # print(file,' image Path')
        except:
            file='documents/Screenshot.png'
        
        empnumber = d[0]['designation']
        f1 = str(file)
        for1 = f1.split('.')
        for1 = for1[len(for1)-1]
        fs=FileSystemStorage(location='media/Inspection/')
        # filename = 'insp_'+str(datetime.today().strftime('%Y%m%d %H%M%S'))+'_d'+str(empnumber)+'.'+str(for1)
        # filename = filename.replace(' ','_')
        files=fs.save(file.name,file)
        
        f2 ='media/Inspection/'+str(files)
        # os.rename(f2, 'media/Inspection/'+filename)
        imagepath = f2

        obj1 = m1.Inspection_details.objects.create(
            inspected_on=reporttime,
            start_date=reporttime,
            final_submit_on=reporttime,
            created_on=reporttime,
            created_by=createdby[0]['empno'],
            modified_by=createdby[0]['empno'],
            modified_on=reporttime,
            inspection_officer_id=designation_code_id,
            status_flag=1,
            item_type='CIRI',
            insp_last=last_note1,

            officer_desig=d[0]['designation'], 
            officer_name=name,
            
            inspection_title=x,
            inspection_note_no=inspection_note_no,
            insp_type=inspection_type)

        subject="CIRI Inspection Report"
        
        # print(obj1.inspection_no)

        if gm=='yes' and drm=='yes':
            gm_id = list(railwayLocationMaster.objects.filter(location_code=rlyorg).values('rly_unit_code'))
            a = gm_id[0]['rly_unit_code']
            
            desg_gm = list(Level_Desig.objects.filter(rly_unit_id=a,d_level='GM',parent_desig_code=1217).values('designation_code','official_email_ID','designation'))

            To = desg_gm[0]['official_email_ID']
            context = {'title': x}
            v1.InspSendMail(subject, To, context)

            drm_id = list(railwayLocationMaster.objects.filter(parent_location_code=rlyorg,location_code=division).values('rly_unit_code'))
            b = drm_id[0]['rly_unit_code']
            # # print('bbbb ',b)
            desg_drm = list(Level_Desig.objects.filter(rly_unit_id=b,d_level='DRM').values('designation_code','official_email_ID','designation'))

            To = desg_drm[0]['official_email_ID']
            context = {'title': x}
            v1.InspSendMail(subject, To, context)
            
            mm6.copyto_mails.objects.create(sender_id_id=d[0]['designation_code'], subject=subject,doc_id=obj1.inspection_no,  body=x, area_flag=0, doc_table='i', receiver_id=(str(desg_gm[0]['designation_code']) + ',' + str(desg_drm[0]['designation_code'])), receiver_desig=(str(desg_gm[0]['designation']) + ',' + str(desg_drm[0]['designation'])))
            
        elif gm=='yes':
            gm_id = list(railwayLocationMaster.objects.filter(location_code=rlyorg).values('rly_unit_code'))
            a = gm_id[0]['rly_unit_code']
            
            desg_gm = list(Level_Desig.objects.filter(rly_unit_id=a,d_level='GM',parent_desig_code=1217).values('designation_code','official_email_ID','designation'))

            To = desg_gm[0]['official_email_ID']
            context = {'title': x}
            v1.InspSendMail(subject, To, context)
            # print(desg_gm)
            mm6.copyto_mails.objects.create(sender_id_id=d[0]['designation_code'], subject=subject,doc_id=obj1.inspection_no,  body=x, area_flag=0, doc_table='i', receiver_id=desg_gm[0]['designation_code'], receiver_desig=desg_gm[0]['designation'])

        elif drm=='yes':
            drm_id = list(railwayLocationMaster.objects.filter(parent_location_code=rlyorg,location_code=division).values('rly_unit_code'))
            b = drm_id[0]['rly_unit_code']
            # # print('bbbb ',b)
            desg_drm = list(Level_Desig.objects.filter(rly_unit_id=b,d_level='DRM').values('designation_code','official_email_ID','designation'))

            To = desg_drm[0]['official_email_ID']
            context = {'title': x}
            v1.InspSendMail(subject, To, context)
            
            mm6.copyto_mails.objects.create(sender_id_id=d[0]['designation_code'], subject=subject,doc_id=obj1.inspection_no,  body=x, area_flag=0, doc_table='i', receiver_id=desg_drm[0]['designation_code'], receiver_desig=desg_drm[0]['designation'])

        m1.Insp_multi_location.objects.create(inspection_no_id=obj1.inspection_no, item=rlyorg, type='HQ')

        m1.Insp_multi_location.objects.create(inspection_no_id=obj1.inspection_no, item=division, type='DIV')
           
        obj2=m1.Item_details.objects.create(
            inspection_no=obj1,
            item_type=issuetitle,
            status_flag=1,
            markofcRemarks='Location: ' + location + '\nDescription: ' + issuedescription,
            # location=location,
            priority=priority,
            # qtype='SIRI',
            item_title=issuedescription  + ' at ' + location,
            sl_no=1,
            type='H',
            des_id=1,

            created_on=reporttime,
            created_by=createdby[0]['empno'],
            modified_by=createdby[0]['empno'],
            modified_on=reporttime,

            location_table=description.title(),
            location_val=location_val,
            location_code=location_code,
            hqid_id=rly_zone,
            divid_id=div_zone,
            link_image=imagepath)
        
        m1.Marked_Officers.objects.create(
            item_no=obj2,
            marked_to_id=officer_instance[0].designation_code,
            marked_emp=officer[0]['empno_id'],
            # forward_count=0,

            created_on=reporttime,
            created_by=createdby[0]['empno'],
            modified_by=createdby[0]['empno'],
            modified_on=reporttime,
            
            priority=priority,
            status_flag=1,
            # counter=0,
            # revert=0,

            # designation_by=d[0]['designation'],
            # department_id=officer[0]['department_code_id'],
            # designation=officer[0]['designation']
            )

        if obj1:
            messages.success(request,'Data Added Successfully')
            return redirect('siriForm1')

        else:
            messages.error(request,'Error while adding data')
            
        
        # # print('\n\ndesignation_code_id',designation_code_id,'\n')
        
    return render(request,"siriForm1.html",{'result':result,'result2':result2,'zone':zone,'division':division,'divisionList':divisionList,'train':train,'station':station,'section_code1':section_code1,'asset':asset,'department_name':department_name,'officers':officers})



def showUserDataa1(request):
    # instypeid = list(inspectiontype_master.objects.filter(shortcode = 'CIRI').values('instypeid'))[0]['instypeid']
    if request.method=='GET':
        email = request.user
        userDesig=list(Level_Desig.objects.filter(official_email_ID=email).values('designation'))
        user=[]
        createdby=list(Level_Desig.objects.filter(official_email_ID=request.user).values('empno'))
        division = request.GET.get('division')
        rly_unit=list(Level_Desig.objects.filter(official_email_ID=request.user).values('rly_unit_id'))
        rly_unit1=rly_unit[0]['rly_unit_id']
        b=list(railwayLocationMaster.objects.filter(Q(location_code=division) & Q(location_type='DIV') ).values('rly_unit_code'))
        user = list(m1.Inspection_details.objects.filter(created_by=createdby[0]['empno'], item_type='CIRI').values('created_on','status_flag','officer_desig').order_by('-inspection_no'))
        ids = list(m1.Inspection_details.objects.filter(created_by=createdby[0]['empno'], item_type='CIRI').values('inspection_no').order_by('-inspection_no'))
        print(ids)
        for i in range(len(ids)):
            dataa = m1.Item_details.objects.filter(inspection_no=ids[i]['inspection_no'])[0]
                
            issuetitle = list(question_sub_category_master.objects.filter(sub_id=dataa.item_type).values('sub_category'))[0]['sub_category']

            marked_officer_data = list(Marked_Officers.objects.filter(item_no__inspection_no = ids[i]['inspection_no']).values('marked_to__department','marked_to__designation'))

            marked_officer_dept = marked_officer_data[0]['marked_to__department']

            marked_officer_desig=marked_officer_data[0]['marked_to__designation']

            Remarks = dataa.markofcRemarks
            lines = Remarks.split('\n')
            location = lines[0].split(': ')[1].strip()
            issuedescription = lines[1].split(': ')[1].strip()

            imagepath = str(dataa.link_image).split("media/")[1]
            
            user[i].update({'issuetitle':issuetitle,'issuedescription':issuedescription,'location':location, 'priority':dataa.priority,'documents':imagepath, 'status':dataa.status_flag,'dept_id__department_name':marked_officer_dept,'designation':marked_officer_desig})
           
        return JsonResponse({'user':user},safe=False)
    return JsonResponse({'success':False},status=404)




@login_required
def showData1(request):
    rly_unit=list(Level_Desig.objects.filter(official_email_ID=request.user).values('rly_unit_id'))
    rly_unit1=rly_unit[0]['rly_unit_id']
    dlevel=list(Level_Desig.objects.filter(official_email_ID=request.user).values('d_level'))
    division=''
    zone,x='',''
    d_level=dlevel[0]['d_level']
    print(d_level)
    
    if dlevel[0]['d_level']=='GM':
        zone1=list(railwayLocationMaster.objects.filter(rly_unit_code=rly_unit1).values('location_code'))
        zone=zone1[0]['location_code']
        division='--Select Division--'
        x=railwayLocationMaster.objects.filter(Q(location_code=zone) & Q(location_type='ZR')).values('rly_unit_code')
        # division1=list(railwayLocationMaster.objects.filter(rly_unit_code=rly_unit1).values('location_code'))
        # division=division1[0]['location_code']
    elif dlevel[0]['d_level']=='DRM':
        zone1=list(railwayLocationMaster.objects.filter(rly_unit_code=rly_unit1).values('parent_location_code'))
        zone=zone1[0]['parent_location_code']
        division1=list(railwayLocationMaster.objects.filter(rly_unit_code=rly_unit1).values('location_code'))
        division=division1[0]['location_code']
        x=railwayLocationMaster.objects.filter(Q(location_code=division) & Q(location_type='DIV')).values('rly_unit_code')
    elif dlevel[0]['d_level']=='BO':
        zone1=list(railwayLocationMaster.objects.filter(rly_unit_code=rly_unit1).values('parent_location_code'))
        zone=zone1[0]['parent_location_code']
        division1=list(railwayLocationMaster.objects.filter(rly_unit_code=rly_unit1).values('location_code'))
        division=division1[0]['location_code']
        x=railwayLocationMaster.objects.filter(Q(location_code=division) & Q(location_type='DIV')).values('rly_unit_code')
    else:
        zone1=list(railwayLocationMaster.objects.filter(rly_unit_code=rly_unit1).values('parent_location_code'))
        zone=zone1[0]['parent_location_code']
        division1=list(railwayLocationMaster.objects.filter(rly_unit_code=rly_unit1).values('location_code'))
        division=division1[0]['location_code']
        x=railwayLocationMaster.objects.filter(Q(location_code=division) & Q(location_type='DIV')).values('rly_unit_code')
    
    result=list(railwayLocationMaster.objects.filter(Q(location_type='ZR') & ~Q(location_code=zone)).distinct('location_code').values('rly_unit_code','location_code'))
    result2=list(departMast.objects.filter(delete_flag='False').distinct('department_name').values('department_code','department_name'))
    divisionList=list(railwayLocationMaster.objects.filter(Q(location_type='DIV',parent_location_code=zone) & ~Q(location_code=division)).distinct('location_code').values('location_code'))
    
    officer=list(Level_Desig.objects.filter(rly_unit_id=x[0]['rly_unit_code']).exclude(Q(official_email_ID=request.user)| Q(designation=None) |Q(delete_flag=True)).values('designation'))

    context={
        'result':result,
        'result2':result2,
        'zone':zone,
        'division':division,
        'divisionList':divisionList,
        'officer':officer,
        'd_level':d_level
    }
    return render(request,"showData1.html",context)

def showUserComaplaints1(request):
    if request.method=='GET':
        email = request.user
        status = request.GET.get('status', None)
        user=[]
        dlevel=list(Level_Desig.objects.filter(official_email_ID=email).values('d_level'))
        # print(dlevel)
        dlevel1=dlevel[0]['d_level']

        id = Level_Desig.objects.filter(official_email_ID=email).   values('designation_code')[0]
        code = id['designation_code']

        inspections_forwarded=list(m1.Marked_Officers_forward.objects.filter(marked_no__marked_to=code,marked_no__item_no__inspection_no__item_type='CIRI',marked_no__status_flag=1).values_list('marked_no', flat=True).distinct())

        if status == 'Pending':
            user = list(m1.Marked_Officers.objects.filter(Q(marked_to_id=id['designation_code']) & Q (item_no__inspection_no__item_type='CIRI', status_flag = 1, target_date__isnull = True)).exclude(marked_no__in=inspections_forwarded).values('item_no__item_type',  'item_no__markofcRemarks','item_no__link_image','priority','item_no__inspection_no','created_on','item_no__inspection_no__officer_desig','marked_to_id__designation','status_flag','target_date').order_by ('-item_no__inspection_no'))
            for i in range(len(user)):
                Remarks = user[i]['item_no__markofcRemarks']
                lines = Remarks.split('\n')
                location = lines[0].split(': ')[1].strip()
                issuedescription = lines[1].split(': ')[1].strip()

                issuetitle = list(question_sub_category_master.objects.filter(sub_id=user[i]['item_no__item_type']).values('sub_category'))[0]['sub_category']
                user[i].update({'issuetitle':issuetitle,'issuedescription':issuedescription,'location':location,})
            return JsonResponse({'user':user,'dlevel':dlevel1},safe=False)

        elif status == 'Forwarded':
            user = list(m1.Marked_Officers.objects.filter(marked_no__in=inspections_forwarded).values('item_no__item_type',  'item_no__markofcRemarks','item_no__link_image','priority','item_no__inspection_no','created_on','item_no__inspection_no__officer_desig','marked_to_id__designation','status_flag','target_date').order_by ('-item_no__inspection_no'))
            for i in range(len(user)):
                Remarks = user[i]['item_no__markofcRemarks']
                lines = Remarks.split('\n')
                location = lines[0].split(': ')[1].strip()
                issuedescription = lines[1].split(': ')[1].strip()

                issuetitle = list(question_sub_category_master.objects.filter(sub_id=user[i]['item_no__item_type']).values('sub_category'))[0]['sub_category']
                user[i].update({'issuetitle':issuetitle,'issuedescription':issuedescription,'location':location,})
            return JsonResponse({'user':user,'dlevel':dlevel1},safe=False)
        
        elif status == 'ForwardedToMe':
            marked_no=list(m1.Marked_Officers_forward.objects.filter(marked_to_forward_id=code, status_flag__in=[1,3],marked_no__status_flag=1).values_list('marked_no_id',flat=True))

            print(marked_no)

            user = list(m1.Marked_Officers.objects.filter(marked_no__in=marked_no).values('item_no__item_type',  'item_no__markofcRemarks','item_no__link_image','priority','item_no__inspection_no','created_on','item_no__inspection_no__officer_desig','marked_to_id__designation','status_flag','target_date').order_by ('-item_no__inspection_no'))
            for i in range(len(user)):
                Remarks = user[i]['item_no__markofcRemarks']
                lines = Remarks.split('\n')
                location = lines[0].split(': ')[1].strip()
                issuedescription = lines[1].split(': ')[1].strip()

                issuetitle = list(question_sub_category_master.objects.filter(sub_id=user[i]['item_no__item_type']).values('sub_category'))[0]['sub_category']
                user[i].update({'issuetitle':issuetitle,'issuedescription':issuedescription,'location':location,})
            return JsonResponse({'user':user,'dlevel':dlevel1},safe=False)
        
        elif status == 'Completed':
            user = list(m1.Marked_Officers.objects.filter(Q(marked_to_id=code) & Q (item_no__inspection_no__item_type='CIRI', status_flag=3)).values('item_no__item_type',  'item_no__markofcRemarks','item_no__link_image','priority','item_no__inspection_no','created_on','item_no__inspection_no__officer_desig','marked_to_id__designation','status_flag','target_date').order_by ('-item_no__inspection_no'))
            for i in range(len(user)):
                Remarks = user[i]['item_no__markofcRemarks']
                lines = Remarks.split('\n')
                location = lines[0].split(': ')[1].strip()
                issuedescription = lines[1].split(': ')[1].strip()

                issuetitle = list(question_sub_category_master.objects.filter(sub_id=user[i]['item_no__item_type']).values('sub_category'))[0]['sub_category']
                user[i].update({'issuetitle':issuetitle,'issuedescription':issuedescription,'location':location,})
            print('user',user)
            return JsonResponse({'user':user,'dlevel':dlevel1},safe=False)
        
        elif status == 'Reverted':
            user = list(m1.Marked_Officers.objects.filter(Q(marked_to_id=code) & Q (item_no__inspection_no__item_type='CIRI',status_flag=4)).values('item_no__item_type',  'item_no__markofcRemarks','item_no__link_image','priority','item_no__inspection_no','created_on','item_no__inspection_no__officer_desig','marked_to_id__designation','status_flag','target_date').order_by ('-item_no__inspection_no'))
            for i in range(len(user)):
                Remarks = user[i]['item_no__markofcRemarks']
                lines = Remarks.split('\n')
                location = lines[0].split(': ')[1].strip()
                issuedescription = lines[1].split(': ')[1].strip()

                issuetitle = list(question_sub_category_master.objects.filter(sub_id=user[i]['item_no__item_type']).values('sub_category'))[0]['sub_category']

                user[i].update({'issuetitle':issuetitle,'issuedescription':issuedescription,'location':location,})
            return JsonResponse({'user':user,'dlevel':dlevel1},safe=False)
        
        elif status == 'In Progress':
            user = list(m1.Marked_Officers.objects.filter(Q(marked_to_id=code) & Q (item_no__inspection_no__item_type='CIRI', status_flag = 1, target_date__isnull = False)).exclude(marked_no__in=inspections_forwarded).values('item_no__item_type',  'item_no__markofcRemarks','item_no__link_image','priority','item_no__inspection_no','created_on','item_no__inspection_no__officer_desig','marked_to_id__designation','status_flag','target_date').order_by ('-item_no__inspection_no'))
            for i in range(len(user)):
                Remarks = user[i]['item_no__markofcRemarks']
                lines = Remarks.split('\n')
                location = lines[0].split(': ')[1].strip()
                issuedescription = lines[1].split(': ')[1].strip()

                issuetitle = list(question_sub_category_master.objects.filter(sub_id=user[i]['item_no__item_type']).values('sub_category'))[0]['sub_category']
                user[i].update({'issuetitle':issuetitle,'issuedescription':issuedescription,'location':location,})
            return JsonResponse({'user':user,'dlevel':dlevel1},safe=False)
        
        elif status == 'Rejected':
            user = list(m1.Marked_Officers.objects.filter(Q(marked_to_id=code) & Q (item_no__inspection_no__item_type='CIRI',status='R',status_flag = 1)).values('item_no__item_type',  'item_no__markofcRemarks','item_no__link_image','priority','item_no__inspection_no','created_on','item_no__inspection_no__officer_desig','marked_to_id__designation','status_flag','target_date').order_by ('-item_no__inspection_no'))
            for i in range(len(user)):
                Remarks = user[i]['item_no__markofcRemarks']
                lines = Remarks.split('\n')
                location = lines[0].split(': ')[1].strip()
                issuedescription = lines[1].split(': ')[1].strip()

                issuetitle = list(question_sub_category_master.objects.filter(sub_id=user[i]['item_no__item_type']).values('sub_category'))[0]['sub_category']
                user[i].update({'issuetitle':issuetitle,'issuedescription':issuedescription,'location':location,})
            return JsonResponse({'user':user,'dlevel':dlevel1},safe=False)
        
        elif status == 'For Info':
            if dlevel1=='GM' or dlevel1 =="DRM":
                inspection_no=list(mm6.copyto_mails.objects.filter(receiver_id__contains=code).values_list('doc_id',flat=True))
                
                user = list(m1.Marked_Officers.objects.filter(item_no__inspection_no_id__in=inspection_no,item_no__inspection_no__item_type='CIRI').values('item_no__item_type',  'item_no__markofcRemarks','item_no__link_image','priority','item_no__inspection_no','created_on','item_no__inspection_no__officer_desig','marked_to_id__designation','status_flag','target_date').order_by ('-item_no__inspection_no'))

                for i in range(len(user)):
                    Remarks = user[i]['item_no__markofcRemarks']
                    lines = Remarks.split('\n')
                    location = lines[0].split(': ')[1].strip()
                    issuedescription = lines[1].split(': ')[1].strip()

                    issuetitle = list(question_sub_category_master.objects.filter(sub_id=user[i]['item_no__item_type']).values('sub_category'))[0]['sub_category']
                    user[i].update({'issuetitle':issuetitle,'issuedescription':issuedescription,'location':location,})

                return JsonResponse({'user':user,'dlevel':dlevel1},safe=False)
    
    return JsonResponse({'success':False},status=404)

def updateUser1(request):
        # print('hdgyuasjz')
        if request.method=='GET':
            modalremarks=request.GET.get('modalremarks')
            Date=request.GET.get('modalDate')
            id=request.GET.get('id')
            radio=request.GET.get('radioValue')

            print('id',id)

            desigid=Level_Desig.objects.exclude(delete_flag=True).filter(official_email_ID=request.user)[0].designation_code

            desigid=Level_Desig.objects.exclude(delete_flag=True).filter(official_email_ID=request.user)[0].designation_code

            import datetime
            dateNo = datetime.date.strftime(datetime.date.today(), "%Y-%m-%d")
            dateNo1=datetime.datetime.now()
            # print(type(Date),' ',type(modalremarks))
            # print(id,' ',Date,' ',modalremarks)
            item_no=m1.Marked_Officers.objects.filter(item_no__inspection_no_id=id,marked_to_id=desigid).values('item_no')
            print('item_no ',item_no)
            if radio == 'pending':
                Date=datetime.datetime.strptime(Date,'%d/%m/%Y').strftime('%Y-%m-%d')
                Date=str(Date)
                m1.Marked_Officers.objects.filter(item_no_id__in=item_no,marked_to_id=desigid).update(status_flag=1,target_flag=1,target_date=Date)
                marked_nox=m1.Marked_Officers.objects.get(item_no_id__in=item_no,marked_to_id=desigid)
                all_values=m1.Marked_Officers.objects.filter(item_no_id__in=item_no,marked_to_id=desigid).values('item_no__inspection_no__inspection_officer','item_no__created_on')

                m1.Item_details.objects.filter(item_no__in=item_no).update(target_date=Date)

                task_desp=list(m1.Item_details.objects.filter(item_no__in=item_no).values())

                if(task_desp[0]['type']=='H'):
                        task_det=task_desp[0]['item_title']
                elif(task_desp[0]['type']=='SH'):
                        task_det=task_desp[0]['observation']

                print(marked_nox)

                if m1.target_compliance.objects.filter(marked_no=marked_nox).exists():
                    m1.target_compliance.objects.filter(marked_no=marked_nox).update(status_flag=1,target_date=Date,pending_with_id=desigid,assigned_by_id=all_values[0]['item_no__inspection_no__inspection_officer'],init_date=all_values[0]['item_no__created_on'],task_flag=1,task_descp=task_det)
                else:
                    m1.target_compliance.objects.create(marked_no=marked_nox,status_flag=1,target_date=Date,pending_with_id=desigid,assigned_by_id=all_values[0]['item_no__inspection_no__inspection_officer'],init_date=all_values[0]['item_no__created_on'],task_flag=1,task_descp=task_det)

                
 
                    
            elif radio == 'close':
                item_no=m1.Marked_Officers.objects.filter(item_no__inspection_no_id=id,marked_to_id=desigid).values('item_no')
                compliance=m1.Marked_Officers.objects.filter(item_no_id__in=item_no,marked_to_id=desigid,status_flag=1).values('compliance','item_no')
                count_test=0
                print('item_no',item_no)
                print('compliance',compliance)
                for i in compliance:
                    m1.Marked_Officers.objects.filter(item_no_id=i['item_no'],marked_to_id=desigid).update(status_flag=3,reply_on=dateNo1,compliance=modalremarks)
                    marks=list(m1.Marked_Officers.objects.filter(item_no_id=i['item_no'],marked_to_id=desigid,status_flag=3, target_flag=1).values_list('marked_no', flat=True))
                    m1.target_compliance.objects.filter(marked_no_id__in=marks).update(status_flag=0,reply_on=dateNo1)
                    m1.Item_details.objects.filter(item_no=i['item_no']).update(status_flag=2)
                    m1.Inspection_details.objects.filter(inspection_no=id).update(status_flag=2)

                    if m1.Marked_Officers.objects.filter(item_no_id=i['item_no']).exclude(status_flag=3).count() == 0:
                        m1.Item_details.objects.filter(item_no=i['item_no']).exclude(type='SSH').update(status_flag=4)

                    if m1.Item_details.objects.filter(inspection_no=id).exclude(status_flag=4).count() == 0:
                        m1.Inspection_details.objects.filter(inspection_no=id).update(status_flag=4)

            elif radio == 'revert':
                m1.Marked_Officers.objects.filter(item_no_id__in=item_no).update(revert=modalremarks,compliance=modalremarks,status_flag=4,reverted_on=dateNo1)
                m1.Inspection_details.objects.filter(inspection_no=id).update(status_flag=4)
                
            return JsonResponse({'success':True})
        return JsonResponse({'success':False},status=404)

def forwardToNext1(request):
    if request.method=='GET':
        # div=request.GET.get('div')
        officer=request.GET.get('officer')
        id=request.GET.get('id1')
        remarks=request.GET.get('modalremarks')
        # print(id,remarks,'id')
        # print('remarks',remarks)
        # print(result,'uujncikjikji')
        # # print(result,'safsfsf')
        import datetime  
        dateNo = datetime.date.strftime(datetime.date.today(), "%Y-%m-%d")
        dateNo1=datetime.datetime.now()
        # datenow=datenow1.date()

        cuser=request.user.username
        if request.user.user_role == 'guest':
            cuser=request.user.guest_email
            request.user.email=request.user.guest_email
        cuser_id=Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].designation_code

        officer_contact=[]
        officer_email=[]
        marked_officers_sms=[]

        designation_code=Level_Desig.objects.filter(designation=officer)[0]
        print('designation_code',designation_code)
        print('designation_code.designation',designation_code.designation)
        
        
        # print(result['counter'],'xkgsssssjhsf')

        marked_no=m1.Marked_Officers.objects.filter(item_no__inspection_no_id=id)[0].marked_no
        level=0
        further_forward=None

        marked_to_forward=Level_Desig.objects.exclude(delete_flag=True).filter(designation=officer)[0].designation_code
        mark=int(m1.Marked_Officers_forward.objects.last().marked_no_forward)+1 if m1.Marked_Officers_forward.objects.last()!=None else 1
        created_on=datetime.datetime.now()
        m1.Marked_Officers_forward.objects.create(marked_no_forward=mark, marked_no_id=marked_no, marked_to_forward_id=marked_to_forward, created_on_forward=created_on, compliance_forward=remarks,created_by_forward=cuser_id, status_flag=1,level=level,further_forward_id=further_forward)
        # print(m1.Marked_Officers_forward.objects.values())
        Desig=Level_Desig.objects.exclude(delete_flag=True).filter(designation=officer)
        print(Desig,"aye!KYA BOLTI TU?",Desig[0].contactnumber)
        if Desig:
            Desig1=Desig[0].designation_code
            if Desig[0].official_email_ID:
                officer_email.append(Desig[0].official_email_ID)
            if Desig[0].contactnumber:
                if Desig[0].contactnumber not in officer_contact:
                    marked_officers_sms.append({'contact':Desig[0].contactnumber,'designation':Desig[0].designation_code})
                    officer_contact.append(Desig[0].contactnumber)

        if len(marked_officers_sms) > 0:
            for mar in marked_officers_sms:
                new_pending=m1.Marked_Officers_forward.objects.filter(marked_no__item_no__inspection_no_id=id,marked_to_forward_id=mar['designation']).values().count()
                cum_pending=m1.Marked_Officers.objects.filter(marked_to_id=mar['designation'], status_flag=1).values().count()
                for_pending=m1.Marked_Officers_forward.objects.filter(marked_to_forward_id=mar['designation'], status_flag=1).values().count()
                total_pending=cum_pending+for_pending
                note_no=m1.Inspection_details.objects.filter(inspection_no=id).values('inspection_note_no')[0]['inspection_note_no']
                issue_date=date.today()
                issue_date = datetime.datetime.strftime(issue_date,"%d/%m/%Y")
                t=Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=cuser_id).values('designation')
                if len(t)!=0:
                    inspection_officer=t[0]['designation']
                    inspection_officer=inspection_officer[0:15]
                else:
                    inspection_officer='NA'
                note_no=note_no[0:30]
                v1.sendsms_insp(mar['contact'],new_pending,note_no,inspection_officer,total_pending)


        return JsonResponse({"success":True},status=200)   
    return JsonResponse({'success':False},status=404)


def forwardInfo1(request):
    if request.method=='GET':
        id1=request.GET.get('id')
        user1=list(m1.Marked_Officers.objects.filter(item_no__inspection_no_id=id1).values('created_on','marked_to__designation','item_no__markofcRemarks','target_date','status_flag','compliance'))
        user=list(m1.Marked_Officers_forward.objects.filter(marked_no__item_no__inspection_no_id=id1).values('compliance_forward','created_on_forward','marked_to_forward__designation').order_by('-created_on_forward'))

        for i in range(len(user)):
            user[i].update({'compliance':user[i]['compliance_forward'],'designation':user[i]['marked_to_forward__designation'],'created_on':user[i]['created_on_forward']})
        
        for i in range(len(user1)):
            Remarks = user1[i]['item_no__markofcRemarks']
            lines = Remarks.split('\n')
            issuedescription = lines[1].split(': ')[1].strip()
            rem=''
            if user1[i]['status_flag']==3:
                rem=user1[0]['compliance']
            user1[i].update({'remark':issuedescription,'designation':user1[i]['marked_to__designation'],'compliance':rem})
            user.append(user1[i])


        return JsonResponse({'user':user},safe=True)
    return JsonResponse({'success':False},status=404)



def modalInfo1(request):
    if request.method=='GET':
        id1=request.GET.get('id')
        data = list(m1.Marked_Officers.objects.filter(item_no__inspection_no_id=id1).values('item_no__inspection_no__officer_desig','target_date','status_flag','reply_on','compliance'))
        user1=data[0]['item_no__inspection_no__officer_desig']
        Date=data[0]['target_date']
        rem=''
        if Date==None:
            if data[0]['status_flag']==3:
                Date = data[0]['reply_on']
                Date=datetime.strptime(str(Date),'%Y-%m-%d').strftime('%d/%m/%Y')
                Date=str(Date)
                rem=data[0]['compliance']
                print(rem)
            else:
                Date = 'Target Date not set'
        else:
            Date=datetime.strptime(str(Date),'%Y-%m-%d').strftime('%d/%m/%Y')
            Date=str(Date)
        
        return JsonResponse({'name':user1,'target_date':Date,'status_flag':data[0]['status_flag']},safe=True)
    return JsonResponse({'success':False},status=404)


#############################################################################################################################################################
# SIRI FORM end
#############################################################################################################################################################



############   ciri api start

@api_view(['POST'])
def siriForm_api(request):
    data = []
    if request.method == 'POST':
            rdata = json.loads(request.body)
            rlyorg = rdata['rlyorg']
            division = rdata['division']
            issuetitle = rdata['issuetitle']
            issuedescription = rdata['issuedescription']
            location = rdata['location']
            email=rdata['email']

            priority = rdata['priority']
            if priority == 'High':
                priority = 1
            elif priority == 'Medium':
                priority = 2
            elif priority == 'NA':
                priority = 0
            else:
                priority = 3
        
            gm = rdata['gm']
            drm = rdata['drm']

            description = rdata['description']
            print(description)
            if description == 'Train':
                location_val = rdata['location_val']
                location_val = location_val.split('-')[0]
                print(location_val)
                location_code = list(train_master.objects.filter(train_no=location_val).values('tnid'))[0]['tnid']
            elif description == 'Station':
                location_val = rdata['location_val']
                print(location_val)
                location_code = list(station_master.objects.filter(station_name=location_val).values('stnshortcode'))[0]['stnshortcode']
            elif description == 'Section':
                location_val = rdata['location_val']
                print(location_val)
                location_code = list(section_master.objects.filter(section_name=location_val).values('secid'))[0]['secid']
            elif description == 'Other':
                location_val = rdata['location_val']
                print(location_val)
                location_code = NULL


            inspection_type=3 #surprise inspection
            
            max_id=0
            temp=list(m2.einspection_details.objects.filter(delete_flag=False).values())
            if len(temp)!=0:
                max_id = m2.einspection_details.objects.aggregate(Max('einspno'))['einspno__max']
                max_id+=1 
            else:
                max_id=1

            rly_unit_code = list(railwayLocationMaster.objects.filter(parent_rly_unit_code=rlyorg,rly_unit_code=division).values('rly_unit_code'))
            # x = rly_unit_code[0]['rly_unit_code']

            desgn_id = list(Level_Desig.objects.filter(official_email_ID=email).values('designation_code'))
            designation_code_id = desgn_id[0]['designation_code']
            rlyzone = list(railwayLocationMaster.objects.filter(rly_unit_code=rlyorg).values('rly_unit_code'))
            divzone = list(railwayLocationMaster.objects.filter(rly_unit_code=division).values('rly_unit_code'))
        
            rly_zone=rlyzone[0]['rly_unit_code']
            div_zone=divzone[0]['rly_unit_code']
            
            div_id = railwayLocationMaster.objects.filter(Q(rly_unit_code=division) & Q(location_type='DIV'))[0]
            rly_id = railwayLocationMaster.objects.filter(Q(rly_unit_code=rlyorg) & Q(location_type='ZR'))[0]
            
            issuetitle_id = question_sub_category_master.objects.filter(Q(sub_category=issuetitle)).values('sub_id')[0]['sub_id']
        
            officer_designation = rdata['officer']
            officer = list(Level_Desig.objects.filter(designation=officer_designation).values())
            officer_instance = Level_Desig.objects.filter(designation=officer_designation)
            
            instypeid = list(inspectiontype_master.objects.filter(shortcode = 'CIRI').values('instypeid'))[0]['instypeid']

            # inspection=inspectiontype_master.objects.filter(instypeid=instypeid,delete_flag=False)[0]
            # dept_code=departMast.objects.filter(department_code=officer[0]['department_code_id'])[0]
            currentDateTime = datetime.now()
            date = currentDateTime.date()
            year=date.strftime("%Y")
            d=Level_Desig.objects.filter(official_email_ID=email).values('designation','designation_code','empno__empname', 'empno__empmname', 'empno__emplname')

            first_name = d[0]['empno__empname'] if d[0].get('empno__empname') else ''
            middle_name = d[0]['empno__empmname'] if d[0].get('empno__empmname') else ''
            last_name = d[0]['empno__emplname'] if d[0].get('empno__emplname') else ''

            name = ' '.join(filter(None, [first_name, middle_name, last_name]))

            # inspection_note_no = str(year)+'/'+str(d[0]['designation']) + '/' + str(inspection.name) + '/' + str(max_id)

            createdby=list(Level_Desig.objects.filter(official_email_ID=email).values('empno'))
            datenow1=datetime.now()
            datenow=datenow1.date()

            if description == 'other':
                x='CIRI Inspection of '+ location_val +' - by '+ d[0]['designation'] +' on '+ str(datenow.strftime("%d/%m/%y"))
            else:
                x='CIRI Inspection of '+ description.title() +': ' + location_val +' - by '+ d[0]['designation'] +' on '+ str(datenow.strftime("%d/%m/%y"))
        
            reporttime = datetime.now()

            note_ = str(year)+'/'+str(d[0]['designation'])+'/CIRI'+'/'
            last_note1 = m1.Inspection_details.objects.filter(inspection_note_no__istartswith=note_).aggregate(Max('insp_last'))
            if last_note1['insp_last__max'] == None:
                last_note1 = 1
                inspection_note_no = str(year)+'/'+str(d[0]['designation']) + '/CIRI/' + str(last_note1)
            else:
                last_note1 = int(last_note1['insp_last__max']) +1
                inspection_note_no = str(year)+'/'+str(d[0]['designation']) + '/CIRI/' + str(last_note1)

            imagepath = rdata['imgpath']
            
            obj1 = m1.Inspection_details.objects.create(
                inspected_on=reporttime,
                start_date=reporttime,
                final_submit_on=reporttime,
                created_on=reporttime,
                created_by=createdby[0]['empno'],
                modified_by=createdby[0]['empno'],
                modified_on=reporttime,
                inspection_officer_id=designation_code_id,
                status_flag=1,
                item_type='CIRI',
                insp_last=last_note1,
                
                officer_desig=d[0]['designation'], 
                officer_name=name,
            
                inspection_title=x,
                # instypeid=inspection,
                inspection_note_no=inspection_note_no,
                # is_scheduled=is_scheduled,
                insp_type=inspection_type)

            subject="CIRI Inspection Report"
        
            print(obj1.inspection_no)

            if gm=='yes' and drm=='yes':
                gm_id = list(railwayLocationMaster.objects.filter(rly_unit_code=rlyorg).values('rly_unit_code'))
                a = gm_id[0]['rly_unit_code']
            
                desg_gm = list(Level_Desig.objects.filter(rly_unit_id=a,d_level='GM',parent_desig_code=1217).values('designation_code','official_email_ID','designation'))

                To = desg_gm[0]['official_email_ID']
                context = {'title': x}
                v1.InspSendMail(subject, To, context)

                drm_id = list(railwayLocationMaster.objects.filter(parent_rly_unit_code=rlyorg,rly_unit_code=division).values('rly_unit_code'))
                b = drm_id[0]['rly_unit_code']
                # # print('bbbb ',b)
                desg_drm = list(Level_Desig.objects.filter(rly_unit_id=b,d_level='DRM').values('designation_code','official_email_ID','designation'))

                To = desg_drm[0]['official_email_ID']
                context = {'title': x}
                v1.InspSendMail(subject, To, context)
            
                mm6.copyto_mails.objects.create(sender_id_id=d[0]['designation_code'], subject=subject,doc_id=obj1.inspection_no,  body=x, area_flag=0, doc_table='i', receiver_id=(str(desg_gm[0]['designation_code']) + ',' + str(desg_drm[0]['designation_code'])), receiver_desig=(str(desg_gm[0]['designation']) + ',' + str(desg_drm[0]['designation'])))
            
            elif gm=='yes':
                gm_id = list(railwayLocationMaster.objects.filter(rly_unit_code=rlyorg).values('rly_unit_code'))
                a = gm_id[0]['rly_unit_code']
            
                desg_gm = list(Level_Desig.objects.filter(rly_unit_id=a,d_level='GM',parent_desig_code=1217).values('designation_code','official_email_ID','designation'))

                To = desg_gm[0]['official_email_ID']
                context = {'title': x}
                v1.InspSendMail(subject, To, context)
                print(desg_gm)
                mm6.copyto_mails.objects.create(sender_id_id=d[0]['designation_code'], subject=subject,doc_id=obj1.inspection_no,  body=x, area_flag=0, doc_table='i', receiver_id=desg_gm[0]['designation_code'], receiver_desig=desg_gm[0]['designation'])

            elif drm=='yes':
                drm_id = list(railwayLocationMaster.objects.filter(parent_rly_unit_code=rlyorg,rly_unit_code=division).values('rly_unit_code'))
                b = drm_id[0]['rly_unit_code']
                # # print('bbbb ',b)
                desg_drm = list(Level_Desig.objects.filter(rly_unit_id=b,d_level='DRM').values('designation_code','official_email_ID','designation'))

                To = desg_drm[0]['official_email_ID']
                context = {'title': x}
                v1.InspSendMail(subject, To, context)
            
                mm6.copyto_mails.objects.create(sender_id_id=d[0]['designation_code'], subject=subject,doc_id=obj1.inspection_no,  body=x, area_flag=0, doc_table='i', receiver_id=desg_drm[0]['designation_code'], receiver_desig=desg_drm[0]['designation'])

            m1.Insp_multi_location.objects.create(inspection_no_id=obj1.inspection_no, item=rlyorg, type='HQ')

            m1.Insp_multi_location.objects.create(inspection_no_id=obj1.inspection_no, item=division, type='DIV')
           
            obj2=m1.Item_details.objects.create(
                inspection_no=obj1,
                item_type=issuetitle_id,
                status_flag=1,
                markofcRemarks='Location: ' + location + '\nDescription: ' + issuedescription,
            # location=location,
                priority=priority,
            # qtype='SIRI',
                item_title='Para1',
                sl_no=1,
                type='H',
                des_id=1,

                created_on=reporttime,
                created_by=createdby[0]['empno'],
                modified_by=createdby[0]['empno'],
                modified_on=reporttime,

                location_table=description.title(),
                location_val=location_val,
                location_code=location_code,
                hqid_id=rly_zone,
                divid_id=div_zone,
                link_image=imagepath)
        
            m1.Marked_Officers.objects.create(
                item_no=obj2,
                marked_to_id=officer_instance[0].designation_code,
                marked_emp=officer[0]['empno_id'],

                created_on=reporttime,
                created_by=createdby[0]['empno'],
                modified_by=createdby[0]['empno'],
                modified_on=reporttime,
            
                priority=priority,
                status_flag=1,
                )

            if obj1:
                return JsonResponse({'success': 'Data Added Successfully'})

    return Response({'message': 'Method Not Allowed'})



@api_view(['POST'])
def getUserRailwayDivision(request):
    data = []
    try:
        if request.method == 'POST':
            print("inside POST")
            rdata = json.loads(request.body)
            email = rdata['email']
            hq_id = Level_Desig.objects.filter(official_email_ID=email).values('hq_id')[0]['hq_id']
            print(hq_id)
            rly_id = Level_Desig.objects.filter(official_email_ID=email).values('div_id')[0]['div_id']
            print(rly_id)


            division = list(railwayLocationMaster.objects.filter(rly_unit_code = rly_id).values('rly_unit_code', 'location_description').distinct())
            railway = list(railwayLocationMaster.objects.filter(rly_unit_code = hq_id).values('rly_unit_code', 'location_description').distinct())
        
        
            return JsonResponse({'Status':'OK', 'Message':'SUCCESS', 'railway':railway,'division':division})
    except Exception as e:
        data.append({"exception":str(e)})
        return JsonResponse({'Status':'NOT OK', 'Message':'FAILURE', 'Data':data})

@api_view(['GET'])
def getRailways(request):
        railway = list(railwayLocationMaster.objects.filter(location_type_desc__in = ['HEAD QUATER', 'RAILWAY BOARD', 'RDSO', 'PRODUCTION UNIT', 'OFFICE', 'PSU']).values('rly_unit_code', 'location_description').distinct().order_by('location_code'))
        return JsonResponse({'railway':railway})

@api_view(['GET'])
def getRailways_ciri(request):
        railway = list(railwayLocationMaster.objects.filter(location_type_desc__in = ['HEAD QUATER']).values('rly_unit_code', 'location_description').distinct().order_by('location_code'))
        return JsonResponse({'railway':railway})

@api_view(['POST'])
def getDivision(request):
    if request.method == 'POST':
        print("inside POST")
        rdata = json.loads(request.body)
        rly_id_id = rdata['rly_id_id']
        division = list(railwayLocationMaster.objects.filter(location_type_desc__in = ['DIVISION', 'WORKSHOP'], parent_rly_unit_code = rly_id_id).values('rly_unit_code', 'location_description').distinct().order_by('location_code'))
        # for entry in division:
        #     entry['rly_unit_code'] = str(entry['rly_unit_code'])
        return JsonResponse({'division':division})

@api_view(['POST'])
def getSection(request):
    if request.method == 'POST':
        print("inside POST")
        rdata = json.loads(request.body)
        rly_id_id = rdata['rly_id_id']
        div_id_id = rdata['div_id_id']
        print('rly_id_id',rly_id_id)
        print('div_id_id',div_id_id)
        if div_id_id != '':
            Section=list(section_master.objects.filter(Q(div_id_id_id=div_id_id,delete_flag=False,section_name__isnull=False) & ~Q(section_name='') ).values('secid','section_name').distinct().order_by('section_name'))
        else:
            Section=list(section_master.objects.filter(Q(rly_id_id_id=rly_id_id,delete_flag=False,section_name__isnull=False) & ~Q(section_name='') ).values('secid','section_name').distinct().order_by('section_name'))

        return JsonResponse({'Section':Section})

@api_view(['POST'])
def getStation(request):
    if request.method == 'POST':
        print("inside POST")
        rdata = json.loads(request.body)
        rly_id_id = rdata['rly_id_id']
        div_id_id = rdata['div_id_id']
        if(div_id_id == 0):
            station = list(station_master.objects.filter(rly_id_id = rly_id_id, delete_flag = False).values('station_name','stnshortcode').distinct().order_by('station_name'))
        else:
            station = list(station_master.objects.filter(rly_id_id = rly_id_id, div_id_id = div_id_id, delete_flag = False).values('station_name','stnshortcode').distinct().order_by('station_name'))
        print(station)
        return JsonResponse({'station':station})

@api_view(['POST'])
def getTrain(request):
    data = []
    if request.method == 'POST':
        print("inside POST")
        rdata = json.loads(request.body)
        rly_id_id = rdata['rly_id_id']
        div_id_id = rdata['div_id_id']
        try:
            if div_id_id != '':
                data = list(train_master.objects.filter(rly_id_id = rly_id_id, div_id_id = div_id_id, delete_flag = False).values('train_no','train_name',train = Concat(F('train_no'), Value('-'),F('train_name'))).order_by('train_name'))
            else:
                data = list(train_master.objects.filter(rly_id_id = rly_id_id, delete_flag = False).values('train_no','train_name',train = Concat(F('train_no'), Value('-'),F('train_name'))).order_by('train_name'))

            print(data)
            return JsonResponse({'Status':'OK', 'Message':'SUCCESS', 'Count':len(data), 'Data':data})
        except Exception as e:
            data.append({"exception":str(e)})
            return JsonResponse({'Status':'NOT OK', 'Message':'FAILURE', 'Data':data})

@api_view(['GET'])
def getDepartment(request):
        department = list(departMast.objects.values('department_name').distinct().order_by('department_name'))
        return JsonResponse({'department':department})

@api_view(['GET'])
def issue_category(request):
    issue=list(question_sub_category_master.objects.filter(disable_flag = False).values('sub_category').order_by('sub_id'))
    print(issue)
    return JsonResponse({"issue": issue})

@api_view(['POST'])
def ConcernedOfficer(request):
    data = []
    if request.method == 'POST':
        print("inside POST")
        rdata = json.loads(request.body)
        rly_id=rdata['rly_id']
        division_id=rdata['div_id']
        department = rdata['dept']
        email=rdata['email']
        # division_id = list(railwayLocationMaster.objects.filter(location_code = division).values_list('rly_unit_code',flat=True))[0]
        if division_id != '':
            if department == 'ALL':
                result=list(Level_Desig.objects.exclude(official_email_ID=email).filter(div_id=division_id).values('designation_code','designation').order_by('designation'))
            else:
                result=list(Level_Desig.objects.exclude(official_email_ID=email).filter(div_id=division_id,department=department).values('designation_code','designation').order_by('designation'))
            #result=list(Level_Desig.objects.filter(department_code__department_code=department).values())
        else:
            if department == 'ALL':
                result=list(Level_Desig.objects.exclude(official_email_ID=email).filter(hq_id=rly_id).values('designation_code','designation').order_by('designation'))
            else:
                result=list(Level_Desig.objects.exclude(official_email_ID=email).filter(hq_id=rly_id,department=department).values('designation_code','designation').order_by('designation'))
            
        print(result)
        return JsonResponse({'result': result})

@api_view(['POST'])
def upload_img_api(request):
    data = []
    if request.method == 'POST':
        file = request.FILES['imagepath']
        print(file,' image Path')
        f1 = str(file)
        for1 = f1.split('.')
        for1 = for1[len(for1)-1]
        fs=FileSystemStorage(location='media/Inspection/')
        files=fs.save(file.name,file)
        f2 ='media/Inspection/'+str(files)
        imagepath = f2
        print('imagepath',imagepath)
        return JsonResponse({"imagepath": imagepath})



############  ciri api end



#########################################################Phase 1 api android app start ################################################


@api_view(['POST'])
def save_inspection_details(request):
    data = []
    if request.method == 'POST':
        # try:
            # Extract form data from JSON request
            rdata = json.loads(request.body)
            print("inside create_inspection_details")
            final=rdata['final']
            final_id=rdata['final_id']
            rly=rdata['rly']
            div=rdata['div']
            # dept=rdata['department']
            loc=rdata['loc']
            insdt=rdata['insdt']
            accompany=rdata['accompany']
            final_img = rdata['final_img']
            inspection_no = rdata['inspection_no']
            # insp_desig = rdata['insp_desig']
            # insp_ofc_name = rdata['insp_ofc_name']
            station_name = rdata['station_name']
            insp_type = rdata['insp_type']
            item_sections = rdata['item_sections']
            sec_ids=rdata['sec_ids']
            sec_details=rdata['sec_details']
            full_array=rdata['full_array']
            ins_flag=rdata['ins_flag']
            email=rdata['email']
            rly_id=None
            div_id=None
            if inspection_no =='' or ins_flag=='1':
                inspection_no = None

            if 'to' in insdt:
                dt = insdt.split('to')
                st_date = dt[0].strip()
                en_date = dt[1].strip()
                start_date = datetime.strptime(st_date, '%d/%m/%y').strftime('%Y-%m-%d')
                inspected_on = datetime.strptime(en_date, '%d/%m/%y').strftime('%Y-%m-%d')
            else:
                inspected_on = datetime.strptime(insdt, '%d/%m/%y').strftime('%Y-%m-%d')
                start_date = datetime.strptime(insdt, '%d/%m/%y').strftime('%Y-%m-%d')

            d=Level_Desig.objects.filter(official_email_ID=email).values('designation','designation_code','empno__empname', 'empno__empmname', 'empno__emplname')

            first_name = d[0]['empno__empname'] if d[0].get('empno__empname') else ''
            middle_name = d[0]['empno__empmname'] if d[0].get('empno__empmname') else ''
            last_name = d[0]['empno__emplname'] if d[0].get('empno__emplname') else ''

            name = ' '.join(filter(None, [first_name, middle_name, last_name]))


            title=rdata['title']
            send_to=rdata['send_to']
            send_desig=rdata['send_desig']
           
            finalval = (final)
            final_allid = (final_id)
            year = str(datetime.now().year)
            print(finalval,final_allid,sec_ids,sec_details)


            # empno=models.Level_Desig.objects.exclude(delete_flag=True).filter(official_email_ID=email)
            empnox = Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=email)| Q(official_email_ID=email) | Q(official_email_ID=email), empno__isnull=False)
            if empnox:
                empno = empnox[0].empno_id
                desig = empnox[0].designation
                ddesig = empnox[0].designation_code
            else:
                messages.error(request, 'Employee id not found')
            if m1.Inspection_details.objects.filter(inspection_no = inspection_no ).exists():
                note_ = year+'/'+desig+'/Insp'+'/'
                last_note1 = m1.Inspection_details.objects.filter(inspection_note_no__istartswith=note_).aggregate(Max('insp_last'))
                if last_note1['insp_last__max'] == None:
                    last_note1 = 1
                    note_no = year+'/'+desig+'/Insp'+'/'+ str(last_note1)
                else:
                    last_note1 = int(last_note1['insp_last__max']) +1
                    note_no = year+'/'+desig+'/Insp'+'/'+ str(last_note1)

                m1.Inspection_details.objects.filter(inspection_no = inspection_no ).update(inspection_title=title,station_name=station_name,officer_name=name,officer_desig=d[0]['designation'],  created_by=empno, insp_last=last_note1,inspection_note_no=note_no, inspection_officer_id=ddesig, item_type='Insp', modified_by=empno, status_flag=1, start_date=start_date, inspected_on=inspected_on,final_submit_on=datetime.now(),insp_type=insp_type,item_sections=item_sections)
               
                # m1.Insp_Accompany.objects.filter(inspection_no_id=inspection_no).delete()
                # m6.copyto_mails.objects.filter( doc_id=inspection_no, doc_table='i').delete()
                # m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_no, type='HQ').delete()
                # m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_no, type='DIV').delete()
                # m1.Marked_Officers.objects.filter(item_no__in = m1.Item_details.objects.filter(inspection_no=inspection_no).values('item_no')).delete()
                # m1.Item_details.objects.filter(inspection_no=inspection_no).delete()
                # m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_no,type='LOC').delete()
               
                inspection_id = inspection_no
            else:
                note_ = year+'/'+desig+'/Insp'+'/'
                last_note1 = m1.Inspection_details.objects.filter(inspection_note_no__istartswith=note_).aggregate(Max('insp_last'))
                if last_note1['insp_last__max'] == None:
                    last_note1 = 1
                    note_no = year+'/'+desig+'/Insp'+'/'+ str(last_note1)
                else:
                    last_note1 = int(last_note1['insp_last__max']) +1
                    note_no = year+'/'+desig+'/Insp'+'/'+ str(last_note1)
                m1.Inspection_details.objects.create(inspection_title=title,created_on=datetime.now(), station_name=station_name,officer_name=name,officer_desig=d[0]['designation'], created_by=empno, insp_last=last_note1,inspection_note_no=note_no, inspection_officer_id=ddesig, item_type='Insp', modified_by=empno, status_flag=1, start_date=start_date, inspected_on=inspected_on,final_submit_on=datetime.now(),insp_type=insp_type,item_sections=item_sections)            
                inspection_id=m1.Inspection_details.objects.all().last().inspection_no
           
            messages.info(request, f'Inspection note successfully saved with Inspection Note No: {note_no}')




            m1.Insp_Accompany.objects.filter(inspection_no_id=inspection_id).update(update_status='F')
            if m1.Insp_Accompany.objects.filter(inspection_no_id=inspection_id).exists():
                for up in accompany:
                    if m1.Insp_Accompany.objects.filter(inspection_no_id=inspection_id, accompany=up).exists():
                        m1.Insp_Accompany.objects.filter(inspection_no_id=inspection_id, accompany=up).update(accompany=up,update_status='T')
                    else:
                        m1.Insp_Accompany.objects.create(accompany=up, inspection_no_id=inspection_id)
            else:
                for acc in accompany:
                    m1.Insp_Accompany.objects.create(accompany=acc, inspection_no_id=inspection_id)
            m1.Insp_Accompany.objects.filter(inspection_no_id=inspection_id,update_status='F').delete()
            #======================change 21-11-22======================
            for rl in rly:
                rly_code=railwayLocationMaster.objects.get(location_code=rl,location_type_desc__in=['RAILWAY BOARD', 'PRODUCTION UNIT', 'HEAD QUATER','OFFICE', 'PSU', 'PRODUCTION UNIT', 'INSTITUTE'])
                rly_id=rly_code
                if m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_id, item=rl, type='HQ').exists():
                    m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_id, item=rl, type='HQ').update(inspection_no_id=inspection_id, item=rl, type='HQ',update_status='T')
                else:
                    m1.Insp_multi_location.objects.create(inspection_no_id=inspection_id, item=rl, type='HQ')
            for di in div:
                div_code=railwayLocationMaster.objects.get(location_code=di,location_type_desc__in=['DIVISION','WORKSHOP'])
                div_id=div_code
                if m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_id, item=di, type='DIV').exists():
                    m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_id, item=di, type='DIV').update(inspection_no_id=inspection_id, item=di, type='DIV',update_status='T')
                else:
                    m1.Insp_multi_location.objects.create(inspection_no_id=inspection_id, item=di, type='DIV')
           
            for lo in loc:
                if lo:
                    new_loc = lo.split('#')
                    if(len(new_loc) == 3):
                        location = new_loc[0]
                        location_type = new_loc[1]
                        location_code = new_loc[2]
                    else:
                        location = new_loc[0]
                        location_type = new_loc[1]
                        location_code = new_loc[2]
                        location = location + '@#@' + new_loc[3]


                    #print(location, location_type)
                    if m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_id, item=location,  type='LOC').exists():
                        m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_id, item=location,  type='LOC').update(inspection_no_id=inspection_id, item=location, item_code=location_code, type='LOC', table_from=location_type,update_status='T')
                    else:
                        m1.Insp_multi_location.objects.create(inspection_no_id=inspection_id, item=location, item_code=location_code, type='LOC', table_from=location_type)

            if len(loc) == 0:
                location = None
                location_type = None
                location_code = None
           
            #========================
            m1.Insp_multi_location.objects.filter(inspection_no=inspection_id,update_status='F').delete()
            m1.Item_details.objects.filter(inspection_no=inspection_id).update(update_status ='F')
            m1.Marked_Officers.objects.filter(item_no__in=m1.Item_details.objects.filter(inspection_no=inspection_id).values('item_no')).update(update_status ='F')

            officer_email=[]
            officer_contact=[]
            marked_officers_sms=[]
            counters =1
            if len(sec_ids) == 0:
                # full_array=full_array.split(',')
                sec_ids['A']=full_array
            for a in (sec_ids):
                if item_sections != '0':
                    locid='location_at'+a
                    locationdet=sec_details[locid][3:]
                    xl = locationdet.split('#')
                    if xl[1] == 'zone':
                        zone_name=railwayLocationMaster.objects.get(location_code=xl[0],location_type_desc__in=['RAILWAY BOARD', 'PRODUCTION UNIT', 'HEAD QUATER','OFFICE', 'PSU', 'PRODUCTION UNIT', 'INSTITUTE'])
                        heading='Observation at '+ xl[0]
                        div_name=None
                        sec_name=None
                        sec_type=None
                        sec_id=None
                    elif xl[1] == 'div':
                        div_name=railwayLocationMaster.objects.get(location_code=xl[0],location_type_desc__in=['DIVISION','WORKSHOP'])
                        heading='Observation at '+ xl[0]
                        zone_name=None
                        sec_name=None
                        sec_type=None
                        sec_id=None
                        zon=railwayLocationMaster.objects.filter(location_code=xl[0],location_type_desc__in=['DIVISION','WORKSHOP']).values('parent_rly_unit_code')
                        if len(zon):
                            zone_name=railwayLocationMaster.objects.get(rly_unit_code=zon[0]['parent_rly_unit_code'],location_type_desc__in=['RAILWAY BOARD', 'PRODUCTION UNIT', 'HEAD QUATER','OFFICE', 'PSU', 'PRODUCTION UNIT', 'INSTITUTE'])
                    else:
                        sec_name=xl[0]
                        sec_type=xl[1]
                        sec_id=xl[2]
                        heading='Observation at '+ sec_name
                        otherNames=sec_name.split('/')
                        if sec_type!='TRN' and sec_type!='ORL':
                            if len(otherNames)>2:
                                div_name=railwayLocationMaster.objects.get(location_code=otherNames[len(otherNames)-2],location_type__in=['WS','DIV'])
                                zone_name=railwayLocationMaster.objects.get(location_code=otherNames[len(otherNames)-1],location_type__in=['ZR','RB'])
                            else:
                                zone_name=railwayLocationMaster.objects.get(location_code=otherNames[1],location_type__in=['ZR','RB'])
                                div_name=None
                        else:
                            trdres = xl[3].split('@')
                            if len(trdres)>1:
                                div_name=railwayLocationMaster.objects.get(location_code=trdres[0])
                                zone_name=railwayLocationMaster.objects.get(location_code=trdres[1])
                            else:
                                zone_name=railwayLocationMaster.objects.get(location_code=trdres[0])
                                div_name=None
                    m1.Item_details.objects.create(sl_no=counters,item_title=heading,status_flag=4, created_on=datetime.now(), type='S',des_id=a,created_by=empno, inspection_no_id=inspection_id,location_table=sec_type,location_code=sec_id,location_val = sec_name,hqid=zone_name,divid=div_name)
                    counters+=1
                else:
                    sec_type=location_type
                    sec_id=location_code
                    sec_name=location
                    zone_name=rly_id
                    div_name=div_id
                    
                for f, b in zip(finalval, final_allid):
                    for x,y in zip(finalval[f], final_allid[b]):
                        s = y.split('.')
                        if s[0] not in sec_ids[a]:
                            continue
                        if len(s) == 1:
                            hed = 'heading'+y
                            heading = finalval[f][hed]
                            tbl_data = finalval[f][y]
                            
                            if m1.Item_details.objects.filter(type='H',des_id=y, inspection_no=inspection_id).exists():
                                m1.Item_details.objects.filter(type='H',des_id=y, inspection_no=inspection_id).update(priority=0,sl_no=counters,link_image=None,del_flag=0,tbl_data=tbl_data,item_title=heading,status_flag=1, created_on=datetime.now(),created_by=empno, type='H',des_id=y,update_status='T',location_table=sec_type,location_code=sec_id,location_val = sec_name,hqid=zone_name,divid=div_name)
                                item_id=m1.Item_details.objects.filter(type='H',des_id=y, inspection_no=inspection_id).all().last().item_no
                            else:
                                m1.Item_details.objects.create(sl_no=counters,tbl_data=tbl_data,item_title=heading,status_flag=1, created_on=datetime.now(), type='H',des_id=y,created_by=empno, inspection_no_id=inspection_id,location_table=sec_type,location_code=sec_id,location_val = sec_name,hqid=zone_name,divid=div_name)
                                item_id=m1.Item_details.objects.all().last().item_no
                            y2=str(y+'.1')
                            if y2 in final_allid[b]:
                                #print('if',y2)
                                m1.Item_details.objects.filter(type='H',des_id=y, inspection_no_id=inspection_id).update(status_flag=4)
                                pass
                            else:
                                #print('else',y2)
                                # trz = 'targetdate'+y
                                officm = 'markeofficer'+y
                                # chk = 'check' + y

                                
                            
                                # targetd = finalval[f][trz]
                                markof = finalval[f][officm]
                                # checkbox = finalval[f][chk]


                            


                                # if checkbox == '1':
                                #     checkbox = 1
                                # else:
                                #     checkbox = 0
                                markeofficer = markof.split(',')
                                for i in markeofficer:
                                    des = Level_Desig.objects.filter(designation=i)[0].designation_code
                                markeofficer = [des]
                                # if targetd:
                                #     targetd=targetd.split('/')
                                #     targetd='20'+targetd[2].strip()+'-'+targetd[1].strip()+'-'+targetd[0].strip()
                                #     t_date = targetd
                                
                                # else:
                                #     t_date = None

                                # for action type
                                # act_type = 'type' + y
                                # typeofaction=finalval[f][act_type]
                                # if typeofaction=='info':
                                #     act_flag=1
                                # else:
                                #     act_flag=0

                                # rem='remarksmarkeofficer'+y
                                # remarks=finalval[f][rem]
                                ity='item_type'+y
                                item_type=finalval[f][ity]
                                # m1.Item_details.objects.filter(item_title=heading,status_flag=1, type='H',des_id=y, inspection_no_id=inspection_id).update(target_date=t_date, priority=checkbox, action_type=act_flag, markofcRemarks=remarks)
                                m1.Item_details.objects.filter(item_title=heading,status_flag=1, type='H',des_id=y, inspection_no_id=inspection_id).update(location_table=sec_type,location_code=sec_id,location_val = sec_name,item_type=item_type)

                                # item_id=m1.Item_details.objects.all().last().item_no
                                #mark officer
                                infom= 'markeofcinfo'+y
                                infom = finalval[f][infom]
                                if len(infom) >0:
                                    officerinfo=json.loads(infom)
                                    print(officerinfo)
                                else:
                                    officerinfo=[]
                                # officerinfo = (infom.strip('[')).strip(']').split(',')
                                markOfficerPrev = []
                                if len(officerinfo):
                                    for i in range(len(officerinfo)):
                                        DesignationCode=officerinfo[i]['DesignationCode']
                                        markOfficerPrev.append(str(DesignationCode))
                                        selected_action=officerinfo[i]['selected_action']
                                        priority=officerinfo[i]['priority']
                                        tddate=officerinfo[i]['tddate']
                                        if m1.Item_details.objects.filter(item_no=item_id,priority=0).exists():
                                            m1.Item_details.objects.filter(item_no=item_id).update(priority=priority)
                                        Desig=Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=DesignationCode)
                                        if Desig:
                                            Desig1=Desig[0].designation_code
                                            if Desig[0].official_email_ID:
                                                officer_email.append(Desig[0].official_email_ID)
                                            if Desig[0].contactnumber:
                                                if Desig[0].contactnumber not in officer_contact:
                                                    marked_officers_sms.append({'contact':Desig[0].contactnumber,'designation':Desig[0].designation_code})
                                                    officer_contact.append(Desig[0].contactnumber)
                                            if m1.Marked_Officers.objects.all().last():
                                                marked_no_id=(m1.Marked_Officers.objects.all().last().marked_no)+1
                                            else:
                                                marked_no_id = 1

                                            
                                            if selected_action == 'info':
                                                if m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).exists():
                                                    m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).update(update_status='T',created_on=datetime.now(),created_by=empno,marked_emp=DesignationCode,status_flag=1,action_type=1)
                                                else:   
                                                    m1.Marked_Officers.objects.create(marked_emp=i,created_on=datetime.now(),created_by=empno, marked_no=marked_no_id,status_flag=1, item_no_id=item_id,marked_to_id=Desig1,action_type=1)
                                            
                                            else:
                                                if tddate == '-1':
                                                    if m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).exists():
                                                        m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).update(update_status='T',created_on=datetime.now(),created_by=empno,marked_emp=DesignationCode,status_flag=1,action_type=0,priority=priority)
                                                    else:   
                                                        m1.Marked_Officers.objects.create(marked_emp=i,created_on=datetime.now(),created_by=empno, marked_no=marked_no_id,status_flag=1, item_no_id=item_id,marked_to_id=Desig1,action_type=0,priority=priority)
                                                         
                                                else:
                                                    targetd=tddate.split('/')
                                                    targetd='20'+targetd[2].strip()+'-'+targetd[1].strip()+'-'+targetd[0].strip()
                                                    tddate = targetd
                                                    if m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).exists():
                                                        m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).update(update_status='T',created_on=datetime.now(),created_by=empno,marked_emp=DesignationCode,status_flag=1,action_type=0,priority=priority,target_date=tddate)
                                                    else:   
                                                        m1.Marked_Officers.objects.create(marked_emp=i,created_on=datetime.now(),created_by=empno, marked_no=marked_no_id,status_flag=1, item_no_id=item_id,marked_to_id=Desig1,action_type=0,priority=priority,target_date=tddate)
                                                    m1.Item_details.objects.filter(item_no=item_id).update(target_date=tddate,priority=priority)   
                                    markOfficerPrev1 = [x for x in markOfficerPrev if x not in markeofficer]
                                    if markOfficerPrev1 != ['']:
                                        for i in markOfficerPrev1:
                                            m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=i).update(update_status='F')
                                    markOfficerPrev = [x for x in markeofficer if x not in markOfficerPrev]
                                    if markOfficerPrev != ['']:
                                        for i in markOfficerPrev:
                                            Desig=Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i)
                                            if Desig:
                                                Desig1=Desig[0].designation_code
                                                if m1.Marked_Officers.objects.all().last():
                                                    marked_no_id=(m1.Marked_Officers.objects.all().last().marked_no)+1
                                                else:
                                                    marked_no_id = 1

                                                if m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).exists():
                                                    m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).update(update_status='T',created_on=datetime.now(),created_by=empno,marked_emp=i,status_flag=0)
                                                else:
                                                    m1.Marked_Officers.objects.create(created_on=datetime.now(),created_by=empno,marked_emp=i,marked_no=marked_no_id,status_flag=0,item_no_id=item_id,marked_to_id=Desig1)


                                elif markof:
                                    print(markof,'aaaaaaaaaaaaaa')
                                    for i in markeofficer:
                                        Desig=Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i)
                                        if Desig:
                                            Desig1=Desig[0].designation_code
                                            if Desig[0].official_email_ID:
                                                officer_email.append(Desig[0].official_email_ID)
                                            if Desig[0].contactnumber:
                                                if Desig[0].contactnumber not in officer_contact:
                                                    marked_officers_sms.append({'contact':Desig[0].contactnumber,'designation':Desig[0].designation_code})
                                                    officer_contact.append(Desig[0].contactnumber)
                                            if m1.Marked_Officers.objects.all().last():
                                                marked_no_id=(m1.Marked_Officers.objects.all().last().marked_no)+1
                                            else:
                                                marked_no_id = 1
                                            

                                            if m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).exists():
                                                m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).update(update_status='T',created_on=datetime.now(),created_by=empno,marked_emp=i,status_flag=1)
                                            else:   
                                                m1.Marked_Officers.objects.create(marked_emp=i,created_on=datetime.now(),created_by=empno, marked_no=marked_no_id,status_flag=1, item_no_id=item_id,marked_to_id=Desig1)
                                        
                                        else:
                                            print('error')
    
                        elif len(s) == 2:
                            ob = 'observation'+y
                            # trz = 'targetdate'+y
                            officm = 'markeofficer'+y
                            # chk = 'check' + y


                            observation = finalval[f][ob]
                            # targetd = finalval[f][trz]
                            markof = finalval[f][officm]
                            markeofficer = markof.split(',')


                            # checkbox = finalval[f][chk]


                            # if checkbox == '1':
                            #     checkbox = 1
                            # else:
                            #     checkbox = 0

                            # for action type
                            # act_type = 'type' + y
                            # typeofaction=finalval[f][act_type]
                            # if typeofaction=='info':
                            #     act_flag=1
                            # else:
                            #     act_flag=0
                        
                            # if targetd:
                            #     # targetdate = datetime.strptime(targetd, '%d/%m/%Y').strftime('%Y-%m-%d')
                            #     targetd=targetd.split('/')
                            #     targetd='20'+targetd[2].strip()+'-'+targetd[1].strip()+'-'+targetd[0].strip()
                            #     targetdate = targetd
                            # else:
                            #     targetdate = None
                            #print(observation)
                            tbl_data = finalval[f][y]
                            # rem='remarksmarkeofficer'+y
                            # remarks=finalval[f][rem]
                            ity='item_type'+y
                            item_type=finalval[f][ity]
                            if m1.Item_details.objects.filter(inspection_no=inspection_id, des_id=y,  type='SH').exists():
                                print("update")
                                # m1.Item_details.objects.filter(inspection_no=inspection_id, des_id=y,  type='SH').update(sl_no=counters,link_image=None,del_flag=0,tbl_data=tbl_data,observation=observation,priority=checkbox, status_flag=1,created_by=empno,created_on=datetime.now(), target_date=targetdate,action_type=act_flag,update_status='T',markofcRemarks=remarks)
                                m1.Item_details.objects.filter(inspection_no=inspection_id, des_id=y,  type='SH').update(priority =0,sl_no=counters,link_image=None,del_flag=0,tbl_data=tbl_data,observation=observation, status_flag=1,created_by=empno,created_on=datetime.now(), update_status='T',location_table=sec_type,location_code=sec_id,location_val = sec_name,item_type=item_type,hqid=zone_name,divid=div_name)

                                item_id=m1.Item_details.objects.filter(inspection_no=inspection_id, des_id=y,  type='SH').all().last().item_no
                            else:
                                # m1.Item_details.objects.create(sl_no=counters,tbl_data=tbl_data,observation=observation,priority=checkbox, status_flag=1,inspection_no_id=inspection_id, des_id=y, target_date=targetdate, type='SH', action_type=act_flag,created_by=empno,created_on=datetime.now(),markofcRemarks=remarks)
                                m1.Item_details.objects.create(sl_no=counters,inspection_no_id=inspection_id,link_image=None,del_flag=0,tbl_data=tbl_data,observation=observation, des_id=y, type='SH',status_flag=1,created_by=empno,created_on=datetime.now(), update_status='T',location_table=sec_type,location_code=sec_id,location_val = sec_name,item_type=item_type,hqid=zone_name,divid=div_name)
                                item_id=m1.Item_details.objects.all().last().item_no

                            # item_id=m1.Item_details.objects.all().last().item_no
                            #mark officer
                            infom= 'markeofcinfo'+y
                            infom = finalval[f][infom]
                            # print(infom)
                            if len(infom) >0:
                                officerinfo=json.loads(infom)
                                print(officerinfo)
                            else:
                                officerinfo=[]
                            # officerinfo = ((infom.strip('[')).strip(']'))
                            # print(officerinfo)
                            markOfficerPrev = []
                            if len(officerinfo):
                                for i in range(len(officerinfo)):
                                    DesignationCode=officerinfo[i]['DesignationCode']
                                    markOfficerPrev.append(str(DesignationCode))
                                    selected_action=officerinfo[i]['selected_action']
                                    priority=officerinfo[i]['priority']
                                    tddate=officerinfo[i]['tddate']
                                    if m1.Item_details.objects.filter(item_no=item_id,priority=0).exists():
                                        m1.Item_details.objects.filter(item_no=item_id).update(priority=priority)
                                    Desig=Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=DesignationCode)
                                    if Desig:
                                        Desig1=Desig[0].designation_code
                                        if Desig[0].official_email_ID:
                                            officer_email.append(Desig[0].official_email_ID)
                                        if Desig[0].contactnumber:
                                            if Desig[0].contactnumber not in officer_contact:
                                                marked_officers_sms.append({'contact':Desig[0].contactnumber,'designation':Desig[0].designation_code})
                                                officer_contact.append(Desig[0].contactnumber)
                                        if m1.Marked_Officers.objects.all().last():
                                            marked_no_id=(m1.Marked_Officers.objects.all().last().marked_no)+1
                                        else:
                                            marked_no_id = 1

                                        
                                        if selected_action == 'info':
                                            if m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).exists():
                                                m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).update(update_status='T',created_on=datetime.now(),created_by=empno,marked_emp=DesignationCode,status_flag=1,action_type=1)
                                            else:   
                                                m1.Marked_Officers.objects.create(marked_emp=i,created_on=datetime.now(),created_by=empno, marked_no=marked_no_id,status_flag=1, item_no_id=item_id,marked_to_id=Desig1,action_type=1)
                                        
                                        else:
                                            if tddate == '-1':
                                                if m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).exists():
                                                    m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).update(update_status='T',created_on=datetime.now(),created_by=empno,marked_emp=DesignationCode,status_flag=1,action_type=0,priority=priority)
                                                else:   
                                                    m1.Marked_Officers.objects.create(marked_emp=i,created_on=datetime.now(),created_by=empno, marked_no=marked_no_id,status_flag=1, item_no_id=item_id,marked_to_id=Desig1,action_type=0,priority=priority)
                                            else:
                                                targetd=tddate.split('/')
                                                targetd='20'+targetd[2].strip()+'-'+targetd[1].strip()+'-'+targetd[0].strip()
                                                tddate = targetd
                                                if m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).exists():
                                                    m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).update(update_status='T',created_on=datetime.now(),created_by=empno,marked_emp=DesignationCode,status_flag=1,action_type=0,priority=priority,target_date=tddate)
                                                else:   
                                                    m1.Marked_Officers.objects.create(marked_emp=i,created_on=datetime.now(),created_by=empno, marked_no=marked_no_id,status_flag=1, item_no_id=item_id,marked_to_id=Desig1,action_type=0,priority=priority,target_date=tddate)
                                                m1.Item_details.objects.filter(item_no=item_id).update(target_date=tddate)
                                markOfficerPrev1 = [x for x in markOfficerPrev if x not in markeofficer]
                                if markOfficerPrev1 != ['']:
                                    for i in markOfficerPrev1:
                                        m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=i).update(update_status='F')
                                markOfficerPrev = [x for x in markeofficer if x not in markOfficerPrev]
                                if markOfficerPrev != ['']:
                                    for i in markOfficerPrev:
                                        Desig=Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i)
                                        if Desig:
                                            Desig1=Desig[0].designation_code
                                            if m1.Marked_Officers.objects.all().last():
                                                marked_no_id=(m1.Marked_Officers.objects.all().last().marked_no)+1
                                            else:
                                                marked_no_id = 1

                                            if m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).exists():
                                                m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).update(update_status='T',created_on=datetime.now(),created_by=empno,marked_emp=i,status_flag=0)
                                            else:
                                                m1.Marked_Officers.objects.create(created_on=datetime.now(),created_by=empno,marked_emp=i,marked_no=marked_no_id,status_flag=0,item_no_id=item_id,marked_to_id=Desig1)
                            elif markof:
                                for i in markeofficer:
                                    Desig=Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i)
                                    if Desig:
                                        Desig1=Desig[0].designation_code
                                        if Desig[0].official_email_ID:
                                            officer_email.append(Desig[0].official_email_ID)
                                        if Desig[0].contactnumber:
                                            if Desig[0].contactnumber not in officer_contact:
                                                marked_officers_sms.append({'contact':Desig[0].contactnumber,'designation':Desig[0].designation_code})
                                                officer_contact.append(Desig[0].contactnumber)


                                        if m1.Marked_Officers.objects.all().last():
                                            marked_no_id=(m1.Marked_Officers.objects.all().last().marked_no)+1
                                        else:
                                            marked_no_id = 1

                                        if m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).exists():
                                            m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).update(created_on=datetime.now(),created_by=empno,marked_emp=i, status_flag=1,update_status='T')
                                        else:
                                            m1.Marked_Officers.objects.create(created_on=datetime.now(),created_by=empno,marked_emp=i,marked_no=marked_no_id,status_flag=1, item_no_id=item_id,marked_to_id=Desig1)
                                    else:
                                        print('error')
                                        # messages.info(request, 'Employ Desig not Match in Designation Master')
                            else:
                                markeofficer=""


                    
                        
                        else:
                            subdes = 'subdes'+y
                            subdes1 = finalval[f][subdes]
                            tbl_data = finalval[f][y]
                            # for action type
                            # act_type = 'type' + y
                            # typeofaction=finalval[f][act_type]
                            # if typeofaction=='info':
                            #     act_flag=1
                            # else:
                            #     act_flag=0
                            if m1.Item_details.objects.filter(type='SSH',des_id=y, inspection_no=inspection_id).exists():
                                m1.Item_details.objects.filter(type='SSH',des_id=y, inspection_no=inspection_id).update(sl_no=counters,link_image=None,del_flag=0,tbl_data=tbl_data, item_subtitle=subdes1,status_flag=4,created_by=empno,created_on=datetime.now(),update_status='T',location_table=sec_type,location_code=sec_id,location_val = sec_name,hqid=zone_name,divid=div_name)
                            else:
                                m1.Item_details.objects.create(sl_no=counters,tbl_data=tbl_data,item_subtitle=subdes1,status_flag=4, type='SSH',des_id=y, inspection_no_id=inspection_id,location_table=sec_type,location_code=sec_id,location_val = sec_name,hqid=zone_name,divid=div_name)

                        counters+=1
                
            m1.Item_details.objects.filter(inspection_no=inspection_id,update_status ='F').delete()
            m1.Marked_Officers.objects.filter(item_no__in=m1.Item_details.objects.filter(inspection_no=inspection_id).values('item_no'),update_status ='F').delete()
            m1.Marked_Officers.objects.filter(item_no__in=m1.Item_details.objects.filter(inspection_no=inspection_id).values('item_no'),marked_to__isnull=True).delete()
            
            for i in range(len(final_img)):
                ref = final_img[i][0]
                path = (final_img[i][1])[1:]
                data = list(m1.Item_details.objects.filter(inspection_no=inspection_id,des_id=ref).values('link_image'))
                if len(data) > 0:
                    data = data[0]['link_image']
                    if data != None:
                        path = data +'@#@'+path
                m1.Item_details.objects.filter(inspection_no=inspection_id,des_id=ref).update(link_image = path)

            m1.Item_details.objects.filter(inspection_no=inspection_id,link_image='').update(link_image=None)

           
            try:
                subject="Inspection report marked to you for n/a."
                # To=['ecegcttarun@gmail.com',]
                To=officer_email
                context = {'title': title}
                
                
                # if len(officer_contact) > 0:
                #     for num in officer_contact:
                #         pass
                        # sendsms(num)

                if len(marked_officers_sms) > 0:
                    for mar in marked_officers_sms:
                        new_pending=m1.Marked_Officers.objects.filter(item_no__inspection_no=inspection_id,marked_to_id=mar['designation']).values().count()
                        cum_pending=m1.Marked_Officers.objects.filter(marked_to_id=mar['designation'], status_flag=1).values().count()
                        for_pending=m1.Marked_Officers_forward.objects.filter(marked_to_forward_id=mar['designation'], status_flag=1).values().count()
                        total_pending=cum_pending+for_pending
                        # n=str(new_pending)+"/"+str(cum_pending)
                        issue_date=date.today()
                        issue_date = datetime.strftime(issue_date,"%d/%m/%Y")
                        t=Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=ddesig).values('designation')
                        if len(t)!=0:
                            inspection_officer=t[0]['designation']
                            inspection_officer=inspection_officer[0:15]
                        else:
                            inspection_officer='NA'
                        # msg_body=str(note_no)+" , "+str(issue_date)+", "+str(inspection_officer)
                        note_no=note_no[0:30]
                        # Total {#var#} Items of Insp. note no.{#var#} marked /forwarded by {#var#} marked  to you for n/a. Cumulative pending compliance:{#var#},CRIS/MU.
                        # message="Insp. note no. "+msg_body+" marked to you for n/a. New Paras marked/Cumulative pending compliance: "+n+", CRIS/INSP"
                        v1.sendsms_insp(mar['contact'],new_pending,note_no,inspection_officer,total_pending)
                   
                v1.InspSendMail(subject, To, context)
                



                # m1.Insp_mail_details.objects.create(subject=subject, body=title,area='Mark Of', inspection_no_id=inspection_id, send_to=send_to,send_desig=send_desig)
                mm6.copyto_mails.objects.create(sender_id_id=ddesig, subject=subject,doc_id=inspection_id,  body=title, area_flag=1, doc_table='i', receiver_id=send_to, receiver_desig=send_desig)
                messages.success(request, 'Mark officer email has been sent')
               
            except:
                print("error on sending")
                messages.error(
                    request, 'Email send failed. Please Try Again.')
            try:
                offic_mail =[]
                offic_contact =[]
                unique_offic_mail = list(set(offic_mail))
                unique_offic_contact = list(set(offic_contact))
                if send_to:
                    emil = send_to.split(',')
                    for i in emil:
                        email = Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i)
                        if email[0].official_email_ID:
                            offic_mail.append(email[0].official_email_ID)
                        if Desig[0].contactnumber:
                            offic_contact.append(Desig[0].contactnumber)
                           

                    subject="Inspection report"
                    To = unique_offic_mail
                    # To=['ecegcttarun@gmail.com',]
                    context = {'title': title}
                       
                    InspSendMail(subject, To, context)
                    # m1.Insp_mail_details.objects.create(subject=subject, body=title, area='Copy To', inspection_no_id=inspection_id, send_to=send_to,send_desig=send_desig)
                    if m6.copyto_mails.objects.filter(doc_id=inspection_id, area_flag=0, doc_table='i').exists():
                        m6.copyto_mails.objects.filter(doc_id=inspection_id, area_flag=0, doc_table='i').update(body=title,subject=subject,sender_id_id=ddesig, receiver_id=send_to, receiver_desig=send_desig)
                    else:
                        m6.copyto_mails.objects.create(sender_id_id=ddesig, subject=subject,doc_id=inspection_id,  body=title, area_flag=0, doc_table='i', receiver_id=send_to, receiver_desig=send_desig)
                    messages.success(request, 'Copy to Email has been sent')
                   
            except:
               
                messages.error(request, 'Copy to Email send failed.')


            return JsonResponse({"status": 'Successful' })
    


@api_view(['POST'])
def get_marked_officers(request):
    if request.method == 'POST':
        rdata=json.loads(request.body)
        zone = rdata['rly_id']
        div = rdata['div_id']
        email=rdata['email']
        print(zone,div,email)
        empnumber=list(Level_Desig.objects.filter(official_email_ID=email).values('designation_code'))[0]['designation_code']
        c=0
        
        data=[]
        if zone[0]=="" and div[0]=="":
            data=list(Level_Desig.objects.exclude(delete_flag=True).filter(designation__isnull=False).exclude(designation_code=empnumber).values('designation','empno', 'designation_code').order_by('designation'))
        elif div[0]=="":
           pass
        else:
          for i in range(len(div)):
            l_id=list(railwayLocationMaster.objects.filter(Q(location_code=div[i])).values('rly_unit_code'))
            if len(l_id)>0:
                for x in range(len(l_id)):
                    desg_no=list(Level_Desig.objects.exclude(delete_flag=True).filter(designation__isnull=False,rly_unit=l_id[x]['rly_unit_code']).exclude(designation_code=empnumber).values('designation','empno', 'designation_code').order_by('designation'))
                    if len(desg_no)>0:
                        if desg_no not in data:
                            data.extend(desg_no) 
        for i in range(len(zone)):
            print('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', zone[i])
            l_id=list(railwayLocationMaster.objects.filter(Q(location_code=zone[i])).values('rly_unit_code'))
            print(l_id)
            if len(l_id)>0:
                desg_no=list(Level_Desig.objects.exclude(delete_flag=True).filter(designation__isnull=False,rly_unit=l_id[0]['rly_unit_code']).exclude(designation_code=empnumber).values('designation','empno', 'designation_code').order_by('designation'))
                if len(desg_no)>0:
                    if desg_no not in data:
                        data.extend(desg_no)
        for i in range(len(zone)):
            l_id=list(railwayLocationMaster.objects.filter(Q(parent_location_code=zone[i])).values('rly_unit_code'))
            if len(l_id)>0:
                for x in range(len(l_id)):
                    desg_no=list(Level_Desig.objects.exclude(delete_flag=True).filter(designation__isnull=False,rly_unit=l_id[x]['rly_unit_code']).exclude(designation_code=empnumber).values('designation','empno', 'designation_code').order_by('designation'))
                    if len(desg_no)>0:
                        if desg_no[0] not in data:
                            data.extend(desg_no) 
        for i in range(len(data)):
            if '/' in data[i]['designation']:
                r_des=data[i]['designation'].replace('/',' ')
            elif '.' in data[i]['designation']:
                r_des=data[i]['designation'].replace('.',' ')
            else:
                r_des=data[i]['designation']
            data[i].update({'empnoser':r_des})
        unofficer = list(Level_Desig.objects.exclude(delete_flag=True).filter(parent_desig_code=empnumber).values_list('designation_code',flat=True).order_by('designation'))
        data1 = list(filter(lambda x: x['designation_code'] in unofficer, data))
        data1 = sorted(data1, key = lambda x: x['designation'])
        data2 = list(filter(lambda x: x['designation_code'] not in unofficer, data))
        data2 = sorted(data2, key = lambda x: x['designation'])
        data = data1 + data2
        return JsonResponse({'Count':len(data),'data':data}, safe=False)
        # return JsonResponse({'Count':len(desg_no),'desg_no': desg_no})
    return JsonResponse({'success': False}, status=400)


@api_view(['POST'])
def getDivisions(request):
    if request.method == 'POST':
        # print("inside POST")
        rdata = json.loads(request.body)
        location_code = rdata['rly_id_id']
        # print(location_description)
        
        all_divisions = []

        for location_code in location_code:
            rly_id_id = list(railwayLocationMaster.objects.filter(location_code=location_code).values('rly_unit_code'))[0]['rly_unit_code']
            # print(rly_id_id)
            divisions = list(railwayLocationMaster.objects.filter(location_type_desc__in=['DIVISION', 'WORKSHOP'], parent_rly_unit_code=rly_id_id).values('rly_unit_code','location_code', 'location_description').distinct().order_by('location_code'))
            all_divisions.extend(divisions)

        # print(all_divisions)

        return JsonResponse({'division': all_divisions})



@api_view(['POST'])
def generate_title(request):
    data = []
    if request.method == 'POST':
        # print("inside POST")
        rdata = json.loads(request.body)
        zone = rdata['railways']
        division = rdata['divisions']
        loca = rdata['loca']
        email = rdata['email']

        desig=list(Level_Desig.objects.filter(official_email_ID=email).values('designation'))[0]['designation']
    
        locations=[]
        div=[]
        # print(loca)
        if len(loca):
            for l in loca:
                temp={}
                loc_name=l.split('#')
                i=loc_name[1]
                place=loc_name[0].strip()
                p=place.split('/')
                
                try:
                    place=(p[0].split('-'))[1]
                except:
                    place=(p[0].split('-'))[0]
                temp['place']=place

                if i == 'RRM':
                    obj = station_master.objects.filter(station_name_icontains=place).values('div_id_idlocation_code','rly_id_id_location_code')
                    temp['type']='Running Room'
                    loc_div = obj[0]['div_id_id__location_code']
                    loc_zone = obj[0]['rly_id_id__location_code']

                if i == 'SEM':
                    obj = section_master.objects.filter(section_name=place).values('div_id_id_location_code','rly_id_id_location_code')
                    temp['type']='Section'
                    if len(obj):
                        loc_div = obj[0]['div_id_id__location_code']
                        loc_zone = obj[0]['rly_id_id__location_code']  
                    else:
                        loc_div='NA'
                        loc_zone='NA'

                if i == 'STM':
                    obj = station_master.objects.filter(station_name_icontains=place).values('div_id_idlocation_code','rly_id_id_location_code')
                    temp['type']='Station'
                    loc_div = obj[0]['div_id_id__location_code']
                    loc_zone = obj[0]['rly_id_id__location_code']
                   
                if i == 'WOS':
                    obj = railwayLocationMaster.objects.filter(location_description__icontains=place,location_type='WS').values('parent_location_code')
                    temp['type']='WorkShop'
                    loc_div = obj[0]['parent_location_code']
                    loc_zone = obj[0]['parent_location_code']

                if i == 'DLS':
                    plac=place.split('SHED')[0]
                    # print(plac)
                    obj = railwayLocationMaster.objects.filter(location_code__icontains=plac,location_type='DS').values('parent_location_code')
                    temp['type']='Deisel Loco Shed'
                    # print(obj)
                    loc_div = obj[0]['parent_location_code']
                    loc_zone = obj[0]['parent_location_code']  

                if i == 'ELS':
                    plac=place.split('SHED')[0]
                    obj = railwayLocationMaster.objects.filter(location_code__icontains=plac,location_type='ES').values('parent_location_code')
                    temp['type']='Electric Loco Shed'
                    loc_div = obj[0]['parent_location_code']
                    loc_zone = obj[0]['parent_location_code']

                if i == 'COD':
                    # plac=place.split('-')[1]
                    obj = railwayLocationMaster.objects.filter(location_description__icontains=place,location_type='CD').values('parent_location_code')
                    temp['type']='Coaching Depot'
                    loc_div = obj[0]['parent_location_code']
                    loc_zone = obj[0]['parent_location_code']  

                if i == 'WAD':
                    obj = railwayLocationMaster.objects.filter(location_code__icontains=place,location_type='WD').values('parent_location_code')
                    temp['type']='Wagon Depot'
                    loc_div = obj[0]['parent_location_code']
                    loc_zone = obj[0]['parent_location_code']  

                if i == 'CTI':
                    obj = railwayLocationMaster.objects.filter(location_code__icontains=place,location_type='RI').values('parent_location_code')
                    temp['type']='Training Institute'
                    loc_div = obj[0]['parent_location_code']
                    loc_zone = obj[0]['parent_location_code']                    
                   
                if i == 'HOS':
                    
                    obj = iem_hospmstr.objects.filter(iavhccfullname__icontains=place).values('iavhccdvsncode','iavhcczonecode')
                    
                    temp['type']='Hospital'
                    loc_div = obj[0]['iavhccdvsncode']
                    loc_zone = obj[0]['iavhcczonecode']
                
                if i == 'TRN':
                    temp['place']= loc_name[0]
                    plac=loc_name[3].split('@')
                    #obj = trainMaster.objects.filter(train_no=(loc_name[0].split('-')[0]).strip()).values('train_name','train_no','org_rly_id','tnid','org_railway_code').distinct('tnid').order_by('-tnid')
                    obj=list(railwayLocationMaster.objects.filter(location_code=plac[0]).values('location_code'))
                    obj1=list(railwayLocationMaster.objects.filter(location_code=plac[1]).values('location_code'))

                    temp['type']='Train'
                    loc_div=plac[0]
                    loc_zone=plac[1]
                
                if i == 'ORL':
                    plac=loc_name[3].split('@')
                    temp['type']='Other Location'
                    if len(plac) == 2:
                        loc_div=plac[0]
                        loc_zone=plac[1]
                    else:
                        loc_div=None
                        loc_zone=plac[0]

                temp['loc_div']=loc_div
                temp['loc_zone']=loc_zone
                locations.append(temp)

        if len(division):
            for d in division:
                obj = railwayLocationMaster.objects.filter(location_code=d).values('parent_location_code')
                div.append({'place':d,'zone':obj[0]['parent_location_code']})
               
        title={}
        already_added_locs=[]
        locs_mapped_div={}

        for d in div:
            locs_div=[]
            for l in locations:
                if l['loc_div']==d['place']:
                    locs_div.append(l['place'])
                    already_added_locs.append(l['place'])
            locs_mapped_div[d['place']]=locs_div

        print(locs_mapped_div,zone)
        divs_mapped_zone={}
        for z in zone:
            div_done=[]
            other_locs=[]
            for d in div:
                if d['zone']==z:
                    div_done.append({d['place']:locs_mapped_div[d['place']]})
            for l in locations:
                if l['loc_zone']==z and l['place'] not in already_added_locs:
                    other_locs.append(l['place'])
                    already_added_locs.append(l['place'])
            title[z]=[{'divs':div_done,'others':other_locs}]

        Title=''
        done_divs=[]
        import copy 
        titleCopy = copy.deepcopy(title)
        
        for z in zone:
            if Title != '':
                Title = Title + ', '
            for d in div:
                if d['zone']==z:
                    count=1
                    for x in title[z][0]['divs']:
                        if count:
                            if len(x[d['place']]):
                                placess=''
                                for plc in x[d['place']]:
                                    placess+=plc+', '
                                Title+=(str(placess)).strip(', ')+" in "+d['place']+", "
                            else:
                                #Title=Title.strip(', ')
                                Title+=d['place']+", "
                            del title[z][0]['divs'][0]
                            count=0
            if len(title[z][0]['others']):
                placess=''
                for plc in title[z][0]['others']:
                    placess+=plc+', '
                Title+=(str(placess)).strip(', ')+" of "+z+","
            else:
                #Title=Title.strip(', ')
                if len(titleCopy[z][0]['divs']) == 0:
                    Title +=" "+z
                else:
                    Title=Title.strip(', ')
                    Title +=" of "+z
        
        Title = Title.replace(',,',',')
        Title=Title.strip(', ')

        Title = Title + ' by ' + desig
        
        return JsonResponse({'Title': Title})



@api_view(['POST'])
def AccompaniedByList(request):
    if request.method == 'POST':
        rdata=json.loads(request.body)
        Zone1=rdata['rly_id']
        email=rdata['email']
        empnumber=list(Level_Desig.objects.filter(official_email_ID=email).values('designation_code'))[0]['designation_code']
        desg_no=[]
        if Zone1:
            l_id=list(railwayLocationMaster.objects.filter(Q(location_code=Zone1)).values('rly_unit_code'))
            if len(l_id)>0:
                datarlys=list(Level_Desig.objects.exclude(delete_flag=True).filter(designation__isnull=False,rly_unit=l_id[0]['rly_unit_code']).exclude(designation_code=empnumber).values('designation','empno', 'designation_code').order_by('designation'))
                if len(datarlys)>0:
                    if datarlys not in desg_no:
                        desg_no.extend(datarlys)


            l_id=list(railwayLocationMaster.objects.filter(Q(parent_location_code=Zone1)).values('rly_unit_code'))
            if len(l_id)>0:
                for x in range(len(l_id)):
                    datarlys=list(Level_Desig.objects.exclude(delete_flag=True).filter(designation__isnull=False,rly_unit=l_id[x]['rly_unit_code']).exclude(designation_code=empnumber).values('designation','empno', 'designation_code').order_by('designation'))
                    if len(datarlys)>0:
                        if datarlys[0] not in desg_no:
                            desg_no.extend(datarlys)
         
            #All other officers
            datarlys=list(Level_Desig.objects.exclude(delete_flag=True).filter(designation__isnull=False).exclude(designation_code=empnumber).values('designation','empno', 'designation_code').order_by('designation'))
            for x in range(len(datarlys)):
                # print(desg_no[x])
                if datarlys[x] not in desg_no:
                    desg_no.append(datarlys[x])
         
        else:
            desg_no=list(Level_Desig.objects.exclude(delete_flag=True).filter(designation__isnull=False).exclude(designation_code=empnumber).values('designation','empno', 'designation_code').order_by('designation'))


        for i in range(len(desg_no)):
            if '/' in desg_no[i]['designation']:
                r_des=desg_no[i]['designation'].replace('/',' ')
            elif '.' in desg_no[i]['designation']:
                r_des=desg_no[i]['designation'].replace('.',' ')
            else:
                r_des=desg_no[i]['designation']
            desg_no[i].update({'empnoser':r_des})
        desg_nounofficer = list(Level_Desig.objects.exclude(delete_flag=True).filter(parent_desig_code=empnumber).values_list('designation_code',flat=True).order_by('designation'))
        desg_nodata1 = list(filter(lambda x: x['designation_code'] in desg_nounofficer, desg_no))
        desg_nodata1 = sorted(desg_nodata1, key = lambda x: x['designation'])
        desg_nodata2 = list(filter(lambda x: x['designation_code'] not in desg_nounofficer, desg_no))
        desg_nodata2 = sorted(desg_nodata2, key = lambda x: x['designation'])
        desg_no = desg_nodata1 + desg_nodata2

        return JsonResponse({'Count':len(desg_no),'desg_no': desg_no})

@api_view(['POST'])
def chooseLocation(request):
    if request.method == 'POST':
        print("inside POST")
        rdata = json.loads(request.body)
        location_array = [{'type_code':'RRM', 'type': 'Running Room'},
                        {'type_code': 'SEM', 'type': 'Section'},
                        {'type_code': 'STM', 'type': 'Station'},
                        # {'type_code':'SOP' , 'type': 'Shop'},
                        # {'type_code':'WOS' , 'type': 'Work Shop'},
                        {'type_code':'DLS' , 'type': 'Diesel Loco Shed'},
                        {'type_code':'ELS' , 'type': 'Electric Loco Shed'},
                        {'type_code':'COD' , 'type': 'Coaching Depot'},
                        {'type_code':'WAD' , 'type': 'Wagon Depot'},
                        { 'type_code': 'CTI', 'type': 'Training Institute'},
                        { 'type_code': 'TRN', 'type': 'Train'},
                        { 'type_code': 'HOS', 'type': 'Hospital'},
                        { 'type_code': 'ORL', 'type': 'Other Rly Unit'},
                        ]
        
        # typ = rdata['typ']
        typ = 'allLocation'

#########################################################Phase 1 api android app end ################################################


def fetchCoachData(request):
    if request.method == 'GET' and request.is_ajax():
        # print('here')
        # train = request.GET.get('train')
        last_val = request.GET.get('last_val')
        
        res=[]
        if mdms_coach_master.objects.filter(coach_number=last_val).exists():
            # coach_number = list(coach_master.objects.filter(coach_id=last_val).values_list('coach_id',flat=True))
            # print(last_val)
            
            res.append(last_val)
        return JsonResponse(res, safe=False)

def setAllDepartmentDesignation(request):
    if request.method == 'GET' and request.is_ajax():
        commanDepartment = json.loads(request.GET.get('commanDepartment'))
        commanDesignation = json.loads(request.GET.get('commanDesignation'))
        print(commanDepartment,commanDesignation)
        departmentsAll=list(departMast.objects.filter(delete_flag=False,department_code__in=commanDepartment).values('department_code','department_name').order_by('department_name'))
        designationAll=list(Level_Desig.objects.filter(department_code__in=commanDepartment,designation_code__in = commanDesignation).values('designation_code','designation').distinct().order_by('designation'))
        print(departmentsAll,designationAll)
        context={
           'departmentsAll':departmentsAll,
            'designationAll':designationAll
        }
        return JsonResponse(context,safe=False)
    return JsonResponse({"success":False},status=400)

from datetime import date,datetime,timedelta
from dateutil.relativedelta import relativedelta
import requests
from requests.auth import HTTPBasicAuth
import json



from apscheduler.schedulers.background import BackgroundScheduler
def cmm_getBpcDetailsByTrainNoAndStartDate(request):
    url='https://roams.cris.org.in/uaa/oauth/token?grant_type=password&username=8130992496&password=12345678'
    
    headers = {'Authorization':'Basic Y21tOmNtbUBjcmlzLm9yZy4xbg==','Cookie':'63126808a13605058489e4bd375408a7=5cfa3ce625debb4117b14e5cf5221bea; TS01d9bdfa=01ee28b4442570c4dc4b1fbb2a5290d973af656df51d978e4a27e1b084fc186c244151cd684645830015b41dfc853c3ceb63245d75'}
    response = requests.request("POST", url,headers=headers)
    
    l_main=response.json() 
    
    token = 'Bearer '+l_main['access_token']
    print(token)
    if request.method == 'GET' and request.is_ajax():
        train_no_input = request.GET.get('train_no_input')
        train_start_time = request.GET.get('train_start_time')
        # print(train_start_time,train_no_input)
        url = 'http://cmmrakeservice-cmm.apps.cmm-fmm-prod.roams.org/cmmRakeService/getBpcDetailsByTrainNoAndStartDate?trainNo='+train_no_input+'&startDate='+train_start_time
        headers = {"Content-Type": "application/json",'Authorization':token}
        proxy = {
            'http': 'http://cmmrakeservice-cmm.apps.cmm-fmm-prod.roams.org',
            'https': 'https://cmmrakeservice-cmm.apps.cmm-fmm-prod.roams.org'
            }
        response = requests.request("GET", url,headers=headers,proxies=proxy)
        print(response.raise_for_status())
        l_main=response.json()
        print(l_main) 
        if l_main['serviceDataFoundFlag'] == 'Y':
            context={
                'bpcDetails' :l_main['bpcDetails'],
                'coach_details' : l_main['bpcDetails']['bpcConsist'],
                'success11':True
            }
            return JsonResponse(context,safe=False)
        else:
            return JsonResponse({"success11":False},safe=False)
