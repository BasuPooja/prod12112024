from __future__ import division
from django.shortcuts import render,redirect
from django.http import HttpResponse, HttpResponseRedirect, JsonResponse
from django.db import models
from django.contrib.auth import get_user_model
from django.contrib import messages
from django.utils.http import urlsafe_base64_encode, urlsafe_base64_decode
from django.utils.encoding import force_bytes
from django.contrib.auth.tokens import default_token_generator
from django.template.loader import render_to_string
from django.contrib.auth import authenticate, login, logout, update_session_auth_hash
from inspects import models as m1
from einspect import models as m2
from budget import models as m5
from mails import models as m6
from mom import models as m3
from myadmin import models
from do_letters import models as m4
import json
from django.db.models import Q, F
from django.db.models import Max
from django.core.mail import EmailMessage
from email.mime.image import MIMEImage
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from django.utils.html import strip_tags
from django.core.mail import EmailMultiAlternatives
from django.core.mail import send_mass_mail
import math
user = get_user_model()
from datetime import datetime
from inspects.utils import render_to_pdf
from django.views.decorators.csrf import csrf_exempt

from xhtml2pdf import pisa
from django.template.loader import get_template
from .choices import INSPECTION_TYPE

import random
from django.db.models import Subquery,Sum,Count
from django.views.decorators.clickjacking import xframe_options_exempt
from django.contrib.auth.hashers import make_password
from django.contrib.auth.decorators import login_required

# from werkzeug.utils import secure_filename
import uuid as uuid

import datetime
import re



def generateOTP() :
     digits = "0123456789"
     OTP = ""
     for i in range(4) :
         OTP += digits[math.floor(random.random() * 10)]
     return OTP

from django.core.mail import send_mail
from django.template.loader import render_to_string
from django.utils.html import strip_tags

import requests as req
from apscheduler.schedulers.background import BackgroundScheduler

# email and sms
def InspSendMail(subject, To, context):
    html_message = render_to_string('insp_mail_template.html', context)
    plain_message = strip_tags(html_message)
    from_email = 'mfgcris@cris.org.in'
    send_mail(subject, plain_message, from_email, To, html_message=html_message)
    with open('Inspecetion_Maillog.txt','a') as f:
        f.write('\n\n')
        f.write('Date : '+str(datetime.now())+'\n')
        f.write('subject : '+str(subject)+'\n')
        f.write('From : '+str(from_email)+'\n')
        f.write('To : '+str(To)+'\n')
        f.write('Message : '+str(plain_message)+'\n')

# def sendmails(subject,message,froms,to):
#     send_mail(subject,message,froms,to,fail_silently = False)
#     with open('Inspecetion_Maillog.txt','a') as f:
#         f.write('\n\n')
#         f.write('Date : '+str(datetime.now())+'\n')
#         f.write('subject : '+str(subject)+'\n')
#         f.write('From : '+str(froms)+'\n')
#         f.write('To : '+str(to)+'\n')
#         f.write('Message : '+str(message)+'\n')

# def InspSendMail(subject, To, context):
#     pass


def sms(phoneno,message):
    try:  
        url = "https://enterprise.smsgupshup.com/GatewayAPI/rest?method=SendMessage&send_to=91"+str(phoneno)+"&msg="+message+" &msg_type=TEXT&userid=2000193787&auth_scheme=plain&password=Cris@246&v=1.1&format=text"
        # url = "https://enterprise.smsgupshup.com/GatewayAPI/rest?method=SendMessage&send_to=91"+str(phoneno)+"&msg="+message+" &msg_type=TEXT&userid=2000193787&auth_scheme=plain&password=Cris@246&v=1.1&format=text"
        r = req.request("POST", url)
        print(r.text)
        with open('smslog.txt','a') as f:
            f.write('\n')
            f.write(str(phoneno)+'\n')
            f.write(str(datetime.now())+'\n')
            f.write(str(message)+'\n')
            
    except Exception as e:
        print(e, "Internal Error!!!1111111111111")
# sms(9956271515,'hello from cris')

# def sms(phoneno,message):
#     pass

def sendsms_insp(phoneno,new_pending,note_no,inspection_officer,total_pending):
    try:
        message="Total "+str(new_pending)+" Item(s) of  Insp. note no. "+note_no+" marked/forwarded by "+inspection_officer+" marked to you for n/a. Cumulative pending compliance: "+str(total_pending)+", CRIS/MU."
        # message="Insp. note no. "+var+" marked to you for n/a. New Paras marked/Cumulative pending compliance: "+var+" CRIS/INSP"
        # message="Successfully registered with Username: "+var+" and Password: "+var+" CRIS/RKVY"
        sms(phoneno,message)
       
    except Exception as e:
        print("Internal Error!!!")

def sendsms(phoneno):
    pass

def PendingInspSendMsg():
    obj1 = m1.Marked_Officers.objects.filter(status_flag=1).distinct('marked_to').select_related('marked_to')
    today = datetime.today()
    subject = 'cris testing'
    context = {'subject': 'cris testing', 'title': 'testing'}
    To1 = []
    for i in obj1:
        if i.created_on and i.status_flag==1:
            days_taken = today-i.created_on
            if days_taken.days == 7:
                print(days_taken)
                if i.marked_to.contactnumber:
                    mobile = i.marked_to.contactnumber
                    sendsms(mobile)
                if i.marked_to.official_email_ID:
                    email = i.marked_to.official_email_ID
                    To1.append(email)
                    
            elif days_taken.days == 14:
                if i.marked_to.contactnumber:
                    mobile = i.marked_to.contactnumber
                    sendsms(mobile)
                if i.marked_to.official_email_ID:
                    email = i.marked_to.official_email_ID
                    To1.append(email)
    InspSendMail(subject, To1, context)
        
   
scheduler = BackgroundScheduler()
scheduler.start()
ob = scheduler.add_job(PendingInspSendMsg, 'cron', year='*', month='*', day='*', hour=17, minute=26, second=55)
# email and sms end

def savehq(request):
    try:
        if request.method == "GET":
            shortcode1=request.GET.get('shortcode1')
            description1=request.GET.get('description1')
            station1=request.GET.get('station1')
            rlytype=request.GET.get('rlytype')
            st = station1.split("-")
            
            dict1 = {"Railwayunit":"Unit","DIRECTORATE":"DIRECTORATE","DIVISION": "DIV", "OFFICE": "O","HEAD QUATER": "HQ", "PRODUCTION UNIT": "PU","PSU": "PSU","INSTITUTE": "CTI","WORKSHOP": "WS","RAILWAY BOARD": "RB"}
            ltype=None
            for key,val in dict1.items():
                if key == rlytype:
                    ltype = val
            id=models.railwayLocationMaster.objects.filter().order_by('-rly_unit_code')[0].rly_unit_code
            id+=1
            #print(id,"i am ideeyyyyyy")
            models.railwayLocationMaster.objects.create(station_code=st[0],location_type=ltype,rly_unit_code=id,location_code=shortcode1,location_type_desc=rlytype,location_description=description1,parent_location_code='RB',parent_id='153')
            obj=[]
            # context={
            #     'datatable':datatable,
            # }
            return JsonResponse(obj, safe=False)
        return JsonResponse({'success': False}, status=400)
    except Exception as e:
        try:
            m1.error_Table.objects.create(fun_name="savehq",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        #messages.error(request, 'Error : '+str(e))
        return render(request, "errorspage.html", {})


def savediv(request):
    try:
        if request.method == "GET":
            #print("hello")
            shortcode=request.GET.get('shortcode')
            description=request.GET.get('description')
            parentcode=request.GET.get('parentcode')
            station=request.GET.get('station')
            rlytype=request.GET.get('rlytype')
            st = station.split("-")
            
            dict1 = {"Railwayunit":"Unit","DIRECTORATE":"DIRECTORATE","DIVISION": "DIV", "OFFICE": "O","HEAD QUATER": "HQ", "PRODUCTION UNIT": "PU","PSU": "PSU","INSTITUTE": "CTI","WORKSHOP": "WS","RAILWAY BOARD": "RB"}
            
            ltype=None
            for key,val in dict1.items():
                if key == rlytype:
                    ltype = val
            
            pid=models.railwayLocationMaster.objects.filter(location_code=parentcode).values('rly_unit_code')
            #print(pid)
            id=models.railwayLocationMaster.objects.filter().order_by('-rly_unit_code')[0].rly_unit_code
            id+=1
            #print(id,"i am ideeyyyyyy")
            models.railwayLocationMaster.objects.create(station_code=st[0],location_type=ltype,rly_unit_code=id,location_code=shortcode,location_type_desc=rlytype,location_description=description,parent_location_code=parentcode,parent_id=pid)
            obj=[]
            # context={
            #     'datatable':datatable,
            # }
            return JsonResponse(obj, safe=False)
        return JsonResponse({'success': False}, status=400)
    except Exception as e:
        try:
            m1.error_Table.objects.create(fun_name="savediv",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        #messages.error(request, 'Error : '+str(e))
        return render(request, "errorspage.html", {})


def able_rlyorg(request):
    if request.method == "GET":
        rlytype=request.GET.get('rlytype')
        print(rlytype)
        parent=[]
        unit=[]
        if rlytype == "DIRECTORATE":
            # parent=list(models.railwayLocationMaster.objects.filter(Q(location_type_desc='RAILWAY BOARD')| Q(location_type_desc='OFFICE')).values('parent_location_code').distinct())
            parent=[{'parent_location_code': 'PSU'}, {'parent_location_code': 'RB'}]
        elif rlytype == "Railwayunit":
            unit=list(models.Railwayunit.objects.values('Unit_description'))
            parent = list(models.railwayLocationMaster.objects.filter(Q(location_type_desc='DIVISION')| Q(location_type_desc='OFFICE')| Q(location_type_desc='WORKSHOP')).values('parent_location_code').distinct())
        else:
            parent=list(models.railwayLocationMaster.objects.filter(location_type_desc=rlytype).values('parent_location_code').distinct())
        print(parent)
        print(unit)
        context={
            'parent':parent,
            'unit':unit,
        }
        return JsonResponse(context, safe=False)
    return JsonResponse({'success': False}, status=400)



def send_otp(request):
    try:
        if request.method == 'GET':
            #print('iiii_____')
            cuser=request.user
            email=request.GET.get("email")
            #print(email)
        
            #print(type(email),'-------email------')
            otp=generateOTP()
            #print(otp,'___')
            htmlgen = 'Your OTP is '+otp
            # send_mail('OTP request',otp,'mfgcris@cris.org.in',[email], html_message=htmlgen)

            send_mail(
                        'OTP request', #subject
                        htmlgen, #message body
                        'mfgcris@cris.org.in', # from email
                        [email], #to email
                        fail_silently=False,   
                    )  
            return JsonResponse({'otp':otp}, safe = False)
        return JsonResponse({}, safe = False)
    except Exception as e:
        try:
            m1.error_Table.objects.create(fun_name="send_otp",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        #messages.error(request, 'Error : '+str(e))
        return render(request, "errorspage.html", {})


def send_otp2(request):
    try:
        if request.method == 'GET':
            username=request.GET.get('username')
            email=user.objects.filter(username=username)[0].email
            #print(email)
        
            otp=generateOTP()
            #print(otp,'___')
            htmlgen = 'Your OTP is '+otp
            #send_mail('OTP request',otp,'crisdlwproject@gmail.com',[email], html_message=htmlgen)
            # send_mail(
            #             'OTP request', #subject
            #              htmlgen, #message body
            #             'mfgcris@cris.org.in', # from email
            #             [email], fail_silently=False, #to email
                    
            #         )  
            return JsonResponse({'otp':otp}, safe = False)
        return JsonResponse({}, safe = False)
    except Exception as e:
        try:
            m1.error_Table.objects.create(fun_name="send_otp2",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        #messages.error(request, 'Error : '+str(e))
        return render(request, "errorspage.html", {})





def draft_inspection_form(request):
    try:
        daterangeselect=request.GET.get('data3')
        empnox = models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=request.user)| Q(official_email_ID=request.user.guest_email) | Q(official_email_ID=request.user.email), empno__isnull=False)
        if empnox:
            empno = empnox[0].designation_code
            if daterangeselect not in ['0-3','0-6','0-12','tofrom']:
                inspection=m1.Inspection_details.objects.filter(status_flag=0, inspection_officer=empno).values().order_by('-inspection_no')
            else:
                from dateutil.relativedelta import relativedelta
                if daterangeselect=='0-3':
                    now = datetime.today()
                    six = now
                    prev = now - relativedelta(months=3)
                    prev = prev.date()
                elif daterangeselect=='0-6':
                    now = datetime.today()
                    six = now
                    prev = now - relativedelta(months=6)
                    prev = prev.date()
                elif daterangeselect=='0-12':
                    now = datetime.today()
                    six = now
                    prev = now - relativedelta(months=12)
                    prev = prev.date()
                elif daterangeselect=='tofrom':
                    daterange=request.GET.get('daterange')
                    daterange1=daterange.split('-')
                    date1=daterange1[0].split('/')
                    date2=daterange1[1].split('/')
                    prev='20'+date1[2].strip()+'-'+date1[1].strip()+'-'+date1[0].strip()
                    six='20'+date2[2].strip()+'-'+date2[1].strip()+'-'+date2[0].strip()
                inspection=m1.Inspection_details.objects.filter(status_flag=0, inspection_officer=empno,inspected_on__gte=prev,inspected_on__lte=six).values().order_by('-inspection_no')
            for i in inspection:
                location = list(m1.Insp_multi_location.objects.filter(inspection_no=i['inspection_no']).values())
                #print(location)
                i.update({'location_item': location})
        else:
            messages.error(request, 'You are not authorize to see inspection. Please contact to admin')
            return render(request,"draft_inspection.html")

        rly_code=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=request.user.email) | Q(official_email_ID=request.user.guest_email))[0].rly_unit.location_code
        rly_unit_code=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=request.user.email) | Q(official_email_ID=request.user.guest_email))[0].rly_unit.rly_unit_code
        parent_loc=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=request.user.email) | Q(official_email_ID=request.user.guest_email))[0].rly_unit.parent_location_code
        parent_loc_id=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=request.user.email) | Q(official_email_ID=request.user.guest_email))[0].rly_unit.parent_rly_unit_code
        div_code=rly_code
        if parent_loc!='RB':
            div_code=rly_code
            rly_code=parent_loc
            rly_unit_code=parent_loc_id

        list1=models.railwayLocationMaster.objects.filter(location_type_desc__in=['RAILWAY BOARD', 'PRODUCTION UNIT', 'HEAD QUATER', 'PSU', 'INSTITUTE']).values('location_code').distinct().order_by('location_code')
        list2=[]
        for i in list1:
            # print(i['location_code'],'_________')
            list2.append(i['location_code'])
        list3=models.railwayLocationMaster.objects.filter(location_type_desc__in=['DIVISION','WORKSHOP', 'STORE', 'CONSTRUCTION', 'OFFICE']).distinct().values('location_code', 'location_type').order_by('location_code')
        list4=[]
        for i in list3:
            list4.append({'location_code': i['location_code'], 'location_type': i['location_type']})
          
        list5=models.departMast.objects.all().distinct().values('department_name').order_by('department_name')
        list6=[]
        for i in list5:
            # print(i['department_name'],'_________')
            list6.append(i['department_name'])  


        #PHASE 2
        dataph2 = list(m2.einspection_details.objects.filter(status=0,designation_id=empno,instypeid__isnull=False).values('inspected_on','instypeid__name','einspno','inspection_title','rly_id_id__location_code','div_id_id__location_code','instypeid').order_by('-einspno'))
        count=len(inspection)+1
        
        for i in dataph2:
            i['sr_no']=count
            count+=1

        context={
            'zone':list2 ,
            'division':list4,
            'dept':list6,
            'list1':inspection,
            'dataph2':dataph2,
            'rly_unit_code':rly_unit_code,
            'rly_code':rly_code,
            'div_code':div_code,
        }
        return render(request,"draft_inspection.html",context)
    except Exception as e:
        try:
            m1.error_Table.objects.create(fun_name="draft_inspection_form",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        #messages.error(request, 'Error : '+str(e))
        return render(request, "errorspage.html", {})

def draft_filterdata_ajax_inspection(request):
    # try:
        if request.method == "GET" and request.is_ajax():
            str=request.GET.get('str')
            if(str=='filter'):
                rly_id=request.GET.get('rly_id')
                if(rly_id==""):
                #     list3=models.railwayLocationMaster.objects.filter(location_type='DIV').values('location_code')
                # else:    
                #     list3=models.railwayLocationMaster.objects.filter(location_type='DIV',parent_location_code=rly_id).values('location_code')
                # list4=[]
                # for i in list3:
                #     list4.append(i['location_code'])   
                # return JsonResponse({'div':list4})
                    list3=models.railwayLocationMaster.objects.filter(location_type='DIV').values('location_code')
                else:    
                    list3=models.railwayLocationMaster.objects.filter(location_type_desc__in=['DIVISION','WORKSHOP'],parent_location_code=rly_id).order_by('location_code').values('location_code', 'location_type').distinct('location_code')
                list4=[]
                for i in list3:
                    list4.append(i['location_code']+'-'+i['location_type'])    
                return JsonResponse({'div':list4})
                #PRATIBHA 160223
            elif(str=='draft search'):
                rly=request.GET.get('rly_id')
                div=request.GET.get('div_id')
                
                dates = request.GET.get('date_range')
                
                empnox = models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=request.user) | Q(official_email_ID=request.user.guest_email) | Q(official_email_ID=request.user.email), empno__isnull=False)
            
                if empnox:
                    empno = empnox[0].designation_code
                    desig = empnox[0].designation
                
                if dates:
                    sp_date = dates.split('-')
                    start  = datetime.strptime(sp_date[0].strip(),"%d/%m/%y").strftime("%Y-%m-%d")
                    end  = datetime.strptime(sp_date[1].strip(),"%d/%m/%y").strftime("%Y-%m-%d")
                else:
                    start = datetime.today()-relativedelta(years=50)
                    end = datetime.today()
                
                if len(rly)>0 and len(div)>0:
                    loca = m1.Insp_multi_location.objects.filter(item=div, type='DIV').values_list('inspection_no', flat=True)
                elif len(rly)>0:
                    
                    loca = m1.Insp_multi_location.objects.filter(item=rly, type='HQ').values_list('inspection_no', flat=True)
                else:
                    loca = m1.Insp_multi_location.objects.filter().values_list('inspection_no', flat=True)


                

                # if rly!='' and div=='' and dates=='':
                #     print('1',rly,empno)
                #     loca = m1.Insp_multi_location.objects.filter(item=rly, type='HQ', inspection_no__in=(m1.Inspection_details.objects.filter(status_flag=0,inspection_officer_id=empno).values('inspection_no'))).values_list('inspection_no', flat=True)
                #     print("loca",loca)
                    
                # elif rly=='' and div!='' and dates=='':
                #     #print('2')
                #     loca = m1.Insp_multi_location.objects.filter(item=div, type='DIV', inspection_no__status_flag=0, inspection_no__inspection_officer=empno).values_list('inspection_no', flat=True)
                # elif rly=='' and div=='' and dates!='':
                #     #print('3')
                #     loca = m1.Insp_multi_location.objects.filter(inspection_no__inspected_on__gte=start , inspection_no__inspected_on__lte=end, inspection_no__status_flag=0, inspection_no__inspection_officer=empno).values_list('inspection_no', flat=True)
                # elif rly!='' and div!='' and dates=='':
                #     #print('4')
                #     loca = m1.Insp_multi_location.objects.filter(item__in=[div,rly], type=['DIV','HQ'], inspection_no__status_flag=0, inspection_no__inspection_officer=empno).values_list('inspection_no', flat=True)
                # elif rly=='' and div!='' and dates!='':
                #     #print('5')
                #     loca = m1.Insp_multi_location.objects.filter(item=div, type='DIV', inspection_no__inspected_on__gte=start , inspection_no__inspected_on__lte=end, inspection_no__status_flag=0, inspection_no__inspection_officer=empno).values_list('inspection_no', flat=True)
                # elif rly!='' and div=='' and dates!='':
                #     #print('6')
                #     loca = m1.Insp_multi_location.objects.filter(item=rly, type='HQ', inspection_no__inspected_on__gte=start , inspection_no__inspected_on__lte=end, inspection_no__status_flag=0, inspection_no__inspection_officer=empno).values_list('inspection_no', flat=True)
                # elif rly=='' and div=='' and dates=='':
                #     #print('7')
                #     loca = m1.Insp_multi_location.objects.filter(inspection_no__status_flag=0, inspection_no__inspection_officer=empno).values_list('inspection_no', flat=True)
                # elif rly!='' and div!='' and dates!='':
                #     #print('7')
                #     loca = m1.Insp_multi_location.objects.filter(item=div, type='DIV', inspection_no__inspected_on__gte=start , inspection_no__inspected_on__lte=end, inspection_no__status_flag=0, inspection_no__inspection_officer=empno).values_list('inspection_no', flat=True)
                empnox = models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=request.user) | Q(official_email_ID=request.user.guest_email) | Q(official_email_ID=request.user.email), empno__isnull=False)
        
                if empnox:
                    empno = empnox[0].designation_code
                else:
                    empno = None
                mydata=list(m1.Inspection_details.objects.filter(inspection_no__in=loca, status_flag=0,inspected_on__gte=start,inspected_on__lte=end,inspection_officer_id=empno ).values().order_by('-inspection_no'))
                i={}
                
                for i in mydata:
                    location = list(m1.Insp_multi_location.objects.filter(inspection_no=i['inspection_no']).values())
                    #print(location)
                    i.update({'location_item': location})
                    
                rly_list=list(models.railwayLocationMaster.objects.filter(location_code=rly,location_type='ZR').values_list('rly_unit_code',flat=True))
                if div:
                    # div_code=div.split('-')[0]
                    # div_type=div.split('-')[1]
                    div_list=list(models.railwayLocationMaster.objects.filter(location_code=div,location_type=['WS','DIV']).values_list('rly_unit_code',flat=True))
                else:
                    # div_list=list(models.railwayLocationMaster.objects.filter(location_code=div,location_type=['WS','DIV']).values_list('rly_unit_code',flat=True))
                    div_list=[]
                phase2=phase2_filter(request,'draft',rly_list,div_list,dates,'')
                
                
                return JsonResponse({'inspect_details':mydata,'phase2':phase2}, safe=False)

    # except Exception as e:
    #     print(e)
    #     try:
    #         m1.error_Table.objects.create(fun_name="draft_filterdata_ajax",user_id=request.user,err_details=str(e))
    #     except:
    #         print("Internal Error!!!")
    #     return render(request, "errorspage.html", {})


def phase2_filter(request,types,rly,div,daterange,officers):
    
    cuser=request.user
    if request.user.user_role == 'guest':
        cuser=request.user.guest_email
        request.user.email=request.user.guest_email

    empnox = models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=request.user)| Q(official_email_ID=request.user.guest_email) | Q(official_email_ID=request.user.email))
    if empnox:
        das_desig = empnox[0].designation_code
        desig = empnox[0].designation
    rly_code=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].rly_unit.location_code
    rly_unit_code=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].rly_unit.rly_unit_code
    parent_loc=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].rly_unit.parent_location_code
    parent_loc_id=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].rly_unit.parent_rly_unit_code
    div_code=rly_code
    div_unit_code=rly_unit_code
    if parent_loc!='RB':
        div_code=rly_code
        rly_code=parent_loc
        div_unit_code=parent_loc_id
    if len(rly)==0:
        rly=list(m2.einspection_details.objects.filter().values_list('rly_id_id',flat=True).distinct())
    if len(div)==0:
        div=list(m2.einspection_details.objects.filter().values_list('div_id_id',flat=True).distinct())
        
    if daterange == '':
        endDate=datetime.today()
        startDate=endDate-relativedelta(years=50)
    else:
        if '-' in daterange:
            startDate=daterange.split('-')[0]
            endDate=daterange.split('-')[1]
        else:
            startDate=daterange
            endDate=daterange

        startDate=startDate.strip()
        endDate=endDate.strip()
        starts=startDate.split('/')
        ends=endDate.split('/')
        if len(starts[0]) == 1:
            startDate='0'+starts[0]
        else:
            startDate=starts[0]
        if len(starts[1]) == 1:
            startDate+='/0'+starts[1]
        else:
            startDate+='/'+starts[1]
        if len(starts[2]) == 2:
            startDate+='/20'+starts[2]
        else:
            startDate+='/'+starts[2]

        
        if len(ends[0]) == 1:
            endDate='0'+ends[0]
        else:
            endDate=ends[0]
        if len(ends[1]) == 1:
            endDate+='/0'+ends[1]
        else:
            endDate+='/'+ends[1]
        if len(ends[2]) == 2:
            endDate+='/20'+ends[2]
        else:
            endDate+='/'+ends[2] 

        startDate = datetime.strptime(startDate,'%d/%m/%Y').strftime('%Y-%m-%d')
        endDate = datetime.strptime(endDate,'%d/%m/%Y').strftime('%Y-%m-%d')
    

    insp_details=[]

    if types == 'draft':
        insp_details=list(m2.einspection_details.objects.filter(rly_id_id_id__in=rly,div_id_id_id__in=div,inspected_on__gte=startDate,inspected_on__lte=endDate, status=0, designation=das_desig).values('einspno','instypeid_id','inspected_on','inspection_title','designation_id__designation','designation_id','created_by','inspection_note_no','rly_id_id__location_code','div_id_id__location_code'))
    elif types == 'completed':
        insp_details=list(m2.einspection_details.objects.exclude(status=0).filter(rly_id_id_id__in=rly,div_id_id_id__in=div,inspected_on__gte=startDate,inspected_on__lte=endDate, designation=das_desig).values('einspno','instypeid_id','inspected_on','inspection_title','designation_id__designation','designation_id','created_by','inspection_note_no','rly_id_id__location_code','div_id_id__location_code','instypeid__name'))

    elif types == 'pending_compliances':
        insp_details=list(m2.einspection_details.objects.exclude(status__in=[0,4]).filter(rly_id_id_id__in=rly,div_id_id_id__in=div,inspected_on__gte=startDate,inspected_on__lte=endDate).values('einspno','instypeid_id','inspected_on','inspection_title','designation_id__designation','designation_id','created_by','inspection_note_no','rly_id_id__location_code','div_id_id__location_code','instypeid__name'))

    elif types == 'closed_compliances':
        insp_details=list(m2.einspection_details.objects.filter(rly_id_id_id__in=rly,div_id_id_id__in=div,inspected_on__gte=startDate,inspected_on__lte=endDate, status=4, designation=das_desig).values('einspno','instypeid_id','inspected_on','inspection_title','designation_id__designation','designation_id','created_by','inspection_note_no','rly_id_id__location_code','div_id_id__location_code','instypeid__name'))

    elif types ==  'reverted_compliances':
        insp_nos = list(m2.einsp_marked.objects.exclude(revert=2).filter(status_flag=4, revert=1).values_list('eitemid__einspno',flat=True))
        insp_details=list(m2.einspection_details.objects.filter(rly_id_id_id__in=rly,div_id_id_id__in=div,inspected_on__gte=startDate,inspected_on__lte=endDate, einspno__in=insp_nos, designation=das_desig).values('einspno','instypeid_id','inspected_on','inspection_title','designation_id__designation','designation_id','created_by','inspection_note_no','rly_id_id__location_code','div_id_id__location_code','instypeid__name'))

    elif types ==  'pending':
        if len(officers)==0:
            officers=list(m2.einspection_details.objects.filter().values_list('designation_id',flat=True))
        phase2 = list(m2.einsp_marked.objects.exclude(revert=2, reject=2).filter(marked_to_id=das_desig,eitemid__einspno__status=1, eitemid__einspno__rly_id_id__in=rly,eitemid__einspno__div_id_id__in=div,eitemid__einspno__inspected_on__gte=startDate,eitemid__einspno__inspected_on__lte=endDate,eitemid__einspno__designation_id__in=officers).values('eitemid__einspno__inspected_on','eitemid_id','created_on','status_flag','created_by','id','compliance','marked_to_id','marked_emp_id','designation_by','target_date','revert','designation','id','eitemid__einspno','eitemid__einspno__inspection_title','eitemid__einspno__rly_id_id__location_code','eitemid__einspno__div_id_id__location_code','eitemid__einspno__inspection_note_no','eitemid__einspno__designation__designation').distinct('eitemid__einspno'))
        for p in phase2:
            p['eitemid__einspno__inspected_on']=p['eitemid__einspno__inspected_on'].strftime('%d/%m/%Y')
            p['total_marked']=m2.einsp_marked.objects.exclude(revert=2).filter(eitemid__einspno=p['eitemid__einspno'],marked_to_id=das_desig).count()
            p['total_complied']=m2.einsp_marked.objects.exclude(revert=2).filter(eitemid__einspno=p['eitemid__einspno'],marked_to_id=das_desig,status_flag=4).count()
            p['total_forward']=m2.einsp_marked.objects.exclude(revert=2).filter(eitemid__einspno=p['eitemid__einspno'],marked_to_id=das_desig,status_flag=3).count()
            p['total_pending']=m2.einsp_marked.objects.exclude(revert=2).filter(eitemid__einspno=p['eitemid__einspno'],marked_to_id=das_desig,status_flag__in=[0,1,2,3]).count()
            if m2.einsp_forward_marked.objects.filter(marked_no=p['id'],further_forward=None).exists():
                p['total_replied']= m2.einsp_forward_marked.objects.filter(marked_no=p['id'],further_forward=None,status_flag=2).count()
                p['total_forwarded']= m2.einsp_forward_marked.objects.filter(marked_no=p['id'],further_forward=None).count()
                p['for_flag']=1
            else:
                p['for_flag']=0
            if p['total_pending'] != 0:
                insp_details.append(p)

    elif types ==  'accept':
        if len(officers)==0:
            officers=list(m2.einspection_details.objects.filter().values_list('designation_id',flat=True))
        insp_details = list(m2.einsp_marked.objects.exclude(revert__in=[1,2], reject=2).filter(marked_to_id=das_desig, eitemid__einspno__rly_id_id__in=rly,eitemid__einspno__div_id_id__in=div,eitemid__einspno__inspected_on__gte=startDate,eitemid__einspno__inspected_on__lte=endDate,eitemid__einspno__designation_id__in=officers, status_flag=4).values('eitemid__einspno__inspected_on','eitemid_id','created_on','status_flag','created_by','id','compliance','marked_to_id','marked_emp_id','designation_by','target_date','revert','designation','id','eitemid__einspno','eitemid__einspno__inspection_title','eitemid__einspno__rly_id_id__location_code','eitemid__einspno__div_id_id__location_code','eitemid__einspno__inspection_note_no','eitemid__einspno__designation__designation').distinct('eitemid__einspno'))
        for p in insp_details:
            p['eitemid__einspno__inspected_on']=p['eitemid__einspno__inspected_on'].strftime('%d/%m/%Y')
    
    elif types ==  'reject':
        if len(officers)==0:
            officers=list(m2.einspection_details.objects.filter().values_list('designation_id',flat=True))
        insp_details = list(m2.einsp_marked.objects.exclude(revert=2, reject=2).filter(marked_to_id=das_desig, eitemid__einspno__rly_id_id__in=rly,eitemid__einspno__div_id_id__in=div,eitemid__einspno__inspected_on__gte=startDate,eitemid__einspno__inspected_on__lte=endDate,eitemid__einspno__designation_id__in=officers,reject=1).values('eitemid__einspno__inspected_on','eitemid_id','created_on','status_flag','created_by','id','compliance','marked_to_id','marked_emp_id','designation_by','target_date','revert','designation','id','eitemid__einspno','eitemid__einspno__inspection_title','eitemid__einspno__rly_id_id__location_code','eitemid__einspno__div_id_id__location_code','eitemid__einspno__inspection_note_no','eitemid__einspno__designation__designation').distinct('eitemid__einspno'))
        for p in insp_details:
            p['eitemid__einspno__inspected_on']=p['eitemid__einspno__inspected_on'].strftime('%d/%m/%Y')

    elif types == 'revert':
        if len(officers)==0:
            officers=list(m2.einspection_details.objects.filter().values_list('designation_id',flat=True))
        insp_details = list(m2.einsp_marked.objects.exclude(revert=None, reject=2).filter(marked_to_id=das_desig, eitemid__einspno__rly_id_id__in=rly,eitemid__einspno__div_id_id__in=div,eitemid__einspno__inspected_on__gte=startDate,eitemid__einspno__inspected_on__lte=endDate,eitemid__einspno__designation_id__in=officers, status_flag=4).values('eitemid__einspno__inspected_on','eitemid_id','created_on','status_flag','created_by','id','compliance','marked_to_id','marked_emp_id','designation_by','target_date','revert','designation','id','eitemid__einspno','eitemid__einspno__inspection_title','eitemid__einspno__rly_id_id__location_code','eitemid__einspno__div_id_id__location_code','eitemid__einspno__inspection_note_no','eitemid__einspno__designation__designation').distinct('eitemid__einspno'))
        for p in insp_details:
            p['eitemid__einspno__inspected_on']=p['eitemid__einspno__inspected_on'].strftime('%d/%m/%Y')
    
    elif types == 'forwarded_all':
        if len(officers)==0:
            officers=list(m2.einspection_details.objects.filter().values_list('designation_id',flat=True))

        mark_nos=list(m2.einsp_forward_marked.objects.filter(forwardBy_id=das_desig).values_list('marked_no_id', flat=True))
        insp_details = list(m2.einsp_marked.objects.filter(marked_to_id=das_desig, eitemid__einspno__rly_id_id__in=rly,eitemid__einspno__div_id_id__in=div,eitemid__einspno__inspected_on__gte=startDate,eitemid__einspno__inspected_on__lte=endDate,eitemid__einspno__designation_id__in=officers, id__in=mark_nos).values('eitemid__einspno__inspected_on','eitemid_id','created_on','status_flag','created_by','id','compliance','marked_to_id','marked_emp_id','designation_by','target_date','revert','designation','id','eitemid__einspno','eitemid__einspno__inspection_title','eitemid__einspno__rly_id_id__location_code','eitemid__einspno__div_id_id__location_code','eitemid__einspno__inspection_note_no','eitemid__einspno__designation__designation').distinct('eitemid__einspno'))
        for p in insp_details:
            p['eitemid__einspno__inspected_on']=p['eitemid__einspno__inspected_on'].strftime('%d/%m/%Y')

    elif types == 'pending-forward':
        if len(officers)==0:
            officers=list(m2.einsp_forward_marked.objects.filter().values_list('forwardBy_id',flat=True))

        mark_nos=list(m2.einsp_forward_marked.objects.filter(forwardTo_id=das_desig, status_flag__in=[0,1,3],forwardBy_id__in=officers ).values_list('marked_no_id', flat=True))
        
        insp_details = list(m2.einsp_marked.objects.filter(eitemid__einspno__rly_id_id__in=rly,eitemid__einspno__div_id_id__in=div,eitemid__einspno__inspected_on__gte=startDate,eitemid__einspno__inspected_on__lte=endDate,id__in=mark_nos).values('eitemid__einspno__inspected_on','eitemid_id','created_on','status_flag','created_by','id','compliance','marked_to_id','marked_emp_id','designation_by','target_date','revert','designation','id','eitemid__einspno','eitemid__einspno__inspection_title','eitemid__einspno__rly_id_id__location_code','eitemid__einspno__div_id_id__location_code','eitemid__einspno__inspection_note_no','eitemid__einspno__designation__designation').distinct('eitemid__einspno'))
        for p in insp_details:
            p['eitemid__einspno__inspected_on']=p['eitemid__einspno__inspected_on'].strftime('%d/%m/%Y')

    elif types == 'sent-forward':
        if len(officers)==0:
            officers=list(m2.einsp_forward_marked.objects.filter().values_list('forwardBy_id',flat=True))

        mark_nos=list(m2.einsp_forward_marked.objects.filter(forwardTo_id=das_desig, status_flag=2,forwardBy_id__in=officers).values_list('marked_no_id', flat=True))
        insp_details = list(m2.einsp_marked.objects.filter(eitemid__einspno__rly_id_id__in=rly,eitemid__einspno__div_id_id__in=div,eitemid__einspno__inspected_on__gte=startDate,eitemid__einspno__inspected_on__lte=endDate,id__in=mark_nos).values('eitemid__einspno__inspected_on','eitemid_id','created_on','status_flag','created_by','id','compliance','marked_to_id','marked_emp_id','designation_by','target_date','revert','designation','id','eitemid__einspno','eitemid__einspno__inspection_title','eitemid__einspno__rly_id_id__location_code','eitemid__einspno__div_id_id__location_code','eitemid__einspno__inspection_note_no','eitemid__einspno__designation__designation').distinct('eitemid__einspno'))
        for p in insp_details:
            p['eitemid__einspno__inspected_on']=p['eitemid__einspno__inspected_on'].strftime('%d/%m/%Y')
    
    return insp_details




def fetch_email_id(request):
    try:
        empno=request.GET.get('empno')
        email_id=request.GET.get('email_id')
        flag=0
        if(models.HRMS.objects.filter(empno=empno,email=email_id).exists()):
            flag=1
        else:
            flag=0   
            return JsonResponse({'flag':flag})
    except Exception as e:
        try:
            m1.error_Table.objects.create(fun_name="fetch_email_id",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        #messages.error(request, 'Error : '+str(e))
        return render(request, "errorspage.html", {})

def check_details(request):
    try:
        empno=request.GET.get('empno')
        if(models.HRMS.objects.filter(ipas_employee_id=empno).exists()):
            empf_name=models.HRMS.objects.filter(ipas_employee_id=empno)[0].employee_first_name
            empm_name=models.HRMS.objects.filter(ipas_employee_id=empno)[0].employee_middle_name
            empl_name=models.HRMS.objects.filter(ipas_employee_id=empno)[0].employee_last_name
        # if(m1.empmast.objects.filter(empno=empid).exists()):
        #     empf_name=m1.empmast.objects.filter(empno=empid)[0].empname
        #     empm_name=m1.empmast.objects.filter(empno=empid)[0].empmname
        #     empl_name=m1.empmast.objects.filter(empno=empid)[0].emplname
            
            if (empm_name == None and  empl_name == None):
                name=str(empf_name)
            elif(empm_name==None):
                name=str(empf_name) + " " + str(empl_name)
            elif(empl_name == None):
                name=str(empf_name) + " " + str(empm_name)
            else:
                name=str(empf_name) + " " + str(empm_name) + " " + str(empl_name)
            #print(name)
            empno1=models.HRMS.objects.filter(ipas_employee_id=empno)[0].ipas_employee_id
            empname=models.HRMS.objects.filter(ipas_employee_id=empno)[0].employee_first_name
            empmname=models.HRMS.objects.filter(ipas_employee_id=empno)[0].employee_middle_name
            emplname=models.HRMS.objects.filter(ipas_employee_id=empno)[0].employee_last_name
            # birthdate=models.HRMS.objects.filter(ipas_employee_id=empno)[0].date_of_birth
            birthdate=''
            appointmentdate=models.HRMS.objects.filter(ipas_employee_id=empno)[0].appointment_date
            superannuation_date=models.HRMS.objects.filter(ipas_employee_id=empno)[0].superannuation_date
            gender=models.HRMS.objects.filter(ipas_employee_id=empno)[0].gender
            billunit=models.HRMS.objects.filter(ipas_employee_id=empno)[0].billunit
            service_status=models.HRMS.objects.filter(ipas_employee_id=empno)[0].service_status
            pc7_level=models.HRMS.objects.filter(ipas_employee_id=empno)[0].paylevel
            station_des=models.HRMS.objects.filter(ipas_employee_id=empno)[0].current_place
            dept_desc=models.HRMS.objects.filter(ipas_employee_id=empno)[0].department
            desig_longdesc=models.HRMS.objects.filter(ipas_employee_id=empno)[0].designation
            email=models.HRMS.objects.filter(ipas_employee_id=empno)[0].official_email_id
            contactno=models.HRMS.objects.filter(ipas_employee_id=empno)[0].official_mobile_no
            railwaygroup=models.HRMS.objects.filter(ipas_employee_id=empno)[0].railway_group
            rl_type=models.HRMS.objects.filter(ipas_employee_id=empno)[0].rltype
            subdepartment=models.HRMS.objects.filter(ipas_employee_id=empno)[0].sub_department
            currentzone=models.HRMS.objects.filter(ipas_employee_id=empno)[0].current_zone
            currentunitdivision=models.HRMS.objects.filter(ipas_employee_id=empno)[0].current_unit_division
            hrms_id=models.HRMS.objects.filter(ipas_employee_id=empno)[0].hrms_employee_id
            if models.railwayLocationMaster.objects.filter(location_description=currentunitdivision).exists():
                rlyid=models.railwayLocationMaster.objects.filter(location_description=currentunitdivision)[0].rly_unit_code
                
            if(m1.empmast.objects.filter(empno=empno).exists()):
                
                m1.empmast.objects.filter(empno=empno).update(empname=empname,empmname=empmname,emplname=emplname,birthdate=birthdate,appointmentdate=appointmentdate,
                                            superannuation_date=superannuation_date,gender=gender,billunit=billunit,service_status=service_status,
                                            pc7_level=pc7_level,station_des=station_des,dept_desc=dept_desc,desig_longdesc=desig_longdesc,email=email,
                                            contactno=contactno,railwaygroup=railwaygroup,rl_type=rl_type,subdepartment=subdepartment,
                                            currentzone=currentzone,currentunitdivision=currentunitdivision)
            else:
                m1.empmast.objects.create(hrms_id_id=hrms_id,empno=empno1,empname=empname,empmname=empmname,emplname=emplname,birthdate=birthdate,appointmentdate=appointmentdate,
                                            superannuation_date=superannuation_date,gender=gender,billunit=billunit,service_status=service_status,
                                            pc7_level=pc7_level,station_des=station_des,dept_desc=dept_desc,desig_longdesc=desig_longdesc,email=email,
                                            contactno=contactno,railwaygroup=railwaygroup,rl_type=rl_type,subdepartment=subdepartment,
                                            currentzone=currentzone,currentunitdivision=currentunitdivision) 
            context={
                'name':str(name),
            }
            return JsonResponse(context)
        else:
            bono=[]        
            return JsonResponse(bono,safe = False)
    except Exception as e:
        try:
            m1.error_Table.objects.create(fun_name="check_details",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        #messages.error(request, 'Error : '+str(e))
        return render(request, "errorspage.html", {})


# def fetch_emp(request):
#     email_id=request.GET.get('email_id')
#     print(email_id)
        
#     if(models.Level_Desig.objects.exclude(delete_flag=True).filter(official_email_ID=email_id).exists()):
#         # designation_id=m1.HRMS.objects.filter(empno=emp_id)[0].designation_id
#         # designation=models.Designation_Master.objects.filter(designation_master_no=designation_id)[0].designation
#         # designation=models.HRMS.objects.filter(ipas_employee_id=emp_id)[0].designation
#         # empf_name=models.HRMS.objects.filter(ipas_employee_id=emp_id)[0].employee_first_name
#         # empm_name=models.HRMS.objects.filter(ipas_employee_id=emp_id)[0].employee_middle_name
#         # empl_name=models.HRMS.objects.filter(ipas_employee_id=emp_id)[0].employee_last_name
#         designation=models.Level_Desig.objects.exclude(delete_flag=True).filter(official_email_ID=email_id)[0].designation
#         # if(empf_name==None):
#         #     name=str(empm_name) + " " + str(empl_name)
#         # elif(empm_name==None):
#         #     name=str(empf_name) + " " + str(empl_name)
#         # elif(empl_name==None):
#         #     name=str(empf_name) + " " + str(empm_name)
        
#         # rly=models.HRMS.objects.filter(ipas_employee_id=emp_id)[0].current_zone
#         # division=models.HRMS.objects.filter(ipas_employee_id=emp_id)[0].current_unit_division
#         # email_idd=models.HRMS.objects.filter(ipas_employee_id=emp_id)[0].official_email_id
        
#         # desigg=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=designation)[0].designation
#         # rly_code=models.railwayLocationMaster.objects.filter(rly_unit_code=rly_id)[0].location_code
#         # if div_id!=None:
#         #     div_code=models.railwayLocationMaster.objects.filter(rly_unit_code=div_id)[0].location_code
#         # else:
#         #     div_code=''
#         context={
#             # 'designation':str(designation),
#             # 'empname':str(empname),
#             # 'rly_code':str(rly_code),
#             # 'div_code':str(div_code),
#             # 'desigg':str(desigg),
#             # 'email_idd':str(email_idd),
#             # 'designation':str(designation),
#             # 'rly':str(rly),
#             # 'division':str(division),
#             # 'email_idd':str(email_idd),
#             'designation':str(designation),
#         }
#         return JsonResponse(context)
#     else:
#         bono=[]        
#         return JsonResponse(bono,safe = False)
        
# def signup(request):
#     if request.method == "POST":
#         submit_form=request.POST.get('submit_form')
#         if(submit_form=="submit_form"):
#             empno=request.POST.get('emp_id')
#             empname=request.POST.get('empname')
#             designation=request.POST.get('designation')
#             email_id=request.POST.get('email_id')
#             password=request.POST.get('password')
#             rly_code=request.POST.get('rly_id')
#             rly_id=models.railwayLocationMaster.objects.filter(location_code=rly_code)[0].rly_unit_code
#             div_code=request.POST.get('div_id')
#             div_id=models.railwayLocationMaster.objects.filter(location_code=div_code)[0].rly_unit_code
#             if(user.objects.filter(first_name=empname,email=email_id).exists()):
#                 messages.success(request,'User Already Exists.')
#             else:    
#                 user.objects.create_user(first_name=empname,email=email_id,password=password)
#                 myuser_id=user.objects.filter(first_name=empname,email=email_id)[0].id
#                 print(myuser_id,'___________-')
#                 models.empmast.objects.create(empno=empno,empname=empname,desig_longdesc=designation,email=email_id,myuser_id_id=myuser_id
#                 ,rly_id_id=rly_id,div_id_id=div_id)
#                 # send_mail(
#                 #             'OTP request', #subject
#                 #              htmlgen, #message body
#                 #             'amishu321@gmail.com', # from email
#                 #             [email], fail_silently=False, #to email
                        
#                 #         )
#                 messages.success(request,'User Created successfully.')
#     return render(request,"signup.html")

# def signup(request):
#     try:
#         id=user.objects.filter().order_by('-id')[0].id
#         id+=1
#         print(id)
#         if request.method == "POST":
#             submit_form=request.POST.get('submit_form')
#             if(submit_form=="submit_form"):
#                 empno=request.POST.get('empno')
#                 empname=request.POST.get('empname')
#                 desig=request.POST.get('desig')
#                 email_id=request.POST.get('email_id')
#                 password=request.POST.get('password')
#                 status=request.POST.get('status')
#                 print('1')
#                 print(desig)
#                 # models.Level_Desig.objects.exclude(delete_flag=True).filter(designation=desig).update(status=status,empno_id=empno)
#                 empvar=models.Level_Desig.objects.exclude(delete_flag=True).filter(empno_id=empno,official_email_ID=email_id)
#                 statusvar=models.Level_Desig.objects.exclude(delete_flag=True).filter(status=status,official_email_ID=email_id)
#                 uservar=user.objects.filter(username=email_id)
#                 obj = models.Level_Desig.objects.exclude(delete_flag=True).filter(empno_id=empno,status='P').values()
#                 print(obj)
#                 # if(uservar.exists()):
#                 #     user.objects.filter(username=email_id).update(first_name=empname,password=password,email=email_id)
#                 if(status=='D' and not models.Level_Desig.objects.exclude(delete_flag=True).filter(empno_id=empno,status='P').exists()):
#                     messages.success(request,'Employee is not posted on any primary designation. ')
#                 elif(status=='D' and models.Level_Desig.objects.exclude(delete_flag=True).filter(empno_id=empno,status='P').exists()):
#                     models.Level_Desig.objects.exclude(delete_flag=True).filter(designation=desig).update(status=status,empno_id=empno)
#                     user.objects.filter(username=email_id).update(first_name=empname,password=password,email=email_id)
#                 elif(obj.exists() and status=='P'):
#                     models.Level_Desig.objects.exclude(delete_flag=True).filter(empno_id=empno,status='P').update(status='V')
#                     models.Level_Desig.objects.exclude(delete_flag=True).filter(designation=desig).update(status=status,empno_id=empno)
#                     user.objects.filter(username=email_id).update(first_name=empname,password=password,email=email_id)
#                 elif(uservar.exists() and not empvar.exists() and not statusvar.exists()):
#                     models.Level_Desig.objects.exclude(delete_flag=True).filter(designation=desig).update(status=status,empno_id=empno)
#                     user.objects.filter(username=email_id).update(first_name=empname,password=password,email=email_id)
#                     # messages.success(request,'User Already Exists.')
#                 elif(uservar.exists() and statusvar.exists() and not empvar.exists()):
#                     models.Level_Desig.objects.exclude(delete_flag=True).filter(designation=desig).update(empno_id=empno)
#                     user.objects.filter(username=email_id).update(password=password)
#                 elif(uservar.exists() and empvar.exists() and not statusvar.exists()):
#                     models.Level_Desig.objects.exclude(delete_flag=True).filter(designation=desig).update(status=status)
#                     user.objects.filter(username=email_id).update(password=password)
#                 elif(uservar.exists() and empvar.exists() and statusvar.exists()):
#                     messages.success(request,'You are already registered.Use your login credentials')
#                     #add forgot password
#                 else:    
#                     print(empname,email_id)
#                     id=user.objects.filter().order_by('-id')[0].id
#                     id+=1
#                     empno=request.POST.get('empno')
#                     #update in level desig
#                     user.objects.create_user(first_name=empname,username=email_id,password=password, id=id,email=email_id)
#                     print('hlo')
#                     # if(user.objects.filter(first_name=empname,username=empno).exists()):
#                     #     myuser_id=user.objects.filter(first_name=empname,username=empno)[0].id
#                     # print(myuser_id,'___________-')
#         return render(request,"signup.html")
#     except Exception as e:
#         print(e)


# def loginUser(request):
#     # try:
#         if request.method == "POST":
#             _email = request.POST.get('email').strip()
#             _password = request.POST.get('password').strip()
#             print(_email,'____')
#             print(_password,'_____')
#             # obj3=models.rkvy_userEnrollment.objects.filter(user_id__email=_email).values('pending_stage')
#             # check for existence
#             userObj = authenticate(username=_email, password=_password)
#             # desig=models.Level_Desig.objects.exclude(delete_flag=True).filter(official_email_ID=_email).values('designation')
#             # print(desig)
#             global f_name
#             global l_name
#             global role_list 
#             if userObj is not None:
#                 login(request, userObj)
#                 if userObj.user_role=="user":
#                     desig=models.Level_Desig.objects.exclude(delete_flag=True).filter(official_email_ID=_email).values('designation')
#                     request.session["designation"] = desig[0]['designation']
#                 elif userObj.user_role=="admin_rly" or userObj.user_role=="admin_super" or userObj.user_role=="admin_div":
#                     rlyid=models.AdminMaster.objects.filter(user_id=_email).values('rly_id')
                
#                 print("inside login&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%")
#                 print(userObj.username==None)
#                 print(userObj.username,'000000000')
#                 print(userObj.is_admin)
#                 f_name = userObj.first_name
#                 l_name = userObj.last_name
#                 if userObj.is_admin==True and userObj.user_role=="admin_super":
#                     role_list = str(userObj.user_role)
#                     print(role_list)
#                     request.session["nav"] = custommenu()
#                     return HttpResponseRedirect('/adminuserHome')
#                 elif userObj.is_admin==True and userObj.user_role=="admin_rly":
#                     role_list = str(userObj.user_role)
#                     request.session["nav"] = custommenu()
#                     return HttpResponseRedirect('/zonaluserHome')
#                 elif userObj.is_admin==True and userObj.user_role=="admin_div":
#                     role_list = str(userObj.user_role)
#                     request.session["nav"] = custommenu()
#                     return HttpResponseRedirect('/divisonuserHome')
#                 else:
#                     role_list = "user"
#                     request.session["nav"] = custommenu()
#                     return HttpResponseRedirect('/dash_home')
#                     # return render(request,"list_create_inspection_report.html")
                
#             else:
#                 #change 21-10
#                 if user.objects.filter(email=_email,is_active=False).exists():
#                     messages.error(request, 'Request is not accepted yet.')
#                 else:
#                     messages.error(request, 'Invalid Credentials')#till here 21-10
#                 #return HttpResponseRedirect('/rkvy_login')
#                 return render(request, "login.html")
#         print('hhhh')
#         return render(request, "login.html")
def loginUser(request):
    # try:
        
        if request.method == "POST":
            
            _email = request.POST.get('email').strip()
            _email = _email.lower()
            _password = request.POST.get('password').strip()

            sms('454546',"hello")
            #for guest login
            user_role=list(m1.MyUser.objects.filter(Q(username=_email) | Q(email=_email)).values('user_role','guest_to_id__email','username','email'))
            # print(user_role,_email)
            if len(user_role)>0:
                if user_role[0]['user_role']=='guest':
                    m1.MyUser.objects.filter(username=_email).update(email=user_role[0]['username'],guest_email=user_role[0]['guest_to_id__email'])  
                            
            userObj = authenticate(username=_email, password=_password)

            if userObj is None :
                if len(user_role):
                    # print("here")
                    _email=user_role[0]['username']
                    userObj = authenticate(username=_email, password=_password)
            # print(userObj)
 
            global f_name
            global l_name
            global role_list 
            if userObj is not None:
                login(request, userObj)
                
                request.session["userrole"]=request.user.user_role
                request.session["ssoid"]='0'
                # print(request.user)
                if userObj.user_role=="guest": 
                    # print(request.user.guest_email)
                    desig=models.Level_Desig.objects.exclude(delete_flag=True).filter(official_email_ID=request.user.guest_email).values('designation','d_level')
                    request.session["designation"] = desig[0]['designation']
                    request.session["d_level"]=desig[0]['d_level']

                elif userObj.user_role=="admin_rly" or userObj.user_role=="admin_super" or userObj.user_role=="admin_div" or userObj.user_role=="admin_roster":
                    rlyid=models.AdminMaster.objects.filter(user_id=_email).values('rly_id')
                else:                    
                    desig=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=_email)|Q(official_email_ID=request.user.guest_email) | Q(official_email_ID=request.user)).values('designation','d_level','empno')
                    
                    request.session["designation"] = desig[0]['designation']
                    request.session["d_level"]=desig[0]['d_level']

                    if desig[0]['empno'] == None:
                        logout(request)
                        messages.error(request, 'Employee number is not mapped with designation,please contact admin.')
                        return render(request, "login.html")
                
                
                # print("###################### Inside Login ######################")
                # print(userObj.username==None)
                # print(userObj.username,'000000000')
                # print(userObj.is_admin)
                # f_name = userObj.first_name
                # l_name = userObj.last_name
                # username =userObj.username
                
                if (userObj.is_admin==True) and (userObj.user_role=="admin_super"):
                    if (userObj.phase_type=='1') or (userObj.phase_type==None) or (userObj.phase_type=='3'):
                        role_list = str(userObj.user_role)
                        request.session["nav"] = custommenu_admin(request)
                        # return HttpResponseRedirect('/adminuserHome')
                        return HttpResponseRedirect('/employeeList')
                    elif userObj.phase_type=='2':
                        role_list = str(userObj.user_role)
                        request.session["nav"] = custommenu2(userObj.phase_type,d_level)
                        return HttpResponseRedirect('/masterTable')
                
                elif (userObj.is_admin==True) and (userObj.user_role=="admin_rly"):
                    if userObj.phase_type=='1' or (userObj.phase_type==None) or (userObj.phase_type=='3'): 
                        role_list = str(userObj.user_role)
                        request.session["nav"] = custommenu_admin(request)
                        return HttpResponseRedirect('/DivisonMaster')
                    elif userObj.phase_type=='2':
                        role_list = str(userObj.user_role)
                        request.session["nav "] = custommenu2(userObj.phase_type,d_level)
                        return HttpResponseRedirect('/masterTable')  

                elif (userObj.is_admin==True) and (userObj.user_role=="admin_div"):
                    if (userObj.phase_type=='1') or (userObj.phase_type==None) or (userObj.phase_type=='3'):
                        role_list = str(userObj.user_role)
                        request.session["nav"] = custommenu_admin(request)
                        return HttpResponseRedirect('/requests111')
                    elif userObj.phase_type=='2':
                        role_list = str(userObj.user_role)
                        request.session["nav"] = custommenu2(userObj.phase_type,d_level)
                        return HttpResponseRedirect('/masterTable')

                elif (userObj.is_admin==True) and (userObj.user_role=="admin_roster"):
                    if userObj.phase_type=='1' or (userObj.phase_type==None) or (userObj.phase_type=='3'): 
                        role_list = str(userObj.user_role)
                        request.session["nav"] = custommenu_admin(request)
                        return HttpResponseRedirect('/roster_list')
                    elif userObj.phase_type=='2':
                        role_list = str(userObj.user_role)
                        request.session["nav "] = custommenu2(userObj.phase_type,d_level)
                        return HttpResponseRedirect('/masterTable')

                ##################################### USER LOGIN ###########################################
                else:
                    username =userObj.username
                    try:
                        print(userObj)
                        d_level=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=username)|Q(official_email_ID=request.user.guest_email) | Q(official_email_ID=request.user))[0]
                        request.session['d_level']=d_level.d_level
                        #print('d_level: ',d_level.d_level,userObj.phase_type)
                    except:
                        d_level=''
                    
                   # role_list = "user"
                    # Phase type 1
                    if userObj.phase_type=='1':
                        role_list = str(userObj.user_role)
                        request.session["nav"] = custommenu(request,userObj.phase_type,d_level)
                        request.session['phase']='1'
                        if request.session['designation']=='CRB&CEO' or request.session['designation']=='CRB & CEO':
                            return HttpResponseRedirect('/home_page')
                        else:
                            return HttpResponseRedirect('/dash_home')

                    # Phase Type 2
                    elif userObj.phase_type=='2':
                        role_list = str(userObj.user_role)
                        request.session["nav"] = custommenu2(userObj.phase_type,d_level)
                        request.session['phase']='2'
                        # request.session['phase']='1'
                        # return HttpResponseRedirect('/dash_home')
                        return HttpResponseRedirect('/frontpage')
                    
                    # Phase Type 3
                    elif userObj.phase_type=='3':
                        role_list = str(userObj.user_role)
                        request.session['nav1']=custommenu2(userObj.phase_type,d_level)
                        storeNav = custommenu(request,userObj.phase_type,d_level)
                        request.session['nav']=storeNav
                        request.session['phase']='3'
                        # request.session['phase']='1'
                        # return HttpResponseRedirect('/dash_home')
                        return HttpResponseRedirect('/frontpage')

                    else:
                        role_list = str(userObj.user_role)
                        request.session["nav"] = custommenu(request,userObj.phase_type,d_level)
                        request.session['phase']='1'
                        return HttpResponseRedirect('/dash_home')

            else:
                #change 21-10
                if user.objects.filter(email=_email,is_active=False).exists():
                    messages.error(request, 'Request is not accepted yet.')
                else:
                    messages.error(request, 'Invalid Credentials')#till here 21-10
                #return HttpResponseRedirect('/rkvy_login')
                return render(request, "login.html")
        #print('hhhh')
        # context={
        #     'userObj':userObj,
        # }
        
        return render(request, "login.html")
    # except Exception as e:
    #     try:
    #         m1.error_Table.objects.create(fun_name="loginUser",user_id=request.user,err_details=str(e))
    #     except:
    #         print("Internal Error!!!")
    #     #messages.error(request, 'Error : '+str(e))
    #     return render(request, "errorspage.html", {})

##############   latest
# def loginUser(request):
#     # try:
#         if request.method == "POST":
#             _email = request.POST.get('email').strip()
#             _password = request.POST.get('password').strip()
#             # print(email,'_')
#             # print(password,'__')
#             # obj3=models.rkvy_userEnrollment.objects.filter(user_id__email=_email).values('pending_stage')
#             # check for existence
#             userObj = authenticate(username=_email, password=_password)            
#             global f_name
#             global l_name
#             global role_list 
#             if userObj is not None:
#                 login(request, userObj)
#                 if userObj.user_role=="user":
#                     desig=models.Level_Desig.objects.exclude(delete_flag=True).filter(official_email_ID=_email).values('designation')
#                     request.session["designation"] = desig[0]['designation']
#                 elif userObj.user_role=="admin_rly" or userObj.user_role=="admin_super" or userObj.user_role=="admin_div":
#                     rlyid=models.AdminMaster.objects.filter(user_id=_email).values('rly_id')
                
#                 # print("###################### Inside Login ######################")
#                 # print(userObj.username==None)
#                 # print(userObj.username,'000000000')
#                 # print(userObj.is_admin)
#                 f_name = userObj.first_name
#                 l_name = userObj.last_name
#                 username =userObj.username
                
#                 if (userObj.is_admin==True) and (userObj.user_role=="admin_super"):
#                     if (userObj.phase_type=='1') or (userObj.phase_type==None) or (userObj.phase_type=='3'):
#                         role_list = str(userObj.user_role)
#                         # request.session["nav"] = custommenu(userObj.phase_type,d_level)
#                         return HttpResponseRedirect('/adminuserHome')
#                     elif userObj.phase_type=='2':
#                         role_list = str(userObj.user_role)
#                         # request.session["nav"] = custommenu2(userObj.phase_type,d_level)
#                         return HttpResponseRedirect('/masterTable')
                
#                 elif (userObj.is_admin==True) and (userObj.user_role=="admin_rly"):
#                     if userObj.phase_type=='1' or (userObj.phase_type==None) or (userObj.phase_type=='3'): 
#                         role_list = str(userObj.user_role)
#                         # request.session["nav"] = custommenu(userObj.phase_type,d_level)
#                         return HttpResponseRedirect('/zonaluserHome')
#                     elif userObj.phase_type=='2':
#                         role_list = str(userObj.user_role)
#                         # request.session["nav "] = custommenu2(userObj.phase_type,d_level)
#                         return HttpResponseRedirect('/masterTable')  

#                 elif (userObj.is_admin==True) and (userObj.user_role=="admin_div"):
#                     if (userObj.phase_type=='1') or (userObj.phase_type==None) or (userObj.phase_type=='3'):
#                         role_list = str(userObj.user_role)
#                         # request.session["nav"] = custommenu(userObj.phase_type,d_level)
#                         return HttpResponseRedirect('/divisonuserHome')
#                     elif userObj.phase_type=='2':
#                         role_list = str(userObj.user_role)
#                         # request.session["nav"] = custommenu2(userObj.phase_type,d_level)
#                         return HttpResponseRedirect('/masterTable')

#                 ##################################### USER LOGIN ###########################################
#                 else:
#                     d_level=models.Level_Desig.objects.exclude(delete_flag=True).filter(official_email_ID=username)[0]                  
#                     print('d_level: ',d_level.d_level,userObj.phase_type)
#                     username =userObj.username
#                     d_level=models.Level_Desig.objects.exclude(delete_flag=True).filter(official_email_ID=username)[0]                  
#                     print('d_level: ',d_level.d_level,userObj.phase_type)
#                     role_list = "user"
#                     # GM is Phase type 1
#                     if d_level.d_level == 'GM':
#                         request.session["nav"] = custommenu(userObj.phase_type,d_level)
#                         request.session['phase']='1'
#                         return HttpResponseRedirect('/dash_home')

#                     # DRM is Phase type 3(for now)
#                     elif d_level.d_level == 'DRM' :
#                         # print('DRM LOGIN')
#                         if userObj.phase_type=='3':
#                             # print('DRM PHASE TYPE 3')
#                             request.session['nav1']=custommenu2(userObj.phase_type,d_level)
#                             storeNav = custommenu(userObj.phase_type,d_level)
#                             request.session['nav']=storeNav
#                             request.session['phase']='3'

#                             return HttpResponseRedirect('/frontpage')


#                         # DRM Phase type 2 einspection (no switching)
#                         elif userObj.phase_type=='2':
#                             request.session['phase']='2'
#                             request.session["nav"] = custommenu2(userObj.phase_type,d_level)
#                             return HttpResponseRedirect('/frontpage')
#                         # DRM Phase type 1 inspection (no switching)
#                         else:
#                             request.session["nav"] = custommenu(userObj.phase_type,d_level)
#                             request.session['phase']='1'
#                             return HttpResponseRedirect('/dash_home')

#                     # BU is Phase type 2
#                     else:
#                         request.session["nav"] = custommenu(userObj.phase_type,d_level)
#                         request.session['phase']='1'
#                         return HttpResponseRedirect('/dash_home')
                    
#             else:
#                 #change 21-10
#                 if user.objects.filter(email=_email,is_active=False).exists():
#                     messages.error(request, 'Request is not accepted yet.')
#                 else:
#                     messages.error(request, 'Invalid Credentials')#till here 21-10
#                 #return HttpResponseRedirect('/rkvy_login')
#                 return render(request, "login.html")
#         # print('hhhh')
#         # context={
#         #     'userObj':userObj,
#         # }
#         return render(request, "login.html")



def custommenu2(phase_type,d_level): 
    menustr=''
    role=role_list
    global menuname2
    navmenu=m2.custom_menu.objects.filter(role=role,delete_flag=False).all().order_by('m_id')
    # navmenu2=m1.custom_menu.objects.filter(role=role).all().order_by('m_id')
    for menu in navmenu: 
        #print(menu.menu)
        if menu.parent_id == 0 :
            if menustr is None:
                menustr=""
            #menustr+="<li><div class='iocn-link'><a href="+menu.url+"><i class="+menu.icons+" ></i><span class='link_name'>"+menu.menu+"</span></a><i class='bx bxs-chevron-down arrow' ></i></div>"
            menustr+="<li><div class='iocn-link'><a href="+menu.url+"><i class="+menu.icons+"></i><span class='link_name'>"+menu.menu+"</span></a><i class='bx bxs-chevron-down arrow' ></i></div>"            
            pid=menu.m_id
            sb1=m2.custom_menu.objects.filter(role=role,m_id=pid,delete_flag=False).values('menu')
            menuname2 = sb1[0]['menu']
            substr=submenu2(navmenu,pid,menuname2,d_level) 
            menustr+=substr
            menustr+="</li>" 
        elif menu.parent_id == -1 :         
            x="<li><a href="+menu.url+"><span class='link_name'>"+menu.menu+"</span></a><ul class='sub-menu blank'><li><a class='link_name' href="+menu.url+">"+menu.menu+"</a></li></ul></li>"
            #print("hjj: ",x)
            if x is None:
                x=""
            menustr+=x
    if phase_type=='3':
        switch="<li><a href='/toggle_custom_menu'><i class='bx bx-search' ></i><span class='link_name'>Inspection</span></a><ul class='sub-menu blank'><li><a class='link_name' href='/dash_home'>Inspection</a></li></ul></li>"
        #print("hjj: ",switch)
        if switch is None:
            switch=""
        menustr+=switch

    # menustr+="<li><div class='iocn-link'><a href='#'><i class='bx bx-log-out-circle' ></i><span class='link_name'>"+f_name+"</span></a><i class='bx bxs-chevron-down arrow' ></i></div><ul class='sub-menu'><li><a  href='/inspect_changePassword'>Change Password</a></li><li><a   onclick='logoutConfirm();'>Logout</a></li></ul></li>"
    # if phase_type=='3':
    #     xindex = next((index for (index,d ) in enumerate(navmenu) if d["parent_id"] == -999), None)
    #     menustr+="<li><div class='iocn-link'><a href="+navmenu[xindex].url+"><span class='link_name'>"+navmenu[xindex].menu+"</span></a><i class='bx bxs-chevron-down arrow' ></i></div>"
    return menustr

def toggle_custom_menu(request):
    try:
        phase=request.session['phase']
        #print('phase     ',phase)
        if phase == '3':
            request.session['phase']='1'
            return HttpResponseRedirect('/dash_home')
        else:
            request.session['phase']='3'
            return HttpResponseRedirect('/frontpage')
    except Exception as e:
        try:
            m1.error_Table.objects.create(fun_name="toggle_custom_menu",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        #messages.error(request, 'Error : '+str(e))
        return render(request, "errorspage.html", {})


#### Einspect Sub Menu ###
def submenu2(menubar,sid,menuname2,d_level):
    role=role_list  
    menustr=""
    sb=m2.custom_menu.objects.filter(role=role,parent_id=sid,delete_flag=False).all().order_by('m_id')
    if len(sb)>0:   
        menustr="<ul class='sub-menu'><li><a class='link_name' href='#'>"+menuname2+"</a></li>"
        for menu in menubar: 
            if menu.parent_id == sid :     
                if menustr is None:
                    menustr=""   
                if menu.menu == "Reported Complaints" and (d_level.d_level == 'GM' or d_level.d_level == "DRM"):
                    menustr+="<li><a href='#'></a></li>"
                else:
                    menustr+="<li><a href="+menu.url+">"+menu.menu+"</a></li>"
                pid=menu.m_id
                substr=submenu2(menubar,pid,menuname2,d_level)
                menustr+=substr 
                menustr+="</li>"      
        menustr+="</ul>"
    return menustr

def custommenu(request,phase_type,d_level):
    try:
        desig=request.session["designation"]
        if models.Level_Desig.objects.exclude(delete_flag=True).filter(designation=desig).values('empno_id').exists():
            emp=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation=desig).values('empno_id')[0]['empno_id']
        else:
            emp=""
        if m1.empmast.objects.filter(empno=emp).values('empname').exists():
            name=m1.empmast.objects.filter(empno=emp).values('empname')[0]['empname']
        else:
            name=""
        menustr=""
        role=role_list
        global menuname
        navmenu=m1.custom_menu.objects.filter(role=role).all().order_by('m_id')
        for menu in navmenu: 
            #print(menu.menu)
            if menu.perent_id == 0 :
                menustr+="<li><div class='iocn-link'><a href="+menu.url+"><i class="+menu.icons+" ></i><span class='link_name'>"+menu.menu+"</span></a><i class='bx bxs-chevron-down arrow' ></i></div>"
                pid=menu.m_id
                sb1=m1.custom_menu.objects.filter(role=role,m_id=pid).values('menu')
                menuname = sb1[0]['menu']
                substr=submenu(navmenu,pid) 
                menustr+=substr
                menustr+="</li>" 
            elif menu.perent_id == -1 :
                menustr+="<li><a href="+menu.url+"><i class="+menu.icons+" ></i><span class='link_name'>"+menu.menu+"</span></a><ul class='sub-menu blank'><li><a class='link_name' href="+menu.url+">"+menu.menu+"</a></li></ul></li>"
        if phase_type=='3':
            switch="<li><a href='/toggle_custom_menu'><i class='bx bx-search' ></i><span class='link_name'>E-nspection</span></a><ul class='sub-menu blank'><li><a class='link_name' href='/frontpage'>E-Inspection</a></li></ul></li>"
            #print("hjj: ",switch)
            if switch is None:
                switch=""
            menustr+=switch

        # menustr +="<div style='margin-top:120%;'><hr><li><div class='iocn-link'><a href='https://railmadad.indianrailways.gov.in/madad/final/home.jsp'><i class='bx bx-link' ></i><span class='link_name text-wrap'>Rail Madad</span></a></div></li>" "<li><div class='iocn-link'><a href='https://morpr.cris.org.in/pat/login'><i class='bx bx-link' ></i><span class='link_name text-wrap'>Parliament References</span></a></div></li>" "<li><div class='iocn-link'><a href='https://morpr.cris.org.in/pat/login'><i class='bx bx-link' ></i><span class='link_name text-wrap'>VIP References</span></a></div></li>""<li><div class='iocn-link'><a href='https://edrishti.indianrailways.gov.in/eDrishti/login.jsp'><i class='bx bx-link' ></i><span class='link_name text-wrap'>E-Drishti</span></a></div></li></div> "
        # menustr+="<li><div class='iocn-link'><a href='#'><i class='bx bx-log-out-circle' ></i><span class='link_name'>"+name+"</span></a><i class='bx bxs-chevron-down arrow' ></i></div><ul class='sub-menu'><li><a  href='/viewDetail'>View Profile</a></li><li><a  href='/inspect_changePassword'>Change Password</a></li><li><a href='/inspect_logout'  onclick='logoutConfirm();'>Logout</a></li></ul></li>"
        
        
        return menustr
    except Exception as e:
        try:
            m1.error_Table.objects.create(fun_name="toggle_custom_menu",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        #messages.error(request, 'Error : '+str(e))
        return render(request, "errorspage.html", {})

def custommenu_admin(request):
    try:
        menustr=""
        role=role_list
        global menuname
        navmenu=models.custom_menu.objects.filter(role=role).all()
        for menu in navmenu: 
            print(menu.menu)
            if menu.perent_id == 0 :
                menustr+="<li><div class='iocn-link'><a href="+menu.url+"><i class="+menu.icons+" ></i><span class='link_name'>"+menu.menu+"</span></a></div>"
    
        # menustr+="<li><div class='iocn-link'><a href="+menu.url+"><i class="+menu.icons+" ></i><span class='link_name'>"+menu.menu+"</span></a></div>"
        return menustr
    except Exception as e:
        try:
            m1.error_Table.objects.create(fun_name="custommenu_admin",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        #messages.error(request, 'Error : '+str(e))
        return render(request, "errorspage.html", {})


# def custommenu(phase_type,d_level): 
#     menustr=""
#     role=role_list
#     global menuname
#     navmenu=m1.custom_menu.objects.filter(role=role).all().order_by('m_id')
#     for menu in navmenu: 
#         print(menu.menu)
#         if menu.perent_id == 0 :
#             menustr+="<li><div class='iocn-link'><a href="+menu.url+"><i class="+menu.icons+" ></i><span class='link_name'>"+menu.menu+"</span></a><i class='bx bxs-chevron-down arrow' ></i></div>"
#             pid=menu.m_id
#             sb1=m1.custom_menu.objects.filter(role=role,m_id=pid).values('menu')
#             menuname = sb1[0]['menu']
#             substr=submenu(navmenu,pid) 
#             menustr+=substr
#             menustr+="</li>" 
#         elif menu.perent_id == -1 :
#             menustr+="<li><a href="+menu.url+"><i class="+menu.icons+" ></i><span class='link_name'>"+menu.menu+"</span></a><ul class='sub-menu blank'><li><a class='link_name' href="+menu.url+">"+menu.menu+"</a></li></ul></li>"
#     if phase_type=='3':
#         switch="<li><a href='/toggle_custom_menu'><i class='bx bx-search' ></i><span class='link_name'>E-nspection</span></a><ul class='sub-menu blank'><li><a class='link_name' href='/frontpage'>E-Inspection</a></li></ul></li>"
#         print("hjj: ",switch)
#         if switch is None:
#             switch=""
#         menustr+=switch
#     menustr+="<li><div class='iocn-link'><a href='#'><i class='bx bx-log-out-circle' ></i><span class='link_name'>"+f_name+"</span></a><i class='bx bxs-chevron-down arrow' ></i></div><ul class='sub-menu'><li><a  href='/viewDetail'>View Profile</a></li><li><a  href='/inspect_changePassword'>Change Password</a></li><li><a   onclick='logoutConfirm();'>Logout</a></li></ul></li>"
#     return menustr


def submenu(menubar,sid):
    role=role_list  
    menustr=""
    sb=m1.custom_menu.objects.filter(role=role,perent_id=sid).all().order_by('m_id')
    if len(sb)>0:   
        menustr="<ul class='sub-menu'><li><a class='link_name' href='#'>"+menuname+"</a></li>"
        for menu in menubar: 
            if menu.perent_id == sid :        
                menustr+="<li><a href="+menu.url+">"+menu.menu+"</a></li>"
                pid=menu.m_id
                substr=submenu(menubar,pid)
                menustr+=substr 
                menustr+="</li>"      
        menustr+="</ul>"
    return menustr

# def loginUser(request):
#     # try:
#         if request.method == "POST":
#             _email = request.POST.get('email').strip()
#             _password = request.POST.get('password').strip()
#             print(_email,'____')
#             print(_password,'_____')
#             # obj3=models.rkvy_userEnrollment.objects.filter(user_id__email=_email).values('pending_stage')
#             # check for existence
#             userObj = authenticate(username=_email, password=_password)            
#             global f_name
#             global l_name
#             global role_list 
#             if userObj is not None:
#                 login(request, userObj)
#                 if userObj.user_role=="user":
#                     desig=models.Level_Desig.objects.exclude(delete_flag=True).filter(official_email_ID=_email).values('designation')
#                     request.session["designation"] = desig[0]['designation']
#                 elif userObj.user_role=="admin_rly" or userObj.user_role=="admin_super" or userObj.user_role=="admin_div":
#                     rlyid=models.AdminMaster.objects.filter(user_id=_email).values('rly_id')
#                 print("###################### Inside Login ######################")
#                 print(userObj.username==None)
#                 print(userObj.username,'000000000')
#                 print(userObj.is_admin)
#                 f_name = userObj.first_name
#                 l_name = userObj.last_name
#                 if (userObj.is_admin==True) and (userObj.user_role=="admin_super"):
#                     if (userObj.phase_type=='1') or (userObj.phase_type==None) or (userObj.phase_type=='3'):
#                         role_list = str(userObj.user_role)
#                         request.session["nav"] = custommenu()
#                         return HttpResponseRedirect('/adminuserHome')
#                     elif userObj.phase_type=='2':
#                         role_list = str(userObj.user_role)
#                         request.session["nav"] = custommenu2(userObj.phase_type)
#                         return HttpResponseRedirect('/masterTable')
                
#                 elif (userObj.is_admin==True) and (userObj.user_role=="admin_rly"):
#                     if userObj.phase_type=='1' or (userObj.phase_type==None) or (userObj.phase_type=='3'): 
#                         role_list = str(userObj.user_role)
#                         request.session["nav"] = custommenu()
#                         return HttpResponseRedirect('/zonaluserHome')
#                     elif userObj.phase_type=='2':
#                         role_list = str(userObj.user_role)
#                         request.session["nav"] = custommenu2(userObj.phase_type)
#                         return HttpResponseRedirect('/masterTable')  

#                 elif (userObj.is_admin==True) and (userObj.user_role=="admin_div"):
#                     if (userObj.phase_type=='1') or (userObj.phase_type==None) or (userObj.phase_type=='3'):
#                         role_list = str(userObj.user_role)
#                         request.session["nav"] = custommenu()
#                         return HttpResponseRedirect('/divisonuserHome')
#                     elif userObj.phase_type=='2':
#                         role_list = str(userObj.user_role)
#                         request.session["nav"] = custommenu2(userObj.phase_type)
#                         return HttpResponseRedirect('/masterTable')

#                 else:
#                     role_list = "user"
#                     if (userObj.phase_type=='1') or (userObj.phase_type==None) or (userObj.phase_type=='3'):
#                         request.session["nav"] = custommenu()
#                         return HttpResponseRedirect('/dash_home')
#                     # return render(request,"list_create_inspection_report.html")
#                     elif userObj.phase_type=='2':
#                         request.session["nav"] = custommenu2(userObj.phase_type)
#                         return HttpResponseRedirect('/frontpage')
#                     else:
#                         request.session["nav"] = custommenu2(userObj.phase_type)
#                         return HttpResponseRedirect('/dash_home')
                    
#             else:
#                 #change 21-10
#                 if user.objects.filter(email=_email,is_active=False).exists():
#                     messages.error(request, 'Request is not accepted yet.')
#                 else:
#                     messages.error(request, 'Invalid Credentials')#till here 21-10
#                 #return HttpResponseRedirect('/rkvy_login')
#                 return render(request, "login.html")
#         print('hhhh')
#         return render(request, "login.html")

# def submenu2(menubar,sid,menuname2):
#     role=role_list  
#     menustr=""
#     sb=m2.custom_menu.objects.filter(role=role,parent_id=sid).all().order_by('m_id')
#     if len(sb)>0:   
#         menustr="<ul class='sub-menu'><li><a class='link_name' href='#'>"+menuname2+"</a></li>"
#         for menu in menubar: 
#             if menu.parent_id == sid :     
#                 if menustr is None:
#                     menustr=""   
#                 menustr+="<li><a href="+menu.url+">"+menu.menu+"</a></li>"
#                 pid=menu.m_id
#                 substr=submenu2(menubar,pid,menuname2)
#                 menustr+=substr 
#                 menustr+="</li>"      
#         menustr+="</ul>"
#     return menustr
 
# def custommenu2(phase_type): 
#     menustr=''
#     role=role_list
#     global menuname2
#     navmenu=m2.custom_menu.objects.filter(role=role).all().order_by('m_id')
#     for menu in navmenu: 
#         print(menu.menu)
#         if menu.parent_id == 0 :
#             if menustr is None:
#                 menustr=""
#             #menustr+="<li><div class='iocn-link'><a href="+menu.url+"><i class="+menu.icons+" ></i><span class='link_name'>"+menu.menu+"</span></a><i class='bx bxs-chevron-down arrow' ></i></div>"
#             menustr+="<li><div class='iocn-link'><a href="+menu.url+"><i class="+menu.icons+"></i><span class='link_name'>"+menu.menu+"</span></a><i class='bx bxs-chevron-down arrow' ></i></div>"            
#             pid=menu.m_id
#             sb1=m2.custom_menu.objects.filter(role=role,m_id=pid).values('menu')
#             menuname2 = sb1[0]['menu']
#             substr=submenu2(navmenu,pid,menuname2) 
#             menustr+=substr
#             menustr+="</li>" 
#         elif menu.parent_id == -1 :         
#             x="<li><a href="+menu.url+"><span class='link_name'>"+menu.menu+"</span></a><ul class='sub-menu blank'><li><a class='link_name' href="+menu.url+">"+menu.menu+"</a></li></ul></li>"
#             print("hjj: ",x)
#             if x is None:
#                 x=""
#             menustr+=x
#     menustr+="<li><div class='iocn-link'><a href='#'><i class='bx bx-log-out-circle' ></i><span class='link_name'>"+f_name+"</span></a><i class='bx bxs-chevron-down arrow' ></i></div><ul class='sub-menu'><li><a  href='/inspect_changePassword'>Change Password</a></li><li><a href='/inspect_logout'  onclick='logoutConfirm();'>Logout</a></li></ul></li>"
#     if phase_type=="3":
#         xindex = next((index for (index,d ) in enumerate(navmenu) if d["parent_id"] == -999), None)
#         menustr+="<li><div class='iocn-link'><a href="+navmenu[xindex].url+"><span class='link_name'>"+navmenu[xindex].menu+"</span></a><i class='bx bxs-chevron-down arrow' ></i></div>"
#     return menustr

# def custommenu(): 
#     menustr=""
#     role=role_list
#     global menuname
#     navmenu=m1.custom_menu.objects.filter(role=role).all().order_by('m_id')
#     for menu in navmenu: 
#         print(menu.menu)
#         if menu.perent_id == 0 :
#             menustr+="<li><div class='iocn-link'><a href="+menu.url+"><i class="+menu.icons+" ></i><span class='link_name'>"+menu.menu+"</span></a><i class='bx bxs-chevron-down arrow' ></i></div>"
#             pid=menu.m_id
#             sb1=m1.custom_menu.objects.filter(role=role,m_id=pid).values('menu')
#             menuname = sb1[0]['menu']
#             substr=submenu(navmenu,pid) 
#             menustr+=substr
#             menustr+="</li>" 
#         elif menu.perent_id == -1 :
#             menustr+="<li><a href="+menu.url+"><i class="+menu.icons+" ></i><span class='link_name'>"+menu.menu+"</span></a><ul class='sub-menu blank'><li><a class='link_name' href="+menu.url+">"+menu.menu+"</a></li></ul></li>"
#     menustr+="<li><div class='iocn-link'><a href='#'><i class='bx bx-log-out-circle' ></i><span class='link_name'>"+f_name+"</span></a><i class='bx bxs-chevron-down arrow' ></i></div><ul class='sub-menu'><li><a  href='/viewDetail'>View Profile</a></li><li><a  href='/inspect_changePassword'>Change Password</a></li><li><a href='/inspect_logout'  onclick='logoutConfirm();'>Logout</a></li></ul></li>"
#     return menustr

# def submenu(menubar,sid):
#     role=role_list  
#     menustr=""
#     sb=m1.custom_menu.objects.filter(role=role,perent_id=sid).all().order_by('m_id')
#     if len(sb)>0:   
#         menustr="<ul class='sub-menu'><li><a class='link_name' href='#'>"+menuname+"</a></li>"
#         for menu in menubar: 
#             if menu.perent_id == sid :        
#                 menustr+="<li><a href="+menu.url+">"+menu.menu+"</a></li>"
#                 pid=menu.m_id
#                 substr=submenu(menubar,pid)
#                 menustr+=substr 
#                 menustr+="</li>"      
#         menustr+="</ul>"
#     return menustr


def check(request):
    try:
        #print('111')
        username=request.POST.get('username')
        if user.objects.filter(username=username).exists() == True:
            status=1
        else:
            status=0
        #print(status)
        return JsonResponse({'status': status, })
    except Exception as e:
        try:
            m1.error_Table.objects.create(fun_name="check",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        #messages.error(request, 'Error : '+str(e))
        return render(request, "errorspage.html", {})


# def admin_inspection_form(request):
#     try:
#         import datetime
#         _now = datetime.datetime.now()
#         _year = _now.year
#         today = datetime.date.today().strftime("%d-%m-%Y")
#         rly=railwayLocationMaster.objects.filter(location_type='ZR').values('location_code')
#         div=railwayLocationMaster.objects.filter(location_type='DIV').values('location_code')
#         dept=departMast.objects.values('department_name')
#         listw=m1.empmast.objects.values('empname').order_by('empname').distinct()
    
        
#         context={
#             't':today,
#             'rly':rly,
#             'div':div, 
#             'dept':dept,
#             'listw':listw,
#             # 'listw1':listw1,
#         }
        
        
        
#         return render(request,"admin_inspection.html",context)
#     except Exception as e:
#         try:
#             m1.error_Table.objects.create(fun_name="admin_inspection_form",user_id=request.user,err_details=str(e))
#         except:
#             print("Internal Error!!!")
#         #messages.error(request, 'Error : '+str(e))
#         return render(request, "errorspage.html", {})



    

def admin_inspection_form(request):
    try:
        import datetime
        _now = datetime.datetime.now()
        _year = _now.year
        today = datetime.date.today().strftime("%d-%m-%Y")
        rly=models.railwayLocationMaster.objects.filter(location_type='ZR').values('location_code')
        div=models.railwayLocationMaster.objects.filter(location_type='DIV').values('location_code')
        dept=models.departMast.objects.values('department_name')
        listw=m1.empmast.objects.values('empname').order_by('empname').distinct()
        context={
            't':today,
            'rly':rly,
            'div':div, 
            'dept':dept,
            'listw':listw,
        }
        
        
        
        return render(request,"admin_inspection.html",context)
    except Exception as e:
        try:
            m1.error_Table.objects.create(fun_name="admin_inspection_form",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        #messages.error(request, 'Error : '+str(e))
        return render(request, "errorspage.html", {})


def getDesignation(request):
    try:
        if request.method == "GET" or request.is_ajax():
            dept_1=request.GET.get('dept_1')
            #print(dept_1,'_________++++++++++++________________')
            
            division=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(department=dept_1).values('designation'))
            l=[]
            for i in division:
                l.append(i['designation'])
            #print(l)    
            context={
                'division':l,
            } 
            return JsonResponse(context,safe = False)
        return JsonResponse({"success":False}, status = 400)
    
    except Exception as e:
        try:
            m1.error_Table.objects.create(fun_name="getDesignation",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        #messages.error(request, 'Error : '+str(e))
        return render(request, "errorspage.html", {})

#amisha140622    
def compliance_marked_forward(request):
    # try:
        if request.method == "GET" and request.is_ajax():
            item_no=json.loads(request.GET.get('item_no'))
            item_no=item_no.split(',')
            print(item_no)
            inspection_no=request.GET.get('inspection_no')
            forward_to=json.loads(request.GET.get('forward_to'))
            level=request.GET.get('level')
            print(level)
            cuser=request.user.username
            # cuser_id=models.Level_Desig.objects.exclude(delete_flag=True).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].designation_code
            if request.user.user_role == 'guest':
                cuser=request.user.guest_email
                request.user.email=request.user.guest_email
            cuser_id=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].designation_code
            officer_contact=[]
            officer_email=[]
            marked_officers_sms=[]
            # print(items)
            for items in item_no:
                # print(items)
                if level=='2':
                    marked_no=m1.Marked_Officers_forward.objects.filter(marked_to_forward_id=cuser_id,marked_no__item_no_id=items)[0].marked_no.marked_no
                    level=2
                    further_forward=m1.Marked_Officers_forward.objects.filter(marked_to_forward_id=cuser_id,marked_no__item_no_id=items)[0].marked_no_forward
                else:
                    marked_no=m1.Marked_Officers.objects.filter(marked_to_id=cuser_id,item_no_id=items)[0].marked_no
                    level=0
                    further_forward=None
                print(items,inspection_no,marked_no,cuser_id,forward_to,"apeksha")
                if forward_to:
                    for i in forward_to:
                        
                        marked_to_forward=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation=i)[0].designation_code
                        mark=int(m1.Marked_Officers_forward.objects.last().marked_no_forward)+1 if m1.Marked_Officers_forward.objects.last()!=None else 1
                        created_on=datetime.now()
                        m1.Marked_Officers_forward.objects.create(marked_no_forward=mark, marked_no_id=marked_no, marked_to_forward_id=marked_to_forward, created_on_forward=created_on, created_by_forward=cuser_id, status_flag=1,level=level,further_forward_id=further_forward)
                        # print(m1.Marked_Officers_forward.objects.values())
                        Desig=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation=i)
                        print(Desig,"aye!KYA BOLTI TU?",Desig[0].contactnumber)
                        if Desig:
                            Desig1=Desig[0].designation_code
                            if Desig[0].official_email_ID:
                                officer_email.append(Desig[0].official_email_ID)
                            if Desig[0].contactnumber:
                                if Desig[0].contactnumber not in officer_contact:
                                    marked_officers_sms.append({'contact':Desig[0].contactnumber,'designation':Desig[0].designation_code})
                                    officer_contact.append(Desig[0].contactnumber)
               
            if len(marked_officers_sms) > 0:
                    for mar in marked_officers_sms:
                        new_pending=m1.Marked_Officers_forward.objects.filter(marked_no__item_no__in=item_no,marked_to_forward_id=mar['designation']).values().count()
                        cum_pending=m1.Marked_Officers.objects.filter(marked_to_id=mar['designation'], status_flag=1).values().count()
                        for_pending=m1.Marked_Officers_forward.objects.filter(marked_to_forward_id=mar['designation'], status_flag=1).values().count()
                        total_pending=cum_pending+for_pending
                        note_no=m1.Inspection_details.objects.filter(inspection_no=inspection_no).values('inspection_note_no')[0]['inspection_note_no']
                        issue_date=date.today()
                        issue_date = datetime.strftime(issue_date,"%d/%m/%Y")
                        t=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=cuser_id).values('designation')
                        if len(t)!=0:
                            inspection_officer=t[0]['designation']
                            inspection_officer=inspection_officer[0:15]
                        else:
                            inspection_officer='NA'
                        note_no=note_no[0:30]
                        sendsms_insp(mar['contact'],new_pending,note_no,inspection_officer,total_pending)

            return JsonResponse({})
        
    # except Exception as e:
    #     try:
    #         m1.error_Table.objects.create(fun_name="compliance_marked_forward",user_id=request.user,err_details=str(e))
    #     except:
    #         print("Internal Error!!!")
    #     #messages.error(request, 'Error : '+str(e))
    #     return render(request, "errorspage.html", {})


# def compliance_forward(request,inspection_no):
#     try:
#         cuser=request.user
#         # desigid=models.Level_Desig.objects.exclude(delete_flag=True).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].designation_code
#         # desig_name=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=desigid)[0].designation
#         desigid=models.Level_Desig.objects.exclude(delete_flag=True).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user)).values()
#         details=m1.Inspection_details.objects.filter(inspection_no=inspection_no).values()

#         empfname=m1.empmast.objects.filter(empno=desigid[0]['empno_id'])[0].empname
#         empmname=m1.empmast.objects.filter(empno=desigid[0]['empno_id'])[0].empmname
#         emplname=m1.empmast.objects.filter(empno=desigid[0]['empno_id'])[0].emplname
#         if(empmname==None and emplname==None):
#             name=empfname
#         elif(empmname==None):
#             name=empfname + " " + emplname
#         elif(emplname==None):
#             name=empfname + " " + empmname   
#         else:
#             name=empfname + " " + empmname + " " + emplname

#         final_list=[]
#         list_item=m1.Item_details.objects.filter(inspection_no=inspection_no).values().distinct()
#         #print(list_item,'list_item')

#         for i in list_item:
#             list_mark=m1.Marked_Officers_forward.objects.filter(marked_no__marked_to=desigid[0]['designation_code'],marked_no__status_flag=1,marked_no__item_no=i['item_no'])
#             if(list_mark.exists()):
#                 temp={}
#                 temp['item_db']=i['item_no']
#                 temp['type']=i['type']
#                 temp['item_no']=i['des_id']
#                 temp['item_title']=i['item_title']
#                 temp['observation']=i['observation']
#                 temp['chk']='YES'
#                 temp['marked']=m1.Marked_Officers_forward.objects.filter(marked_no__marked_to=desigid[0]['designation_code'],marked_no__status_flag=1,marked_no__item_no=i['item_no']).values('marked_to_forward__designation','created_on_forward','status_flag').distinct('marked_no_forward')
#                 #print(temp['marked'],'123456789')
#             else:
#                 temp={}
#                 temp['chk']='NO'
#             final_list.append(temp)
#         #print(final_list,'12345')
#         pclevel=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=desigid[0]['designation_code']).values().order_by())
#         designation=models.Level_Desig.objects.exclude(delete_flag=True).exclude(Q(empno_id=None)).filter(pc7_levelmax__lte=pclevel[0]['pc7_levelmin']).distinct().values('designation').order_by('designation')
#         return render(request,"compliance_forward.html",{'inspection_no':inspection_no,'details':details,'desigid':desigid,'final_list':final_list,'name':name,'designation':designation})
#     except Exception as e:
#         try:
#             m1.error_Table.objects.create(fun_name="compliance_forward",user_id=request.user,err_details=str(e))
#         except:
#             print("Internal Error!!!")
#         #messages.error(request, 'Error : '+str(e))
#         return render(request, "errorspage.html", {})





def fetch_forward_reply(request):
    # try:
        #print('hi')
        item_no=json.loads(request.GET.get('item_no'))
        level=request.GET.get('level')
        inspection_no=m1.Item_details.objects.filter(item_no=item_no[0])[0].inspection_no_id
        des_items=[]
        cuser=request.user.username
        user_role=request.user.user_role
        
        if request.user.user_role == 'guest':
                cuser=request.user.guest_email
                request.user.email=request.user.guest_email
        cuser_desig_id=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].designation_code
        empno=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].empno_id

        desigid=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].designation_code
        rly_code=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].rly_unit.location_code
        rly_unit_code=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].rly_unit.rly_unit_code
        parent_loc=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].rly_unit.parent_location_code
        parent_loc_id=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].rly_unit.parent_rly_unit_code
        div_code=rly_code
        div_unit_code=rly_unit_code
        if parent_loc!='RB':
            div_code=rly_code
            rly_code=parent_loc
            # rly_unit_code=parent_loc_id
        pclevel=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=desigid).values().order_by())
        
        desig_name=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(~(Q(empno_id=None)|Q(designation_code=cuser_desig_id)|Q(delete_flag=True))).filter(pc7_levelmin__lte=pclevel[0]['pc7_levelmin'],rly_unit=rly_unit_code).distinct().values('designation').order_by('-pc7_levelmin'))
        
        final_list=[]
        move=0
      
        for items in item_no:
            marked_forward=[] 
            list1=[]
            item_list=[]
            item_list=item_no_details(inspection_no)

            if level == '2':
               if(m1.Marked_Officers.objects.filter(item_no_id=items).exists()): 
                   marked_no=list(m1.Marked_Officers.objects.filter(item_no_id=items).values_list('marked_no',flat=True))
                   if(m1.Marked_Officers_forward.objects.filter(marked_no_id__in=marked_no,created_by_forward=cuser_desig_id ).exists()):
                        marked_forward=m1.Marked_Officers_forward.objects.filter(marked_no_id__in=marked_no,created_by_forward=cuser_desig_id).values()
            else:
                if(m1.Marked_Officers.objects.filter(item_no_id=items,marked_to_id=cuser_desig_id).exists()):
                    marked_no=m1.Marked_Officers.objects.filter(item_no_id=items,marked_to_id=cuser_desig_id)[0].marked_no 
                    if(m1.Marked_Officers_forward.objects.filter(marked_no_id=marked_no).exists()):
                        marked_forward=m1.Marked_Officers_forward.objects.filter(marked_no_id=marked_no).values()

            

            for j in item_list:
                if(int(items)==j['item_test']):
                    item=j['count']

            for i in marked_forward:
                temp={}
                temp['recieved_on']=i['created_on_forward'].strftime("%d/%m/%y") if i['created_on_forward'] != None else 'NA'
                empno=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i['marked_to_forward_id'])[0].empno_id
                temp['designation']=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i['marked_to_forward_id'])[0].designation
                
                name=[]
                # print(empno)
                if empno:
                    empfname=m1.empmast.objects.filter(empno=empno)[0].empname
                    empmname=m1.empmast.objects.filter(empno=empno)[0].empmname
                    emplname=m1.empmast.objects.filter(empno=empno)[0].emplname
                    # print(empfname,empmname,emplname, type(empmname))
                    if(empmname==None and emplname==None):
                        name=empfname
                    elif(empmname==None):
                        name=empfname + " " + emplname
                    elif(emplname==None):
                        name=empfname + " " + empmname   
                    else:
                        name=empfname + " " + empmname + " " + emplname
                else:
                    name='NA'
                #print(name,'NAME-NAME')
                temp['des_id']=item
                temp['marked_to_forward']=str(name)
                temp['reply']=i['compliance_forward'] if i['compliance_forward'] != None else ''
                temp['compliance_recieved_on_forward']=i['reply_on'].strftime("%d/%m/%y") if i['reply_on'] != None else ''
                temp['marked_no_forward']=i['marked_no_forward']
                temp['status_flag']=i['status_flag']
                if i['status_flag'] == 2:
                    move=1

                if(m1.Officers_Remark.objects.filter(marked_no_forward_id=i['marked_no_forward'])):
                    if m1.Officers_Remark.objects.filter(marked_no_forward_id=i['marked_no_forward'])[0].remark!=None:
                        temp['remark']=m1.Officers_Remark.objects.filter(marked_no_forward_id=i['marked_no_forward'])[0].remark
                        daterej=m1.Officers_Remark.objects.filter(marked_no_forward_id=i['marked_no_forward'])[0].rejected_on.strftime("%d/%m/%y") 
                        temp['daterej']=daterej
                    else:
                        temp['remark']=''
                        temp['daterej']=''
                list1.append(temp)

            des_items.append(item)
            for l in list1:
                final_list.append(l)

            # print(desig_exclude)
        return JsonResponse({'div_code':div_code,'rly_code':rly_code,'list1':final_list,'item_no':item_no,'inspection_no':inspection_no,'desig':desig_name,'item':des_items,'user_role':user_role,'move':move}, safe = False)
    
    # except Exception as e:
    #     try:
    #         m1.error_Table.objects.create(fun_name="fetch_forward_reply",user_id=request.user,err_details=str(e))
    #     except:
    #         print("Internal Error!!!")
    #     #messages.error(request, 'Error : '+str(e))
    #     return render(request, "errorspage.html", {})



def item_no_details(insp_id):
    
    item_details1= list(m1.Item_details.objects.filter(inspection_no_id=insp_id).values())
    item_no_list=[]
    # count=1
    for j in item_details1:
        temp={}
        x=j['item_no']
        if m1.Marked_Officers.objects.filter(item_no_id=x).exists():
        # if j['type'] == 'SH':
            temp['count']=j['des_id']
            temp['item_test']=j['item_no']
            item_no_list.append(temp)
        # count=count+1
    return item_no_list






# def compliance_filterdata_ajax(request):
#     try:
#         if request.method == "GET" and request.is_ajax():
#             str=request.GET.get('str')
#             if(str=='filter'):
#                 rly_id=request.GET.get('rly_id')
#                 if(rly_id==""):
#                     list3=models.railwayLocationMaster.objects.filter(location_type='DIV').values('location_code')
#                 else:    
#                     list3=models.railwayLocationMaster.objects.filter(location_type='DIV',parent_location_code=rly_id).values('location_code')
#                 list4=[]
#                 for i in list3:
#                     list4.append(i['location_code'])   
#                 return JsonResponse({'div':list4})
            
#             cuser=request.user.username
#             desigid=models.Level_Desig.objects.exclude(delete_flag=True).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].designation_code
        
#         #data for reply modal    
#             if(str=='reply'):
#                 status=request.GET.get('status')
#                 item_no=0
#                 inspection_id=0
#                 list3=[]
#                 list4=[]
#                 list6=[]
#                 desiglist=[]
#             #gunjan
#                 if(request.GET.get('inspection_id')):
#                     inspection_id=request.GET.get('inspection_id')
#                     listdesig1=m1.Inspection_details.objects.filter(inspection_no=inspection_id).values('inspection_officer_id')
#                     listdesig=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=listdesig1).values('designation')
#                     listname1=m1.Inspection_details.objects.filter(inspection_no=inspection_id).values('modified_by')
#                     empfname=m1.empmast.objects.filter(empno__in=listname1)[0].empname
#                     empmname=m1.empmast.objects.filter(empno__in=listname1)[0].empmname
#                     emplname=m1.empmast.objects.filter(empno__in=listname1)[0].emplname
#                     if(empmname==None and emplname==None):
#                         listname=empfname
#                     elif(empmname==None):
#                         listname=empfname + " " + emplname
#                     elif(emplname==None):
#                         listname=empfname + " " + empmname   
#                     else:
#                         listname=empfname + " " + empmname + " " + emplname
#                     # print(listname,'rajputttttttttttttttttttttttt')
#                     list1=m1.Inspection_details.objects.filter(inspection_no=inspection_id).values()
#                     list5=[]
#                 # for pending/rejected reply and pending query
#                     if(status=='P'):
#                         list5=m1.Marked_Officers.objects.filter(item_no__inspection_no_id=inspection_id,marked_to_id=desigid,status_flag=1).values('item_no_id')
#                 # for send reply
#                     elif(status=='S'):
#                         list5=m1.Marked_Officers.objects.filter(item_no__inspection_no_id=inspection_id,marked_to_id=desigid,status_flag=2).values('item_no_id')
#                 # for accepted reply
#                     elif(status=='A'):
#                         list5=m1.Marked_Officers.objects.filter(item_no__inspection_no_id=inspection_id,marked_to_id=desigid,status_flag=3).values('item_no_id')
#                 # for rejected reply    
#                     elif(status=='R'):
#                         list5=m1.Marked_Officers.objects.filter(item_no__inspection_no_id=inspection_id,marked_to_id=desigid,status_flag=4).values('item_no_id')
#                 # for send query
#                     else:
#                         list5=m1.Marked_Officers.objects.filter(item_no__inspection_no_id=inspection_id,marked_to_id=desigid).values('item_no_id')
#                     for i in list5:
#                         list6.append(i['item_no_id'])
#                     list2=m1.Item_details.objects.filter(item_no__in=list6).values() 
#                     for i in list1:
#                         temp={}
#                         temp['inspection_no']=i['inspection_no']
#                         temp['inspection_note_no']=i['inspection_note_no'] if i['inspection_note_no']!=None else 'NA'
#                         temp['inspection_title']=i['inspection_title']
#                         temp['inspection_date']=i['inspected_on'].strftime("%d/%m/%y") if i['inspected_on']!=None else 'NA'
#                         temp['empname']=listname if listname!=None else 'NA'
#                         list3.append(temp)
#                     for i in listdesig:
#                         temp={}
#                         temp['designation']=i['designation'] if i['designation']!=None else 'NA'
#                         desiglist.append(temp)
                    
#                         # list4.append(temp)
#                     for i in list2:
#                         #print(i,'iiii')
#                         temp={} 
#                         temp['item_no']=i['item_no']
#                         if(i['type']=='H'):
#                             temp['type']=i['type']
#                             temp['item_title']=i['item_title']
#                         elif(i['type']=='SH'):
#                             temp['type']=i['type']
#                             temp['observation']=i['observation']
#                         item_list=[]
#                         item_list=item_no_details(inspection_id)
#                         for j in item_list:
#                             # print(j,'jjjjj')
#                             if(i['item_no']==j['item_test']):
#                                 temp['item']=j['count']
#                     # for rejected reply
#                         if(m1.Officers_Remark.objects.filter(marked_no__item_no=i['item_no'],marked_desig_id_id=desigid)):
#                             temp['reply_received']=m1.Officers_Remark.objects.filter(marked_no__item_no=i['item_no'],marked_desig_id_id=desigid)[0].reply_received
#                             temp['remark']=m1.Officers_Remark.objects.filter(marked_no__item_no=i['item_no'],marked_desig_id_id=desigid)[0].remark
#                             temp['rejected_on']=m1.Officers_Remark.objects.filter(marked_no__item_no=i['item_no'],marked_desig_id_id=desigid)[0].rejected_on.strftime("%d/%m/%y")
#                     # for reverted inspection
#                         if m1.Marked_Officers.objects.filter(item_no__inspection_no_id=inspection_id,marked_to_id=desigid,status_flag=4): 
#                             temp['revert']=m1.Marked_Officers.objects.filter(item_no__inspection_no_id=inspection_id,marked_to_id=desigid,status_flag=4)[0].revert
#                             reverted_on=m1.Marked_Officers.objects.filter(item_no__inspection_no_id=inspection_id,marked_to_id=desigid,status_flag=4)[0].reverted_on
#                             temp['reverted_on']=reverted_on.strftime("%d/%m/%y") if reverted_on!=None else 'NA'
#                         temp['compliance']=m1.Marked_Officers.objects.filter(item_no=i['item_no'],marked_to_id=desigid)[0].compliance
#                         reply_on=m1.Marked_Officers.objects.filter(item_no=i['item_no'],marked_to_id=desigid)[0].reply_on
#                         temp['reply_on']=reply_on.strftime("%d/%m/%y") if reply_on!=None else 'NA'
#                         list4.append(temp)  
#                     # print(list3,'__________________________list3')
#                     # print(list4,'__________________________________list4')
#                     # print(desiglist,'__________________________________________desiglist') 
#                     #print(list4,'list4')
#             # for item-wise revert option
#                 elif(request.GET.get('item_no')):
#                     item_no=request.GET.get('item_no')
#                     temp={}
#                     temp['item_no']=item_no
#                     temp['observation']=m1.Item_details.objects.filter(item_no=item_no)[0].observation
#                     # if m1.Marked_Officers.objects.filter(item_no=item_no,marked_to_id=desigid,status_flag=4): 
#                     #     temp['revert-modal']=m1.Marked_Officers.objects.filter(item_no=item_no,marked_to_id=desigid,status_flag=4)[0].revert
#                     #     reverted_on=m1.Marked_Officers.objects.filter(item_no=item_no,marked_to_id=desigid,status_flag=4)[0].reverted_on
#                     #     temp['reverted-on-modal']=reverted_on.strftime("%d/%m/%y") if reverted_on!=None else 'NA'
#                     list4.append(temp)  
#                 return JsonResponse({'idetails':list3,'itemdetails':list4,'desigdetails':desiglist,})
            
#             item_no=request.GET.get('item_no')
#             #print(item_no,'item_no')
#             compliance=request.GET.get('compliance')
#             #print(compliance,'compliance')
#             remarks=request.GET.get('remarks')
#             #print(remarks,'remarks')
        
#         #for saving merged forwarded reply
#             if(str=='save'):
#                 if(len(compliance)!=0):
#                     # reply_on=datetime.now()
#                     m1.Marked_Officers.objects.filter(item_no_id=item_no,marked_to_id=desigid).update(compliance=compliance,status_flag=1)
#                     inspection_no=m1.Item_details.objects.filter(item_no=item_no)[0].inspection_no_id
#                 else:
#                     bono=[]
#                     return JsonResponse(bono,safe=False)
#                 return JsonResponse({'insp_no':inspection_no})
#         #for saving revert reason    
#             elif(str=='revert'):
#                 if(len(remarks)!=0):
#                     # reply_on=datetime.now()
#                     m1.Marked_Officers.objects.filter(item_no_id=item_no,marked_to_id=desigid).update(revert=remarks,compliance=remarks,status_flag=4,reverted_on=datetime.now())
#                     inspection_no=m1.Item_details.objects.filter(item_no=item_no)[0].inspection_no_id
#                 else:
#                     bono=[]
#                     return JsonResponse(bono,safe=False)
#                 return JsonResponse({'insp_no':inspection_no})
#     except Exception as e:
#         try:
#             m1.error_Table.objects.create(fun_name="compliance_filterdata_ajax",user_id=request.user,err_details=str(e))
#         except:
#             print("Internal Error!!!")
#         #messages.error(request, 'Error : '+str(e))
#         return render(request, "errorspage.html", {})

# GUNJAN
def save_data(request):
    # try:
        if request.method == 'GET':
            str=request.GET.get('str')
            ins_id=request.GET.get('ins_id')
            desigid=models.Level_Desig.objects.exclude(delete_flag=True).filter(official_email_ID=request.user)[0].designation_code
        #for reply
            if str=="submit":
                item_no=m1.Marked_Officers.objects.filter(item_no__inspection_no_id=ins_id,marked_to_id=desigid).values('item_no')
                compliance=m1.Marked_Officers.objects.filter(item_no_id__in=item_no,marked_to_id=desigid,status_flag=1).values('compliance','item_no')
                count=len(compliance)
                count_test=0
                for i in compliance:
                    if(i['compliance']==None):
                        count_test=count_test+1
                        #print(count_test)
                        if(count==count_test):
                            bono=[]
                            return JsonResponse(bono, safe = False)
                # for i in compliance:
                    else:
                        reply_on=datetime.now()
                        m1.Marked_Officers.objects.filter(item_no_id=i['item_no'],marked_to_id=desigid).update(status_flag=3,reply_on=reply_on)
                        marks=list(m1.Marked_Officers.objects.filter(item_no_id=i['item_no'],marked_to_id=desigid,status_flag=3, target_flag=1).values_list('marked_no', flat=True))
                        m1.target_compliance.objects.filter(marked_no_id__in=marks).update(status_flag=0,reply_on=reply_on)
                        m1.Item_details.objects.filter(item_no=i['item_no']).update(status_flag=2)
                        m1.Inspection_details.objects.filter(inspection_no=ins_id).update(status_flag=2)

                        if m1.Marked_Officers.objects.filter(item_no_id=i['item_no']).exclude(status_flag=3).count() == 0:
                            m1.Item_details.objects.filter(item_no=i['item_no']).exclude(type='SSH').update(status_flag=4)

                        if m1.Item_details.objects.filter(inspection_no=ins_id).exclude(status_flag=4).count() == 0:
                            m1.Inspection_details.objects.filter(inspection_no=ins_id).update(status_flag=4)

        #for query
            if str=="submit-forward":
                item_no=m1.Marked_Officers.objects.filter(item_no__inspection_no_id=ins_id,status_flag=1).values('item_no')
                compliance_forward=m1.Marked_Officers_forward.objects.filter(marked_no__item_no_id__in=item_no,marked_to_forward_id=desigid).values('compliance_forward','marked_no_forward')
                count=len(compliance_forward)
                count_test=0
                for i in compliance_forward:
                    if(i['compliance_forward']==None):
                        count_test=count_test+1
                        #print(count_test)
                        if(count==count_test):
                            bono=[]
                            return JsonResponse(bono, safe = False)
                    else:
                        reply_on=datetime.now()
                        m1.Marked_Officers_forward.objects.filter(marked_no_forward=i['marked_no_forward'],marked_to_forward_id=desigid).update(status_flag=2,reply_on=reply_on)
        return JsonResponse({}, safe = False) 
    # except Exception as e:
    #     try:
    #         m1.error_Table.objects.create(fun_name="save_data",user_id=request.user,err_details=str(e))
    #     except:
    #         print("Internal Error!!!")
    #     #messages.error(request, 'Error : '+str(e))
    #     return render(request, "errorspage.html", {})



def compliance_alterdata(request):
    try:
        if request.method == "GET" and request.is_ajax():
            listgrid=[]
            count=1
            str=request.GET.get('str')
            cuser=request.user.username
            desigid=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].designation_code

            if str=='pending':
                inspect_details1=m1.Inspection_details.objects.filter(status_flag=1).values().order_by('-inspection_no')
                for i in inspect_details1:
                    if m1.Marked_Officers.objects.filter(item_no__inspection_no_id=i['inspection_no'],status_flag=1,marked_to_id=desigid):        
                        temp={}
                        temp['sr_no']=count
                        temp['inspection_no']=i['inspection_no']
                        temp['inspection_note_no']=i['inspection_note_no']
                        temp['inspection_title']=i['inspection_title']
                        t=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i['inspection_officer_id']).values('designation')
                        if len(t)!=0:
                            temp['inspection_officer']=t[0]['designation'] 
                        else:
                            temp['inspection_officer']='NA'
                        temp['inspected_on']=i['inspected_on'].strftime("%d/%m/%y") if i['inspected_on']!=None else 'NA'
                        t1=m1.Marked_Officers.objects.filter(item_no_id__inspection_no=i['inspection_no'],marked_to_id=desigid,status_flag=1).values('viewed_on')
                        temp['viewed_on']=t1[0]['viewed_on'].strftime("%d/%m/%y") if t1[0]['viewed_on']!=None else 'Pending'
                        temp['file_path']=i['report_path']
                        listgrid.append(temp)
                        count=count+1
            
            elif str=='revert':
                inspect_details1=m1.Inspection_details.objects.filter(status_flag=1).values().order_by('-inspection_no')
                for i in inspect_details1:
                    if m1.Marked_Officers.objects.filter(item_no_id__inspection_no=i['inspection_no'],marked_to_id=desigid,status_flag=4): 
                        temp={}
                        temp['sr_no']=count
                        temp['inspection_no']=i['inspection_no']
                        temp['inspection_note_no']=i['inspection_note_no']
                        temp['inspection_title']=i['inspection_title']
                        t=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i['inspection_officer_id']).values('designation')
                        if len(t)!=0:
                            temp['inspection_officer']=t[0]['designation'] 
                        else:
                            temp['inspection_officer']='NA'
                        temp['inspected_on']=i['inspected_on'].strftime("%d/%m/%y") if i['inspected_on']!=None else 'NA'
                        t1=m1.Marked_Officers.objects.filter(item_no_id__inspection_no=i['inspection_no'],marked_to_id=desigid,status_flag=4).values('reverted_on')
                        temp['reverted_on']=t1[0]['reverted_on'].strftime("%d/%m/%y") 
                        temp['file_path']=i['report_path']
                        listgrid.append(temp)
                        count=count+1
            
            elif str=='send':
                inspect_details1=m1.Inspection_details.objects.values().order_by('-inspection_no')
                for i in inspect_details1:
                    if m1.Marked_Officers.objects.filter(item_no_id__inspection_no=i['inspection_no'],status_flag=2,marked_to_id=desigid):        
                        temp={}
                        temp['sr_no']=count
                        temp['inspection_no']=i['inspection_no']
                        temp['inspection_note_no']=i['inspection_note_no']
                        temp['inspection_title']=i['inspection_title']
                        t=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i['inspection_officer_id']).values('designation')
                        if len(t)!=0:
                            temp['inspection_officer']=t[0]['designation'] 
                        else:
                            temp['inspection_officer']='NA'
                        temp['inspected_on']=i['inspected_on'].strftime("%d/%m/%y") if i['inspected_on']!=None else 'NA'
                        temp['file_path']=i['report_path']
                        listgrid.append(temp)
                        count=count+1
            
            elif str=='accept':
                inspect_details1=m1.Inspection_details.objects.values().order_by('-inspection_no')
                for i in inspect_details1:
                    if m1.Marked_Officers.objects.filter(item_no_id__inspection_no=i['inspection_no'],marked_to_id=desigid,status_flag=3):        
                        temp={}
                        temp['sr_no']=count
                        temp['inspection_no']=i['inspection_no']
                        temp['inspection_note_no']=i['inspection_note_no']
                        temp['inspection_title']=i['inspection_title']
                        t=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i['inspection_officer_id']).values('designation')
                        if len(t)!=0:
                            temp['inspection_officer']=t[0]['designation'] 
                        else:
                            temp['inspection_officer']='NA'
                        temp['inspected_on']=i['inspected_on'].strftime("%d/%m/%y") if i['inspected_on']!=None else 'NA'
                        temp['file_path']=i['report_path']
                        listgrid.append(temp)
                        count=count+1
            
            elif str=='reject':
                inspect_details1=m1.Inspection_details.objects.values().order_by('-inspection_no')
                for i in inspect_details1:
                    item=m1.Item_details.objects.filter(inspection_no_id=i['inspection_no']).values('item_no')
                    marked=m1.Marked_Officers.objects.filter(item_no_id__in=item,marked_to_id=desigid,status='R').values('marked_no')
                    #print(marked,'rejectreject')
                    if(len(marked)!=0):
                        # if m1.Officers_Remark.objects.filter(marked_no_id__in=marked,marked_to_reject_id=desigid):
                        if m1.Officers_Remark.objects.filter(marked_no_id__in=marked):
                            temp={}
                            temp['sr_no']=count
                            temp['inspection_no']=i['inspection_no']
                            temp['inspection_note_no']=i['inspection_note_no']
                            temp['inspection_title']=i['inspection_title']
                            t=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i['inspection_officer_id']).values('designation')
                            if len(t)!=0:
                                temp['inspection_officer']=t[0]['designation'] 
                            else:
                                temp['inspection_officer']='NA'
                            temp['inspected_on']=i['inspected_on'].strftime("%d/%m/%y") if i['inspected_on']!=None else 'NA'
                            temp['file_path']=i['report_path']
                            listgrid.append(temp)
                        count=count+1
            
            elif str=='query_pending':
                inspect_details1=m1.Inspection_details.objects.values().order_by('-inspection_no')
                for i in inspect_details1:
                    marked_no=m1.Marked_Officers_forward.objects.filter(marked_to_forward_id=desigid).values('marked_no_id')
                    #print(marked_no,'marked_no')
                    if m1.Marked_Officers.objects.filter(item_no__inspection_no_id=i['inspection_no'],marked_no__in=marked_no,status_flag=1):
                        item_no=m1.Marked_Officers.objects.filter(item_no__inspection_no_id=i['inspection_no'],marked_no__in=marked_no)[0].item_no_id
                        #print('abcabcabc')
                        if m1.Marked_Officers_forward.objects.filter(marked_no__item_no=item_no,status_flag=1,marked_to_forward_id=desigid) or m1.Marked_Officers_forward.objects.filter(marked_no__item_no=item_no,status_flag=3,marked_to_forward_id=desigid):  
                            #print('ENTERED')
                            temp={}
                            temp['sr_no']=count
                            temp['inspection_no']=i['inspection_no']
                            temp['inspection_note_no']=i['inspection_note_no']
                            temp['inspection_title']=i['inspection_title']
                            t=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i['inspection_officer_id']).values('designation')
                            if len(t)!=0:
                                temp['inspection_officer']=t[0]['designation'] 
                            else:
                                temp['inspection_officer']='NA'
                            temp['inspected_on']=i['inspected_on'].strftime("%d/%m/%y") if i['inspected_on']!=None else 'NA'
                            temp['file_path']=i['report_path']
                            temp['item_no']=item_no
                            listgrid.append(temp)
                            count=count+1
            
            elif str=='query_send':  
                inspect_details1=m1.Inspection_details.objects.values().order_by('-inspection_no')
                for i in inspect_details1:
                    if m1.Marked_Officers.objects.filter(item_no__inspection_no_id=i['inspection_no'],marked_no__in=marked_no):
                        item_no=m1.Marked_Officers.objects.filter(item_no__inspection_no_id=i['inspection_no'],marked_no__in=marked_no).values('item_no_id')
                        #print(item_no,'item_no')
                        for x in item_no:
                            if m1.Marked_Officers_forward.objects.filter(marked_no__item_no_id=x['item_no_id'],marked_to_forward_id=desigid,status_flag=2):  
                                #print('ENTERED2')
                                temp={}
                                temp['sr_no']=count
                                temp['inspection_no']=i['inspection_no']
                                temp['inspection_note_no']=i['inspection_note_no']
                                temp['inspection_title']=i['inspection_title']
                                t=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i['inspection_officer_id']).values('designation')
                                if len(t)!=0:
                                    temp['inspection_officer']=t[0]['designation'] 
                                else:
                                    temp['inspection_officer']='NA'
                                temp['inspected_on']=i['inspected_on'].strftime("%d/%m/%y") if i['inspected_on']!=None else 'NA'
                                temp['file_path']=i['report_path']
                                temp['item_no']=item_no
                                listgrid.append(temp)
                                count=count+1
            
            #print(listgrid,'-------------------------,reject')  
            list1=models.railwayLocationMaster.objects.filter(Q(location_type_desc='RAILWAY BOARD')|Q(location_type_desc='HEAD QUATER')|Q(location_type_desc='PRODUCTION UNIT')|Q(location_type_desc='OFFICE')).values('location_code').distinct().order_by('location_code')
            list2=[]
            for i in list1:
                list2.append(i['location_code'])
            list3=models.railwayLocationMaster.objects.filter(Q(location_type_desc='DIVISION')|Q(location_type_desc='WORKSHOP')|Q(location_type_desc='INSTITUTE')|Q(location_type_desc='STORE')|Q(location_type_desc='CONSTRUCTION')).distinct().values('location_code').order_by('location_code')
            list4=[]
            for i in list3:
                list4.append(i['location_code']) 
            list5=models.departMast.objects.all().distinct().values('department_name')
            list6=[]
            for i in list5:
                list6.append(i['department_name'])  
        return JsonResponse({'change_rly':list2,'change_div':list4,'change_dept':list6,'listgrid':listgrid,})
    except Exception as e:
        try:
            m1.error_Table.objects.create(fun_name="compliance_alterdata",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        #messages.error(request, 'Error : '+str(e))
        return render(request, "errorspage.html", {})

# def compliance_form(request):
#     # try:
#         daterangeselect=request.GET.get('data3')
#         listgrid=[]
#         count=1
#         if daterangeselect not in ['0-3','0-6','0-12','tofrom']:
#             inspect_details1=m1.Inspection_details.objects.filter(Q(status_flag=1)|Q(status_flag=2)|Q(status_flag=3)).values().order_by('-inspection_no')
#         else:
#             from dateutil.relativedelta import relativedelta
#             if daterangeselect=='0-3':
#                 now = datetime.today()
#                 six = now
#                 prev = now - relativedelta(months=3)
#                 prev = prev.date()
#             elif daterangeselect=='0-6':
#                 now = datetime.today()
#                 six = now
#                 prev = now - relativedelta(months=6)
#                 prev = prev.date()
#             elif daterangeselect=='0-12':
#                 now = datetime.today()
#                 six = now
#                 prev = now - relativedelta(months=12)
#                 prev = prev.date()
#             elif daterangeselect=='tofrom':
#                 daterange=request.GET.get('daterange')
#                 daterange1=daterange.split('-')
#                 date1=daterange1[0].split('/')
#                 date2=daterange1[1].split('/')
#                 prev='20'+date1[2].strip()+'-'+date1[1].strip()+'-'+date1[0].strip()
#                 six='20'+date2[2].strip()+'-'+date2[1].strip()+'-'+date2[0].strip()
#             inspect_details1=m1.Inspection_details.objects.filter((Q(status_flag=1)|Q(status_flag=2)|Q(status_flag=3)),inspected_on__gte=prev,inspected_on__lte=six).values().order_by('-inspection_no')
       
#         #print(inspect_details1,'01234')
#         cuser=request.user.username
#         # desigid=models.Level_Desig.objects.exclude(delete_flag=True).filter(official_email_ID=cuser)[0].designation_code
#         if request.user.user_role == 'guest':
#             cuser=request.user.guest_email
#             request.user.email=request.user.guest_email
#         desigid=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].designation_code
       




#         rly_code=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].rly_unit.location_code
#         rly_unit_code=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].rly_unit.rly_unit_code
#         parent_loc=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].rly_unit.parent_location_code
#         parent_loc_id=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].rly_unit.parent_rly_unit_code
#         div_code=rly_code
#         if parent_loc!='RB':
#             div_code=rly_code
#             rly_code=parent_loc
#             rly_unit_code=parent_loc_id

        
           


#         for i in inspect_details1:
#             # print(i,"apeksha_compliance")
#             if m1.Marked_Officers.objects.filter(item_no__inspection_no_id=i['inspection_no'],status_flag=1,marked_to_id=desigid):        
#                 temp={}
#                 temp['sr_no']=count
#                 temp['inspection_no']=i['inspection_no']
#                 temp['inspection_note_no']=i['inspection_note_no']
#                 temp['inspection_title']=i['inspection_title']
#                 t=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i['inspection_officer_id']).values('designation')
#                 if len(t)!=0:
#                     temp['inspection_officer']=t[0]['designation']
#                     temp['inspection_officer_id']=i['inspection_officer_id']
#                 else:
#                     temp['inspection_officer']='NA'
#                 temp['inspected_on']=i['inspected_on'].strftime("%d/%m/%y") if i['inspected_on']!=None else 'NA'
#                 t1=m1.Marked_Officers.objects.filter(item_no_id__inspection_no=i['inspection_no'],marked_to_id=desigid,status_flag=1).values('viewed_on')
#                 temp['viewed_on']=t1[0]['viewed_on'].strftime("%d/%m/%y") if t1[0]['viewed_on']!=None else 'Pending'
#                 temp['file_path']=i['report_path']


#                 total_items_marked = m1.Marked_Officers.objects.exclude(status_flag=4).filter(item_no__inspection_no_id=i['inspection_no'],marked_to_id=desigid).count()
#                 total_items_complied = m1.Marked_Officers.objects.filter(item_no__inspection_no_id=i['inspection_no'],marked_to_id=desigid, status_flag=3).count()
#                 total_items_pending = m1.Marked_Officers.objects.filter(item_no__inspection_no_id=i['inspection_no'],marked_to_id=desigid, status_flag=1).count()


#                 temp['total_items_marked']=total_items_marked
#                 temp['total_items_complied']=total_items_complied
#                 temp['total_items_pending']=total_items_pending
               


#                 locs = list(m1.Insp_multi_location.objects.filter(inspection_no=i['inspection_no']).values('item', 'type'))
#                 zne=[]
#                 dvs=[]
#                 for l in locs:
#                     if l['type']=='HQ':
#                         zne.append(l['item'])
#                     elif l['type']!='LOC':
#                         dvs.append(l['item'])
#                 temp['zone']=zne
#                 temp['div']=dvs
               
#                 # print(locs)
#                 listgrid.append(temp)
#                 count=count+1
           
#         # print(listgrid,'------------------------,pending')


#         for l in listgrid:
#             marked_of = m1.Marked_Officers.objects.filter(item_no__inspection_no_id=l['inspection_no'], status_flag=1, marked_to_id=desigid).values_list('marked_no', flat=True)
#             for_mark = m1.Marked_Officers_forward.objects.filter(marked_no__in=marked_of).values()
#             if for_mark:
#                 l.update({'for_flag':1})
#             else:
#                 l.update({'for_flag':0})
           
#             # total_for_mark=m1.Marked_Officers_forward.objects.filter(marked_no__in=marked_of).distinct('marked_no').count()
#             total_for_mark=m1.Marked_Officers_forward.objects.filter(marked_no__in=marked_of).count()
#             marked_forwards_reply=0
#             # total_forwarded = list(m1.Marked_Officers_forward.objects.filter(marked_no__in=marked_of).distinct('marked_no').values_list('marked_no', flat=True))
#             no_for_mark=m1.Marked_Officers_forward.objects.filter(marked_no__in=marked_of).distinct('marked_no').count()
#             marked_forwards_reply=0
#             # total_forwarded = list(m1.Marked_Officers_forward.objects.filter(marked_no__in=marked_of).distinct('marked_no').values_list('marked_no', flat=True))
#             total_forwarded = list(m1.Marked_Officers_forward.objects.filter(marked_no__in=marked_of).values_list('marked_no', flat=True))
#             for t in total_forwarded:
#                         marked_forwards = list(m1.Marked_Officers_forward.objects.filter(marked_no=t).values_list('marked_no_forward', flat=True))
#                         marked_forwards_pending=m1.Marked_Officers_forward.objects.filter(marked_no_forward__in=marked_forwards, status_flag__in=[1,3]).count()
#                         # if marked_forwards_pending==0:
#                         #     marked_forwards_reply+=1
#                         marked_forwards_reply=total_for_mark-marked_forwards_pending
#             l.update({'total_for_mark':total_for_mark,'marked_forwards_reply':marked_forwards_reply,'no_for_mark':no_for_mark})
           
       
#         list1=models.railwayLocationMaster.objects.filter(location_type_desc__in=['RAILWAY BOARD', 'PRODUCTION UNIT', 'HEAD QUATER', 'PSU', 'INSTITUTE']).values('location_code').distinct().order_by('location_code')
#         list2=[]
#         for i in list1:
#             # print(i['location_code'],'_________')
#             list2.append(i['location_code'])
#         list3=models.railwayLocationMaster.objects.filter(location_type_desc__in=['DIVISION','WORKSHOP', 'STORE', 'CONSTRUCTION', 'OFFICE'],parent_rly_unit_code= rly_unit_code).distinct().values('location_code', 'location_type').order_by('location_code')
#         list4=[]
#         for i in list3:
#             list4.append({'location_code': i['location_code'], 'location_type': i['location_type']})  
#         list5=models.departMast.objects.all().values('department_name').distinct().order_by('department_name')
#         list6=[]
#         for i in list5:
#             # print(i['department_name'],'_________')
#             list6.append(i['department_name'])
#         pclevel=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=desigid).values().order_by())


#         designation=models.Level_Desig.objects.exclude(delete_flag=True).exclude(Q(empno_id=None)|Q(designation_code=desigid)|Q(delete_flag=True)).filter(pc7_levelmin__lte=pclevel[0]['pc7_levelmin'],rly_unit=rly_unit_code).distinct().values('designation').order_by('-pc7_levelmin')
#         # print(designation)
#         officr=[]
#         for l in listgrid:
#             # print(l,'apeksha')
#             if l['inspection_officer'] not in officr:
#                 officr.append(l['inspection_officer'])
#         # print(rly_code,'CUSER, DESIGID',list2)


#         #PHASE 2
#         counter=len(listgrid)
#         phase2 = list(m2.einsp_marked.objects.exclude(revert=2).filter(marked_to_id=desigid,eitemid__einspno__status=1).values('eitemid__einspno__inspected_on','eitemid_id','created_on','status_flag','created_by','id','compliance','marked_to_id','marked_emp_id','designation_by','target_date','revert','designation','id','eitemid__einspno','eitemid__einspno__inspection_title','eitemid__einspno__rly_id_id__location_code','eitemid__einspno__div_id_id__location_code','eitemid__einspno__inspection_note_no','eitemid__einspno__designation__designation').distinct('eitemid__einspno'))
#         phase2_pending=[]
#         # print(phase2)
#         for p in phase2:
            
#             p['total_marked']=m2.einsp_marked.objects.exclude(revert=2).filter(eitemid__einspno=p['eitemid__einspno'],marked_to_id=desigid).count()
#             p['total_complied']=m2.einsp_marked.objects.exclude(revert=2).filter(eitemid__einspno=p['eitemid__einspno'],marked_to_id=desigid,status_flag=4).count()
#             p['total_forward']=m2.einsp_marked.objects.exclude(revert=2).filter(eitemid__einspno=p['eitemid__einspno'],marked_to_id=desigid,status_flag=3).count()
#             p['total_pending']=m2.einsp_marked.objects.exclude(revert=2).filter(eitemid__einspno=p['eitemid__einspno'],marked_to_id=desigid,status_flag__in=[0,1,2,3]).count()
#             all_ids=m2.einsp_marked.objects.filter(eitemid__einspno=p['eitemid__einspno']).values_list('id', flat=True)
#             if m2.einsp_forward_marked.objects.filter(marked_no__in=all_ids,further_forward=None).exists():
#                 p['marked_forwards_reply']= m2.einsp_forward_marked.objects.filter(marked_no__in=all_ids,further_forward=None,status_flag=2).count()
#                 p['total_for_mark']= m2.einsp_forward_marked.objects.filter(marked_no__in=all_ids,further_forward=None).count()
#                 p['for_flag']=1
#             else:
#                 p['for_flag']=0
#             if p['total_pending'] != 0:
#                 counter+=1
#                 p['sr_no']=counter
#                 phase2_pending.append(p)
#             if p['eitemid__einspno__designation__designation'] not in officr:
#                 officr.append(p['eitemid__einspno__designation__designation'])
#             # print(p['for_flag'],p['id'])
            





#         context={
#             'zone':list2 ,
#             'division':list4,
#             'dept':list6,
#             'listgrid':listgrid,
#             'desig':designation,
#             'designation':designation,
#             'officr':officr,
#             'rly_code':rly_code,
#             'div_code':div_code,
#             'phase2_pending':phase2_pending,
#         }
#         # print(list4,div_code)
#         # print(officr,'_____________',)
#         return render(request,'compliance_form.html',context)
#     # except Exception as e:
#     #     try:
#     #         m1.error_Table.objects.create(fun_name="compliance_form",user_id=request.user,err_details=str(e))
#     #     except:
#     #         print("Internal Error!!!")
#     #     #messages.error(request, 'Error : '+str(e))
#     #     return render(request, "errorspage.html", {})
    

   

def compliance_form_send(request):
    try:
        #print('compliance-form-send')
        listgrid=[]
        count=1
        inspect_details1=m1.Inspection_details.objects.values().order_by('-inspection_no')
        #print(inspect_details1,'01234')
        cuser=request.user.username
        # desigid=models.Level_Desig.objects.exclude(delete_flag=True).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].designation_code
        if request.user.user_role == 'guest':
            cuser=request.user.guest_email
            request.user.email=request.user.guest_email
        desigid=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].designation_code
        #print(cuser,desigid,'CUSER, DESIGID')
        for i in inspect_details1:
            if m1.Marked_Officers.objects.filter(item_no_id__inspection_no=i['inspection_no'],status_flag=2,marked_to_id=desigid):        
                temp={}
                temp['sr_no']=count
                temp['inspection_no']=i['inspection_no']
                temp['inspection_note_no']=i['inspection_note_no']
                temp['inspection_title']=i['inspection_title']
                t=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i['inspection_officer_id']).values('designation')
                if len(t)!=0:
                    temp['inspection_officer']=t[0]['designation'] 
                else:
                    temp['inspection_officer']='NA'
                temp['inspected_on']=i['inspected_on'].strftime("%d/%m/%y") if i['inspected_on']!=None else 'NA'
                temp['file_path']=i['report_path']
                listgrid.append(temp)
                count=count+1
        #print(listgrid,'-------------------------,send')
        list1=models.railwayLocationMaster.objects.filter(location_type_desc__in=['RAILWAY BOARD', 'PRODUCTION UNIT', 'HEAD QUATER', 'PSU', 'INSTITUTE']).values('location_code').distinct().order_by('location_code')
        list2=[]
        for i in list1:
            # print(i['location_code'],'_________')
            list2.append(i['location_code'])
        list3=models.railwayLocationMaster.objects.filter(location_type_desc__in=['DIVISION','WORKSHOP', 'STORE', 'CONSTRUCTION', 'OFFICE']).distinct().values('location_code', 'location_type').order_by('location_code')
        list4=[]
        for i in list3:
            list4.append({'location_code': i['location_code'], 'location_type': i['location_type']})  
        list5=models.departMast.objects.all().distinct().values('department_name').order_by('department_name')
        list6=[]
        for i in list5:
            # print(i['department_name'],'_________')
            list6.append(i['department_name'])        
        context={
            'zone':list2 ,
            'division':list4,
            'dept':list6,
            'listgrid':listgrid,
            # 'list_desig':list_desig,
        }
        #print(list2,'_____________')
        return render(request,'compliance_form_send.html',context)
    except Exception as e:
        try:
            m1.error_Table.objects.create(fun_name="compliance_form_send",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        #messages.error(request, 'Error : '+str(e))
        return render(request, "errorspage.html", {})




# def compliance_form_revert(request):
#     try:
#         #print('compliance-form-revert')
#         listgrid=[]
#         count=1
#         inspect_details1=m1.Inspection_details.objects.filter(status_flag=1).values().order_by('-inspection_no')
#         #print(inspect_details1,'0123401234')
#         cuser=request.user.username
#         desigid=models.Level_Desig.objects.exclude(delete_flag=True).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].designation_code
#         #print(cuser,desigid,'CUSER, DESIGID')
#         for i in inspect_details1:
#             if m1.Marked_Officers.objects.filter(item_no_id__inspection_no=i['inspection_no'],marked_to_id=desigid,status_flag=4): 
#                 temp={}
#                 temp['sr_no']=count
#                 temp['inspection_no']=i['inspection_no']
#                 temp['inspection_note_no']=i['inspection_note_no']
#                 temp['inspection_title']=i['inspection_title']
#                 t=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i['inspection_officer_id']).values('designation')
#                 if len(t)!=0:
#                     temp['inspection_officer']=t[0]['designation'] 
#                 else:
#                     temp['inspection_officer']='NA'
#                 temp['inspected_on']=i['inspected_on'].strftime("%d/%m/%y") if i['inspected_on']!=None else 'NA'
#                 t1=m1.Marked_Officers.objects.filter(item_no_id__inspection_no=i['inspection_no'],marked_to_id=desigid,status_flag=4).values('reverted_on')
#                 temp['reverted_on']=t1[0]['reverted_on'].strftime("%d/%m/%y") 
#                 temp['file_path']=i['report_path']
#                 listgrid.append(temp)
#             count=count+1
#         list1=models.railwayLocationMaster.objects.filter(location_type_desc__in=['RAILWAY BOARD', 'PRODUCTION UNIT', 'HEAD QUATER', 'PSU', 'INSTITUTE']).values('location_code').distinct().order_by('location_code')
#         list2=[]
#         for i in list1:
#             # print(i['location_code'],'_________')
#             list2.append(i['location_code'])
#         list3=models.railwayLocationMaster.objects.filter(location_type_desc__in=['DIVISION','WORKSHOP', 'STORE', 'CONSTRUCTION', 'OFFICE']).distinct().values('location_code').order_by('location_code')
#         list4=[]
#         for i in list3:
#             # print(i['location_code'],'_________')
#             list4.append(i['location_code'])    
#         list5=models.departMast.objects.all().distinct().values('department_name').order_by('department_name')
#         list6=[]
#         for i in list5:
#             # print(i['department_name'],'_________')
#             list6.append(i['department_name'])        
#         context={
#             'zone':list2 ,
#             'division':list4,
#             'dept':list6,
#             'listgrid':listgrid,
#         }
#         #print(list2,'_____________')
#         return render(request,'compliance_form_revert.html',context)        
#     except Exception as e:
#         try:
#             m1.error_Table.objects.create(fun_name="compliance_form_revert",user_id=request.user,err_details=str(e))
#         except:
#             print("Internal Error!!!")
#         #messages.error(request, 'Error : '+str(e))
#         return render(request, "errorspage.html", {})  


# def compliance_form_revert(request):
#     try:
#         #print('compliance-form-revert')
#         listgrid=[]
#         count=1
#         # inspect_details1=m1.Inspection_details.objects.filter().values().order_by('-inspection_no')
#         # print(inspect_details1,'0123401234')
#         cuser=request.user.username
#         desigid=models.Level_Desig.objects.exclude(delete_flag=True).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].designation_code
#         # print(cuser,desigid,'CUSER, DESIGID')
#         inspect_details1=m1.Marked_Officers.objects.filter(~Q(item_no__inspection_no__status_flag=0),marked_to_id=desigid,status_flag=4).values('item_no__inspection_no__inspection_no','item_no__inspection_no__inspection_note_no','item_no__inspection_no__inspection_title','item_no__inspection_no__inspection_officer_id','item_no__inspection_no__inspected_on','item_no__inspection_no__report_path').distinct('item_no__inspection_no__inspection_no')
#         print(inspect_details1)
#         for i in inspect_details1:
#             if m1.Marked_Officers.objects.filter(item_no_id__inspection_no=i['item_no__inspection_no__inspection_no'],marked_to_id=desigid,status_flag=4).exists(): 
#                 # print(cuser,desigid,'CUSER, DESIGID')
#                 temp={}
#                 temp['sr_no']=count
#                 temp['inspection_no']=i['item_no__inspection_no__inspection_no']
#                 temp['inspection_note_no']=i['item_no__inspection_no__inspection_note_no']
#                 temp['inspection_title']=i['item_no__inspection_no__inspection_title']
#                 t=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i['item_no__inspection_no__inspection_officer_id']).values('designation')
#                 if len(t)!=0:
#                     temp['inspection_officer']=t[0]['designation'] 
#                 else:
#                     temp['inspection_officer']='NA'
#                 temp['inspected_on']=i['item_no__inspection_no__inspected_on'].strftime("%d/%m/%y") if i['item_no__inspection_no__inspected_on']!=None else 'NA'
#                 t1=m1.Marked_Officers.objects.filter(item_no_id__inspection_no=i['item_no__inspection_no__inspection_no'],marked_to_id=desigid,status_flag=4).values('reverted_on')
#                 temp['reverted_on']=t1[0]['reverted_on'].strftime("%d/%m/%y") 
#                 temp['file_path']=i['item_no__inspection_no__report_path']
#                 listgrid.append(temp)
#             else:
#                 print("under elseeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee")
#             count=count+1
            
#         list1=models.railwayLocationMaster.objects.filter(location_type_desc__in=['RAILWAY BOARD', 'PRODUCTION UNIT', 'HEAD QUATER', 'PSU', 'INSTITUTE']).values('location_code').distinct().order_by('location_code')
#         list2=[]
#         for i in list1:
#             # print(i['location_code'],'_________')
#             list2.append(i['location_code'])
#         list3=models.railwayLocationMaster.objects.filter(location_type_desc__in=['DIVISION','WORKSHOP', 'STORE', 'CONSTRUCTION', 'OFFICE']).distinct().values('location_code').order_by('location_code')
#         list4=[]
#         for i in list3:
#             # print(i['location_code'],'_________')
#             list4.append(i['location_code'])    
#         list5=models.departMast.objects.all().distinct().values('department_name').order_by('department_name')
#         list6=[]
#         for i in list5:
#             # print(i['department_name'],'_________')
#             list6.append(i['department_name'])        
#         context={
#             'zone':list2 ,
#             'division':list4,
#             'dept':list6,
#             'listgrid':listgrid,
#         }
#         print(listgrid,'_____________$#$%##$%^#$%^$%^$@%^$%^@$%^$#^$#^%$#&^@&^#@%^@$#^$^%#$^@%#$^@%#$^@$#*$@#*%@$#%^*$@#^%$')
#         return render(request,'compliance_form_revert.html',context)        
#     except Exception as e:
#         try:
#             m1.error_Table.objects.create(fun_name="compliance_form_revert",user_id=request.user,err_details=str(e))
#         except:
#             print("Internal Error!!!")
#         #messages.error(request, 'Error : '+str(e))
#         return render(request, "errorspage.html", {})  






def compliance_query(request):
    try:
        
        listgrid=[]
        count=1
        
        
        cuser=request.user.username
        # desigid=models.Level_Desig.objects.exclude(delete_flag=True).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].designation_code
        if request.user.user_role == 'guest':
            cuser=request.user.guest_email
            request.user.email=request.user.guest_email
        desigid=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].designation_code
        
        marked_no=list(m1.Marked_Officers_forward.objects.filter(marked_to_forward_id=desigid, status_flag__in=[1,3]).values_list('marked_no_id',flat=True))
        print(marked_no)
        forward=list(m1.Marked_Officers_forward.objects.filter(marked_to_forward_id=desigid, status_flag__in=[1,3],marked_no__status_flag=1).values_list('created_by_forward',flat=True).distinct('created_by_forward'))
        # 
        forwarded_by=[]
        for f in forward:
            t=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=f).values('designation')
            if len(t)!=0:
                x={'designation_code':f,'designation':t[0]['designation'] }
                if x not in forwarded_by:
                    forwarded_by.append(x)

        item_no=list(m1.Marked_Officers.objects.filter(marked_no__in=marked_no,status_flag=1).values_list('item_no_id', flat=True))
        # 
        insp_no=list(m1.Item_details.objects.filter(item_no__in=item_no).distinct('inspection_no_id').values_list('inspection_no_id', flat=True))
        inspect_details1=m1.Inspection_details.objects.filter(inspection_no__in=insp_no).values().order_by('-inspection_no')

        
        for i in inspect_details1:  
                        temp={}
                        temp['sr_no']=count
                        temp['inspection_no']=i['inspection_no']
                        temp['inspection_note_no']=i['inspection_note_no']
                        temp['inspection_title']=i['inspection_title']
                        t=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i['inspection_officer_id']).values('designation')
                        if len(t)!=0:
                            temp['inspection_officer']=t[0]['designation'] 
                           
                        else:
                            temp['inspection_officer']='NA'
                        temp['inspected_on']=i['inspected_on'].strftime("%d/%m/%y") if i['inspected_on']!=None else 'NA'
                        temp['file_path']=i['report_path']
                        temp['item_no']=item_no
                        
                        locs = list(m1.Insp_multi_location.objects.filter(inspection_no=i['inspection_no']).values('item', 'type'))
                        zne=[]
                        dvs=[]
                        for l in locs:
                            if l['type']=='HQ':
                                zne.append(l['item'])
                            elif l['type']!='LOC':
                                dvs.append(l['item'])
                        temp['zone']=zne
                        temp['div']=dvs

                        
                        
                        listgrid.append(temp)
                        count=count+1
        #print(listgrid,'-------------------------,pending')
        list1=models.railwayLocationMaster.objects.filter(location_type_desc__in=['RAILWAY BOARD', 'PRODUCTION UNIT', 'HEAD QUATER', 'PSU', 'INSTITUTE']).values('location_code').distinct().order_by('location_code')
        list2=[]
        for i in list1:
            # print(i['location_code'],'_________')
            list2.append(i['location_code'])
        list3=models.railwayLocationMaster.objects.filter(location_type_desc__in=['DIVISION','WORKSHOP', 'STORE', 'CONSTRUCTION', 'OFFICE']).distinct().values('location_code', 'location_type').order_by('location_code')
        list4=[]
        for i in list3:
            list4.append({'location_code': i['location_code'], 'location_type': i['location_type']}) 
        list5=models.departMast.objects.all().distinct().values('department_name').order_by('department_name')
        list6=[]
        for i in list5:
            # print(i['department_name'],'_________')
            list6.append(i['department_name'])   

        #PHASE 2
        counter=len(listgrid)
        phase2 = list(m2.einsp_forward_marked.objects.filter(forwardTo_id=desigid,status_flag__in=[0,1,3]).values('marked_no__eitemid__einspno__inspected_on','marked_no__eitemid_id','created_date','status_flag','created_by','forwardId','compliance','forwardBy__designation_code','designationBy','marked_no__eitemid__einspno','marked_no__eitemid__einspno__inspection_title','marked_no__eitemid__einspno__rly_id_id__location_code','marked_no__eitemid__einspno__div_id_id__location_code','marked_no__eitemid__einspno__inspection_note_no','marked_no__eitemid__einspno__designation__designation').distinct('marked_no__eitemid__einspno'))
        for p in phase2:
            counter+=1
            p['sr_no']=counter
            x={'designation_code':p['forwardBy__designation_code'],'designation':p['designationBy'] }
            if x not in forwarded_by:
                forwarded_by.append(x)



        context={
            'zone':list2 ,
            'division':list4,
            'dept':list6,
            'listgrid':listgrid,
            'forwarded_by':forwarded_by,
            'phase2':phase2
        }
        #print(list2,'_____________')
        return render(request,'compliance_query.html',context)
    except Exception as e:
        try:
            m1.error_Table.objects.create(fun_name="compliance_query",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        #messages.error(request, 'Error : '+str(e))
        return render(request, "errorspage.html", {})  
def compliance_query_send(request):
    try:
        
        listgrid=[]
        count=1
        
        cuser=request.user.username
        # desigid=models.Level_Desig.objects.exclude(delete_flag=True).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].designation_code
        if request.user.user_role == 'guest':
            cuser=request.user.guest_email
            request.user.email=request.user.guest_email
        desigid=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].designation_code
        
        marked_no=list(m1.Marked_Officers_forward.objects.filter(marked_to_forward_id=desigid, status_flag=2).values_list('marked_no_id',flat=True))
        forward=list(m1.Marked_Officers_forward.objects.filter(marked_to_forward_id=desigid, status_flag__in=[1,3],marked_no__status_flag=1).values_list('created_by_forward',flat=True).distinct('created_by_forward'))
        forwarded_by=[]
        for f in forward:
            t=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=f).values('designation')
            if len(t)!=0:
                x={'designation_code':f,'designation':t[0]['designation'] }
                if x not in forwarded_by:
                    forwarded_by.append(x)
        item_no=list(m1.Marked_Officers.objects.filter(marked_no__in=marked_no).values_list('item_no_id', flat=True))
        insp_no=list(m1.Item_details.objects.filter(item_no__in=item_no).distinct('inspection_no_id').values_list('inspection_no_id', flat=True))
        inspect_details1=m1.Inspection_details.objects.filter(inspection_no__in=insp_no).values().order_by('-inspection_no')

        
        for i in inspect_details1:  
                        temp={}
                        temp['sr_no']=count
                        temp['inspection_no']=i['inspection_no']
                        temp['inspection_note_no']=i['inspection_note_no']
                        temp['inspection_title']=i['inspection_title']
                        t=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i['inspection_officer_id']).values('designation')
                        if len(t)!=0:
                            temp['inspection_officer']=t[0]['designation'] 
                        else:
                            temp['inspection_officer']='NA'
                        temp['inspected_on']=i['inspected_on'].strftime("%d/%m/%y") if i['inspected_on']!=None else 'NA'
                        temp['file_path']=i['report_path']
                        temp['item_no']=item_no

                        locs = list(m1.Insp_multi_location.objects.filter(inspection_no=i['inspection_no']).values('item', 'type'))
                        zne=[]
                        dvs=[]
                        for l in locs:
                            if l['type']=='HQ':
                                zne.append(l['item'])
                            elif l['type']!='LOC':
                                dvs.append(l['item'])
                        temp['zone']=zne
                        temp['div']=dvs

                        
                        
                        listgrid.append(temp)
                        count=count+1
        #print(listgrid,'-------------------------,pending')
        list1=models.railwayLocationMaster.objects.filter(location_type_desc__in=['RAILWAY BOARD', 'PRODUCTION UNIT', 'HEAD QUATER', 'PSU', 'INSTITUTE']).values('location_code').distinct().order_by('location_code')
        list2=[]
        for i in list1:
            # print(i['location_code'],'_________')
            list2.append(i['location_code'])
        list3=models.railwayLocationMaster.objects.filter(location_type_desc__in=['DIVISION','WORKSHOP', 'STORE', 'CONSTRUCTION', 'OFFICE']).distinct().values('location_code').order_by('location_code')
        list4=[]
        for i in list3:
            # print(i['location_code'],'_________')
            list4.append(i['location_code'])  
        list5=models.departMast.objects.all().distinct().values('department_name').order_by('department_name')
        list6=[]
        for i in list5:
            # print(i['department_name'],'_________')
            list6.append(i['department_name']) 

        counter=len(listgrid)
        phase2 = list(m2.einsp_forward_marked.objects.filter(forwardTo_id=desigid,status_flag__in=[2]).values('marked_no__eitemid__einspno__inspected_on','marked_no__eitemid_id','created_date','status_flag','created_by','forwardId','compliance','forwardBy__designation_code','designationBy','marked_no__eitemid__einspno','marked_no__eitemid__einspno__inspection_title','marked_no__eitemid__einspno__rly_id_id__location_code','marked_no__eitemid__einspno__div_id_id__location_code','marked_no__eitemid__einspno__inspection_note_no','marked_no__eitemid__einspno__designation__designation').distinct('marked_no__eitemid__einspno'))
        for p in phase2:
            counter+=1
            p['sr_no']=counter
            x={'designation_code':p['forwardBy__designation_code'],'designation':p['designationBy'] }
            if x not in forwarded_by:
                forwarded_by.append(x)     

        context={
            'zone':list2 ,
            'division':list4,
            'dept':list6,
            'listgrid':listgrid,
            'forwarded_by':forwarded_by,
            'phase2':phase2
        }
        #print(list2,'_____________')
        return render(request,'compliance_query_send.html',context)
    except Exception as e:
        try:
            m1.error_Table.objects.create(fun_name="compliance_query_send",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        #messages.error(request, 'Error : '+str(e))
        return render(request, "errorspage.html", {})  



# def compliance_filterdata_ajax1(request):
#     try:
#         if request.method == "GET" and request.is_ajax():
#             str=request.GET.get('str')
            
#             if(str=='filter'):
#                 #print('b')
#                 rly_id=request.GET.get('rly_id')
#                 #print(rly_id,'1111')
#                 if(rly_id==""):
#                     list3=models.railwayLocationMaster.objects.filter(location_type_desc__in=['RAILWAY BOARD', 'PRODUCTION UNIT', 'HEAD QUATER','OFFICE', 'PSU', 'PRODUCTION UNIT', 'INSTITUTE']).values('location_code').order_by('location_code')
#                 else:    
#                     list3=models.railwayLocationMaster.objects.filter(location_type_desc__in=['DIVISION','WORKSHOP']).values('location_code').order_by('location_code')
#                 list4=[]
#                 for i in list3:
#                     list4.append(i['location_code'])    
#                 #print(list4,'2222')
#                 return JsonResponse({'div':list4})
            
#             cuser=request.user.username
#             desigid=models.Level_Desig.objects.exclude(delete_flag=True).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].designation_code
#             print(cuser,desigid,'CUSER, DESIGID')
            
#             if(str=='reply'):
#                 status=request.GET.get('status')
#                 inspection_id=request.GET.get('inspection_id')
#                 listdesig1=m1.Inspection_details.objects.filter(inspection_no=inspection_id).values('inspection_officer_id')
#                 listdesig=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=listdesig1).values('designation')
#                 listname1=m1.Inspection_details.objects.filter(inspection_no=inspection_id).values('modified_by')
#                 empfname=m1.empmast.objects.filter(empno__in=listname1)[0].empname
#                 empmname=m1.empmast.objects.filter(empno__in=listname1)[0].empmname
#                 emplname=m1.empmast.objects.filter(empno__in=listname1)[0].emplname
#                 if(empmname==None and emplname==None):
#                     listname=empfname
#                 elif(empmname==None):
#                     listname=empfname + " " + emplname
#                 elif(emplname==None):
#                     listname=empfname + " " + empmname   
#                 else:
#                     listname=empfname + " " + empmname + " " + emplname
#                 print(listname,'rajputttttttttttttttttttttttt')
#                 list1=m1.Inspection_details.objects.filter(inspection_no=inspection_id).values()
#                 listf=m1.Marked_Officers_forward.objects.filter(marked_to_forward_id=desigid).values('marked_no_id')
#                 print(listf,'listf')
#                 list5=[]
#                 list3=[]
#                 list4=[]
#                 listremark=[]
#                 listdate=[]
#                 desiglist=[]
            
#             # pending query
#                 if (status=='P'):
#                     print('PENDING LIST')
#                     list5=m1.Marked_Officers.objects.filter(item_no__inspection_no_id=inspection_id,marked_no__in=listf,status_flag=1).values('item_no_id')
#                     print(list5,'PLIST5')
#                     list6=[]
#                     for i in list5:
#                         list6.append(i['item_no_id'])
#                     list2=m1.Item_details.objects.filter(item_no__in=list6).values() 
#                     for i in list2:
#                         temp={}
#                         temp['item_no']=i['item_no']  
#                         # temp['observation']=i['observation']
#                         if(i['type']=='H'):
#                             temp['type']=i['type']
#                             temp['item_title']=i['item_title']
#                         elif(i['type']=='SH'):
#                             temp['type']=i['type']
#                             temp['observation']=i['observation']
#                         item_list=[]
#                         item_list=item_no_details(inspection_id)
#                         for j in item_list:
#                             print(j,'jjjjj')
#                             temp['item']=j['count']
#                         if(m1.Marked_Officers_forward.objects.exclude(status_flag=2).filter(marked_no__item_no=i['item_no'],marked_to_forward_id=desigid)):
#                             print('inside if condition')
#                             temp['compliance_forward']=m1.Marked_Officers_forward.objects.exclude(status_flag=2).filter(marked_no__item_no=i['item_no'],marked_to_forward_id=desigid)[0].compliance_forward
#                             print(temp['compliance_forward'],'HAHAHAHAHAHAHAHAHAHAHA')
#                             temp['reply_on_forward']=m1.Marked_Officers_forward.objects.exclude(status_flag=2).filter(marked_no__item_no=i['item_no'],marked_to_forward_id=desigid)[0].reply_on
#                             created_on_forward=m1.Marked_Officers_forward.objects.exclude(status_flag=2).filter(marked_no__item_no=i['item_no'],marked_to_forward_id=desigid)[0].created_on_forward 
#                             temp['created_on_forward']=created_on_forward.strftime("%d/%m/%y")
#                             id_reject=m1.Marked_Officers_forward.objects.exclude(status_flag=2).filter(marked_no__item_no=i['item_no'],marked_to_forward_id=desigid)[0].marked_no_forward
#                             if m1.Officers_Remark.objects.filter(marked_no_forward_id=id_reject):
#                                 remarkk=m1.Officers_Remark.objects.filter(marked_no_forward_id=id_reject,status_flag=0)[0].remark
#                                 datee=m1.Officers_Remark.objects.filter(marked_no_forward_id=id_reject,status_flag=0)[0].rejected_on.strftime("%d/%m/%y")
#                                 temp['remark']=remarkk if remarkk!=None else 'NA'
#                                 temp['rejected_on']=datee 
#                             else:
#                                 temp['remark']='NA'
#                                 temp['rejected_on']='NA' 
#                         list4.append(temp) 
                
#             # sent query    
#                 elif (status=='S'):
#                     print('SENT LIST')
#                     list5=m1.Marked_Officers.objects.filter(item_no__inspection_no_id=inspection_id,marked_no__in=listf).values('item_no_id') 
#                     print(list5,'SLIST5')
#                     list6=[]
#                     for i in list5:
#                         list6.append(i['item_no_id'])
#                     list2=m1.Item_details.objects.filter(item_no__in=list6).values() 
#                     for i in list2:
#                         temp={}
#                         temp['item_no']=i['item_no']  
#                         if(i['type']=='H'):
#                             temp['type']=i['type']
#                             temp['item_title']=i['item_title']
#                         elif(i['type']=='SH'):
#                             temp['type']=i['type']
#                             temp['observation']=i['observation']
#                         # temp['observation']=i['observation']
#                         item_list=[]
#                         item_list=item_no_details(inspection_id)
#                         for j in item_list:
#                             print(j,'jjjjj')
#                             temp['item']=j['count']
#                         if(m1.Marked_Officers_forward.objects.filter(marked_no__item_no=i['item_no'],marked_to_forward_id=desigid,status_flag=2)):
#                             temp['compliance_forward']=m1.Marked_Officers_forward.objects.filter(marked_no__item_no=i['item_no'],marked_to_forward_id=desigid,status_flag=2)[0].compliance_forward
#                             print(temp['compliance_forward'],'HAHAHAHAHAHAHAHAHAHAHA')
#                             temp['reply_on_forward']=m1.Marked_Officers_forward.objects.filter(marked_no__item_no=i['item_no'],marked_to_forward_id=desigid,status_flag=2)[0].reply_on.strftime("%d/%m/%y")
#                             temp['created_on_forward']=m1.Marked_Officers_forward.objects.filter(marked_no__item_no=i['item_no'],marked_to_forward_id=desigid,status_flag=2)[0].created_on_forward              
#                         list4.append(temp)   
                
#                 for i in list1:
#                     temp={}
#                     temp['inspection_no']=i['inspection_no']
#                     temp['inspection_note_no']=i['inspection_note_no'] if i['inspection_note_no']!=None else 'NA'
#                     temp['inspection_title']=i['inspection_title']
#                     temp['inspection_date']=i['inspected_on'].strftime("%d/%m/%y") if i['inspected_on']!=None else 'NA'
#                     temp['empname']=listname if listname!=None else 'NA'
#                     list3.append(temp)
#                 for i in listdesig:
#                     temp={}
#                     temp['designation']=i['designation'] if i['designation']!=None else 'NA'
#                     desiglist.append(temp) 
#                 print(list3,'__________________________list3list3')
#                 print(list4,'__________________________________list4list4')
#                 print(desiglist,'__________________________________________desiglistdesiglist') 
#                 return JsonResponse({'idetails':list3,'itemdetails':list4,'desigdetails':desiglist,})
            
#             item_no=request.GET.get('item_no')
#             compliance_forward=request.GET.get('compliance_forward')
    
#         # save as draft for forwarded reply
#             if(str=='save-forward'):
#                 if(len(compliance_forward)!=0):
#                     m1.Marked_Officers_forward.objects.filter(marked_no_id__item_no_id=item_no,marked_to_forward_id=desigid).update(compliance_forward=compliance_forward,status_flag=1)
#                     return JsonResponse({})
#                 else:
#                     bono=[]
#                     return JsonResponse(bono,safe=False)
#     except Exception as e:
#         try:
#             m1.error_Table.objects.create(fun_name="compliance_filterdata_ajax1",user_id=request.user,err_details=str(e))
#         except:
#             print("Internal Error!!!")
#         #messages.error(request, 'Error : '+str(e))
#         return render(request, "errorspage.html", {})



def compliance_filterdata_ajax1(request):
    try:
        if request.method == "GET" and request.is_ajax():
            str=request.GET.get('str')
            
            if(str=='filter'):
                #print('b')
                rly_id=request.GET.get('rly_id')
                #print(rly_id,'1111')
                if(rly_id==""):
                    list3=models.railwayLocationMaster.objects.filter(location_type='DIV').values('location_code')
                else:    
                     list3=models.railwayLocationMaster.objects.filter(location_type_desc__in=['DIVISION','WORKSHOP'],parent_location_code=rly_id).order_by('location_code').values('location_code', 'location_type').distinct('location_code')
                list4=[]
                for i in list3:
                    list4.append(i['location_code']+'-'+i['location_type'])    
                #print(list4,'2222')
                return JsonResponse({'div':list4})
            
            cuser=request.user.username
            if request.user.user_role == 'guest':
                cuser=request.user.guest_email
                request.user.email=request.user.guest_email
            desigid=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].designation_code
            # print(cuser,desigid,'CUSER, DESIGID')
            
            if(str=='reply'):
                status=request.GET.get('status')
                inspection_id=request.GET.get('inspection_id')
                listdesig1=m1.Inspection_details.objects.filter(inspection_no=inspection_id).values('inspection_officer_id')
                listdesig=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=listdesig1).values('designation')
                listname1=m1.Inspection_details.objects.filter(inspection_no=inspection_id).values('modified_by')
                empfname=m1.empmast.objects.filter(empno__in=listname1)[0].empname
                empmname=m1.empmast.objects.filter(empno__in=listname1)[0].empmname
                emplname=m1.empmast.objects.filter(empno__in=listname1)[0].emplname
                if(empmname==None and emplname==None):
                    listname=empfname
                elif(empmname==None):
                    listname=empfname + " " + emplname
                elif(emplname==None):
                    listname=empfname + " " + empmname   
                else:
                    listname=empfname + " " + empmname + " " + emplname
                # print(listname,'rajputttttttttttttttttttttttt')
                list1=m1.Inspection_details.objects.filter(inspection_no=inspection_id).values()
                listf=m1.Marked_Officers_forward.objects.exclude(status_flag=2).filter(marked_to_forward_id=desigid).values('marked_no_id')
                
                list5=[]
                list3=[]
                list4=[]
                listremark=[]
                listdate=[]
                desiglist=[]
            
            # pending query
                if (status=='P'):
                    list5=m1.Marked_Officers.objects.filter(item_no__inspection_no_id=inspection_id,marked_no__in=listf,status_flag=1).values('item_no_id','action_type')
                    list6=[]
                    for i in list5:
                        list6.append(i['item_no_id'])

                    list2=m1.Item_details.objects.filter(item_no__in=list6).values() 
                    for i in list2:
                        
                        if(m1.Marked_Officers_forward.objects.exclude(status_flag=2).filter(marked_no__item_no=i['item_no'],marked_to_forward_id=desigid)):
                            forwardssssss=m1.Marked_Officers_forward.objects.exclude(status_flag=2).filter(marked_no__item_no=i['item_no'],marked_to_forward_id=desigid).values()
                            for f in forwardssssss:
                                print(f)
                                temp={}
                                temp['item_no']=i['item_no']  
                                temp['des_id']=i['des_id']  
                                # temp['action_type']=i['action_type']
                                for al in list5:
                                    if al['item_no_id'] == temp['item_no']:
                                        temp['action_type']=al['action_type']

                                if(i['type']=='H'):
                                    temp['type']=i['type']
                                    temp['item_title']=i['item_title']

                                elif(i['type']=='SH'):
                                    temp['type']=i['type']
                                    temp['observation']=i['observation']

                                item_list=[]
                                item_list=item_no_details(inspection_id)
                                for j in item_list:
                                    # print(j,'jjjjj')
                                    temp['item']=j['count']
                                # temp['compliance_forward']=m1.Marked_Officers_forward.objects.exclude(status_flag=2).filter(marked_no__item_no=i['item_no'],marked_to_forward_id=desigid)[0].compliance_forward
                                # temp['reply_on_forward']=m1.Marked_Officers_forward.objects.exclude(status_flag=2).filter(marked_no__item_no=i['item_no'],marked_to_forward_id=desigid)[0].reply_on
                                # created_on_forward=m1.Marked_Officers_forward.objects.exclude(status_flag=2).filter(marked_no__item_no=i['item_no'],marked_to_forward_id=desigid)[0].created_on_forward 
                                # temp['created_on_forward']=created_on_forward.strftime("%d/%m/%y")
                                temp['compliance_forward']=f['compliance_forward']
                                temp['reply_on_forward']=f['reply_on']
                                temp['marked_no_forward']=f['marked_no_forward']
                                temp['created_on_forward']=f['created_on_forward'].strftime("%d/%m/%y")
                                temp['forwarded_by']=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=f['created_by_forward']).values('designation')[0]['designation']
                                # id_reject=m1.Marked_Officers_forward.objects.exclude(status_flag=2).filter(marked_no__item_no=i['item_no'],marked_to_forward_id=desigid)[0].marked_no_forward
                                id_reject=f['marked_no_forward']
                                if m1.Officers_Remark.objects.filter(marked_no_forward_id=id_reject):
                                    remarkk=m1.Officers_Remark.objects.filter(marked_no_forward_id=id_reject,status_flag=0)[0].remark
                                    datee=m1.Officers_Remark.objects.filter(marked_no_forward_id=id_reject,status_flag=0)[0].rejected_on.strftime("%d/%m/%y")
                                    temp['remark']=remarkk if remarkk!=None else 'NA'
                                    temp['rejected_on']=datee 
                                else:
                                    temp['remark']='NA'
                                    temp['rejected_on']='NA' 
                                    
                                #for forwarded officers details
                                forwardes = list(m1.Marked_Officers_forward.objects.filter(marked_no__status_flag=1,marked_no__item_no=i['item_no'], created_by_forward=desigid).values_list('marked_to_forward__designation',flat=True))
                                if forwardes:
                                    temp['forwardes']=forwardes
                                else:
                                    temp['forwardes']=[]
                                print(temp)
                                list4.append(temp) 
                
            # sent query    
                elif (status=='S'):
                    # print('SENT LIST')
                    list5=m1.Marked_Officers.objects.filter(item_no__inspection_no_id=inspection_id,marked_no__in=listf).values('item_no_id','action_type') 
                    # print(list5,'SLIST5')
                    list6=[]
                    for i in list5:
                        list6.append(i['item_no_id'])
                    list2=m1.Item_details.objects.filter(item_no__in=list6).values() 
                    for i in list2:
                        temp={}
                        temp['item_no']=i['item_no']  
                        if(i['type']=='H'):
                            temp['type']=i['type']
                            temp['item_title']=i['item_title']
                        elif(i['type']=='SH'):
                            temp['type']=i['type']
                            temp['observation']=i['observation']
                        # temp['observation']=i['observation']
                        for al in list5:
                            if al['item_no_id'] == temp['item_no']:
                                temp['action_type']=al['action_type']
                        item_list=[]
                        item_list=item_no_details(inspection_id)
                        for j in item_list:
                            # print(j,'jjjjj')
                            temp['item']=j['count']
                        if(m1.Marked_Officers_forward.objects.filter(marked_no__item_no=i['item_no'],marked_to_forward_id=desigid,status_flag=2)):
                            temp['compliance_forward']=m1.Marked_Officers_forward.objects.filter(marked_no__item_no=i['item_no'],marked_to_forward_id=desigid,status_flag=2)[0].compliance_forward
                            print(temp['compliance_forward'],'HAHAHAHAHAHAHAHAHAHAHA')
                            temp['reply_on_forward']=m1.Marked_Officers_forward.objects.filter(marked_no__item_no=i['item_no'],marked_to_forward_id=desigid,status_flag=2)[0].reply_on.strftime("%d/%m/%y")
                            temp['created_on_forward']=m1.Marked_Officers_forward.objects.filter(marked_no__item_no=i['item_no'],marked_to_forward_id=desigid,status_flag=2)[0].created_on_forward              
                        list4.append(temp)   
                
                for i in list1:
                    temp={}
                    temp['inspection_no']=i['inspection_no']
                    temp['inspection_note_no']=i['inspection_note_no'] if i['inspection_note_no']!=None else 'NA'
                    temp['inspection_title']=i['inspection_title']
                    temp['inspection_date']=i['inspected_on'].strftime("%d/%m/%y") if i['inspected_on']!=None else 'NA'
                    temp['empname']=listname if listname!=None else 'NA'
                    list3.append(temp)
                for i in listdesig:
                    temp={}
                    temp['designation']=i['designation'] if i['designation']!=None else 'NA'
                    desiglist.append(temp) 
                # print(list3,'__________________________list3list3')
                # print(list4,'__________________________________list4list4')
                # print(desiglist,'__________________________________________desiglistdesiglist') 
                return JsonResponse({'idetails':list3,'itemdetails':list4,'desigdetails':desiglist,})
            
            item_no=request.GET.get('item_no')
            compliance_forward=request.GET.get('compliance_forward')
    
        # save as draft for forwarded reply
            if(str=='save-forward'):
                forward_no=request.GET.get('forward_no')
                if(len(compliance_forward)!=0):
                    m1.Marked_Officers_forward.objects.filter(marked_no_id__item_no_id=item_no,marked_to_forward_id=desigid,marked_no_forward=forward_no).update(compliance_forward=compliance_forward,status_flag=1)
                    return JsonResponse({})
                else:
                    bono=[]
                    return JsonResponse(bono,safe=False)
                
    except Exception as e:
        try:
            m1.error_Table.objects.create(fun_name="compliance_filterdata_ajax1",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        #messages.error(request, 'Error : '+str(e))
        return render(request, "errorspage.html", {})

def compliance_filterdata_ajax_forwards(request):
    try:
        if request.method == "GET" and request.is_ajax():
            str=request.GET.get('str')
            cuser=request.user.username
            if request.user.user_role == 'guest':
                cuser=request.user.guest_email
                request.user.email=request.user.guest_email
            desigid=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].designation_code
            
            if(str=='reply'):
                status=request.GET.get('status')
                inspection_id=request.GET.get('inspection_id')

                listdesig1=m1.Inspection_details.objects.filter(inspection_no=inspection_id).values('inspection_officer_id')
                listdesig=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=listdesig1).values('designation')
                listname1=m1.Inspection_details.objects.filter(inspection_no=inspection_id).values('modified_by')
                empfname=m1.empmast.objects.filter(empno__in=listname1)[0].empname
                empmname=m1.empmast.objects.filter(empno__in=listname1)[0].empmname
                emplname=m1.empmast.objects.filter(empno__in=listname1)[0].emplname
                if(empmname==None and emplname==None):
                    listname=empfname
                elif(empmname==None):
                    listname=empfname + " " + emplname
                elif(emplname==None):
                    listname=empfname + " " + empmname   
                else:
                    listname=empfname + " " + empmname + " " + emplname
                
                
                list1=m1.Inspection_details.objects.filter(inspection_no=inspection_id).values()
                listf=m1.Marked_Officers_forward.objects.filter(marked_to_forward_id=desigid, status_flag=2).values('marked_no_id')
                
                list5=[]
                list3=[]
                list4=[]
                listremark=[]
                listdate=[]
                desiglist=[]
            
            # pending query
                if (status=='S'):
                    list5=m1.Marked_Officers.objects.filter(item_no__inspection_no_id=inspection_id,marked_no__in=listf).values('item_no_id')
                    list6=[]
                    for i in list5:
                        list6.append(i['item_no_id'])

                    list2=m1.Item_details.objects.filter(item_no__in=list6).values() 
                    for i in list2:
                        if(m1.Marked_Officers_forward.objects.filter(status_flag=2,marked_no__item_no=i['item_no'],marked_to_forward_id=desigid)):
                            forwardssssss=m1.Marked_Officers_forward.objects.filter(status_flag=2,marked_no__item_no=i['item_no'],marked_to_forward_id=desigid).values()
                            for f in forwardssssss:
                                temp={}
                                temp['item_no']=i['item_no']  
                                temp['des_id']=i['des_id']  

                                if(i['type']=='H'):
                                    temp['type']=i['type']
                                    temp['item_title']=i['item_title']

                                elif(i['type']=='SH'):
                                    temp['type']=i['type']
                                    temp['observation']=i['observation']

                                item_list=[]
                                item_list=item_no_details(inspection_id)
                                for j in item_list:
                                    # print(j,'jjjjj')
                                    temp['item']=j['count']
                                temp['compliance_forward']=f['compliance_forward']
                                temp['reply_on_forward']=f['reply_on'].strftime("%d/%m/%y")
                                temp['marked_no_forward']=f['marked_no_forward']
                                temp['created_on_forward']=f['created_on_forward'].strftime("%d/%m/%y")
                                temp['forwarded_by']=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=f['created_by_forward']).values('designation')[0]['designation']
                                # id_reject=m1.Marked_Officers_forward.objects.exclude(status_flag=2).filter(marked_no__item_no=i['item_no'],marked_to_forward_id=desigid)[0].marked_no_forward
                                id_reject=f['marked_no_forward']
                                list4.append(temp) 
                        
                        # if(m1.Marked_Officers_forward.objects.filter(marked_no__item_no=i['item_no'],marked_to_forward_id=desigid, status_flag=2)):
                            
                        #     temp['compliance_forward']=m1.Marked_Officers_forward.objects.filter(status_flag=2,marked_no__item_no=i['item_no'],marked_to_forward_id=desigid)[0].compliance_forward
                        #     reply_on_forward=m1.Marked_Officers_forward.objects.filter(status_flag=2,marked_no__item_no=i['item_no'],marked_to_forward_id=desigid)[0].reply_on
                        #     temp['reply_on_forward']=reply_on_forward.strftime("%d/%m/%y")
                        #     created_on_forward=m1.Marked_Officers_forward.objects.filter(status_flag=2,marked_no__item_no=i['item_no'],marked_to_forward_id=desigid)[0].created_on_forward 
                        #     temp['created_on_forward']=created_on_forward.strftime("%d/%m/%y")
                            # id_reject=m1.Marked_Officers_forward.objects.filter(status_flag=2,marked_no__item_no=i['item_no'],marked_to_forward_id=desigid)[0].marked_no_forward
                            

                    for i in list1:
                            temp={}
                            temp['inspection_no']=i['inspection_no']
                            temp['inspection_note_no']=i['inspection_note_no'] if i['inspection_note_no']!=None else 'NA'
                            temp['inspection_title']=i['inspection_title']
                            temp['inspection_date']=i['inspected_on'].strftime("%d/%m/%y") if i['inspected_on']!=None else 'NA'
                            temp['empname']=listname if listname!=None else 'NA'
                            list3.append(temp)
                            for i in listdesig:
                                temp={}
                                temp['designation']=i['designation'] if i['designation']!=None else 'NA'
                                desiglist.append(temp)
                return JsonResponse({'idetails':list3,'itemdetails':list4,'desigdetails':desiglist,}) 
    except Exception as e:
        try:
            m1.error_Table.objects.create(fun_name="compliance_filterdata_ajax_forwards",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        #messages.error(request, 'Error : '+str(e))
        return render(request, "errorspage.html", {})




def viewdate_ajax(request):
    try:
        if request.method == "GET" and request.is_ajax():
            ins_id=request.GET.get('inspection_id')
            cuser=request.user.username
            desigid=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].designation_code
            #print(cuser,desigid,'CUSER, DESIGID')
            item_no=m1.Item_details.objects.filter(inspection_no_id=ins_id).values('item_no')
            #print(item_no,'viewed_on')
            if m1.Marked_Officers.objects.filter(item_no_id__in=item_no, marked_to_id=desigid, viewed_on=None):
                m1.Marked_Officers.objects.filter(item_no_id__in=item_no, marked_to_id=desigid, viewed_on=None).update(viewed_on=datetime.now())
            return JsonResponse({}, safe = False) 
    except Exception as e:
        try:
            m1.error_Table.objects.create(fun_name="viewdate_ajax",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        #messages.error(request, 'Error : '+str(e))
        return render(request, "errorspage.html", {})

def pending_byme(request):
    try:
        #print('pending_byme')
        listgrid=[]
        count=1
        cuser=request.user.username
        desigid=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].designation_code
        # print(cuser,desigid,'CUSER, DESIGID')
        item_details=m1.Item_details.objects.filter(inspection_no__inspection_officer=desigid).values().order_by('-inspection_no__inspected_on')
        # print(item_details,'01234')
        for i in item_details:
            # i['type'] == 'SH' and 
            if m1.Marked_Officers.objects.filter(item_no_id=i['item_no'], status_flag=1):
                # print('ENTERED')
                temp={}
                temp['sr_no']=count
                temp['inspection_no']=i['inspection_no_id']
                note_no=m1.Inspection_details.objects.filter(inspection_no=i['inspection_no_id'],inspection_officer=desigid)[0].inspection_note_no
                temp['inspection_note_no']=note_no
                temp['item_no']=i['item_no']
                temp['observation']=i['observation']
                inspected_on=m1.Inspection_details.objects.filter(inspection_no=i['inspection_no_id'],inspection_officer=desigid)[0].inspected_on
                temp['inspected_on']=inspected_on.strftime("%d/%m/%y") if inspected_on!=None else 'NA'
                mark=m1.Marked_Officers.objects.filter(item_no=i['item_no'], status_flag=1).values()
                desig_longdesc1=""
                marked_officers1 = ""
                for x in mark:
                    marked=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=x['marked_to_id'])
                    # print('yyyyyyyy', marked[0].designation)
                    if marked.count() > 0:
                        if  marked[0].designation:
                            desig_longdesc1 += marked[0].designation+', ' 
                        marked_officers1 += marked[0].empno_id+', '
                if marked_officers1 != '':
                    testdesig=desig_longdesc1.split(',')
                    # print(testdesig,'ASDFGHJKL',testdesig.pop(),'ASDFGHJKL')
                    testdesig.pop()
                    testmarkofficer=''
                    alldesig = models.Level_Desig.objects.exclude(delete_flag=True).filter(designation__in=testdesig).values('d_level').distinct('d_level')
                    # print(alldesig,'alldesig')
                    for i in alldesig:
                        # for GMs
                        if i['d_level'] == 'GM':
                            #print('GM-GM')
                            lst1=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level'],empno__isnull=False).exclude(designation_code=desigid).count()
                            print(lst1,'lst1lst1')
                            if lst1 != 0:
                                #print('GM-GM-1')
                                lst2=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation__in=testdesig).exclude(d_level=i['d_level']).values('designation').order_by('designation'))
                                if testmarkofficer != '':
                                    #print('GM-GM-2')
                                    testmarkofficer+=','
                                testmarkofficer=testmarkofficer+"All GM's/ZR"
                                testdesig=list(map(lambda d: d['designation'], lst2))
                                #print(testdesig,'testest1')
                                temp['marked_officers']="All GM's/ZR"
                                #print(temp['marked_officers'])
                        # for BMs
                        elif i['d_level'] == 'BM':
                            #print('BM-BM')
                            lst1=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level'],empno__isnull=False).exclude(designation_code=desigid).count()
                            #print(lst1,'lst1lst1')
                            if lst1 != 0:
                                lst2=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation__in=testdesig).exclude(d_level=i['d_level']).values('designation').order_by('designation'))
                                if testmarkofficer != '':
                                    testmarkofficer+=','
                                testmarkofficer=testmarkofficer+"All Board Member's"
                                testdesig=list(map(lambda d: d['designation'], lst2))
                                temp['marked_officers']="All Board Member's"
                                #print(temp['marked_officers'])
                        # for PHODs
                        elif i['d_level'] == 'PHOD':
                            #print('PHOD-PHOD')
                            lst1=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level'],empno__isnull=False).exclude(designation_code=desigid).count()
                            if lst1 == 0:
                                lst2=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation__in=testdesig).exclude(d_level=i['d_level']).values('designation').order_by('designation'))
                                if testmarkofficer != '':
                                    testmarkofficer+=','
                                testmarkofficer=testmarkofficer+"All PHOD's"
                                testdesig=list(map(lambda d: d['designation'], lst2))
                                temp['marked_officers']="All PHOD's"
                                #print(temp['marked_officers'])
                            else:
                                hq=models.railwayLocationMaster.objects.filter(parent_location_code__isnull=False).values('parent_location_code').distinct()
                                for ii in hq:
                                    rlyunit=models.railwayLocationMaster.objects.filter(location_code=ii['parent_location_code']).values('rly_unit_code')
                                    if models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level'],rly_unit__in=rlyunit,empno__isnull=False).exists():
                                        lst3=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level'],rly_unit__in=rlyunit,empno__isnull=False).exclude(designation_code=desigid).count()
                                        if lst3 == 0:
                                            lst2=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation__in=testdesig).exclude(d_level=i['d_level'],rly_unit__in=rlyunit).values('designation').order_by('designation'))
                                            if testmarkofficer != '':
                                                testmarkofficer+=','
                                            testmarkofficer=testmarkofficer+"All PHOD's"+ii['parent_location_code']
                                            testdesig=list(map(lambda d: d['designation'], lst2))
                                            temp['marked_officers']=temp['marked_officers']+"All PHOD's/"+ii['parent_location_code']
                                            #print(temp['marked_officers'])
                        # for DRMs
                        elif i['d_level'] == 'DRM':
                            #print('DRM-DRM')
                            lst1=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level'],empno__isnull=False).exclude(designation_code=desigid).count()
                            #print(lst1,'lst1lst1')
                            if lst1 == 0:
                                lst2=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation__in=testdesig).exclude(d_level=i['d_level']).values('designation').order_by('designation'))
                                if testmarkofficer != '':
                                    testmarkofficer+=','
                                testmarkofficer=testmarkofficer+"All DRM's"
                                testdesig=list(map(lambda d: d['designation'], lst2))
                                temp['marked_officers']="All DRM's"
                                #print(temp['marked_officers'])
                            else:
                                #print('DRM-DRM-DRM')
                                hq=models.railwayLocationMaster.objects.filter(parent_location_code__isnull=False).values('parent_location_code').distinct()
                                for ii in hq:
                                    rlyunit=models.railwayLocationMaster.objects.filter(parent_location_code=ii['parent_location_code']).values('rly_unit_code')
                                    if models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level'],rly_unit__in=rlyunit,empno__isnull=False).exists():
                                        lst3=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level'],rly_unit__in=rlyunit,empno__isnull=False).exclude(designation_code=desigid).count()
                                        if lst3 == 0:
                                            lst2=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation__in=testdesig).exclude(d_level=i['d_level'],rly_unit__in=rlyunit).values('designation').order_by('designation'))
                                            if testmarkofficer != '':
                                                testmarkofficer+=','
                                            testmarkofficer=testmarkofficer+"All DRM's/"+ii['parent_location_code']
                                            #print(testmarkofficer,'testmarkofficer')
                                            testdesig=list(map(lambda d: d['designation'], lst2))
                                            #print(testdesig,'testdesig')
                                            temp['marked_officers']=temp['marked_officers']+"All DRM's/"+ii['parent_location_code']
                                            #print(temp['marked_officers'])
                    for i in range(len(testdesig)):
                        if testmarkofficer != '':
                            testmarkofficer+=','
                        testmarkofficer=testmarkofficer+testdesig[i]
                    temp['marked_officers']=testmarkofficer
                    #print(temp['marked_officers'],'testest1')
                listgrid.append(temp)
                count=count+1
        #print(listgrid,'-------------------------,pending')
        list1=models.railwayLocationMaster.objects.filter(Q(location_type_desc='RAILWAY BOARD')|Q(location_type_desc='HEAD QUATER')|Q(location_type_desc='PRODUCTION UNIT')|Q(location_type_desc='OFFICE')).values('location_code').distinct().order_by('location_code')
        list2=[]
        for i in list1:
            # print(i['location_code'],'_________')
            list2.append(i['location_code'])
        list3=models.railwayLocationMaster.objects.filter(Q(location_type_desc='DIVISION')|Q(location_type_desc='WORKSHOP')|Q(location_type_desc='INSTITUTE')|Q(location_type_desc='STORE')|Q(location_type_desc='CONSTRUCTION')).values('location_code').distinct().order_by('location_code')
        list4=[]
        for i in list3:
            # print(i['location_code'],'_________')
            list4.append(i['location_code'])  
        list5=models.departMast.objects.all().distinct().values('department_name').order_by('department_name')
        list6=[]
        for i in list5:
            # print(i['department_name'],'_________')
            list6.append(i['department_name'])       
        context={
            'zone':list2 ,
            'division':list4,
            'dept':list6,
            'listgrid':listgrid,
        }
        #print(list2,'_____________')
        return render(request,'pending_byme.html',context)
    except Exception as e:
        try:
            m1.error_Table.objects.create(fun_name="pending_byme",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        #messages.error(request, 'Error : '+str(e))
        return render(request, "errorspage.html", {})


def pending_forme(request):
    try:
        daterangeselect=request.GET.get('data3')
        listgrid=[]
        count=1
        cuser=request.user.username
        # desigid=models.Level_Desig.objects.exclude(delete_flag=True).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].designation_code
        if request.user.user_role == 'guest':
            cuser=request.user.guest_email
            request.user.email=request.user.guest_email
        desigid=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].designation_code
        rly_code=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].rly_unit.location_code
        rly_unit_code=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].rly_unit.rly_unit_code
        parent_loc=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].rly_unit.parent_location_code
        parent_loc_id=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].rly_unit.parent_rly_unit_code
        div_code=rly_code
        if parent_loc!='RB':
            div_code=rly_code
            rly_code=parent_loc
            rly_unit_code=parent_loc_id
        
        #print(cuser,desigid,'CUSER, DESIGID')
        if daterangeselect not in ['0-3','0-6','0-12','tofrom']:
            item_details=m1.Item_details.objects.values().order_by('-inspection_no__inspected_on')
        else:
            from dateutil.relativedelta import relativedelta
            if daterangeselect=='0-3':
                now = datetime.today()
                six = now
                prev = now - relativedelta(months=3)
                prev = prev.date()
            elif daterangeselect=='0-6':
                now = datetime.today()
                six = now
                prev = now - relativedelta(months=6)
                prev = prev.date()
            elif daterangeselect=='0-12':
                now = datetime.today()
                six = now
                prev = now - relativedelta(months=12)
                prev = prev.date()
            elif daterangeselect=='tofrom':
                daterange=request.GET.get('daterange')
                daterange1=daterange.split('-')
                date1=daterange1[0].split('/')
                date2=daterange1[1].split('/')
                prev='20'+date1[2].strip()+'-'+date1[1].strip()+'-'+date1[0].strip()
                six='20'+date2[2].strip()+'-'+date2[1].strip()+'-'+date2[0].strip()

            item_details=m1.Item_details.objects.filter(inspection_no__inspected_on__gte=prev,inspection_no__inspected_on__lte=six).values().order_by('-inspection_no__inspected_on')
        #print(item_details,'01234')
        daterange=request.GET.get('daterange')
        data=request.GET.get('data')
        #print('======::', data)

        
        item_no = []
        # print(insp_officer)
        if data == 'repliedj':
            title = 'Item wise Sent Replies of Inspection Notes Marked to Me'
            item_no = m1.Marked_Officers.objects.filter(marked_to=desigid, status_flag__in=[3,4]).values_list('item_no', flat=True)
            
            # inspection=m1.Marked_Officers.objects.filter(marked_to_id=desigid,status_flag=3)
            # print(inspection)
            # merk=m1.Inspection_details.objects.filter(status_flag=1,inspection_officer_id=desigid).values_list('inspection_no', flat=True)
            # print('========3333=====', merk)
            merk = m1.Marked_Officers.objects.filter(marked_to_id=desigid, status_flag__in=[3,4]).values_list('item_no', flat=True)
            item_details=list(m1.Item_details.objects.filter(item_no__in=merk).values('inspection_no__inspection_note_no','type', 'observation','inspection_no', 'inspection_no__inspected_on', 'inspection_no__inspection_officer__designation').order_by('-inspection_no__inspected_on'))
            if daterangeselect not in ['0-3','0-6','0-12','tofrom']:
                item_details=list(m1.Item_details.objects.filter(item_no__in=merk).values('inspection_no__inspection_note_no','type', 'observation','inspection_no', 'inspection_no__inspected_on', 'inspection_no__inspection_officer__designation','item_title').order_by('-inspection_no__inspected_on'))
            else:
                from dateutil.relativedelta import relativedelta
                if daterangeselect=='0-3':
                    now = datetime.today()
                    six = now
                    prev = now - relativedelta(months=3)
                    prev = prev.date()
                elif daterangeselect=='0-6':
                    now = datetime.today()
                    six = now
                    prev = now - relativedelta(months=6)
                    prev = prev.date()
                elif daterangeselect=='0-12':
                    now = datetime.today()
                    six = now
                    prev = now - relativedelta(months=12)
                    prev = prev.date()
                elif daterangeselect=='tofrom':
                    daterange=request.GET.get('daterange')
                    daterange1=daterange.split('-')
                    date1=daterange1[0].split('/')
                    date2=daterange1[1].split('/')
                    prev='20'+date1[2].strip()+'-'+date1[1].strip()+'-'+date1[0].strip()
                    six='20'+date2[2].strip()+'-'+date2[1].strip()+'-'+date2[0].strip()
                item_details=list(m1.Item_details.objects.filter(item_no__in=merk,inspection_no__inspected_on__gte=prev,inspection_no__inspected_on__lte=six).values('inspection_no__inspection_note_no','type', 'observation','inspection_no', 'inspection_no__inspected_on', 'inspection_no__inspection_officer__designation').order_by('-inspection_no__inspected_on'))
            
        elif data == 'pendingj':
            title = 'Item wise Pending Reply'
            item_no = m1.Marked_Officers.objects.filter(marked_to=desigid, status_flag=1).values_list('item_no', flat=True)
            
            # print('pendingj')
            merk = m1.Marked_Officers.objects.filter(marked_to_id=desigid, status_flag=1).values_list('item_no', flat=True)
            # print(merk.values(), merk.count())
            if daterangeselect not in ['0-3','0-6','0-12','tofrom']:
                item_details=list(m1.Item_details.objects.filter(item_no__in=merk).values('inspection_no__inspection_note_no','type', 'inspection_no', 'observation', 'inspection_no__inspected_on', 'inspection_no__inspection_officer__designation','item_title').order_by('-inspection_no__inspected_on'))
            else:
                from dateutil.relativedelta import relativedelta
                if daterangeselect=='0-3':
                    now = datetime.today()
                    six = now
                    prev = now - relativedelta(months=3)
                    prev = prev.date()
                elif daterangeselect=='0-6':
                    now = datetime.today()
                    six = now
                    prev = now - relativedelta(months=6)
                    prev = prev.date()
                elif daterangeselect=='0-12':
                    now = datetime.today()
                    six = now
                    prev = now - relativedelta(months=12)
                    prev = prev.date()
                elif daterangeselect=='tofrom':
                    daterange=request.GET.get('daterange')
                    daterange1=daterange.split('-')
                    date1=daterange1[0].split('/')
                    date2=daterange1[1].split('/')
                    prev='20'+date1[2].strip()+'-'+date1[1].strip()+'-'+date1[0].strip()
                    six='20'+date2[2].strip()+'-'+date2[1].strip()+'-'+date2[0].strip()
                item_details=list(m1.Item_details.objects.filter(item_no__in=merk,inspection_no__inspected_on__gte=prev,inspection_no__inspected_on__lte=six).values('inspection_no__inspection_note_no','type', 'inspection_no', 'observation', 'inspection_no__inspected_on', 'inspection_no__inspection_officer__designation').order_by('-inspection_no__inspected_on'))
            # print('pendingj', item_details, len(item_details))
        insp_officer = m1.Item_details.objects.filter(item_no__in=item_no).values('inspection_no__inspection_officer__designation', 'inspection_no__inspection_officer__designation_code').distinct('inspection_no__inspection_officer__designation')
        # for i in item_details:
        #     # i['type'] == 'SH' and 
        #     if m1.Marked_Officers.objects.filter(item_no_id=i['item_no'], marked_to_id=desigid, status_flag=1):
        #         temp={}
        #         temp['sr_no']=count
        #         temp['inspection_no']=i['inspection_no_id']
        #         note_no=m1.Inspection_details.objects.filter(inspection_no=i['inspection_no_id'])[0].inspection_note_no
        #         temp['inspection_note_no']=note_no
        #         temp['item_no']=i['item_no']
        #         temp['observation']=i['observation']
        #         inspected_on=m1.Inspection_details.objects.filter(inspection_no=i['inspection_no_id'])[0].inspected_on
        #         temp['inspected_on']=inspected_on.strftime("%d/%m/%y") if inspected_on!=None else 'NA'
        #         inspect_officer=m1.Inspection_details.objects.filter(inspection_no=i['inspection_no_id'])[0].inspection_officer_id
        #         inspecting_officer=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=inspect_officer)[0].designation
        #         temp['inspecting_officer']=inspecting_officer if inspecting_officer!=None else 'NA'
        #         listgrid.append(temp)
        #         count=count+1
        # print(listgrid,'-------------------------,pending')
        list1=models.railwayLocationMaster.objects.filter(location_type_desc__in=['RAILWAY BOARD', 'PRODUCTION UNIT', 'HEAD QUATER','OFFICE', 'PSU', 'PRODUCTION UNIT', 'INSTITUTE']).values('location_code').distinct().order_by('location_code')
        list2=[]
        for i in list1:
            # print(i['location_code'],'_________')
            list2.append(i['location_code'])
        list3=models.railwayLocationMaster.objects.filter(location_type_desc__in=['DIVISION','WORKSHOP', 'STORE', 'CONSTRUCTION', 'OFFICE']).distinct().values('location_code', 'location_type').order_by('location_code')
        list4=[]
        for i in list3:
            list4.append({'location_code': i['location_code'], 'location_type': i['location_type']}) 
        list5=models.departMast.objects.all().distinct().values('department_name').order_by('department_name')
        list6=[]
        for i in list5:
            # print(i['department_name'],'_________')
            list6.append(i['department_name'])  

        pclevel=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=desigid).values().order_by())

        designation=models.Level_Desig.objects.exclude(delete_flag=True).exclude(Q(empno_id=None),designation_code=desigid).filter(pc7_levelmin__lte=pclevel[0]['pc7_levelmin'],rly_unit=rly_unit_code).distinct().values('designation').order_by('-pc7_levelmin')
        # print(designation)
        officr=[]
        for l in listgrid:
            # print(l,'apeksha')
            if l['inspection_officer'] not in officr:
                officr.append(l['inspection_officer'])     
        context={
            'zone':list2 ,
            'division':list4,
            'dept':list6,
            'listgrid':item_details,
            'daterange': daterange,
            'data': data,
            'title': title,
            'insp_officer': insp_officer,
            'rly_code':rly_code,
            'div_code':div_code,
            'desig':designation,
            'designation':designation,
            'officr':officr,
        }
        #print(list2,'_____________')
        return render(request,'pending_forme.html',context)
    except Exception as e:
        try:
            m1.error_Table.objects.create(fun_name="pending_forme",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        #messages.error(request, 'Error : '+str(e))
        return render(request, "errorspage.html", {})



def pending_item_filterdata(request):
    # try:
        if request.method == "GET" and request.is_ajax():
            # print('b')
            rly_id=request.GET.get('rly_id')
            div_id=request.GET.get('div_id')
            dept_id=request.GET.get('dept_id')
            date_range=request.GET.get('date_range')
            daterange_id=request.GET.get('daterange_id')
            # print('+++++++++', date_range)
            str=request.GET.get('str')
            forme_byme_id=request.GET.get('forme_byme_id')
            Officer_id=request.GET.get('Officer_id')
            print(date_range+'---'+div_id+'---'+rly_id+'---'+Officer_id+'---'+forme_byme_id)
        
        
            
            empnox = models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=request.user)| Q(official_email_ID=request.user.guest_email) | Q(official_email_ID=request.user.email), empno__isnull=False)
            if empnox:
                empno = empnox[0].designation_code
                desig = empnox[0].designation
            if date_range:
                sp_date = date_range.split('-')
                start  = datetime.strptime(sp_date[0].strip(),"%d/%m/%Y").strftime("%Y-%m-%d")
                end  = datetime.strptime(sp_date[1].strip(),"%d/%m/%Y").strftime("%Y-%m-%d")

            if date_range=='':
                    startDate=date.today() - relativedelta(years = 50)
                    endDate=date.today()
            else:
                        print(date_range,"hello ap")
                        if '-' in date_range:
                            startDate=date_range.split('-')[0].strip()
                            startDate = datetime.strptime(startDate,'%d/%m/%Y')
                            endDate=date_range.split('-')[1].strip()
                            endDate = datetime.strptime(endDate,'%d/%m/%Y')
                        else:
                            startDate=date_range.strip()
                            startDate = datetime.strptime(startDate,'%d/%m/%Y')
                            endDate=date_range.strip()
                            endDate = datetime.strptime(endDate,'%d/%m/%Y')
            startDate = datetime.strftime(startDate,'%Y-%m-%d')
            endDate = datetime.strftime(endDate,'%Y-%m-%d')

            if rly_id =='':
                rly_id=list(m1.Insp_multi_location.objects.filter(type='HQ').distinct('item').values_list('item',flat=True))
            else:
                loc=[]
                loc.append(rly_id)
                rly_id=loc

            if div_id=='':
                loc_name=list(models.railwayLocationMaster.objects.filter(Q(location_type_desc='DIVISION')|Q(location_type_desc='WORKSHOP')|Q(location_type_desc='INSTITUTE')|Q(location_type_desc='STORE')|Q(location_type_desc='CONSTRUCTION'),parent_location_code__in=rly_id).values_list('location_code',flat=True).distinct('location_code'))
                loc_types=list(models.railwayLocationMaster.objects.filter(Q(location_type_desc='DIVISION')|Q(location_type_desc='WORKSHOP')|Q(location_type_desc='INSTITUTE')|Q(location_type_desc='STORE')|Q(location_type_desc='CONSTRUCTION'),parent_location_code__in=rly_id).values_list('location_type',flat=True).distinct('location_type'))
            else:
                loc_types=[]
                loc_name=[]
                # for l in div_id:
                loc_types.append(div_id.split('-')[1])
                loc_name.append(div_id.split('-')[0])

            locations=list(m1.Insp_multi_location.objects.filter(Q(item__in=rly_id)| Q(item__in=loc_name, type__in=loc_types)).values_list('inspection_no',flat=True).distinct('inspection_no'))
            
            if Officer_id=='':
                Officer_id=list(m1.Inspection_details.objects.filter().distinct('inspection_officer').values_list('inspection_officer',flat=True)) 
            else:
                Officer_id=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=Officer_id).values_list('designation_code',flat=True).distinct('designation_code'))
            
            # print(date_range,div_id,rly_id,Officer_id,forme_byme_id)
            #print('forme_byme_id', forme_byme_id)
            if(forme_byme_id=='repliedj'):
                # if rly_id=="" and div_id=="" and dept_id=="":
                #     print('00')
                # item_details=m1.Item_details.objects.filter(inspection_no__inspection_officer=desigid).values().order_by('-inspection_no__inspected_on')
                
                # elif div_id=="" and dept_id=="":
                #     print(div_id,dept_id, '11')
                merk = []
                # if date_range !='' and rly_id =='' and div_id == '' and Officer_id =='':
                #     #print('1')
                    
                #     # print(start, end)
                #     inspection_no = m1.Insp_multi_location.objects.filter(inspection_no__inspection_officer=empno, inspection_no__inspected_on__gte=start, inspection_no__inspected_on__lte=end).values_list('inspection_no', flat=True)
                    
                # elif date_range =='' and rly_id !='' and div_id == '' and Officer_id =='':
                #     #print('2')
                #     inspection_no = m1.Insp_multi_location.objects.filter(Q(item=rly_id, type='HQ'), inspection_no__inspection_officer=empno).values_list('inspection_no', flat=True)
            
                # elif date_range =='' and rly_id =='' and div_id != '' and Officer_id =='':
                #     #print('3')
                #     inspection_no = m1.Insp_multi_location.objects.filter(Q(item=div_id, type='DIV'), inspection_no__inspection_officer=empno).values_list('inspection_no', flat=True)
                
                # elif date_range =='' and rly_id =='' and div_id == '' and Officer_id !='':
                #     #print('4')
                #     inspection_no = m1.Inspection_details.objects.filter(inspection_officer=Officer_id).values_list('inspection_no', flat=True)
                
                # elif date_range =='' and rly_id =='' and div_id == '' and Officer_id =='':
                #     #print('5')
                #     inspection_no = m1.Insp_multi_location.objects.filter(inspection_no__inspection_officer=empno).values_list('inspection_no', flat=True)
                
                # elif date_range =='' and rly_id !='' and div_id != '' and Officer_id =='':
                #     #print('6')
                #     inspection_no = m1.Insp_multi_location.objects.filter(item=div_id, type='DIV', inspection_no__inspection_officer=empno).values_list('inspection_no', flat=True)
                    
                
                # elif date_range !='' and rly_id !='' and div_id == '' and Officer_id =='':
                #     #print('7')
                    
                #     inspection_no = m1.Insp_multi_location.objects.filter(item=rly_id, type='HQ', inspection_no__inspection_officer=empno, inspection_no__inspected_on__gte=start, inspection_no__inspected_on__lte=end).values_list('inspection_no', flat=True)
                    
                    
                # elif date_range !='' and rly_id !='' and div_id != '' and Officer_id =='':
                #     print('8')
                    
                #     inspection_no = m1.Insp_multi_location.objects.filter(item=div_id, type='DIV', inspection_no__inspection_officer=empno, inspection_no__inspected_on__gte=start, inspection_no__inspected_on__lte=end).values_list('inspection_no', flat=True)
                inspection_no=list(m1.Inspection_details.objects.filter(inspection_no__in=locations,inspection_officer__in=Officer_id,inspected_on__gte=startDate,inspected_on__lte=endDate).values_list('inspection_no', flat=True))
                merk = m1.Marked_Officers.objects.filter(marked_to=empno, status_flag__in=[3,4], item_no__inspection_no__in=inspection_no).values_list('item_no', flat=True)
                item_details=list(m1.Item_details.objects.filter(item_no__in=merk).values('inspection_no__inspection_note_no', 'observation','inspection_no', 'inspection_no__inspected_on', 'inspection_no__inspection_officer__designation').order_by('-inspection_no__inspected_on'))
            
            elif(forme_byme_id=='pendingj'):

                merk = []


                # if date_range !='' and rly_id =='' and div_id == '' and Officer_id =='':
                #     #print('1')
                #     inspection_no = m1.Insp_multi_location.objects.filter(inspection_no__inspection_officer=empno, inspection_no__inspected_on__gte=start, inspection_no__inspected_on__lte=end).values_list('inspection_no', flat=True)
                    
                # elif date_range =='' and rly_id !='' and div_id == '' and Officer_id =='':
                #     #print('2')
                #     inspection_no = m1.Insp_multi_location.objects.filter(Q(item=rly_id, type='HQ'), inspection_no__inspection_officer=empno).values_list('inspection_no', flat=True)
            
                # elif date_range =='' and rly_id =='' and div_id != '' and Officer_id =='':
                #     #print('3')
                #     inspection_no = m1.Insp_multi_location.objects.filter(Q(item=div_id, type='DIV'), inspection_no__inspection_officer=empno).values_list('inspection_no', flat=True)
                
                # elif date_range =='' and rly_id =='' and div_id == '' and Officer_id !='':
                #     #print('4')
                #     inspection_no = m1.Inspection_details.objects.filter(inspection_officer=Officer_id).values_list('inspection_no', flat=True)
                
                # elif date_range =='' and rly_id =='' and div_id == '' and Officer_id =='':
                #     #print('5')
                #     inspection_no = m1.Insp_multi_location.objects.filter(inspection_no__inspection_officer=empno).values_list('inspection_no', flat=True)
                
                # elif date_range =='' and rly_id !='' and div_id != '' and Officer_id =='':
                #     #print('6')
                #     inspection_no = m1.Insp_multi_location.objects.filter(item=div_id, type='DIV', inspection_no__inspection_officer=empno).values_list('inspection_no', flat=True)
                    
                
                # elif date_range !='' and rly_id !='' and div_id == '' and Officer_id =='':
                #     #print('7')
                #     inspection_no = m1.Insp_multi_location.objects.filter(item=rly_id, type='HQ', inspection_no__inspection_officer=empno, inspection_no__inspected_on__gte=start, inspection_no__inspected_on__lte=end).values_list('inspection_no', flat=True)

                # elif date_range !='' and rly_id !='' and div_id != '' and Officer_id =='':
                #     #print('8')
                #     inspection_no = m1.Insp_multi_location.objects.filter(item=div_id, type='DIV', inspection_no__inspection_officer=empno, inspection_no__inspected_on__gte=start, inspection_no__inspected_on__lte=end).values_list('inspection_no', flat=True)
                    
                inspection_no=list(m1.Inspection_details.objects.filter(inspection_no__in=locations,inspection_officer__in=Officer_id,inspected_on__gte=startDate,inspected_on__lte=endDate).values_list('inspection_no', flat=True))
                merk = m1.Marked_Officers.objects.filter(marked_to=empno, status_flag=1, item_no__inspection_no__in=inspection_no).values_list('item_no', flat=True)
                item_details=list(m1.Item_details.objects.filter(item_no__in=merk).values('inspection_no__inspection_note_no','inspection_no', 'observation', 'inspection_no__inspected_on', 'inspection_no__inspection_officer__designation').order_by('-inspection_no__inspected_on'))
                
        return JsonResponse({'item_details':item_details, 'forme_byme_id': forme_byme_id})
    # except Exception as e:
    #     try:
    #         m1.error_Table.objects.create(fun_name="pending_item_filterdata",user_id=request.user,err_details=str(e))
    #     except:
    #         print("Internal Error!!!")
    #     #messages.error(request, 'Error : '+str(e))
    #     return render(request, "errorspage.html", {})




def reject_forward_reply(request):
    try:
        #print('HAHAHAHAHAHAHA')
        if request.method == "GET" and request.is_ajax():
            forward=request.GET.get('forward')
            remark=request.GET.get('remark')
            print(forward,'forward',remark,'remark')
            cuser=request.user.username
            desigid=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].designation_code
            reject_list=m1.Marked_Officers_forward.objects.filter(created_by_forward=desigid).values()
            print(reject_list,'reject_list')
            for i  in reject_list:
                if m1.Marked_Officers_forward.objects.filter(marked_no_forward=forward):
                    desigid=m1.Marked_Officers_forward.objects.filter(marked_no_forward=forward)[0].marked_to_forward_id
                    # if(m1.Officers_Remark.objects.filter(marked_no_forward_id=forward).exists()):
                    #     m1.Officers_Remark.objects.filter(marked_no_forward_id=forward).update(status_flag=1)
                    # else:
                    m1.Officers_Remark.objects.create(rejected_on=datetime.now(), reply_on=i['reply_on'],reply_received=i['compliance_forward'],marked_no_forward_id=forward, marked_desig_id_id=desigid,remark=remark,)
                    m1.Marked_Officers_forward.objects.filter(marked_no_forward=forward).update(status_flag=3)
                    return JsonResponse({}, safe = False) 
        return JsonResponse({})
    except Exception as e:
        try:
            m1.error_Table.objects.create(fun_name="reject_forward_reply",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        #messages.error(request, 'Error : '+str(e))
        return render(request, "errorspage.html", {})

def compliance_form_forward(request):
    try:
        #print('compliance-form-forward')
        listgrid=[]
        count=1
        cuser=request.user.username
        desigid=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].designation_code
        #print(cuser,desigid,'CUSER, DESIGID')
        item_details=m1.Item_details.objects.values().order_by('-inspection_no__inspected_on')
        #print(item_details,'01234')
        for i in item_details:
            if i['type'] == 'SH' and m1.Marked_Officers.objects.filter(item_no_id=i['item_no'], marked_to_id=desigid, status_flag=1):
                marked=m1.Marked_Officers.objects.filter(item_no_id=i['item_no'],status_flag=1,marked_to_id=desigid).values('item_no_id')
                if m1.Marked_Officers_forward.objects.filter(marked_no_id__item_no_id__in=marked,status_flag=1):
                    temp={}
                    temp['sr_no']=count
                    temp['inspection_no']=i['inspection_no_id']
                    note_no=m1.Inspection_details.objects.filter(inspection_no=i['inspection_no_id'])[0].inspection_note_no
                    temp['inspection_note_no']=note_no
                    temp['item_no']=i['item_no']
                    temp['observation']=i['observation']
                    inspected_on=m1.Inspection_details.objects.filter(inspection_no=i['inspection_no_id'])[0].inspected_on
                    temp['inspected_on']=inspected_on.strftime("%d/%m/%y") if inspected_on!=None else 'NA'
                    inspect_officer=m1.Inspection_details.objects.filter(inspection_no=i['inspection_no_id'])[0].inspection_officer_id
                    inspecting_officer=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=inspect_officer)[0].designation
                    print(inspecting_officer,'inspecting_officer')
                    temp['inspecting_officer']=inspecting_officer if inspecting_officer!=None else 'NA'
                    listgrid.append(temp)
                    count=count+1
        #print(listgrid,'-------------------------,pending')
        list1=models.railwayLocationMaster.objects.filter(location_type_desc__in=['RAILWAY BOARD', 'PRODUCTION UNIT', 'HEAD QUATER','OFFICE', 'PSU', 'PRODUCTION UNIT', 'INSTITUTE']).values('location_code').distinct().order_by('location_code')
        list2=[]
        for i in list1:
            # print(i['location_code'],'_________')
            list2.append(i['location_code'])
        list3=models.railwayLocationMaster.objects.filter(location_type_desc__in=['DIVISION','WORKSHOP', 'STORE', 'CONSTRUCTION', 'OFFICE']).distinct().values('location_code', 'location_type').order_by('location_code')
        list4=[]
        for i in list3:
            list4.append({'location_code': i['location_code'], 'location_type': i['location_type']}) 
        list5=models.departMast.objects.all().values('department_name').order_by('department_name')
        list6=[]
        for i in list5:
            # print(i['department_name'],'_________')
            list6.append(i['department_name']) 
        context={
            'zone':list2 ,
            'division':list4,
            'dept':list6,
            'listgrid':listgrid,
        }
        #print(list2,'_____________')
        return render(request,'compliance_form_forward.html',context)
    except Exception as e:
        try:
            m1.error_Table.objects.create(fun_name="compliance_form_forward",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        #messages.error(request, 'Error : '+str(e))
        return render(request, "errorspage.html", {})


def fetch_await_reply(request):
    try:
        #print('hi')
        item_no=request.GET.get('item_no')
        inspection_no=m1.Item_details.objects.filter(item_no=item_no)[0].inspection_no_id
        cuser=request.user.username
        cuser_desig_id=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].designation_code
        empno=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].empno_id
        #print(cuser_desig_id,empno,'cuser_id','empno')
        marked_forward=[] 
        if(m1.Marked_Officers.objects.filter(item_no_id=item_no,marked_to_id=cuser_desig_id).exists()):
            marked_no=m1.Marked_Officers.objects.filter(item_no_id=item_no,marked_to_id=cuser_desig_id)[0].marked_no 
            #print(marked_no,"marked_no")
            if(m1.Marked_Officers_forward.objects.filter(marked_no_id=marked_no).exists()):
                marked_forward=m1.Marked_Officers_forward.objects.exclude(status_flag=2).filter(marked_no_id=marked_no).values()
                #print(marked_forward,"marked_forward")
        list1=[]
        item_list=[]
        item_list=item_no_details(inspection_no)
        for j in item_list:
            if(int(item_no)==j['item_test']):
                item=j['count']
                #print(item,'temp')
        for i in marked_forward:
            temp={}
            temp['forward_on']=i['created_on_forward'].strftime("%d/%m/%y") if i['created_on_forward'] != None else 'NA'
            empno=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i['marked_to_forward_id'])[0].empno_id
            temp['designation']=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i['marked_to_forward_id'])[0].designation
            name=[]
            empfname=m1.empmast.objects.filter(empno=empno)[0].empname
            empmname=m1.empmast.objects.filter(empno=empno)[0].empmname
            emplname=m1.empmast.objects.filter(empno=empno)[0].emplname
            if(empmname==None and emplname==None):
                name=empfname
            elif(empmname==None):
                name=empfname + " " + emplname
            elif(emplname==None):
                name=empfname + " " + empmname   
            else:
                name=empfname + " " + empmname + " " + emplname
            #print(name,'NAME-NAME')
            temp['marked_to_forward']=str(name)
            temp['marked_no_forward']=i['marked_no_forward']
            temp['status_flag']=i['status_flag']
            if(m1.Officers_Remark.objects.filter(marked_no_forward_id=i['marked_no_forward'])):
                temp['remark']=m1.Officers_Remark.objects.filter(marked_no_forward_id=i['marked_no_forward'])[0].remark
            list1.append(temp)
        #print(list1,"list1list1")
        return JsonResponse({'list1':list1,'item_no':item_no,'inspection_no':inspection_no,'item':item,}, safe = False)
    except Exception as e:
        try:
            m1.error_Table.objects.create(fun_name="fetch_await_reply",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        #messages.error(request, 'Error : '+str(e))
        return render(request, "errorspage.html", {})

# def compliance_filterdata1(request):
#     # try:
#         if request.method == "GET" and request.is_ajax():
#             rly_id=request.GET.get('rly_id')
#             div_id=request.GET.get('div_id')
#             ofc_idssss=request.GET.get('ofc_id')
#             startDate=request.GET.get('startDate')
#             endDate=request.GET.get('endDate')
#             daterange=datetime.strptime(startDate,'%Y-%m-%d').strftime("%d/%m/%Y")+"-"+datetime.strptime(endDate,'%Y-%m-%d').strftime("%d/%m/%Y")
#             startDate = datetime.strptime(startDate,'%Y-%m-%d')
#             endDate = datetime.strptime(endDate,'%Y-%m-%d')
            
#             str=request.GET.get('str')
#             listss=[]
#             count=1
#             print(rly_id,div_id,ofc_idssss,startDate,endDate)
            
#             if ofc_idssss=="":
#                 # print("here")
#                 if rly_id=="" and div_id=="":
#                     # print("here too")
#                     inspect_details=m1.Inspection_details.objects.filter(inspected_on__gte=startDate,inspected_on__lte=endDate).values()
#                     # print(inspect_details)
#                 elif rly_id=="":
#                     insp_details=m1.Insp_multi_location.objects.filter(Q(type='DIV',item=div_id)).values('inspection_no_id')
#                     inspect_details=m1.Inspection_details.objects.filter(inspection_no__in=insp_details,inspected_on__gte=startDate,inspected_on__lte=endDate).values()
#                 elif div_id=="":
#                     insp_details=m1.Insp_multi_location.objects.filter(Q(type='HQ',item=rly_id)).values('inspection_no_id')
#                     inspect_details=m1.Inspection_details.objects.filter(inspection_no__in=insp_details,inspected_on__gte=startDate,inspected_on__lte=endDate).values()
#                 else:
#                     insp_details=m1.Insp_multi_location.objects.filter(Q(type='HQ',item=rly_id)&Q(type='DIV',item=div_id)).values('inspection_no_id')
#                     inspect_details=m1.Inspection_details.objects.filter(inspection_no__in=insp_details,inspected_on__gte=startDate,inspected_on__lte=endDate).values()
#             else:
#                 if rly_id=="" and div_id=="":
#                     inspect_details=m1.Inspection_details.objects.filter(inspected_on__gte=startDate,inspected_on__lte=endDate).values()
#                 elif rly_id=="":
#                     insp_details=m1.Insp_multi_location.objects.filter(Q(type='DIV',item=div_id)).values('inspection_no_id')
#                     inspect_details=m1.Inspection_details.objects.filter(inspection_no__in=insp_details,inspected_on__gte=startDate,inspected_on__lte=endDate).values()
#                 elif div_id=="":
#                     insp_details=m1.Insp_multi_location.objects.filter(Q(type='HQ',item=rly_id)).values('inspection_no_id')
#                     inspect_details=m1.Inspection_details.objects.filter(inspection_no__in=insp_details,inspected_on__gte=startDate,inspected_on__lte=endDate).values()
#                 else:
#                     insp_details=m1.Insp_multi_location.objects.filter(Q(type='HQ',item=rly_id)&Q(type='DIV',item=div_id)).values('inspection_no_id')
#                     inspect_details=m1.Inspection_details.objects.filter(inspection_no__in=insp_details,inspected_on__gte=startDate,inspected_on__lte=endDate).values()

#             cuser=request.user.username
#             if request.user.user_role == 'guest':
#                 cuser=request.user.guest_email
#                 request.user.email=request.user.guest_email
#             desigid=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].designation_code
            
#             # if(str=='pending'):
#             #     for i in inspect_details:
#             #         itemDet=list(m1.Item_details.objects.filter(inspection_no=i['inspection_no']).values('item_no'))
#             #         print(itemDet)
#             #         for j in itemDet:
#             #             marked_to_me=list(m1.Marked_Officers.objects.filter(item_no=j['item_no'],marked_to_id=desigid,status_flag=1).values())
#             #             print(marked_to_me)
#         # data of pending reply view
#             if(str=='pending'):
#                 for i in inspect_details:
#                     if m1.Marked_Officers.objects.filter(item_no_id__inspection_no=i['inspection_no'],marked_to_id=desigid,status_flag=1):
#                         temp={}
#                         temp['sr_no']=count
#                         temp['inspection_no']=i['inspection_no']
#                         temp['inspection_note_no']=i['inspection_note_no']
#                         temp['inspection_title']=i['inspection_title']
#                         t=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i['inspection_officer_id']).values('designation')
#                         if len(t)!=0:
#                             temp['inspection_officer']=t[0]['designation']
#                             # print(temp['inspection_officer'],"hello apeksha")
#                             if ofc_idssss!='':
#                                 if temp['inspection_officer']!=ofc_idssss:
#                                     continue
#                         else:
#                             temp['inspection_officer']='NA'
#                         temp['inspected_on']=i['inspected_on'].strftime("%d/%m/%y") if i['inspected_on']!=None else 'NA'
#                         temp['viewed_on']=i['modified_on'].strftime("%d/%m/%y") if i['modified_on']!=None else 'Pending'
#                         temp['file_path']=i['report_path']

#                         total_items_marked = m1.Marked_Officers.objects.exclude(status_flag=4).filter(item_no__inspection_no_id=i['inspection_no'],marked_to_id=desigid).count()
#                         total_items_complied = m1.Marked_Officers.objects.filter(item_no__inspection_no_id=i['inspection_no'],marked_to_id=desigid, status_flag=3).count()
#                         total_items_pending = m1.Marked_Officers.objects.filter(item_no__inspection_no_id=i['inspection_no'],marked_to_id=desigid, status_flag=1).count()

#                         temp['total_items_marked']=total_items_marked
#                         temp['total_items_complied']=total_items_complied
#                         temp['total_items_pending']=total_items_pending
                        
#                         listss.append(temp)
#                         count=count+1

                        
#                 for l in listss:
#                     marked_of = m1.Marked_Officers.objects.filter(item_no__inspection_no_id=l['inspection_no'], status_flag=1, marked_to_id=desigid).values_list('marked_no', flat=True) 
#                     for_mark = m1.Marked_Officers_forward.objects.filter(marked_no__in=marked_of).values()
#                     if for_mark:
#                         l.update({'for_flag':1})
#                     else:
#                         l.update({'for_flag':0})
                    
#                     total_for_mark=m1.Marked_Officers_forward.objects.filter(marked_no__in=marked_of).count()
#                     no_for_mark=m1.Marked_Officers_forward.objects.filter(marked_no__in=marked_of).distinct('marked_no').count()
#                     marked_forwards_reply=0
#                     # total_forwarded = list(m1.Marked_Officers_forward.objects.filter(marked_no__in=marked_of).distinct('marked_no').values_list('marked_no', flat=True))
#                     total_forwarded = list(m1.Marked_Officers_forward.objects.filter(marked_no__in=marked_of).values_list('marked_no', flat=True))
#                     for t in total_forwarded:
#                         marked_forwards = list(m1.Marked_Officers_forward.objects.filter(marked_no=t).values_list('marked_no_forward', flat=True))
#                         marked_forwards_pending=m1.Marked_Officers_forward.objects.filter(marked_no_forward__in=marked_forwards, status_flag__in=[1,3]).count()
#                         # if marked_forwards_pending==0:
#                         #     marked_forwards_reply+=1
#                         marked_forwards_reply=total_for_mark-marked_forwards_pending
#                     l.update({'total_for_mark':total_for_mark,'marked_forwards_reply':marked_forwards_reply,'no_for_mark':no_for_mark})

            
                
#                 # print(listss,'pending')
#         # data of send reply view
#             elif(str=='send'):
#                 for i in inspect_details:
#                     if m1.Marked_Officers.objects.filter(item_no_id__inspection_no=i['inspection_no'],marked_to_id=desigid,status_flag=2):
#                         temp={}
#                         temp['sr_no']=count
#                         temp['inspection_no']=i['inspection_no']
#                         temp['inspection_note_no']=i['inspection_note_no']
#                         temp['inspection_title']=i['inspection_title']
#                         t=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i['inspection_officer_id']).values('designation')
#                         if len(t)!=0:
#                             temp['inspection_officer']=t[0]['designation']
#                             # print(temp['inspection_officer'],"hello apeksha")
#                             if ofc_idssss!='':
#                                 if temp['inspection_officer']!=ofc_idssss:
#                                     continue
#                         else:
#                             temp['inspection_officer']='NA'
#                         temp['inspected_on']=i['inspected_on'].strftime("%d/%m/%y") if i['inspected_on']!=None else 'NA'
#                         temp['viewed_on']=i['modified_on'].strftime("%d/%m/%y") if i['modified_on']!=None else 'Pending'
#                         temp['file_path']=i['report_path']
#                         listss.append(temp)
#                         count=count+1
#                 print(listss,'send')
#         # data of accepted reply view
#             elif(str=='accept'):
#                 for i in inspect_details:
#                     if m1.Marked_Officers.objects.filter(item_no_id__inspection_no=i['inspection_no'],marked_to_id=desigid,status_flag=3):
#                         temp={}
#                         temp['sr_no']=count
#                         temp['inspection_no']=i['inspection_no']
#                         temp['inspection_note_no']=i['inspection_note_no']
#                         temp['inspection_title']=i['inspection_title']
#                         t=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i['inspection_officer_id']).values('designation')
#                         if len(t)!=0:
#                             temp['inspection_officer']=t[0]['designation']
#                             # print(temp['inspection_officer'],"hello apeksha")
#                             if ofc_idssss!='':
#                                 if temp['inspection_officer']!=ofc_idssss:
#                                     continue
#                         else:
#                             temp['inspection_officer']='NA'
#                         temp['inspected_on']=i['inspected_on'].strftime("%d/%m/%y") if i['inspected_on']!=None else 'NA'
#                         temp['viewed_on']=i['modified_on'].strftime("%d/%m/%y") if i['modified_on']!=None else 'Pending'
#                         temp['file_path']=i['report_path']
#                         listss.append(temp)
#                         count=count+1
#                 print(listss,'accept')
#         # data of rejected reply view
#             elif(str=='reject'):
#                 for i in inspect_details:
#                     item=m1.Item_details.objects.filter(inspection_no_id=i['inspection_no']).values('item_no')
#                     marked=m1.Marked_Officers.objects.filter(item_no_id__in=item,marked_to_id=desigid).values('marked_no')
#                     #print(marked,'rejectreject')
#                     if(len(marked)!=0):
#                         if m1.Officers_Remark.objects.filter(marked_no_id__in=marked,marked_desig_id_id=desigid):
#                             temp={}
#                             temp['sr_no']=count
#                             temp['inspection_no']=i['inspection_no']
#                             temp['inspection_note_no']=i['inspection_note_no']
#                             temp['inspection_title']=i['inspection_title']
#                             t=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i['inspection_officer_id']).values('designation')
#                             if len(t)!=0:
#                                 temp['inspection_officer']=t[0]['designation']
#                                 # print(temp['inspection_officer'],"hello apeksha")
#                                 if ofc_idssss!='':
#                                     if temp['inspection_officer']!=ofc_idssss:
#                                         continue
#                             else:
#                                 temp['inspection_officer']='NA'
#                             temp['inspected_on']=i['inspected_on'].strftime("%d/%m/%y") if i['inspected_on']!=None else 'Pending'
#                             temp['file_path']=i['report_path']
#                             listss.append(temp)
#                             count=count+1
#                 print(listss,'reject')
#         # data of rejected reply view
#             elif(str=='revert'):
#                 for i in inspect_details:
#                     if m1.Marked_Officers.objects.filter(item_no_id__inspection_no=i['inspection_no'],marked_to_id=desigid,status_flag=4):
#                         #print(count,'countcount')
#                         temp={}
#                         temp['sr_no']=count
#                         temp['inspection_no']=i['inspection_no']
#                         temp['inspection_note_no']=i['inspection_note_no']
#                         temp['inspection_title']=i['inspection_title']
#                         t=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i['inspection_officer_id']).values('designation')
#                         if len(t)!=0:
#                             temp['inspection_officer']=t[0]['designation']
#                             # print(temp['inspection_officer'],"hello apeksha")
#                             if ofc_idssss!='':
#                                 if temp['inspection_officer']!=ofc_idssss:
#                                     continue
#                         else:
#                             temp['inspection_officer']='NA'
#                         temp['inspected_on']=i['inspected_on'].strftime("%d/%m/%y") if i['inspected_on']!=None else 'NA'
#                         t1=m1.Marked_Officers.objects.filter(item_no_id__inspection_no=i['inspection_no'],marked_to_id=desigid,status_flag=4).values('reverted_on')
#                         temp['reverted_on']=t1[0]['reverted_on'].strftime("%d/%m/%y") if t1[0]['reverted_on']!=None else 'NA'
#                         temp['file_path']=i['report_path']
#                         listss.append(temp)
#                         count=count+1
#                 print(listss,'revert')            
#         # data of pending query view
#             elif(str=='pending-forward'):
#                 frwd_ofc=request.GET.get('frwd_ofc')
#                 if frwd_ofc=='all':
#                     forward=list(m1.Marked_Officers_forward.objects.filter(marked_to_forward_id=desigid, status_flag__in=[1,3],marked_no__status_flag=1).values_list('created_by_forward',flat=True).distinct('created_by_forward'))
#                 else:
#                     forward=[frwd_ofc]
#                 # print(forward)

#                 marked_no=list(m1.Marked_Officers_forward.objects.filter(marked_to_forward_id=desigid, created_by_forward__in=forward, status_flag__in=[1,3]).values_list('marked_no_id', flat=True).distinct('marked_no_id'))
#                 item_no=list(m1.Marked_Officers.objects.filter(marked_no__in=marked_no,status_flag=1).values_list('item_no_id', flat=True))
#                 insp_no=list(m1.Item_details.objects.filter(item_no__in=item_no).distinct('inspection_no_id').values_list('inspection_no_id', flat=True))
                
#                 for i in inspect_details:      
#                     # if m1.Marked_Officers.objects.filter(item_no__inspection_no_id=i['inspection_no'],marked_no__in=marked_no):
#                     #     item_no=m1.Marked_Officers.objects.filter(item_no__inspection_no_id=i['inspection_no'],marked_no__in=marked_no)[0].item_no_id
#                     #     print(item_no)
#                         # if m1.Marked_Officers_forward.objects.filter(marked_no__item_no=item_no,status_flag__in=[1,3],marked_to_forward_id=desigid):  
#                             # print('ENTERED',i)
#                         if i['inspection_no'] in insp_no:
#                             temp={}
#                             temp['sr_no']=count
#                             temp['inspection_no']=i['inspection_no']
#                             temp['inspection_note_no']=i['inspection_note_no']
#                             temp['inspection_title']=i['inspection_title']
#                             t=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i['inspection_officer_id']).values('designation')
#                             if len(t)!=0:
#                                 temp['inspection_officer']=t[0]['designation']
#                                 temp['inspection_officer_id']=i['inspection_officer_id']
#                                 if ofc_idssss!='':
#                                     if temp['inspection_officer']!=ofc_idssss:
#                                         continue
#                             else:
#                                 temp['inspection_officer']='NA'
#                             temp['inspected_on']=i['inspected_on'].strftime("%d/%m/%y") if i['inspected_on']!=None else 'NA'
#                             temp['file_path']=i['report_path']
#                             listss.append(temp)
#                             count=count+1
#                 print(listss,'pending-forward')
#         # data of sent query view
#             elif(str=='sent-forward'):
#                 marked_no=list(m1.Marked_Officers_forward.objects.filter(marked_to_forward_id=desigid, status_flag=2).values_list('marked_no_id', flat=True).distinct('marked_no_id'))
#                 item_no=list(m1.Marked_Officers.objects.filter(marked_no__in=marked_no).values_list('item_no_id', flat=True))
#                 insp_no=list(m1.Item_details.objects.filter(item_no__in=item_no).distinct('inspection_no_id').values_list('inspection_no_id', flat=True))
                
#                 for i in inspect_details:      
#                     # marked_no=m1.Marked_Officers_forward.objects.filter(marked_to_forward_id=desigid).values('marked_no_id')
#                     # if m1.Marked_Officers.objects.filter(item_no__inspection_no_id=i['inspection_no'],marked_no__in=marked_no,status_flag=1):
#                     #     item_no=m1.Marked_Officers.objects.filter(item_no__inspection_no_id=i['inspection_no'],marked_no__in=marked_no)[0].item_no_id
#                     #     if m1.Marked_Officers_forward.objects.filter(marked_no__item_no=item_no,status_flag=1,marked_to_forward_id=desigid):  
#                         if i['inspection_no'] in insp_no:    
#                             temp={}
#                             temp['sr_no']=count
#                             temp['inspection_no']=i['inspection_no']
#                             temp['inspection_note_no']=i['inspection_note_no']
#                             temp['inspection_title']=i['inspection_title']
#                             t=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i['inspection_officer_id']).values('designation')
#                             if len(t)!=0:
#                                 temp['inspection_officer']=t[0]['designation']
#                                 temp['inspection_officer_id']=i['inspection_officer_id']
#                                 if ofc_idssss!='':
#                                     if temp['inspection_officer']!=ofc_idssss:
#                                         continue
#                             else:
#                                 temp['inspection_officer']='NA'
#                             temp['inspected_on']=i['inspected_on'].strftime("%d/%m/%y") if i['inspected_on']!=None else 'NA'
#                             temp['file_path']=i['report_path']
#                             listss.append(temp)
#                             count=count+1
#                         # print(listss,'send-forward')

#             # data of forwarded by me view
#             if (str=='forwarded_all'):
#                 inspections_forwarded=list(m1.Marked_Officers_forward.objects.filter(marked_no__marked_to=desigid,marked_no__status_flag=1).values_list('marked_no__item_no__inspection_no', flat=True).distinct())
#                 for i in inspect_details:
#                     if i['inspection_no'] in inspections_forwarded:
#                         temp={}
#                         temp['sr_no']=count
#                         temp['inspection_no']=i['inspection_no']
#                         temp['inspection_note_no']=i['inspection_note_no']
#                         temp['inspection_title']=i['inspection_title']
#                         t=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i['inspection_officer_id']).values('designation')
#                         if len(t)!=0:
#                             temp['inspection_officer']=t[0]['designation']
#                             temp['inspection_officer_id']=i['inspection_officer_id']
#                             if ofc_idssss!='':
#                                 if temp['inspection_officer']!=ofc_idssss:
#                                     continue
#                         else:
#                             temp['inspection_officer']='NA'
#                         temp['inspected_on']=i['inspected_on'].strftime("%d/%m/%y") if i['inspected_on']!=None else 'NA'
#                         t1=m1.Marked_Officers.objects.filter(item_no_id__inspection_no=i['inspection_no'],marked_to_id=desigid,status_flag=1).values('viewed_on')
#                         # temp['viewed_on']=t1[0]['viewed_on'].strftime("%d/%m/%y") if t1[0]['viewed_on']!=None else 'Pending'
#                         temp['file_path']=i['report_path']
#                         listss.append(temp)
#                         count=count+1  
            
#             for i in listss:
#                 locs = list(m1.Insp_multi_location.objects.filter(inspection_no=i['inspection_no']).values('item', 'type'))
#                 zne=[]
#                 dvs=[]
#                 for l in locs:
#                     if l['type']=='HQ':
#                         zne.append(l['item'])
#                     elif l['type']!='LOC':
#                         dvs.append(l['item'])
#                 i.update({'zone':zne})
#                 i.update({'div':dvs})
#                 # temp['zone']=zne
#                 # temp['div']=dvs
#                 print(listss)
           

#            #PHASE 2
#             rly_list=list(models.railwayLocationMaster.objects.filter(location_code=rly_id,location_type='ZR').values_list('rly_unit_code',flat=True))
#             if div_id:
#                 div_code=div_id.split('-')[0]
#                 div_type=div_id.split('-')[1]
#                 div_list=list(models.railwayLocationMaster.objects.filter(location_code=div_code,location_type=div_type).values_list('rly_unit_code',flat=True))
#             else:
#                 div_list=[]
#             if ofc_idssss == '':
#                 ofc_list=[]
#             else:
#                 ofc_list=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation=ofc_idssss).values_list('designation_code', flat=True)
            
#             print(str,rly_list,div_list,daterange,ofc_list)
#             phase2=phase2_filter(request,str,rly_list,div_list,daterange,ofc_list)
#             return JsonResponse({'inspect_details':listss,'phase2':phase2})
        

#     # except Exception as e:
#     #     try:
#     #         m1.error_Table.objects.create(fun_name="compliance_filterdata1",user_id=request.user,err_details=str(e))
#     #     except:
#     #         print("Internal Error!!!")
#     #     #messages.error(request, 'Error : '+str(e))
#     #     return render(request, "errorspage.html", {})



# END-GUNJAN


# def home(request):
#     if request.method == "POST":
#         firstName=request.POST.get('firstName')
#         middleName=request.POST.get('middleName')
#         lastName=request.POST.get('lastName')
#         email=request.POST.get('official_emailID')
#         official_mobileNo=request.POST.get('official_mobileNo')
#         personal_emailID=request.POST.get('personal_emailID')
#         personal_mobileNo=request.POST.get('personal_mobileNo')
#         faxNo=request.POST.get('faxNo')
#         aadhaarNo=request.POST.get('aadhaarNo')
#         password=request.POST.get('password')
#         user.objects.create_user(first_name=firstName,middle_name=middleName,last_name=lastName
#         ,email=email,official_mobileNo=official_mobileNo,personal_emailID=personal_emailID,
#         personal_mobileNo=personal_mobileNo,faxNo=faxNo,aadhaar_no=aadhaarNo,password=password)
#     return render(request, 'home.html')

#furqan

def railway_zone(request):
    try:
        data = models.railwayLocationMaster.objects.filter(location_type='ZR').values('location_description','location_code').order_by('location_code')
        #data1 = models.railwayLocationMaster.objects.filter(location_type='DIV').values('location_description','location_code')
        list1=[]

            
        for i in data:
            temp={}
            c1=0
            c2=0
            c3=0
            t= m1.Inspection_details.objects.filter(zone=i['location_code']).values('inspection_no')
            if len(t)>0:
                for j in t:
                    temp1=m1.Item_details.objects.filter(inspection_no=j['inspection_no']).values()
                    for c in temp1:
                        if c['status_flag'] ==1:
                            c1 +=1
                        elif c['status_flag'] ==2:
                            c2+=1
                        elif c['status_flag'] ==3:
                            c3+=1
                            
                temp3=len(temp1)     
            else:
                temp3=0
            
            temp['ins_no']=temp3
            temp['location_description']=i['location_description']
            temp['location_code']=i['location_code']
            temp['c1']= c1
            temp['c2']= c2
            temp['c3']= c3
            list1.append(temp)
        return JsonResponse({'data':list1}, safe=False)
    except Exception as e:
        try:
            m1.error_Table.objects.create(fun_name="railway_zone",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        #messages.error(request, 'Error : '+str(e))
        return render(request, "errorspage.html", {})   

def item_divsion(request):
    try:
        data1 = models.railwayLocationMaster.objects.filter(location_type='DIV').values('location_description','parent_location_code','location_code').order_by('parent_location_code','location_code')
        #print(data1)
        list2=[]
        for i in data1:
            temp1={}
            c1=0
            c2=0
            c3=0
            t1 = m1.Inspection_details.objects.filter(division=i['location_code']).values()
            print(t1)
            if len(t1)>0:
                for j in t1:
                    temp2 = m1.Item_details.objects.filter(inspection_no=j['inspection_no']).values()
                for c in temp2:
                        if c['status_flag'] ==1:
                            c1 +=1
                        elif c['status_flag'] ==2:
                            c2+=1
                        elif c['status_flag'] ==3:
                            c3+=1
                temp4 = len(temp2)
            else:
                temp4=0
            
            
            temp1['ins_no']=temp4
            temp1['location_description']=i['location_description']
            temp1['location_code']=i['location_code']
            temp1['parent_location_code']=i['parent_location_code']
            temp1['c1'] = c1
            temp1['c2'] = c2
            temp1['c3'] = c3
            list2.append(temp1)
        
        return JsonResponse({'data1':list2}, safe=False)
    except Exception as e:
        try:
            m1.error_Table.objects.create(fun_name="item_divsion",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        #messages.error(request, 'Error : '+str(e))
        return render(request, "errorspage.html", {})   
    
    
#24.06.22
def item_detail_view(request):
    try:
        itdv = m1.Item_details.objects.values('inspection_no','inspection_no__inspection_title','inspection_no__dept','inspection_no__inspected_on','status','inspection_no__inspection_officer','target_date','observation', 'item_no') 
        return render(request,'items_dt_view.html', context={'itdv':itdv})
    except Exception as e:
        try:
            m1.error_Table.objects.create(fun_name="item_detail_view",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        #messages.error(request, 'Error : '+str(e))
        return render(request, "errorspage.html", {}) 
#27-06-22
def item_view_inspect(request, item):
    try:
        ivi = m1.Item_details.objects.filter(item_no=item).values('item_no','inspection_no','inspection_no__zone','inspection_no__dept','inspection_no__location','item_title','modified_on','modified_by','status_flag','status','created_on','observation','marked_officers','created_by','target_date')

        return render(request,'item_view_inspect.html',context={'ivi':ivi})
    except Exception as e:
        try:
            m1.error_Table.objects.create(fun_name="item_view_inspect",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        #messages.error(request, 'Error : '+str(e))
        return render(request, "errorspage.html", {}) 

from django.shortcuts import render,redirect

def schedular_form(request):
    try:
        list1=models.railwayLocationMaster.objects.filter(location_type='ZR').values('location_code')

        list2=[]
        for i in list1:
            # print(i['location_code'],'_________')
            list2.append(i['location_code'])
        list3=models.railwayLocationMaster.objects.filter(location_type='DIV').values('location_code')
        #print(list3)
        list4=[]
        for i in list3:
            # print(i['location_code'],'_________')
            list4.append(i['location_code'])
            #print(list4)
        #empdata=m1.empmast.objects.values('empname','empno', 'desig_longdesc')
        #desig_longdesc = empdata[0]['desig_longdesc']
        list5=list(models.Level_Desig.objects.exclude(delete_flag=True).exclude(Q(delete_flag=True)).all().values('designation_code', 'designation'))
        list6=models.departMast.objects.all().values('department_name')
        #new code
        ins_id=request.GET.get('ins_id')
        # print(ins_id,'______________________________')
        ins_detail=[]
        item_id=[]
        length = 0
        sh = []
        ssh = []
        if ins_id!=None:
            # print('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')
            ins_detail=list(m1.Inspection_details.objects.filter(inspection_no=ins_id).values())
            item_details1= list(m1.Item_details.objects.filter(inspection_no_id=ins_id).values().order_by('sl_no'))
            item_data= m1.Item_details.objects.filter(inspection_no_id=ins_id, type="H").values()
            length += item_data.count()

            for zb in item_details1:
                item_id.append(zb['des_id'])

            for x in range(len(item_data)):
                mid= str(x+1)+'.'
                itmdata = m1.Item_details.objects.filter(inspection_no_id=ins_id, type="SH", des_id__startswith=mid).values()
                ssh.append(0)
                sh.append(len(itmdata))
                for y in range(len(itmdata)):
                    nid= str(x+1)+'.'+ str(y+1)+'.'
                    itmdata1 = m1.Item_details.objects.filter(inspection_no_id=ins_id, type="SSH", des_id__startswith=nid).count()
                    ssh.append(itmdata1)
            
            #print('len', length,'sh',  sh,'ssh', ssh)
            for j in item_details1:
                
                if j['type'] == 'SH':
                    mark=m1.Marked_Officers.objects.filter(item_no=j['item_no']).values()
                    #print('---------', j['item_no'])
                    mrkoffi = {}
                    desig_longdesc1 =''
                    marked_officers1 = ''
                    for x in mark:
                        # print('xxxxxxxxx', x['myuser_id_id'])
                        
                        marked=m1.empmast.objects.filter(myuser_id=x['myuser_id_id'])
                        # print('yyyyyyyy', marked[0].desig_longdesc)
                        desig_longdesc1 += marked[0].desig_longdesc+','
                        marked_officers1 += marked[0].empno+','
                    # print('kkkkkkkkkkkkkkk', desig_longdesc1)
                    mrkoffi.update({'marked_officers': marked_officers1, 'desig_longdesc': desig_longdesc1})
                    
                    j.update({'mrkoffi': mrkoffi})
                    # print('mmmmmmmm', desig_longdesc1)
                
            ins_detail[0].update({'item_details1': item_details1})
            # print('00000000', ins_detail)
            # print('00000000', ins_detail)

        if request.method == 'POST':
            #print(request.POST)
            event_title = request.POST.get('event_title')
            description = request.POST.get('description')
            x= m1.Events(event_title=event_title,description=description)
        #  y= x.event_id
            t=x.save()
                    
            y1= m1.Events.objects.get(event_title=event_title,description=description)


            Railways_act = request.POST.get('Railways_act0')
            Division_act = request.POST.get('Division_act0')
            location3_act = request.POST.get('location3_act0')
            date_to_act = request.POST.get('date_to_act0')
            date_to_act = datetime.strptime(date_to_act, '%d-%m-%Y').strftime('%Y-%m-%d')
            z=m1.Event_activty(Railways_act=Railways_act,Division_act=Division_act,location3_act=location3_act,date_to_act=date_to_act,event_id=y1)
            # print('--------------check event activity data-------',z)
            z.save()
            
        
            mylen = int(request.POST.get('len2'))
            
            for i in range(mylen-1):
                Railways_act1 = request.POST.get("Railways_act0" + str(i))
                Division_act1 = request.POST.get("Division_act0" + str(i))
                #print("divsion",Division_act1)
                location3_act1 = request.POST.get("location3_act0" + str(i))
                date_to_act1 = request.POST.get("date_to_act0" + str(i))
                #print("mydata",date_to_act1)
                date_to_act12 = datetime.strptime(str(date_to_act1),'%d-%m-%Y').strftime('%Y-%m-%d')
                
                m1.Event_activty.objects.create(Railways_act=Railways_act1,Division_act=Division_act1,location3_act=location3_act1,date_to_act=date_to_act12,event_id=y1)                   
            # empdata=m1.empmast.objects.filter(myuser_id=request.user).values('empname','empno', 'desig_longdesc')
            # desig_longdesc = empdata[0]['desig_longdesc']
            # list5=list(m1.Designation_Master.objects.all().values('master_name','designation_master_no','master_email'))
            # list6=models.departMast.objects.all().values('department_name')
    

            list1=models.railwayLocationMaster.objects.filter(location_type='ZR').values('location_code')
            #print("list1",list1)
            list2=[]
            for i in list1:
            # print(i['location_code'],'_________')
                list2.append(i['location_code'])
                list3=models.railwayLocationMaster.objects.filter(location_type='DIV').values('location_code')
                #print("list3",list3)
                list4=[]
            for i in list3:
        # print(i['location_code'],'_________')
                list4.append(i['location_code'])
                #print(list4)
            messages.success(request,"data is saved")
            
            # for new code
            ins_id=request.GET.get('ins_id')
        # print(ins_id,'______________________________')
        ins_detail=[]
        item_id=[]
        length = 0
        sh = []
        ssh = []
        if ins_id!=None:
            # print('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')
            ins_detail=list(m1.Inspection_details.objects.filter(inspection_no=ins_id).values())
            item_details1= list(m1.Item_details.objects.filter(inspection_no_id=ins_id).values().order_by('sl_no'))
            item_data= m1.Item_details.objects.filter(inspection_no_id=ins_id, type="H").values()
            length += item_data.count()

            for zb in item_details1:
                item_id.append(zb['des_id'])

            for x in range(len(item_data)):
                mid= str(x+1)+'.'
                itmdata = m1.Item_details.objects.filter(inspection_no_id=ins_id, type="SH", des_id__startswith=mid).values()
                ssh.append(0)
                sh.append(len(itmdata))
                for y in range(len(itmdata)):
                    nid= str(x+1)+'.'+ str(y+1)+'.'
                    itmdata1 = m1.Item_details.objects.filter(inspection_no_id=ins_id, type="SSH", des_id__startswith=nid).count()
                    ssh.append(itmdata1)
            
            #print('len', length,'sh',  sh,'ssh', ssh)
            for j in item_details1:
                
                if j['type'] == 'SH':
                    mark=m1.Marked_Officers.objects.filter(item_no=j['item_no']).values()
                    #print('---------', j['item_no'])
                    mrkoffi = {}
                    desig_longdesc1 =''
                    marked_officers1 = ''
                    for x in mark:
                        #print('xxxxxxxxx', x['myuser_id_id'])
                        
                        marked=m1.empmast.objects.filter(myuser_id=x['myuser_id_id'])
                        #print('yyyyyyyy', marked[0].desig_longdesc)
                        desig_longdesc1 += marked[0].desig_longdesc+','
                        marked_officers1 += marked[0].empno+','
                    #print('kkkkkkkkkkkkkkk', desig_longdesc1)
                    mrkoffi.update({'marked_officers': marked_officers1, 'desig_longdesc': desig_longdesc1})
                    
                    j.update({'mrkoffi': mrkoffi})
                    # print('mmmmmmmm', desig_longdesc1)
                
            ins_detail[0].update({'item_details1': item_details1})
            # print('00000000', ins_detail)
            #print('00000000', ins_detail)

            # Event_Activity.objects.create(Railways=Railways,Division=Division,location3=location3,date_to=date_to)
    
            
        
        return render(request,'schedular_form.html',context={'Zone':list2,'Division':list4,'marked_to':list5,'department':list6, 'ins_detail':ins_detail,
                'item_id': item_id,
                'length_of_h': length,
                'sh_list': sh,
                'ssh_list': ssh}) 
    except Exception as e:
        try:
            m1.error_Table.objects.create(fun_name="schedular_form",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        #messages.error(request, 'Error : '+str(e))
        return render(request, "errorspage.html", {}) 
    
    
from django.core.paginator import Paginator
def schedular(request):
    try:
        sdv = list(m1.Event_activty.objects.values('event_id__event_title','event_id__description','Railways_act','Division_act','location3_act','date_to_act','status').order_by('-activity_id'))
        for i in sdv:        
            if i['status'] == '0':
                print("Event is in begining")
            
        paginator = Paginator(sdv, 6) # Show 6  event in one page

        page_number = request.GET.get('page')
        page_obj = paginator.get_page(page_number)
        return render(request,'Schedular.html',context={'page_obj': page_obj})
    except Exception as e:
        try:
            m1.error_Table.objects.create(fun_name="schedular",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        #messages.error(request, 'Error : '+str(e))
        return render(request, "errorspage.html", {}) 

def EditFunction(request):
    try:
        if request.method == 'GET' and request.is_ajax():
            activity_id = request.GET.get('id')
            activity_obj = list(m1.Event_activty.objects.filter(activity_id=activity_id).values('Railways_act','Division_act','location3_act','date_to_act','activity_id'))
            #print('print ajax edit',activity_obj)
            # return JsonResponse({'activity_obj':activity_obj})
            return JsonResponse(activity_obj,safe=False)
        return JsonResponse({'success':False},status=400)
    except Exception as e:
        try:
            m1.error_Table.objects.create(fun_name="EditFunction",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        #messages.error(request, 'Error : '+str(e))
        return render(request, "errorspage.html", {}) 

def saveFunction(request):
    try:
        if request.method == 'POST' and request.is_ajax():
            rail = request.POST.get('railways')
            div = request.POST.get('Division')
            location = request.POST.get('location')
            date = request.POST.get('date')
            # updated_date = datetime.strptime(date, '%d-%m-%Y').strftime('%Y-%m-%d')

            activity_id = request.POST.get('activity_id')
            # print('----checking save function-----',rail)
            # print('-----check division-----',div)
            # print('-----location-----',location)
            # print('-----date-----',date)
            # print('-----activity_id-----',activity_id)
            act_obj = m1.Event_activty.objects.filter(activity_id=activity_id).update(Railways_act=rail,Division_act=div,location3_act=location,date_to_act=date)
            return JsonResponse(act_obj,safe=False)
        return JsonResponse({'success':False},status=400)
    except Exception as e:
        try:
            m1.error_Table.objects.create(fun_name="saveFunction",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        #messages.error(request, 'Error : '+str(e))
        return render(request, "errorspage.html", {}) 


# def create_inspection_details(request):
#     # try:
#         if request.method == "POST" and request.is_ajax():
#             from datetime import datetime
#             final=request.POST.get('final_partinspected')
#             final_id=request.POST.get('id_partinspected')
#             rly=json.loads(request.POST.get('zone'))
#             div=json.loads(request.POST.get('division'))
#             # dept=json.loads(request.POST.get('department'))
#             loc=json.loads(request.POST.get('location'))
#             insdt=request.POST.get('txtDate2')
#             accompany=json.loads(request.POST.get('accompany'))

            
#             #print(accompany, '-----------')
#             if 'to' in insdt:
#                 dt = insdt.split('to')
#                 st_date = dt[0].strip()
#                 en_date = dt[1].strip()

#                 start_date = datetime.strptime(st_date, '%d/%m/%y').strftime('%Y-%m-%d')
#                 inspected_on = datetime.strptime(en_date, '%d/%m/%y').strftime('%Y-%m-%d')

#             else:
                
#                 inspected_on = datetime.strptime(insdt, '%d/%m/%y').strftime('%Y-%m-%d')
#                 start_date = datetime.strptime(insdt, '%d/%m/%y').strftime('%Y-%m-%d')

#             title=request.POST.get('titleinsp')
#             send_to=request.POST.get('send_to')
#             send_desig=request.POST.get('send_desig')
            
#             finalval = json.loads(final)
#             final_allid = json.loads(final_id)
#             year = str(datetime.now().year)

#             # empno=models.Level_Desig.objects.exclude(delete_flag=True).filter(official_email_ID=request.user)
#             empnox = models.Level_Desig.objects.exclude(delete_flag=True).filter(Q(official_email_ID=request.user) | Q(official_email_ID=request.user.email), empno__isnull=False)
#             if empnox:
#                 empno = empnox[0].empno_id
#                 desig = empnox[0].designation
#                 ddesig = empnox[0].designation_code
#             else:
#                 messages.error(request, 'Employee id not found')
                
#             note_ = year+'/'+desig+'/Insp'+'/'
#             # last_note1 = m1.Inspection_details.objects.filter(inspection_note_no__istartswith=note_).aggregate(Max('insp_last'))['insp_last__max']
#             last_note1 = m1.Inspection_details.objects.filter(inspection_note_no__istartswith=note_).aggregate(Max('insp_last'))
            
#             #print('last_note1====', len(last_note1))
            
#             if last_note1['insp_last__max'] == None:
#                 last_note1 = 1
#                 note_no = year+'/'+desig+'/Insp'+'/'+ str(last_note1)
                
#             else:
#                 last_note1 = int(last_note1['insp_last__max']) +1
#                 note_no = year+'/'+desig+'/Insp'+'/'+ str(last_note1)

#             m1.Inspection_details.objects.create(inspection_title=title,created_on=datetime.now(), created_by=empno, insp_last=last_note1,inspection_note_no=note_no, inspection_officer_id=ddesig, item_type='Insp', modified_by=empno, status_flag=1, start_date=start_date, inspected_on=inspected_on)
            
            


#             messages.info(request, f'Inspection note successfully saved with Inspection Note No: {note_no}')
            
#             inspection_id=m1.Inspection_details.objects.all().last().inspection_no

#             if m1.Insp_Accompany.objects.filter(inspection_no=inspection_id).exists():
#                 for up in accompany:
#                     m1.Insp_Accompany.objects.filter(inspection_no_id=inspection_id, accompany=up).update(accompany=up)
                            
#             else:
#                 for acc in accompany:
#                     m1.Insp_Accompany.objects.create(accompany=acc, inspection_no_id=inspection_id)
#             #======================change 21-11-22======================
#             for rl in rly:
#                 m1.Insp_multi_location.objects.create(inspection_no_id=inspection_id, item=rl, type='HQ')
#             for di in div:
#                 m1.Insp_multi_location.objects.create(inspection_no_id=inspection_id, item=di, type='DIV')
            
#             for lo in loc:
#                 if lo:
#                     new_loc = lo.split('#')
#                     location = new_loc[0]
#                     location_type = new_loc[1]
#                     location_code = new_loc[2]

#                     #print(location, location_type)
#                     m1.Insp_multi_location.objects.create(inspection_no_id=inspection_id, item=location, item_code=location_code, type='LOC', table_from=location_type)
            
#             #========================
            
#             officer_email=[]
#             officer_contact=[]
#             for f, b in zip(finalval, final_allid):
#                 #print(finalval[f], final_allid[b])
#                 for x,y in zip(finalval[f], final_allid[b]):
#                     s = y.split('.')
#                     if len(s) == 1:
#                         hed = 'heading'+y
#                         heading = finalval[f][hed]
#                         m1.Item_details.objects.create(item_title=heading,status_flag=1, created_on=datetime.now(), type='H',des_id=y, inspection_no_id=inspection_id)
#                         y2=str(y+'.1')
#                         if y2 in final_allid[b]:
#                             #print('if',y2)
#                             m1.Item_details.objects.filter(type='H',des_id=y, inspection_no_id=inspection_id).update(status_flag=4)
#                             pass
#                         else:
#                             #print('else',y2)
#                             trz = 'targetdate'+y
#                             officm = 'markeofficer'+y
#                             chk = 'check' + y
                            
#                             targetd = finalval[f][trz]
#                             markof = finalval[f][officm]
#                             checkbox = finalval[f][chk]

#                             if checkbox == '1':
#                                 checkbox = 1
#                             else:
#                                 checkbox = 0
#                             markeofficer = markof.split(',')
#                             if targetd:
#                                 t_date = datetime.strptime(targetd, '%d/%m/%Y').strftime('%Y-%m-%d')
#                             else:
#                                 t_date = None
#                             m1.Item_details.objects.filter(item_title=heading,status_flag=1, type='H',des_id=y, inspection_no_id=inspection_id).update(target_date=t_date, priority=checkbox)
#                             item_id=m1.Item_details.objects.all().last().item_no
#                             #mark officer
                            
#                             if markof:
#                                 for i in markeofficer:
#                                     Desig=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i)
#                                     if Desig:
#                                         Desig1=Desig[0].designation_code
#                                         if Desig[0].official_email_ID:
#                                             officer_email.append(Desig[0].official_email_ID)
#                                         if Desig[0].contactnumber:
#                                             officer_contact.append(Desig[0].contactnumber)

#                                         if m1.Marked_Officers.objects.all().last():
#                                             marked_no_id=(m1.Marked_Officers.objects.all().last().marked_no)+1
#                                         else:
#                                             marked_no_id = 1
#                                         m1.Marked_Officers.objects.create(marked_emp=i,created_on=datetime.now(),created_by=empno, marked_no=marked_no_id,status_flag=1, item_no_id=item_id,marked_to_id=Desig1)
#                                     else:
#                                         print('error')
    
#                     elif len(s) == 2:
#                         ob = 'observation'+y
#                         trz = 'targetdate'+y
#                         officm = 'markeofficer'+y
#                         chk = 'check' + y

#                         observation = finalval[f][ob]
#                         targetd = finalval[f][trz]
#                         markof = finalval[f][officm]
#                         markeofficer = markof.split(',')

#                         checkbox = finalval[f][chk]

#                         if checkbox == '1':
#                             checkbox = 1
#                         else:
#                             checkbox = 0
                        
#                         if targetd:
#                             targetdate = datetime.strptime(targetd, '%d/%m/%Y').strftime('%Y-%m-%d')
#                         else:
#                             targetdate = None
#                         #print(observation)
#                         m1.Item_details.objects.create(observation=observation,priority=checkbox, status_flag=1,inspection_no_id=inspection_id, des_id=y, target_date=targetdate, type='SH')
                        
#                         item_id=m1.Item_details.objects.all().last().item_no
#                         #mark officer
                        
#                         if markof:
#                             for i in markeofficer:
#                                 Desig=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i)
#                                 if Desig:
#                                     Desig1=Desig[0].designation_code
#                                     if Desig[0].official_email_ID:
#                                         officer_email.append(Desig[0].official_email_ID)
#                                     if Desig[0].contactnumber:
#                                         officer_contact.append(Desig[0].contactnumber)

#                                     if m1.Marked_Officers.objects.all().last():
#                                         marked_no_id=(m1.Marked_Officers.objects.all().last().marked_no)+1
#                                     else:
#                                         marked_no_id = 1
#                                     m1.Marked_Officers.objects.create(created_on=datetime.now(),created_by=empno,marked_emp=i,marked_no=marked_no_id,status_flag=1, item_no_id=item_id,marked_to_id=Desig1)
#                                 else:
#                                     print('error')
#                                     # messages.info(request, 'Employ Desig not Match in Designation Master')
#                         else:
#                             markeofficer=""

                    
                        
#                     else:
#                         subdes = 'subdes'+y
#                         subdes1 = finalval[f][subdes]
#                         m1.Item_details.objects.create(item_subtitle=subdes1,status_flag=4, type='SSH',des_id=y, inspection_no_id=inspection_id)
#             try:

#                 # To=officer_email

#                 subject="Inspection report"
#                 To=['ecegcttarun@gmail.com',]
#                 context = {'title': title}
#                 if len(officer_contact) > 0:
#                     for num in officer_contact:
#                         sendsms(num)
                    
#                 InspSendMail(subject, To, context)
#                 #flag values: 
#                 # 0 - copy to
#                 # 1 - mark officer
#                 # 2 - dealt by

#                 # doc_table:
#                 # i - Inspection_details
#                 # m - Insp_details (minutes)
#                 # d - do_upload
#                 # b - budget


#                 # m1.Insp_mail_details.objects.create(subject=subject, body=title,area='Mark Of', inspection_no_id=inspection_id, send_to=send_to,send_desig=send_desig)
#                 m6.copyto_mails.objects.create(sender_id_id=ddesig, subject=subject,doc_id=inspection_id,  body=title, area_flag=1, doc_table='i', receiver_id=send_to, receiver_desig=send_desig)
#                 messages.success(request, 'Mark officer email has been sent')
                
#             except:
#                 print("error on sending")
#                 messages.error(
#                     request, 'Email send failed. Please Try Again.')
#             # try:
#             offic_mail =[]
#             offic_contact =[]
#             unique_offic_mail = list(set(offic_mail))
#             unique_offic_contact = list(set(offic_contact))
#             if send_to:
#                 emil = send_to.split(',')
#                 for i in emil:
#                     email = models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i)
#                     if email[0].official_email_ID:
#                         offic_mail.append(email[0].official_email_ID)
#                     if Desig[0].contactnumber:
#                         offic_contact.append(Desig[0].contactnumber)
                        
#                 if len(unique_offic_contact) > 0:
#                     for num in unique_offic_contact:
#                         sendsms(num)

#                 subject="Inspection report"
#                 # To = unique_offic_mail
#                 To=['ecegcttarun@gmail.com',]
#                 context = {'title': title}
                    
#                 InspSendMail(subject, To, context)
#                 # m1.Insp_mail_details.objects.create(subject=subject, body=title, area='Copy To', inspection_no_id=inspection_id, send_to=send_to,send_desig=send_desig)
#                 m6.copyto_mails.objects.create(sender_id_id=ddesig, subject=subject,doc_id=inspection_id,  body=title, area_flag=0, doc_table='i', receiver_id=send_to, receiver_desig=send_desig)
#                 messages.success(request, 'Copy to Email has been sent')
                
#             # except:
                
#             #     messages.error(request, 'Email send failed.') 

#             return JsonResponse({"status": 1 })
#         return JsonResponse({"success":False}, status=400)
#         # except Exception as e:
#         #     print("e==",e)  
#         #     return render(request, "commonerrorpage.html", {})
#     # except Exception as e:
#     #     try:
#     #         m1.error_Table.objects.create(fun_name="create_inspection_details",user_id=request.user,err_details=str(e))
#     #     except:
#     #         print("Internal Error!!!")
#     #     #messages.error(request, 'Error : '+str(e))
#     #     return render(request, "errorspage.html", {}) 


# def create_inspection_details(request):
#     try:
#         if request.method == "POST" and request.is_ajax():
#             print("inside create_inspection_details")
#             from datetime import datetime
#             final=request.POST.get('final_partinspected')
#             final_id=request.POST.get('id_partinspected')
#             rly=json.loads(request.POST.get('zone'))
#             div=json.loads(request.POST.get('division'))
#             # dept=json.loads(request.POST.get('department'))
#             loc=json.loads(request.POST.get('location'))
#             insdt=request.POST.get('txtDate2')
#             accompany=json.loads(request.POST.get('accompany'))

            
#             #print(accompany, '-----------')
#             if 'to' in insdt:
#                 dt = insdt.split('to')
#                 st_date = dt[0].strip()
#                 en_date = dt[1].strip()

#                 start_date = datetime.strptime(st_date, '%d/%m/%y').strftime('%Y-%m-%d')
#                 inspected_on = datetime.strptime(en_date, '%d/%m/%y').strftime('%Y-%m-%d')

#             else:
                
#                 inspected_on = datetime.strptime(insdt, '%d/%m/%y').strftime('%Y-%m-%d')
#                 start_date = datetime.strptime(insdt, '%d/%m/%y').strftime('%Y-%m-%d')

#             title=request.POST.get('titleinsp')
#             send_to=request.POST.get('send_to')
#             send_desig=request.POST.get('send_desig')
            
#             finalval = json.loads(final)
#             final_allid = json.loads(final_id)
#             year = str(datetime.now().year)

#             # empno=models.Level_Desig.objects.exclude(delete_flag=True).filter(official_email_ID=request.user)
#             empnox = models.Level_Desig.objects.exclude(delete_flag=True).filter(Q(official_email_ID=request.user) | Q(official_email_ID=request.user.email), empno__isnull=False)
#             if empnox:
#                 empno = empnox[0].empno_id
#                 desig = empnox[0].designation
#                 ddesig = empnox[0].designation_code
#             else:
#                 messages.error(request, 'Employee id not found')
                
#             note_ = year+'/'+desig+'/Insp'+'/'
#             # last_note1 = m1.Inspection_details.objects.filter(inspection_note_no__istartswith=note_).aggregate(Max('insp_last'))['insp_last__max']
#             last_note1 = m1.Inspection_details.objects.filter(inspection_note_no__istartswith=note_).aggregate(Max('insp_last'))
            
#             #print('last_note1====', len(last_note1))
            
#             if last_note1['insp_last__max'] == None:
#                 last_note1 = 1
#                 note_no = year+'/'+desig+'/Insp'+'/'+ str(last_note1)
                
#             else:
#                 last_note1 = int(last_note1['insp_last__max']) +1
#                 note_no = year+'/'+desig+'/Insp'+'/'+ str(last_note1)

#             m1.Inspection_details.objects.create(inspection_title=title,created_on=datetime.now(), created_by=empno, insp_last=last_note1,inspection_note_no=note_no, inspection_officer_id=ddesig, item_type='Insp', modified_by=empno, status_flag=1, start_date=start_date, inspected_on=inspected_on)
            
            


#             messages.info(request, f'Inspection note successfully saved with Inspection Note No: {note_no}')
            
#             inspection_id=m1.Inspection_details.objects.all().last().inspection_no

#             if m1.Insp_Accompany.objects.filter(inspection_no=inspection_id).exists():
#                 for up in accompany:
#                     m1.Insp_Accompany.objects.filter(inspection_no_id=inspection_id, accompany=up).update(accompany=up)
                            
#             else:
#                 for acc in accompany:
#                     m1.Insp_Accompany.objects.create(accompany=acc, inspection_no_id=inspection_id)
#             #======================change 21-11-22======================
#             for rl in rly:
#                 m1.Insp_multi_location.objects.create(inspection_no_id=inspection_id, item=rl, type='HQ')
#             for di in div:
#                 m1.Insp_multi_location.objects.create(inspection_no_id=inspection_id, item=di, type='DIV')
            
#             for lo in loc:
#                 if lo:
#                     new_loc = lo.split('#')
#                     location = new_loc[0]
#                     location_type = new_loc[1]
#                     location_code = new_loc[2]

#                     #print(location, location_type)
#                     m1.Insp_multi_location.objects.create(inspection_no_id=inspection_id, item=location, item_code=location_code, type='LOC', table_from=location_type)
            
#             #========================
            
#             officer_email=[]
#             officer_contact=[]
#             for f, b in zip(finalval, final_allid):
#                 #print(finalval[f], final_allid[b])
#                 for x,y in zip(finalval[f], final_allid[b]):
#                     s = y.split('.')
#                     if len(s) == 1:
#                         hed = 'heading'+y
#                         heading = finalval[f][hed]
#                         tbl_data = finalval[f][y]
#                         m1.Item_details.objects.create(tbl_data=tbl_data,item_title=heading,status_flag=1, created_on=datetime.now(), type='H',des_id=y, inspection_no_id=inspection_id)
#                         y2=str(y+'.1')
#                         if y2 in final_allid[b]:
#                             #print('if',y2)
#                             m1.Item_details.objects.filter(type='H',des_id=y, inspection_no_id=inspection_id).update(status_flag=4)
#                             pass
#                         else:
#                             #print('else',y2)
#                             trz = 'targetdate'+y
#                             officm = 'markeofficer'+y
#                             chk = 'check' + y
                            
#                             targetd = finalval[f][trz]
#                             markof = finalval[f][officm]
#                             checkbox = finalval[f][chk]

                            

#                             if checkbox == '1':
#                                 checkbox = 1
#                             else:
#                                 checkbox = 0
#                             markeofficer = markof.split(',')
#                             if targetd:
#                                 targetd=targetd.split('/')
#                                 targetd='20'+targetd[2].strip()+'-'+targetd[1].strip()+'-'+targetd[0].strip()
#                                 t_date = targetd
                                
#                             else:
#                                 t_date = None
#                             m1.Item_details.objects.filter(item_title=heading,status_flag=1, type='H',des_id=y, inspection_no_id=inspection_id).update(target_date=t_date, priority=checkbox)
#                             item_id=m1.Item_details.objects.all().last().item_no
#                             #mark officer
                            
#                             if markof:
#                                 for i in markeofficer:
#                                     Desig=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i)
#                                     if Desig:
#                                         Desig1=Desig[0].designation_code
#                                         if Desig[0].official_email_ID:
#                                             officer_email.append(Desig[0].official_email_ID)
#                                         if Desig[0].contactnumber:
#                                             officer_contact.append(Desig[0].contactnumber)

#                                         if m1.Marked_Officers.objects.all().last():
#                                             marked_no_id=(m1.Marked_Officers.objects.all().last().marked_no)+1
#                                         else:
#                                             marked_no_id = 1
#                                         m1.Marked_Officers.objects.create(marked_emp=i,created_on=datetime.now(),created_by=empno, marked_no=marked_no_id,status_flag=1, item_no_id=item_id,marked_to_id=Desig1)
#                                     else:
#                                         print('error')
    
#                     elif len(s) == 2:
#                         ob = 'observation'+y
#                         trz = 'targetdate'+y
#                         officm = 'markeofficer'+y
#                         chk = 'check' + y

#                         observation = finalval[f][ob]
#                         targetd = finalval[f][trz]
#                         markof = finalval[f][officm]
#                         markeofficer = markof.split(',')

#                         checkbox = finalval[f][chk]

#                         if checkbox == '1':
#                             checkbox = 1
#                         else:
#                             checkbox = 0
                        
#                         if targetd:
#                             # targetdate = datetime.strptime(targetd, '%d/%m/%Y').strftime('%Y-%m-%d')
#                             targetd=targetd.split('/')
#                             targetd='20'+targetd[2].strip()+'-'+targetd[1].strip()+'-'+targetd[0].strip()
#                             targetdate = targetd
#                         else:
#                             targetdate = None
#                         #print(observation)
#                         tbl_data = finalval[f][y]
#                         m1.Item_details.objects.create(tbl_data=tbl_data,observation=observation,priority=checkbox, status_flag=1,inspection_no_id=inspection_id, des_id=y, target_date=targetdate, type='SH')
                        
#                         item_id=m1.Item_details.objects.all().last().item_no
#                         #mark officer
                        
#                         if markof:
#                             for i in markeofficer:
#                                 Desig=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i)
#                                 if Desig:
#                                     Desig1=Desig[0].designation_code
#                                     if Desig[0].official_email_ID:
#                                         officer_email.append(Desig[0].official_email_ID)
#                                     if Desig[0].contactnumber:
#                                         officer_contact.append(Desig[0].contactnumber)

#                                     if m1.Marked_Officers.objects.all().last():
#                                         marked_no_id=(m1.Marked_Officers.objects.all().last().marked_no)+1
#                                     else:
#                                         marked_no_id = 1
#                                     m1.Marked_Officers.objects.create(created_on=datetime.now(),created_by=empno,marked_emp=i,marked_no=marked_no_id,status_flag=1, item_no_id=item_id,marked_to_id=Desig1)
#                                 else:
#                                     print('error')
#                                     # messages.info(request, 'Employ Desig not Match in Designation Master')
#                         else:
#                             markeofficer=""

                    
                        
#                     else:
#                         subdes = 'subdes'+y
#                         subdes1 = finalval[f][subdes]
#                         tbl_data = finalval[f][y]
#                         m1.Item_details.objects.create(tbl_data=tbl_data,item_subtitle=subdes1,status_flag=4, type='SSH',des_id=y, inspection_no_id=inspection_id)
#             try:

#                 # To=officer_email

#                 subject="Inspection report"
#                 To=['ecegcttarun@gmail.com',]
#                 context = {'title': title}
#                 if len(officer_contact) > 0:
#                     for num in officer_contact:
#                         sendsms(num)
                    
#                 InspSendMail(subject, To, context)
#                 #flag values: 
#                 # 0 - copy to
#                 # 1 - mark officer
#                 # 2 - dealt by

#                 # doc_table:
#                 # i - Inspection_details
#                 # m - Insp_details (minutes)
#                 # d - do_upload
#                 # b - budget


#                 # m1.Insp_mail_details.objects.create(subject=subject, body=title,area='Mark Of', inspection_no_id=inspection_id, send_to=send_to,send_desig=send_desig)
#                 m6.copyto_mails.objects.create(sender_id_id=ddesig, subject=subject,doc_id=inspection_id,  body=title, area_flag=1, doc_table='i', receiver_id=send_to, receiver_desig=send_desig)
#                 messages.success(request, 'Mark officer email has been sent')
                
#             except:
#                 print("error on sending")
#                 messages.error(
#                     request, 'Email send failed. Please Try Again.')
#             # try:
#             offic_mail =[]
#             offic_contact =[]
#             unique_offic_mail = list(set(offic_mail))
#             unique_offic_contact = list(set(offic_contact))
#             if send_to:
#                 emil = send_to.split(',')
#                 for i in emil:
#                     email = models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i)
#                     if email[0].official_email_ID:
#                         offic_mail.append(email[0].official_email_ID)
#                     if Desig[0].contactnumber:
#                         offic_contact.append(Desig[0].contactnumber)
                        
#                 if len(unique_offic_contact) > 0:
#                     for num in unique_offic_contact:
#                         sendsms(num)

#                 subject="Inspection report"
#                 # To = unique_offic_mail
#                 To=['ecegcttarun@gmail.com',]
#                 context = {'title': title}
                    
#                 InspSendMail(subject, To, context)
#                 # m1.Insp_mail_details.objects.create(subject=subject, body=title, area='Copy To', inspection_no_id=inspection_id, send_to=send_to,send_desig=send_desig)
#                 m6.copyto_mails.objects.create(sender_id_id=ddesig, subject=subject,doc_id=inspection_id,  body=title, area_flag=0, doc_table='i', receiver_id=send_to, receiver_desig=send_desig)
#                 messages.success(request, 'Copy to Email has been sent')
                
#             # except:
                
#             #     messages.error(request, 'Email send failed.') 

#             return JsonResponse({"status": 1 })
#         return JsonResponse({"success":False}, status=400)
       
#     except Exception as e:
#         print(e)
#         try:
#             m1.error_Table.objects.create(fun_name="create_inspection_details",user_id=request.user,err_details=str(e))
#         except:
#             print("Internal Error!!!")
#         return render(request, "errorspage.html", {}) 



def MailSend(subject,email_body1,To):
    try:
        # subject = "Verify Your Mail"
        email = 'mfgcris@cris.org.in'

        html_content= MIMEText(email_body1+'<br><div class="container"><img src="cid:myimage"/></div><div style="text-align:center"><a href="#"> Unsubscribe</a></div>', _subtype='html')
        text_content = strip_tags(html_content) # Strip the html tag. So people can see the pure text at least.

        text_file = open("mail.txt", "a") # opening my file
        time=datetime.now()
        date_time=time.strftime("%m/%d/%Y,%H:%M:%S")

        text_file.write("\n\n"+date_time+"\n"+email+'\n'+To+"\n"+subject+"\n"+text_content) 
        text_file.write(text_content) 
        text_file.close() #file close

        img_data = open('rkvy/static/rkvy/images/logo_rkvy.png', 'rb').read()

        html_part = MIMEMultipart(_subtype='related')

        # Create the body with HTML. Note that the image, since it is inline, is 
        # referenced with the URL cid:myimage... you should take care to make
        # "myimage" unique
        html_part.attach(html_content)

        # Now create the MIME container for the image
        img = MIMEImage(img_data, 'png')
        img.add_header('Content-Id', '<myimage>')  # angle brackets are important
        img.add_header("Content-Disposition", "inline", filename="myimage") # David Hess recommended this edit
        html_part.attach(img)

        # Configure and send an EmailMessage
        # Note we are passing None for the body (the 2nd parameter). You could pass plain text
        # to create an alternative part for this message
        msg = EmailMessage(subject, None, email, [To])
        msg.attach(html_part) # Attach the raw MIMEBase descendant. This is a public method on EmailMessage
        msg.send()
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="MailSend",err_details=str(e))
        except:
            print("Internal Error!!!")


# def loginUser(request):
#     # try:
#         if request.method == "POST":
#             _email = request.POST.get('email').strip()
#             _password = request.POST.get('password').strip()
#             print(_email,'____')
#             print(_password,'_____')
#             # obj3=models.rkvy_userEnrollment.objects.filter(user_id__email=_email).values('pending_stage')
#             # check for existence
#             userObj = authenticate(username=_email, password=_password)
#             print(userObj.username)

#             print("22222222222222222222222227777777777777777777777777777777777777777777777^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^",userObj)
#             if userObj is not None:
#                 login(request, userObj)
#                 print("inside login&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%")
#                 if userObj.user_role == 'rkvy_superadmin':
#                     return HttpResponseRedirect('/rkvy_superAdminHome')
#                 elif userObj.user_role == 'rkvy_headquarteradmin':
#                     return HttpResponseRedirect('/rkvy_headquarterAdminHome')
#                 elif userObj.user_role == 'rkvy_instituteadmin':
                    
#                     return HttpResponseRedirect('/rkvy_instituteAdminHome')
#                 elif userObj.user_role == 'rkvy_instructor':
#                     return HttpResponseRedirect('/rkvy_instructorHome')
#                 elif userObj.username=='admin':
#                     return HttpResponseRedirect('/adminuserHome')
#                 else:
#                     # return HttpResponseRedirect('/userHome')
#                     print("11111111111111111111111")
#                     return render(request, "base.html")
#                     # return render(request,"list_create_inspection_report.html")
                    
#             else:
#                 #change 21-10
#                 if user.objects.filter(email=_email,user_role='rkvy_trainee',is_active=False).exists():
#                     messages.error(request, 'Email is not verified yet. Please verify first then login again.')
#                 else:
#                     messages.error(request, 'Invalid Credentials.')#till here 21-10
#                 #return HttpResponseRedirect('/rkvy_login')

#                 return render(request, "login.html")
#         print('hhhh')
#         return render(request, "login2.html")
    # except Exception as e: 
    #     try:
    #         models.error_Table.objects.create(fun_name="login",user_id=request.user,err_details=str(e))
    #     except:
            
    #         print("Internal Error->>>>>>>>>4!!!")
    #     #messages.error(request, 'Error : '+str(e))
    #     return render(request, "login.html", {})
def userHome(request):
    try:
        return render(request,"userHome.html")
    except Exception as e:
        try:
            m1.error_Table.objects.create(fun_name="userHome",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        #messages.error(request, 'Error : '+str(e))
        return render(request, "errorspage.html", {}) 
    
def zonaluserHome(request):
    try:
        return render(request,"zonaluserHome.html")
    except Exception as e:
        try:
            m1.error_Table.objects.create(fun_name="zonaluserHome",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        #messages.error(request, 'Error : '+str(e))
        return render(request, "errorspage.html", {}) 

def divisonuserHome(request):
    try:
        return render(request,"divisonHome.html")
    except Exception as e:
        try:
            m1.error_Table.objects.create(fun_name="divisonuserHome",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        #messages.error(request, 'Error : '+str(e))
        return render(request, "errorspage.html", {}) 

# def requests111(request):
#     try:
#         status=request.POST.get('status')
#         # empno=request.POST.get('empno')
#         # request_type=request.POST.get('request_type')
#         # print(empno,"number")
#         # print(request_type,"request type")
#         # print(status,"status")
#         # id=request.user.username
#         # id=id[0:len(id)-3]
#         _email=request.user.username
#         #print('hhhhhhhhhh           ',_email)
#         # rlyid=models.Level_Desig.objects.exclude(delete_flag=True).filter(official_email_ID=_email).values('rly_unit')
#         rlyid=models.AdminMaster.objects.filter(user_id=_email).values('rly_id')
#         if rlyid.count()>0:
#             rlyid=rlyid[0]['rly_id']
#         else:
#             rlyid=None

#         lst=m1.user_request.objects.filter(rly_id=rlyid,status='Pending').all()
#         #print(rlyid)
#         #print(lst)


#         # if request.method== 'POST':
#         #     req_id=request.POST.get('req_id')
#         #     print(req_id)
#             # action=request.POST.get('action_1')
#         #     lst=m1.user_request.objects.filter(rly_id=request.user.username,status='Accepted').values('id','empno','myuser_id__first_name','requestDate','status')

#             # if action=='Accept':
#         #         myuser_id_id=m1.user_request.objects.filter(id=req_id).values('myuser_id_id','empno','rly_id_id')
#         #         empdetails=models.HRMS.objects.filter(empno=myuser_id_id[0]['empno']).values('empname','designation','email','rly_id_id','div_id_id')
#         #         m1.user_request.objects.filter(id=req_id).update(status='Accepted')
#         #         user.objects.filter(id=myuser_id_id[0]['myuser_id_id']).update(is_active=True,user_role='user',username=myuser_id_id[0]['empno'])

#         #         m1.empmast.objects.create(empno=myuser_id_id[0]['empno'],empname=empdetails[0]['empname'],desig_longdesc=empdetails[0]['designation']
#         #         ,email=empdetails[0]['email'],myuser_id_id=myuser_id_id[0]['myuser_id_id']
#         #                 ,rly_id_id=empdetails[0]['rly_id_id'],div_id_id=empdetails[0]['div_id_id'])
#         #     if action == 'Reject':
#         #         m1.user_request.objects.filter(id=req_id).update(status='Rejected')

#         # if status=='Accepted' or status=='Rejected':
#         #         r=False
#         # else:
#         #         r=True
#         # context={'result':lst,'r':r,'status':status}
#         context={'lst':lst,}
#         return render(request,"requestList.html",context)
#     except Exception as e:
#         try:
#             m1.error_Table.objects.create(fun_name="requestList",user_id=request.user,err_details=str(e))
#         except:
#             print("Internal Error!!!")
#         #messages.error(request, 'Error : '+str(e))
#         return render(request, "errorspage.html", {})

def requests111(request):
    try:
        current_user = request.user
        # print("----------------------------------------", current_user)
        status=request.POST.get('status')
        # empno=request.POST.get('empno')
        request_type=request.POST.get('request_type')
        # print(empno,"number")
        # print(request_type,"request type")
        # print(status,"status")
        id=request.user.username
        # id=id[0:len(id)-3]
        _email=request.user.username
        #print('hhhhhhhhhh           ',_email)
        # rlyid=models.Level_Desig.objects.exclude(delete_flag=True).filter(official_email_ID=_email).values('rly_unit')
        rlyid=models.AdminMaster.objects.filter(user_id=_email).values('rly_id')
        if rlyid.count()>0:
            rlyid=rlyid[0]['rly_id']
        else:
            rlyid=None

        lst=m1.user_request.objects.filter(rly_id=rlyid,status='Pending').all()
        #print(rlyid)
        #print(lst)


        # if request.method== 'POST':
        #     req_id=request.POST.get('req_id')
        #     print(req_id)
            # action=request.POST.get('action_1')
        #     lst=m1.user_request.objects.filter(rly_id=request.user.username,status='Accepted').values('id','empno','myuser_id__first_name','requestDate','status')

            # if action=='Accept':
        #         myuser_id_id=m1.user_request.objects.filter(id=req_id).values('myuser_id_id','empno','rly_id_id')
        #         empdetails=models.HRMS.objects.filter(empno=myuser_id_id[0]['empno']).values('empname','designation','email','rly_id_id','div_id_id')
        #         m1.user_request.objects.filter(id=req_id).update(status='Accepted')
        #         user.objects.filter(id=myuser_id_id[0]['myuser_id_id']).update(is_active=True,user_role='user',username=myuser_id_id[0]['empno'])

        #         m1.empmast.objects.create(empno=myuser_id_id[0]['empno'],empname=empdetails[0]['empname'],desig_longdesc=empdetails[0]['designation']
        #         ,email=empdetails[0]['email'],myuser_id_id=myuser_id_id[0]['myuser_id_id']
        #                 ,rly_id_id=empdetails[0]['rly_id_id'],div_id_id=empdetails[0]['div_id_id'])
        #     if action == 'Reject':
        #         m1.user_request.objects.filter(id=req_id).update(status='Rejected')

        # if status=='Accepted' or status=='Rejected':
        #         r=False
        # else:
        #         r=True
        # context={'result':lst,'r':r,'status':status}
        context={'lst':lst,}
        return render(request,"requestList.html",context)
    except Exception as e:
        try:
            m1.error_Table.objects.create(fun_name="requestList",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        #messages.error(request, 'Error : '+str(e))
        return render(request, "errorspage.html", {})


def show_empinfo(request):
    try:
        email = request.user.email
        print("@@@@@@@@@@",email)
        count=0
        empname=request.POST.get('empname')
        from_date=request.POST.get('datefrom')
        # from_date=datetime.strftime('%d/%m/%Y')
        to_date=request.POST.get('dateto')
        status=request.POST.get('status')
        obj=models.Level_Desig.objects.exclude(delete_flag=True).filter(empno_id=request.user.username).values("designation","department","empno_id__empno","empno_id__empname","empno_id__gender","empno_id__email","empno_id__contactno","empno_id__currentzone", "empno_id__currentunitdivision","empno_id__appointmentdate","empno_id__superannuation_date","empno_id__pc7_level","empno_id__billunit","empno_id__service_status","empno_id__station_des")[0]
        #"empno_id__birthdate",
        institute_code=mydata[0]['institute_code']
        #print("hiii",from_date,to_date,status,"LLLLLLL")
        if to_date==None:
                # print("inside 1st")
                result=models.editDetail.objects.filter(status='Pending',inst_code=mydata[0]['institute_code']).values('id','fieldname','old_value','new_value','requested_by','date_of_request','requested_from','status').order_by('-date_of_request')

        else:
            result=models.editDetail.objects.filter(date_of_request__range=[from_date,to_date],status=status,inst_code=mydata[0]['institute_code']).values('id','fieldname','old_value','new_value','requested_by','date_of_request','requested_from','status').order_by('-date_of_request')
            # print(result,"66666666")
        context={'result':result,
        
        }
        return render(request,"editDetail.html",context)
    except Exception as e:
        try:
            m1.error_Table.objects.create(fun_name="show_empinfo",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        #messages.error(request, 'Error : '+str(e))
        return render(request, "errorspage.html", {})


def viewDetail(request):
    try:
        current_user = request.user
        emp=m1.empmast.objects.all() 
        employees=m1.empmast.objects.all().order_by('empname') 
        rail=models.railwayLocationMaster.objects.filter(location_type='ZR').values('location_code')
        division=list(models.railwayLocationMaster.objects.filter(location_type='DIV').values('location_code').distinct('location_code'))
        
        # category = m1.empmast.objects.filter(decode_paycategory__isnull=False).values('decode_paycategory').distinct()
        department=models.departMast.objects.filter(delete_flag=False).values('department_name').order_by('department_name').distinct()
        designation=models.Level_Desig.objects.exclude(delete_flag=True).values('designation').order_by('designation').distinct()
        #print(request.user.username)

        # try catch
        
        obj=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=request.user.username) | Q(official_email_ID=request.user.email)).values("designation","parent_desig_code","department","contactnumber","official_email_ID","empno_id__empno","empno_id__empname","empno_id__empmname","empno_id__emplname","empno_id__gender","empno_id__email","contactnumber","empno_id__currentzone", "empno_id__currentunitdivision","empno_id__appointmentdate","empno_id__superannuation_date","empno_id__pc7_level","empno_id__billunit","empno_id__service_status","empno_id__station_des")[0]
        
        reporting_ofc=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=obj['parent_desig_code']).values('designation')
        if reporting_ofc:
            reporting_ofc=reporting_ofc[0]['designation']
        else:
            reporting_ofc='NA'
        #"empno_id__birthdate",
        # a=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=)
        # if obj['empno_id__birthdate'] == None:
        #     obj['empno_id__birthdate'] = ''
        if obj['empno_id__empmname'] == None:
            obj['empno_id__empmname'] = ''
        if obj['empno_id__emplname'] == None:
            obj['empno_id__emplname'] = ''
        # else:
            # obj['empno_id__birthdate']=(obj['empno_id__birthdate']).strftime('%d/%m/%Y')
            # obj['empno_id__birthdate']=''
        if obj['empno_id__appointmentdate'] == None:
            obj['empno_id__appointmentdate'] = ''
        else:
            obj['empno_id__appointmentdate']=(obj['empno_id__appointmentdate']).strftime('%d/%m/%Y')
            
        if obj['empno_id__superannuation_date'] == None:
            obj['empno_id__superannuation_date'] = ''
        else:
            obj['empno_id__superannuation_date']=(obj['empno_id__superannuation_date']).strftime('%d/%m/%Y')

        if obj['empno_id__gender']:
            obj['empno_id__gender']=(obj['empno_id__gender']).replace('M' , 'Male').replace('F' , 'Female')
        # else:
        #     obj['empno_id__gender']= 'Not Updated'





        #print("mydata",obj)
        context={
            'emp':emp,
            'department':department,
            'employees':employees,
            'sub':0,
            # 'category':category,
            'rail':rail,
            'user':user,
            'division':division,
            'designation':designation,
            'obj':obj,
            'reporting_ofc':reporting_ofc,
        }

        return render(request, 'viewDetail.html',context)
    except Exception as e:
        try:
            m1.error_Table.objects.create(fun_name="viewDetail",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        #messages.error(request, 'Error : '+str(e))
        return render(request, "errorspage.html", {})

def editDetail(request):
    try:
        current_user = request.user
        # print("----------------------------------------", current_user)
        #print(request.user.username)
        # emp=m1.empmast.objects.all() 
        # employees=m1.empmast.objects.all().order_by('empname') 
        # rail=models.railwayLocationMaster.objects.filter(location_type='ZR').values('location_code')
        # division=list(models.railwayLocationMaster.objects.filter(location_type='DIV').values('location_code').distinct('location_code'))
        #emp = m1.empmast.objects.get(empno=request.user)
        if m1.user_request.objects.filter(empnumber=request.user.username).values().exists():
            obj2 = list(m1.user_request.objects.filter(empnumber=request.user.username).values())
        # if m1.user_request.objects.filter(email=request.user.username).values().exists():
        #     obj2 = list(m1.user_request.objects.filter(email=request.user.username).values())
        # if m1.user_request.objects.filter().values().exists():
        #     obj2 = list(m1.user_request.objects.filter().values())
        else:
            obj2=""
        # print(obj2[0]['rly_id_id'])
        rly=models.Level_Desig.objects.exclude(delete_flag=True).filter(official_email_ID=request.user.username).values('rly_unit_id')
        if rly.count()>0:
            rly=rly[0]['rly_unit_id']
        else:
            rly=None
        # if models.AdminMaster.objects.filter(rly_id=obj2[0]['rly_id_id'],status='Active').exists():
        if models.AdminMaster.objects.filter(rly_id=rly,status='Active').exists():
            a=list(models.AdminMaster.objects.filter(rly_id=rly,status='Active').values('designation'))[0]['designation']
        else:
            a=""
        #print(a)
        # category = m1.empmast.objects.filter(decode_paycategory__isnull=False).values('decode_paycategory').distinct()
        department=models.departMast.objects.filter(delete_flag=False).values('department_name').order_by('department_name').distinct()
        designation=models.Level_Desig.objects.exclude(delete_flag=True).values('designation').order_by('designation').distinct()
        #print(request.user.username)

        # try catch
        
        # obj=models.Level_Desig.objects.exclude(delete_flag=True).filter(official_email_ID=request.user.username).values("designation","department","contactnumber","official_email_ID","empno_id__empno","empno_id__empname","empno_id__birthdate","empno_id__gender","empno_id__email","empno_id__contactno","empno_id__currentzone", "empno_id__currentunitdivision","empno_id__appointmentdate","empno_id__superannuation_date","empno_id__pc7_level","empno_id__billunit","empno_id__service_status","empno_id__station_des")[0]
        # obj=models.Level_Desig.objects.exclude(delete_flag=True).filter(official_email_ID=request.user).values("designation","department","contactnumber","official_email_ID","empno_id__empno","empno_id__empname","empno_id__birthdate","empno_id__gender","empno_id__currentzone","empno_id__currentunitdivision","empno_id__appointmentdate","empno_id__superannuation_date","empno_id__pc7_level","empno_id__billunit","empno_id__service_status","empno_id__station_des")[0]

        obj=models.Level_Desig.objects.exclude(delete_flag=True).filter(official_email_ID=current_user).values("designation","department","contactnumber","official_email_ID","empno_id__empno","empno_id__empname","empno_id__gender","empno_id__currentzone","empno_id__currentunitdivision","empno_id__appointmentdate","empno_id__superannuation_date","empno_id__pc7_level","empno_id__billunit","empno_id__service_status","empno_id__station_des")[0]
        #"empno_id__birthdate",
        #print("mydata",obj)
        if request.method == 'POST':
            print(request.user.username)
            begin=request.POST.get('begin')
            end=request.POST.get('end')
            # begin=datetime.strptime(begin,'%d/%m/%Y')
            # begin=begin.strftime('%Y-%m-%d')
            # end=datetime.strptime(end,'%d/%m/%Y')
            # end=end.strftime('%Y-%m-%d')
            status=request.POST.get('status')
            print('inside',begin,end,status)
            # obj2= list(m1.user_request.objects.filter(empnumber=request.user.username,status=status,requestDate__gte=begin,requestDate__lte=end).values())
            obj2= list(m1.user_request.objects.filter(empnumber=request.user.username,status=status).values())

            # requestDate__gte=begin,requestDate__lte=end
            # print(obj2)
        context={
            # 'emp':emp,
            'department':department,
            # 'employees':employees,
            'sub':0,
            # 'category':category,
            # 'rail':rail,
            'user':user,
            'division':division,
            'designation':designation,
            'obj':obj,
            'obj2':obj2,
            'desig_a':a,
            
            
        }

        return render(request, 'editDetail.html',context)
    
    except Exception as e:
        try:
            m1.error_Table.objects.create(fun_name="viewDetail",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        #messages.error(request, 'Error : '+str(e))
        return render(request, "errorspage.html", {})
#Ujjwala 160223
# def editDetail(request):
#     try:
#         current_user = request.user
#         #print(request.user.username)
#         # emp=m1.empmast.objects.all() 
#         # employees=m1.empmast.objects.all().order_by('empname') 
#         # rail=models.railwayLocationMaster.objects.filter(location_type='ZR').values('location_code')
#         # division=list(models.railwayLocationMaster.objects.filter(location_type='DIV').values('location_code').distinct('location_code'))
#         #emp = m1.empmast.objects.get(empno=request.user)
#         if m1.user_request.objects.filter(empnumber=request.user.username).values().exists():
#             obj2 = list(m1.user_request.objects.filter(empnumber=request.user.username).values())
#         # if m1.user_request.objects.filter(email=request.user.username).values().exists():
#         #     obj2 = list(m1.user_request.objects.filter(email=request.user.username).values())
#         # if m1.user_request.objects.filter().values().exists():
#         #     obj2 = list(m1.user_request.objects.filter().values())
#         else:
#             obj2=""
#         # print(obj2[0]['rly_id_id'])
#         rly=models.Level_Desig.objects.exclude(delete_flag=True).filter(official_email_ID=request.user.username).values('rly_unit_id')
#         if rly.count()>0:
#             rly=rly[0]['rly_unit_id']
#         else:
#             rly=None
#         # if models.AdminMaster.objects.filter(rly_id=obj2[0]['rly_id_id'],status='Active').exists():
#         if models.AdminMaster.objects.filter(rly_id=rly,status='Active').exists():
#             a=list(models.AdminMaster.objects.filter(rly_id=rly,status='Active').values('designation'))[0]['designation']
#         else:
#             a=""
#         #print(a)
#         # category = m1.empmast.objects.filter(decode_paycategory__isnull=False).values('decode_paycategory').distinct()
#         department=models.departMast.objects.filter(delete_flag=False).values('department_name').order_by('department_name').distinct()
#         designation=models.Level_Desig.objects.exclude(delete_flag=True).values('designation').order_by('designation').distinct()
#         #print(request.user.username)

#         # try catch
        
#         # obj=models.Level_Desig.objects.exclude(delete_flag=True).filter(official_email_ID=request.user.username).values("designation","department","contactnumber","official_email_ID","empno_id__empno","empno_id__empname","empno_id__birthdate","empno_id__gender","empno_id__email","empno_id__contactno","empno_id__currentzone", "empno_id__currentunitdivision","empno_id__appointmentdate","empno_id__superannuation_date","empno_id__pc7_level","empno_id__billunit","empno_id__service_status","empno_id__station_des")[0]
#         obj=models.Level_Desig.objects.exclude(delete_flag=True).filter(official_email_ID=request.user.username).values("designation","department","contactnumber","official_email_ID","empno_id__empno","empno_id__empname","empno_id__birthdate","empno_id__gender","empno_id__currentzone", "empno_id__currentunitdivision","empno_id__appointmentdate","empno_id__superannuation_date","empno_id__pc7_level","empno_id__billunit","empno_id__service_status","empno_id__station_des")[0]

#         #print("mydata",obj)
#         if request.method == 'POST':
#             begin=request.POST.get('begin')
#             end=request.POST.get('end')
#             begin=datetime.strptime(begin,'%d/%m/%Y')
#             begin=begin.strftime('%Y-%m-%d')
#             end=datetime.strptime(end,'%d/%m/%Y')
#             end=end.strftime('%Y-%m-%d')
#             status=request.POST.get('status')
#             print("ENDDDDD",begin,end,status)
#             obj2 = list(m1.user_request.objects.filter(empnumber=request.user.username,status=status,requestDate__gte=begin,requestDate__lte=end).values())
#             # requestDate__gte=begin,requestDate__lte=end
#             print("mydata9999",obj2)
            
#         context={
#             # 'emp':emp,
#             'department':department,
#             # 'employees':employees,
#             'sub':0,
#             # 'category':category,
#             # 'rail':rail,
#             'user':user,
#             'division':division,
#             'designation':designation,
#             'obj':obj,
#             'obj2':obj2,
#             'desig_a':a,
            
            
#         }
#         print("mydata666",obj2)
#         return render(request, 'editDetail.html',context)
    
#     except Exception as e:
#         try:
#             m1.error_Table.objects.create(fun_name="viewDetail",user_id=request.user,err_details=str(e))
#         except:
#             print("Internal Error!!!")
#         #messages.error(request, 'Error : '+str(e))
#         return render(request, "errorspage.html", {})


# def editDetail(request):
#     try:
#         current_user = request.user
#         #print(request.user.username)
#         # emp=m1.empmast.objects.all() 
#         # employees=m1.empmast.objects.all().order_by('empname') 
#         # rail=models.railwayLocationMaster.objects.filter(location_type='ZR').values('location_code')
#         # division=list(models.railwayLocationMaster.objects.filter(location_type='DIV').values('location_code').distinct('location_code'))
#         #emp = m1.empmast.objects.get(empno=request.user)
#         if m1.user_request.objects.filter(empnumber=request.user.username).values().exists():
#             obj2 = list(m1.user_request.objects.filter(empnumber=request.user.username).values())
#         # if m1.user_request.objects.filter().values().exists():
#         #     obj2 = list(m1.user_request.objects.filter().values()) #Ujjwala 010223
#         else:
#             obj2=""
#         # print(obj2[0]['rly_id_id'])
#         rly=models.Level_Desig.objects.exclude(delete_flag=True).filter(official_email_ID=request.user.username).values('rly_unit_id')
#         if rly.count()>0:
#             rly=rly[0]['rly_unit_id']
#         else:
#             rly=None
#         # if models.AdminMaster.objects.filter(rly_id=obj2[0]['rly_id_id'],status='Active').exists():
#         if models.AdminMaster.objects.filter(rly_id=rly,status='Active').exists():
#             a=list(models.AdminMaster.objects.filter(rly_id=rly,status='Active').values('designation'))[0]['designation']
#         else:
#             a=""
#         #print(a)
#         # category = m1.empmast.objects.filter(decode_paycategory__isnull=False).values('decode_paycategory').distinct()
#         department=models.departMast.objects.filter(delete_flag=False).values('department_name').order_by('department_name').distinct()
#         designation=models.Level_Desig.objects.exclude(delete_flag=True).values('designation').order_by('designation').distinct()
#         #print(request.user.username)

#         # try catch
        
#         obj=models.Level_Desig.objects.exclude(delete_flag=True).filter(official_email_ID=request.user.username).values("designation","department","contactnumber","official_email_ID","empno_id__empno","empno_id__empname","empno_id__birthdate","empno_id__gender","empno_id__email","empno_id__contactno","empno_id__currentzone", "empno_id__currentunitdivision","empno_id__appointmentdate","empno_id__superannuation_date","empno_id__pc7_level","empno_id__billunit","empno_id__service_status","empno_id__station_des")[0]

#         #print("mydata",obj)
#         if request.method == 'POST':
#             begin=request.POST.get('begin')
#             end=request.POST.get('end')
#             begin=datetime.strptime(begin,'%d/%m/%Y')
#             begin=begin.strftime('%Y-%m-%d')
#             end=datetime.strptime(end,'%d/%m/%Y')
#             end=end.strftime('%Y-%m-%d')
#             status=request.POST.get('status')
#             obj2 = list(m1.user_request.objects.filter(empno=request.user.username,status=status,requestDate__gte=begin,requestDate__lte=end).values())
#             # requestDate__gte=begin,requestDate__lte=end
            
#         context={
#             # 'emp':emp,
#             'department':department,
#             # 'employees':employees,
#             'sub':0,
#             # 'category':category,
#             # 'rail':rail,
#             'user':user,
#             'division':division,
#             'designation':designation,
#             'obj':obj,
#             'obj2':obj2,
#             'desig_a':a,
            
            
#         }

#         return render(request, 'editDetail.html',context)
    
#     except Exception as e:
#         try:
#             m1.error_Table.objects.create(fun_name="viewDetail",user_id=request.user,err_details=str(e))
#         except:
#             print("Internal Error!!!")
#         #messages.error(request, 'Error : '+str(e))
#         return render(request, "errorspage.html", {})

def Divisonrequests(request):
    try:
        status=request.POST.get('status')
        # id=request.user.username
        # id=id[0:len(id)-3]
        _email=request.user.username
        #print('hhhhhhhhhh           ',_email)
        rlyid=models.AdminMaster.objects.filter(user_id=_email).values('rly_id')
        if rlyid.count()>0:
            rlyid=rlyid[0]['rly_id']
        else:
            rlyid=None
        # lst=m1.user_request.objects.filter(rly_id=rlyid,status='Pending').values('id','empno','myuser_id__first_name','requestDate','status')
        lst=m1.user_request.objects.filter(rly_id=rlyid,status='Pending').all()
        #print(rlyid)
        # if request.method== 'POST':
        #     req_id=request.POST.get('req_id')
        #     print(req_id)
        #     action=request.POST.get('action_1')
        #     lst=m1.user_request.objects.filter(rly_id=request.user.username,status=status).values('id','empno','myuser_id__first_name','requestDate','status')
        #     if action=='Accept':
        #         myuser_id_id=m1.user_request.objects.filter(id=req_id).values('myuser_id_id','empno','rly_id_id')
        #         empdetails=models.HRMS.objects.filter(empno=myuser_id_id[0]['empno']).values('empname','designation','email','rly_id_id','div_id_id')
        #         m1.user_request.objects.filter(id=req_id).update(status='Accepted')

        #         user.objects.filter(id=myuser_id_id[0]['myuser_id_id']).update(is_active=True,user_role='user',username=myuser_id_id[0]['empno'])
        #         m1.empmast.objects.create(empno=myuser_id_id[0]['empno'],empname=empdetails[0]['empname'],desig_longdesc=empdetails[0]['designation']
        #         ,email=empdetails[0]['email'],myuser_id_id=myuser_id_id[0]['myuser_id_id']
        #                 ,rly_id_id=empdetails[0]['rly_id_id'],div_id_id=empdetails[0]['div_id_id'])
        #     if status=='Reject':
        #         m1.user_request.objects.filter(id=req_id).update(status='Rejected')
        # print(status)
        # if status=='Accepted' or status=='Rejected':
        #     r=False
        # else:
        #     r=True
        # context={'result':lst,'r':r,'status':status}
        context={'result':lst}

        return render(request,"divisonRequestList.html",context)
    except Exception as e:
        try:
            m1.error_Table.objects.create(fun_name="Divisonrequests",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        #messages.error(request, 'Error : '+str(e))
        return render(request, "errorspage.html", {})

def fetch_Details1(request):
    try:
        #print('a')
        if request.method == "GET":
            #print('b')
            datefrom=request.GET.get('datefrom')
            #print(datefrom,'datefrom')
            dateto=request.GET.get('dateto')
            #print(dateto,'dateto')
            status=request.GET.get('status')
            #print(status,'status')
            _email=request.user.username
            if m1.email_request.objects.filter(rly_id=None).exists() and _email=='111111':
                data=list(m1.email_request.objects.filter(rly_id=None,requestDate__gte=datefrom,requestDate__lte=dateto,status=status).values())

            else:
                rlyid=models.AdminMaster.objects.filter(user_id=_email).values('rly_id')
                if rlyid.count()>0:
                    rlyid=rlyid[0]['rly_id']
                else:
                    rlyid=None
                data=list(m1.email_request.objects.filter(rly_id=rlyid,requestDate__gte=datefrom,requestDate__lte=dateto,status=status).values())
                #print(rlyid)
            return JsonResponse({'data':data},safe=False)
        return JsonResponse({"success":False},status=400)
    except Exception as e:
        try:
            m1.error_Table.objects.create(fun_name="fetch_Details1",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        #messages.error(request, 'Error : '+str(e))
        return render(request, "errorspage.html", {})
    
def fetch_Details(request):
    try:
        #print('a')
        if request.method == "GET":
            #print('b')
            datefrom=request.GET.get('datefrom')
            #print(datefrom,'datefrom')
            dateto=request.GET.get('dateto')
            #print(dateto,'dateto')
            status=request.GET.get('status')
            #print(status,'status')
            data=list(m1.user_request.objects.filter(requestDate__gte=datefrom,requestDate__lte=dateto,status=status).values())
            #print(data,"hgvhqysvqdyqgwebfryweilBAy")
            return JsonResponse({'data':data},safe=False)
        return JsonResponse({"success":False},status=400)
    except Exception as e:
        try:
            m1.error_Table.objects.create(fun_name="fetch_Details",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        #messages.error(request, 'Error : '+str(e))
        return render(request, "errorspage.html", {})




# def show_detail(request):
#     try:
#         # print("1")
#         if request.method== 'GET':
#             # print("2")
#             empno=request.GET.get('_id')
#             empno=empno.split('@')
#             # request_type=request.GET.get('request_type')
#             # oldvalue=request.GET.get('oldvalue')
#             # newvalue=request.GET.get('newvalue')
#             # statuss=request.GET.get('statuss')
#             employeeno=list(m1.user_request.objects.filter(id=empno[1]).values())
#             rlyid=models.Level_Desig.objects.exclude(delete_flag=True).filter(official_email_ID=employeeno[0]['empno']).values('rly_unit')
#             if rlyid.count()>0:
#                 rlyid=rlyid[0]['rly_unit']
#             else:
#                 rlyid=None
#             # print(empno  )
#             # print(empno[0])
#             if(empno[0]=='Accept'):
#                 # employeeno=list(m1.user_request.objects.filter(id=empno[1]).values())
#                 if(employeeno[0]['request_type'] == 'Pay Level'):
                    
#                     m1.empmast.objects.filter(empno=employeeno[0]['empno']).update(pc7_level=employeeno[0]['remarks'])
#                 elif(employeeno[0]['request_type'] == 'Service Status'):
#                     update1=m1.empmast.objects.filter(empno=employeeno[0]['empno']).update(service_status=employeeno[0]['remarks'])
#                 elif(employeeno[0]['request_type'] == 'Station Destination'):
#                     update1=m1.empmast.objects.filter(empno=employeeno[0]['empno']).update(station_des=employeeno[0]['remarks'])
#                 elif(employeeno[0]['request_type'] == 'Official Email'):
#                     update1=Level_Desig.objects.filter(official_email_ID=employeeno[0]['empnumber']).update(official_email_ID=employeeno[0]['remarks'])
#                 elif(employeeno[0]['request_type'] == 'contactnumber'):
#                     print("contact noooooooooooooooooooooooo")
#                     Level_Desig.objects.filter(official_email_ID=employeeno[0]['empnumber']).update(contactnumber=employeeno[0]['remarks'])
#                 # print(employeeno)
#                 update=m1.user_request.objects.filter(id=empno[1]).update(status='Accepted')
                
                
#                 rlyid=m1.user_request.objects.filter(id=empno[1]).values('rly_id_id')
#                 #print(rlyid)
#                 # if(typee=='Pay Level'):
#                 #     print('1')
#                 #     update1=m1.empmast.objects.filter(empno=employeeno).update(pc7_level=newvalue)
#                 # elif(typee=='Service Status'):
#                 #     print('2')
#                 #     update1=m1.empmast.objects.filter(empno=employeeno).update(service_status=newvalue)
#                 # elif(typee=='Station Destination'):
#                 #     update1=m1.empmast.objects.filter(empno=employeeno).update(station_des=newvalue)
#                 # elif(type=='Official Email'):
#                 #     update1=Level_Desig.objects.filter(rly_unit_id=rlyid,empno_id=employeeno).update(official_email_ID=newvalue)
#                 # elif(type=='Official Contact No'):
#                 #     update1=Level_Desig.objects.filter(rly_unit_id=rlyid,empno_id=employeeno).update(contactnumber=newvalue)
#                 # elif(type=='Reporting Officer Designation'):
#                 #     update1=Level_Desig.objects.filter(rly_unit_id=rlyid,empno_id=employeeno).update(contactnumber=newvalue)
#             elif(empno[0]=='Reject'):
#                 #print("enter")
#                 update=m1.user_request.objects.filter(id=empno[1]).update(status='Rejected')

#             context={
                
#             }
#             return JsonResponse(context,safe=False)
#         return JsonResponse({"success":False},status=400)
#     except Exception as e:
#         try:
#             m1.error_Table.objects.create(fun_name="show_detail",user_id=request.user,err_details=str(e))
#         except:
#             print("Internal Error!!!")
#         #messages.error(request, 'Error : '+str(e))
#         return render(request, "errorspage.html", {})

def show_detail(request):
    try:
        # print("1")
        if request.method== 'GET':
            # print("2")
            empno=request.GET.get('_id')
            empno=empno.split('@')
            # request_type=request.GET.get('request_type')
            # oldvalue=request.GET.get('oldvalue')
            # newvalue=request.GET.get('newvalue')
            # statuss=request.GET.get('statuss')
            employeeno=list(m1.user_request.objects.filter(id=empno[1]).values())
            rlyid=models.Level_Desig.objects.exclude(delete_flag=True).filter(official_email_ID=employeeno[0]['empno']).values('rly_unit')
            if rlyid.count()>0:
                rlyid=rlyid[0]['rly_unit']
            else:
                rlyid=None
            # print(empno  )
            # print(empno[0])
            print(employeeno[0]['request_type'])
            if(empno[0]=='Accept'):
                # employeeno=list(m1.user_request.objects.filter(id=empno[1]).values())
                if(employeeno[0]['request_type'] == 'Pay Level'):
                    m1.empmast.objects.filter(empno=employeeno[0]['empno']).update(pc7_level=employeeno[0]['remarks'])
                elif(employeeno[0]['request_type'] == 'Service Status'):
                    update1=m1.empmast.objects.filter(empno=employeeno[0]['empno']).update(service_status=employeeno[0]['remarks'])
                elif(employeeno[0]['request_type'] == 'Station Destination'):
                    update1=m1.empmast.objects.filter(empno=employeeno[0]['empno']).update(station_des=employeeno[0]['remarks'])
                elif(employeeno[0]['request_type'] == 'Official Email'):
                    # print("contact noooooooooooooooooooooooo",employeeno[0]['remarks'])
                    update1=models.Level_Desig.objects.exclude(delete_flag=True).filter(empno=employeeno[0]['empno']).update(official_email_ID=employeeno[0]['remarks'])
                elif(employeeno[0]['request_type'] == 'contactnumber'):
                    # print("contact noooooooooooooooooooooooo",employeeno[0]['remarks'])
                    
                    update1=models.Level_Desig.objects.exclude(delete_flag=True).filter(empno=employeeno[0]['empno']).update(contactnumber=employeeno[0]['remarks'])
                # print(employeeno)
                update=m1.user_request.objects.filter(id=empno[1]).update(status='Accepted')
                
               
                
                rlyid=m1.user_request.objects.filter(id=empno[1]).values('rly_id_id')
                #print(rlyid)
                # if(typee=='Pay Level'):
                #     print('1')
                #     update1=m1.empmast.objects.filter(empno=employeeno).update(pc7_level=newvalue)
                # elif(typee=='Service Status'):
                #     print('2')
                #     update1=m1.empmast.objects.filter(empno=employeeno).update(service_status=newvalue)
                # elif(typee=='Station Destination'):
                #     update1=m1.empmast.objects.filter(empno=employeeno).update(station_des=newvalue)
                # elif(type=='Official Email'):
                #     update1=Level_Desig.objects.filter(rly_unit_id=rlyid,empno_id=employeeno).update(official_email_ID=newvalue)
                # elif(type=='Official Contact No'):
                #     update1=Level_Desig.objects.filter(rly_unit_id=rlyid,empno_id=employeeno).update(contactnumber=newvalue)
                # elif(type=='Reporting Officer Designation'):
                #     update1=Level_Desig.objects.filter(rly_unit_id=rlyid,empno_id=employeeno).update(contactnumber=newvalue)
            elif(empno[0]=='Reject'):
                #print("enter")
                update=m1.user_request.objects.filter(id=empno[1]).update(status='Rejected')

            context={
                
            }
            return JsonResponse(context,safe=False)
        return JsonResponse({"success":False},status=400)
    except Exception as e:
        try:
            m1.error_Table.objects.create(fun_name="show_detail",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        #messages.error(request, 'Error : '+str(e))
        return render(request, "errorspage.html", {})
		
		


def saveData(request):
    try:
        if request.method == "GET":
            paylevel = request.GET.get('paylevel')
            empnumber=request.GET.get('emp')
            # print(empnumber)
            emp=request.user.username
            # print(emp)
            marked=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(official_email_ID=emp).values('rly_unit'))
            designation=models.Level_Desig.objects.exclude(delete_flag=True).filter(official_email_ID=emp).values('designation')
            date=datetime.today()
            stat="Pending"
            if len(marked)>0:
                marked=marked[0]['rly_unit']
            else:
                marked=None
            # print('location ',marked)
            div_code=models.railwayLocationMaster.objects.get(rly_unit_code=marked)
            # print('location ',div_code)

    
            # status=request.GET.get('status')
            globallabel=request.GET.getlist('globallabel[]')
            values=request.GET.getlist('values[]')
            globalvalue=request.GET.getlist('globalvalue[]')
            for i in range(len(globallabel)):
                if m1.user_request.objects.filter(request_type=globallabel[i],status='Pending').exists():
                    messages.error(request,"Change request for this field has been already raised")
                   
        
            # for i in range(len(globallabel)):
                else:
                    m1.user_request.objects.create(designation=designation,empno=empnumber,empnumber=emp,old_value = globalvalue[i],request_type=globallabel[i],remarks=values[i] ,rly_id=div_code,requestDate=date, status=stat)
                    messages.success(request,"Change request has been sent to concerned admin")
                    

            obj=[]
            # print(globallabel)
            # m1.user_request.objects.create(old_value = paylevel,empno=emp,request_type=pay_title, )
            # obj=[]
            return JsonResponse(obj, safe=False)
        return JsonResponse({'success': False}, status=400)
    except Exception as e:
        try:
            m1.error_Table.objects.create(fun_name="saveData",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        #messages.error(request, 'Error : '+str(e))
        return render(request, "errorspage.html", {})


# def saveData(request):
#     try:
#         if request.method == "GET":
#             paylevel = request.GET.get('paylevel')
#             empnumber=request.GET.get('emp')
#             print(empnumber)
#             emp=request.user.username
#             print(emp)
#             marked=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(official_email_ID=emp).values('rly_unit'))
#             designation=models.Level_Desig.objects.exclude(delete_flag=True).filter(official_email_ID=emp).values('designation')
#             date=datetime.today()
#             stat="Pending"
#             if len(marked)>0:
#                 marked=marked[0]['rly_unit']
#             else:
#                 marked=None
#             print('location ',marked)
#             div_code=models.railwayLocationMaster.objects.get(rly_unit_code=marked)
#             print('location ',div_code)

    
#             # status=request.GET.get('status')
#             globallabel=request.GET.getlist('globallabel[]')
#             values=request.GET.getlist('values[]')
#             globalvalue=request.GET.getlist('globalvalue[]')
#             for i in range(len(globallabel)):
#                 if m1.user_request.objects.filter(request_type=globallabel[i],status='Pending').exists():
#                     messages.error(request,"Change request for this fiels has been already raised")
#             # for i in range(len(globallabel)):
#                 else:
#                     m1.user_request.objects.create(designation=designation,empno=empnumber,empnumber=emp,old_value = globalvalue[i],request_type=globallabel[i],remarks=values[i] ,rly_id=div_code,requestDate=date, status=stat)
#                     messages.success(request,"Change request has been sent to concerned admin")
#             obj=[]
#             print(globallabel)
#             # m1.user_request.objects.create(old_value = paylevel,empno=emp,request_type=pay_title, )
#             # obj=[]
#             return JsonResponse(obj, safe=False)
#         return JsonResponse({'success': False}, status=400)
#     except Exception as e:
#         try:
#             m1.error_Table.objects.create(fun_name="saveData",user_id=request.user,err_details=str(e))
#         except:
#             print("Internal Error!!!")
#         #messages.error(request, 'Error : '+str(e))
#         return render(request, "errorspage.html", {})


def editprofile_ajax(request):
    # try:
        if request.method=='GET':
            print("you are inside editprofile_ajax")

            empno = request.GET.get('empno')
          
            #  mydata = 'NULL'
            if models.Level_Desig.objects.exclude(delete_flag=True).filter(empno_id__empno=empno).exists():
               
                mydata = list(models.Level_Desig.objects.exclude(delete_flag=True).filter(
                    empno_id=empno).values("designation","department","contactnumber","official_email_ID","empno_id__empno","empno_id__empname","empno_id__empmname","empno_id__emplname","empno_id__gender","empno_id__email","empno_id__contactno","empno_id__currentzone", "empno_id__currentunitdivision","empno_id__appointmentdate","empno_id__superannuation_date","empno_id__pc7_level","empno_id__service_status","empno_id__station_des"))[0]
               
                # mydata['empno_id__birthdate']=(mydata['empno_id__birthdate']).strftime('%d/%m/%Y')
                mydata['empno_id__appointmentdate']=(mydata['empno_id__appointmentdate']).strftime('%d/%m/%Y')
                mydata['empno_id__superannuation_date']=(mydata['empno_id__superannuation_date']).strftime('%d/%m/%Y')

                mydata['empno_id__gender']=(mydata['empno_id__gender']).replace('M' , 'Male').replace('F' , 'Female')
             
                return JsonResponse({'status': 200,'mydata': mydata})
            return JsonResponse({'status': 500, })
            
    # except Exception as e: 
    #     try:
    #         m1.error_Table.objects.create(fun_name="editprofile_ajax",user_id=request.user,err_details=str(e))
    #     except:
    #         print("Internal Error!!!")
    #     return render(request, "errorspage.html", {})
    

# def editprofile_ajax(request):
#     try:
#         if request.method=='GET':
#             print("you are inside editprofile_ajax")

#             empno = request.GET.get('empno')
          
#             #  mydata = 'NULL'
#             if models.Level_Desig.objects.exclude(delete_flag=True).filter(empno_id__empno=empno).exists():
               
#                 mydata = list(models.Level_Desig.objects.exclude(delete_flag=True).filter(
#                     empno_id=empno).values("designation","department","official_email_ID","empno_id__empno","empno_id__empname","empno_id__empmname","empno_id__emplname","empno_id__gender","empno_id__contactno","empno_id__currentzone", "empno_id__currentunitdivision","empno_id__appointmentdate","empno_id__superannuation_date","empno_id__pc7_level","empno_id__service_status","empno_id__station_des"))[0]
               
#                 # mydata['empno_id__birthdate']=(mydata['empno_id__birthdate']).strftime('%d/%m/%Y')
#                 mydata['empno_id__appointmentdate']=(mydata['empno_id__appointmentdate']).strftime('%d/%m/%Y')
#                 mydata['empno_id__superannuation_date']=(mydata['empno_id__superannuation_date']).strftime('%d/%m/%Y')

#                 mydata['empno_id__gender']=(mydata['empno_id__gender']).replace('M' , 'Male').replace('F' , 'Female')
             
#                 return JsonResponse({'status': 200,'mydata': mydata})
#             return JsonResponse({'status': 500, })
            
#     except Exception as e: 
#         try:
#             m1.error_Table.objects.create(fun_name="editprofile_ajax",user_id=request.user,err_details=str(e))
#         except:
#             print("Internal Error!!!")
#         return render(request, "errorspage.html", {})
  

# def editprofile_ajax(request):
#     try:
#         if request.method=='GET':
#             print("you are inside editprofile_ajax")

#             empno = request.GET.get('empno')
          
#             #  mydata = 'NULL'
#             if models.Level_Desig.objects.exclude(delete_flag=True).filter(empno_id__empno=empno).exists():
               
#                 mydata = list(models.Level_Desig.objects.exclude(delete_flag=True).filter(
#                     empno_id=empno).values("designation","department","contactnumber","official_email_ID","empno_id__empno","empno_id__empname","empno_id__empmname","empno_id__emplname","empno_id__birthdate","empno_id__gender","empno_id__email","empno_id__contactno","empno_id__currentzone", "empno_id__currentunitdivision","empno_id__appointmentdate","empno_id__superannuation_date","empno_id__pc7_level","empno_id__service_status","empno_id__station_des"))[0]
               
#                 mydata['empno_id__birthdate']=(mydata['empno_id__birthdate']).strftime('%d/%m/%Y')
#                 mydata['empno_id__appointmentdate']=(mydata['empno_id__appointmentdate']).strftime('%d/%m/%Y')
#                 mydata['empno_id__superannuation_date']=(mydata['empno_id__superannuation_date']).strftime('%d/%m/%Y')

#                 mydata['empno_id__gender']=(mydata['empno_id__gender']).replace('M' , 'Male').replace('F' , 'Female')
             
#                 return JsonResponse({'status': 200,'mydata': mydata})
#             return JsonResponse({'status': 500, })
            
#     except Exception as e: 
#         try:
#             m1.error_Table.objects.create(fun_name="editprofile_ajax",user_id=request.user,err_details=str(e))
#         except:
#             print("Internal Error!!!")
#         return render(request, "errorspage.html", {})
          
def help(request):
    try:
        return render(request,'help.html')
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="help",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})

#bhartistart and tarun


# def create_inspection_form(request):
    
#     try:
#         print("inside create form")
#         empnox = models.Level_Desig.objects.exclude(delete_flag=True).filter(Q(official_email_ID=request.user) | Q(official_email_ID=request.user.email), empno__isnull=False)
#         empnumber=None
#         dlevel=None
#         rly_unit_id=None
#         if empnox:
#             empno = empnox[0].empno
#             empnumber = empnox[0].designation_code
#             dlevel = empnox[0].d_level
#             rly_unit_id = empnox[0].rly_unit_id
#             print(empno)
        
#         empdata = models.Level_Desig.objects.exclude(delete_flag=True).filter(official_email_ID=request.user).values('designation', 'empno')
#         print(empdata)
#         if empdata:
#             desig_longdesc = empdata[0]['designation']
#         else:
#             desig_longdesc ='NA'

        
#         # desig_longdesc = empdata[0]['desig_longdesc']
#         # print('ttttttttttttttttttttttttttttttttttttttttttttttttttttttt', desig_longdesc)
#         list1=models.railwayLocationMaster.objects.filter(location_type_desc__in=['RAILWAY BOARD', 'PRODUCTION UNIT', 'HEAD QUATER','OFFICE', 'PSU', 'PRODUCTION UNIT', 'INSTITUTE']).values('location_code').order_by('location_code')
#         list2=[]
#         for i in list1:
#             # print(i['location_code'],'_________')
#             list2.append(i['location_code'])
#         list3=models.railwayLocationMaster.objects.filter(location_type_desc__in=['DIVISION','WORKSHOP']).values('location_code', 'location_type').order_by('location_code')
#         list4=[]
#         list5 =[]
#         for i in list3:
#             # print(i['location_code'],'_________')
#             list4.append({'location_code':i['location_code'],'location_type':i['location_type']}) 
#         try:
            
#             list5=list(models.Level_Desig.objects.exclude(delete_flag=True).all().values('designation','designation_code'))  
#         except Exception as e:
#             print("e==",e)  
#         list6=models.departMast.objects.all().values('department_name').order_by('department_name')
#         alldesig=models.Level_Desig.objects.exclude(delete_flag=True).values('designation').distinct().order_by('designation')

#         desg_no=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation__isnull=False).exclude(designation_code=empnumber).values('designation','empno', 'designation_code').order_by('designation'))
        
#         location_array = [{'type_code':'RRM', 'type': 'Running Room'}, {'type_code': 'SEM', 'type': 'Section'}, {'type_code': 'STM', 'type': 'Station'}, { 'type_code': 'ORL', 'type': 'Other Rly Unit'}, {'type_code':'SOP' , 'type': 'Shop'}]
        
        
        
#         Zone11=models.Level_Desig.objects.exclude(delete_flag=True).filter(Q(official_email_ID=request.user) | Q(official_email_ID=request.user.email)).values('rly_unit')
#         if Zone11:
#             Zone11 = Zone11[0]['rly_unit']
#             rly_zone = models.railwayLocationMaster.objects.filter(rly_unit_code=Zone11,location_type_desc__in=['RAILWAY BOARD', 'PRODUCTION UNIT', 'HEAD QUATER','OFFICE', 'PSU', 'PRODUCTION UNIT', 'INSTITUTE']).values('location_code').order_by('location_code')
#             if rly_zone:
#                 Zone1 = rly_zone[0]['location_code']
#                 setdiv = ''
#             else:
#                 rly_zone = models.railwayLocationMaster.objects.filter(rly_unit_code=Zone11,location_type_desc__in=['DIVISION','WORKSHOP']).values('location_code','parent_rly_unit_code').order_by('location_code')
#                 if rly_zone:
#                     setdiv = rly_zone[0]['location_code']
#                     rly_zone = models.railwayLocationMaster.objects.filter(rly_unit_code=rly_zone[0]['parent_rly_unit_code'],location_type_desc__in=['RAILWAY BOARD', 'PRODUCTION UNIT', 'HEAD QUATER','OFFICE', 'PSU', 'PRODUCTION UNIT', 'INSTITUTE']).values('location_code').order_by('location_code')
#                     if rly_zone:
#                         Zone1 = rly_zone[0]['location_code']
#                     else:
#                         Zone1 = ''
#                 else:
#                     Zone1 = ''
#                     setdiv = ''
#         else:
#             Zone1 = ''
#             setdiv = ''
#         print(Zone1,setdiv,"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")
#         for i in range(len(desg_no)):
#             if '/' in desg_no[i]['designation']:
#                 r_des=desg_no[i]['designation'].replace('/',' ')
#             elif '.' in desg_no[i]['designation']:
#                 r_des=desg_no[i]['designation'].replace('.',' ')
#             else:
#                 r_des=desg_no[i]['designation']
#             desg_no[i].update({'empnoser':r_des})
#         # print(dlevel)
        


#         context={
#             'Zone':list2 ,
#             'division':list4,
#             'marked_to':list5,
#             'department':list6,
#             'desig': desig_longdesc,
#             'alldesig':alldesig,
#             'desg_no':desg_no,
#             'location_array': location_array,
#             'Zone1':Zone1,
#             'setdiv':setdiv,
#             }
#         # print(list2,'_____________')
#         ins_id=request.GET.get('ins_id')
#         # print(ins_id,'______________________________')
#         ins_detail=[]
#         item_id=[]
#         length = 0
#         sh = []
#         ssh = []
#         if ins_id!=None:
#             item_t = m1.Inspection_details.objects.filter(inspection_no=ins_id).values('item_type')
#             # print("item_t",item_t)
#             # mail_detail = m1.Insp_mail_details.objects.filter(inspection_no=ins_id, area='Copy To')
#             mail_detail = m6.copyto_mails.objects.filter(doc_id=ins_id, doc_table='i', area_flag=0)
#             alldesig1 =models.Level_Desig.objects.exclude(delete_flag=True).values('designation').distinct().order_by('designation')
#             # print('=============' , alldesig1, '==========')
#             Accompany = m1.Insp_Accompany.objects.filter(inspection_no=ins_id).values('accompany')

#             des_id = json.dumps(list(m1.Item_details.objects.filter(inspection_no_id=ins_id, inspection_no__item_type='Insp').exclude(type='SSH').values_list('des_id', flat=True).order_by('item_no')))
#             # print('888888888', des_id)
#             if mail_detail:
#                 new_mail_detail= mail_detail[0].receiver_desig
#                 new_mail_desig_code= mail_detail[0].receiver_id
                
#                 # print(new_mail_desig_code, '1111111111111111')

#             else:
#                 new_mail_detail  = 'NA'
#                 new_mail_desig_code = ''
            
#             item_type = item_t[0]['item_type']
#             print('111111111111111111111111')
#             if item_type == 'Insp':
#                 print('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',ins_id)
#                 ins_detail=list(m1.Inspection_details.objects.filter(inspection_no=ins_id, item_type='Insp').values())
#                 item_details1= list(m1.Item_details.objects.filter(inspection_no_id=ins_id, inspection_no__item_type='Insp').values().order_by('item_no'))
#                 item_data= m1.Item_details.objects.filter(inspection_no_id=ins_id, type="H").values()
#                 multi_loc = m1.Insp_multi_location.objects.filter(inspection_no_id=ins_id).values()
#                 multi_loc_zone = list(m1.Insp_multi_location.objects.filter(inspection_no_id=ins_id,type='HQ').values_list('item',flat=True))
#                 print('9999999999999999999999999999999999999999999999999999999999999', multi_loc_zone)


#                 zone = multi_loc_zone
#                 empnox = models.Level_Desig.objects.exclude(delete_flag=True).filter(Q(official_email_ID=request.user) | Q(official_email_ID=request.user.email), empno__isnull=False)
#                 empnumber=None
#                 if empnox:
#                     empnumber = empnox[0].designation_code
#                 data=[]
#                 for i in range(len(zone)):
#                     l_id=list(models.railwayLocationMaster.objects.filter(location_code=zone[i]).values('rly_unit_code'))
#                     if len(l_id)>0:
#                         desg_no1=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation__isnull=False,rly_unit=l_id[0]['rly_unit_code']).exclude(designation_code=empnumber).values('designation','empno', 'designation_code').order_by('designation'))
                        
#                         if len(desg_no1)>0:
#                             data.extend(desg_no1)
#                 if len(data)==0:
#                     data_desg_no  = desg_no
#                 else:
#                     data_desg_no  = data
#                 multi_loc_div = m1.Insp_multi_location.objects.filter(inspection_no_id=ins_id,type='DIV').values_list('item',flat=True).order_by('item')
#                 multi_loc_from = m1.Insp_multi_location.objects.filter(inspection_no_id=ins_id, type='LOC').distinct('table_from').values_list('table_from', flat=True)
#                 print('multi_loc_from', multi_loc)
#                 length += item_data.count()

#                 for zb in item_details1:
#                     item_id.append(zb['des_id'])

#                 for x in range(len(item_data)):
#                     mid= str(x+1)+'.'
#                     itmdata = m1.Item_details.objects.filter(inspection_no_id=ins_id, type="SH", des_id__startswith=mid).values()
#                     ssh.append(0)
#                     sh.append(len(itmdata))
#                     for y in range(len(itmdata)):
#                         nid= str(x+1)+'.'+ str(y+1)+'.'
#                         itmdata1 = m1.Item_details.objects.filter(inspection_no_id=ins_id, type="SSH", des_id__startswith=nid).count()
#                         ssh.append(itmdata1)
                
#                 # print('len', length,'sh',  sh,'ssh', ssh)
#                 for j in item_details1:
#                     mrkoffi = {}
#                     if j['type'] == 'SH':
#                         mark=m1.Marked_Officers.objects.filter(item_no=j['item_no']).values()
#                         # print('---------', j['item_no'])
                        
#                         desig_longdesc1 =''
#                         marked_officers1 = ''
#                         for x in mark:
#                             # print('xxxxxxxxx', x['myuser_id_id'])
                            
#                             # marked=m1.empmast.objects.filter(myuser_id=x['myuser_id_id'])
                            
#                             # print('yyyyyyyy', marked[0].desig_longdesc)
#                             # if marked[0].desig_longdesc:
#                             #     desig_longdesc1 += marked[0].desig_longdesc+','

#                             des = models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=x['marked_to_id'])
#                             desig_longdesc1 += des[0].designation+','
#                             marked_officers1 += str(des[0].designation_code)+','

#                         #     print(des)
#                         # print('kkkkkkkkkkkkkkk', desig_longdesc1)


#                         #################################   changed #############################
#                         testmarkofficer=''
#                         lstdict=[]
                        

#                         if marked_officers1 != '':
#                             testdesig=desig_longdesc1.split(',')
#                             testempno=marked_officers1.split(',')
#                             testdesig.pop()
#                             testempno.pop()
                            
                            
#                             alldesig = models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).values('d_level').distinct('d_level')
                            
#                             for i in alldesig:
#                                 if i['d_level'] == 'GM':
#                                     lst1=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level']).exclude(designation_code__in=testempno).count()
#                                     if lst1 == 0:
#                                         lst2=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).exclude(d_level=i['d_level']).values('empno','designation','designation_code').order_by('designation'))
#                                         if testmarkofficer != '':
#                                             testmarkofficer+=','
#                                         testmarkofficer=testmarkofficer+"All GM's/ZR"
#                                         # testempno=set(testempno)
#                                         # part=set(map(lambda d: d['partno'], part))
#                                         interkey=set(testempno)-set(map(lambda d: d['designation_code'], lst2))
#                                         testempno=list(map(lambda d: d['designation_code'], lst2))
#                                         testdesig=list(map(lambda d: d['designation'], lst2))
#                                         lstdict.append({"desig":"All GM's/ZR","designation_code":list(interkey)})

#                                 elif i['d_level'] == 'BM':
#                                     lst1=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level']).exclude(designation_code__in=testempno).count()
#                                     if lst1 == 0:
#                                         lst2=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).exclude(d_level=i['d_level']).values('designation_code','designation').order_by('designation'))
#                                         if testmarkofficer != '':
#                                             testmarkofficer+=','
#                                         testmarkofficer=testmarkofficer+"All Board Member's"
#                                         # testempno=set(testempno)
#                                         # part=set(map(lambda d: d['partno'], part))
#                                         interkey=set(testempno)-set(map(lambda d: d['designation_code'], lst2))
#                                         testempno=list(map(lambda d: d['designation_code'], lst2))
#                                         testdesig=list(map(lambda d: d['designation'], lst2))
#                                         lstdict.append({"desig":"All Board Member's","designation_code":list(interkey)})


#                                 elif i['d_level'] == 'PHOD':
#                                     lst1=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level']).exclude(designation_code__in=testempno).count()
#                                     if lst1 == 0:
#                                         lst2=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).exclude(d_level=i['d_level']).values('designation_code','designation').order_by('designation'))
#                                         if testmarkofficer != '':
#                                             testmarkofficer+=','
#                                         testmarkofficer=testmarkofficer+"All PHOD's"
#                                         # testempno=set(testempno)
#                                         # part=set(map(lambda d: d['partno'], part))
#                                         interkey=set(testempno)-set(map(lambda d: d['designation_code'], lst2))
#                                         testempno=list(map(lambda d: d['designation_code'], lst2))
#                                         testdesig=list(map(lambda d: d['designation'], lst2))
#                                         lstdict.append({"desig":"All PHOD's","designation_code":list(interkey)})
#                                     else:
#                                         hq=models.railwayLocationMaster.objects.filter(parent_location_code__isnull=False).values('parent_location_code').distinct()
#                                         for ii in hq:
#                                             rlyunit=models.railwayLocationMaster.objects.filter(parent_location_code=ii['parent_location_code']).values('rly_unit_code')
#                                             if models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level'],rly_unit__in=rlyunit).exists():
#                                                 lst3=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level'],rly_unit__in=rlyunit).exclude(designation_code__in=testempno).count()
#                                                 if lst3 == 0:
#                                                     lst2=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).exclude(d_level=i['d_level'],rly_unit__in=rlyunit).values('designation_code','designation').order_by('designation'))
#                                                     if testmarkofficer != '':
#                                                         testmarkofficer+=','
#                                                     testmarkofficer=testmarkofficer+"All PHOD's"+ii['parent_location_code']
#                                                     # testempno=set(testempno)
#                                                     # part=set(map(lambda d: d['partno'], part))
#                                                     interkey=set(testempno)-set(map(lambda d: d['designation_code'], lst2))
#                                                     testempno=list(map(lambda d: d['designation_code'], lst2))
#                                                     testdesig=list(map(lambda d: d['designation'], lst2))
#                                                     lstdict.append({"desig":"All PHOD's/"+ii['parent_location_code'],"designation_code":list(interkey)})



#                                 elif i['d_level'] == 'DRM':
#                                     lst1=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level']).exclude(designation_code__in=testempno).count()
#                                     if lst1 == 0:
#                                         lst2=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).exclude(d_level=i['d_level']).values('designation_code','designation').order_by('designation'))
#                                         if testmarkofficer != '':
#                                             testmarkofficer+=','
#                                         testmarkofficer=testmarkofficer+"All DRM's"
#                                         # testempno=set(testempno)
#                                         # part=set(map(lambda d: d['partno'], part))
#                                         interkey=set(testempno)-set(map(lambda d: d['designation_code'], lst2))
#                                         testempno=list(map(lambda d: d['designation_code'], lst2))
#                                         testdesig=list(map(lambda d: d['designation'], lst2))
#                                         lstdict.append({"desig":"All DRM's","designation_code":list(interkey)})
#                                     else:
#                                         hq=models.railwayLocationMaster.objects.filter(parent_location_code__isnull=False).values('parent_location_code').distinct()
#                                         for ii in hq:
#                                             rlyunit=models.railwayLocationMaster.objects.filter(parent_location_code=ii['parent_location_code']).values('rly_unit_code')
#                                             if models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level'],rly_unit__in=rlyunit).exists():
#                                                 lst3=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level'],rly_unit__in=rlyunit).exclude(designation_code__in=testempno).count()
#                                                 if lst3 == 0:
#                                                     lst2=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).exclude(d_level=i['d_level'],rly_unit__in=rlyunit).values('designation_code','designation').order_by('designation'))
#                                                     if testmarkofficer != '':
#                                                         testmarkofficer+=','
#                                                     testmarkofficer=testmarkofficer+"All DRM's/"+ii['parent_location_code']
#                                                     # testempno=set(testempno)
#                                                     # part=set(map(lambda d: d['partno'], part))
#                                                     interkey=set(testempno)-set(map(lambda d: d['designation_code'], lst2))
#                                                     testempno=list(map(lambda d: d['designation_code'], lst2))
#                                                     testdesig=list(map(lambda d: d['designation'], lst2))
#                                                     lstdict.append({"desig":"All DRM's/"+ii['parent_location_code'],"designation_code":list(interkey)})


                            
#                             for i in range(len(testdesig)):
#                                 if testmarkofficer != '':
#                                     testmarkofficer+=','
#                                 testmarkofficer=testmarkofficer+testdesig[i]
#                                 lstdict.append({"desig":testdesig[i],"designation_code":[testempno[i]]})

#                         marked_officers1 = marked_officers1.rstrip(',')
#                         mrkoffi.update({'marked_officers': marked_officers1, 'desig_longdesc': testmarkofficer,'custom_key':json.dumps(lstdict)})

#                         #################################  end      #############################

                        
                        
#                         j.update({'mrkoffi': mrkoffi})
#                     elif j['type'] == 'H':
#                         mark=m1.Marked_Officers.objects.filter(item_no=j['item_no'])

#                         if mark.exists():
#                             if mark[0].marked_to is not None: 
#                                 # print('---------', j['item_no'])
#                                 # mrkoffi = {}
#                                 desig_longdesc1 =''
#                                 marked_officers1 = ''
#                                 for x in mark.values():
#                                     # print('xxxxxxxxx', x['myuser_id_id'])
                                    
#                                     # marked=m1.empmast.objects.filter(myuser_id=x['myuser_id_id'])
                                
#                                     # des = models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=marked[0].designation_code)
#                                     # desig_longdesc1 += des[0].designation+','
#                                     # print(des)
                                
#                                     # marked_officers1 += marked[0].designation_code+','

#                                     des = models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=x['marked_to_id'])
#                                     desig_longdesc1 += des[0].designation+','
#                                     marked_officers1 += str(des[0].designation_code)+','

#                                 # print('kkkkkkkkkkkkkkk', desig_longdesc1)
                                
#                                 if marked_officers1 != '':
#                                     testdesig=desig_longdesc1.split(',')
#                                     testempno=marked_officers1.split(',')
#                                     testdesig.pop()
#                                     testempno.pop()
#                                     testmarkofficer=''
#                                     lstdict=[]
#                                     alldesig = models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).values('d_level').distinct('d_level')
                                    
#                                     for i in alldesig:
#                                         if i['d_level'] == 'GM':
#                                             lst1=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level']).exclude(designation_code__in=testempno).count()
#                                             if lst1 == 0:
#                                                 lst2=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).exclude(d_level=i['d_level']).values('designation_code','designation').order_by('designation'))
#                                                 if testmarkofficer != '':
#                                                     testmarkofficer+=','
#                                                 testmarkofficer=testmarkofficer+"All GM's/ZR"
#                                                 # testempno=set(testempno)
#                                                 # part=set(map(lambda d: d['partno'], part))
#                                                 interkey=set(testempno)-set(map(lambda d: d['designation_code'], lst2))
#                                                 testempno=list(map(lambda d: d['designation_code'], lst2))
#                                                 testdesig=list(map(lambda d: d['designation'], lst2))
#                                                 lstdict.append({"desig":"All GM's/ZR","designation_code":list(interkey)})

#                                         elif i['d_level'] == 'BM':
#                                             lst1=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level']).exclude(designation_code__in=testempno).count()
#                                             if lst1 == 0:
#                                                 lst2=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).exclude(d_level=i['d_level']).values('designation_code','designation').order_by('designation'))
#                                                 if testmarkofficer != '':
#                                                     testmarkofficer+=','
#                                                 testmarkofficer=testmarkofficer+"All Board Member's"
#                                                 # testempno=set(testempno)
#                                                 # part=set(map(lambda d: d['partno'], part))
#                                                 interkey=set(testempno)-set(map(lambda d: d['designation_code'], lst2))
#                                                 testempno=list(map(lambda d: d['designation_code'], lst2))
#                                                 testdesig=list(map(lambda d: d['designation'], lst2))
#                                                 lstdict.append({"desig":"All Board Member's","designation_code":list(interkey)})


#                                         elif i['d_level'] == 'PHOD':
#                                             lst1=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level']).exclude(designation_code__in=testempno).count()
#                                             if lst1 == 0:
#                                                 lst2=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).exclude(d_level=i['d_level']).values('designation_code','designation').order_by('designation'))
#                                                 if testmarkofficer != '':
#                                                     testmarkofficer+=','
#                                                 testmarkofficer=testmarkofficer+"All PHOD's"
#                                                 # testempno=set(testempno)
#                                                 # part=set(map(lambda d: d['partno'], part))
#                                                 interkey=set(testempno)-set(map(lambda d: d['designation_code'], lst2))
#                                                 testempno=list(map(lambda d: d['designation_code'], lst2))
#                                                 testdesig=list(map(lambda d: d['designation'], lst2))
#                                                 lstdict.append({"desig":"All PHOD's","designation_code":list(interkey)})
#                                             else:
#                                                 hq=models.railwayLocationMaster.objects.filter(parent_location_code__isnull=False).values('parent_location_code').distinct()
#                                                 for ii in hq:
#                                                     rlyunit=models.railwayLocationMaster.objects.filter(parent_location_code=ii['parent_location_code']).values('rly_unit_code')
#                                                     if models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level'],rly_unit__in=rlyunit).exists():
#                                                         lst3=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level'],rly_unit__in=rlyunit).exclude(designation_code__in=testempno).count()
#                                                         if lst3 == 0:
#                                                             lst2=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).exclude(d_level=i['d_level'],rly_unit__in=rlyunit).values('designation_code','designation').order_by('designation'))
#                                                             if testmarkofficer != '':
#                                                                 testmarkofficer+=','
#                                                             testmarkofficer=testmarkofficer+"All PHOD's"+ii['parent_location_code']
#                                                             # testempno=set(testempno)
#                                                             # part=set(map(lambda d: d['partno'], part))
#                                                             interkey=set(testempno)-set(map(lambda d: d['designation_code'], lst2))
#                                                             testempno=list(map(lambda d: d['designation_code'], lst2))
#                                                             testdesig=list(map(lambda d: d['designation'], lst2))
#                                                             lstdict.append({"desig":"All PHOD's/"+ii['parent_location_code'],"designation_code":list(interkey)})



#                                         elif i['d_level'] == 'DRM':
#                                             lst1=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level']).exclude(designation_code__in=testempno).count()
#                                             if lst1 == 0:
#                                                 lst2=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).exclude(d_level=i['d_level']).values('designation_code','designation').order_by('designation'))
#                                                 if testmarkofficer != '':
#                                                     testmarkofficer+=','
#                                                 testmarkofficer=testmarkofficer+"All DRM's"
#                                                 # testempno=set(testempno)
#                                                 # part=set(map(lambda d: d['partno'], part))
#                                                 interkey=set(testempno)-set(map(lambda d: d['designation_code'], lst2))
#                                                 testempno=list(map(lambda d: d['designation_code'], lst2))
#                                                 testdesig=list(map(lambda d: d['designation'], lst2))
#                                                 lstdict.append({"desig":"All DRM's","designation_code":list(interkey)})
#                                             else:
#                                                 hq=models.railwayLocationMaster.objects.filter(parent_location_code__isnull=False).values('parent_location_code').distinct()
#                                                 for ii in hq:
#                                                     rlyunit=models.railwayLocationMaster.objects.filter(parent_location_code=ii['parent_location_code']).values('rly_unit_code')
#                                                     if models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level'],rly_unit__in=rlyunit).exists():
#                                                         lst3=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level'],rly_unit__in=rlyunit).exclude(designation_code__in=testempno).count()
#                                                         if lst3 == 0:
#                                                             lst2=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).exclude(d_level=i['d_level'],rly_unit__in=rlyunit).values('designation_code','designation').order_by('designation'))
#                                                             if testmarkofficer != '':
#                                                                 testmarkofficer+=','
#                                                             testmarkofficer=testmarkofficer+"All DRM's/"+ii['parent_location_code']
#                                                             # testempno=set(testempno)
#                                                             # part=set(map(lambda d: d['partno'], part))
#                                                             interkey=set(testempno)-set(map(lambda d: d['designation_code'], lst2))
#                                                             testempno=list(map(lambda d: d['designation_code'], lst2))
#                                                             testdesig=list(map(lambda d: d['designation'], lst2))
#                                                             lstdict.append({"desig":"All DRM's/"+ii['parent_location_code'],"designation_code":list(interkey)})


                                    
#                                     for i in range(len(testdesig)):
#                                         if testmarkofficer != '':
#                                             testmarkofficer+=','
#                                         testmarkofficer=testmarkofficer+testdesig[i]
#                                         lstdict.append({"desig":testdesig[i],"designation_code":[testempno[i]]})

#                                 marked_officers1 = marked_officers1.rstrip(',')
#                                 mrkoffi.update({'marked_officers': marked_officers1, 'desig_longdesc': testmarkofficer,'custom_key':json.dumps(lstdict)})
                                

#                                 #################################  end      #############################

                                
                                
#                                 j.update({'mrkoffi': mrkoffi, 'chk_cts':'YES'})
#                             else:
#                                 j.update({'mrkoffi': '', 'chk_cts':'YES'})
#                         else:

#                             j.update({'chk_cts':'NO'})
#                     ins_detail[0].update({'item_details1': item_details1})
#                     # print('00000000', ins_detail)
#                     # print('00000000', ins_detail)
                

#                 print("Zone....",list2)
#                 for i in multi_loc:
#                     print("item",i['item'],"type : ",i['type'])
#                 print("multi_div",multi_loc_div)
#                 item_val = list(m1.Item_details.objects.filter(inspection_no=ins_id,del_flag=1).values('des_id'))
#                 item_val = list(map(lambda d: d['des_id'], item_val))
#                 context={
#                     'ins_id':ins_id,
#                     'ins_detail':ins_detail,
#                     'item_id': item_id,
#                     'length_of_h': length,
#                     'sh_list': sh,
#                     'ssh_list': ssh,
#                     'multi_loc': multi_loc,
#                     'Zone':list2 ,
#                     'division':list4,
#                     'department':list6,
#                     'new_mail_detail': new_mail_detail,
#                     'new_mail_desig_code': new_mail_desig_code,
#                     'alldesig':alldesig1,
#                     'desg_no':data_desg_no,
#                     'desg_no11':desg_no,
#                     'des_id': des_id,
#                     'Accompany': Accompany,
#                     'location_array': location_array,
#                     'multi_loc_from': multi_loc_from,
#                     'multi_loc_zone':multi_loc_zone,
#                     'multi_loc_div':multi_loc_div,
#                     'item_val':json.dumps(item_val)
#                     }  
                
#                 return render(request,"edit_inspection_form.html",context)
#             elif item_type == 'Chk':
#                 #visnu code
#                 ins_detail=list(m1.Inspection_details.objects.filter(inspection_no=ins_id, item_type='Chk').values('zone','division','dept','location','inspected_on','inspection_title'))
#                 item_details1= list(m1.Item_details.objects.filter(inspection_no_id=ins_id, inspection_no__item_type='Chk').values('observation').order_by('item_no'))
#                 #visnu code
                
                
#                 empdata=m1.empmast.objects.filter(myuser_id=request.user).values('empname','empno', 'desig_longdesc')
#                 desig_longdesc = empdata[0]['desig_longdesc']
                
#                 # print('ttttttttttttttttttttttttttttttttttttttttttttttttttttttt', desig_longdesc)
                
#                 list1=models.railwayLocationMaster.objects.filter(location_type='ZR').values('location_code')
#                 list2=[]
#                 for i in list1:
#                     # print(i['location_code'],'_________')
#                     list2.append(i['location_code'])
#                 list3=models.railwayLocationMaster.objects.filter(location_type='DIV').values('location_code')
#                 list4=[]
#                 list5 =[]
#                 for i in list3:
#                     # print(i['location_code'],'_________')
#                     list4.append(i['location_code']) 
#                 try:
                    
#                     list5=list(models.Level_Desig.objects.exclude(delete_flag=True).all().values('designation','designation_code'))  
#                 except Exception as e:
#                     print("e==",e)  
#                 list6=models.departMast.objects.all().values('department_name')
                
            
#                 context={
#                     'Zone':list2 ,
#                     'division':list4,
#                     'marked_to':list5,
#                     'department':list6,
#                     'desig': desig_longdesc,
#                     'ins_detail':ins_detail,
#                     'item_details1':item_details1
                
#                     }
                    
#                 return render(request, 'search_checklist_template_report.html',context)
                
#             else:
#                 messages.error(request, 'oops error')
#         else:     
#             return render(request,"create_inspection_form.html", context)

#     except Exception as e:
#         print(e)
#         try:
#             m1.error_Table.objects.create(fun_name="create_inspection_form",user_id=request.user,err_details=str(e))
#         except:
#             print("Internal Error!!!")
#         return render(request, "errorspage.html", {})

### 290323
# def create_inspection_form(request):
#     try:
#         print("inside create form")
#         empnox = models.Level_Desig.objects.exclude(delete_flag=True).filter(Q(official_email_ID=request.user) | Q(official_email_ID=request.user.email), empno__isnull=False)
#         empnumber=None
#         dlevel=None
#         rly_unit_id=None
#         if empnox:
#             empno = empnox[0].empno
#             empnumber = empnox[0].designation_code
#             dlevel = empnox[0].d_level
#             rly_unit_id = empnox[0].rly_unit_id
        
#         empdata = models.Level_Desig.objects.exclude(delete_flag=True).filter(official_email_ID=request.user).values('designation', 'empno')
#         if empdata:
#             desig_longdesc = empdata[0]['designation']
#         else:
#             desig_longdesc ='NA'

        
#         # desig_longdesc = empdata[0]['desig_longdesc']
#         # print('ttttttttttttttttttttttttttttttttttttttttttttttttttttttt', desig_longdesc)
#         list1=models.railwayLocationMaster.objects.filter(location_type_desc__in=['RAILWAY BOARD', 'PRODUCTION UNIT', 'HEAD QUATER','OFFICE', 'PSU', 'PRODUCTION UNIT', 'INSTITUTE']).values('location_code').order_by('location_code')
#         list2=[]
#         for i in list1:
#             # print(i['location_code'],'_________')
#             list2.append(i['location_code'])
#         list3=models.railwayLocationMaster.objects.filter(location_type_desc__in=['DIVISION','WORKSHOP']).values('location_code', 'location_type').order_by('location_code')
#         list4=[]
#         list5 =[]
#         for i in list3:
#             # print(i['location_code'],'_________')
#             list4.append({'location_code':i['location_code'],'location_type':i['location_type']}) 
#         try:
            
#             list5=list(models.Level_Desig.objects.exclude(delete_flag=True).all().values('designation','designation_code'))  
#         except Exception as e:
#             print("e==",e)  
#         list6=models.departMast.objects.all().values('department_name').order_by('department_name')
#         alldesig=models.Level_Desig.objects.exclude(delete_flag=True).values('designation').distinct().order_by('designation')

       
       

#         location_array = [{'type_code':'RRM', 'type': 'Running Room'}, {'type_code': 'SEM', 'type': 'Section'}, {'type_code': 'STM', 'type': 'Station'}, { 'type_code': 'ORL', 'type': 'Other Rly Unit'}, {'type_code':'SOP' , 'type': 'Shop'}]
        
        
        
#         Zone11=models.Level_Desig.objects.exclude(delete_flag=True).filter(Q(official_email_ID=request.user) | Q(official_email_ID=request.user.email)).values('rly_unit')
#         if Zone11:
#             Zone11 = Zone11[0]['rly_unit']
#             rly_zone = models.railwayLocationMaster.objects.filter(rly_unit_code=Zone11,location_type_desc__in=['RAILWAY BOARD', 'PRODUCTION UNIT', 'HEAD QUATER','OFFICE', 'PSU', 'PRODUCTION UNIT', 'INSTITUTE']).values('location_code').order_by('location_code')
#             if rly_zone:
#                 Zone1 = rly_zone[0]['location_code']
#                 setdiv = ''
#             else:
#                 rly_zone = models.railwayLocationMaster.objects.filter(rly_unit_code=Zone11,location_type_desc__in=['DIVISION','WORKSHOP']).values('location_code','parent_rly_unit_code').order_by('location_code')
#                 print(list(rly_zone))
#                 if rly_zone:
#                     setdiv = rly_zone[0]['location_code']
#                     rly_zone = models.railwayLocationMaster.objects.filter(rly_unit_code=rly_zone[0]['parent_rly_unit_code'],location_type_desc__in=['RAILWAY BOARD', 'PRODUCTION UNIT', 'HEAD QUATER','OFFICE', 'PSU', 'PRODUCTION UNIT', 'INSTITUTE']).values('location_code').order_by('location_code')
#                     if rly_zone:
#                         Zone1 = rly_zone[0]['location_code']
#                     else:
#                         Zone1 = ''
#                 else:
#                     Zone1 = ''
#                     setdiv = ''
#         else:
#             Zone1 = ''
#             setdiv = ''
#         print(Zone1,setdiv,"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")
        

        
        
#         desg_no=[]
#         if Zone1:
#             zone = Zone1.split(',')
#             div = setdiv.split(',')
#             print('hhh',zone,div)
#             # print("hello zone",zone, len(div))
#             c=0
#             empnox = models.Level_Desig.objects.exclude(delete_flag=True).filter(Q(official_email_ID=request.user) | Q(official_email_ID=request.user.email), empno__isnull=False)
#             empnumber=None
#             if empnox:
#                 empnumber = empnox[0].designation_code
#             data=[]
#             # Div wise filter
#             if div[0]=="":
#                 pass
#             else:
#                 for i in range(len(div)):
#                     l_id=list(models.railwayLocationMaster.objects.filter(Q(location_code=div[i])).values('rly_unit_code'))
#                     print(l_id)
#                     if len(l_id)>0:
#                         for x in range(len(l_id)):
#                             desg_no=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation__isnull=False,rly_unit=l_id[x]['rly_unit_code']).exclude(designation_code=empnumber).values('designation','empno', 'designation_code').order_by('designation'))
#                             if len(desg_no)>0:
#                                 if desg_no not in data:
#                                     data.extend(desg_no) 
#             # Zone wise filter
#             for i in range(len(zone)):
#                 l_id=list(models.railwayLocationMaster.objects.filter(Q(location_code=zone[i])).values('rly_unit_code'))
#                 if len(l_id)>0:
#                     desg_no=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation__isnull=False,rly_unit=l_id[0]['rly_unit_code']).exclude(designation_code=empnumber).values('designation','empno', 'designation_code').order_by('designation'))
#                     if len(desg_no)>0:
#                         # print(desg_no)
#                         if desg_no not in data:
#                             data.extend(desg_no)
#             # print(len(data),c)
#             for i in range(len(zone)):
#                 l_id=list(models.railwayLocationMaster.objects.filter(Q(parent_location_code=zone[i])).values('rly_unit_code'))
#                 # print(l_id)
#                 if len(l_id)>0:
#                     for x in range(len(l_id)):
#                         desg_no=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation__isnull=False,rly_unit=l_id[x]['rly_unit_code']).exclude(designation_code=empnumber).values('designation','empno', 'designation_code').order_by('designation'))
#                         if len(desg_no)>0:
#                             if desg_no[0] not in data:
#                                 # print(desg_no)
#                                 data.extend(desg_no) 
#             desg_no = data
#         else:
#             desg_no=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation__isnull=False).exclude(designation_code=empnumber).values('designation','empno', 'designation_code').order_by('designation'))

#         for i in range(len(desg_no)):
#             if '/' in desg_no[i]['designation']:
#                 r_des=desg_no[i]['designation'].replace('/',' ')
#             elif '.' in desg_no[i]['designation']:
#                 r_des=desg_no[i]['designation'].replace('.',' ')
#             else:
#                 r_des=desg_no[i]['designation']
#             desg_no[i].update({'empnoser':r_des})
        

#         context={
#             'Zone':list2 ,
#             'division':list4,
#             'marked_to':list5,
#             'department':list6,
#             'desig': desig_longdesc,
#             'alldesig':alldesig,
#             'desg_no':desg_no,
#             'location_array': location_array,
#             'Zone1':Zone1,
#             'setdiv':setdiv,
#             }
#         # print(list2,'_____________')
#         ins_id=request.GET.get('ins_id')
#         # print(ins_id,'______________________________')
#         ins_detail=[]
#         item_id=[]
#         length = 0
#         sh = []
#         ssh = []
#         if ins_id!=None:
#             item_t = m1.Inspection_details.objects.filter(inspection_no=ins_id).values('item_type')
#             # print("item_t",item_t)
#             # mail_detail = m1.Insp_mail_details.objects.filter(inspection_no=ins_id, area='Copy To')
#             mail_detail = m6.copyto_mails.objects.filter(doc_id=ins_id, doc_table='i', area_flag=0)
#             alldesig1 =models.Level_Desig.objects.exclude(delete_flag=True).values('designation').distinct().order_by('designation')
#             # print('=============' , alldesig1, '==========')
#             Accompany = m1.Insp_Accompany.objects.filter(inspection_no=ins_id).values('accompany')

#             des_id = json.dumps(list(m1.Item_details.objects.filter(inspection_no_id=ins_id, inspection_no__item_type='Insp').exclude(type='SSH').values_list('des_id', flat=True).order_by('item_no')))
#             # print('888888888', des_id)
#             if mail_detail:
#                 new_mail_detail= mail_detail[0].receiver_desig
#                 new_mail_desig_code= mail_detail[0].receiver_id
                
#                 # print(new_mail_desig_code, '1111111111111111')

#             else:
#                 new_mail_detail  = 'NA'
#                 new_mail_desig_code = ''
            
#             item_type = item_t[0]['item_type']
#             print('111111111111111111111111')
#             if item_type == 'Insp':
#                 print('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',ins_id)
#                 ins_detail=list(m1.Inspection_details.objects.filter(inspection_no=ins_id, item_type='Insp', status_flag=0).values())
                
#                 if ins_detail==[]:
#                     return render(request,"data_not_found.html")
                    
#                 item_details1= list(m1.Item_details.objects.filter(inspection_no_id=ins_id, inspection_no__item_type='Insp').values().order_by('item_no'))
#                 item_data= m1.Item_details.objects.filter(inspection_no_id=ins_id, type="H").values()
#                 multi_loc = m1.Insp_multi_location.objects.filter(inspection_no_id=ins_id).values()
#                 multi_loc_zone = list(m1.Insp_multi_location.objects.filter(inspection_no_id=ins_id,type='HQ').values_list('item',flat=True))
#                 print('9999999999999999999999999999999999999999999999999999999999999', multi_loc_zone)


#                 zone = multi_loc_zone
#                 empnox = models.Level_Desig.objects.exclude(delete_flag=True).filter(Q(official_email_ID=request.user) | Q(official_email_ID=request.user.email), empno__isnull=False)
#                 empnumber=None
#                 if empnox:
#                     empnumber = empnox[0].designation_code
                
#                 data=[]
#                 for i in range(len(zone)):
#                     l_id=list(models.railwayLocationMaster.objects.filter(location_code=zone[i]).values('rly_unit_code'))
#                     if len(l_id)>0:
#                         desg_no1=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation__isnull=False,rly_unit=l_id[0]['rly_unit_code']).exclude(designation_code=empnumber).values('designation','empno', 'designation_code').order_by('designation'))
                        
#                         if len(desg_no1)>0:
#                             data.extend(desg_no1)
#                 if len(data)==0:
#                     data_desg_no  = desg_no
#                 else:
#                     data_desg_no  = data

#                 ###########
                
#                 desg_no=[]
#                 if Zone1:
#                     zone = Zone1.split(',')
#                     div = setdiv.split(',')
#                     print('hhh',zone,div)
#                     # print("hello zone",zone, len(div))
#                     c=0
#                     empnox = models.Level_Desig.objects.exclude(delete_flag=True).filter(Q(official_email_ID=request.user) | Q(official_email_ID=request.user.email), empno__isnull=False)
#                     empnumber=None
#                     if empnox:
#                         empnumber = empnox[0].designation_code
#                     data=[]
#                     # Div wise filter
#                     if div[0]=="":
#                         pass
#                     else:
#                         for i in range(len(div)):
#                             l_id=list(models.railwayLocationMaster.objects.filter(Q(location_code=div[i])).values('rly_unit_code'))
#                             print(l_id)
#                             if len(l_id)>0:
#                                 for x in range(len(l_id)):
#                                     desg_no=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation__isnull=False,rly_unit=l_id[x]['rly_unit_code']).exclude(designation_code=empnumber).values('designation','empno', 'designation_code').order_by('designation'))
#                                     if len(desg_no)>0:
#                                         if desg_no not in data:
#                                             data.extend(desg_no) 
#                     # Zone wise filter
#                     for i in range(len(zone)):
#                         l_id=list(models.railwayLocationMaster.objects.filter(Q(location_code=zone[i])).values('rly_unit_code'))
#                         if len(l_id)>0:
#                             desg_no=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation__isnull=False,rly_unit=l_id[0]['rly_unit_code']).exclude(designation_code=empnumber).values('designation','empno', 'designation_code').order_by('designation'))
#                             if len(desg_no)>0:
#                                 # print(desg_no)
#                                 if desg_no not in data:
#                                     data.extend(desg_no)
#                     # print(len(data),c)
#                     for i in range(len(zone)):
#                         l_id=list(models.railwayLocationMaster.objects.filter(Q(parent_location_code=zone[i])).values('rly_unit_code'))
#                         # print(l_id)
#                         if len(l_id)>0:
#                             for x in range(len(l_id)):
#                                 desg_no=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation__isnull=False,rly_unit=l_id[x]['rly_unit_code']).exclude(designation_code=empnumber).values('designation','empno', 'designation_code').order_by('designation'))
#                                 if len(desg_no)>0:
#                                     if desg_no[0] not in data:
#                                         # print(desg_no)
#                                         data.extend(desg_no) 
#                     desg_no = data
#                 else:
#                     desg_no=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation__isnull=False).exclude(designation_code=empnumber).values('designation','empno', 'designation_code').order_by('designation'))


#                 data_desg_no = desg_no
#                 ########## 
#                 multi_loc_div = m1.Insp_multi_location.objects.filter(inspection_no_id=ins_id,type='DIV').values_list('item',flat=True).order_by('item')
#                 multi_loc_from = m1.Insp_multi_location.objects.filter(inspection_no_id=ins_id, type='LOC').distinct('table_from').values_list('table_from', flat=True)
#                 print('multi_loc_from', multi_loc)
#                 length += item_data.count()

#                 for zb in item_details1:
#                     item_id.append(zb['des_id'])

#                 for x in range(len(item_data)): 
#                     mid= str(x+1)+'.'
#                     itmdata = m1.Item_details.objects.filter(inspection_no_id=ins_id, type="SH", des_id__startswith=mid).values()
#                     ssh.append(0)
#                     sh.append(len(itmdata))
#                     for y in range(len(itmdata)):
#                         nid= str(x+1)+'.'+ str(y+1)+'.'
#                         itmdata1 = m1.Item_details.objects.filter(inspection_no_id=ins_id, type="SSH", des_id__startswith=nid).count()
#                         ssh.append(itmdata1)
                
#                 # print('len', length,'sh',  sh,'ssh', ssh)
#                 for j in item_details1:
#                     mrkoffi = {}
#                     if j['type'] == 'SH':
#                         mark=m1.Marked_Officers.objects.filter(item_no=j['item_no']).values()
#                         # print('---------', j['item_no'])
                        
#                         desig_longdesc1 =''
#                         marked_officers1 = ''
#                         for x in mark:
#                             # print('xxxxxxxxx', x['myuser_id_id'])
                            
#                             # marked=m1.empmast.objects.filter(myuser_id=x['myuser_id_id'])
                            
#                             # print('yyyyyyyy', marked[0].desig_longdesc)
#                             # if marked[0].desig_longdesc:
#                             #     desig_longdesc1 += marked[0].desig_longdesc+','

#                             des = models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=x['marked_to_id'])
#                             desig_longdesc1 += des[0].designation+','
#                             marked_officers1 += str(des[0].designation_code)+','

#                         #     print(des)
#                         # print('kkkkkkkkkkkkkkk', desig_longdesc1)


#                         #################################   changed #############################
#                         testmarkofficer=''
#                         lstdict=[]
                        

#                         if marked_officers1 != '':
#                             testdesig=desig_longdesc1.split(',')
#                             testempno=marked_officers1.split(',')
#                             testdesig.pop()
#                             testempno.pop()
                            
                            
#                             alldesig = models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).values('d_level').distinct('d_level')
                            
#                             for i in alldesig:
#                                 if i['d_level'] == 'GM':
#                                     lst1=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level']).exclude(designation_code__in=testempno).count()
#                                     if lst1 == 0:
#                                         lst2=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).exclude(d_level=i['d_level']).values('empno','designation','designation_code').order_by('designation'))
#                                         if testmarkofficer != '':
#                                             testmarkofficer+=','
#                                         testmarkofficer=testmarkofficer+"All GM's/ZR"
#                                         # testempno=set(testempno)
#                                         # part=set(map(lambda d: d['partno'], part))
#                                         interkey=set(testempno)-set(map(lambda d: d['designation_code'], lst2))
#                                         testempno=list(map(lambda d: d['designation_code'], lst2))
#                                         testdesig=list(map(lambda d: d['designation'], lst2))
#                                         lstdict.append({"desig":"All GM's/ZR","designation_code":list(interkey)})

#                                 elif i['d_level'] == 'BM':
#                                     lst1=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level']).exclude(designation_code__in=testempno).count()
#                                     if lst1 == 0:
#                                         lst2=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).exclude(d_level=i['d_level']).values('designation_code','designation').order_by('designation'))
#                                         if testmarkofficer != '':
#                                             testmarkofficer+=','
#                                         testmarkofficer=testmarkofficer+"All Board Member's"
#                                         # testempno=set(testempno)
#                                         # part=set(map(lambda d: d['partno'], part))
#                                         interkey=set(testempno)-set(map(lambda d: d['designation_code'], lst2))
#                                         testempno=list(map(lambda d: d['designation_code'], lst2))
#                                         testdesig=list(map(lambda d: d['designation'], lst2))
#                                         lstdict.append({"desig":"All Board Member's","designation_code":list(interkey)})


#                                 elif i['d_level'] == 'PHOD':
#                                     lst1=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level']).exclude(designation_code__in=testempno).count()
#                                     if lst1 == 0:
#                                         lst2=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).exclude(d_level=i['d_level']).values('designation_code','designation').order_by('designation'))
#                                         if testmarkofficer != '':
#                                             testmarkofficer+=','
#                                         testmarkofficer=testmarkofficer+"All PHOD's"
#                                         # testempno=set(testempno)
#                                         # part=set(map(lambda d: d['partno'], part))
#                                         interkey=set(testempno)-set(map(lambda d: d['designation_code'], lst2))
#                                         testempno=list(map(lambda d: d['designation_code'], lst2))
#                                         testdesig=list(map(lambda d: d['designation'], lst2))
#                                         lstdict.append({"desig":"All PHOD's","designation_code":list(interkey)})
#                                     else:
#                                         hq=models.railwayLocationMaster.objects.filter(parent_location_code__isnull=False).values('parent_location_code').distinct()
#                                         for ii in hq:
#                                             rlyunit=models.railwayLocationMaster.objects.filter(parent_location_code=ii['parent_location_code']).values('rly_unit_code')
#                                             if models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level'],rly_unit__in=rlyunit).exists():
#                                                 lst3=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level'],rly_unit__in=rlyunit).exclude(designation_code__in=testempno).count()
#                                                 if lst3 == 0:
#                                                     lst2=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).exclude(d_level=i['d_level'],rly_unit__in=rlyunit).values('designation_code','designation').order_by('designation'))
#                                                     if testmarkofficer != '':
#                                                         testmarkofficer+=','
#                                                     testmarkofficer=testmarkofficer+"All PHOD's"+ii['parent_location_code']
#                                                     # testempno=set(testempno)
#                                                     # part=set(map(lambda d: d['partno'], part))
#                                                     interkey=set(testempno)-set(map(lambda d: d['designation_code'], lst2))
#                                                     testempno=list(map(lambda d: d['designation_code'], lst2))
#                                                     testdesig=list(map(lambda d: d['designation'], lst2))
#                                                     lstdict.append({"desig":"All PHOD's/"+ii['parent_location_code'],"designation_code":list(interkey)})



#                                 elif i['d_level'] == 'DRM':
#                                     lst1=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level']).exclude(designation_code__in=testempno).count()
#                                     if lst1 == 0:
#                                         lst2=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).exclude(d_level=i['d_level']).values('designation_code','designation').order_by('designation'))
#                                         if testmarkofficer != '':
#                                             testmarkofficer+=','
#                                         testmarkofficer=testmarkofficer+"All DRM's"
#                                         # testempno=set(testempno)
#                                         # part=set(map(lambda d: d['partno'], part))
#                                         interkey=set(testempno)-set(map(lambda d: d['designation_code'], lst2))
#                                         testempno=list(map(lambda d: d['designation_code'], lst2))
#                                         testdesig=list(map(lambda d: d['designation'], lst2))
#                                         lstdict.append({"desig":"All DRM's","designation_code":list(interkey)})
#                                     else:
#                                         hq=models.railwayLocationMaster.objects.filter(parent_location_code__isnull=False).values('parent_location_code').distinct()
#                                         for ii in hq:
#                                             rlyunit=models.railwayLocationMaster.objects.filter(parent_location_code=ii['parent_location_code']).values('rly_unit_code')
#                                             if models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level'],rly_unit__in=rlyunit).exists():
#                                                 lst3=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level'],rly_unit__in=rlyunit).exclude(designation_code__in=testempno).count()
#                                                 if lst3 == 0:
#                                                     lst2=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).exclude(d_level=i['d_level'],rly_unit__in=rlyunit).values('designation_code','designation').order_by('designation'))
#                                                     if testmarkofficer != '':
#                                                         testmarkofficer+=','
#                                                     testmarkofficer=testmarkofficer+"All DRM's/"+ii['parent_location_code']
#                                                     # testempno=set(testempno)
#                                                     # part=set(map(lambda d: d['partno'], part))
#                                                     interkey=set(testempno)-set(map(lambda d: d['designation_code'], lst2))
#                                                     testempno=list(map(lambda d: d['designation_code'], lst2))
#                                                     testdesig=list(map(lambda d: d['designation'], lst2))
#                                                     lstdict.append({"desig":"All DRM's/"+ii['parent_location_code'],"designation_code":list(interkey)})


                            
#                             for i in range(len(testdesig)):
#                                 if testmarkofficer != '':
#                                     testmarkofficer+=','
#                                 testmarkofficer=testmarkofficer+testdesig[i]
#                                 lstdict.append({"desig":testdesig[i],"designation_code":[testempno[i]]})

#                         marked_officers1 = marked_officers1.rstrip(',')
#                         mrkoffi.update({'marked_officers': marked_officers1, 'desig_longdesc': testmarkofficer,'custom_key':json.dumps(lstdict)})

#                         #################################  end      #############################

                        
                        
#                         j.update({'mrkoffi': mrkoffi})
#                     elif j['type'] == 'H':
#                         mark=m1.Marked_Officers.objects.filter(item_no=j['item_no'])

#                         if mark.exists():
#                             if mark[0].marked_to is not None: 
#                                 # print('---------', j['item_no'])
#                                 # mrkoffi = {}
#                                 desig_longdesc1 =''
#                                 marked_officers1 = ''
#                                 for x in mark.values():
#                                     # print('xxxxxxxxx', x['myuser_id_id'])
                                    
#                                     # marked=m1.empmast.objects.filter(myuser_id=x['myuser_id_id'])
                                
#                                     # des = models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=marked[0].designation_code)
#                                     # desig_longdesc1 += des[0].designation+','
#                                     # print(des)
                                
#                                     # marked_officers1 += marked[0].designation_code+','

#                                     des = models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=x['marked_to_id'])
#                                     desig_longdesc1 += des[0].designation+','
#                                     marked_officers1 += str(des[0].designation_code)+','

#                                 # print('kkkkkkkkkkkkkkk', desig_longdesc1)
                                
#                                 if marked_officers1 != '':
#                                     testdesig=desig_longdesc1.split(',')
#                                     testempno=marked_officers1.split(',')
#                                     testdesig.pop()
#                                     testempno.pop()
#                                     testmarkofficer=''
#                                     lstdict=[]
#                                     alldesig = models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).values('d_level').distinct('d_level')
                                    
#                                     for i in alldesig:
#                                         if i['d_level'] == 'GM':
#                                             lst1=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level']).exclude(designation_code__in=testempno).count()
#                                             if lst1 == 0:
#                                                 lst2=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).exclude(d_level=i['d_level']).values('designation_code','designation').order_by('designation'))
#                                                 if testmarkofficer != '':
#                                                     testmarkofficer+=','
#                                                 testmarkofficer=testmarkofficer+"All GM's/ZR"
#                                                 # testempno=set(testempno)
#                                                 # part=set(map(lambda d: d['partno'], part))
#                                                 interkey=set(testempno)-set(map(lambda d: d['designation_code'], lst2))
#                                                 testempno=list(map(lambda d: d['designation_code'], lst2))
#                                                 testdesig=list(map(lambda d: d['designation'], lst2))
#                                                 lstdict.append({"desig":"All GM's/ZR","designation_code":list(interkey)})

#                                         elif i['d_level'] == 'BM':
#                                             lst1=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level']).exclude(designation_code__in=testempno).count()
#                                             if lst1 == 0:
#                                                 lst2=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).exclude(d_level=i['d_level']).values('designation_code','designation').order_by('designation'))
#                                                 if testmarkofficer != '':
#                                                     testmarkofficer+=','
#                                                 testmarkofficer=testmarkofficer+"All Board Member's"
#                                                 # testempno=set(testempno)
#                                                 # part=set(map(lambda d: d['partno'], part))
#                                                 interkey=set(testempno)-set(map(lambda d: d['designation_code'], lst2))
#                                                 testempno=list(map(lambda d: d['designation_code'], lst2))
#                                                 testdesig=list(map(lambda d: d['designation'], lst2))
#                                                 lstdict.append({"desig":"All Board Member's","designation_code":list(interkey)})


#                                         elif i['d_level'] == 'PHOD':
#                                             lst1=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level']).exclude(designation_code__in=testempno).count()
#                                             if lst1 == 0:
#                                                 lst2=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).exclude(d_level=i['d_level']).values('designation_code','designation').order_by('designation'))
#                                                 if testmarkofficer != '':
#                                                     testmarkofficer+=','
#                                                 testmarkofficer=testmarkofficer+"All PHOD's"
#                                                 # testempno=set(testempno)
#                                                 # part=set(map(lambda d: d['partno'], part))
#                                                 interkey=set(testempno)-set(map(lambda d: d['designation_code'], lst2))
#                                                 testempno=list(map(lambda d: d['designation_code'], lst2))
#                                                 testdesig=list(map(lambda d: d['designation'], lst2))
#                                                 lstdict.append({"desig":"All PHOD's","designation_code":list(interkey)})
#                                             else:
#                                                 hq=models.railwayLocationMaster.objects.filter(parent_location_code__isnull=False).values('parent_location_code').distinct()
#                                                 for ii in hq:
#                                                     rlyunit=models.railwayLocationMaster.objects.filter(parent_location_code=ii['parent_location_code']).values('rly_unit_code')
#                                                     if models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level'],rly_unit__in=rlyunit).exists():
#                                                         lst3=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level'],rly_unit__in=rlyunit).exclude(designation_code__in=testempno).count()
#                                                         if lst3 == 0:
#                                                             lst2=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).exclude(d_level=i['d_level'],rly_unit__in=rlyunit).values('designation_code','designation').order_by('designation'))
#                                                             if testmarkofficer != '':
#                                                                 testmarkofficer+=','
#                                                             testmarkofficer=testmarkofficer+"All PHOD's"+ii['parent_location_code']
#                                                             # testempno=set(testempno)
#                                                             # part=set(map(lambda d: d['partno'], part))
#                                                             interkey=set(testempno)-set(map(lambda d: d['designation_code'], lst2))
#                                                             testempno=list(map(lambda d: d['designation_code'], lst2))
#                                                             testdesig=list(map(lambda d: d['designation'], lst2))
#                                                             lstdict.append({"desig":"All PHOD's/"+ii['parent_location_code'],"designation_code":list(interkey)})



#                                         elif i['d_level'] == 'DRM':
#                                             lst1=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level']).exclude(designation_code__in=testempno).count()
#                                             if lst1 == 0:
#                                                 lst2=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).exclude(d_level=i['d_level']).values('designation_code','designation').order_by('designation'))
#                                                 if testmarkofficer != '':
#                                                     testmarkofficer+=','
#                                                 testmarkofficer=testmarkofficer+"All DRM's"
#                                                 # testempno=set(testempno)
#                                                 # part=set(map(lambda d: d['partno'], part))
#                                                 interkey=set(testempno)-set(map(lambda d: d['designation_code'], lst2))
#                                                 testempno=list(map(lambda d: d['designation_code'], lst2))
#                                                 testdesig=list(map(lambda d: d['designation'], lst2))
#                                                 lstdict.append({"desig":"All DRM's","designation_code":list(interkey)})
#                                             else:
#                                                 hq=models.railwayLocationMaster.objects.filter(parent_location_code__isnull=False).values('parent_location_code').distinct()
#                                                 for ii in hq:
#                                                     rlyunit=models.railwayLocationMaster.objects.filter(parent_location_code=ii['parent_location_code']).values('rly_unit_code')
#                                                     if models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level'],rly_unit__in=rlyunit).exists():
#                                                         lst3=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level'],rly_unit__in=rlyunit).exclude(designation_code__in=testempno).count()
#                                                         if lst3 == 0:
#                                                             lst2=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).exclude(d_level=i['d_level'],rly_unit__in=rlyunit).values('designation_code','designation').order_by('designation'))
#                                                             if testmarkofficer != '':
#                                                                 testmarkofficer+=','
#                                                             testmarkofficer=testmarkofficer+"All DRM's/"+ii['parent_location_code']
#                                                             # testempno=set(testempno)
#                                                             # part=set(map(lambda d: d['partno'], part))
#                                                             interkey=set(testempno)-set(map(lambda d: d['designation_code'], lst2))
#                                                             testempno=list(map(lambda d: d['designation_code'], lst2))
#                                                             testdesig=list(map(lambda d: d['designation'], lst2))
#                                                             lstdict.append({"desig":"All DRM's/"+ii['parent_location_code'],"designation_code":list(interkey)})


                                    
#                                     for i in range(len(testdesig)):
#                                         if testmarkofficer != '':
#                                             testmarkofficer+=','
#                                         testmarkofficer=testmarkofficer+testdesig[i]
#                                         lstdict.append({"desig":testdesig[i],"designation_code":[testempno[i]]})

#                                 marked_officers1 = marked_officers1.rstrip(',')
#                                 mrkoffi.update({'marked_officers': marked_officers1, 'desig_longdesc': testmarkofficer,'custom_key':json.dumps(lstdict)})
                                

#                                 #################################  end      #############################

                                
                                
#                                 j.update({'mrkoffi': mrkoffi, 'chk_cts':'YES'})
#                             else:
#                                 j.update({'mrkoffi': '', 'chk_cts':'YES'})
#                         else:

#                             j.update({'chk_cts':'NO'})
                    


#                     _tbl_tbl = []
#                     if j['tbl_data'] != '[]':
#                         tbl_tbl = j['tbl_data'][2:]
#                         tbl_tbl = tbl_tbl[0:len(tbl_tbl)-2]
#                         tbl_tbl = tbl_tbl.split('], [')
                        
#                         for xx in tbl_tbl:
#                             d2 = []
#                             d1 = xx.split(',')
#                             for il in d1:
#                                 d3 = il.strip()[1:]
#                                 d3 = d3[0:len(d3)-1]
#                                 d2.append(d3)
#                             _tbl_tbl.append(d2)
#                     else:
#                         _tbl_tbl = '[]'
#                     j.update({'tbl_data':_tbl_tbl})



#                     ins_detail[0].update({'item_details1': item_details1})
#                     # print('00000000', ins_detail)
#                     # print('00000000', ins_detail)
                

#                 print("Zone....",ins_detail)
#                 for i in multi_loc:
#                     print("item",i['item'],"type : ",i['type'])
#                 print("multi_div",multi_loc_div)
#                 item_val = list(m1.Item_details.objects.filter(inspection_no=ins_id,del_flag=1).values('des_id'))
#                 item_val = list(map(lambda d: d['des_id'], item_val))
#                 table_val = list(m1.Item_details.objects.filter(inspection_no=ins_id).exclude(tbl_data='[]').values('des_id'))
#                 table_val = list(map(lambda d: d['des_id'], table_val))
                
#                 item_details_img= list(m1.Item_details.objects.filter(inspection_no_id=ins_id,link_image__isnull=False).values('link_image','des_id').order_by('item_no'))
#                 img_path = []
#                 for i5 in range(len(item_details_img)):
#                     img = item_details_img[i5]['link_image'].split('@#@')
#                     id = item_details_img[i5]['des_id']
#                     for i6 in range(len(img)):
#                             img_path.append({'id':id,'path':img[i6]})


#                 context={
#                     'img_path':json.dumps(img_path),
#                     'ins_id':ins_id,
#                     'ins_detail':ins_detail,
#                     'item_id': item_id,
#                     'length_of_h': length,
#                     'sh_list': sh,
#                     'ssh_list': ssh,
#                     'multi_loc': multi_loc,
#                     'Zone':list2 ,
#                     'division':list4,
#                     'department':list6,
#                     'new_mail_detail': new_mail_detail,
#                     'new_mail_desig_code': new_mail_desig_code,
#                     'alldesig':alldesig1,
#                     'desg_no':data_desg_no,
#                     'desg_no11':desg_no,
#                     'des_id': des_id,
#                     'Accompany': Accompany,
#                     'location_array': location_array,
#                     'multi_loc_from': multi_loc_from,
#                     'multi_loc_zone':multi_loc_zone,
#                     'multi_loc_div':multi_loc_div,
#                     'item_val':json.dumps(item_val),
#                     'table_val':json.dumps(table_val),
#                     }  
                
#                 return render(request,"edit_inspection_form.html",context)
#             elif item_type == 'Chk':
#                 #visnu code
#                 ins_detail=list(m1.Inspection_details.objects.filter(inspection_no=ins_id, item_type='Chk').values('zone','division','dept','location','inspected_on','inspection_title'))
#                 item_details1= list(m1.Item_details.objects.filter(inspection_no_id=ins_id, inspection_no__item_type='Chk').values('observation').order_by('item_no'))
#                 #visnu code
                
                
#                 empdata=m1.empmast.objects.filter(myuser_id=request.user).values('empname','empno', 'desig_longdesc')
#                 desig_longdesc = empdata[0]['desig_longdesc']
                
#                 # print('ttttttttttttttttttttttttttttttttttttttttttttttttttttttt', desig_longdesc)
                
#                 list1=models.railwayLocationMaster.objects.filter(location_type='ZR').values('location_code')
#                 list2=[]
#                 for i in list1:
#                     # print(i['location_code'],'_________')
#                     list2.append(i['location_code'])
#                 list3=models.railwayLocationMaster.objects.filter(location_type='DIV').values('location_code')
#                 list4=[]
#                 list5 =[]
#                 for i in list3:
#                     # print(i['location_code'],'_________')
#                     list4.append(i['location_code']) 
#                 try:
                    
#                     list5=list(models.Level_Desig.objects.exclude(delete_flag=True).all().values('designation','designation_code'))  
#                 except Exception as e:
#                     print("e==",e)  
#                 list6=models.departMast.objects.all().values('department_name')
                
            
#                 context={
#                     'Zone':list2 ,
#                     'division':list4,
#                     'marked_to':list5,
#                     'department':list6,
#                     'desig': desig_longdesc,
#                     'ins_detail':ins_detail,
#                     'item_details1':item_details1
                
#                     }
                    
#                 return render(request, 'search_checklist_template_report.html',context)
                
#             else:
#                 messages.error(request, 'oops error')
#         else:     
#             return render(request,"create_inspection_form.html", context)

#     except Exception as e:
#         print(e)
#         try:
#             m1.error_Table.objects.create(fun_name="create_inspection_form",user_id=request.user,err_details=str(e))
#         except:
#             print("Internal Error!!!")
#         return render(request, "errorspage.html", {})



# def autoFetchLocation(request):
#     if request.method == 'GET' and request.is_ajax():
#         last_val = request.GET.get('last_val')
#         stype = json.loads(request.GET.get('stype'))
#         rly_zone = json.loads(request.GET.get('rly_zone'))
#         division_id = json.loads(request.GET.get('division_id'))
 
#         print('div', division_id,'rly', rly_zone)
#         list1 = []
#         # list_obj = models.station_master.objects.filter(station_name__istartswith=last_val).values('station_name').order_by('station_name').distinct('station_name')
#         rly_list = models.railwayLocationMaster.objects.filter(Q(location_code__in=rly_zone)|Q(location_code__in=division_id)).values_list('rly_unit_code', flat=True)
#         print(rly_list)
 
#         for i in stype:
           
#             if i == 'RRM':
#                 obj = models.runningroom_master.objects.filter(rr_name__istartswith=last_val, rly_id_id_id__in=rly_list,  rr_name__isnull=False).values('rr_name', 'rrid').distinct('rr_name').order_by('-rr_name')
#                 for j in obj:
#                     list1.append({'city': j['rr_name'], 'table_from':'RRM', 'loc_code': j['rrid']})
#             if i == 'SEM':
#                 obj = models.section_master.objects.filter(Q(section_name__istartswith=last_val)|Q(section_code__istartswith=last_val),rly_id_id_id__in=rly_list, section_name__isnull=False).values('section_name', 'secid').distinct('section_name').order_by('-section_name')
#                 for j in obj:
#                     # loc_sem = y['section_name'].strip() + '-' + y['']
#                     list1.append({'city': j['section_name'], 'table_from':'SEM', 'loc_code': j['secid']})
#             if i == 'STM':
#                 obj = models.station_master.objects.filter(Q(station_name__istartswith=last_val)|Q(stnshortcode__istartswith=last_val),rly_id_id_id__in=rly_list, station_name__isnull=False).values('station_name', 'stnshortcode').distinct('station_name').order_by('-station_name')
#                 # print('Station', obj)
#                 for y in obj:
#                     loc_stm = y['station_name'].strip()
#                     list1.append({'city': loc_stm, 'table_from':'STM', 'loc_code': y['stnshortcode']})
#             if i == 'ORL':
#                 obj = models.railwayLocationMaster.objects.filter(Q(location_description__istartswith=last_val) | Q(location_code__istartswith=last_val), rly_unit_code__in=rly_list , location_type_desc__in=['Coach Depot','Wagon Depot']).values('location_description','location_code','rly_unit_code').distinct('location_description').order_by('-location_description')
#                 for j in obj:
#                     loc_orl = j['location_description'].strip()
#                     list1.append({'city': loc_orl, 'table_from':'ORL', 'loc_code': j['rly_unit_code']})
#             if i == 'SOP':
#                 rly_list1 = [str(s) for s in rly_list]
               
#                 obj = models.Shop_section.objects.filter(Q(section_desc__istartswith=last_val)|Q(shop_code__istartswith=last_val), rly_unit_code__in=rly_list1, section_desc__isnull=False).values('section_desc', 'section_code', 'shop_code').distinct('section_desc').order_by('-section_desc')
#                 for j in obj:
#                     loc_sop = j['section_desc'].strip()
#                     list1.append({'city': loc_sop, 'table_from':'SOP', 'loc_code': j['section_code']})
 
#         return JsonResponse(list1, safe=False)
#     return JsonResponse({'success': False})



# def zone_get_marked_officers(request):
#     if request.method == 'GET' and request.is_ajax():
#         zone = request.GET.get('zone').split(',')
        
#         div = request.GET.get('divs').split(',')
        
#         # print("hello zone",zone, len(div))
#         c=0
#         empnox = models.Level_Desig.objects.exclude(delete_flag=True).filter(Q(official_email_ID=request.user) | Q(official_email_ID=request.user.email), empno__isnull=False)
#         empnumber=None
#         if empnox:
#             empnumber = empnox[0].designation_code
#         data=[]
#         # Div wise filter
#         if div[0]=="":
#            pass
#         else:
#           for i in range(len(div)):
#             l_id=list(models.railwayLocationMaster.objects.filter(Q(location_code=div[i])).values('rly_unit_code'))
#             print(l_id)
#             if len(l_id)>0:
#                 for x in range(len(l_id)):
#                     desg_no=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation__isnull=False,rly_unit=l_id[x]['rly_unit_code']).exclude(designation_code=empnumber).values('designation','empno', 'designation_code').order_by('designation'))
#                     if len(desg_no)>0:
#                         if desg_no not in data:
#                             data.extend(desg_no) 
#         # Zone wise filter
#         for i in range(len(zone)):
#             l_id=list(models.railwayLocationMaster.objects.filter(Q(location_code=zone[i])).values('rly_unit_code'))
#             if len(l_id)>0:
#                 desg_no=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation__isnull=False,rly_unit=l_id[0]['rly_unit_code']).exclude(designation_code=empnumber).values('designation','empno', 'designation_code').order_by('designation'))
#                 if len(desg_no)>0:
#                     # print(desg_no)
#                     if desg_no not in data:
#                         data.extend(desg_no)
#         # print(len(data),c)
#         for i in range(len(zone)):
#             l_id=list(models.railwayLocationMaster.objects.filter(Q(parent_location_code=zone[i])).values('rly_unit_code'))
#             # print(l_id)
#             if len(l_id)>0:
#                 for x in range(len(l_id)):
#                     desg_no=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation__isnull=False,rly_unit=l_id[x]['rly_unit_code']).exclude(designation_code=empnumber).values('designation','empno', 'designation_code').order_by('designation'))
#                     if len(desg_no)>0:
#                         if desg_no[0] not in data:
#                             # print(desg_no)
#                             data.extend(desg_no) 
        
#         return JsonResponse(data, safe=False)
#     return JsonResponse({'success': False}, status=400)




# def update_draft_data(request):
#     try:
#         if request.method == "POST" and request.is_ajax():
#             from datetime import datetime
#             final=request.POST.get('final_partinspected')
#             final_id=request.POST.get('id_partinspected')

#             rly=json.loads(request.POST.get('zone'))
#             div=json.loads(request.POST.get('division'))
#             # dept=json.loads(request.POST.get('department'))
#             loc=json.loads(request.POST.get('location'))
#             accompany=json.loads(request.POST.get('accompany'))

#             insdt=request.POST.get('txtDate2')
#             #print(insdt, '-----------')
#             if 'to' in insdt:
#                 dt = insdt.split('to')
#                 st_date = dt[0].strip()
#                 en_date = dt[1].strip()

#                 start_date = datetime.strptime(st_date, '%d/%m/%y').strftime('%Y-%m-%d')
#                 inspected_on = datetime.strptime(en_date, '%d/%m/%y').strftime('%Y-%m-%d')

#             else:
                
#                 inspected_on = datetime.strptime(insdt, '%d/%m/%y').strftime('%Y-%m-%d')
#                 start_date = datetime.strptime(insdt, '%d/%m/%y').strftime('%Y-%m-%d')
            
#             title=request.POST.get('titleinsp')
#             inspection_no=request.POST.get('inspection_no')
#             btnValues=request.POST.get('buttonValues')
#             send_to=request.POST.get('send_to')
#             send_desig=request.POST.get('send_desig')
#             #print('=======send==>>', send_to, send_desig)
            
            
#             finalval = json.loads(final)
#             final_allid = json.loads(final_id)
#             # empno=models.Level_Desig.objects.exclude(delete_flag=True).filter(official_email_ID=request.user)
#             empnox = models.Level_Desig.objects.exclude(delete_flag=True).filter(Q(official_email_ID=request.user) | Q(official_email_ID=request.user.email))
#             if empnox:
#                 empno = empnox[0].empno_id
#                 desig = empnox[0].designation
#                 ddesig = empnox[0].designation_code
#             else:
#                 messages.error(request,'You are not authorize to create inspection.Please contact to admin')

#             # ddesig=models.Level_Desig.objects.exclude(delete_flag=True).get(empno=empno)
#             if m1.Insp_Accompany.objects.filter(inspection_no=inspection_no).exists():
#                 for up in accompany:
#                     if m1.Insp_Accompany.objects.filter(inspection_no=inspection_no, accompany=up).exists():
#                         m1.Insp_Accompany.objects.filter(inspection_no=inspection_no, accompany=up).update(accompany=up)
#                     else:
#                         m1.Insp_Accompany.objects.create(accompany=up, inspection_no_id=inspection_no)
                    
#             else:
#                 for acc in accompany:
#                     m1.Insp_Accompany.objects.create(accompany=acc, inspection_no_id=inspection_no)


#             if btnValues == 'Save as draft':
#                 m1.Inspection_details.objects.filter(inspection_no=inspection_no).update(inspection_title=title,status_flag=0, modified_by=empno,modified_on=datetime.now(), start_date=start_date, inspected_on=inspected_on)
                
                

#                 for rl in rly:
#                     rly_d = m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_no,item=rl,  type='HQ')
#                     if not rly_d.exists():
                        
#                         m1.Insp_multi_location.objects.create(inspection_no_id=inspection_no, item=rl, type='HQ')
                    
#                 for di in div:
#                     div_d = m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_no,item=di,  type='DIV')
#                     if not div_d.exists():
                        
#                         m1.Insp_multi_location.objects.create(inspection_no_id=inspection_no,item=di, type='DIV')
                
#                 # for dp in dept:
#                 #     dept_d = m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_no,item=dp,type='DPT')
#                 #     if not dept_d.exists():
#                 #         m1.Insp_multi_location.objects.create(inspection_no_id=inspection_no,item=dp,type='DPT')

#                 for lo in loc:
#                     if lo:
#                         new_loc = lo.split('#')
#                         location = new_loc[0]
#                         location_type = new_loc[1]
#                         #print(location, location_type)
#                         if m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_no, item=location, type='LOC', table_from=location_type).exists():
#                             m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_no,item=location,type='LOC', table_from=location_type).update(item=location, table_from=location_type)
#                         else:

#                             m1.Insp_multi_location.objects.create(inspection_no_id=inspection_no, item=location, type='LOC', table_from=location_type)

#                 #save copyto employee data
#                 if send_to:
#                     if m6.copyto_mails.objects.filter(sender_id_id=ddesig, doc_id=inspection_no, area_flag=0, doc_table='i').exists():
#                         # m1.Insp_mail_details.objects.filter(sender_id_id=ddesig, doc_id=inspection_id, area_flag=0, doc_table='i').update(send_to=send_to,send_desig=send_desig)
#                         m6.copyto_mails.objects.filter(sender_id_id=ddesig, doc_id=inspection_no, area_flag=0, doc_table='i').update(receiver_id=send_to,receiver_desig=send_desig)
#                     else:
#                         # m1.Insp_mail_details.objects.create(inspection_no_id=inspection_no, area='Copy To', send_to=send_to,send_desig=send_desig)
#                         m6.copyto_mails.objects.create(sender_id_id=ddesig, doc_id=inspection_no, area_flag=0, doc_table='i', receiver_id=send_to, receiver_desig=send_desig)
            

#                 inspectionid = m1.Item_details.objects.filter(inspection_no_id=inspection_no)
#                 if inspectionid.exists():
#                     m1.Item_details.objects.filter(inspection_no_id=inspection_no).delete()
#                     for f, b in zip(finalval, final_allid):
#                         #print(finalval[f], final_allid[b])
#                         for x,y in zip(finalval[f], final_allid[b]):
#                             s = y.split('.')
#                             if len(s) == 1:
#                                 hed = 'heading'+y
#                                 heading = finalval[f][hed]
#                                 m1.Item_details.objects.create(item_title=heading, status_flag=0,created_on=datetime.now(),modified_on=datetime.now(), type='H',des_id=y, inspection_no_id=inspection_no)
#                                 y2=str(y+'.1')
#                                 if y2 in final_allid[b]:
#                                     #print('if',y2)
#                                     pass
#                                 else:
#                                     #print('else',y2)
#                                     trz = 'targetdate'+y
#                                     officm = 'markeofficer'+y
#                                     chk = 'check'+y
                                    
#                                     targetd = finalval[f][trz]
#                                     markof = finalval[f][officm]
#                                     markeofficer = markof.split(',')
#                                     checkbox = finalval[f][chk]
#                                     if checkbox == '1':
#                                         checkbox = 1
#                                     elif checkbox== '0':
#                                         checkbox = 0


#                                     if targetd:
#                                         t_date = datetime.strptime(targetd, '%d/%m/%Y').strftime('%Y-%m-%d')
#                                     else:
#                                         t_date = None
#                                     m1.Item_details.objects.filter(item_title=heading,status_flag=0, type='H',des_id=y, inspection_no_id=inspection_no).update(target_date=t_date, priority=checkbox)
#                                     #print('00000000000000000000000', t_date)
#                                     item_id=m1.Item_details.objects.all().last().item_no
#                                     #mark officer 
#                                     # print(markof, '=================')
#                                     # print(markeofficer, '=========666666========')

#                                     officer_email=[]
#                                     if markof:
#                                         for i in markeofficer:
#                                             # myuser_id=m1.empmast.objects.filter(empno=i)[0].myuser_id_id
#                                             # desig_longdesc=m1.empmast.objects.filter(empno=i)[0].desig_longdesc
#                                             # print('uuuuuuuuuuuuuuuuuu', desig_longdesc)
#                                             Desig=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i)
                                            
                                            
                                            
#                                             # email = m1.empmast.objects.filter(empno=i)[0].email
#                                             # officer_email.append(email)

                                            

#                                             if Desig:
#                                                 Desig1=Desig[0].designation_code
#                                                 if m1.Marked_Officers.objects.all().last():
#                                                     marked_no_id=(m1.Marked_Officers.objects.all().last().marked_no)+1
#                                                 else:
#                                                     marked_no_id = 1
#                                                 m1.Marked_Officers.objects.create(created_on=datetime.now(),created_by=empno,marked_emp=i,marked_no=marked_no_id,status_flag=0,item_no_id=item_id,marked_to_id=Desig1)
#                                             else:
#                                                 messages.info(request, 'Employ Desig not Match in Designation Master')
#                                     else:
#                                         if m1.Marked_Officers.objects.all().last():
#                                             marked_no_id=(m1.Marked_Officers.objects.all().last().marked_no)+1
#                                         else:
#                                             marked_no_id = 1
#                                         m1.Marked_Officers.objects.create(created_on=datetime.now(),created_by=empno,marked_no=marked_no_id,status_flag=0,item_no_id=item_id)

#                             elif len(s) == 2:
#                                 ob = 'observation'+y
#                                 trz = 'targetdate'+y
#                                 officm = 'markeofficer'+y

#                                 chk = 'check'+y

#                                 observation = finalval[f][ob]
#                                 targetd = finalval[f][trz]
#                                 markof = finalval[f][officm]
#                                 checkbox = finalval[f][chk]

#                                 if checkbox == '1':
#                                     checkbox = 1
#                                 elif checkbox == '0':
#                                     checkbox = 0
                                
#                                 markeofficer = markof.split(',')
#                                 if targetd:

#                                     targetdate = datetime.strptime(targetd, '%d/%m/%Y').strftime('%Y-%m-%d')
#                                 else:
#                                     targetdate = None
#                                 print(observation)
#                                 m1.Item_details.objects.create(observation=observation,priority=checkbox,status_flag=0,modified_on=datetime.now(), created_on=datetime.now(),inspection_no_id=inspection_no, des_id=y, target_date=targetdate, type='SH')
                                
#                                 item_id=m1.Item_details.objects.all().last().item_no
#                                 if markof:
#                                     #mark officer
                                    
#                                     for i in markeofficer:
#                                         print('iiiiiiiiiiiiiiiiii', i)
#                                         if i != '':
#                                             # myuser_id=m1.empmast.objects.filter(empno=i)[0].myuser_id_id
#                                             # desig_longdesc=m1.empmast.objects.filter(empno=i)[0].desig_longdesc
#                                             # print('eeeeeeeeeeeeeee', desig_longdesc)
#                                             Desig=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i)
#                                             if Desig:
#                                                 Desig1=Desig[0].designation_code
#                                                 if m1.Marked_Officers.objects.all().last():
#                                                     marked_no_id=(m1.Marked_Officers.objects.all().last().marked_no)+1
#                                                 else:
#                                                     marked_no_id = 1
#                                                 m1.Marked_Officers.objects.create(created_on=datetime.now(),created_by=empno,marked_no=marked_no_id,status_flag=0,item_no_id=item_id,marked_to_id=Desig1)
#                                             else:
#                                                 messages.info(request, 'Employ Desig not Match in Level Desig')
#                                         else:
#                                             pass
#                                 else:
#                                     markeofficer=''
                            
#                             else:
#                                 subdes = 'subdes'+y
#                                 subdes1 = finalval[f][subdes]
#                                 m1.Item_details.objects.create(item_subtitle=subdes1,status_flag=0,modified_on=datetime.now(), created_on=datetime.now(),type='SSH',des_id=y, inspection_no_id=inspection_no)
#                 else:
#                     for f, b in zip(finalval, final_allid):
#                         #print(finalval[f], final_allid[b])
#                         for x,y in zip(finalval[f], final_allid[b]):
#                             s = y.split('.')
#                             if len(s) == 1:
#                                 hed = 'heading'+y
#                                 heading = finalval[f][hed]
#                                 m1.Item_details.objects.create(item_title=heading,status_flag=0, modified_on=datetime.now(),created_on=datetime.now(),type='H',des_id=y, inspection_no_id=inspection_no)
#                             elif len(s) == 2:
#                                 ob = 'observation'+y
#                                 trz = 'targetdate'+y
#                                 officm = 'markeofficer'+y
#                                 chk = 'check'+y
#                                 observation = finalval[f][ob]
#                                 targetd = finalval[f][trz]
#                                 markof = finalval[f][officm]

#                                 checkbox = finalval[f][chk]

#                                 if checkbox == '1':
#                                     checkbox = 1
#                                 elif checkbox == '0':
#                                     checkbox = 0
                                
#                                 markeofficer = markof.split(',')
#                                 if targetd:

#                                     targetdate = datetime.strptime(targetd, '%d/%m/%Y').strftime('%Y-%m-%d')
#                                 else:
#                                     targetdate = None
#                                 #print(observation)
#                                 m1.Item_details.objects.create(observation=observation,priority=checkbox,modified_on=datetime.now(),created_on=datetime.now(),status_flag=0, inspection_no_id=inspection_no, des_id=y, target_date=targetdate, type='SH')
                                
#                                 item_id=m1.Item_details.objects.all().last().item_no
#                                 if markof:
#                                     #mark officer
                                    
#                                     for i in markeofficer:
#                                         #print('iiiiiiiiiiiiiiiiii', i)
#                                         if i != '':
#                                             # myuser_id=m1.empmast.objects.filter(empno=i)[0].myuser_id_id
#                                             # desig_longdesc=m1.empmast.objects.filter(empno=i)[0].desig_longdesc
#                                             # print('eeeeeeeeeeeeeee', desig_longdesc)
#                                             Desig=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i)
#                                             if Desig:
#                                                 Desig1=Desig[0].designation_code
#                                                 if m1.Marked_Officers.objects.all().last():
#                                                     marked_no_id=(m1.Marked_Officers.objects.all().last().marked_no)+1
#                                                 else:
#                                                     marked_no_id = 1
#                                                 m1.Marked_Officers.objects.create(created_on=datetime.now(),created_by=empno,marked_no=marked_no_id,marked_emp=i, status_flag=1, item_no_id=item_id,marked_to_id=Desig1)
#                                             else:
#                                                 print('error')
                                                
#                                         else:
#                                             pass
#                                 else:
#                                     markeofficer=''
                            
#                             else:
#                                 subdes = 'subdes'+y
#                                 subdes1 = finalval[f][subdes]
#                                 m1.Item_details.objects.create(item_subtitle=subdes1,modified_on=datetime.now(), created_on=datetime.now(), status_flag=0, type='SSH',des_id=y, inspection_no_id=inspection_no)
#                 return JsonResponse({"status": "Record Saved as Draft." })
#             elif btnValues=='Submit':
#                 #657777
#                 m1.Inspection_details.objects.filter(inspection_no=inspection_no)
                

#                 for rl in rly:
#                     rly_d = m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_no,item=rl,  type='HQ')
#                     if not rly_d.exists():
                        
#                         m1.Insp_multi_location.objects.create(inspection_no_id=inspection_no, item=rl, type='HQ')
                    
#                 for di in div:
#                     div_d = m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_no,item=di,  type='DIV')
#                     if not div_d.exists():
                        
#                         m1.Insp_multi_location.objects.create(inspection_no_id=inspection_no,item=di, type='DIV')
#                 # for dp in dept:
#                 #     dept_d = m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_no,item=dp,type='DPT')
#                 #     if not dept_d.exists():
                        
#                 #         m1.Insp_multi_location.objects.create(inspection_no_id=inspection_no,item=dp,type='DPT')

#                 if loc:
#                     for lo in loc:
#                         if lo:
#                             new_loc = lo.split('#')
#                             location = new_loc[0]
#                             location_type = new_loc[1]
#                             #print(location, location_type)
#                             m1.Insp_multi_location.objects.create(inspection_no_id=inspection_no, item=location, type='LOC', table_from=location_type)

#                 year = str(datetime.now().year)
#                 # desig = m1.empmast.objects.get(myuser_id=request.user).desig_longdesc
#                 if desig:
#                     last_note = m1.Inspection_details.objects.filter(inspection_no=inspection_no)[0].inspection_note_no
#                     if last_note ==''or last_note == None:
#                         # _note = m1.Inspection_details.objects.filter(inspection_note_no__contains='Insp', inspection_note_no__isnull=False).order_by('-inspection_note_no')[0]
#                         note_ = year+'/'+desig+'/Insp'+'/'
#                         _note_no = m1.Inspection_details.objects.filter(inspection_note_no__istartswith=note_, insp_last__isnull=False).aggregate(Max('insp_last'))
#                         #print('+++++++++++++', _note_no)
#                         if _note_no['insp_last__max'] is not None:
                        
#                             x = _note_no['insp_last__max']
#                             insp = int(x)+1
#                             note_no = year+'/'+desig+'/Insp'+'/'+ str(insp)
#                         else:
#                             insp = 1
#                             note_no = year+'/'+desig+'/Insp'+'/'+ str(insp)

                        
#                         m1.Inspection_details.objects.filter(inspection_no=inspection_no).update(inspection_note_no=str(note_no), insp_last=insp)
#                         messages.info(request, f'Inspection note successfully saved with Inspection Note No: {note_no}')
#                 else:
#                     print('insert desig')

#                 m1.Inspection_details.objects.filter(inspection_no=inspection_no).update(inspection_title=title,modified_by=empno, status_flag=1, start_date=start_date, inspected_on=inspected_on)
#                 inspectionid = m1.Item_details.objects.filter(inspection_no_id=inspection_no)
                
#                 officer_email=[]
#                 officer_contact=[]
#                 if inspectionid.exists():
#                     m1.Item_details.objects.filter(inspection_no_id=inspection_no).delete()
                    
#                     for f, b in zip(finalval, final_allid):
#                         #print(finalval[f], final_allid[b])
#                         for x,y in zip(finalval[f], final_allid[b]):
#                             s = y.split('.')
#                             if len(s) == 1:
#                                 hed = 'heading'+y
#                                 heading = finalval[f][hed]
#                                 m1.Item_details.objects.create(item_title=heading,created_on=datetime.now(), status_flag=1,type='H',des_id=y, inspection_no_id=inspection_no)
                                
#                                 y2=str(y+'.1')
#                                 if y2 in final_allid[b]:
#                                     #print('if',y2)
#                                     m1.Item_details.objects.filter(type='H',des_id=y, inspection_no_id=inspection_no).update(status_flag=4)
#                                     pass
#                                 else:
#                                     #print('else',y2)
#                                     trz = 'targetdate'+y
#                                     officm = 'markeofficer'+y
#                                     chk =  'check'+y
                                    
#                                     targetd = finalval[f][trz]
#                                     markof = finalval[f][officm]
#                                     checkbox = finalval[f][chk]
#                                     if checkbox == '1':
#                                         checkbox = 1
#                                     elif checkbox == '0':
#                                         checkbox = 0
                                    

#                                     markeofficer = markof.split(',')
#                                     if targetd:
#                                         t_date = datetime.strptime(targetd, '%d/%m/%Y').strftime('%Y-%m-%d')
#                                     else:
#                                         t_date = None
                                    
#                                     m1.Item_details.objects.filter(item_title=heading, status_flag=1, type='H',des_id=y, inspection_no_id=inspection_no).update(modified_on=datetime.now(),priority=checkbox, target_date=t_date)
#                                     item_id=m1.Item_details.objects.all().last().item_no
#                                     #mark officer
                                    
#                                     if markof:
#                                         for i in markeofficer:
#                                             # myuser_id=m1.empmast.objects.filter(empno=i)[0].myuser_id_id
#                                             # desig_longdesc=m1.empmast.objects.filter(empno=i)[0].desig_longdesc
#                                             # print('uuuuuuuuuuuuuuuuuu', desig_longdesc)
#                                             Desig=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i)
#                                             # email = m1.empmast.objects.filter(empno=i)[0].email
#                                             # officer_email.append(email)

                                            

#                                             if Desig:
#                                                 Desig1=Desig[0].designation_code
#                                                 if Desig[0].official_email_ID:
#                                                     officer_email.append(Desig[0].official_email_ID)
#                                                 if Desig[0].contactnumber:
#                                                     officer_contact.append(Desig[0].contactnumber)

#                                                 if m1.Marked_Officers.objects.all().last():
#                                                     marked_no_id=(m1.Marked_Officers.objects.all().last().marked_no)+1
#                                                 else:
#                                                     marked_no_id = 1
#                                                 m1.Marked_Officers.objects.create(created_on=datetime.now(),created_by=empno,marked_emp=i,marked_no=marked_no_id,status_flag=1, item_no_id=item_id,marked_to_id=Desig1)
#                                             else:
#                                                 print('error')
#                                                 # messages.info(request, 'error')

#                             elif len(s) == 2:
#                                 ob = 'observation'+y
#                                 trz = 'targetdate'+y
#                                 officm = 'markeofficer'+y
#                                 chk =  'check'+y
#                                 observation = finalval[f][ob]
#                                 targetd = finalval[f][trz]
#                                 markof = finalval[f][officm]

#                                 checkbox = finalval[f][chk]
#                                 if checkbox == '1':
#                                     checkbox = 1
#                                 elif checkbox == '0':
#                                     checkbox = 0
                                
#                                 markeofficer = markof.split(',')
#                                 if targetd:
#                                     targetdate = datetime.strptime(targetd, '%d/%m/%Y').strftime('%Y-%m-%d')
#                                 else:
#                                     targetdate = None
#                                 #print(observation)
#                                 m1.Item_details.objects.create(observation=observation,priority=checkbox,created_on=datetime.now(),status_flag=1,inspection_no_id=inspection_no, des_id=y, target_date=targetdate, type='SH')
                                
#                                 item_id=m1.Item_details.objects.all().last().item_no
#                                 if markof:
#                                     #mark officer
                                    
#                                     for i in markeofficer:
#                                         #print('iiiiiiiiiiiiiiiiii', i)
#                                         if i != '':
#                                             # myuser_id=m1.empmast.objects.filter(empno=i)[0].myuser_id_id
#                                             # desig_longdesc=m1.empmast.objects.filter(empno=i)[0].desig_longdesc
#                                             # print('eeeeeeeeeeeeeee', desig_longdesc)
                                            
#                                             Desig=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i)
#                                             # email = m1.empmast.objects.filter(empno=i)[0].email
#                                             # officer_email.append(email)

#                                             if Desig:
#                                                 Desig1=Desig[0].designation_code
#                                                 if Desig[0].official_email_ID:
#                                                     officer_email.append(Desig[0].official_email_ID)
#                                                 if Desig[0].contactnumber:
#                                                     officer_contact.append(Desig[0].contactnumber)

#                                                 if m1.Marked_Officers.objects.all().last():
#                                                     marked_no_id=(m1.Marked_Officers.objects.all().last().marked_no)+1
#                                                 else:
#                                                     marked_no_id = 1
#                                                 m1.Marked_Officers.objects.create(marked_no=marked_no_id,marked_emp=i,status_flag=1, item_no_id=item_id,marked_to_id=Desig1)
#                                             else:
#                                                 print('error1')
#                                                 # messages.info(request, 'error')
#                                         else:
#                                             pass
#                                 else:
#                                     markeofficer=''
                            
#                             else:
#                                 subdes = 'subdes'+y
#                                 subdes1 = finalval[f][subdes]
#                                 m1.Item_details.objects.create(item_subtitle=subdes1,status_flag=4,created_on=datetime.now(), type='SSH',des_id=y, inspection_no_id=inspection_no)
#                 else:
                    
#                     for f, b in zip(finalval, final_allid):
#                         #print(finalval[f], final_allid[b])
#                         for x,y in zip(finalval[f], final_allid[b]):
#                             s = y.split('.')
#                             if len(s) == 1:
#                                 hed = 'heading'+y
#                                 heading = finalval[f][hed]
#                                 m1.Item_details.objects.create(item_title=heading,created_on=datetime.now(), status_flag=1, type='H',des_id=y, inspection_no_id=inspection_no)
#                             elif len(s) == 2:
#                                 ob = 'observation'+y
#                                 trz = 'targetdate'+y
#                                 officm = 'markeofficer'+y
#                                 chk =  'check'+y

#                                 observation = finalval[f][ob]
#                                 targetd = finalval[f][trz]
#                                 markof = finalval[f][officm]

#                                 checkbox = finalval[f][chk]
#                                 if checkbox == '1':
#                                     checkbox = 1
#                                 elif checkbox == '0':
#                                     checkbox = 0
                                
#                                 markeofficer = markof.split(',')
#                                 if targetd:
#                                     targetdate = datetime.strptime(targetd, '%d/%m/%Y').strftime('%Y-%m-%d')
#                                 else:
#                                     targetdate = None
#                                 #print(observation)
#                                 m1.Item_details.objects.create(observation=observation,priority=checkbox,created_on=datetime.now(), status_flag=1,inspection_no_id=inspection_no, des_id=y, target_date=targetdate, type='SH')
                                
#                                 item_id=m1.Item_details.objects.all().last().item_no
                                
#                                 if markof:
#                                     #mark officer
                                    
#                                     for i in markeofficer:
#                                         #print('iiiiiiiiiiiiiiiiii', i)
#                                         if i != '':
#                                             # myuser_id=m1.empmast.objects.filter(empno=i)[0].myuser_id_id
#                                             # desig_longdesc=m1.empmast.objects.filter(empno=i)[0].desig_longdesc
#                                             # print('eeeeeeeeeeeeeee', desig_longdesc)
#                                             Desig=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i)

#                                             # email = m1.empmast.objects.filter(empno=i)[0].email
#                                             # officer_email.append(email)
                                            
#                                             if Desig:
#                                                 Desig1=Desig[0].designation_code
#                                                 if Desig[0].official_email_ID:
#                                                     officer_email.append(Desig[0].official_email_ID)
#                                                 if Desig[0].contactnumber:
#                                                     officer_contact.append(Desig[0].contactnumber)

#                                                 if m1.Marked_Officers.objects.all().last():
#                                                     marked_no_id=(m1.Marked_Officers.objects.all().last().marked_no)+1
#                                                 else:
#                                                     marked_no_id = 1
#                                                 m1.Marked_Officers.objects.create(created_on=datetime.now(),created_by=empno,marked_no=marked_no_id,marked_emp=i, item_no_id=item_id,marked_to_id=Desig1)
#                                             else:
#                                                 messages.info(request, 'Employ Desig not Match in Level Desig')
#                                         else:
#                                             pass
#                                 else:
#                                     markeofficer=''

                                
                            
#                             else:
#                                 subdes = 'subdes'+y
#                                 subdes1 = finalval[f][subdes]
#                                 m1.Item_details.objects.create(item_subtitle=subdes1,created_on=datetime.now(), status_flag=4, type='SSH',des_id=y, inspection_no_id=inspection_no)
                
#                 try:
#                     # To = officer_email
#                     subject="Inspection report"
#                     To=['ecegcttarun@gmail.com',]
#                     context = {'title': title}
                        
#                     InspSendMail(subject, To, context)
#                     if len(officer_contact) > 0:
#                         for num in officer_contact:
#                             pass
#                             # sendsms(num)

#                     #flag values: 
#                     # 0 - copy to
#                     # 1 - mark officer
#                     # 2 - dealt by

#                     # doc_table:
#                     # i - Inspection_details
#                     # m - Insp_details (minutes)
#                     # d - do_upload
#                     # b - budget

#                     # m1.Insp_mail_details.objects.create(subject=subject, body=title,area='Mark Of', inspection_no_id=inspection_no, send_to=send_to,send_desig=send_desig)
#                     m6.copyto_mails.objects.create(sender_id_id=ddesig, subject=subject,doc_id=inspection_no,  body=title, area_flag=1, doc_table='i', receiver_id=send_to, receiver_desig=send_desig)
#                     messages.success(request, 'Email has been sent')
                    
#                 except:
#                     messages.error(request, 'Email send failed.') 
                
                
                
#                 try:
#                     #COPY TO EMAIL
#                     offic_mail =[]
#                     offic_contact =[]
#                     unique_offic_mail = list(set(offic_mail))
#                     unique_offic_contact = list(set(offic_contact))
#                     if send_to:
                        
#                         emil = send_to.split(',')
#                         for i in emil:
#                             email = models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i)
                    
#                             if email[0].official_email_ID:
#                                 offic_mail.append(email[0].official_email_ID)
#                             if email[0].contactnumber:
#                                 offic_contact.append(Desig[0].contactnumber)

#                         subject="Inspection report"
#                         # To = unique_offic_mail
#                         To=['ecegcttarun@gmail.com',]
#                         context = {'title': title}
#                         #for email send 
#                         InspSendMail(subject, To, context)

#                         if len(unique_offic_contact) > 0:
#                             for num in unique_offic_contact:
#                                 #for sms 
#                                 # sendsms(num)
#                                 pass
#                         # m1.Insp_mail_details.objects.create(subject=subject, body=title, area='Copy To', inspection_no_id=inspection_no, send_to=send_to,send_desig=send_desig)
#                         # m6.copyto_mails.objects.create(sender_id_id=ddesig, subject=subject,doc_id=inspection_no,  body=title, area_flag=0, doc_table='i', receiver_id=send_to, receiver_desig=send_desig)
                        
#                         if m6.copyto_mails.objects.filter(sender_id_id=ddesig, doc_id=inspection_no, area_flag=0, doc_table='i').exists():
#                             # m1.Insp_mail_details.objects.filter(sender_id_id=ddesig, doc_id=inspection_id, area_flag=0, doc_table='i').update(send_to=send_to,send_desig=send_desig)
#                             m6.copyto_mails.objects.filter(sender_id_id=ddesig, doc_id=inspection_no, area_flag=0, doc_table='i').update(subject=subject, body=title, receiver_id=send_to,receiver_desig=send_desig)

#                         else:
#                             # m1.Insp_mail_details.objects.create(inspection_no_id=inspection_no, area='Copy To', send_to=send_to,send_desig=send_desig)
#                             m6.copyto_mails.objects.create(subject=subject, body=title, sender_id_id=ddesig, doc_id=inspection_no, area_flag=0, doc_table='i', receiver_id=send_to, receiver_desig=send_desig)
                
                        
#                         messages.success(request, 'Email has been sent')
                    
#                 except:
                    
#                     messages.error(request, 'Email send failed.') 
                
                
#                 return JsonResponse({"status": "Record Saved" })
#             else:
#                 return JsonResponse({"status": "Error" })
#         return JsonResponse({"success":False}, status=400)
#     except Exception as e: 
#         try:
#             m1.error_Table.objects.create(fun_name="update_draft_data",user_id=request.user,err_details=str(e))
#         except:
#             print("Internal Error!!!")
#         return render(request, "errorspage.html", {})
#     # except Exception as e:
#     #     print("e==",e)  
#     #     return render(request, "commonerrorpage.html", {})

# def update_draft_data(request):
#     try:
#         if request.method == "POST" and request.is_ajax():
#             from datetime import datetime
#             final=request.POST.get('final_partinspected')
#             final_id=request.POST.get('id_partinspected')

#             rly=json.loads(request.POST.get('zone'))
            
#             div=json.loads(request.POST.get('division'))
#             # dept=json.loads(request.POST.get('department'))
#             loc=json.loads(request.POST.get('location'))
#             accompany=json.loads(request.POST.get('accompany'))
#             del_array_data=json.loads(request.POST.get('del_array_data'))
#             print(del_array_data)
#             insdt=request.POST.get('txtDate2')
#             #print(insdt, '-----------')
#             if 'to' in insdt:
#                 dt = insdt.split('to')
#                 st_date = dt[0].strip()
#                 en_date = dt[1].strip()

#                 start_date = datetime.strptime(st_date, '%d/%m/%y').strftime('%Y-%m-%d')
#                 inspected_on = datetime.strptime(en_date, '%d/%m/%y').strftime('%Y-%m-%d')

#             else:
                
#                 inspected_on = datetime.strptime(insdt, '%d/%m/%y').strftime('%Y-%m-%d')
#                 start_date = datetime.strptime(insdt, '%d/%m/%y').strftime('%Y-%m-%d')
            
#             title=request.POST.get('titleinsp')
#             inspection_no=request.POST.get('inspection_no')
#             btnValues=request.POST.get('buttonValues')
#             send_to=request.POST.get('send_to')
#             send_desig=request.POST.get('send_desig')
#             #print('=======send==>>', send_to, send_desig)
            
            
#             finalval = json.loads(final)
#             final_allid = json.loads(final_id)
#             # empno=models.Level_Desig.objects.exclude(delete_flag=True).filter(official_email_ID=request.user)
#             empnox = models.Level_Desig.objects.exclude(delete_flag=True).filter(Q(official_email_ID=request.user) | Q(official_email_ID=request.user.email))
#             if empnox:
#                 empno = empnox[0].empno_id
#                 desig = empnox[0].designation
#                 ddesig = empnox[0].designation_code
#             else:
#                 messages.error(request,'You are not authorize to create inspection.Please contact to admin')

#             # ddesig=models.Level_Desig.objects.exclude(delete_flag=True).get(empno=empno)
#             if m1.Insp_Accompany.objects.filter(inspection_no=inspection_no).exists():
#                 for up in accompany:
#                     if m1.Insp_Accompany.objects.filter(inspection_no=inspection_no, accompany=up).exists():
#                         m1.Insp_Accompany.objects.filter(inspection_no=inspection_no, accompany=up).update(accompany=up)
#                     else:
#                         m1.Insp_Accompany.objects.create(accompany=up, inspection_no_id=inspection_no)
                    
#             else:
#                 for acc in accompany:
#                     m1.Insp_Accompany.objects.create(accompany=acc, inspection_no_id=inspection_no)


#             if btnValues == 'Save as draft':
#                 m1.Inspection_details.objects.filter(inspection_no=inspection_no).update(inspection_title=title,status_flag=0, modified_by=empno,modified_on=datetime.now(), start_date=start_date, inspected_on=inspected_on)
                
                

#                 for rl in rly:
#                     rly_d = m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_no,item=rl,  type='HQ')
#                     if not rly_d.exists():
                        
#                         m1.Insp_multi_location.objects.create(inspection_no_id=inspection_no, item=rl, type='HQ')
                    
#                 for di in div:
#                     div_d = m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_no,item=di,  type='DIV')
#                     if not div_d.exists():
                        
#                         m1.Insp_multi_location.objects.create(inspection_no_id=inspection_no,item=di, type='DIV')
                
#                 # for dp in dept:
#                 #     dept_d = m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_no,item=dp,type='DPT')
#                 #     if not dept_d.exists():
#                 #         m1.Insp_multi_location.objects.create(inspection_no_id=inspection_no,item=dp,type='DPT')

#                 for lo in loc:
#                     if lo:
#                         new_loc = lo.split('#')
#                         location = new_loc[0]
#                         location_type = new_loc[1]
#                         #print(location, location_type)
#                         if m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_no, item=location, type='LOC', table_from=location_type).exists():
#                             m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_no,item=location,type='LOC', table_from=location_type).update(item=location, table_from=location_type)
#                         else:

#                             m1.Insp_multi_location.objects.create(inspection_no_id=inspection_no, item=location, type='LOC', table_from=location_type)

#                 #save copyto employee data
#                 if send_to:
#                     if m6.copyto_mails.objects.filter(sender_id_id=ddesig, doc_id=inspection_no, area_flag=0, doc_table='i').exists():
#                         # m1.Insp_mail_details.objects.filter(sender_id_id=ddesig, doc_id=inspection_id, area_flag=0, doc_table='i').update(send_to=send_to,send_desig=send_desig)
#                         m6.copyto_mails.objects.filter(sender_id_id=ddesig, doc_id=inspection_no, area_flag=0, doc_table='i').update(receiver_id=send_to,receiver_desig=send_desig)
#                     else:
#                         # m1.Insp_mail_details.objects.create(inspection_no_id=inspection_no, area='Copy To', send_to=send_to,send_desig=send_desig)
#                         m6.copyto_mails.objects.create(sender_id_id=ddesig, doc_id=inspection_no, area_flag=0, doc_table='i', receiver_id=send_to, receiver_desig=send_desig)
            

#                 inspectionid = m1.Item_details.objects.filter(inspection_no_id=inspection_no)
#                 if inspectionid.exists():
#                     m1.Item_details.objects.filter(inspection_no_id=inspection_no).delete()
#                     for f, b in zip(finalval, final_allid):
#                         #print(finalval[f], final_allid[b])
#                         for x,y in zip(finalval[f], final_allid[b]):
#                             s = y.split('.')
#                             if len(s) == 1:
#                                 hed = 'heading'+y
#                                 heading = finalval[f][hed]
#                                 m1.Item_details.objects.create(item_title=heading, status_flag=0,created_on=datetime.now(),modified_on=datetime.now(), type='H',des_id=y, inspection_no_id=inspection_no)
#                                 y2=str(y+'.1')
#                                 if y2 in final_allid[b]:
#                                     #print('if',y2)
#                                     pass
#                                 else:
#                                     #print('else',y2)
#                                     trz = 'targetdate'+y
#                                     officm = 'markeofficer'+y
#                                     chk = 'check'+y
                                    
#                                     targetd = finalval[f][trz]
#                                     markof = finalval[f][officm]
#                                     markeofficer = markof.split(',')
#                                     checkbox = finalval[f][chk]
#                                     if checkbox == '1':
#                                         checkbox = 1
#                                     elif checkbox== '0':
#                                         checkbox = 0


#                                     if targetd:
#                                         targetd=targetd.split('/')
#                                         targetd='20'+targetd[2].strip()+'-'+targetd[1].strip()+'-'+targetd[0].strip()
#                                         t_date = targetd
#                                     else:
#                                         t_date = None
#                                     m1.Item_details.objects.filter(item_title=heading,status_flag=0, type='H',des_id=y, inspection_no_id=inspection_no).update(target_date=t_date, priority=checkbox)
#                                     #print('00000000000000000000000', t_date)
#                                     item_id=m1.Item_details.objects.all().last().item_no
#                                     #mark officer 
#                                     # print(markof, '=================')
#                                     # print(markeofficer, '=========666666========')

#                                     officer_email=[]
#                                     if markof:
#                                         for i in markeofficer:
#                                             # myuser_id=m1.empmast.objects.filter(empno=i)[0].myuser_id_id
#                                             # desig_longdesc=m1.empmast.objects.filter(empno=i)[0].desig_longdesc
#                                             # print('uuuuuuuuuuuuuuuuuu', desig_longdesc)
#                                             Desig=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i)
                                            
                                            
                                            
#                                             # email = m1.empmast.objects.filter(empno=i)[0].email
#                                             # officer_email.append(email)

                                            

#                                             if Desig:
#                                                 Desig1=Desig[0].designation_code
#                                                 if m1.Marked_Officers.objects.all().last():
#                                                     marked_no_id=(m1.Marked_Officers.objects.all().last().marked_no)+1
#                                                 else:
#                                                     marked_no_id = 1
#                                                 m1.Marked_Officers.objects.create(created_on=datetime.now(),created_by=empno,marked_emp=i,marked_no=marked_no_id,status_flag=0,item_no_id=item_id,marked_to_id=Desig1)
#                                             else:
#                                                 messages.info(request, 'Employ Desig not Match in Designation Master')
#                                     else:
#                                         if m1.Marked_Officers.objects.all().last():
#                                             marked_no_id=(m1.Marked_Officers.objects.all().last().marked_no)+1
#                                         else:
#                                             marked_no_id = 1
#                                         m1.Marked_Officers.objects.create(created_on=datetime.now(),created_by=empno,marked_no=marked_no_id,status_flag=0,item_no_id=item_id)

#                             elif len(s) == 2:
#                                 ob = 'observation'+y
#                                 trz = 'targetdate'+y
#                                 officm = 'markeofficer'+y

#                                 chk = 'check'+y

#                                 observation = finalval[f][ob]
#                                 targetd = finalval[f][trz]
#                                 markof = finalval[f][officm]
#                                 checkbox = finalval[f][chk]

#                                 if checkbox == '1':
#                                     checkbox = 1
#                                 elif checkbox == '0':
#                                     checkbox = 0
                                
#                                 markeofficer = markof.split(',')
#                                 if targetd:

#                                     targetd=targetd.split('/')
#                                     targetd='20'+targetd[2].strip()+'-'+targetd[1].strip()+'-'+targetd[0].strip()
#                                     targetdate = targetd
#                                 else:
#                                     targetdate = None
#                                 print(observation)
#                                 m1.Item_details.objects.create(observation=observation,priority=checkbox,status_flag=0,modified_on=datetime.now(), created_on=datetime.now(),inspection_no_id=inspection_no, des_id=y, target_date=targetdate, type='SH')
                                
#                                 item_id=m1.Item_details.objects.all().last().item_no
#                                 if markof:
#                                     #mark officer
                                    
#                                     for i in markeofficer:
#                                         print('iiiiiiiiiiiiiiiiii', i)
#                                         if i != '':
#                                             # myuser_id=m1.empmast.objects.filter(empno=i)[0].myuser_id_id
#                                             # desig_longdesc=m1.empmast.objects.filter(empno=i)[0].desig_longdesc
#                                             # print('eeeeeeeeeeeeeee', desig_longdesc)
#                                             Desig=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i)
#                                             if Desig:
#                                                 Desig1=Desig[0].designation_code
#                                                 if m1.Marked_Officers.objects.all().last():
#                                                     marked_no_id=(m1.Marked_Officers.objects.all().last().marked_no)+1
#                                                 else:
#                                                     marked_no_id = 1
#                                                 m1.Marked_Officers.objects.create(created_on=datetime.now(),created_by=empno,marked_no=marked_no_id,status_flag=0,item_no_id=item_id,marked_to_id=Desig1)
#                                             else:
#                                                 messages.info(request, 'Employ Desig not Match in Level Desig')
#                                         else:
#                                             pass
#                                 else:
#                                     markeofficer=''
                            
#                             else:
#                                 subdes = 'subdes'+y
#                                 subdes1 = finalval[f][subdes]
#                                 m1.Item_details.objects.create(item_subtitle=subdes1,status_flag=0,modified_on=datetime.now(), created_on=datetime.now(),type='SSH',des_id=y, inspection_no_id=inspection_no)
#                 else:
#                     for f, b in zip(finalval, final_allid):
#                         #print(finalval[f], final_allid[b])
#                         for x,y in zip(finalval[f], final_allid[b]):
#                             s = y.split('.')
#                             if len(s) == 1:
#                                 hed = 'heading'+y
#                                 heading = finalval[f][hed]
#                                 m1.Item_details.objects.create(item_title=heading,status_flag=0, modified_on=datetime.now(),created_on=datetime.now(),type='H',des_id=y, inspection_no_id=inspection_no)
#                             elif len(s) == 2:
#                                 ob = 'observation'+y
#                                 trz = 'targetdate'+y
#                                 officm = 'markeofficer'+y
#                                 chk = 'check'+y
#                                 observation = finalval[f][ob]
#                                 targetd = finalval[f][trz]
#                                 markof = finalval[f][officm]

#                                 checkbox = finalval[f][chk]

#                                 if checkbox == '1':
#                                     checkbox = 1
#                                 elif checkbox == '0':
#                                     checkbox = 0
                                
#                                 markeofficer = markof.split(',')
#                                 if targetd:

#                                     targetd=targetd.split('/')
#                                     targetd='20'+targetd[2].strip()+'-'+targetd[1].strip()+'-'+targetd[0].strip()
#                                     targetdate = targetd
#                                 else:
#                                     targetdate = None
#                                 #print(observation)
#                                 m1.Item_details.objects.create(observation=observation,priority=checkbox,modified_on=datetime.now(),created_on=datetime.now(),status_flag=0, inspection_no_id=inspection_no, des_id=y, target_date=targetdate, type='SH')
                                
#                                 item_id=m1.Item_details.objects.all().last().item_no
#                                 if markof:
#                                     #mark officer
                                    
#                                     for i in markeofficer:
#                                         #print('iiiiiiiiiiiiiiiiii', i)
#                                         if i != '':
#                                             # myuser_id=m1.empmast.objects.filter(empno=i)[0].myuser_id_id
#                                             # desig_longdesc=m1.empmast.objects.filter(empno=i)[0].desig_longdesc
#                                             # print('eeeeeeeeeeeeeee', desig_longdesc)
#                                             Desig=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i)
#                                             if Desig:
#                                                 Desig1=Desig[0].designation_code
#                                                 if m1.Marked_Officers.objects.all().last():
#                                                     marked_no_id=(m1.Marked_Officers.objects.all().last().marked_no)+1
#                                                 else:
#                                                     marked_no_id = 1
#                                                 m1.Marked_Officers.objects.create(created_on=datetime.now(),created_by=empno,marked_no=marked_no_id,marked_emp=i, status_flag=1, item_no_id=item_id,marked_to_id=Desig1)
#                                             else:
#                                                 print('error')
                                                
#                                         else:
#                                             pass
#                                 else:
#                                     markeofficer=''
                            
#                             else:
#                                 subdes = 'subdes'+y
#                                 subdes1 = finalval[f][subdes]
#                                 m1.Item_details.objects.create(item_subtitle=subdes1,modified_on=datetime.now(), created_on=datetime.now(), status_flag=0, type='SSH',des_id=y, inspection_no_id=inspection_no)
                
#                 for i in del_array_data:
#                     m1.Item_details.objects.filter(inspection_no=inspection_no,des_id=i).update(del_flag=1)
#                 return JsonResponse({"status": "Record Saved as Draft." })
#             elif btnValues=='Submit':
#                 #657777
#                 m1.Inspection_details.objects.filter(inspection_no=inspection_no)
                

#                 for rl in rly:
#                     rly_d = m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_no,item=rl,  type='HQ')
#                     if not rly_d.exists():
                        
#                         m1.Insp_multi_location.objects.create(inspection_no_id=inspection_no, item=rl, type='HQ')
                    
#                 for di in div:
#                     div_d = m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_no,item=di,  type='DIV')
#                     if not div_d.exists():
                        
#                         m1.Insp_multi_location.objects.create(inspection_no_id=inspection_no,item=di, type='DIV')
#                 # for dp in dept:
#                 #     dept_d = m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_no,item=dp,type='DPT')
#                 #     if not dept_d.exists():
                        
#                 #         m1.Insp_multi_location.objects.create(inspection_no_id=inspection_no,item=dp,type='DPT')

#                 if loc:
#                     for lo in loc:
#                         if lo:
#                             new_loc = lo.split('#')
#                             location = new_loc[0]
#                             location_type = new_loc[1]
#                             #print(location, location_type)
#                             m1.Insp_multi_location.objects.create(inspection_no_id=inspection_no, item=location, type='LOC', table_from=location_type)

#                 year = str(datetime.now().year)
#                 # desig = m1.empmast.objects.get(myuser_id=request.user).desig_longdesc
#                 if desig:
#                     last_note = m1.Inspection_details.objects.filter(inspection_no=inspection_no)[0].inspection_note_no
#                     if last_note ==''or last_note == None:
#                         # _note = m1.Inspection_details.objects.filter(inspection_note_no__contains='Insp', inspection_note_no__isnull=False).order_by('-inspection_note_no')[0]
#                         note_ = year+'/'+desig+'/Insp'+'/'
#                         _note_no = m1.Inspection_details.objects.filter(inspection_note_no__istartswith=note_, insp_last__isnull=False).aggregate(Max('insp_last'))
#                         #print('+++++++++++++', _note_no)
#                         if _note_no['insp_last__max'] is not None:
                        
#                             x = _note_no['insp_last__max']
#                             insp = int(x)+1
#                             note_no = year+'/'+desig+'/Insp'+'/'+ str(insp)
#                         else:
#                             insp = 1
#                             note_no = year+'/'+desig+'/Insp'+'/'+ str(insp)

                        
#                         m1.Inspection_details.objects.filter(inspection_no=inspection_no).update(inspection_note_no=str(note_no), insp_last=insp)
#                         messages.info(request, f'Inspection note successfully saved with Inspection Note No: {note_no}')
#                 else:
#                     print('insert desig')

#                 m1.Inspection_details.objects.filter(inspection_no=inspection_no).update(inspection_title=title,modified_by=empno, status_flag=1, start_date=start_date, inspected_on=inspected_on)
#                 inspectionid = m1.Item_details.objects.filter(inspection_no_id=inspection_no)
                
#                 officer_email=[]
#                 officer_contact=[]
#                 if inspectionid.exists():
#                     m1.Item_details.objects.filter(inspection_no_id=inspection_no).delete()
                    
#                     for f, b in zip(finalval, final_allid):
#                         #print(finalval[f], final_allid[b])
#                         for x,y in zip(finalval[f], final_allid[b]):
#                             s = y.split('.')
#                             if len(s) == 1:
#                                 hed = 'heading'+y
#                                 heading = finalval[f][hed]
#                                 m1.Item_details.objects.create(item_title=heading,created_on=datetime.now(), status_flag=1,type='H',des_id=y, inspection_no_id=inspection_no)
                                
#                                 y2=str(y+'.1')
#                                 if y2 in final_allid[b]:
#                                     #print('if',y2)
#                                     m1.Item_details.objects.filter(type='H',des_id=y, inspection_no_id=inspection_no).update(status_flag=4)
#                                     pass
#                                 else:
#                                     #print('else',y2)
#                                     trz = 'targetdate'+y
#                                     officm = 'markeofficer'+y
#                                     chk =  'check'+y
                                    
#                                     targetd = finalval[f][trz]
#                                     markof = finalval[f][officm]
#                                     checkbox = finalval[f][chk]
#                                     if checkbox == '1':
#                                         checkbox = 1
#                                     elif checkbox == '0':
#                                         checkbox = 0
                                    

#                                     markeofficer = markof.split(',')
#                                     if targetd:
#                                         targetd=targetd.split('/')
#                                         targetd='20'+targetd[2].strip()+'-'+targetd[1].strip()+'-'+targetd[0].strip()
#                                         t_date = targetd
#                                     else:
#                                         t_date = None
                                    
#                                     m1.Item_details.objects.filter(item_title=heading, status_flag=1, type='H',des_id=y, inspection_no_id=inspection_no).update(modified_on=datetime.now(),priority=checkbox, target_date=t_date)
#                                     item_id=m1.Item_details.objects.all().last().item_no
#                                     #mark officer
                                    
#                                     if markof:
#                                         for i in markeofficer:
#                                             # myuser_id=m1.empmast.objects.filter(empno=i)[0].myuser_id_id
#                                             # desig_longdesc=m1.empmast.objects.filter(empno=i)[0].desig_longdesc
#                                             # print('uuuuuuuuuuuuuuuuuu', desig_longdesc)
#                                             Desig=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i)
#                                             # email = m1.empmast.objects.filter(empno=i)[0].email
#                                             # officer_email.append(email)

                                            

#                                             if Desig:
#                                                 Desig1=Desig[0].designation_code
#                                                 if Desig[0].official_email_ID:
#                                                     officer_email.append(Desig[0].official_email_ID)
#                                                 if Desig[0].contactnumber:
#                                                     officer_contact.append(Desig[0].contactnumber)

#                                                 if m1.Marked_Officers.objects.all().last():
#                                                     marked_no_id=(m1.Marked_Officers.objects.all().last().marked_no)+1
#                                                 else:
#                                                     marked_no_id = 1
#                                                 m1.Marked_Officers.objects.create(created_on=datetime.now(),created_by=empno,marked_emp=i,marked_no=marked_no_id,status_flag=1, item_no_id=item_id,marked_to_id=Desig1)
#                                             else:
#                                                 print('error')
#                                                 # messages.info(request, 'error')

#                             elif len(s) == 2:
#                                 ob = 'observation'+y
#                                 trz = 'targetdate'+y
#                                 officm = 'markeofficer'+y
#                                 chk =  'check'+y
#                                 observation = finalval[f][ob]
#                                 targetd = finalval[f][trz]
#                                 markof = finalval[f][officm]

#                                 checkbox = finalval[f][chk]
#                                 if checkbox == '1':
#                                     checkbox = 1
#                                 elif checkbox == '0':
#                                     checkbox = 0
                                
#                                 markeofficer = markof.split(',')
#                                 if targetd:
#                                     targetd=targetd.split('/')
#                                     targetd='20'+targetd[2].strip()+'-'+targetd[1].strip()+'-'+targetd[0].strip()
#                                     targetdate = targetd
#                                 else:
#                                     targetdate = None
#                                 #print(observation)
#                                 m1.Item_details.objects.create(observation=observation,priority=checkbox,created_on=datetime.now(),status_flag=1,inspection_no_id=inspection_no, des_id=y, target_date=targetdate, type='SH')
                                
#                                 item_id=m1.Item_details.objects.all().last().item_no
#                                 if markof:
#                                     #mark officer
                                    
#                                     for i in markeofficer:
#                                         #print('iiiiiiiiiiiiiiiiii', i)
#                                         if i != '':
#                                             # myuser_id=m1.empmast.objects.filter(empno=i)[0].myuser_id_id
#                                             # desig_longdesc=m1.empmast.objects.filter(empno=i)[0].desig_longdesc
#                                             # print('eeeeeeeeeeeeeee', desig_longdesc)
                                            
#                                             Desig=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i)
#                                             # email = m1.empmast.objects.filter(empno=i)[0].email
#                                             # officer_email.append(email)

#                                             if Desig:
#                                                 Desig1=Desig[0].designation_code
#                                                 if Desig[0].official_email_ID:
#                                                     officer_email.append(Desig[0].official_email_ID)
#                                                 if Desig[0].contactnumber:
#                                                     officer_contact.append(Desig[0].contactnumber)

#                                                 if m1.Marked_Officers.objects.all().last():
#                                                     marked_no_id=(m1.Marked_Officers.objects.all().last().marked_no)+1
#                                                 else:
#                                                     marked_no_id = 1
#                                                 m1.Marked_Officers.objects.create(marked_no=marked_no_id,marked_emp=i,status_flag=1, item_no_id=item_id,marked_to_id=Desig1)
#                                             else:
#                                                 print('error1')
#                                                 # messages.info(request, 'error')
#                                         else:
#                                             pass
#                                 else:
#                                     markeofficer=''
                            
#                             else:
#                                 subdes = 'subdes'+y
#                                 subdes1 = finalval[f][subdes]
#                                 m1.Item_details.objects.create(item_subtitle=subdes1,status_flag=4,created_on=datetime.now(), type='SSH',des_id=y, inspection_no_id=inspection_no)
#                 else:
                    
#                     for f, b in zip(finalval, final_allid):
#                         #print(finalval[f], final_allid[b])
#                         for x,y in zip(finalval[f], final_allid[b]):
#                             s = y.split('.')
#                             if len(s) == 1:
#                                 hed = 'heading'+y
#                                 heading = finalval[f][hed]
#                                 m1.Item_details.objects.create(item_title=heading,created_on=datetime.now(), status_flag=1, type='H',des_id=y, inspection_no_id=inspection_no)
#                             elif len(s) == 2:
#                                 ob = 'observation'+y
#                                 trz = 'targetdate'+y
#                                 officm = 'markeofficer'+y
#                                 chk =  'check'+y

#                                 observation = finalval[f][ob]
#                                 targetd = finalval[f][trz]
#                                 markof = finalval[f][officm]

#                                 checkbox = finalval[f][chk]
#                                 if checkbox == '1':
#                                     checkbox = 1
#                                 elif checkbox == '0':
#                                     checkbox = 0
                                
#                                 markeofficer = markof.split(',')
#                                 if targetd:
#                                     targetd=targetd.split('/')
#                                     targetd='20'+targetd[2].strip()+'-'+targetd[1].strip()+'-'+targetd[0].strip()
#                                     targetdate = targetd
#                                 else:
#                                     targetdate = None
#                                 #print(observation)
#                                 m1.Item_details.objects.create(observation=observation,priority=checkbox,created_on=datetime.now(), status_flag=1,inspection_no_id=inspection_no, des_id=y, target_date=targetdate, type='SH')
                                
#                                 item_id=m1.Item_details.objects.all().last().item_no
                                
#                                 if markof:
#                                     #mark officer
                                    
#                                     for i in markeofficer:
#                                         #print('iiiiiiiiiiiiiiiiii', i)
#                                         if i != '':
#                                             # myuser_id=m1.empmast.objects.filter(empno=i)[0].myuser_id_id
#                                             # desig_longdesc=m1.empmast.objects.filter(empno=i)[0].desig_longdesc
#                                             # print('eeeeeeeeeeeeeee', desig_longdesc)
#                                             Desig=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i)

#                                             # email = m1.empmast.objects.filter(empno=i)[0].email
#                                             # officer_email.append(email)
                                            
#                                             if Desig:
#                                                 Desig1=Desig[0].designation_code
#                                                 if Desig[0].official_email_ID:
#                                                     officer_email.append(Desig[0].official_email_ID)
#                                                 if Desig[0].contactnumber:
#                                                     officer_contact.append(Desig[0].contactnumber)

#                                                 if m1.Marked_Officers.objects.all().last():
#                                                     marked_no_id=(m1.Marked_Officers.objects.all().last().marked_no)+1
#                                                 else:
#                                                     marked_no_id = 1
#                                                 m1.Marked_Officers.objects.create(created_on=datetime.now(),created_by=empno,marked_no=marked_no_id,marked_emp=i, item_no_id=item_id,marked_to_id=Desig1)
#                                             else:
#                                                 messages.info(request, 'Employ Desig not Match in Level Desig')
#                                         else:
#                                             pass
#                                 else:
#                                     markeofficer=''

                                
                            
#                             else:
#                                 subdes = 'subdes'+y
#                                 subdes1 = finalval[f][subdes]
#                                 m1.Item_details.objects.create(item_subtitle=subdes1,created_on=datetime.now(), status_flag=4, type='SSH',des_id=y, inspection_no_id=inspection_no)
                
#                 try:
#                     # To = officer_email
#                     subject="Inspection report"
#                     To=['ecegcttarun@gmail.com',]
#                     context = {'title': title}
                        
#                     InspSendMail(subject, To, context)
#                     if len(officer_contact) > 0:
#                         for num in officer_contact:
#                             pass
#                             # sendsms(num)

#                     #flag values: 
#                     # 0 - copy to
#                     # 1 - mark officer
#                     # 2 - dealt by

#                     # doc_table:
#                     # i - Inspection_details
#                     # m - Insp_details (minutes)
#                     # d - do_upload
#                     # b - budget

#                     # m1.Insp_mail_details.objects.create(subject=subject, body=title,area='Mark Of', inspection_no_id=inspection_no, send_to=send_to,send_desig=send_desig)
#                     m6.copyto_mails.objects.create(sender_id_id=ddesig, subject=subject,doc_id=inspection_no,  body=title, area_flag=1, doc_table='i', receiver_id=send_to, receiver_desig=send_desig)
#                     messages.success(request, 'Email has been sent')
                    
#                 except:
#                     messages.error(request, 'Email send failed.') 
                
                
                
#                 try:
#                     #COPY TO EMAIL
#                     offic_mail =[]
#                     offic_contact =[]
#                     unique_offic_mail = list(set(offic_mail))
#                     unique_offic_contact = list(set(offic_contact))
#                     if send_to:
                        
#                         emil = send_to.split(',')
#                         for i in emil:
#                             email = models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i)
                    
#                             if email[0].official_email_ID:
#                                 offic_mail.append(email[0].official_email_ID)
#                             if email[0].contactnumber:
#                                 offic_contact.append(Desig[0].contactnumber)

#                         subject="Inspection report"
#                         # To = unique_offic_mail
#                         To=['ecegcttarun@gmail.com',]
#                         context = {'title': title}
#                         #for email send 
#                         InspSendMail(subject, To, context)

#                         if len(unique_offic_contact) > 0:
#                             for num in unique_offic_contact:
#                                 #for sms 
#                                 # sendsms(num)
#                                 pass
#                         # m1.Insp_mail_details.objects.create(subject=subject, body=title, area='Copy To', inspection_no_id=inspection_no, send_to=send_to,send_desig=send_desig)
#                         # m6.copyto_mails.objects.create(sender_id_id=ddesig, subject=subject,doc_id=inspection_no,  body=title, area_flag=0, doc_table='i', receiver_id=send_to, receiver_desig=send_desig)
                        
#                         if m6.copyto_mails.objects.filter(sender_id_id=ddesig, doc_id=inspection_no, area_flag=0, doc_table='i').exists():
#                             # m1.Insp_mail_details.objects.filter(sender_id_id=ddesig, doc_id=inspection_id, area_flag=0, doc_table='i').update(send_to=send_to,send_desig=send_desig)
#                             m6.copyto_mails.objects.filter(sender_id_id=ddesig, doc_id=inspection_no, area_flag=0, doc_table='i').update(subject=subject, body=title, receiver_id=send_to,receiver_desig=send_desig)

#                         else:
#                             # m1.Insp_mail_details.objects.create(inspection_no_id=inspection_no, area='Copy To', send_to=send_to,send_desig=send_desig)
#                             m6.copyto_mails.objects.create(subject=subject, body=title, sender_id_id=ddesig, doc_id=inspection_no, area_flag=0, doc_table='i', receiver_id=send_to, receiver_desig=send_desig)
                
                        
#                         messages.success(request, 'Email has been sent')
                    
#                 except:
                    
#                     messages.error(request, 'Email send failed.') 
                
                
#                 return JsonResponse({"status": "Record Saved" })
#             else:
#                 return JsonResponse({"status": "Error" })
#         return JsonResponse({"success":False}, status=400)
#     except Exception as e: 
#         try:
#             m1.error_Table.objects.create(fun_name="update_draft_data",user_id=request.user,err_details=str(e))
#         except:
#             print("Internal Error!!!")
#         return render(request, "errorspage.html", {})

def update_draft_data(request):
    try:
        if request.method == "POST" and request.is_ajax():
            from datetime import datetime
            final=request.POST.get('final_partinspected')
            final_id=request.POST.get('id_partinspected')

            rly=json.loads(request.POST.get('zone'))
            
            div=json.loads(request.POST.get('division'))
            # dept=json.loads(request.POST.get('department'))
            loc=json.loads(request.POST.get('location'))
            accompany=json.loads(request.POST.get('accompany'))
            del_array_data=json.loads(request.POST.get('del_array_data'))
            print(del_array_data)
            insdt=request.POST.get('txtDate2')
            #print(insdt, '-----------')
            if 'to' in insdt:
                dt = insdt.split('to')
                st_date = dt[0].strip()
                en_date = dt[1].strip()

                start_date = datetime.strptime(st_date, '%d/%m/%y').strftime('%Y-%m-%d')
                inspected_on = datetime.strptime(en_date, '%d/%m/%y').strftime('%Y-%m-%d')

            else:
                
                inspected_on = datetime.strptime(insdt, '%d/%m/%y').strftime('%Y-%m-%d')
                start_date = datetime.strptime(insdt, '%d/%m/%y').strftime('%Y-%m-%d')
            
            title=request.POST.get('titleinsp')
            inspection_no=request.POST.get('inspection_no')
            btnValues=request.POST.get('buttonValues')
            send_to=request.POST.get('send_to')
            send_desig=request.POST.get('send_desig')
            #print('=======send==>>', send_to, send_desig)
            
            
            finalval = json.loads(final)
            final_allid = json.loads(final_id)
            final_img=json.loads(request.POST.get('final_img'))
            # empno=models.Level_Desig.objects.exclude(delete_flag=True).filter(official_email_ID=request.user)
            empnox = models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=request.user)| Q(official_email_ID=request.user.guest_email) | Q(official_email_ID=request.user.email))
            if empnox:
                empno = empnox[0].empno_id
                desig = empnox[0].designation
                ddesig = empnox[0].designation_code
            else:
                messages.error(request,'You are not authorize to create inspection.Please contact to admin')

            # ddesig=models.Level_Desig.objects.exclude(delete_flag=True).get(empno=empno)
            if m1.Insp_Accompany.objects.filter(inspection_no=inspection_no).exists():
                for up in accompany:
                    if m1.Insp_Accompany.objects.filter(inspection_no=inspection_no, accompany=up).exists():
                        m1.Insp_Accompany.objects.filter(inspection_no=inspection_no, accompany=up).update(accompany=up)
                    else:
                        m1.Insp_Accompany.objects.create(accompany=up, inspection_no_id=inspection_no)
                    
            else:
                for acc in accompany:
                    m1.Insp_Accompany.objects.create(accompany=acc, inspection_no_id=inspection_no)


            if btnValues == 'Save as draft':
                m1.Inspection_details.objects.filter(inspection_no=inspection_no).update(inspection_title=title,status_flag=0, modified_by=empno,modified_on=datetime.now(), start_date=start_date, inspected_on=inspected_on)
                
                

                for rl in rly:
                    rly_d = m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_no,item=rl,  type='HQ')
                    if not rly_d.exists():
                        
                        m1.Insp_multi_location.objects.create(inspection_no_id=inspection_no, item=rl, type='HQ')
                    
                for di in div:
                    div_d = m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_no,item=di,  type='DIV')
                    if not div_d.exists():
                        
                        m1.Insp_multi_location.objects.create(inspection_no_id=inspection_no,item=di, type='DIV')
                
                # for dp in dept:
                #     dept_d = m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_no,item=dp,type='DPT')
                #     if not dept_d.exists():
                #         m1.Insp_multi_location.objects.create(inspection_no_id=inspection_no,item=dp,type='DPT')

                for lo in loc:
                    if lo:
                        new_loc = lo.split('#')
                        location = new_loc[0]
                        location_type = new_loc[1]
                        #print(location, location_type)
                        if m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_no, item=location, type='LOC', table_from=location_type).exists():
                            m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_no,item=location,type='LOC', table_from=location_type).update(item=location, table_from=location_type)
                        else:

                            m1.Insp_multi_location.objects.create(inspection_no_id=inspection_no, item=location, type='LOC', table_from=location_type)

                #save copyto employee data
                if send_to:
                    if m6.copyto_mails.objects.filter(sender_id_id=ddesig, doc_id=inspection_no, area_flag=0, doc_table='i').exists():
                        # m1.Insp_mail_details.objects.filter(sender_id_id=ddesig, doc_id=inspection_id, area_flag=0, doc_table='i').update(send_to=send_to,send_desig=send_desig)
                        m6.copyto_mails.objects.filter(sender_id_id=ddesig, doc_id=inspection_no, area_flag=0, doc_table='i').update(receiver_id=send_to,receiver_desig=send_desig)
                    else:
                        # m1.Insp_mail_details.objects.create(inspection_no_id=inspection_no, area='Copy To', send_to=send_to,send_desig=send_desig)
                        m6.copyto_mails.objects.create(sender_id_id=ddesig, doc_id=inspection_no, area_flag=0, doc_table='i', receiver_id=send_to, receiver_desig=send_desig)
            

                inspectionid = m1.Item_details.objects.filter(inspection_no_id=inspection_no)
                if inspectionid.exists():
                    m1.Item_details.objects.filter(inspection_no_id=inspection_no).delete()
                    for f, b in zip(finalval, final_allid):
                        #print(finalval[f], final_allid[b])
                        for x,y in zip(finalval[f], final_allid[b]):
                            s = y.split('.')
                            if len(s) == 1:
                                hed = 'heading'+y
                                heading = finalval[f][hed]
                                tbl_data = finalval[f][y]
                                m1.Item_details.objects.create(tbl_data=tbl_data,item_title=heading, status_flag=0,created_on=datetime.now(),modified_on=datetime.now(), type='H',des_id=y, inspection_no_id=inspection_no)
                                y2=str(y+'.1')
                                if y2 in final_allid[b]:
                                    #print('if',y2)
                                    pass
                                else:
                                    #print('else',y2)
                                    trz = 'targetdate'+y
                                    officm = 'markeofficer'+y
                                    chk = 'check'+y
                                    
                                    targetd = finalval[f][trz]
                                    markof = finalval[f][officm]
                                    markeofficer = markof.split(',')
                                    checkbox = finalval[f][chk]
                                    if checkbox == '1':
                                        checkbox = 1
                                    elif checkbox== '0':
                                        checkbox = 0


                                    if targetd:
                                        targetd=targetd.split('/')
                                        targetd='20'+targetd[2].strip()+'-'+targetd[1].strip()+'-'+targetd[0].strip()
                                        t_date = targetd
                                    else:
                                        t_date = None
                                    m1.Item_details.objects.filter(item_title=heading,status_flag=0, type='H',des_id=y, inspection_no_id=inspection_no).update(target_date=t_date, priority=checkbox)
                                    #print('00000000000000000000000', t_date)
                                    item_id=m1.Item_details.objects.all().last().item_no
                                    #mark officer 
                                    # print(markof, '=================')
                                    # print(markeofficer, '=========666666========')

                                    officer_email=[]
                                    if markof:
                                        for i in markeofficer:
                                            # myuser_id=m1.empmast.objects.filter(empno=i)[0].myuser_id_id
                                            # desig_longdesc=m1.empmast.objects.filter(empno=i)[0].desig_longdesc
                                            # print('uuuuuuuuuuuuuuuuuu', desig_longdesc)
                                            Desig=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i)
                                            
                                            
                                            
                                            # email = m1.empmast.objects.filter(empno=i)[0].email
                                            # officer_email.append(email)

                                            

                                            if Desig:
                                                Desig1=Desig[0].designation_code
                                                if m1.Marked_Officers.objects.all().last():
                                                    marked_no_id=(m1.Marked_Officers.objects.all().last().marked_no)+1
                                                else:
                                                    marked_no_id = 1
                                                m1.Marked_Officers.objects.create(created_on=datetime.now(),created_by=empno,marked_emp=i,marked_no=marked_no_id,status_flag=0,item_no_id=item_id,marked_to_id=Desig1)
                                            else:
                                                messages.info(request, 'Employ Desig not Match in Designation Master')
                                    else:
                                        if m1.Marked_Officers.objects.all().last():
                                            marked_no_id=(m1.Marked_Officers.objects.all().last().marked_no)+1
                                        else:
                                            marked_no_id = 1
                                        m1.Marked_Officers.objects.create(created_on=datetime.now(),created_by=empno,marked_no=marked_no_id,status_flag=0,item_no_id=item_id)

                            elif len(s) == 2:
                                ob = 'observation'+y
                                trz = 'targetdate'+y
                                officm = 'markeofficer'+y

                                chk = 'check'+y

                                observation = finalval[f][ob]
                                targetd = finalval[f][trz]
                                markof = finalval[f][officm]
                                checkbox = finalval[f][chk]

                                if checkbox == '1':
                                    checkbox = 1
                                elif checkbox == '0':
                                    checkbox = 0
                                
                                markeofficer = markof.split(',')
                                if targetd:

                                    targetd=targetd.split('/')
                                    targetd='20'+targetd[2].strip()+'-'+targetd[1].strip()+'-'+targetd[0].strip()
                                    targetdate = targetd
                                else:
                                    targetdate = None
                                print(observation)
                                tbl_data = finalval[f][y]
                                m1.Item_details.objects.create(tbl_data=tbl_data,observation=observation,priority=checkbox,status_flag=0,modified_on=datetime.now(), created_on=datetime.now(),inspection_no_id=inspection_no, des_id=y, target_date=targetdate, type='SH')
                                
                                item_id=m1.Item_details.objects.all().last().item_no
                                if markof:
                                    #mark officer
                                    
                                    for i in markeofficer:
                                        print('iiiiiiiiiiiiiiiiii', i)
                                        if i != '':
                                            # myuser_id=m1.empmast.objects.filter(empno=i)[0].myuser_id_id
                                            # desig_longdesc=m1.empmast.objects.filter(empno=i)[0].desig_longdesc
                                            # print('eeeeeeeeeeeeeee', desig_longdesc)
                                            Desig=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i)
                                            if Desig:
                                                Desig1=Desig[0].designation_code
                                                if m1.Marked_Officers.objects.all().last():
                                                    marked_no_id=(m1.Marked_Officers.objects.all().last().marked_no)+1
                                                else:
                                                    marked_no_id = 1
                                                m1.Marked_Officers.objects.create(created_on=datetime.now(),created_by=empno,marked_no=marked_no_id,status_flag=0,item_no_id=item_id,marked_to_id=Desig1)
                                            else:
                                                messages.info(request, 'Employ Desig not Match in Level Desig')
                                        else:
                                            pass
                                else:
                                    markeofficer=''
                            
                            else:
                                subdes = 'subdes'+y
                                subdes1 = finalval[f][subdes]
                                tbl_data = finalval[f][y]
                                m1.Item_details.objects.create(tbl_data=tbl_data,item_subtitle=subdes1,status_flag=0,modified_on=datetime.now(), created_on=datetime.now(),type='SSH',des_id=y, inspection_no_id=inspection_no)
                else:
                    for f, b in zip(finalval, final_allid):
                        #print(finalval[f], final_allid[b])
                        for x,y in zip(finalval[f], final_allid[b]):
                            s = y.split('.')
                            if len(s) == 1:
                                hed = 'heading'+y
                                heading = finalval[f][hed]
                                tbl_data = finalval[f][y]
                                m1.Item_details.objects.create(tbl_data=tbl_data,item_title=heading,status_flag=0, modified_on=datetime.now(),created_on=datetime.now(),type='H',des_id=y, inspection_no_id=inspection_no)
                            elif len(s) == 2:
                                ob = 'observation'+y
                                trz = 'targetdate'+y
                                officm = 'markeofficer'+y
                                chk = 'check'+y
                                observation = finalval[f][ob]
                                targetd = finalval[f][trz]
                                markof = finalval[f][officm]

                                checkbox = finalval[f][chk]

                                if checkbox == '1':
                                    checkbox = 1
                                elif checkbox == '0':
                                    checkbox = 0
                                
                                markeofficer = markof.split(',')
                                if targetd:

                                    targetd=targetd.split('/')
                                    targetd='20'+targetd[2].strip()+'-'+targetd[1].strip()+'-'+targetd[0].strip()
                                    targetdate = targetd
                                else:
                                    targetdate = None
                                #print(observation)
                                tbl_data = finalval[f][y]
                                m1.Item_details.objects.create(tbl_data=tbl_data,observation=observation,priority=checkbox,modified_on=datetime.now(),created_on=datetime.now(),status_flag=0, inspection_no_id=inspection_no, des_id=y, target_date=targetdate, type='SH')
                                
                                item_id=m1.Item_details.objects.all().last().item_no
                                if markof:
                                    #mark officer
                                    
                                    for i in markeofficer:
                                        #print('iiiiiiiiiiiiiiiiii', i)
                                        if i != '':
                                            # myuser_id=m1.empmast.objects.filter(empno=i)[0].myuser_id_id
                                            # desig_longdesc=m1.empmast.objects.filter(empno=i)[0].desig_longdesc
                                            # print('eeeeeeeeeeeeeee', desig_longdesc)
                                            Desig=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i)
                                            if Desig:
                                                Desig1=Desig[0].designation_code
                                                if m1.Marked_Officers.objects.all().last():
                                                    marked_no_id=(m1.Marked_Officers.objects.all().last().marked_no)+1
                                                else:
                                                    marked_no_id = 1
                                                m1.Marked_Officers.objects.create(created_on=datetime.now(),created_by=empno,marked_no=marked_no_id,marked_emp=i, status_flag=1, item_no_id=item_id,marked_to_id=Desig1)
                                            else:
                                                print('error')
                                                
                                        else:
                                            pass
                                else:
                                    markeofficer=''
                            
                            else:
                                subdes = 'subdes'+y
                                subdes1 = finalval[f][subdes]
                                tbl_data = finalval[f][y]
                                m1.Item_details.objects.create(tbl_data=tbl_data,item_subtitle=subdes1,modified_on=datetime.now(), created_on=datetime.now(), status_flag=0, type='SSH',des_id=y, inspection_no_id=inspection_no)
                
                for i in del_array_data:
                    m1.Item_details.objects.filter(inspection_no=inspection_no,des_id=i).update(del_flag=1)
                for i in range(len(final_img)):
                    ref = final_img[i][0]
                    path = (final_img[i][1])[1:]
                    data = list(m1.Item_details.objects.filter(inspection_no=inspection_no,des_id=ref).values('link_image'))
                    if len(data) > 0:
                        data = data[0]['link_image']
                        if data != None:
                            path = data +'@#@'+path
                    m1.Item_details.objects.filter(inspection_no=inspection_no,des_id=ref).update(link_image = path)
                return JsonResponse({"status": "Record Saved as Draft." })
            elif btnValues=='Submit':
                
                m1.Inspection_details.objects.filter(inspection_no=inspection_no)
                

                for rl in rly:
                    rly_d = m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_no,item=rl,  type='HQ')
                    if not rly_d.exists():
                        
                        m1.Insp_multi_location.objects.create(inspection_no_id=inspection_no, item=rl, type='HQ')
                    
                for di in div:
                    div_d = m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_no,item=di,  type='DIV')
                    if not div_d.exists():
                        
                        m1.Insp_multi_location.objects.create(inspection_no_id=inspection_no,item=di, type='DIV')
                # for dp in dept:
                #     dept_d = m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_no,item=dp,type='DPT')
                #     if not dept_d.exists():
                        
                #         m1.Insp_multi_location.objects.create(inspection_no_id=inspection_no,item=dp,type='DPT')

                if loc:
                    for lo in loc:
                        if lo:
                            new_loc = lo.split('#')
                            location = new_loc[0]
                            location_type = new_loc[1]
                            #print(location, location_type)
                            m1.Insp_multi_location.objects.create(inspection_no_id=inspection_no, item=location, type='LOC', table_from=location_type)

                year = str(datetime.now().year)
                # desig = m1.empmast.objects.get(myuser_id=request.user).desig_longdesc
                if desig:
                    last_note = m1.Inspection_details.objects.filter(inspection_no=inspection_no)[0].inspection_note_no
                    if last_note ==''or last_note == None:
                        # _note = m1.Inspection_details.objects.filter(inspection_note_no__contains='Insp', inspection_note_no__isnull=False).order_by('-inspection_note_no')[0]
                        note_ = year+'/'+desig+'/Insp'+'/'
                        _note_no = m1.Inspection_details.objects.filter(inspection_note_no__istartswith=note_, insp_last__isnull=False).aggregate(Max('insp_last'))
                        #print('+++++++++++++', _note_no)
                        if _note_no['insp_last__max'] is not None:
                        
                            x = _note_no['insp_last__max']
                            insp = int(x)+1
                            note_no = year+'/'+desig+'/Insp'+'/'+ str(insp)
                        else:
                            insp = 1
                            note_no = year+'/'+desig+'/Insp'+'/'+ str(insp)

                        
                        m1.Inspection_details.objects.filter(inspection_no=inspection_no).update(inspection_note_no=str(note_no), insp_last=insp)
                        messages.info(request, f'Inspection note successfully saved with Inspection Note No: {note_no}')
                else:
                    print('insert desig')

                m1.Inspection_details.objects.filter(inspection_no=inspection_no).update(inspection_title=title,modified_by=empno, status_flag=1, start_date=start_date, inspected_on=inspected_on)
                inspectionid = m1.Item_details.objects.filter(inspection_no_id=inspection_no)
                
                officer_email=[]
                officer_contact=[]
                if inspectionid.exists():
                    m1.Item_details.objects.filter(inspection_no_id=inspection_no).delete()
                    
                    for f, b in zip(finalval, final_allid):
                        #print(finalval[f], final_allid[b])
                        for x,y in zip(finalval[f], final_allid[b]):
                            s = y.split('.')
                            if len(s) == 1:
                                hed = 'heading'+y
                                heading = finalval[f][hed]
                                tbl_data = finalval[f][y]
                                m1.Item_details.objects.create(tbl_data=tbl_data,item_title=heading,created_on=datetime.now(), status_flag=1,type='H',des_id=y, inspection_no_id=inspection_no)
                                
                                y2=str(y+'.1')
                                if y2 in final_allid[b]:
                                    #print('if',y2)
                                    m1.Item_details.objects.filter(type='H',des_id=y, inspection_no_id=inspection_no).update(status_flag=4)
                                    pass
                                else:
                                    #print('else',y2)
                                    trz = 'targetdate'+y
                                    officm = 'markeofficer'+y
                                    chk =  'check'+y
                                    
                                    targetd = finalval[f][trz]
                                    markof = finalval[f][officm]
                                    checkbox = finalval[f][chk]
                                    if checkbox == '1':
                                        checkbox = 1
                                    elif checkbox == '0':
                                        checkbox = 0
                                    

                                    markeofficer = markof.split(',')
                                    if targetd:
                                        targetd=targetd.split('/')
                                        targetd='20'+targetd[2].strip()+'-'+targetd[1].strip()+'-'+targetd[0].strip()
                                        t_date = targetd
                                    else:
                                        t_date = None
                                    
                                    m1.Item_details.objects.filter(item_title=heading, status_flag=1, type='H',des_id=y, inspection_no_id=inspection_no).update(modified_on=datetime.now(),priority=checkbox, target_date=t_date)
                                    item_id=m1.Item_details.objects.all().last().item_no
                                    #mark officer
                                    
                                    if markof:
                                        for i in markeofficer:
                                            # myuser_id=m1.empmast.objects.filter(empno=i)[0].myuser_id_id
                                            # desig_longdesc=m1.empmast.objects.filter(empno=i)[0].desig_longdesc
                                            # print('uuuuuuuuuuuuuuuuuu', desig_longdesc)
                                            Desig=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i)
                                            # email = m1.empmast.objects.filter(empno=i)[0].email
                                            # officer_email.append(email)

                                            

                                            if Desig:
                                                Desig1=Desig[0].designation_code
                                                if Desig[0].official_email_ID:
                                                    officer_email.append(Desig[0].official_email_ID)
                                                if Desig[0].contactnumber:
                                                    officer_contact.append(Desig[0].contactnumber)

                                                if m1.Marked_Officers.objects.all().last():
                                                    marked_no_id=(m1.Marked_Officers.objects.all().last().marked_no)+1
                                                else:
                                                    marked_no_id = 1
                                                m1.Marked_Officers.objects.create(created_on=datetime.now(),created_by=empno,marked_emp=i,marked_no=marked_no_id,status_flag=1, item_no_id=item_id,marked_to_id=Desig1)
                                            else:
                                                print('error')
                                                # messages.info(request, 'error')

                            elif len(s) == 2:
                                ob = 'observation'+y
                                trz = 'targetdate'+y
                                officm = 'markeofficer'+y
                                chk =  'check'+y
                                observation = finalval[f][ob]
                                targetd = finalval[f][trz]
                                markof = finalval[f][officm]

                                checkbox = finalval[f][chk]
                                if checkbox == '1':
                                    checkbox = 1
                                elif checkbox == '0':
                                    checkbox = 0
                                
                                markeofficer = markof.split(',')
                                if targetd:
                                    targetd=targetd.split('/')
                                    targetd='20'+targetd[2].strip()+'-'+targetd[1].strip()+'-'+targetd[0].strip()
                                    targetdate = targetd
                                else:
                                    targetdate = None
                                #print(observation)
                                tbl_data = finalval[f][y]
                                m1.Item_details.objects.create(tbl_data=tbl_data,observation=observation,priority=checkbox,created_on=datetime.now(),status_flag=1,inspection_no_id=inspection_no, des_id=y, target_date=targetdate, type='SH')
                                
                                item_id=m1.Item_details.objects.all().last().item_no
                                if markof:
                                    #mark officer
                                    
                                    for i in markeofficer:
                                        #print('iiiiiiiiiiiiiiiiii', i)
                                        if i != '':
                                            # myuser_id=m1.empmast.objects.filter(empno=i)[0].myuser_id_id
                                            # desig_longdesc=m1.empmast.objects.filter(empno=i)[0].desig_longdesc
                                            # print('eeeeeeeeeeeeeee', desig_longdesc)
                                            
                                            Desig=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i)
                                            # email = m1.empmast.objects.filter(empno=i)[0].email
                                            # officer_email.append(email)

                                            if Desig:
                                                Desig1=Desig[0].designation_code
                                                if Desig[0].official_email_ID:
                                                    officer_email.append(Desig[0].official_email_ID)
                                                if Desig[0].contactnumber:
                                                    officer_contact.append(Desig[0].contactnumber)

                                                if m1.Marked_Officers.objects.all().last():
                                                    marked_no_id=(m1.Marked_Officers.objects.all().last().marked_no)+1
                                                else:
                                                    marked_no_id = 1
                                                m1.Marked_Officers.objects.create(marked_no=marked_no_id,marked_emp=i,status_flag=1, item_no_id=item_id,marked_to_id=Desig1)
                                            else:
                                                print('error1')
                                                # messages.info(request, 'error')
                                        else:
                                            pass
                                else:
                                    markeofficer=''
                            
                            else:
                                subdes = 'subdes'+y
                                subdes1 = finalval[f][subdes]
                                tbl_data = finalval[f][y]
                                m1.Item_details.objects.create(tbl_data=tbl_data,item_subtitle=subdes1,status_flag=4,created_on=datetime.now(), type='SSH',des_id=y, inspection_no_id=inspection_no)
                else:
                    
                    for f, b in zip(finalval, final_allid):
                        #print(finalval[f], final_allid[b])
                        for x,y in zip(finalval[f], final_allid[b]):
                            s = y.split('.')
                            if len(s) == 1:
                                hed = 'heading'+y
                                heading = finalval[f][hed]
                                tbl_data = finalval[f][y]
                                m1.Item_details.objects.create(tbl_data=tbl_data,item_title=heading,created_on=datetime.now(), status_flag=1, type='H',des_id=y, inspection_no_id=inspection_no)
                            elif len(s) == 2:
                                ob = 'observation'+y
                                trz = 'targetdate'+y
                                officm = 'markeofficer'+y
                                chk =  'check'+y

                                observation = finalval[f][ob]
                                targetd = finalval[f][trz]
                                markof = finalval[f][officm]

                                checkbox = finalval[f][chk]
                                if checkbox == '1':
                                    checkbox = 1
                                elif checkbox == '0':
                                    checkbox = 0
                                
                                markeofficer = markof.split(',')
                                if targetd:
                                    targetd=targetd.split('/')
                                    targetd='20'+targetd[2].strip()+'-'+targetd[1].strip()+'-'+targetd[0].strip()
                                    targetdate = targetd
                                else:
                                    targetdate = None
                                #print(observation)
                                tbl_data = finalval[f][y]
                                m1.Item_details.objects.create(tbl_data=tbl_data,observation=observation,priority=checkbox,created_on=datetime.now(), status_flag=1,inspection_no_id=inspection_no, des_id=y, target_date=targetdate, type='SH')
                                
                                item_id=m1.Item_details.objects.all().last().item_no
                                
                                if markof:
                                    #mark officer
                                    
                                    for i in markeofficer:
                                        #print('iiiiiiiiiiiiiiiiii', i)
                                        if i != '':
                                            # myuser_id=m1.empmast.objects.filter(empno=i)[0].myuser_id_id
                                            # desig_longdesc=m1.empmast.objects.filter(empno=i)[0].desig_longdesc
                                            # print('eeeeeeeeeeeeeee', desig_longdesc)
                                            Desig=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i)

                                            # email = m1.empmast.objects.filter(empno=i)[0].email
                                            # officer_email.append(email)
                                            
                                            if Desig:
                                                Desig1=Desig[0].designation_code
                                                if Desig[0].official_email_ID:
                                                    officer_email.append(Desig[0].official_email_ID)
                                                if Desig[0].contactnumber:
                                                    officer_contact.append(Desig[0].contactnumber)

                                                if m1.Marked_Officers.objects.all().last():
                                                    marked_no_id=(m1.Marked_Officers.objects.all().last().marked_no)+1
                                                else:
                                                    marked_no_id = 1
                                                m1.Marked_Officers.objects.create(created_on=datetime.now(),created_by=empno,marked_no=marked_no_id,marked_emp=i, item_no_id=item_id,marked_to_id=Desig1)
                                            else:
                                                messages.info(request, 'Employ Desig not Match in Level Desig')
                                        else:
                                            pass
                                else:
                                    markeofficer=''

                                
                            
                            else:
                                subdes = 'subdes'+y
                                subdes1 = finalval[f][subdes]
                                tbl_data = finalval[f][y]
                                m1.Item_details.objects.create(tbl_data=tbl_data,item_subtitle=subdes1,created_on=datetime.now(), status_flag=4, type='SSH',des_id=y, inspection_no_id=inspection_no)
                for i in range(len(final_img)):
                    ref = final_img[i][0]
                    path = (final_img[i][1])[1:]
                    data = list(m1.Item_details.objects.filter(inspection_no=inspection_no,des_id=ref).values('link_image'))
                    if len(data) > 0:
                        data = data[0]['link_image']
                        if data != None:
                            path = data +'@#@'+path
                    m1.Item_details.objects.filter(inspection_no=inspection_no,des_id=ref).update(link_image = path)
                try:
                    To = officer_email
                    subject="Inspection report"
                    # To=['ecegcttarun@gmail.com',]
                    context = {'title': title}
                        
                    InspSendMail(subject, To, context)
                    if len(officer_contact) > 0:
                        for num in officer_contact:
                            pass
                            # sendsms(num)

                    #flag values: 
                    # 0 - copy to
                    # 1 - mark officer
                    # 2 - dealt by

                    # doc_table:
                    # i - Inspection_details
                    # m - Insp_details (minutes)
                    # d - do_upload
                    # b - budget

                    # m1.Insp_mail_details.objects.create(subject=subject, body=title,area='Mark Of', inspection_no_id=inspection_no, send_to=send_to,send_desig=send_desig)
                    m6.copyto_mails.objects.create(sender_id_id=ddesig, subject=subject,doc_id=inspection_no,  body=title, area_flag=1, doc_table='i', receiver_id=send_to, receiver_desig=send_desig)
                    messages.success(request, 'Email has been sent')
                    
                except:
                    messages.error(request, 'Email send failed.') 
                
                
                
                try:
                    #COPY TO EMAIL
                    offic_mail =[]
                    offic_contact =[]
                    unique_offic_mail = list(set(offic_mail))
                    unique_offic_contact = list(set(offic_contact))
                    if send_to:
                        
                        emil = send_to.split(',')
                        for i in emil:
                            email = models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i)
                    
                            if email[0].official_email_ID:
                                offic_mail.append(email[0].official_email_ID)
                            if email[0].contactnumber:
                                offic_contact.append(Desig[0].contactnumber)

                        subject="Inspection report"
                        To = unique_offic_mail
                        # To=['ecegcttarun@gmail.com',]
                        context = {'title': title}
                        #for email send 
                        InspSendMail(subject, To, context)

                        if len(unique_offic_contact) > 0:
                            for num in unique_offic_contact:
                                #for sms 
                                # sendsms(num)
                                pass
                        # m1.Insp_mail_details.objects.create(subject=subject, body=title, area='Copy To', inspection_no_id=inspection_no, send_to=send_to,send_desig=send_desig)
                        # m6.copyto_mails.objects.create(sender_id_id=ddesig, subject=subject,doc_id=inspection_no,  body=title, area_flag=0, doc_table='i', receiver_id=send_to, receiver_desig=send_desig)
                        
                        if m6.copyto_mails.objects.filter(sender_id_id=ddesig, doc_id=inspection_no, area_flag=0, doc_table='i').exists():
                            # m1.Insp_mail_details.objects.filter(sender_id_id=ddesig, doc_id=inspection_id, area_flag=0, doc_table='i').update(send_to=send_to,send_desig=send_desig)
                            m6.copyto_mails.objects.filter(sender_id_id=ddesig, doc_id=inspection_no, area_flag=0, doc_table='i').update(subject=subject, body=title, receiver_id=send_to,receiver_desig=send_desig)

                        else:
                            # m1.Insp_mail_details.objects.create(inspection_no_id=inspection_no, area='Copy To', send_to=send_to,send_desig=send_desig)
                            m6.copyto_mails.objects.create(subject=subject, body=title, sender_id_id=ddesig, doc_id=inspection_no, area_flag=0, doc_table='i', receiver_id=send_to, receiver_desig=send_desig)
                
                        
                        messages.success(request, 'Email has been sent')
                    
                except:
                    
                    messages.error(request, 'Email send failed.') 
                
                
                return JsonResponse({"status": "Record Saved" })
            else:
                return JsonResponse({"status": "Error" })
        return JsonResponse({"success":False}, status=400)
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="update_draft_data",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})


# def save_draft_data(request):
#     try:
#         if request.method == "POST" and request.is_ajax():
#             from datetime import datetime
#             final=request.POST.get('final_partinspected')
#             final_id=request.POST.get('id_partinspected')
#             rly=json.loads(request.POST.get('zone'))
#             div=json.loads(request.POST.get('division'))
#             # dept=json.loads(request.POST.get('department'))
#             loc=json.loads(request.POST.get('location'))

#             accompany=json.loads(request.POST.get('accompany'))

#             send_to=request.POST.get('send_to')
#             send_desig=request.POST.get('send_desig')

            
#             insdt=request.POST.get('txtDate2')
#             #print(insdt, '------777-----')

#             if 'to' in insdt:
#                 dt = insdt.split('to')
#                 st_date = dt[0].strip()
#                 en_date = dt[1].strip()

#                 start_date = datetime.strptime(st_date, '%d/%m/%y').strftime('%Y-%m-%d')
#                 inspected_on = datetime.strptime(en_date, '%d/%m/%y').strftime('%Y-%m-%d')

#             else:
                
#                 inspected_on = datetime.strptime(insdt, '%d/%m/%y').strftime('%Y-%m-%d')
#                 start_date = datetime.strptime(insdt, '%d/%m/%y').strftime('%Y-%m-%d')
        
#             title=request.POST.get('titleinsp')

#             finalval = json.loads(final)
#             final_allid = json.loads(final_id)

            
            

#             # empno=models.Level_Desig.objects.exclude(delete_flag=True).filter(official_email_ID=request.user)
#             empnox = models.Level_Desig.objects.exclude(delete_flag=True).filter(Q(official_email_ID=request.user) | Q(official_email_ID=request.user.email), empno__isnull=False)
#             #print('==============', len(empnox[0].empno_id))
#             if empnox:
#                 empno = empnox[0].empno_id
#                 ddesig = empnox[0].designation_code

#             else:
#                 messages.error(request, 'You are not authorize to create inspection. Please contact to admin')
            
#             # ddesig=models.Level_Desig.objects.exclude(delete_flag=True).get(empno=empno)
        
#             m1.Inspection_details.objects.create(inspection_title=title,item_type='Insp',  created_on=datetime.now(), inspection_officer_id=ddesig, status_flag=0,modified_by=empno, created_by=empno,start_date=start_date,inspected_on=inspected_on)
#             inspection_id=m1.Inspection_details.objects.all().last().inspection_no

            
#             if m1.Insp_Accompany.objects.filter(inspection_no_id=inspection_id).exists():
#                 for up in accompany:
#                     m1.Insp_Accompany.objects.filter(inspection_no_id=inspection_id, accompany=up).update(accompany=up)
                    
#             else:
#                 for acc in accompany:
#                     m1.Insp_Accompany.objects.create(accompany=acc, inspection_no_id=inspection_id)

#             #flag values: 
#             # 0 - copy to
#             # 1 - mark officer
#             # 2 - dealt by

#             # doc_table:
#             # i - Inspection_details
#             # m - Insp_details (minutes)
#             # d - do_upload
#             # b - budget
#             # m1.Insp_mail_details.objects.create(area='Copy To', inspection_no_id=inspection_id, send_to=send_to,send_desig=send_desig)
#             #copy to store email data 
#             if send_to:
#                 m6.copyto_mails.objects.create(sender_id_id=ddesig, doc_id=inspection_id, area_flag=0, doc_table='i', receiver_id=send_to, receiver_desig=send_desig)
            

#             for rl in rly:
#                 m1.Insp_multi_location.objects.create(inspection_no_id=inspection_id, item=rl, type='HQ')
#             for di in div:
#                 m1.Insp_multi_location.objects.create(inspection_no_id=inspection_id, item=di, type='DIV')
#             # for dp in dept:
#             #     m1.Insp_multi_location.objects.create(inspection_no_id=inspection_id, item=dp, type='DPT')

#             for lo in loc:
#                 if lo:
#                     new_loc = lo.split('#')
#                     location = new_loc[0]
#                     location_type = new_loc[1]
#                     location_code = new_loc[2]

#                     #print(location, location_type)
#                     m1.Insp_multi_location.objects.create(inspection_no_id=inspection_id, item=location, item_code=location_code, type='LOC', table_from=location_type)
        



#             for f, b in zip(finalval, final_allid):
#                 #print(finalval[f], final_allid[b])
#                 for x,y in zip(finalval[f], final_allid[b]):
#                     s = y.split('.')
#                     if len(s) == 1:
#                         hed = 'heading'+y
#                         heading = finalval[f][hed]
#                         m1.Item_details.objects.create(item_title=heading,status_flag=0,created_by=empno, created_on=datetime.now(), type='H',des_id=y, inspection_no_id=inspection_id)

#                         y2=str(y+'.1')
#                         if y2 in final_allid[b]:
#                             #print('if',y2)
#                             pass
#                         else:
#                             #print('else',y2)
#                             trz = 'targetdate'+y
#                             officm = 'markeofficer'+y
#                             chk = 'check'+y
                            
#                             targetd = finalval[f][trz]
#                             markof = finalval[f][officm]
#                             markeofficer = markof.split(',')
#                             checkbox = finalval[f][chk]

#                             if checkbox == '1':
#                                 checkbox = 1
#                             elif checkbox== '0':
#                                 checkbox = 0


#                             if targetd:
#                                 t_date = datetime.strptime(targetd, '%d/%m/%Y').strftime('%Y-%m-%d')
#                             else:
#                                 t_date = None
#                             m1.Item_details.objects.filter(item_title=heading,status_flag=0, type='H',des_id=y, inspection_no_id=inspection_id).update(target_date=t_date, priority=checkbox)
#                             #print('00000000000000000000000', t_date)
#                             item_id=m1.Item_details.objects.all().last().item_no
#                             #mark officer 
#                             # officer_email=[]
#                             if markof:
#                                 for i in markeofficer:
#                                     # myuser_id=m1.empmast.objects.filter(empno=i)[0].myuser_id_id
#                                     # desig_longdesc=m1.empmast.objects.filter(empno=i)[0].desig_longdesc
#                                     # print('uuuuuuuuuuuuuuuuuu', desig_longdesc)
#                                     Desig=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i)
                                    
                                    
                                    
#                                     # email = m1.empmast.objects.filter(empno=i)[0].email
#                                     # officer_email.append(email)

                                    

#                                     if Desig:
#                                         Desig1=Desig[0].designation_code
#                                         # if Desig[0].official_email_ID:
#                                         #     officer_email.append(Desig[0].official_email_ID)

#                                         if m1.Marked_Officers.objects.all().last():
#                                             marked_no_id=(m1.Marked_Officers.objects.all().last().marked_no)+1
#                                         else:
#                                             marked_no_id = 1
#                                         m1.Marked_Officers.objects.create(created_on=datetime.now(),created_by=empno,marked_emp=i,marked_no=marked_no_id,status_flag=0,item_no_id=item_id,marked_to_id=Desig1)
#                                     else:
#                                         messages.info(request, 'Employ Desig not Match in Designation Master')
#                             else:
#                                 if m1.Marked_Officers.objects.all().last():
#                                     marked_no_id=(m1.Marked_Officers.objects.all().last().marked_no)+1
#                                 else:
#                                     marked_no_id = 1
#                                 m1.Marked_Officers.objects.create(created_on=datetime.now(),created_by=empno,marked_no=marked_no_id,status_flag=0,item_no_id=item_id)

#                     elif len(s) == 2:
#                         ob = 'observation'+y
#                         trz = 'targetdate'+y
#                         officm = 'markeofficer'+y
#                         chk = 'check'+y

#                         observation = finalval[f][ob]
#                         targetd = finalval[f][trz]
#                         markof = finalval[f][officm]
                        
#                         checkbox = finalval[f][chk]

#                         if checkbox == '1':
#                             checkbox = 1
#                         elif checkbox== '0':
#                             checkbox = 0

#                         markeofficer = markof.split(',')
                        
#                         if targetd:
#                             targetdate = datetime.strptime(targetd, '%d/%m/%Y').strftime('%Y-%m-%d')
#                         else:
#                             targetdate = None

#                         m1.Item_details.objects.create(observation=observation,priority=checkbox, status_flag=0,created_by=empno,created_on=datetime.now(), inspection_no_id=inspection_id, des_id=y, target_date=targetdate, type='SH')
                        
#                         item_id=m1.Item_details.objects.all().last().item_no
#                         if markof:
#                             #mark officer
#                             for i in markeofficer:
#                                 # myuser_id=m1.empmast.objects.filter(empno=i)[0].myuser_id_id
#                                 # desig_longdesc=m1.empmast.objects.filter(empno=i)[0].desig_longdesc
#                                 # print('eeeeeeeeeeeeeee', desig_longdesc)
#                                 Desig=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i)
#                                 if Desig:
#                                     Desig1=Desig[0].designation_code

#                                     if m1.Marked_Officers.objects.all().last():
#                                         marked_no_id=(m1.Marked_Officers.objects.all().last().marked_no)+1
#                                     else:
#                                         marked_no_id = 1
#                                     m1.Marked_Officers.objects.create(created_on=datetime.now(),created_by=empno,marked_no=marked_no_id,marked_emp=i, status_flag=0,item_no_id=item_id,marked_to_id=Desig1)
#                                 else:
#                                     print('error')
#                         else:
#                             markeofficer=''
                    
#                     else:
#                         subdes = 'subdes'+y
#                         subdes1 = finalval[f][subdes]
#                         m1.Item_details.objects.create(item_subtitle=subdes1,status_flag=0,created_by=empno,created_on=datetime.now(), type='SSH',des_id=y, inspection_no_id=inspection_id)

#             return JsonResponse({"status": 1 })
#         return JsonResponse({"success":False}, status=400)
#     except Exception as e: 
#         try:
#             m1.error_Table.objects.create(fun_name="save_draft_data",user_id=request.user,err_details=str(e))
#         except:
#             print("Internal Error!!!")
#         return render(request, "errorspage.html", {})
#    #     print("e==",e)  
#     #     return render(request, "commonerrorpage.html", {})



# def save_draft_data(request):
#     try:
#         if request.method == "POST" and request.is_ajax():
#             from datetime import datetime
#             final=request.POST.get('final_partinspected')
#             final_id=request.POST.get('id_partinspected')
#             rly=json.loads(request.POST.get('zone'))
#             div=json.loads(request.POST.get('division'))
#             # dept=json.loads(request.POST.get('department'))
#             loc=json.loads(request.POST.get('location'))

#             accompany=json.loads(request.POST.get('accompany'))

#             send_to=request.POST.get('send_to')
#             send_desig=request.POST.get('send_desig')

            
#             insdt=request.POST.get('txtDate2')
#             del_array=json.loads(request.POST.get('del_array'))
#             # print(del_array, '------777-----')
#             # return JsonResponse({"status": 1 })

#             if 'to' in insdt:
#                 dt = insdt.split('to')
#                 st_date = dt[0].strip()
#                 en_date = dt[1].strip()

#                 start_date = datetime.strptime(st_date, '%d/%m/%y').strftime('%Y-%m-%d')
#                 inspected_on = datetime.strptime(en_date, '%d/%m/%y').strftime('%Y-%m-%d')

#             else:
                
#                 inspected_on = datetime.strptime(insdt, '%d/%m/%y').strftime('%Y-%m-%d')
#                 start_date = datetime.strptime(insdt, '%d/%m/%y').strftime('%Y-%m-%d')
        
#             title=request.POST.get('titleinsp')

#             finalval = json.loads(final)
#             final_allid = json.loads(final_id)

            
            

#             # empno=models.Level_Desig.objects.exclude(delete_flag=True).filter(official_email_ID=request.user)
#             empnox = models.Level_Desig.objects.exclude(delete_flag=True).filter(Q(official_email_ID=request.user) | Q(official_email_ID=request.user.email), empno__isnull=False)
#             #print('==============', len(empnox[0].empno_id))
#             if empnox:
#                 empno = empnox[0].empno_id
#                 ddesig = empnox[0].designation_code

#             else:
#                 messages.error(request, 'You are not authorize to create inspection. Please contact to admin')
            
#             # ddesig=models.Level_Desig.objects.exclude(delete_flag=True).get(empno=empno)
        
#             m1.Inspection_details.objects.create(inspection_title=title,item_type='Insp',  created_on=datetime.now(), inspection_officer_id=ddesig, status_flag=0,modified_by=empno, created_by=empno,start_date=start_date,inspected_on=inspected_on)
#             inspection_id=m1.Inspection_details.objects.all().last().inspection_no

            
#             if m1.Insp_Accompany.objects.filter(inspection_no_id=inspection_id).exists():
#                 for up in accompany:
#                     m1.Insp_Accompany.objects.filter(inspection_no_id=inspection_id, accompany=up).update(accompany=up)
                    
#             else:
#                 for acc in accompany:
#                     m1.Insp_Accompany.objects.create(accompany=acc, inspection_no_id=inspection_id)

#             #flag values: 
#             # 0 - copy to
#             # 1 - mark officer
#             # 2 - dealt by

#             # doc_table:
#             # i - Inspection_details
#             # m - Insp_details (minutes)
#             # d - do_upload
#             # b - budget
#             # m1.Insp_mail_details.objects.create(area='Copy To', inspection_no_id=inspection_id, send_to=send_to,send_desig=send_desig)
#             #copy to store email data 
#             if send_to:
#                 m6.copyto_mails.objects.create(sender_id_id=ddesig, doc_id=inspection_id, area_flag=0, doc_table='i', receiver_id=send_to, receiver_desig=send_desig)
            

#             for rl in rly:
#                 m1.Insp_multi_location.objects.create(inspection_no_id=inspection_id, item=rl, type='HQ')
#             for di in div:
#                 m1.Insp_multi_location.objects.create(inspection_no_id=inspection_id, item=di, type='DIV')
#             # for dp in dept:
#             #     m1.Insp_multi_location.objects.create(inspection_no_id=inspection_id, item=dp, type='DPT')

#             for lo in loc:
#                 if lo:
#                     new_loc = lo.split('#')
#                     location = new_loc[0]
#                     location_type = new_loc[1]
#                     location_code = new_loc[2]

#                     #print(location, location_type)
#                     m1.Insp_multi_location.objects.create(inspection_no_id=inspection_id, item=location, item_code=location_code, type='LOC', table_from=location_type)
        



#             for f, b in zip(finalval, final_allid):
#                 #print(finalval[f], final_allid[b])
#                 for x,y in zip(finalval[f], final_allid[b]):
#                     s = y.split('.')
#                     if len(s) == 1:
#                         hed = 'heading'+y
#                         heading = finalval[f][hed]
#                         m1.Item_details.objects.create(item_title=heading,status_flag=0,created_by=empno, created_on=datetime.now(), type='H',des_id=y, inspection_no_id=inspection_id)

#                         y2=str(y+'.1')
#                         if y2 in final_allid[b]:
#                             #print('if',y2)
#                             pass
#                         else:
#                             #print('else',y2)
#                             trz = 'targetdate'+y
#                             officm = 'markeofficer'+y
#                             chk = 'check'+y
                            
#                             targetd = finalval[f][trz]
#                             markof = finalval[f][officm]
#                             markeofficer = markof.split(',')
#                             checkbox = finalval[f][chk]

#                             if checkbox == '1':
#                                 checkbox = 1
#                             elif checkbox== '0':
#                                 checkbox = 0


#                             if targetd:
#                                 targetd=targetd.split('/')
#                                 targetd='20'+targetd[2].strip()+'-'+targetd[1].strip()+'-'+targetd[0].strip()
#                                 t_date = targetd
#                             else:
#                                 t_date = None
#                             m1.Item_details.objects.filter(item_title=heading,status_flag=0, type='H',des_id=y, inspection_no_id=inspection_id).update(target_date=t_date, priority=checkbox)
#                             #print('00000000000000000000000', t_date)
#                             item_id=m1.Item_details.objects.all().last().item_no
#                             #mark officer 
#                             # officer_email=[]
#                             if markof:
#                                 for i in markeofficer:
#                                     # myuser_id=m1.empmast.objects.filter(empno=i)[0].myuser_id_id
#                                     # desig_longdesc=m1.empmast.objects.filter(empno=i)[0].desig_longdesc
#                                     # print('uuuuuuuuuuuuuuuuuu', desig_longdesc)
#                                     Desig=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i)
                                    
                                    
                                    
#                                     # email = m1.empmast.objects.filter(empno=i)[0].email
#                                     # officer_email.append(email)

                                    

#                                     if Desig:
#                                         Desig1=Desig[0].designation_code
#                                         # if Desig[0].official_email_ID:
#                                         #     officer_email.append(Desig[0].official_email_ID)

#                                         if m1.Marked_Officers.objects.all().last():
#                                             marked_no_id=(m1.Marked_Officers.objects.all().last().marked_no)+1
#                                         else:
#                                             marked_no_id = 1
#                                         m1.Marked_Officers.objects.create(created_on=datetime.now(),created_by=empno,marked_emp=i,marked_no=marked_no_id,status_flag=0,item_no_id=item_id,marked_to_id=Desig1)
#                                     else:
#                                         messages.info(request, 'Employ Desig not Match in Designation Master')
#                             else:
#                                 if m1.Marked_Officers.objects.all().last():
#                                     marked_no_id=(m1.Marked_Officers.objects.all().last().marked_no)+1
#                                 else:
#                                     marked_no_id = 1
#                                 m1.Marked_Officers.objects.create(created_on=datetime.now(),created_by=empno,marked_no=marked_no_id,status_flag=0,item_no_id=item_id)

#                     elif len(s) == 2:
#                         ob = 'observation'+y
#                         trz = 'targetdate'+y
#                         officm = 'markeofficer'+y
#                         chk = 'check'+y

#                         observation = finalval[f][ob]
#                         targetd = finalval[f][trz]
#                         markof = finalval[f][officm]
                        
#                         checkbox = finalval[f][chk]

#                         if checkbox == '1':
#                             checkbox = 1
#                         elif checkbox== '0':
#                             checkbox = 0

#                         markeofficer = markof.split(',')
                        
#                         if targetd:
#                             targetd=targetd.split('/')
#                             targetd='20'+targetd[2].strip()+'-'+targetd[1].strip()+'-'+targetd[0].strip()
#                             targetdate = targetd
#                         else:
#                             targetdate = None

#                         m1.Item_details.objects.create(observation=observation,priority=checkbox, status_flag=0,created_by=empno,created_on=datetime.now(), inspection_no_id=inspection_id, des_id=y, target_date=targetdate, type='SH')
                        
#                         item_id=m1.Item_details.objects.all().last().item_no
#                         if markof:
#                             #mark officer
#                             for i in markeofficer:
#                                 # myuser_id=m1.empmast.objects.filter(empno=i)[0].myuser_id_id
#                                 # desig_longdesc=m1.empmast.objects.filter(empno=i)[0].desig_longdesc
#                                 # print('eeeeeeeeeeeeeee', desig_longdesc)
#                                 Desig=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i)
#                                 if Desig:
#                                     Desig1=Desig[0].designation_code

#                                     if m1.Marked_Officers.objects.all().last():
#                                         marked_no_id=(m1.Marked_Officers.objects.all().last().marked_no)+1
#                                     else:
#                                         marked_no_id = 1
#                                     m1.Marked_Officers.objects.create(created_on=datetime.now(),created_by=empno,marked_no=marked_no_id,marked_emp=i, status_flag=0,item_no_id=item_id,marked_to_id=Desig1)
#                                 else:
#                                     print('error')
#                         else:
#                             markeofficer=''
                    
#                     else:
#                         subdes = 'subdes'+y
#                         subdes1 = finalval[f][subdes]
#                         m1.Item_details.objects.create(item_subtitle=subdes1,status_flag=0,created_by=empno,created_on=datetime.now(), type='SSH',des_id=y, inspection_no_id=inspection_id)
            
#             for i in del_array:
#                 m1.Item_details.objects.filter(inspection_no=inspection_id,des_id=i).update(del_flag=1)
#             return JsonResponse({"status": 1 })
#         return JsonResponse({"success":False}, status=400)
#     except Exception as e: 
#         try:
#             m1.error_Table.objects.create(fun_name="save_draft_data",user_id=request.user,err_details=str(e))
#         except:
#             print("Internal Error!!!")
#         return render(request, "errorspage.html", {})

## 290323
# def save_draft_data(request):
#     try:
#         if request.method == "POST" and request.is_ajax():
#             from datetime import datetime
#             final=request.POST.get('final_partinspected')
#             final_id=request.POST.get('id_partinspected')
#             rly=json.loads(request.POST.get('zone'))
#             div=json.loads(request.POST.get('division'))
#             # dept=json.loads(request.POST.get('department'))
#             loc=json.loads(request.POST.get('location'))
#             final_img=json.loads(request.POST.get('final_img'))
#             accompany=json.loads(request.POST.get('accompany'))

#             send_to=request.POST.get('send_to')
#             send_desig=request.POST.get('send_desig')

            
#             insdt=request.POST.get('txtDate2')
#             del_array=json.loads(request.POST.get('del_array'))
#             # print(del_array, '------777-----')
#             # return JsonResponse({"status": 1 })

#             if 'to' in insdt:
#                 dt = insdt.split('to')
#                 st_date = dt[0].strip()
#                 en_date = dt[1].strip()

#                 start_date = datetime.strptime(st_date, '%d/%m/%y').strftime('%Y-%m-%d')
#                 inspected_on = datetime.strptime(en_date, '%d/%m/%y').strftime('%Y-%m-%d')

#             else:
                
#                 inspected_on = datetime.strptime(insdt, '%d/%m/%y').strftime('%Y-%m-%d')
#                 start_date = datetime.strptime(insdt, '%d/%m/%y').strftime('%Y-%m-%d')
        
#             title=request.POST.get('titleinsp')

#             finalval = json.loads(final)
#             final_allid = json.loads(final_id)

            
            

#             # empno=models.Level_Desig.objects.exclude(delete_flag=True).filter(official_email_ID=request.user)
#             empnox = models.Level_Desig.objects.exclude(delete_flag=True).filter(Q(official_email_ID=request.user) | Q(official_email_ID=request.user.email), empno__isnull=False)
#             #print('==============', len(empnox[0].empno_id))
#             if empnox:
#                 empno = empnox[0].empno_id
#                 ddesig = empnox[0].designation_code

#             else:
#                 messages.error(request, 'You are not authorize to create inspection. Please contact to admin')
            
#             # ddesig=models.Level_Desig.objects.exclude(delete_flag=True).get(empno=empno)
        
#             m1.Inspection_details.objects.create(inspection_title=title,item_type='Insp',  created_on=datetime.now(), inspection_officer_id=ddesig, status_flag=0,modified_by=empno, created_by=empno,start_date=start_date,inspected_on=inspected_on)
#             inspection_id=m1.Inspection_details.objects.all().last().inspection_no

            
#             if m1.Insp_Accompany.objects.filter(inspection_no_id=inspection_id).exists():
#                 for up in accompany:
#                     m1.Insp_Accompany.objects.filter(inspection_no_id=inspection_id, accompany=up).update(accompany=up)
                    
#             else:
#                 for acc in accompany:
#                     m1.Insp_Accompany.objects.create(accompany=acc, inspection_no_id=inspection_id)

#             #flag values: 
#             # 0 - copy to
#             # 1 - mark officer
#             # 2 - dealt by

#             # doc_table:
#             # i - Inspection_details
#             # m - Insp_details (minutes)
#             # d - do_upload
#             # b - budget
#             # m1.Insp_mail_details.objects.create(area='Copy To', inspection_no_id=inspection_id, send_to=send_to,send_desig=send_desig)
#             #copy to store email data 
#             if send_to:
#                 m6.copyto_mails.objects.create(sender_id_id=ddesig, doc_id=inspection_id, area_flag=0, doc_table='i', receiver_id=send_to, receiver_desig=send_desig)
            

#             for rl in rly:
#                 m1.Insp_multi_location.objects.create(inspection_no_id=inspection_id, item=rl, type='HQ')
#             for di in div:
#                 m1.Insp_multi_location.objects.create(inspection_no_id=inspection_id, item=di, type='DIV')
#             # for dp in dept:
#             #     m1.Insp_multi_location.objects.create(inspection_no_id=inspection_id, item=dp, type='DPT')

#             for lo in loc:
#                 if lo:
#                     new_loc = lo.split('#')
#                     location = new_loc[0]
#                     location_type = new_loc[1]
#                     location_code = new_loc[2]

#                     #print(location, location_type)
#                     m1.Insp_multi_location.objects.create(inspection_no_id=inspection_id, item=location, item_code=location_code, type='LOC', table_from=location_type)
        



#             for f, b in zip(finalval, final_allid):
#                 #print(finalval[f], final_allid[b])
#                 for x,y in zip(finalval[f], final_allid[b]):
#                     s = y.split('.')
#                     if len(s) == 1:
#                         hed = 'heading'+y
#                         heading = finalval[f][hed]
#                         tbl_data = finalval[f][y]
#                         m1.Item_details.objects.create(tbl_data=tbl_data,item_title=heading,status_flag=0,created_by=empno, created_on=datetime.now(), type='H',des_id=y, inspection_no_id=inspection_id)

#                         y2=str(y+'.1')
#                         if y2 in final_allid[b]:
#                             #print('if',y2)
#                             pass
#                         else:
#                             #print('else',y2)
#                             trz = 'targetdate'+y
#                             officm = 'markeofficer'+y
#                             chk = 'check'+y
                            
#                             targetd = finalval[f][trz]
#                             markof = finalval[f][officm]
#                             markeofficer = markof.split(',')
#                             checkbox = finalval[f][chk]

#                             if checkbox == '1':
#                                 checkbox = 1
#                             elif checkbox== '0':
#                                 checkbox = 0


#                             if targetd:
#                                 targetd=targetd.split('/')
#                                 targetd='20'+targetd[2].strip()+'-'+targetd[1].strip()+'-'+targetd[0].strip()
#                                 t_date = targetd
#                             else:
#                                 t_date = None
#                             m1.Item_details.objects.filter(item_title=heading,status_flag=0, type='H',des_id=y, inspection_no_id=inspection_id).update(target_date=t_date, priority=checkbox)
#                             #print('00000000000000000000000', t_date)
#                             item_id=m1.Item_details.objects.all().last().item_no
#                             #mark officer 
#                             # officer_email=[]
#                             if markof:
#                                 for i in markeofficer:
#                                     # myuser_id=m1.empmast.objects.filter(empno=i)[0].myuser_id_id
#                                     # desig_longdesc=m1.empmast.objects.filter(empno=i)[0].desig_longdesc
#                                     # print('uuuuuuuuuuuuuuuuuu', desig_longdesc)
#                                     Desig=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i)
                                    
                                    
                                    
#                                     # email = m1.empmast.objects.filter(empno=i)[0].email
#                                     # officer_email.append(email)

                                    

#                                     if Desig:
#                                         Desig1=Desig[0].designation_code
#                                         # if Desig[0].official_email_ID:
#                                         #     officer_email.append(Desig[0].official_email_ID)

#                                         if m1.Marked_Officers.objects.all().last():
#                                             marked_no_id=(m1.Marked_Officers.objects.all().last().marked_no)+1
#                                         else:
#                                             marked_no_id = 1
#                                         m1.Marked_Officers.objects.create(created_on=datetime.now(),created_by=empno,marked_emp=i,marked_no=marked_no_id,status_flag=0,item_no_id=item_id,marked_to_id=Desig1)
#                                     else:
#                                         messages.info(request, 'Employ Desig not Match in Designation Master')
#                             else:
#                                 if m1.Marked_Officers.objects.all().last():
#                                     marked_no_id=(m1.Marked_Officers.objects.all().last().marked_no)+1
#                                 else:
#                                     marked_no_id = 1
#                                 m1.Marked_Officers.objects.create(created_on=datetime.now(),created_by=empno,marked_no=marked_no_id,status_flag=0,item_no_id=item_id)

#                     elif len(s) == 2:
#                         ob = 'observation'+y
#                         trz = 'targetdate'+y
#                         officm = 'markeofficer'+y
#                         chk = 'check'+y

#                         observation = finalval[f][ob]
#                         targetd = finalval[f][trz]
#                         markof = finalval[f][officm]
                        
#                         checkbox = finalval[f][chk]

#                         if checkbox == '1':
#                             checkbox = 1
#                         elif checkbox== '0':
#                             checkbox = 0

#                         markeofficer = markof.split(',')
                        
#                         if targetd:
#                             targetd=targetd.split('/')
#                             targetd='20'+targetd[2].strip()+'-'+targetd[1].strip()+'-'+targetd[0].strip()
#                             targetdate = targetd
#                         else:
#                             targetdate = None
#                         tbl_data = finalval[f][y]
#                         m1.Item_details.objects.create(tbl_data=tbl_data,observation=observation,priority=checkbox, status_flag=0,created_by=empno,created_on=datetime.now(), inspection_no_id=inspection_id, des_id=y, target_date=targetdate, type='SH')
                        
#                         item_id=m1.Item_details.objects.all().last().item_no
#                         if markof:
#                             #mark officer
#                             for i in markeofficer:
#                                 # myuser_id=m1.empmast.objects.filter(empno=i)[0].myuser_id_id
#                                 # desig_longdesc=m1.empmast.objects.filter(empno=i)[0].desig_longdesc
#                                 # print('eeeeeeeeeeeeeee', desig_longdesc)
#                                 Desig=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i)
#                                 if Desig:
#                                     Desig1=Desig[0].designation_code

#                                     if m1.Marked_Officers.objects.all().last():
#                                         marked_no_id=(m1.Marked_Officers.objects.all().last().marked_no)+1
#                                     else:
#                                         marked_no_id = 1
#                                     m1.Marked_Officers.objects.create(created_on=datetime.now(),created_by=empno,marked_no=marked_no_id,marked_emp=i, status_flag=0,item_no_id=item_id,marked_to_id=Desig1)
#                                 else:
#                                     print('error')
#                         else:
#                             markeofficer=''
                    
#                     else:
#                         subdes = 'subdes'+y
#                         subdes1 = finalval[f][subdes]
#                         tbl_data = finalval[f][y]
#                         m1.Item_details.objects.create(tbl_data=tbl_data, item_subtitle=subdes1,status_flag=0,created_by=empno,created_on=datetime.now(), type='SSH',des_id=y, inspection_no_id=inspection_id)
            
#             for i in del_array:
#                 m1.Item_details.objects.filter(inspection_no=inspection_id,des_id=i).update(del_flag=1)
#             for i in range(len(final_img)):
#                 ref = final_img[i][0]
#                 path = (final_img[i][1])[1:]
#                 data = list(m1.Item_details.objects.filter(inspection_no=inspection_id,des_id=ref).values('link_image'))
#                 if len(data) > 0:
#                     data = data[0]['link_image']
#                     if data != None:
#                         path = data +'@#@'+path
#                 m1.Item_details.objects.filter(inspection_no=inspection_id,des_id=ref).update(link_image = path)

                

#             return JsonResponse({"status": 1 })
#         return JsonResponse({"success":False}, status=400)
#     except Exception as e: 
#         try:
#             m1.error_Table.objects.create(fun_name="save_draft_data",user_id=request.user,err_details=str(e))
#         except:
#             print("Internal Error!!!")
#         return render(request, "errorspage.html", {})


def nominate_officer(request):
    try:
        print("$%^%*()&*^%")
        officers_list=list(m1.empmast.objects.all().values('empmname','empno', 'desig_longdesc'))
        print(officers_list)
        context={
            'officers_list':officers_list
        }
            
        return JsonResponse(context, safe = False)
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="nominate_officer",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})
    # except Exception as e:
    #     print("e==",e)  
        


#bhartiend

# #niyati



# def employeeList(request):
#     current_user = request.user
#     emp=m1.empmast.objects.get(pk=current_user.username) 
#     employees=m1.empmast.objects.all().order_by('empname') 
#     category = m1.empmast.objects.filter(decode_paycategory__isnull=False).values('decode_paycategory').distinct()
#     department=models.departMast.objects.filter(delete_flag=False).values('department_name').order_by('department_name').distinct()
#     context={
#         'emp':emp,
#         'department':department,
#         'employees':employees,
#         'sub':0,
#         'category':category,
       
#         'user':usermaster,
        
#      }
#     return render(request, 'employeeList.html',context)


# def viewEmployee_Det(request):
    
#     if request.method == "GET" and request.is_ajax()
#         empno = request.GET.get('empno') 
#         emp = m1.empmast.objects.filter(empno=empno)[0]
#         print(empno,'empno')
#         context={  
#         'empno':emp.empno,
#         'empname':emp.empname,
#         'birthdate':emp.birthdate,
#         'dateapp':emp.appointmentdate,
#         'office_or':emp.office_orderno,
#         'sex':emp.sex,
#         'emp_inctype':emp.emp_inctype,
#         'marital_status':emp.marital_status,
#         'email':emp.email,
#         'contactno':emp.contactno,
#         'ticket_no':emp.ticket_no,
#         'idcard_no':emp.idcard_no,
#         'emp_inctype':emp.emp_inctype,
#         'inc_category':emp.inc_category,
#         'desig':emp.desig_longdesc,
#         'status':emp.emp_status,
#         'dept':emp.dept_desc,
#         'category':emp.decode_paycategory,
#         'payband':emp.payband,
#         'scalecode':emp.scalecode,
#         'paylevel':emp.pc7_level,
#         'gradepay':emp.payrate,
#         'date_of_joining':emp.date_of_joining,
#         'date_of_promotion':emp.date_of_promotion,
#         'station_dest':emp.station_des,
#         'wau':emp.wau,
#         'billunit':emp.billunit,
#         'service':emp.service_status,
#         'emptype':emp.emptype,
#         'medicalcode':emp.medicalcode,
#         'tradecode':emp.tradecode,
#         'role':emp.role,
#         'shop_section':emp.shop_section,

        
    
#         }  
    
    
#         return JsonResponse(context, safe = False)
#     return JsonResponse({"success":False}, status=400)


# def  get_emp_detNew(request):
#     if request.method == "GET" and request.is_ajax():
#         empno = request.GET.get('empno') 
#         obj = m1.empmast.objects.filter(empno=empno).all() 
#         rno=len(obj)
#         if rno==0:            
#            context={            
#             'rno':rno ,
#            }  
#         else:          
#            context={  
#             'rno':rno ,          
#             'empno':obj[0].empno,
#             'empname':obj[0].empname,
#             'birthdate':obj[0].birthdate,
#             'dateapp':obj[0].appointmentdate,
#             'office_orderno':obj[0].office_orderno,
#             'sex':obj[0].sex,
            
#             'marital_status':obj[0].marital_status,
#             'email':obj[0].email,
#             'contactno':obj[0].contactno,
            
#             'desig':obj[0].desig_longdesc,
#             'status':obj[0].emp_status,
#             'dept':obj[0].dept_desc,
#             'category':obj[0].decode_paycategory,
#             'payband':obj[0].payband,
#             'scalecode':obj[0].scalecode,
#             'paylevel':obj[0].pc7_level,
#             'gradepay':obj[0].payrate,
#             'joining_date':obj[0].date_of_joining,
#             'date_of_promotion':obj[0].date_of_promotion,
#             'station_dest':obj[0].station_des,
#             'wau':obj[0].wau,
#             'billunit':obj[0].billunit,
#             'service':obj[0].service_status,
#             'emptype':obj[0].emptype,
#             'ticket_no':obj[0].ticket_no,
#             'idcard_no':obj[0].idcard_no,
#             'emp_inctype':obj[0].emp_inctype,
#             'inc_category':obj[0].inc_category,
            
       
#            }  
       
       
#         return JsonResponse(context, safe = False)
#     return JsonResponse({"success":False}, status=400)

import json
# def assign_role(request):
    
#     if request.method=='GET' or request.is_ajax():
#         print('hiiiii')
#         empno1 = request.GET.get('empno1')
#         print(empno1,'-------')
#         emprole = request.GET.get('emprole')
#         print(emprole,'----ttttt---')
#         department = request.GET.get('department')
#         print(department,'----uuuuuutt---')
#         designation = request.GET.get('designation')
#         print(designation,'---5555555t---')
#         parentdesig = request.GET.get('parentdesig')
#         print(parentdesig,'===================--------=========')
      
#         s_section = request.GET.get('s_section')
#         print(s_section,'___________________________')
#         s_section = json.loads(s_section)
#         sop =''
#         for o in s_section:
#             sop=sop+o+", "

#         print(sop,'---------', designation)
       
        
#         parent=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation=parentdesig).values('designation_code')
#         print(parent)
#         employeeUpdate=m1.empmast.objects.filter(empno=empno1).first()
#         var1=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation=designation).first()
#         print(employeeUpdate,'----number')
#         var1.parent_desig_code=parent[0]['designation_code']
#         var1.save()
#         employeeUpdate.role=emprole
#         print(employeeUpdate.role)
#         empl=m1.empmast.objects.filter(empno=empno1).first()
#         print(empl)
#         sno=m1.empmastnew.objects.all().last().sno
        
#         m1.empmastnew.objects.create(sno=sno+1,emp_id=empl,shop_section=sop)
#         employeeUpdate.parent=emprole 
#         employeeUpdate.dept_desc=department
       
#         employeeUpdate.desig_longdesc=designation
        
#         employeeUpdate.save()
       
#         messages.success(request, 'Successfully Activate!')
        
        
#     return JsonResponse({'saved':'save'})


def getDesigbyDepartment(request):
    try:
        if request.method == "GET" and request.is_ajax():
            department = request.GET.get('department')
            #print(department)  
            
            obj=list(models.Level_Desig.objects.exclude(delete_flag=True).exclude(Q(delete_flag=True)).filter(department=department).values('designation').order_by('designation').distinct('designation'))
            #print(obj,'____________________________________')
            return JsonResponse(obj, safe = False)
        return JsonResponse({"success":False}, status=400)
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="getDesigbyDepartment",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})


# def officer_bydiv(request):
#     if request.method == "GET" and request.is_ajax():
#         div_1 = request.GET.get('div_1')
         
#         div_id=railwayLocationMaster.objects.filter(location_code=div_1)[0].rly_unit_code
#         obj=list(models.empmast.objects.filter(division_id=div_id).values('empname').order_by('empname'))
#         context={
#             'obj':obj,
#         }
#         return JsonResponse(context, safe = False)
#     return JsonResponse({"success":False}, status=400)


 

def getsection_byshop1(request):
    try:
        if request.method == "GET" and request.is_ajax():
            shop = request.GET.get('shop')
            #print(shop)  
            
            shop_id=models.shop_section.objects.filter(shop_code=shop).values('section_code')
            
        
            l=[]
            for i in shop_id:
                l.append(i['section_code'])
            #print(l)    
            context={
                'shop_id':l,
            } 
            return JsonResponse(context, safe = False)
        return JsonResponse({"success":False}, status=400)
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="getsection_byshop1",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})
 


def getrole_bydesig(request):
    try:
        if request.method == "GET" and request.is_ajax():
            designation = request.GET.get('designation')
            #print(designation)  
            
            desig_id=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation=designation)[0].designation_code
            #print(desig_id)
            role=list(models.roles.objects.filter(designation_code=desig_id).values('role').distinct('role'))
            #print(role)
            l=[]
            for i in role:
                l.append(i['role'])
            #print(l)    
            context={
                'role':l,
            } 
            return JsonResponse(context, safe = False)
        return JsonResponse({"success":False}, status=400)
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="getrole_bydesig",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})



def get_parentdesig(request):
    try:
        if request.method == "GET" and request.is_ajax():
            department = request.GET.get('department')
            #print(department)  
            paylevel1 = request.GET.get('paylevel1')
            #print(paylevel1)  
            
            desig_id=models.Level_Desig.objects.exclude(delete_flag=True).filter(department=department,pc7_level__gte=paylevel1).values('designation')
            #print(desig_id,'------')
            #parent=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation=desig_id).values('designation')
            l=[]
            for i in desig_id:
                l.append(i['designation'])
            #print(l)    
            context={
                'desig_id':l,
            } 
            return JsonResponse(context,safe = False)
        return JsonResponse({"success":False}, status=400)
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="get_parentdesig",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})


def getshopcode_bydept(request):
    try:
        if request.method == "GET" and request.is_ajax():
            department = request.GET.get('department')
            #print(department)  
            
            dept_id=models.departMast.objects.filter(department_name=department)[0].department_code
            #print(dept_id)
            shop_code=list(models.shop_section.objects.filter(department_code_id=dept_id).values('shop_code').distinct('shop_code'))
            
            l=[]
            for i in shop_code:
                l.append(i['shop_code'])
            #print(l)    
            context={
                'shop_code':l,
            } 
            return JsonResponse(context, safe = False)
        return JsonResponse({"success":False}, status=400)
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="get_parentdesig",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})

def getsection_byshop(request):
    try:
        if request.method == "GET" and request.is_ajax():
            shop = request.GET.get('shop')
            #print(shop)  
            
            shop=list(models.shop_section.objects.filter(shop_code=shop).values('section_code').distinct('section_code'))
            #print(shop)
        
            l=[]
            for i in shop:
                l.append(i['section_code'])
            #print(l)    
            context={
                'shop':l,
            } 
            return JsonResponse(context, safe = False)
        return JsonResponse({"success":False}, status=400)
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="getsection_byshop",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})

    

# def getshop_bydept(request):
#     if request.method == "GET" and request.is_ajax():
#         dept = request.GET.get('dept')
#         print(dept)  
         
#         dept_id=models.departMast.objects.filter(department_name=dept)[0].department_code
#         print(dept_id)
#         shop=list(models.shop_section.objects.filter(department_code_id=dept_id).values('shop_code').distinct('shop_code'))
#         print(shop)
#         l=[]
#         for i in shop:
#             l.append(i['shop_code'])
#         print(l)    
#         context={
#             'shop':l,
#         } 
#         return JsonResponse(context, safe = False)
#     return JsonResponse({"success":False}, status=400)


# def post_bydept(request):
#     if request.method == "GET" and request.is_ajax():
#         dept1 = request.GET.get('dept1')
#         print(dept1)
#         dept_id=models.departMast.objects.filter(department_name=dept1)[0].department_code
#         print(dept_id)
#         post=list(models.Post_master.objects.filter(department_code_id=dept_id).values('post_desc').distinct('post_desc'))
#         print(post)
#         context={
#             'post':post,
#         }
       
        
       
#         return JsonResponse(context, safe = False)
#     return JsonResponse({"success":False}, status=400)


# def getpost_bydept(request):
#     if request.method == "GET" and request.is_ajax():
#         dept = request.GET.get('dept')
#         print(dept)  
         
#         dept_id=models.departMast.objects.filter(department_name=dept)[0].department_code
#         print(dept_id)
#         post=list(models.Post_master.objects.filter(department_code_id=dept_id).values('post_desc').distinct('post_desc'))
#         print(post)
#         l=[]
#         for i in post:
#             l.append(i['post_desc'])
#         print(l)    
#         context={
#             'post':l,
#         } 
#         return JsonResponse(context, safe = False)
#     return JsonResponse({"success":False}, status=400)



# def shop_data(request):
#     if request.method == 'POST' or request.is_ajax():
        
#         dept = request.POST.get('dept')
#         shop = request.POST.get('shop')
#         print(dept)
#         print(shop)
#         dept_id=models.departMast.objects.filter(department_name=dept)[0].department_code
#         print(dept_id)
#         count=1
#         shopcode=models.shop_section.objects.filter(department_code_id=dept_id).distinct('shop_code').count()+1
#         print(shopcode,"+++++++++")
#         c = ('%02d' % shopcode)
#         shopcode1=c

#         # for i in shopcode:
#         #     c = ('%02d' % shopcode)
#         #     shopcode1=c
#         #     count+1
#         #     print(shopcode1)
       
#         print(shopcode1)
        
#         shop_id=str(120)+str(dept_id)+str(shopcode1)
#         print(shop_id)
#         section_id=shop_id+'00'
#         print(section_id)
#         section_code=int(section_id[5:9])
        
        
#         print(section_code,'--------------__________--------------------')
#         models.shop_section.objects.create(department_code_id=dept_id,shop_code=shop,shop_id=shop_id,section_id=section_id,rly_unit_code=120,section_code=section_code)
#         messages.success(request,'Data saved successfully')
        
            
#     return JsonResponse({'saved':'save'})

def inspection_doneby_list(request):
    try:
        daterangeselect=request.GET.get('data3')
        empnox = models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=request.user) | Q(official_email_ID=request.user.guest_email) | Q(official_email_ID=request.user.email), empno__isnull=False)
        
        if empnox:
            empno = empnox[0].designation_code
            desig = empnox[0].designation
            rly=request.POST.getlist('zone')
            div=request.POST.getlist('division')
            dept=request.POST.getlist('department')
            loc=request.POST.getlist('location')
            
            list3=models.railwayLocationMaster.objects.filter(location_type_desc__in=['DIVISION','WORKSHOP']).values('location_code', 'location_type').order_by('location_code')
            list4=[]
            for i in list3:
                list4.append({'location_code': i['location_code'], 'location_type': i['location_type']})
            list1=models.railwayLocationMaster.objects.filter(location_type_desc__in=['RAILWAY BOARD', 'PRODUCTION UNIT', 'HEAD QUATER','OFFICE', 'PSU', 'PRODUCTION UNIT', 'INSTITUTE']).values('location_code').order_by('location_code')
            list2=[]
            for i in list1:
                list2.append(i['location_code'])
                
            list5=list(models.departMast.objects.all().values('department_name')) 
            item=[] 
            #PHASE 2
            
            data = m2.einspection_details.objects.filter(~Q(status=0),designation_id=empno,instypeid__isnull=False).all().order_by('-einspno')
            
            try: 
                
                # if len(rly) != 0 or len(dept) !=0 or len(div)!=0 or len(loc)!=0:
                #     print('rly', rly)
                #     loca = m1.Insp_multi_location.objects.filter(Q(item__in=rly)|Q(item__in=div)|Q(item__in=dept)|Q(item__in=loc), inspection_no__status_flag=1, inspection_no__inspection_officer=empno ).values_list('inspection_no', flat=True)
                #     print('!!!!!!!!!!', loca)
                #     mydata=list(m1.Inspection_details.objects.filter(inspection_no__in=loca).values().order_by('-inspection_no'))
                    
                #     for i in mydata:
                #         location = list(m1.Insp_multi_location.objects.filter(inspection_no=i['inspection_no']).values())
                #         insp = m1.Marked_Officers.objects.filter(item_no__inspection_no=i['inspection_no'])
                #         over_all = insp.count()
                #         remaning = insp.filter(status_flag=3).count()
                #         if over_all != 0:
                #             persentage  = (remaning/over_all)*100
                #             persentage = round(persentage)
                #         else:
                #             persentage = 0
                #         print(location)
                #         i.update({'location_item': location, 'persentage': persentage})
                #     print("########")
                    
                # else:


                if daterangeselect not in ['0-3','0-6','0-12','tofrom']:
                    mydata=list(m1.Inspection_details.objects.filter(~Q(status_flag=0), inspection_officer=empno).values().order_by('-inspection_no')) 
                else:
                    from dateutil.relativedelta import relativedelta
                    if daterangeselect=='0-3':
                        now = datetime.today()
                        six = now
                        prev = now - relativedelta(months=3)
                        prev = prev.date()
                    elif daterangeselect=='0-6':
                        now = datetime.today()
                        six = now
                        prev = now - relativedelta(months=6)
                        prev = prev.date()
                    elif daterangeselect=='0-12':
                        now = datetime.today()
                        six = now
                        prev = now - relativedelta(months=12)
                        prev = prev.date()
                    elif daterangeselect=='tofrom':
                        daterange=request.GET.get('daterange')
                        daterange1=daterange.split('-')
                        date1=daterange1[0].split('/')
                        date2=daterange1[1].split('/')
                        prev='20'+date1[2].strip()+'-'+date1[1].strip()+'-'+date1[0].strip()
                        six='20'+date2[2].strip()+'-'+date2[1].strip()+'-'+date2[0].strip()
                    mydata=list(m1.Inspection_details.objects.filter(~Q(status_flag=0), inspection_officer=empno,inspected_on__gte=prev,inspected_on__lte=six).values().order_by('-inspection_no')) 

                # print(mydata)
                count=len(data)
                for i in mydata:
                    count+=1
                    i['sr_no']=count
                    location = list(m1.Insp_multi_location.objects.filter(inspection_no=i['inspection_no']).values())
                    insp = m1.Marked_Officers.objects.filter(item_no__inspection_no=i['inspection_no'])
                    over_all = insp.count()
                    remaning = insp.filter(status_flag=3).count()
                    #print(over_all, remaning)
                    if over_all != 0:
                        persentage  = (remaning/over_all)*100
                        persentage = round(persentage)
                    else:
                        persentage = 0

                    #print(location)
                    i.update({'location_item': location, 'persentage': persentage})
                # print('++++++++++++++', mydata)
          
            except Exception as e:
                print("e==",e)  

            
            
            context={
                'Zone':list2 ,
                'division':list4,
                'department':list5,
                'mydata':mydata,
                'item':item,
                'desig': desig,
                'phase2':data
            }
            
            
            return render(request,"inspection_doneby_list.html",context)
        else:
            # messages.error(request, 'You are not authorize to draft inspection. Please contact to admin')
            return render(request,"inspection_doneby_list.html")
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="inspection_doneby_list",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})

# def getSearchValue_ajax(request):
#     try:
#         if request.method == 'POST' and request.is_ajax():
            
            
#             rly=json.loads(request.POST.get('zone1'))
#             div=json.loads(request.POST.get('division1'))

#             dept=json.loads(request.POST.get('department1'))
#             loc=json.loads(request.POST.get('location1'))
            
#             dates = request.POST.get('date_range')
#             #print(rly, div, dept, loc, dates, '==================')
#             empnox = models.Level_Desig.objects.exclude(delete_flag=True).filter(Q(official_email_ID=request.user) | Q(official_email_ID=request.user.email), empno__isnull=False)
        
#             if empnox:
#                 empno = empnox[0].designation_code
#                 desig = empnox[0].designation

#             if dates:
#                 sp_date = dates.split('-')
#                 start  = datetime.strptime(sp_date[0].strip(),"%d/%m/%y").strftime("%Y-%m-%d")
#                 end  = datetime.strptime(sp_date[1].strip(),"%d/%m/%y").strftime("%Y-%m-%d")

#             if len(rly) !=0 and len(div) == 0 and len(dates) ==0:
#                 #print('1')
#                 loca = m1.Insp_multi_location.objects.filter(item__in=rly, type='HQ', inspection_no__status_flag=1, inspection_no__inspection_officer=empno).values_list('inspection_no', flat=True)
#             elif len(rly) ==0 and len(div) != 0 and len(dates) ==0:
#                 #print('2')
#                 loca = m1.Insp_multi_location.objects.filter(item__in=div, type='DIV', inspection_no__status_flag=1, inspection_no__inspection_officer=empno).values_list('inspection_no', flat=True)
#             elif len(rly) ==0 and len(div) == 0 and len(dates) !=0:
#                 #print('3')
#                 loca = m1.Insp_multi_location.objects.filter(inspection_no__inspected_on__gte=start , inspection_no__inspected_on__lte=end, inspection_no__status_flag=1, inspection_no__inspection_officer=empno).values_list('inspection_no', flat=True)
#             elif len(rly) !=0 and len(div) != 0 and len(dates) ==0:
#                 #print('4')
#                 loca = m1.Insp_multi_location.objects.filter(item__in=div, type='DIV', inspection_no__status_flag=1, inspection_no__inspection_officer=empno).values_list('inspection_no', flat=True)
#             elif len(rly) ==0 and len(div) != 0 and len(dates) !=0:
#                 #print('5')
#                 loca = m1.Insp_multi_location.objects.filter(item__in=div, type='DIV', inspection_no__inspected_on__gte=start , inspection_no__inspected_on__lte=end, inspection_no__status_flag=1, inspection_no__inspection_officer=empno).values_list('inspection_no', flat=True)
#             elif len(rly) !=0 and len(div) == 0 and len(dates) !=0:
#                 #print('6')
#                 loca = m1.Insp_multi_location.objects.filter(item__in=rly, type='HQ', inspection_no__inspected_on__gte=start , inspection_no__inspected_on__lte=end, inspection_no__status_flag=1, inspection_no__inspection_officer=empno).values_list('inspection_no', flat=True)
#             elif len(rly) ==0 and len(div) == 0 and len(dates) ==0:
#                 #print('7')
#                 loca = m1.Insp_multi_location.objects.filter(inspection_no__status_flag=1, inspection_no__inspection_officer=empno).values_list('inspection_no', flat=True)
#             elif len(rly) !=0 and len(div) != 0 and len(dates) !=0:
#                 #print('7')
#                 loca = m1.Insp_multi_location.objects.filter(item__in=div, type='DIV', inspection_no__inspected_on__gte=start , inspection_no__inspected_on__lte=end, inspection_no__status_flag=1, inspection_no__inspection_officer=empno).values_list('inspection_no', flat=True)

#             # if dates:
#             #     sp_date = dates.split('-')
#             #     start  = datetime.strptime(sp_date[0].strip(),"%d/%m/%Y").strftime("%Y-%m-%d")
#             #     end  = datetime.strptime(sp_date[1].strip(),"%d/%m/%Y").strftime("%Y-%m-%d")
#             #     loca = m1.Insp_multi_location.objects.filter(Q(item__in=rly)|Q(item__in=div)|Q(item__in=dept)|Q(item__in=loc), inspection_no__inspected_on__gte=start , inspection_no__inspected_on__lte=end, inspection_no__status_flag=1, inspection_no__inspection_officer=empno).values_list('inspection_no', flat=True)
#             # else:
#             #     loca = m1.Insp_multi_location.objects.filter((Q(item__in=rly)|Q(item__in=div)|Q(item__in=dept)|Q(item__in=loc)) & Q(inspection_no__status_flag=1, inspection_no__inspection_officer=empno)).values_list('inspection_no', flat=True)
#             # # print('!!!!!!!!!!', loca)

#             mydata=list(m1.Inspection_details.objects.filter(inspection_no__in=loca).values().order_by('-inspection_no'))
#             # print(mydata, 'mydata', len(mydata))
#             for i in mydata:
#                 location = list(m1.Insp_multi_location.objects.filter(inspection_no=i['inspection_no']).values())
#                 # print(location)
#                 insp = m1.Marked_Officers.objects.filter(item_no__inspection_no=i['inspection_no'])
#                 over_all = insp.count()
#                 remaning = insp.filter(status_flag=3).count()
#                 if over_all != 0:
#                     persentage  = (remaning/over_all)*100
#                     persentage = round(persentage)
#                 else:
#                     persentage = 0

#                 i.update({'location_item': location, 'persentage': persentage})
            
#             # print(mydata)
#             return JsonResponse({'mydata':mydata}, safe=False)

#         return JsonResponse({'success': False}, status=400)
#     except Exception as e: 
#         try:
#             m1.error_Table.objects.create(fun_name="getSearchValue_ajax",user_id=request.user,err_details=str(e))
#         except:
#             print("Internal Error!!!")
#         return render(request, "errorspage.html", {})


def getSearchValue_ajax(request):
    try:
        if request.method == 'POST' and request.is_ajax():
            
            rly=json.loads(request.POST.get('zone1'))
            div=json.loads(request.POST.get('division1'))
            print(rly,div)

            dept=json.loads(request.POST.get('department1'))
            loc=json.loads(request.POST.get('location1'))
            
            dates = request.POST.get('date_range')
            #print(rly, div, dept, loc, dates, '==================')
            empnox = models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=request.user)| Q(official_email_ID=request.user.guest_email) | Q(official_email_ID=request.user.email), empno__isnull=False)
        
            if empnox:
                empno = empnox[0].designation_code
                desig = empnox[0].designation

            if dates:
                sp_date = dates.split('-')
                start  = datetime.strptime(sp_date[0].strip(),"%d/%m/%y").strftime("%Y-%m-%d")
                end  = datetime.strptime(sp_date[1].strip(),"%d/%m/%y").strftime("%Y-%m-%d")

            if len(rly) !=0 and len(div) == 0 and len(dates) ==0:
                #print('1')
                loca = m1.Insp_multi_location.objects.filter(~Q(inspection_no__status_flag=0),item__in=rly, type='HQ', inspection_no__inspection_officer=empno).values_list('inspection_no', flat=True)
                print('loca',loca)
            elif len(rly) ==0 and len(div) != 0 and len(dates) ==0:
                #print('2')
                loca = m1.Insp_multi_location.objects.filter(~Q(inspection_no__status_flag=0),item__in=div, type='DIV' , inspection_no__inspection_officer=empno).values_list('inspection_no', flat=True)
            elif len(rly) ==0 and len(div) == 0 and len(dates) !=0:
                #print('3')
                loca = m1.Insp_multi_location.objects.filter(~Q(inspection_no__status_flag=0), inspection_no__inspected_on__gte=start , inspection_no__inspected_on__lte=end, inspection_no__inspection_officer=empno).values_list('inspection_no', flat=True)
            elif len(rly) !=0 and len(div) != 0 and len(dates) ==0:
                #print('4')
                loca = m1.Insp_multi_location.objects.filter(~Q(inspection_no__status_flag=0), item__in=div, type='DIV', inspection_no__inspection_officer=empno).values_list('inspection_no', flat=True)
            elif len(rly) ==0 and len(div) != 0 and len(dates) !=0:
                #print('5')
                loca = m1.Insp_multi_location.objects.filter(~Q(inspection_no__status_flag=0),item__in=div, type='DIV', inspection_no__inspected_on__gte=start , inspection_no__inspected_on__lte=end,  inspection_no__inspection_officer=empno).values_list('inspection_no', flat=True)
            elif len(rly) !=0 and len(div) == 0 and len(dates) !=0:
                #print('6')
                loca = m1.Insp_multi_location.objects.filter(~Q(inspection_no__status_flag=0),item__in=rly, type='HQ', inspection_no__inspected_on__gte=start , inspection_no__inspected_on__lte=end,  inspection_no__inspection_officer=empno).values_list('inspection_no', flat=True)
            elif len(rly) ==0 and len(div) == 0 and len(dates) ==0:
                #print('7')
                loca = m1.Insp_multi_location.objects.filter(~Q(inspection_no__status_flag=0), inspection_no__inspection_officer=empno).values_list('inspection_no', flat=True)
                print('khaali', loca)
            elif len(rly) !=0 and len(div) != 0 and len(dates) !=0:
                #print('7')
                loca = m1.Insp_multi_location.objects.filter(~Q(inspection_no__status_flag=0),item__in=div, type='DIV', inspection_no__inspected_on__gte=start , inspection_no__inspected_on__lte=end,  inspection_no__inspection_officer=empno).values_list('inspection_no', flat=True)

            # if dates:
            #     sp_date = dates.split('-')
            #     start  = datetime.strptime(sp_date[0].strip(),"%d/%m/%Y").strftime("%Y-%m-%d")
            #     end  = datetime.strptime(sp_date[1].strip(),"%d/%m/%Y").strftime("%Y-%m-%d")
            #     loca = m1.Insp_multi_location.objects.filter(Q(item__in=rly)|Q(item__in=div)|Q(item__in=dept)|Q(item__in=loc), inspection_no__inspected_on__gte=start , inspection_no__inspected_on__lte=end, inspection_no__status_flag=1, inspection_no__inspection_officer=empno).values_list('inspection_no', flat=True)
            # else:
            #     loca = m1.Insp_multi_location.objects.filter((Q(item__in=rly)|Q(item__in=div)|Q(item__in=dept)|Q(item__in=loc)) & Q(inspection_no__status_flag=1, inspection_no__inspection_officer=empno)).values_list('inspection_no', flat=True)
            # # print('!!!!!!!!!!', loca)

            mydata=list(m1.Inspection_details.objects.filter(inspection_no__in=loca).values().order_by('-inspection_no'))
            # print(mydata, 'mydata', len(mydata))
            for i in mydata:
                location = list(m1.Insp_multi_location.objects.filter(inspection_no=i['inspection_no']).values())
                # print(location)
                insp = m1.Marked_Officers.objects.filter(item_no__inspection_no=i['inspection_no'])
                over_all = insp.count()
                remaning = insp.filter(status_flag=3).count()
                if over_all != 0:
                    persentage  = (remaning/over_all)*100
                    persentage = round(persentage)
                else:
                    persentage = 0

                i.update({'location_item': location, 'persentage': persentage})

            rly_list=list(models.railwayLocationMaster.objects.filter(location_code__in=rly,location_type='ZR').values_list('rly_unit_code',flat=True))
            div_list=list(models.railwayLocationMaster.objects.filter(location_code__in=div).values_list('rly_unit_code',flat=True))
            
            phase2=phase2_filter(request,'completed',rly_list,div_list,dates,'')
            
            
            # print(mydata)
            return JsonResponse({'mydata':mydata,'phase2':phase2}, safe=False)

        return JsonResponse({'success': False}, status=400)
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="getSearchValue_ajax",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})


def getSearchValuePending_ajax(request):
    # try:
        if request.method == 'POST' and request.is_ajax():
            
            rly=json.loads(request.POST.get('zone1'))
            div=json.loads(request.POST.get('division1'))

            dept=json.loads(request.POST.get('department1'))
            loc=json.loads(request.POST.get('location1'))
            
            dates = request.POST.get('date_range')
            print(rly, div, dept, loc, dates, '==================')
            empnox = models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=request.user)| Q(official_email_ID=request.user.guest_email) | Q(official_email_ID=request.user.email), empno__isnull=False)
        
            if empnox:
                empno = empnox[0].designation_code
                desig = empnox[0].designation

            if dates:
                sp_date = dates.split('-')
                start  = datetime.strptime(sp_date[0].strip(),"%d/%m/%y").strftime("%Y-%m-%d")
                end  = datetime.strptime(sp_date[1].strip(),"%d/%m/%y").strftime("%Y-%m-%d")

            if len(rly) !=0 and len(div) == 0 and len(dates) ==0:
                #print('1')
                loca = m1.Insp_multi_location.objects.filter(Q(inspection_no__status_flag=1) | Q(inspection_no__status_flag=2) ,item__in=rly, type='HQ', inspection_no__inspection_officer=empno).values_list('inspection_no', flat=True)
                print('loca',loca)
            elif len(rly) ==0 and len(div) != 0 and len(dates) ==0:
                #print('2')
                loca = m1.Insp_multi_location.objects.filter(Q(inspection_no__status_flag=1) | Q(inspection_no__status_flag=2),item__in=div, type='DIV' , inspection_no__inspection_officer=empno).values_list('inspection_no', flat=True)
            elif len(rly) ==0 and len(div) == 0 and len(dates) !=0:
                #print('3')
                loca = m1.Insp_multi_location.objects.filter(Q(inspection_no__status_flag=1) | Q(inspection_no__status_flag=2), inspection_no__inspected_on__gte=start , inspection_no__inspected_on__lte=end, inspection_no__inspection_officer=empno).values_list('inspection_no', flat=True)
            elif len(rly) !=0 and len(div) != 0 and len(dates) ==0:
                #print('4')
                loca = m1.Insp_multi_location.objects.filter(Q(inspection_no__status_flag=1) | Q(inspection_no__status_flag=2), item__in=div, type='DIV', inspection_no__inspection_officer=empno).values_list('inspection_no', flat=True)
            elif len(rly) ==0 and len(div) != 0 and len(dates) !=0:
                #print('5')
                loca = m1.Insp_multi_location.objects.filter(Q(inspection_no__status_flag=1) | Q(inspection_no__status_flag=2),item__in=div, type='DIV', inspection_no__inspected_on__gte=start , inspection_no__inspected_on__lte=end,  inspection_no__inspection_officer=empno).values_list('inspection_no', flat=True)
            elif len(rly) !=0 and len(div) == 0 and len(dates) !=0:
                #print('6')
                loca = m1.Insp_multi_location.objects.filter(Q(inspection_no__status_flag=1) | Q(inspection_no__status_flag=2),item__in=rly, type='HQ', inspection_no__inspected_on__gte=start , inspection_no__inspected_on__lte=end,  inspection_no__inspection_officer=empno).values_list('inspection_no', flat=True)
            elif len(rly) ==0 and len(div) == 0 and len(dates) ==0:
                #print('7')
                loca = m1.Insp_multi_location.objects.filter(Q(inspection_no__status_flag=1) | Q(inspection_no__status_flag=2), inspection_no__inspection_officer=empno).values_list('inspection_no', flat=True)
                print('khaali', loca)
            elif len(rly) !=0 and len(div) != 0 and len(dates) !=0:
                #print('7')
                loca = m1.Insp_multi_location.objects.filter(Q(inspection_no__status_flag=1) | Q(inspection_no__status_flag=2),item__in=div, type='DIV', inspection_no__inspected_on__gte=start , inspection_no__inspected_on__lte=end,  inspection_no__inspection_officer=empno).values_list('inspection_no', flat=True)

            # if dates:
            #     sp_date = dates.split('-')
            #     start  = datetime.strptime(sp_date[0].strip(),"%d/%m/%Y").strftime("%Y-%m-%d")
            #     end  = datetime.strptime(sp_date[1].strip(),"%d/%m/%Y").strftime("%Y-%m-%d")
            #     loca = m1.Insp_multi_location.objects.filter(Q(item__in=rly)|Q(item__in=div)|Q(item__in=dept)|Q(item__in=loc), inspection_no__inspected_on__gte=start , inspection_no__inspected_on__lte=end, inspection_no__status_flag=1, inspection_no__inspection_officer=empno).values_list('inspection_no', flat=True)
            # else:
            #     loca = m1.Insp_multi_location.objects.filter((Q(item__in=rly)|Q(item__in=div)|Q(item__in=dept)|Q(item__in=loc)) & Q(inspection_no__status_flag=1, inspection_no__inspection_officer=empno)).values_list('inspection_no', flat=True)
            # # print('!!!!!!!!!!', loca)

            mydata=list(m1.Inspection_details.objects.filter(inspection_no__in=loca).values().order_by('-inspection_no'))
            # print(mydata, 'mydata', len(mydata))
            for i in mydata:
                location = list(m1.Insp_multi_location.objects.filter(inspection_no=i['inspection_no']).values())
                # print(location)
                insp = m1.Marked_Officers.objects.filter(item_no__inspection_no=i['inspection_no'])
                over_all = insp.count()
                remaning = insp.filter(status_flag=3).count()
                if over_all != 0:
                    persentage  = (remaning/over_all)*100
                    persentage = round(persentage)
                else:
                    persentage = 0

                i.update({'location_item': location, 'persentage': persentage})

            rly_list=list(models.railwayLocationMaster.objects.filter(location_code__in=rly,location_type='ZR').values_list('rly_unit_code',flat=True))
            div_list=list(models.railwayLocationMaster.objects.filter(location_code__in=div).values_list('rly_unit_code',flat=True))
            phase2=phase2_filter(request,'pending_compliances',rly_list,div_list,dates,'')
            
            # print(mydata)
            return JsonResponse({'mydata':mydata,'phase2':phase2}, safe=False)

        return JsonResponse({'success': False}, status=400)
    # except Exception as e: 
    #     try:
    #         m1.error_Table.objects.create(fun_name="getSearchValuePending_ajax",user_id=request.user,err_details=str(e))
    #     except:
    #         print("Internal Error!!!")
    #     return render(request, "errorspage.html", {})


def getSearchValueClose_ajax(request):
    try:
        if request.method == 'POST' and request.is_ajax():
            
            
            rly=json.loads(request.POST.get('zone1'))
            div=json.loads(request.POST.get('division1'))
            dept=json.loads(request.POST.get('department1'))
            loc=json.loads(request.POST.get('location1'))
            
            dates = request.POST.get('date_range')
            #print(rly, div, dept, loc, dates, '==================')
            empnox = models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=request.user)| Q(official_email_ID=request.user.guest_email) | Q(official_email_ID=request.user.email), empno__isnull=False)
        
            if empnox:
                empno = empnox[0].designation_code
                desig = empnox[0].designation
            
            if dates:
                sp_date = dates.split('-')
                start  = datetime.strptime(sp_date[0].strip(),"%d/%m/%y").strftime("%Y-%m-%d")
                end  = datetime.strptime(sp_date[1].strip(),"%d/%m/%y").strftime("%Y-%m-%d")

            if len(rly) !=0 and len(div) == 0 and len(dates) ==0:
                #print('1')
                loca = m1.Insp_multi_location.objects.filter(item__in=rly, type='HQ', inspection_no__status_flag=4, inspection_no__inspection_officer=empno).values_list('inspection_no', flat=True)
            elif len(rly) ==0 and len(div) != 0 and len(dates) ==0:
                #print('2')
                loca = m1.Insp_multi_location.objects.filter(item__in=div, type='DIV', inspection_no__status_flag=4, inspection_no__inspection_officer=empno).values_list('inspection_no', flat=True)
            elif len(rly) ==0 and len(div) == 0 and len(dates) !=0:
                #print('3')
                loca = m1.Insp_multi_location.objects.filter(inspection_no__inspected_on__gte=start , inspection_no__inspected_on__lte=end, inspection_no__status_flag=4, inspection_no__inspection_officer=empno).values_list('inspection_no', flat=True)
            elif len(rly) !=0 and len(div) != 0 and len(dates) ==0:
                #print('4')
                loca = m1.Insp_multi_location.objects.filter(item__in=div, type='DIV', inspection_no__status_flag=4, inspection_no__inspection_officer=empno).values_list('inspection_no', flat=True)
            elif len(rly) ==0 and len(div) != 0 and len(dates) !=0:
                #print('5')
                loca = m1.Insp_multi_location.objects.filter(item__in=div, type='DIV', inspection_no__inspected_on__gte=start , inspection_no__inspected_on__lte=end, inspection_no__status_flag=4, inspection_no__inspection_officer=empno).values_list('inspection_no', flat=True)
            elif len(rly) !=0 and len(div) == 0 and len(dates) !=0:
                #print('6')
                loca = m1.Insp_multi_location.objects.filter(item__in=rly, type='HQ', inspection_no__inspected_on__gte=start , inspection_no__inspected_on__lte=end, inspection_no__status_flag=4, inspection_no__inspection_officer=empno).values_list('inspection_no', flat=True)
            elif len(rly) ==0 and len(div) == 0 and len(dates) ==0:
                #print('7')
                loca = m1.Insp_multi_location.objects.filter(inspection_no__status_flag=4, inspection_no__inspection_officer=empno).values_list('inspection_no', flat=True)
            elif len(rly) !=0 and len(div) != 0 and len(dates) !=0:
                #print('7')
                loca = m1.Insp_multi_location.objects.filter(item__in=div, type='DIV', inspection_no__inspected_on__gte=start , inspection_no__inspected_on__lte=end, inspection_no__status_flag=4, inspection_no__inspection_officer=empno).values_list('inspection_no', flat=True)

            
            # if dates:
            #     sp_date = dates.split('-')
            #     print(sp_date, '00000')
            #     start  = datetime.strptime(sp_date[0].strip(),"%d/%m/%Y").strftime("%Y-%m-%d")
            #     end  = datetime.strptime(sp_date[1].strip(),"%d/%m/%Y").strftime("%Y-%m-%d")
            #     loca = m1.Insp_multi_location.objects.filter((Q(item__in=rly)|Q(item__in=div)|Q(item__in=dept)|Q(item__in=loc) & Q(inspection_no__created_on__gte=start , inspection_no__created_on__lte=end)) & Q(inspection_no__status_flag=4, inspection_no__inspection_officer=empno)).values_list('inspection_no', flat=True)
            # else:
            #     loca = m1.Insp_multi_location.objects.filter(Q(item__in=rly)|Q(item__in=div)|Q(item__in=dept)|Q(item__in=loc), inspection_no__status_flag=4, inspection_no__inspection_officer=empno).values_list('inspection_no', flat=True)

    
            mydata=list(m1.Inspection_details.objects.filter(inspection_no__in=loca, status_flag=4).values().order_by('-inspection_no'))
            #print(mydata, 'mydata', len(mydata))
            for i in mydata:
                location = list(m1.Insp_multi_location.objects.filter(inspection_no=i['inspection_no']).values())
                # print(location)
                insp = m1.Marked_Officers.objects.filter(item_no__inspection_no=i['inspection_no'])
                over_all = insp.count()
                remaning = insp.filter(status_flag=3).count()
                #print(over_all, '====', remaning)
                if over_all != 0:
                    persentage  = (remaning/over_all)*100
                    persentage = round(persentage)
                else:
                    persentage = 0
                i.update({'location_item': location, 'persentage': persentage})
            
            #print(mydata)
            mydata1=[]
            for i in range(len(mydata)):
                if mydata[i]['persentage'] == 100:
                    mydata1.append(mydata[i])
            rly_list=list(models.railwayLocationMaster.objects.filter(location_code__in=rly,location_type='ZR').values_list('rly_unit_code',flat=True))
            div_list=list(models.railwayLocationMaster.objects.filter(location_code__in=div).values_list('rly_unit_code',flat=True))
            phase2=phase2_filter(request,'closed_compliances',rly_list,div_list,dates,'')
            return JsonResponse({'mydata':mydata1,'phase2':phase2}, safe=False)

        return JsonResponse({'success': False}, status=400)
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="getSearchValueClose_ajax",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})


def getSearchValueRecived_ajax(request):
    try:
        if request.method == 'POST' and request.is_ajax():
            
            
            rly=json.loads(request.POST.get('zone1'))
            div=json.loads(request.POST.get('division1'))
            dept=json.loads(request.POST.get('department1'))
            loc=json.loads(request.POST.get('location1'))
            
            dates = request.POST.get('date_range')
            #print(rly, div, dept, loc, dates, '==================')
            empnox = models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=request.user)| Q(official_email_ID=request.user.guest_email) | Q(official_email_ID=request.user.email), empno__isnull=False)
        
            if empnox:
                empno = empnox[0].designation_code
                desig = empnox[0].designation
            end = ''
            start = ''
    
            if dates:
                sp_date = dates.split('-')
                start  = datetime.strptime(sp_date[0].strip(),"%d/%m/%Y").strftime("%Y-%m-%d")
                end  = datetime.strptime(sp_date[1].strip(),"%d/%m/%Y").strftime("%Y-%m-%d")

                loca = m1.Insp_multi_location.objects.filter(Q(item__in=rly)|Q(item__in=div)|Q(item__in=dept)|Q(item__in=loc), inspection_no__created_on__gte=start , inspection_no__created_on__lte=end, inspection_no__inspection_officer=empno).values_list('inspection_no', flat=True)
                #print('787878778')
            else:
                loca = m1.Insp_multi_location.objects.filter((Q(item__in=rly)|Q(item__in=div)|Q(item__in=dept)|Q(item__in=loc)) & Q(inspection_no__inspection_officer=empno)).values_list('inspection_no', flat=True)
                #print('0000000001111')
            obj1 = m1.Marked_Officers.objects.filter(status_flag=3,item_no__inspection_no__inspection_officer=empno, item_no__inspection_no__in=loca).values('item_no__inspection_no').distinct()
            
            mydata1 =[]
            for i in obj1:
                insp = i['item_no__inspection_no']
                mydata = list(m1.Inspection_details.objects.filter(inspection_no=insp).values())
                location = list(m1.Insp_multi_location.objects.filter(inspection_no=insp).values())
                for j in mydata:
                    j.update({'location_item': location})

                mydata1.extend(mydata)

            return JsonResponse({'mydata':mydata1}, safe=False)

        return JsonResponse({'success': False}, status=400)
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="getSearchValueRecived_ajax",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})


#reverted compliance 
def getSearchValueCorrigendum_ajax(request):
    try:
        if request.method == 'POST' and request.is_ajax():
            
            
            rly=json.loads(request.POST.get('zone1'))
            div=json.loads(request.POST.get('division1'))
            dept=json.loads(request.POST.get('department1'))
            loc=json.loads(request.POST.get('location1'))
            
            dates = request.POST.get('date_range')
            # print(rly, div, dept, loc, dates, '==================')
            empnox = models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=request.user)| Q(official_email_ID=request.user.guest_email) | Q(official_email_ID=request.user.email), empno__isnull=False)
        
            if empnox:
                empno = empnox[0].designation_code
                desig = empnox[0].designation
            end = ''
            start = ''
            # if dates:
            #     sp_date = dates.split('-')
            #     print(sp_date, '00000')
            #     start  = datetime.strptime(sp_date[0].strip(),"%d/%m/%Y").strftime("%Y-%m-%d")
                
            #     end  = datetime.strptime(sp_date[1].strip(),"%d/%m/%Y").strftime("%Y-%m-%d")
            #     loca = m1.Insp_multi_location.objects.filter((Q(item__in=rly)|Q(item__in=div)|Q(item__in=dept)|Q(item__in=loc) & Q(inspection_no__created_on__gte=start , inspection_no__created_on__lte=end)) & Q( inspection_no__inspection_officer=empno)).values_list('inspection_no', flat=True)
            # else:
            #     loca = m1.Insp_multi_location.objects.filter(Q(item__in=rly)|Q(item__in=div)|Q(item__in=dept)|Q(item__in=loc), inspection_no__inspection_officer=empno).values_list('inspection_no', flat=True)
            if dates:
                sp_date = dates.split('-')
                start  = datetime.strptime(sp_date[0].strip(),"%d/%m/%y").strftime("%Y-%m-%d")
                end  = datetime.strptime(sp_date[1].strip(),"%d/%m/%y").strftime("%Y-%m-%d")

            if len(rly) !=0 and len(div) == 0 and len(dates) ==0:
                #print('1')
                loca = m1.Insp_multi_location.objects.filter(item__in=rly, type='HQ', inspection_no__inspection_officer=empno).values_list('inspection_no', flat=True)
            elif len(rly) ==0 and len(div) != 0 and len(dates) ==0:
                #print('2')
                loca = m1.Insp_multi_location.objects.filter(item__in=div, type='DIV', inspection_no__inspection_officer=empno).values_list('inspection_no', flat=True)
            elif len(rly) ==0 and len(div) == 0 and len(dates) !=0:
                #print('3')
                loca = m1.Insp_multi_location.objects.filter(inspection_no__inspected_on__gte=start , inspection_no__inspected_on__lte=end, inspection_no__inspection_officer=empno).values_list('inspection_no', flat=True)
            elif len(rly) !=0 and len(div) != 0 and len(dates) ==0:
                #print('4')
                loca = m1.Insp_multi_location.objects.filter(item__in=div, type='DIV', inspection_no__inspection_officer=empno).values_list('inspection_no', flat=True)
            elif len(rly) ==0 and len(div) != 0 and len(dates) !=0:
                #print('5')
                loca = m1.Insp_multi_location.objects.filter(item__in=div, type='DIV', inspection_no__inspected_on__gte=start , inspection_no__inspected_on__lte=end,  inspection_no__inspection_officer=empno).values_list('inspection_no', flat=True)
            elif len(rly) !=0 and len(div) == 0 and len(dates) !=0:
                #print('6')
                loca = m1.Insp_multi_location.objects.filter(item__in=rly, type='HQ', inspection_no__inspected_on__gte=start , inspection_no__inspected_on__lte=end,  inspection_no__inspection_officer=empno).values_list('inspection_no', flat=True)
            elif len(rly) ==0 and len(div) == 0 and len(dates) ==0:
                #print('7')
                loca = m1.Insp_multi_location.objects.filter( inspection_no__inspection_officer=empno).values_list('inspection_no', flat=True)
            elif len(rly) !=0 and len(div) != 0 and len(dates) !=0:
                #print('7')
                loca = m1.Insp_multi_location.objects.filter(item__in=div, type='DIV', inspection_no__inspected_on__gte=start , inspection_no__inspected_on__lte=end, inspection_no__inspection_officer=empno).values_list('inspection_no', flat=True)


    
            obj1 = m1.Marked_Officers.objects.filter(status_flag=4,item_no__inspection_no__inspection_officer=empno, item_no__inspection_no__in=loca).values('item_no__inspection_no').distinct()
            
            mydata1 =[]
            for i in obj1:
                insp = i['item_no__inspection_no']
                mydata = list(m1.Inspection_details.objects.filter(inspection_no=insp).values())
                location = list(m1.Insp_multi_location.objects.filter(inspection_no=insp).values())
                for j in mydata:
                    j.update({'location_item': location})
                
                
                
                mydata1.extend(mydata)
            #print('iiiiiiiiiiiii',  mydata1)

            rly_list=list(models.railwayLocationMaster.objects.filter(location_code__in=rly,location_type='ZR').values_list('rly_unit_code',flat=True))
            div_list=list(models.railwayLocationMaster.objects.filter(location_code__in=div).values_list('rly_unit_code',flat=True))
            
            phase2=phase2_filter(request,'reverted_compliances',rly_list,div_list,dates,'')

                
            return JsonResponse({'mydata':mydata1,'phase2':phase2}, safe=False)

        return JsonResponse({'success': False}, status=400)
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="getSearchValueCorrigendum_ajax",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})

def created_checklist(request):
    # try:
        color=request.GET.get('data3')
        empnox = models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=request.user)| Q(official_email_ID=request.user.guest_email) | Q(official_email_ID=request.user.email), empno__isnull=False)
        
        if empnox:
            empno = empnox[0].designation_code
            desig = empnox[0].designation


            # print('@@@@@@@@@@@@@')
            rly=request.POST.getlist('zone')
            div=request.POST.getlist('division')
            dept=request.POST.getlist('department')
            loc=request.POST.getlist('location')
            # start_date=request.POST.get('start')
            # end_date=request.POST.get('txtDate2')
            # get_designation=request.POST.get('get_designation')
            #print(rly, div, dept, loc, "~~~~~~~~~")


            #PHASE 2                                        
            pending = m2.einspection_details.objects.filter(status=1,designation_id=empno,instypeid__isnull=False).values('inspected_on','inspection_note_no','instypeid__name','inspection_title','rly_id_id__location_code','div_id_id__location_code','einspno').order_by('-einspno')
            for p in pending:
                p['total_marked']=m2.einsp_marked.objects.exclude(revert=2).filter(eitemid__einspno=p['einspno']).count()
                p['total_complied']=m2.einsp_marked.objects.exclude(revert=2).filter(eitemid__einspno=p['einspno'],status_flag=4).count()
                # p['total_forward']=m2.einsp_marked.objects.exclude(revert=2).filter(eitemid__einspno=p['einspno'],marked_to_id=das_desig,status_flag=3).count()
                # p['total_pending']=m2.einsp_marked.objects.exclude(revert=2).filter(eitemid__einspno=p['einspno'],marked_to_id=das_desig,status_flag__in=[0,1,2,3]).count()
                print(p['total_marked'])
                if p['total_marked'] == 0:
                    p['percentageCompliance'] = 0
                else:
                    p['percentageCompliance'] = int((p['total_complied']/p['total_marked'])*100)
            count=len(pending)
            
            list3=models.railwayLocationMaster.objects.filter(location_type_desc__in=['DIVISION','WORKSHOP']).values('location_code', 'location_type').order_by('location_code')
            list4=[]
            for i in list3:
                list4.append({'location_code': i['location_code'], 'location_type': i['location_type']})
            list1=models.railwayLocationMaster.objects.filter(location_type_desc__in=['RAILWAY BOARD', 'PRODUCTION UNIT', 'HEAD QUATER','OFFICE', 'PSU', 'PRODUCTION UNIT', 'INSTITUTE']).values('location_code').order_by('location_code')
            list2=[]
            for i in list1:
                # print(i['location_code'],'_________')
                list2.append(i['location_code'])
                
            list5=list(models.departMast.objects.all().values('department_name')) 
            item=[] 
            # print(list5)
            
            try: 
                
                if len(rly) != 0 or len(dept) !=0 or len(div)!=0 or len(loc)!=0:
                    #print('rly', rly)
                    loca = m1.Insp_multi_location.objects.filter(Q(item__in=rly)|Q(item__in=div)|Q(item__in=dept)|Q(item__in=loc), inspection_no__status_flag=1, inspection_no__inspection_officer=empno ).values_list('inspection_no', flat=True)
                    # print('!!!!!!!!!!', loca)
                    # mydata=list(m1.Inspection_details.objects.filter(inspection_no__in=loca).values().order_by('-inspection_no'))
                    if color=='0-3':
                        now = datetime.today()
                        prev = now - timedelta(days=90)
                        mydata=list(m1.Inspection_details.objects.filter(inspection_no__in=loca,inspected_on__gte=prev).values().order_by('-inspection_no'))
                    elif  color=='3-6':
                        now = datetime.today()
                        prev = now - timedelta(days=90)		     
                        six=now - timedelta(days=180)
                        mydata=list(m1.Inspection_details.objects.filter(inspection_no__in=loca,inspected_on__gte=prev,inspected_on__lte=six).values().order_by('-inspection_no'))
                    elif color=='>6':
                        now = datetime.today()
                        prev = now - timedelta(days=180)
                        mydata=list(m1.Inspection_details.objects.filter(inspection_no__in=loca,inspected_on__lte=prev).values().order_by('-inspection_no'))
                    elif  color=='tofrom':
                        daterange=request.GET.get('daterange')
                        daterange1=daterange.split('-')
                            
                        date1=daterange1[0].split('/')
                        date2=daterange1[1].split('/')
                        prev='20'+date1[2].strip()+'-'+date1[1].strip()+'-'+date1[0].strip()
                        six='20'+date2[2].strip()+'-'+date2[1].strip()+'-'+date2[0].strip()
                        mydata=list(m1.Inspection_details.objects.filter(inspection_no__in=loca,inspected_on__gte=prev,inspected_on__lte=six).values().order_by('-inspection_no'))
                        
                    else:
                        mydata=list(m1.Inspection_details.objects.filter(inspection_no__in=loca).values().order_by('-inspection_no'))
                    # print(mydata)
                    for i in mydata:
                        count+=1
                        i['sr_no']=count
                        location = list(m1.Insp_multi_location.objects.filter(inspection_no=i['inspection_no']).values())
                        #print(location)
                        i.update({'location_item': location})
                    # print("########")
                    
                    
                else:
                    # mydata=list(m1.Inspection_details.objects.filter(status_flag=1, inspection_officer=empno).values().order_by('-inspection_no'))
                    # print(mydata)
                    #print("######## else")
                    if color=='0-3':
                        now = datetime.today()
                        prev = now - timedelta(days=90)
                        mydata=list(m1.Inspection_details.objects.filter(Q(status_flag=1)|Q(status_flag=2), inspection_officer=empno,inspected_on__gte=prev).values().order_by('-inspection_no'))
                    elif  color=='3-6':
                        now = datetime.today()
                        prev = now - timedelta(days=90)		     
                        six=now - timedelta(days=180)
                        mydata=list(m1.Inspection_details.objects.filter(Q(status_flag=1)|Q(status_flag=2), inspection_officer=empno,inspected_on__gte=prev,inspected_on__lte=six).values().order_by('-inspection_no'))
                    elif color=='>6':
                        now = datetime.today()
                        prev = now - timedelta(days=180)
                        mydata=list(m1.Inspection_details.objects.filter(Q(status_flag=1)|Q(status_flag=2), inspection_officer=empno,inspected_on__lte=prev).values().order_by('-inspection_no'))
                    elif  color=='tofrom':
                        daterange=request.GET.get('daterange')
                        daterange1=daterange.split('-')
                            
                        date1=daterange1[0].split('/')
                        date2=daterange1[1].split('/')
                        prev='20'+date1[2].strip()+'-'+date1[1].strip()+'-'+date1[0].strip()
                        six='20'+date2[2].strip()+'-'+date2[1].strip()+'-'+date2[0].strip()
                        mydata=list(m1.Inspection_details.objects.filter(Q(status_flag=1)|Q(status_flag=2), inspection_officer=empno,inspected_on__gte=prev,inspected_on__lte=six).values().order_by('-inspection_no'))
                        
                    else:
                        mydata=list(m1.Inspection_details.objects.filter(Q(status_flag=1)|Q(status_flag=2), inspection_officer=empno).values().order_by('-inspection_no'))
                    for i in mydata:
                        count+=1
                        i['sr_no']=count
                        insp = m1.Marked_Officers.objects.filter(item_no__inspection_no=i['inspection_no'])
                        over_all = insp.count()
                        remaning = insp.filter(status_flag=3).count()
                        if over_all != 0:
                            persentage  = (remaning/over_all)*100
                            persentage = round(persentage)
                        else:
                            persentage = 0

                        location = list(m1.Insp_multi_location.objects.filter(inspection_no=i['inspection_no']).values())
                        i.update({'location_item': location, 'persentage': persentage})
                        
                        
            except Exception as e:
                print("e==",e)  
            
            context={
                'Zone':list2 ,
                'division':list4,
                'department':list5,
                'mydata':mydata,
                'item':item,
                'desig': desig,
                'phase2':pending
            }
            
            
            return render(request,"list_create_inspection_report.html",context)
        else:
            messages.error(request, 'You are not authorize to draft inspection. Please contact to admin')
            return render(request,"list_create_inspection_report.html")        
    # except Exception as e: 
    #     try:
    #         m1.error_Table.objects.create(fun_name="created_checklist",user_id=request.user,err_details=str(e))
    #     except:
    #         print("Internal Error!!!")
    #     return render(request, "errorspage.html", {})       
     
def viewInspectionsDoneReport(request, insp_id):
    try:
        ins_detail=list(m1.Inspection_details.objects.filter(inspection_no=insp_id).values())
        item_details1= list(m1.Item_details.objects.filter(inspection_no_id=insp_id).values())
        for j in item_details1:
            
            if j['type'] == 'SH':
                mark=m1.Marked_Officers.objects.filter(item_no=j['item_no']).values()
                #print('---------', j['item_no'])
                mrkoffi = {}
                desig_longdesc1 =''
                marked_officers1 = ''
                for x in mark:
                    #print('xxxxxxxxx', x['myuser_id_id'])
                    
                    marked=m1.empmast.objects.filter(myuser_id=x['myuser_id_id'])
                    #print('yyyyyyyy', marked[0].desig_longdesc)
                    desig_longdesc1 += marked[0].desig_longdesc+','
                    marked_officers1 += marked[0].empno+','
                #print('kkkkkkkkkkkkkkk', desig_longdesc1)
                mrkoffi.update({'marked_officers': marked_officers1, 'desig_longdesc': desig_longdesc1})
                
                j.update({'mrkoffi': mrkoffi})
                # print('mmmmmmmm', desig_longdesc1)
            
        ins_detail[0].update({'item_details1': item_details1})
        # print('00000000', ins_detail)
        #print('00000000', ins_detail)

        context={
            'ins_detail':ins_detail
            
            }  
            
        return render(request, 'view_inspection_done.html', context)
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="created_checklist",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {}) 


def section_data(request):
    try:
        if request.method == 'POST' or request.is_ajax():
            
            dept1 = request.POST.get('dept1')
            #print(dept1)
            sectiondept = request.POST.get('sectiondept')
            #print(sectiondept)
            sec = request.POST.get('sec')
            #print(sec)
            dept_id=models.departMast.objects.filter(department_name=dept1)[0].department_code
            #print(dept_id)
            shopcode=models.shop_section.objects.filter(department_code_id=dept_id,shop_code=sectiondept).last().section_id
            shopcode_id=models.shop_section.objects.filter(department_code_id=dept_id,shop_code=sectiondept).last().shop_id
            section_code=models.shop_section.objects.filter(department_code_id=dept_id,shop_code=sectiondept).last().section_code
            #print(shopcode)
            #shop_id=str(int(shopcode[0:-2]))+str(int(shopcode[-2:-1])+1)
            #print(shop_id,'____________________________________________________shop_id___________')
            shop_id=int(shopcode)+1
            sec_code=int(section_code)+1
            if models.shop_section.objects.filter(department_code_id=dept_id,shop_code=sectiondept).exists():

                models.shop_section.objects.filter(department_code_id=dept_id,shop_code=sectiondept).create(section_id=shop_id,section_desc=sec,shop_code=sectiondept,department_code_id=dept_id,shop_id=shopcode_id,section_code=sec_code)
                messages.success(request,'Data saved successfully')
            
                
        return JsonResponse({'saved':'save'})
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="section_data",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {}) 


def dept_data(request):
    try:
        if request.method == 'POST' or request.is_ajax():
            current_user = request.user
            emp=m1.empmast.objects.get(pk=current_user.username).values('wau')
            emp['wau']
            department = request.POST.get('department')
            now = datetime.datetime.now()
            

            p=str(now).split(' ')
            
            s=p[0].split('-')
            day2 = s[0]
            month2 = s[1]
            year2 = s[2]
            
            date1 = year2+""+month2+""+day2
            
            time=str(p[1]).replace(':','')
            obj=list(models.departMast.objects.filter(department_name=department).values('department_name').distinct())
            sc_1=int(models.departMast.objects.last().department_code)
            # print(sc_1)
            
            # print(obj,'obj')
            if len(obj)==0:
                #print('a')
                models.departMast.objects.create(department_name=department, department_code=sc_1+1,modified_by=emp.empno,rly_unit_code_id=emp['wau'])
                messages.success(request,'Data saved successfully')
            else:
                messages.error(request,'Department Already Exists!')
                #print('b')
                # railwayLocationMaster.objects.filter(location_code=location_code).update(location_type=location_type, location_description=desc, parent_location_code=ploco_code, location_type_desc=type_desc, rstype=rstype, station_code=st_code)
            
        return JsonResponse({'saved':'save'})
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="dept_data",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {}) 

# def shop_section(request):
#     current_user = request.user
#     emp=m1.empmast.objects.get(pk=current_user.username) 
#     unit=models.departMast.objects.filter(delete_flag=False).values('department_name').order_by('department_name').distinct('department_name')
#     list=[]
#     cur= connection.cursor()
#     cur.execute('''select department_name,shop_code,shop_id,section_code,section_id from dlw_shop_section a join dlw_departMast b on
#     a.department_code_id=b.department_code order by (b.department_name,a.shop_code,a.section_code) ''')
#     d=cur.fetchall()
#     print(d,'________________')
#     for i in d:
#         temp={}
#         temp['department_name']=i[0]
#         temp['shop_code']=i[1]
#         temp['shop_id']=i[2]
#         temp['section_code']=i[3]
#         temp['section_id']=i[4]
#         list.append(temp)
#     print('list',list,'_____________________________')    
#     # val = models.shop_section.objects.filter(department_code_id__isnull=False).values('shop_code','shop_id','section_code','section_id','department_code_id').distinct() 
#     # for i in val:
#     #     temp={}
#     #     temp['shop_code']=i['shop_code']
#     #     temp['shop_id']=i['shop_id']
#     #     temp['section_code']=i['section_code']
#     #     temp['section_id']=i['section_id']
#     #     if models.departMast.objects.filter(department_code=i['department_code_id']).exists():
#     #         temp['department_name']=models.departMast.objects.filter(department_code=i['department_code_id'])[0].department_name 
#     #     else:
#     #         temp['department_name']='None'     
#     #     list.append(temp)

#     # mylist = []
#     # for i in unit:
#     #     temp={}
#     #     #y = models.department_master.objects.filter(department_name=i['department_name'],delete_flag=False).order_by('shop_code').values('shop_code')
#     #     print(y,'--------')
#     #     temp['department_name']=i['department_name']
#     #     str=""
#     #     for j in y:
#     #         print(j,'-----------')
#     #         if(j['shop_code']!=None):
#     #             str+=j['shop_code'] + "\r\n"
#     #     temp['shop_code']=str
#     #     mylist.append(temp)
#     # print(mylist,'_________')
           
   
#     context={
#         'emp':emp,
#         'list':list,
#         # 'val':val,
#         'unit':unit,
       
#     }
    
#     return render(request, 'shop_section.html',context)


# def shop_bydept(request):
#     if request.method == "GET" and request.is_ajax():
#         dept = request.GET.get('dept')
#         print("===================",dept)
#         dept_id=models.departMast.objects.filter(department_name=dept)[0].department_code
#         print("========id===========",dept_id)
#         shop_code=list(models.shop_section.objects.filter(department_code_id=dept_id).values('shop_code').distinct('shop_code'))
#         print(shop_code)
#         context={
#             'shop_code':shop_code,
#         }
       
        
       
#         return JsonResponse(context, safe = False)
#     return JsonResponse({"success":False}, status=400)

def section_bydept(request):
    try:
        if request.method == "GET" and request.is_ajax():
            dept = request.GET.get('dept')
            sectiondept = request.GET.get('sectiondept')
            #print(sectiondept)
            dept_id=models.departMast.objects.filter(department_name=dept)[0].department_code
            #print(dept_id)
            section_desc=list(models.shop_section.objects.filter(department_code_id=dept_id,shop_code=sectiondept).values('section_desc').distinct('section_desc'))
            #print(section_desc)
            context={
                'section_desc':section_desc,
            }
        
            
        
            return JsonResponse(context, safe = False)
        return JsonResponse({"success":False}, status=400)
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="section_bydept",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {}) 


def RoleAdd(request):
    try:
        cuser=request.user
        usermaster=m1.empmast.objects.filter(empno=cuser).first()
        current_user = request.user
        emp=m1.empmast.objects.filter(pk=current_user.username).values('wau')
        rolelist=usermaster.role.split(", ")  
        list=[]
        
        val = models.roles.objects.all().filter(delete_flag=False).values('role','parent','department_code_id').order_by('role').distinct() 
        for i in val:
            temp={}
            temp['role']=i['role']
            temp['parent']=i['parent']
            if models.departMast.objects.filter(department_code=i['department_code_id']).exists():
                temp['department_name']=models.departMast.objects.filter(department_code=i['department_code_id'])[0].department_name 
            else:
                temp['department_name']='None'     
            list.append(temp)
        role = models.roles.objects.all().filter(delete_flag=False).values('role').order_by('role').distinct()
        empdep = models.departMast.objects.all().values('department_name').order_by('department_name').distinct()
        shop = models.shop_section.objects.values('shop_code').order_by('shop_code').distinct()
        users = []
        if request.method=="POST":
            rolename = request.POST.get('roldel')
            #print(rolename)
            if rolename:
            
                models.custom_menu.objects.all().filter(role=rolename).delete()
                models.roles.objects.all().filter(role=rolename).update(delete_flag=True)
                userremove = m1.empmast.objects.all().values('empno').filter(role=rolename)
                for i in range(len(userremove)):
                    # users.append(userremove[i]['empno'])
                    m1.empmast.objects.filter(empno=userremove[i]['empno']).update(role=None,parent=None)
                # User.objects.filter(username__in=users).delete()
                messages.success(request, 'Successfully Deleted!')
            else:
                messages.error(request,"Error")
        context = {
        
            'nav':nav,
            'subnav':subnav,
            'roles' : role,
            'val':val,
            'empdep':empdep,
            'shop':shop,
            'list':list,
            'wau':emp[0]['wau'],
        }
        return render(request,'RoleAdd.html',context)
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="RoleAdd",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {}) 


# def ajaxDeleteRoleUser(request):
#     if request.method == 'POST' or request.is_ajax():

#         rolename= request.POST.get('roledel')
#         if rolename:
#             perlist = models.custom_menu.objects.filter(role=rolename).values('url').distinct()   
#             models.custom_menu.objects.all().filter(role=rolename).delete()
#             models.roles.objects.all().filter(role=rolename).update(delete_flag=True)
#             userremove = m1.empmast.objects.all().values('empno').filter(role=rolename)
#             for i in range(len(userremove)):
               
#                 m1.empmast.objects.filter(empno=userremove[i]['empno']).update(role=None,parent=None)
            
       
#     return JsonResponse({'deleted':'delete'})


def ajaxRoleGen(request):
    try:
        if request.method=='POST' or request.is_ajax():
            current_user = request.user
            emp=m1.empmast.objects.get(pk=current_user.username)  
            rolename = request.POST.get('rolename')
            department = request.POST.get('department')
            designation = request.POST.get('designation')
            shop = request.POST.get('shop1')
            shop1 = json.loads(shop)
            sop =''
            for o in shop1:
                sop=sop+o+", "

            #print(sop,'---------', designation)
            role=models.roles.objects.filter(role=rolename)
            desig_id=models.Level_Desig.objects.exclude(delete_flag=True).filter( designation= designation)[0].designation_code
            #print(desig_id)
            dept_id=models.departMast.objects.filter(department_name=department)[0].department_code
            #print(dept_id)
            if len(role)==0:
                models.roles.objects.create(role=rolename,parent=rolename,department_code_id=dept_id,modified_by=emp.empno, rly_unit=emp.wau,shop_code=sop, designation_code=desig_id)            
                messages.success(request,"succesfully added!")
            else:
                messages.error(request,"This role already exists")
        return JsonResponse({'saved':'save'})
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="ajaxRoleGen",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {}) 


def getDepartmentbyroles(request):
    try:
        if request.method == "GET" and request.is_ajax():
            emptdepartment = request.GET.get('emptdepartment')
                
            if emptdepartment !=None: 
                obj=list(models.departMast.objects.filter(department=emptdepartment).values('designation').order_by('designation').distinct())
                
            return JsonResponse(obj, safe = False)
        return JsonResponse({"success":False}, status=400)
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="getDepartmentbyroles",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {}) 


def getDesigbyDepartment(request):
    try:
        if request.method == "GET" and request.is_ajax():
            department = request.GET.get('department')
            #print(department)  
            
            obj=list(models.Level_Desig.objects.exclude(delete_flag=True).exclude(Q(delete_flag=True)).filter(department=department).values('designation').order_by('designation').distinct('designation'))
            #print(obj,'____________________________________')
            return JsonResponse(obj, safe = False)
        return JsonResponse({"success":False}, status=400)
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="getDesigbyDepartment",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {}) 

def getshopcode_bydept(request):
    try:
        if request.method == "GET" and request.is_ajax():
            department = request.GET.get('department')
            #print(department)  
            
            dept_id=models.departMast.objects.filter(department_name=department)[0].department_code
            #print(dept_id)
            shop_code=list(models.shop_section.objects.filter(department_code_id=dept_id).values('shop_code').distinct('shop_code'))
            
            l=[]
            for i in shop_code:
                l.append(i['shop_code'])
            #print(l)    
            context={
                'shop_code':l,
            } 
            return JsonResponse(context, safe = False)
        return JsonResponse({"success":False}, status=400)
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="getshopcode_bydept",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {}) 

def inspect_logout(request):
    try:
        if request.method=='POST':
            logout(request)
            #print('inlogout')
            data={}
            return JsonResponse(data)
        return HttpResponseRedirect('/login')
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="inspect_logout",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {}) 

def inspect_changePassword(request):
    #print('jjjjj')
    try:
        if request.method == "POST":
            try:
                oldpass = request.POST.get('oldPassword').strip()
                newpass = request.POST.get('confirmNewPassword').strip()
                loguser = request.user.pk

                if len(str(newpass).strip()) < 8 or oldpass == None or newpass == None:
                    # make an error manually to go into except block
                    raise ValueError('Password must be 8 chars')

                loguser = user.objects.get(pk=loguser)
                if loguser.check_password(oldpass):
                    loguser.set_password(newpass)
                    loguser.save()
                    #print('jjjjj')
                    messages.success(request, "Password Changed successfully.")
                    #print('done')
                else:
                    messages.error(request, "Invalid Credentials.")

            except Exception as e: 
                #print(e,'aaaaaaaaaaaaaaa')
                messages.error(request, "Something went wrong.")
                return HttpResponseRedirect('/inspect_changePassword')
        return render(request, "inspect_changePassword.html")
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="inspect_changePassword",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {}) 
#niyati 150622
  




def division_wise1(request):
    try:
        if request.method == "GET" and request.is_ajax():
            rly_1=request.GET.getlist('rly_1[]')
            #print(rly_1,'_________________________railways________________')
            div_1=request.GET.getlist('div_1[]')
            #print(div_1,'___________________div________________') 
            dept_1=request.GET.getlist('dept_1[]')
            #print(dept_1,'___________________dept________________') 
            hqwise=[]
            empnox = models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=request.user)| Q(official_email_ID=request.user.guest_email) | Q(official_email_ID=request.user.email), empno__isnull=False)
            if empnox:
                designumber = empnox[0].designation_code
            alldiv=models.railwayLocationMaster.objects.filter(Q(location_type_desc='DIVISION')|Q(location_type_desc='WORKSHOP')|Q(location_type_desc='INSTITUTE')|Q(location_type_desc='STORE')|Q(location_type_desc='CONSTRUCTION')).values('rly_unit_code')
            if div_1==[] and dept_1==[]:
                alldesig=models.Level_Desig.objects.exclude(delete_flag=True).filter(rly_unit_id__in=alldiv).exclude(designation_code=designumber).values('designation','empno', 'designation_code')
                for i in alldesig:
                    hqwise.append({'designation_code': i['designation_code'], 'desig_longdesc':i['designation']})
                    # hq=list(m1.empmast.objects.filter(empno=i['empno']).values('empname','empmname','emplname'))
                    # if len(hq)>0:
                    #     name=hq[0]['empname']
                    #     if hq[0]['empmname'] is not None:
                    #         name=name+' '+hq[0]['empmname']
                    #     if hq[0]['emplname'] is not None:
                    #         name=name+' '+hq[0]['emplname']
                    #     hqwise.append({'empname':name,'empno':i['empno'], 'desig_longdesc':i['designation']})

            elif div_1==[] and dept_1!=[]:
                alldesig=models.Level_Desig.objects.exclude(delete_flag=True).filter(rly_unit_id__in=alldiv,department__in=dept_1).exclude(designation_code=designumber).values('designation','empno', 'designation_code')
                for i in alldesig:
                    hqwise.append({'designation_code': i['designation_code'], 'desig_longdesc':i['designation']})
                    # hq=list(m1.empmast.objects.filter(empno=i['empno']).values('empname','empmname','emplname'))
                    # if len(hq)>0:
                    #     name=hq[0]['empname']
                    #     if hq[0]['empmname'] is not None:
                    #         name=name+' '+hq[0]['empmname']
                    #     if hq[0]['emplname'] is not None:
                    #         name=name+' '+hq[0]['emplname']
                    #     hqwise.append({'empname':name,'empno':i['empno'], 'desig_longdesc':i['designation']})
            elif div_1!=[] and dept_1!=[]:
                div=models.railwayLocationMaster.objects.filter(location_code__in=div_1).values('rly_unit_code')
                alldesig=models.Level_Desig.objects.exclude(delete_flag=True).filter(rly_unit_id__in=div,department__in=dept_1).exclude(designation_code=designumber).values('designation','empno', 'designation_code')
                for i in alldesig:
                    hqwise.append({'designation_code': i['designation_code'], 'desig_longdesc':i['designation']})
                    # hq=list(m1.empmast.objects.filter(empno=i['empno']).values('empname','empmname','emplname'))
                    # if len(hq)>0:
                    #     name=hq[0]['empname']
                    #     if hq[0]['empmname'] is not None:
                    #         name=name+' '+hq[0]['empmname']
                    #     if hq[0]['emplname'] is not None:
                    #         name=name+' '+hq[0]['emplname']
                    #     hqwise.append({'empname':name,'empno':i['empno'], 'desig_longdesc':i['designation']})
            elif div_1!=[] and dept_1==[]:
                div=models.railwayLocationMaster.objects.filter(location_code__in=div_1).values('rly_unit_code')
                alldesig=models.Level_Desig.objects.exclude(delete_flag=True).filter(rly_unit_id__in=div).exclude(designation_code=designumber).values('designation','empno', 'designation_code')
                for i in alldesig:
                    hqwise.append({'designation_code': i['designation_code'], 'desig_longdesc':i['designation']})
                    # hq=list(m1.empmast.objects.filter(empno=i['empno']).values('empname','empmname','emplname'))
                    # if len(hq)>0:
                    #     name=hq[0]['empname']
                    #     if hq[0]['empmname'] is not None:
                    #         name=name+' '+hq[0]['empmname']
                    #     if hq[0]['emplname'] is not None:
                    #         name=name+' '+hq[0]['emplname']
                    #     hqwise.append({'empname':name,'empno':i['empno'], 'desig_longdesc':i['designation']})
            
            context={
            'divwise':hqwise,
            } 
            return JsonResponse(context,safe = False)
        return JsonResponse({"success":False}, status = 400)
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="division_wise1",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {}) 


def gm_list_officers(request):
    try:
        if request.method == "GET" and request.is_ajax():
            rly_1=request.GET.getlist('rly_1[]')
            hqwise=[]
            empnox = models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=request.user)| Q(official_email_ID=request.user.guest_email) | Q(official_email_ID=request.user.email), empno__isnull=False)
            if empnox:
                designumber = empnox[0].designation_code
            # allrly=models.railwayLocationMaster.objects.filter(Q(location_type_desc='RAILWAY BOARD')|Q(location_type_desc='HEAD QUATER')|Q(location_type_desc='PRODUCTION UNIT')|Q(location_type_desc='OFFICE')).values('rly_unit_code')

            # if rly_1==[]:
            #     alldesig=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level='GM').values('designation','empno')
            #     for i in alldesig:
            #         hq=list(m1.empmast.objects.filter(empno=i['empno']).values('empname','empmname','emplname'))
            #         if len(hq)>0:
            #             name=hq[0]['empname']
            #             if hq[0]['empmname'] is not None:
            #                 name=name+' '+hq[0]['empmname']
            #             if hq[0]['emplname'] is not None:
            #                 name=name+' '+hq[0]['emplname']
            #             hqwise.append({'empname':name,'empno':i['empno'], 'desig_longdesc':i['designation']})
            # else:   
            hq=models.railwayLocationMaster.objects.filter(location_type_desc='HEAD QUATER').values('rly_unit_code')
            alldesig=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level='GM',rly_unit_id__in=hq).exclude(designation_code=designumber,delete_flag=True).values('designation','empno', 'designation_code')
            for i in alldesig:
                hqwise.append({'designation_code': i['designation_code'], 'desig_longdesc':i['designation']})
                # hq=list(m1.empmast.objects.filter(empno=i['empno']).values('empname','empmname','emplname'))
                # if len(hq)>0:
                #     name=hq[0]['empname']
                #     if hq[0]['empmname'] is not None:
                #         name=name+' '+hq[0]['empmname']
                #     if hq[0]['emplname'] is not None:
                #         name=name+' '+hq[0]['emplname']
                #     hqwise.append({'empname':name,'empno':i['empno'], 'desig_longdesc':i['designation']})
        

            allgm=sorted(hqwise, key=lambda hqwise:hqwise['desig_longdesc'])
            context={
            'allgm':allgm,
            } 
            return JsonResponse(context,safe = False)
        return JsonResponse({"success":False}, status = 400)
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="gm_list_officers",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {}) 


def drm_officers(request):
    try:
        if request.method == "GET" and request.is_ajax():
            div_1=request.GET.getlist('div_1[]')
            dept_1=request.GET.getlist('dept_1[]')
            if len(dept_1)==0:
                dept_1= list(models.departMast.objects.filter().values_list('department_name', flat=True))
            #print(div_1)
            hqwise=[]
            empnox = models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=request.user)| Q(official_email_ID=request.user.guest_email) | Q(official_email_ID=request.user.email), empno__isnull=False)
            if empnox:
                designumber = empnox[0].designation_code
            if  div_1==[]:
                alldesig=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level='DRM',department_code__department_name__in=dept_1).exclude(designation_code=designumber,delete_flag=True).values('designation','empno','designation_code')
                for i in alldesig:
                    hqwise.append({'designation_code': i['designation_code'], 'desig_longdesc':i['designation']})
                    # hq=list(m1.empmast.objects.filter(empno=i['empno']).values('empname','empmname','emplname'))
                    # if len(hq)>0:
                    #     name=hq[0]['empname']
                    #     if hq[0]['empmname'] is not None:
                    #         name=name+' '+hq[0]['empmname']
                    #     if hq[0]['emplname'] is not None:
                    #         name=name+' '+hq[0]['emplname']
                    #     hqwise.append({'empname':name,'empno':i['empno'], 'desig_longdesc':i['designation']})
            
            else:   
                hq=models.railwayLocationMaster.objects.filter(parent_location_code__in=div_1).values('rly_unit_code')
                alldesig=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level='DRM',rly_unit_id__in=hq,department_code__department_name__in=dept_1).exclude(designation_code=designumber,delete_flag=True).values('designation','empno', 'designation_code')
                for i in alldesig:
                    hqwise.append({'designation_code': i['designation_code'], 'desig_longdesc':i['designation']})
                    # hq=list(m1.empmast.objects.filter(empno=i['empno']).values('empname','empmname','emplname'))
                    # if len(hq)>0:
                    #     name=hq[0]['empname']
                    #     if hq[0]['empmname'] is not None:
                    #         name=name+' '+hq[0]['empmname']
                    #     if hq[0]['emplname'] is not None:
                    #         name=name+' '+hq[0]['emplname']
                    #     hqwise.append({'empname':name,'empno':i['empno'], 'desig_longdesc':i['designation']})


            alldrm=sorted(hqwise, key=lambda hqwise:hqwise['desig_longdesc'])
            
            context={
            'alldrm':alldrm,
            } 
            return JsonResponse(context,safe = False)
        return JsonResponse({"success":False}, status = 400)
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="drm_officers",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {}) 

def phod_officers(request):
    try:
        if request.method == "GET" and request.is_ajax():
            rly_1=request.GET.getlist('rly_1[]')
            dept_1=request.GET.getlist('dept_1[]')
            if len(dept_1)==0:
                dept_1= list(models.departMast.objects.filter().values_list('department_name', flat=True))
            # print(dept_1)
            hqwise=[]
            empnox = models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=request.user)| Q(official_email_ID=request.user.guest_email) | Q(official_email_ID=request.user.email), empno__isnull=False)
            if empnox:
                designumber = empnox[0].designation_code
            if rly_1==[]:
                alldesig=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level='PHOD',department_code__department_name__in=dept_1).exclude(designation_code=designumber,delete_flag=True).values('designation','empno', 'designation_code')
                for i in alldesig:
                    hqwise.append({'designation_code': i['designation_code'], 'desig_longdesc':i['designation']})
                    # hq=list(m1.empmast.objects.filter(empno=i['empno']).values('empname','empmname','emplname'))
                    # if len(hq)>0:
                    #     name=hq[0]['empname']
                    #     if hq[0]['empmname'] is not None:
                    #         name=name+' '+hq[0]['empmname']
                    #     if hq[0]['emplname'] is not None:
                    #         name=name+' '+hq[0]['emplname']
                    #     hqwise.append({'empname':name,'empno':i['empno'], 'desig_longdesc':i['designation']})
            else:   
                hq=models.railwayLocationMaster.objects.filter(location_code__in=rly_1).values('rly_unit_code')
                alldesig=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level='PHOD',rly_unit_id__in=hq,department_code__department_name__in=dept_1).exclude(designation_code=designumber,delete_flag=True).values('designation','empno', 'designation_code')
                for i in alldesig:
                    hqwise.append({'designation_code': i['designation_code'], 'desig_longdesc':i['designation']})
                    # hq=list(m1.empmast.objects.filter(empno=i['empno']).values('empname','empmname','emplname'))
                    # if len(hq)>0:
                    #     name=hq[0]['empname']
                    #     if hq[0]['empmname'] is not None:
                    #         name=name+' '+hq[0]['empmname']
                    #     if hq[0]['emplname'] is not None:
                    #         name=name+' '+hq[0]['emplname']
                    #     hqwise.append({'empname':name,'empno':i['empno'], 'desig_longdesc':i['designation']})
            

            allphod=sorted(hqwise, key=lambda hqwise:hqwise['desig_longdesc'])

            context={
            'allphod':allphod,
            } 
            return JsonResponse(context,safe = False)
        return JsonResponse({"success":False}, status = 400)
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="phod_officers",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {}) 

def board_officers(request):
    try:
        if request.method == "GET" and request.is_ajax():
            rly_1=request.GET.getlist('rly_1[]')
            hqwise=[]
            empnox = models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=request.user)| Q(official_email_ID=request.user.guest_email) | Q(official_email_ID=request.user.email), empno__isnull=False)
            if empnox:
                designumber = empnox[0].designation_code
            #mem=['BM','AM','CRB']
            mem=['BM']
            # if rly_1==[]:
            #     alldesig=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level__in=mem).values('designation','empno')
            #     for i in alldesig:
            #         hq=list(m1.empmast.objects.filter(empno=i['empno']).values('empname','empmname','emplname'))
            #         if len(hq)>0:
            #             name=hq[0]['empname']
            #             if hq[0]['empmname'] is not None:
            #                 name=name+' '+hq[0]['empmname']
            #             if hq[0]['emplname'] is not None:
            #                 name=name+' '+hq[0]['emplname']
            #             hqwise.append({'empname':name,'empno':i['empno'], 'desig_longdesc':i['designation']})
            # else:   
            hq=models.railwayLocationMaster.objects.filter(location_type_desc='RAILWAY BOARD').values('rly_unit_code')
            alldesig=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level__in=mem,rly_unit_id__in=hq).exclude(designation_code=designumber).values('designation','empno', 'designation_code')
            for i in alldesig:
                hqwise.append({'designation_code': i['designation_code'], 'desig_longdesc':i['designation']})
            #     hq=list(m1.empmast.objects.filter(empno=i['empno']).values('empname','empmname','emplname'))
            #     if len(hq)>0:
            #         name=hq[0]['empname']
            #         if hq[0]['empmname'] is not None:
            #             name=name+' '+hq[0]['empmname']
            #         if hq[0]['emplname'] is not None:
            #             name=name+' '+hq[0]['emplname']
            #         hqwise.append({'empname':name,'empno':i['empno'], 'desig_longdesc':i['designation']})
            allboard=sorted(hqwise, key=lambda hqwise:hqwise['desig_longdesc'])
            context={
            'allboard':allboard,
            } 
            return JsonResponse(context,safe = False)
        return JsonResponse({"success":False}, status = 400)
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="board_officers",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {}) 

def branch_officers(request):
    try:
        if request.method == "GET" and request.is_ajax():
            div_1=request.GET.getlist('div_1[]')
            rly_1=request.GET.getlist('rly_1[]')
            dept_1=request.GET.getlist('dept_1[]')
            if len(dept_1)==0:
                dept_1= list(models.departMast.objects.filter().values_list('department_name', flat=True))
            # print(div_1,rly_1)
            hqwise=[]
            empnox = models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=request.user)| Q(official_email_ID=request.user.guest_email) | Q(official_email_ID=request.user.email), empno__isnull=False)
            if empnox:
                designumber = empnox[0].designation_code
            if  div_1==[]:
                if rly_1==[]:
                    alldesig=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level='BO',department_code__department_name__in=dept_1).exclude(designation_code=designumber).values('designation','empno','designation_code')
                    for i in alldesig:
                        hqwise.append({'designation_code': i['designation_code'], 'desig_longdesc':i['designation']})
                else:
                    hq=models.railwayLocationMaster.objects.filter(parent_location_code__in=rly_1).values('rly_unit_code')
                    alldesig=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level='BO',rly_unit_id__in=hq,department_code__department_name__in=dept_1).exclude(designation_code=designumber).values('designation','empno','designation_code')
                    for i in alldesig:
                        hqwise.append({'designation_code': i['designation_code'], 'desig_longdesc':i['designation']})
           
            else:  
                hq=models.railwayLocationMaster.objects.filter(parent_location_code__in=div_1).values('rly_unit_code')
                alldesig=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level='BO',rly_unit_id__in=hq).exclude(designation_code=designumber).values('designation','empno', 'designation_code')
                for i in alldesig:
                    hqwise.append({'designation_code': i['designation_code'], 'desig_longdesc':i['designation']})


            allbo=sorted(hqwise, key=lambda hqwise:hqwise['desig_longdesc'])
           
            context={
            'allbo':allbo,
            }
            return JsonResponse(context,safe = False)
        return JsonResponse({"success":False}, status = 400)
    except Exception as e:
        try:
            m1.error_Table.objects.create(fun_name="branch_officers",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})

def panel_officers(request):
    try:
        if request.method == "GET" and request.is_ajax():
            hqwise=[]
            div_1=request.GET.getlist('div_1[]')
            rly_1=request.GET.getlist('rly_1[]')
            dept_1=request.GET.getlist('dept_1[]')
            if len(dept_1)==0:
                dept_1= list(models.departMast.objects.filter().values_list('department_name', flat=True))
            cuser=request.user.username
            if request.user.user_role == 'guest':
                cuser=request.user.guest_email
                request.user.email=request.user.guest_email
            desigid=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].designation_code
            # print(desigid,"helloooooo")
            rly_code=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].rly_unit.location_code
            rly_unit_code=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].rly_unit.rly_unit_code
            parent_loc=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].rly_unit.parent_location_code
            parent_loc_id=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].rly_unit.parent_rly_unit_code
            div_code=rly_code
            div_unit_code=rly_unit_code
            if parent_loc!='RB':
                div_code=rly_code
                rly_code=parent_loc
                rly_unit_code=parent_loc_id
            pclevel=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=desigid).values().order_by())
            alldesig=list(models.Level_Desig.objects.exclude(delete_flag=True).exclude(Q(empno_id=None),designation_code=desigid,delete_flag=True).filter(parent_desig_code=desigid,department_code__department_name__in=dept_1).distinct().values('designation','empno','designation_code').order_by('-pc7_levelmin'))
            print(alldesig)
            for i in alldesig:
                hqwise.append({'designation_code': i['designation_code'], 'desig_longdesc':i['designation']})




            # if  div_1==[]:
            #     if rly_1==[]:
            #         alldesig=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level='BO').exclude(designation_code=designumber).values('designation','empno','designation_code')
            #         for i in alldesig:
            #             hqwise.append({'designation_code': i['designation_code'], 'desig_longdesc':i['designation']})
            #     else:
            #         hq=models.railwayLocationMaster.objects.filter(parent_location_code__in=rly_1).values('rly_unit_code')
            #         alldesig=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level='BO',rly_unit_id__in=hq).exclude(designation_code=designumber).values('designation','empno','designation_code')
            #         for i in alldesig:
            #             hqwise.append({'designation_code': i['designation_code'], 'desig_longdesc':i['designation']})
           
            # else:  
            #     hq=models.railwayLocationMaster.objects.filter(parent_location_code__in=div_1).values('rly_unit_code')
            #     alldesig=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level='BO',rly_unit_id__in=hq).exclude(designation_code=designumber).values('designation','empno', 'designation_code')
            #     for i in alldesig:
            #         hqwise.append({'designation_code': i['designation_code'], 'desig_longdesc':i['designation']})


            allpanel=sorted(hqwise, key=lambda hqwise:hqwise['desig_longdesc'])
           
            context={
            'allpanel':allpanel,
            }
            return JsonResponse(context,safe = False)
        return JsonResponse({"success":False}, status = 400)
    except Exception as e:
        try:
            m1.error_Table.objects.create(fun_name="panel_officers",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})

def designation_wise(request):
    try:
        if request.method == "GET" and request.is_ajax():
            desig=request.GET.getlist('desig[]')
            hqwise=[]
            empnox = models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=request.user)| Q(official_email_ID=request.user.guest_email) | Q(official_email_ID=request.user.email), empno__isnull=False)
            if empnox:
                designumber = empnox[0].designation_code
            alldesig=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation__in=desig).exclude(designation_code=designumber).values('designation','empno', 'designation_code')
            for i in alldesig:
                hqwise.append({'designation_code': i['designation_code'], 'desig_longdesc':i['designation']})
                # hq=list(m1.empmast.objects.filter(empno=i['empno']).values('empname','empmname','emplname'))
                # if len(hq)>0:
                #     name=hq[0]['empname']
                #     if hq[0]['empmname'] is not None:
                #         name=name+' '+hq[0]['empmname']
                #     if hq[0]['emplname'] is not None:
                #         name=name+' '+hq[0]['emplname']
                #     hqwise.append({'empname':name,'empno':i['empno'], 'desig_longdesc':i['designation']})
            return JsonResponse(hqwise,safe = False)
        return JsonResponse({"success":False}, status = 400)
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="designation_wise",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {}) 

def headqwise(request):
    try:
        if request.method == "GET" and request.is_ajax():
            rly_1=request.GET.getlist('rly_1[]')
            dept_1=request.GET.getlist('dept_1[]')
            div_1=request.GET.getlist('div_1[]')
            empnox = models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=request.user)| Q(official_email_ID=request.user.guest_email) | Q(official_email_ID=request.user.email), empno__isnull=False)
            if empnox:
                designumber = empnox[0].designation_code
            hqwise=[]
            allrly=models.railwayLocationMaster.objects.filter(Q(location_type_desc='RAILWAY BOARD')|Q(location_type_desc='HEAD QUATER')|Q(location_type_desc='PRODUCTION UNIT')|Q(location_type_desc='OFFICE')).values('rly_unit_code')
            alldiv=models.railwayLocationMaster.objects.filter(Q(location_type_desc='DIVISION')|Q(location_type_desc='WORKSHOP')|Q(location_type_desc='INSTITUTE')|Q(location_type_desc='STORE')|Q(location_type_desc='CONSTRUCTION')).values('rly_unit_code')
            if rly_1==[]:
                if dept_1==[]:
                    alldesig=models.Level_Desig.objects.exclude(delete_flag=True).filter(rly_unit_id__in=allrly).exclude(designation_code=designumber).values('designation','empno', 'designation_code')
                    for i in alldesig:
                        hqwise.append({'designation_code': i['designation_code'], 'desig_longdesc':i['designation']})
                        # hq=list(m1.empmast.objects.filter(empno=i['empno']).values('empname','empmname','emplname'))
                        # if len(hq)>0:
                        #     name=hq[0]['empname']
                        #     if hq[0]['empmname'] is not None:
                        #         name=name+' '+hq[0]['empmname']
                        #     if hq[0]['emplname'] is not None:
                        #         name=name+' '+hq[0]['emplname']
                        #     hqwise.append({'empname':name,'empno':i['empno'],'desig_longdesc':i['designation']})
                        
                elif dept_1!=[]:
                    alldesig=models.Level_Desig.objects.exclude(delete_flag=True).filter(rly_unit_id__in=allrly,department__in=dept_1).exclude(designation_code=designumber).values('designation','empno', 'designation_code')
                    for i in alldesig:
                        hqwise.append({'designation_code': i['designation_code'], 'desig_longdesc':i['designation']})
                        # hq=list(m1.empmast.objects.filter(empno=i['empno']).values('empname','empmname','emplname'))
                        # if len(hq)>0:
                        #     name=hq[0]['empname']
                        #     if hq[0]['empmname'] is not None:
                        #         name=name+' '+hq[0]['empmname']
                        #     if hq[0]['emplname'] is not None:
                        #         name=name+' '+hq[0]['emplname']
                        #     hqwise.append({'empname':name,'empno':i['empno'], 'desig_longdesc':i['designation']})
                # elif div_1!=[] and dept_1!=[]:
                #     div=models.railwayLocationMaster.objects.filter(location_code__in=div_1).values('rly_unit_code')
                #     alldesig=models.Level_Desig.objects.exclude(delete_flag=True).filter(rly_unit_id__in=div,department__in=dept_1).values('designation','empno')
                #     for i in alldesig:
                #         hq=list(m1.empmast.objects.filter(empno=i['empno']).values('empname','empmname','emplname'))
                #         if len(hq)>0:
                #             name=hq[0]['empname']
                #             if hq[0]['empmname'] is not None:
                #                 name=name+' '+hq[0]['empmname']
                #             if hq[0]['emplname'] is not None:
                #                 name=name+' '+hq[0]['emplname']
                #             hqwise.append({'empname':name,'empno':i['empno'], 'desig_longdesc':i['designation']})
                # elif div_1!=[] and dept_1==[]:
                #     div=models.railwayLocationMaster.objects.filter(location_code__in=div_1).values('rly_unit_code')
                #     alldesig=models.Level_Desig.objects.exclude(delete_flag=True).filter(rly_unit_id__in=div).values('designation','empno')
                #     for i in alldesig:
                #         hq=list(m1.empmast.objects.filter(empno=i['empno']).values('empname','empmname','emplname'))
                #         if len(hq)>0:
                #             name=hq[0]['empname']
                #             if hq[0]['empmname'] is not None:
                #                 name=name+' '+hq[0]['empmname']
                #             if hq[0]['emplname'] is not None:
                #                 name=name+' '+hq[0]['emplname']
                #             hqwise.append({'empname':name,'empno':i['empno'], 'desig_longdesc':i['designation']})
            else:
                hq=models.railwayLocationMaster.objects.filter(location_code__in=rly_1).values('rly_unit_code')
                if  dept_1==[]:
                    alldesig=models.Level_Desig.objects.exclude(delete_flag=True).filter(rly_unit_id__in=hq).exclude(designation_code=designumber).values('designation','empno', 'designation_code')
                    for i in alldesig:
                        hqwise.append({'designation_code': i['designation_code'], 'desig_longdesc':i['designation']})
                        # hq=list(m1.empmast.objects.filter(empno=i['empno']).values('empname','empmname','emplname'))
                        # if len(hq)>0:
                        #     name=hq[0]['empname']
                        #     if hq[0]['empmname'] is not None:
                        #         name=name+' '+hq[0]['empmname']
                        #     if hq[0]['emplname'] is not None:
                        #         name=name+' '+hq[0]['emplname']
                        #     hqwise.append({'empname':name,'empno':i['empno'], 'desig_longdesc':i['designation']})

                elif  dept_1!=[]:
                    alldesig=models.Level_Desig.objects.exclude(delete_flag=True).filter(rly_unit_id__in=hq,department__in=dept_1).exclude(designation_code=designumber).values('designation','empno', 'designation_code')
                    for i in alldesig:
                        hqwise.append({'designation_code': i['designation_code'], 'desig_longdesc':i['designation']})
                        # hq=list(m1.empmast.objects.filter(empno=i['empno']).values('empname','empmname','emplname'))
                        # if len(hq)>0:
                        #     name=hq[0]['empname']
                        #     if hq[0]['empmname'] is not None:
                        #         name=name+' '+hq[0]['empmname']
                        #     if hq[0]['emplname'] is not None:
                        #         name=name+' '+hq[0]['emplname']
                        #     hqwise.append({'empname':name,'empno':i['empno'], 'desig_longdesc':i['designation']})
                # elif div_1!=[] and dept_1!=[]:
                #     div=models.railwayLocationMaster.objects.filter(parent_location_code__in=rly_1,location_code__in=div_1).values('rly_unit_code')
                #     alldesig=models.Level_Desig.objects.exclude(delete_flag=True).filter(rly_unit_id__in=div,department__in=dept_1).values('designation','empno')
                #     for i in alldesig:
                #         hq=list(m1.empmast.objects.filter(empno=i['empno']).values('empname','empmname','emplname'))
                #         if len(hq)>0:
                #             name=hq[0]['empname']
                #             if hq[0]['empmname'] is not None:
                #                 name=name+' '+hq[0]['empmname']
                #             if hq[0]['emplname'] is not None:
                #                 name=name+' '+hq[0]['emplname']
                #             hqwise.append({'empname':name,'empno':i['empno'], 'desig_longdesc':i['designation']})
                # elif div_1!=[] and dept_1==[]:
                #     div=models.railwayLocationMaster.objects.filter(parent_location_code__in=rly_1,location_code__in=div_1).values('rly_unit_code')
                #     alldesig=models.Level_Desig.objects.exclude(delete_flag=True).filter(rly_unit_id__in=div).values('designation','empno')
                #     for i in alldesig:
                #         hq=list(m1.empmast.objects.filter(empno=i['empno']).values('empname','empmname','emplname'))
                #         if len(hq)>0:
                #             name=hq[0]['empname']
                #             if hq[0]['empmname'] is not None:
                #                 name=name+' '+hq[0]['empmname']
                #             if hq[0]['emplname'] is not None:
                #                 name=name+' '+hq[0]['emplname']
                #             hqwise.append({'empname':name,'empno':i['empno'], 'desig_longdesc':i['designation']})
            context={
            'hqwise':hqwise,
            } 
            return JsonResponse(context,safe = False)
        return JsonResponse({"success":False}, status = 400)
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="designation_wise",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {}) 

def division_by_rly1(request):
    try:
        if request.method == "GET" and request.is_ajax():
            rly_1=request.GET.getlist('rly_1[]')
            if rly_1 == []:
                division=models.railwayLocationMaster.objects.filter(Q(location_type_desc='DIVISION')|Q(location_type_desc='WORKSHOP')|Q(location_type_desc='INSTITUTE')|Q(location_type_desc='STORE')|Q(location_type_desc='CONSTRUCTION')).values('location_code')
            else:
                division=list(models.railwayLocationMaster.objects.filter(Q(location_type_desc='DIVISION')|Q(location_type_desc='WORKSHOP')|Q(location_type_desc='INSTITUTE')|Q(location_type_desc='STORE')|Q(location_type_desc='CONSTRUCTION'),parent_location_code__in=rly_1).order_by('location_code').values('location_code').distinct('location_code'))
            l=[]
            for i in division:
                l.append(i['location_code'])
            context={
                'division':l,
            } 
            return JsonResponse(context,safe = False)
        return JsonResponse({"success":False}, status = 400)
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="division_by_rly1",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {}) 


# niyati 150622 end     

#vishnu  location searching function

#vishnu  location searching function

# def search_location(request):
#     try:
#         list1=models.railwayLocationMaster.objects.filter(Q(location_type_desc='RAILWAY BOARD')|Q(location_type_desc='HEAD QUATER')|Q(location_type_desc='PRODUCTION UNIT')|Q(location_type_desc='PSU')|Q(location_type_desc='INSTITUTE')|Q(location_type_desc='RDSO')).values('location_code').order_by('location_code')
#         list2=[]
#         for i in list1:
#             # print(i['location_code'],'_________')
#             list2.append(i['location_code'])
        
        
#         list3=models.railwayLocationMaster.objects.filter(Q(location_type_desc='DIVISION')|Q(location_type_desc='WORKSHOP')|Q(location_type_desc='OFFICE')|Q(location_type_desc='STORE')|Q(location_type_desc='CONSTRUCTION')).values('location_code').order_by('location_code')
#         list4=[]
#         for i in list3:
#             # print(i['location_code'],'_________')
#             list4.append(i['location_code'])  
            
            
#         list5=models.departMast.objects.all().values('department_name').order_by('department_name')
#         list6=[]
#         for i in list5:
#             # print(i['department_name'],'_________')
#             list6.append(i['department_name'])
        
#         list7=models.Level_Desig.objects.exclude(delete_flag=True).all().values('designation').order_by('designation')
#         list8=[]
#         for i in list7:
#             # print(i['designation'],'_________')
#             list8.append(i['designation'])

#         if request.method== 'POST':
#             query = request.POST['query']
#             #print(query)
#             que=Q()
#             for word in query.split():
#                 que &=Q(observation__icontains=word)
            
#             des_location=m1.Item_details.objects.filter(que)
#             # par_location=models.railwayLocationMaster.objects.filter()
#             # all_location=des_location.union(par_location)
#             # query=[]
#             #print('des_location', des_location)
#             return render(request,'keyword_location_search.html', {'des_location':des_location})
#         else:
#             query = False
        
        
#         #Find division
#         # ins=[]
#         # if request.method =="POST":
#         #     s=request.POST.get('location')
#         #     list3=models.railwayLocationMaster.objects.filter(location_type='DIV', parent_location_code=s).values('location_code', 'parent_location_code')
#         #     list4=[]
#         #     for i in list3:
#         #         print(i['location_code'],'_________')
#         #         list4.append(i['location_code'])
#         #     print('dhhddddddddddddddddddd',ins)
#         # else:
#         #     print('hhhhhhhhhhhhhh',ins)
            
#         #find all list data 
#         # insp=models.Level_Desig.objects.exclude(delete_flag=True).filter(rly_unit__location_type__in=['DIV', 'ZR']).values('cat_id','designation','rly_unit__location_code','rly_unit__location_type','rly_unit__last_update','rly_unit__rly_unit_code','department_code__department_name')
#         # insp=models.Level_Desig.objects.exclude(delete_flag=True).all().values('cat_id','rly_unit__location_type','designation','rly_unit__last_update','department_code__department_name')
#         # print("insp",insp)
        
        
#         context={'zone':list2,'division':list4,'dept':list6, 'desi':list8}
#         return render(request, 'search_location.html',context)
#     except Exception as e: 
#         try:
#             m1.error_Table.objects.create(fun_name="search_location",user_id=request.user,err_details=str(e))
#         except:
#             print("Internal Error!!!")
#         return render(request, "errorspage.html", {}) 


def search_location(request):
    try:
    
        
        list1=models.railwayLocationMaster.objects.filter(location_type_desc__in=['RAILWAY BOARD', 'PRODUCTION UNIT', 'HEAD QUATER','OFFICE', 'PSU', 'PRODUCTION UNIT', 'INSTITUTE']).values('location_code').order_by('location_code')
        list2=[]
        for i in list1:
            # print(i['location_code'],'_________')
            list2.append(i['location_code'])
        list3=models.railwayLocationMaster.objects.filter(location_type_desc__in=['DIVISION','WORKSHOP']).values('location_code', 'location_type').order_by('location_code')

        # list3=models.railwayLocationMaster.objects.filter(Q(location_type_desc='DIVISION')|Q(location_type_desc='WORKSHOP')|Q(location_type_desc='OFFICE')|Q(location_type_desc='STORE')|Q(location_type_desc='CONSTRUCTION')).values('location_code','location_type').order_by('location_code')
        list4=[]
        for i in list3:
            # print(i['location_code'],'_________')
            list4.append({'location_code':i['location_code'],'location_type':i['location_type']})  

        # print("list4",list4)
            
            
        list5=models.departMast.objects.all().values('department_name').order_by('department_name')
        list6=[]
        for i in list5:
            # print(i['department_name'],'_________')
            list6.append(i['department_name'])
        
        list7=models.Level_Desig.objects.exclude(delete_flag=True).all().values('designation').order_by('designation')
        list8=[]
        for i in list7:
            # print(i['designation'],'_________')
            list8.append(i['designation'])

        if request.method== 'POST':
            query = request.POST['query']
            #print(query)
            que=Q()
            for word in query.split():
                que &=Q(observation__icontains=word)
            
            des_location=m1.Item_details.objects.filter(que)
            return render(request,'keyword_location_search.html', {'des_location':des_location})
        else:
            query = False
        insp_type=list(m2.einspection_details.objects.filter().values('instypeid','instypeid__name').distinct())
        insp_type.append({'instypeid':-1,'instypeid__name':'General'})
        # print(insp_type)
        
        
        
        context={'zone':list2,'division':list4,'dept':list6, 'desi':list8,'insp_type':insp_type}
        return render(request, 'search_location.html',context)
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="search_location",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {}) 

def keyword_location_search(request):
    try:
        if request.method== 'POST':
            query = request.POST.get('query')
            que=Q()
            for word in query.split():
                que &=Q(observation__icontains=word)
            des_location=list(m1.Item_details.objects.filter(que).values('modified_by','inspection_no_id__inspection_note_no','observation','modified_on','inspection_no'))
            #print(des_location)
            # des_location=list(m1.Item_details.objects.filter().values('modified_on'))
            for i in range(len(des_location)):
                if des_location[i]['modified_on']!=None:
                    x=des_location[i]['modified_on'].strftime('%d'+'-'+'%m'+'-'+'%Y')
                    des_location[i].update({'modified_on':x})
            #des_location=m1.Item_details.objects.filter(Q(observation__icontains=query) |Q(item_no__icontains=query) |Q(inspection_no__division__icontains=query) |Q(inspection_no__zone__icontains=query) )
            # render(request,'keyword_location_search.html', {'des_location':des_location})
            context={'des_location':des_location, 'query':query}

            return render(request,'search_location.html',context )
        else:
            return render(request,'search_location.html')
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="keyword_location_search",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {}) 
    

# def search_locat_ajax(request):
#     try:
#         if request.method== 'GET' and request.is_ajax():
#             grou=request.GET.get("group")
#             ins=list(models.railwayLocationMaster.objects.filter(location_type='DIV',parent_location_code=grou).values('location_code', 'rly_unit_code'))
#             return JsonResponse({'ins':ins}, safe=False)
#         return JsonResponse({'success':False}, status=400)
#     except Exception as e:
#         print(e)
        
    
# def search_desig_ajax(request):
#     try:
#         if request.method== 'GET' and request.is_ajax():
#             grou=request.GET.get("groupss")
#             ins=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=grou).values('designation'))
#             return JsonResponse({'ins':ins}, safe=False)
#         return JsonResponse({'success':False}, status=400)
#     except Exception as e:
#         print(e)


# def search_locat_ajax(request):
#     try:
#         if request.method== 'GET' and request.is_ajax():
#             grou=json.loads(request.GET.get("group"))
#             # ins=list(models.railwayLocationMaster.objects.filter(location_type='DIV',parent_location_code=grou).values('location_code', 'rly_unit_code'))
#             if grou ==[]:
#                 ins=models.railwayLocationMaster.objects.filter(Q(location_type_desc='DIVISION')|Q(location_type_desc='WORKSHOP')|Q(location_type_desc='INSTITUTE')|Q(location_type_desc='STORE')|Q(location_type_desc='CONSTRUCTION')).values('location_code')
#             else:
#                 ins=list(models.railwayLocationMaster.objects.filter(Q(location_type_desc='DIVISION')|Q(location_type_desc='WORKSHOP')|Q(location_type_desc='INSTITUTE')|Q(location_type_desc='STORE')|Q(location_type_desc='CONSTRUCTION'),parent_location_code__in=grou).values('location_code', 'rly_unit_code'))
#             l=[]
#             for i in ins:
#                 l.append(i['location_code'])
#             #print(l)
            
#             context={
#                 'ins':l,
#             } 
#             return JsonResponse(context, safe=False)
#         return JsonResponse({'success':False}, status=400)
#     except Exception as e: 
#         try:
#             m1.error_Table.objects.create(fun_name="search_locat_ajax",user_id=request.user,err_details=str(e))
#         except:
#             print("Internal Error!!!")
#         return render(request, "errorspage.html", {}) 
     

# def search_locat_ajax1(request):
#     try:
#         if request.method== 'GET' and request.is_ajax():
#             grou=json.loads(request.GET.get("group"))
#             print(grou)
#             # ins=list(models.railwayLocationMaster.objects.filter(location_type='DIV',parent_location_code=grou).values('location_code', 'rly_unit_code'))
#             if grou ==[]:
#                 ins=models.railwayLocationMaster.objects.filter(Q(location_type_desc='DIVISION')|Q(location_type_desc='WORKSHOP')|Q(location_type_desc='STORE')|Q(location_type_desc='CONSTRUCTION')).values('location_code','location_type')
#                 insdesig=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(rly_unit_id__in=(models.railwayLocationMaster.objects.filter(location_code__in=grou).values_list('designation',flat=True).distinct('designation'))))
#             else:
#                 ins=list(models.railwayLocationMaster.objects.filter(Q(location_type_desc='DIVISION')|Q(location_type_desc='WORKSHOP')|Q(location_type_desc='STORE')|Q(location_type_desc='CONSTRUCTION'),parent_location_code__in=grou).values('location_code', 'location_type'))
#                 insdesig=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(rly_unit_id__in=(models.railwayLocationMaster.objects.filter(location_code__in=grou).values('rly_unit_code'))).values_list('designation',flat=True).distinct('designation'))
#                 print("insdesig",insdesig)
#             l=[]
#             for i in ins:
#                 l.append({'location_code':i['location_code'],'location_type':i['location_type']})
#             #print(l)
            
#             context={
#                 'ins':l,
#                 'insdesig':insdesig,
#             } 
#             return JsonResponse(context, safe=False)
#         return JsonResponse({'success':False}, status=400)
#     except Exception as e: 
#         try:
#             m1.error_Table.objects.create(fun_name="search_locat_ajax1",user_id=request.user,err_details=str(e))
#         except:
#             print("Internal Error!!!")
#         return render(request, "errorspage.html", {}) 

def search_locat_ajax1(request):
    try:
        if request.method== 'GET' and request.is_ajax():
            grou=json.loads(request.GET.get("group"))
            print(grou)
            # ins=list(models.railwayLocationMaster.objects.filter(location_type='DIV',parent_location_code=grou).values('location_code', 'rly_unit_code'))
            if grou ==[]:
                ins=list(models.railwayLocationMaster.objects.filter(Q(location_type_desc='DIVISION')|Q(location_type_desc='WORKSHOP')|Q(location_type_desc='STORE')|Q(location_type_desc='CONSTRUCTION')).values('rly_unit_code','location_code','location_type').order_by('location_code'))
                
                list7=models.Level_Desig.objects.exclude(delete_flag=True).filter(rly_unit_id__in=grou).values('designation_code','designation').order_by('designation')
                insdesig=[]
                for i in list7:
                    # print(i['designation'],'_________')
                    insdesig.append({'designation_code': i['designation_code'],'designation': i['designation']})

                # insdesig=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(rly_unit_id__in=grou).values_list('designation',flat=True).distinct('designation'))
            
            else:
                ins=list(models.railwayLocationMaster.objects.filter(Q(location_type_desc='DIVISION')|Q(location_type_desc='WORKSHOP')|Q(location_type_desc='STORE')|Q(location_type_desc='CONSTRUCTION'),parent_rly_unit_code__in=grou).values('rly_unit_code','location_code', 'location_type').order_by('location_code'))
                
                list7=models.Level_Desig.objects.exclude(delete_flag=True).filter(rly_unit_id__in=grou).values('designation_code','designation').order_by('designation')
                insdesig=[]
                for i in list7:
                    # print(i['designation'],'_________')
                    insdesig.append({'designation_code': i['designation_code'],'designation': i['designation']})
                
                # insdesig=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(rly_unit_id__in=grou).values_list('designation',flat=True).distinct('designation'))
                
                # print("insdesig",insdesig)
            l=[]
            for i in ins:
                l.append({'rly_unit_code':i['rly_unit_code'], 'location_code':i['location_code'],'location_type':i['location_type']})
            #print(l)
           
           
            


            context={
                'ins':l,
                'insdesig':insdesig,
            } 
            return JsonResponse(context, safe=False)
        return JsonResponse({'success':False}, status=400)
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="search_locat_ajax1",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {}) 


def search_des_loc_ajax(request):
    try:
        if request.method == 'GET' and request.is_ajax():
            root=json.loads(request.GET.get('root'))
            if root ==[]:
                ins=models.railwayLocationMaster.objects.filter(location_code=root).values('parent_location_code').distinct('parent_location_code')
            else:
                ins=list(models.railwayLocationMaster.objects.filter(location_code__in=root).values('parent_location_code').distinct('parent_location_code'))
            l=[]
            for i in ins:
                l.append(i['parent_location_code'])
            #print(ins)
            context={
                'ins':l,
            }
            return JsonResponse(context, safe=False)
        return JsonResponse({'success':False}, status=400)
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="search_des_loc_ajax",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {}) 
    
    
# def search_desig_ajax1(request):
#     try:
#         if request.method== 'GET' and request.is_ajax():
#             groupss=json.loads(request.GET.get("groupss"))
#             #print(groupss, 'ggggggggggggggggggggggggggggggggggggggggg')
#             l=[]
#             for x in groupss:
#                 x1 = x.split('-')
#                 ins=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation__icontains=x1[0]).values('designation').distinct('designation'))
#                 #print(ins,'==============================================')
#                 for i in ins:
#                     l.append(i['designation'])
#             context ={
#                 'ins':l
#             }
#             return JsonResponse(context, safe=False)
#         return JsonResponse({'success':False}, status=400)
#     except Exception as e: 
#         try:
#             m1.error_Table.objects.create(fun_name="search_desig_ajax1",user_id=request.user,err_details=str(e))
#         except:
#             print("Internal Error!!!")
#         return render(request, "errorspage.html", {}) 

def search_desig_ajax1(request):
    try:
        if request.method== 'GET' and request.is_ajax():
            groupss=json.loads(request.GET.get("groupss"))
            # print(groupss, 'ggggggggggggggggggggggggggggggggggggggggg')
            list7=models.Level_Desig.objects.exclude(delete_flag=True).filter(rly_unit_id__in=groupss).values('designation_code','designation').order_by('designation')
            l=[]
            for i in list7:
                # print(i['designation'],'_________')
                l.append({'designation_code': i['designation_code'],'designation': i['designation']}) 
            # l=[]
            # for x in groupss:
            #     x1 = x.split('-')
            #     ins=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation__icontains=x1[0]).values('designation').distinct('designation'))
            #     #print(ins,'==============================================')
            #     for i in ins:
            #         l.append(i['designation'])
            context ={
                'ins':l
            }
            return JsonResponse(context, safe=False)
        return JsonResponse({'success':False}, status=400)
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="search_desig_ajax1",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {}) 

def search_desig_ajax(request):
    try:
        if request.method== 'GET' and request.is_ajax():
            groupss=json.loads(request.GET.get("groupss"))
            newdiv = []
            for x in groupss:
                x1=x.split('-')
                newdiv.append(x1[0])
            div_unit_code =list( models.railwayLocationMaster.objects.filter(location_code__in = newdiv).values_list('rly_unit_code', flat=True))

            rly=request.GET.get('rly_data_hrms')
            newrly = json.loads(rly)
            rly_unit_code = list(models.railwayLocationMaster.objects.filter(location_code__in = newrly).values_list('rly_unit_code', flat=True))
            l=[]

            if rly_unit_code ==[] and div_unit_code==[]:
                ins=list(models.Level_Desig.objects.exclude(delete_flag=True).filter().values_list('designation',flat=True).distinct('designation'))
            
            else:
                ins=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(Q(rly_unit_id__in=rly_unit_code) | Q(rly_unit_id__in=div_unit_code)).values('designation').distinct('designation'))
                
            for i in ins:
                    l.append(i['designation'])
            context ={
                'ins':l
            }
            return JsonResponse(context, safe=False)
        return JsonResponse({'success':False}, status=400)
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="search_desig_ajax",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {}) 

from datetime import datetime
def fetch_desig_ajax(request):
    try:
        if request.method == 'GET' and request.is_ajax():
            location_code=json.loads(request.GET.get("location_code"))
            location_type=json.loads(request.GET.get("location_type"))
            dept=json.loads(request.GET.get("dept"))
            obser=request.GET.get("query")
            created_on=request.GET.get('created_on')
            designation=json.loads(request.GET.get("designation"))
            status=json.loads(request.GET.get('status'))
            newstatus=[]
            
            if status:
                for i in status:
                    if i=='Closed':
                        newstatus.append(4)
                    if i=='Pending':
                        newstatus.append(1)
                        newstatus.append(2)
                        newstatus.append(3)

            
            
            
            mydata={}
            empnox = models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=request.user)| Q(official_email_ID=request.user.guest_email) | Q(official_email_ID=request.user.email), empno__isnull=False)
            if empnox:
                empno = empnox[0].empno_id
                desig = empnox[0].designation_code
                
            if created_on:
                print("created_on")
                if 'to' in created_on:
                    st=created_on.split('to')
                    st_date = st[0].strip()
                    en_date = st[1].strip()
                    end_date = datetime.strptime(en_date, '%d/%m/%y').strftime('%Y-%m-%d')
                    start_date = datetime.strptime(st_date, '%d/%m/%y').strftime('%Y-%m-%d')
                else:
                    end_date = datetime.strptime(created_on, '%d/%m/%y').strftime('%Y-%m-%d')
                    start_date = datetime.strptime(created_on, '%d/%m/%y').strftime('%Y-%m-%d')
                print(created_on,start_date,end_date)
            print("dept:",len(dept),"location_type:",len(location_type),location_type,"location_code",len(location_code),"newstatus",len(newstatus),newstatus,"created_on:",created_on,"designation",len(designation),designation,"obser:",obser)
                
            
            # if obser =='':  
                
            listsearch=[]
                    
            if len(location_type)==0 and len(location_code)!=0 and len(designation)==0 and len(newstatus)==0 and created_on == '':
                print("1")
                fech_data=list(m1.Insp_multi_location.objects.filter(Q(item__in=location_code)).values_list('inspection_no',flat=True))
                print(fech_data)

            elif len(location_type) !=0 and len(location_code) ==0 and len(designation)==0 and len(newstatus)==0 and created_on == '':
                print("2")
                fech_data=[]
                for i in range(len(location_type)):
                    location_type1=location_type[i].split('-')
                    fech_data1=m1.Insp_multi_location.objects.filter(Q(item=location_type1[0]),type=location_type1[1]).values('inspection_no')
                    for j in fech_data1:
                        fech_data.append(j['inspection_no'])

            elif len(location_type)==0 and len(location_code)==0 and len(newstatus) ==0 and created_on =='' and len(designation)!=0:
                print("3")
                
                fech_data=list(m1.Inspection_details.objects.filter(Q(inspection_officer_id__in=(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation__in=designation).values('designation_code')))).values_list('inspection_no',flat=True))

            elif len(location_type) ==0 and len(location_code)==0 and len(designation)==0 and len(newstatus) !=0 and created_on =='':
                print("5")
                fech_data=list(m1.Insp_multi_location.objects.filter(Q(inspection_no__status_flag__in=newstatus)).values_list('inspection_no',flat=True).order_by('inspection_no__status_flag'))
                
            elif len(location_type) ==0 and len(location_code) ==0 and len(designation)==0 and len(newstatus)==0 and created_on != '':
                print("6")
                fech_data=list(m1.Insp_multi_location.objects.filter(inspection_no_id__inspected_on__gte=start_date, inspection_no_id__inspected_on__lte=end_date).values_list('inspection_no',flat=True))
                
            elif len(location_type) !=0 and len(location_code) !=0 and len(designation) ==0 and len(newstatus)==0 and created_on== '':
                print("7")
                fech_data=[]
                for i in range(len(location_type)):
                    location_type1=location_type[i].split('-')
                    f1=m1.Insp_multi_location.objects.filter(item=location_type1[0],type=location_type1[1]).values('inspection_no')
                    fech_data1=m1.Insp_multi_location.objects.filter(Q(item__in=location_code), inspection_no_id__in=f1).values('inspection_no')
                    for j in fech_data1:
                        fech_data.append(j['inspection_no'])

            elif len(location_type) ==0 and len(location_code) !=0 and len(designation)!=0 and len(newstatus) ==0 and created_on =='':
                print("8")
                fech_data1=list(m1.Insp_multi_location.objects.filter(Q(item__in=location_code)).values_list('inspection_no',flat=True))
                fech_data2=list(m1.Inspection_details.objects.filter(Q(inspection_officer_id__in=(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation__in=designation).values('designation_code')))).values_list('inspection_no',flat=True))
                fech_data=list(set(fech_data1) & set(fech_data2))

            elif len(location_type) ==0 and len(location_code) !=0 and len(designation) ==0 and len(newstatus) !=0 and created_on =='':
                print("9")
                f1=m1.Insp_multi_location.objects.filter(Q(item__in=location_code)).values('inspection_no')
                fech_data=m1.Insp_multi_location.objects.filter(Q(inspection_no__status_flag__in=newstatus),inspection_no_id__in=f1).values('inspection_no')

            elif len(location_type) ==0 and len(location_code)!=0 and len(designation)==0 and len(newstatus)==0 and created_on != '':
                print("10")
                fech_data=list(m1.Insp_multi_location.objects.filter(inspection_no_id__inspected_on__gte=start_date, inspection_no_id__inspected_on__lte=end_date,item__in=location_code).values_list('inspection_no',flat=True))

            elif len(location_type)!=0 and len(location_code)==0 and len(designation)==0 and len(newstatus)!=0 and created_on =='':
                print("11")
                fech_data=[]
                for i in range(len(location_type)):
                    location_type1=location_type[i].split('-')
                    fech_data1=list(m1.Insp_multi_location.objects.filter(inspection_no__status_flag__in=newstatus,item=location_type1[0],type=location_type1[1]).values_list('inspection_no',flat=True))
                    for j in fech_data1:
                        fech_data.append(j)
                
            elif len(location_type)!=0 and len(location_code)==0 and len(designation)==0 and len(newstatus)==0 and created_on !='':
                print("12")
                fech_data=[]
                for i in range(len(location_type)):
                    location_type1=location_type[i].split('-')
                    fech_data1=list(m1.Insp_multi_location.objects.filter(inspection_no_id__inspected_on__gte=start_date, inspection_no_id__inspected_on__lte=end_date,item=location_type1[0],type=location_type1[1]).values_list('inspection_no',flat=True))
                    for j in fech_data1:
                        fech_data.append(j)

            elif len(location_type) ==0 and len(location_code)==0 and len(designation)!=0 and len(newstatus)!=0 and created_on =='':
                print("13")
                fech_data1=list(m1.Insp_multi_location.objects.filter(inspection_no__status_flag__in=newstatus).values_list('inspection_no',flat=True))
                fech_data2=list(m1.Inspection_details.objects.filter(Q(inspection_officer_id__in=(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation__in=designation).values('designation_code')))).values_list('inspection_no',flat=True))
                fech_data=list(set(fech_data1) & set(fech_data2))

            elif len(location_type) ==0 and len(location_code)==0 and len(designation)!=0 and len(newstatus)==0 and created_on!='':
                print("14")
                fech_data1=list(m1.Insp_multi_location.objects.filter(inspection_no_id__inspected_on__gte=start_date, inspection_no_id__inspected_on__lte=end_date).values_list('inspection_no',flat=True))
                fech_data2=list(m1.Inspection_details.objects.filter(Q(inspection_officer_id__in=(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation__in=designation).values('designation_code')))).values_list('inspection_no',flat=True))
                fech_data=list(set(fech_data1) & set(fech_data2))

            elif len(designation) ==0 and len(location_type)==0 and len(location_code)==0 and len(newstatus)!=0 and created_on != '':
                print("15")
                f1=m1.Insp_multi_location.objects.filter(Q(inspection_no__status_flag__in=newstatus)).values('inspection_no')
                fech_data=list(m1.Insp_multi_location.objects.filter(inspection_no_id__inspected_on__gte=start_date, inspection_no_id__inspected_on__lte=end_date, inspection_no_id__in=f1).values_list('inspection_no',flat=True))

            elif len(location_type) !=0 and len(location_code) !=0 and len(designation) ==0 and len(newstatus) !=0 and created_on == '':
                print("16")
                fech_data=[]
                for i in range(len(location_type)):
                    location_type1=location_type[i].split('-')
                    f1=m1.Insp_multi_location.objects.filter(item=location_type1[0],type=location_type1[1]).values('inspection_no')
                    fech_data1=m1.Insp_multi_location.objects.filter(Q(item__in=location_code), inspection_no_id__in=f1,inspection_no__status_flag__in=newstatus).values('inspection_no')
                    for j in fech_data1:
                        fech_data.append(j['inspection_no'])

            elif len(location_type) !=0 and len(location_code) !=0 and len(designation) ==0 and len(newstatus) ==0 and created_on != '':
                print("17")
                fech_data=[]
                for i in range(len(location_type)):
                    location_type1=location_type[i].split('-')
                    f1=m1.Insp_multi_location.objects.filter(item=location_type1[0],type=location_type1[1]).values('inspection_no')
                    fech_data1=m1.Insp_multi_location.objects.filter(Q(item__in=location_code), inspection_no_id__in=f1,inspection_no_id__inspected_on__gte=start_date, inspection_no_id__inspected_on__lte=end_date).values('inspection_no')
                    for j in fech_data1:
                        fech_data.append(j['inspection_no'])

            elif len(location_type) !=0 and len(location_code)==0 and len(designation)==0 and len(newstatus)!=0 and created_on != '':
                print("18")
                fech_data=[]
                for i in range(len(location_type)):
                    location_type1=location_type[i].split('-')
                    f1=m1.Insp_multi_location.objects.filter(item=location_type1[0],type=location_type1[1]).values('inspection_no')
                    fech_data1=m1.Insp_multi_location.objects.filter(inspection_no__status_flag__in=newstatus,inspection_no_id__in=f1,inspection_no_id__inspected_on__gte=start_date, inspection_no_id__inspected_on__lte=end_date).values('inspection_no')
                    for j in fech_data1:
                        fech_data.append(j['inspection_no'])

            elif len(location_type) !=0 and len(location_code)!=0 and len(designation)==0 and len(newstatus)!=0 and created_on != '':
                print("19")
                fech_data=[]
                for i in range(len(location_type)):
                    location_type1=location_type[i].split('-')
                    f1=m1.Insp_multi_location.objects.filter(item=location_type1[0],type=location_type1[1]).values('inspection_no')
                    fech_data1=m1.Insp_multi_location.objects.filter(item__in=location_code,inspection_no__status_flag__in=newstatus,inspection_no_id__in=f1,inspection_no_id__inspected_on__gte=start_date, inspection_no_id__inspected_on__lte=end_date).values('inspection_no')
                    for j in fech_data1:
                        fech_data.append(j['inspection_no'])

            elif len(location_type) ==0 and len(location_code) ==0 and len(dept) ==0 and len(newstatus) ==0 and created_on =='' and len(designation)==0:
                print("20")
                fech_data=list(m1.Insp_multi_location.objects.filter().values_list('inspection_no',flat=True))
                
            elif len(location_type) !=0 and len(location_code)==0 and len(designation)!=0 and len(newstatus)==0 and created_on == '':
                print("21")
                fech_data=[]
                for i in range(len(location_type)):
                    location_type1=location_type[i].split('-')
                    f1=list(m1.Insp_multi_location.objects.filter(item=location_type1[0],type=location_type1[1]).values_list('inspection_no',flat=True))
                    
                    fech_data2=list(m1.Inspection_details.objects.filter(Q(inspection_officer_id__in=(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation__in=designation).values('designation_code')))).values_list('inspection_no',flat=True))
                
                    fech_data1=list(set(f1) & set(fech_data2))
                    for j in fech_data1:
                        fech_data.append(j)

            elif len(location_type) !=0 and len(location_code)!=0 and len(designation)!=0 and len(newstatus)==0 and created_on == '':
                print("22")
                fech_data=[]
                for i in range(len(location_type)):
                    location_type1=location_type[i].split('-')
                    f1=list(m1.Insp_multi_location.objects.filter(item=location_type1[0],type=location_type1[1]).values_list('inspection_no',flat=True))
                    f2=list(m1.Insp_multi_location.objects.filter(item__in=location_code).values_list('inspection_no',flat=True))
                    
                    fech_data2=list(m1.Inspection_details.objects.filter(Q(inspection_officer_id__in=(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation__in=designation).values('designation_code')))).values_list('inspection_no',flat=True))
                
                    fech_data1=list(set(f1) & set(fech_data2) & set(f2))
                    for j in fech_data1:
                        fech_data.append(j)

            elif len(location_type) ==0 and len(location_code) !=0 and len(designation)!=0 and len(newstatus)!=0 and created_on =='':
                print("23")
                fech_data1=list(m1.Insp_multi_location.objects.filter(Q(item__in=location_code),inspection_no__status_flag__in=newstatus).values_list('inspection_no',flat=True))
                fech_data2=list(m1.Inspection_details.objects.filter(Q(inspection_officer_id__in=(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation__in=designation).values('designation_code')))).values_list('inspection_no',flat=True))
                fech_data=list(set(fech_data1) & set(fech_data2))

            elif len(location_type) ==0 and len(location_code) !=0 and len(designation)!=0 and len(newstatus)==0 and created_on !='':
                print("24")
                fech_data1=list(m1.Insp_multi_location.objects.filter(Q(item__in=location_code),inspection_no_id__inspected_on__gte=start_date, inspection_no_id__inspected_on__lte=end_date).values_list('inspection_no',flat=True))
                fech_data2=list(m1.Inspection_details.objects.filter(Q(inspection_officer_id__in=(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation__in=designation).values('designation_code')))).values_list('inspection_no',flat=True))
                fech_data=list(set(fech_data1) & set(fech_data2))

            elif len(designation) ==0 and len(location_type)==0 and len(location_code)!=0 and len(newstatus)!=0 and created_on != '':
                print("25")
                f1=m1.Insp_multi_location.objects.filter(Q(inspection_no__status_flag__in=newstatus)).values('inspection_no')
                fech_data=m1.Insp_multi_location.objects.filter(inspection_no_id__inspected_on__gte=start_date, inspection_no_id__inspected_on__lte=end_date, inspection_no_id__in=f1,item__in=location_code).values('inspection_no')

            elif len(location_type) !=0 and len(location_code)==0 and len(designation)!=0 and len(newstatus)!=0 and created_on == '':
                print("26")
                fech_data=[]
                for i in range(len(location_type)):
                    location_type1=location_type[i].split('-')
                    f1=list(m1.Insp_multi_location.objects.filter(item=location_type1[0],type=location_type1[1],inspection_no__status_flag__in=newstatus).values_list('inspection_no',flat=True))
                    fech_data2=list(m1.Inspection_details.objects.filter(Q(inspection_officer_id__in=(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation__in=designation).values('designation_code')))).values_list('inspection_no',flat=True))
                
                    fech_data1=list(set(f1) & set(fech_data2))
                    for j in fech_data1:
                        fech_data.append(j)

            elif len(location_type) !=0 and len(location_code)==0 and len(designation)!=0 and len(newstatus)==0 and created_on != '':
                print("27")
                fech_data=[]
                for i in range(len(location_type)):
                    location_type1=location_type[i].split('-')
                    f1=list(m1.Insp_multi_location.objects.filter(item=location_type1[0],type=location_type1[1],inspection_no_id__inspected_on__gte=start_date, inspection_no_id__inspected_on__lte=end_date).values_list('inspection_no',flat=True))
                    
                    fech_data2=list(m1.Inspection_details.objects.filter(Q(inspection_officer_id__in=(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation__in=designation).values('designation_code')))).values_list('inspection_no',flat=True))
                
                    fech_data1=list(set(f1) & set(fech_data2))
                    for j in fech_data1:
                        fech_data.append(j)
            
            elif len(location_type) ==0 and len(location_code) !=0 and len(designation)!=0 and len(newstatus)!=0 and created_on !='':
                print("29")
                fech_data1=list(m1.Insp_multi_location.objects.filter(Q(item__in=location_code),inspection_no_id__inspected_on__gte=start_date, inspection_no_id__inspected_on__lte=end_date,inspection_no__status_flag__in=newstatus).values_list('inspection_no',flat=True))
                fech_data2=list(m1.Inspection_details.objects.filter(Q(inspection_officer_id__in=(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation__in=designation).values('designation_code')))).values_list('inspection_no',flat=True))
                fech_data=list(set(fech_data1) & set(fech_data2))

            elif len(location_type) !=0 and len(location_code)!=0 and len(designation)!=0 and len(newstatus)!=0 and created_on == '':
                print("30")
                fech_data=[]
                for i in range(len(location_type)):
                    location_type1=location_type[i].split('-')
                    f1=list(m1.Insp_multi_location.objects.filter(item=location_type1[0],type=location_type1[1]).values_list('inspection_no',flat=True))
                    f2=list(m1.Insp_multi_location.objects.filter(item__in=location_code,inspection_no__status_flag__in=newstatus).values_list('inspection_no',flat=True))
                    
                    fech_data2=list(m1.Inspection_details.objects.filter(Q(inspection_officer_id__in=(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation__in=designation).values('designation_code')))).values_list('inspection_no',flat=True))
                
                    fech_data1=list(set(f1) & set(fech_data2) & set(f2))
                    for j in fech_data1:
                        fech_data.append(j)

            else:
                print("28")
                fech_data=m1.Insp_multi_location.objects.filter().values('inspection_no')

            if obser == '':
                print("obser is null")
                # ins1=list(m1.Inspection_details.objects.filter(inspection_no__in=fech_data).values().exclude(status_flag=0))
                ins2=list(m1.Inspection_details.objects.filter(inspection_no__in=fech_data).values().order_by('inspection_officer_id').exclude(status_flag=0))
                ins=ins2
                
                
                            
                for i in ins:
                    location = list(m1.Insp_multi_location.objects.filter(inspection_no=i['inspection_no']).values())
                   
                    i.update({'location_item': location})
                    
                    
            else:
                print("obser is not null")
                ins=[]
                print("fech_data",fech_data)
                listsearch=list(m1.Item_details.objects.filter(observation__icontains=obser,inspection_no_id__in=fech_data).values('item_no','observation','inspection_no_id__inspected_on','inspection_no_id','inspection_no_id__inspection_officer_id__designation','inspection_no_id__status_flag').distinct().exclude(inspection_no_id__status_flag=0))
                # print(listsearch)
                for i in range(len(listsearch)):
                    
                    if listsearch[i]['inspection_no_id__inspected_on']!=None:
                        x=listsearch[i]['inspection_no_id__inspected_on'].strftime('%d'+'-'+'%m'+'-'+'%Y')
                        listsearch[i].update({'inspection_no_id__inspected_on':x})
                    
                # print(listsearch)
            return JsonResponse({'ins':ins,'listsearch':listsearch}, safe=False)
        return JsonResponse({'success':False}, status=400)
     
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="fetch_desig_ajax",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})



def reset_data(request):  
    try: 
        if request.method == "GET" and request.is_ajax():
            list1=models.railwayLocationMaster.objects.filter(location_type='ZR').values('location_code')
            list2=[]
            for i in list1:
                list2.append(i['location_code'])    
            #print(list2,'zones')
            list3=models.railwayLocationMaster.objects.filter(location_type='DIV').values('location_code')
            list4=[]
            for i in list3:
                list4.append(i['location_code'])    
            #print(list4,'divisions')
            list5=models.departMast.objects.all().values('department_name')
            list6=[]
            for i in list5:
                #print(i['department_name'],'department')
                list6.append(i['department_name'])  
        return JsonResponse({'change_rly':list2,'change_div':list4,'change_dept':list6})
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="reset_data",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})



from django.template.loader import get_template
from xhtml2pdf import pisa

from xhtml2pdf import pisa

def search_location_detail(request, pk):
    try:
        info=list(m1.Inspection_details.objects.filter(inspection_no=pk).values().distinct())
        #convert date dd-mm-yyyy
        for i in range(len(info)):
            if info[i]['inspected_on']!=None:
                x=info[i]['inspected_on'].strftime('%d'+'-'+'%m'+'-'+'%Y')
                info[i].update({'inspected_on':x})
        
        # pdf generate code
        # inspectionDetails=m1.Inspection_details.objects.filter(inspection_no=pk)
        # itemDetails=m1.Item_details.objects.filter(inspection_no=inspectionDetails[0].inspection_no)
        
        # print(itemDetails[0].observation)
        

        obj={}
        total=1
        for m2 in info:
            #convert date dd-mm-yyyy
            # x=m1.Inspection_details.objects.filter(inspection_no=m2['inspection_no_id'])[0].inspected_on
            # x=x.strftime('%d'+'-'+'%m'+'-'+'%Y')
            # inspectionDetails=m1.Inspection_details.objects.filter(inspection_no=pk)
            # itemDetails=m1.Item_details.objects.filter(inspection_no=inspectionDetails[0].inspection_no)
            #print(itemDetails[0].observation)
        
            
            # print(itemDetails[0].modified_on)
            
            temdata = {str(total):{"inspection_no":m2['inspection_no'], 
                                'inspection_note_no':m2['inspection_note_no'],
                                #    'inspection_officer':m2['inspection_officer'],
                                'zone':m2['zone'],
                                #    'observation':itemDetails[0].observation,
                                #    'modified_on':itemDetails[0].modified_on,
                                'division':m2['division'],
                                'location':m2['location'],
                                'inspected_on':m2['inspected_on'],
                                'modified_on':m2['modified_on']}}
            print(temdata, 'gfggggggggggggggggggggggggggggggggg')
            
        
            
            obj.update(temdata)
            total=total+1
            # print(temdata,"********************") 
        
        # print(obj,'tyyytytytytytytytytyty')
        lent=len(obj)
        # print(lent, 'xxxxxxxxxxxxxxxxxxxxxxxxxxxx')

        context={'info':info, 'obj': obj, 'lent':lent,}
        pdf=render_to_pdf('search_location_detail.html', context) 
        return HttpResponse(pdf, content_type='application/pdf')
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="search_location_detail",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})

def search_list_created_checklist(request):
    try:
        obj=m1.Inspection_Checklist.objects.filter().values('checklist_id','version', 'checklist_title','inspection_type','status','created_by','created_on','delete_flag','department_id')[::-1]
        # print(obj)
        for i in range(len(obj)):
            if obj[i]['department_id']:
                a=models.departMast.objects.filter(department_code=obj[i]['department_id']).values('department_name')[0]['department_name']
                obj[i].update({'department_id':a})
            if obj[i]['created_on']!=None:
                x=obj[i]['created_on'].strftime('%d'+'/'+'%m'+'/'+'%y')
                obj[i].update({'created_on':x})
                
        context={'obj':obj}
        template_name='search_list_created_checklist.html'
            
        return render(request, template_name, context)
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="search_list_created_checklist",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})


from .forms import *
import  json

def add_category_type(request):
    try:
        if request.method == 'POST':
            department=request.POST.get('department')
            print(department,'qwert')
            dept=list(m1.category_add.objects.filter(department_name=department).values('category_name').distinct('category_name'))
            print('dept',dept)
            return JsonResponse({'dept':dept})
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="add_category",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
    return render(request, "search_createchecklist.html", {})

def add_category(request):
    try:
        if request.method == 'POST' or request.is_ajax():
            # current_user = request.user
            # emp=empmast.objects.get(pk=current_user.username)
            emp=m1.empmast.objects.all()   
            
            # dept1 = request.POST.get('dept1')
            # post_name = request.POST.get('post_name')
            categoryname=request.POST.get('categoryname')
            department=request.POST.get('department')
         
            print(categoryname)
            print(department)
            dept_id=models.departMast.objects.filter(department_code=department)[0]
            # print(dept_id)
        
            m1.category_add.objects.create(category_name=categoryname,department_name=dept_id)
            
            messages.success(request,'Data saved successfully')
            
                
        return JsonResponse({'saved':'save'})
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="add_category",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
    return render(request, "myadmin_errors.html", {})
    
def search_createchecklist(request):
    try:
        if request.method =='POST':
            # import pdb
            # pdb.set_trace()
            checklist_title=request.POST.get('checklist_title')
            #print(checklist_title)
            inspection_type=request.POST.get('inspection_type')
            #print(inspection_type)
            activities=request.POST.getlist('activities')
            #print(activities)
            status=request.POST.get('draft')
            #print(status)
            # activities = ['test1','test2']
            # contex={'checklist_title','inspection_type'}
            
            # createchecklist=m1.Inspection_Checklist(checklist_title=checklist_title, inspection_type=inspection_type, status=status)
            
            # createchecklist.save()
            # print(createchecklist)
            # # inspection_Activity
            # for i in range(len(activities)):
            #     inspection_Activity=m1.Inspection_Activity(activities=activities[i])
            #     inspection_Activity.checklist_id=Inspection_Checklist.objects.get(checklist_id=createchecklist.checklist_id)
            #     inspection_Activity.save()
            
            # return redirect('/search_list_created_checklist/')
        list6=models.departMast.objects.all().values('department_name','department_code').order_by('department_name')
        #list6=[]
        # for i in list5:
        #     # print(i['department_name'],'_________')
        #     print(i['department_code'],'_________')
        #     list6.append(i['department_name'])
            
        obj=m1.Inspection_Checklist.objects.all().order_by('checklist_title').distinct('checklist_title')
        
        return render(request, 'search_createchecklist.html', {"INSPECTION_TYPE":INSPECTION_TYPE, 'obj':obj,'dept':list6 })
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="search_createchecklist",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})
@csrf_exempt
def admin_checklist(request):
    try:
        if request.method== 'POST':
            checklist_title=request.POST.get('checklist_title')
            #print(checklist_title)
            inspection_type=request.POST.get('inspection_type')
            #print(inspection_type)
            activities=request.POST.get('activit1')
            #print(activities)
            Version=request.POST.get('checklist_version')
            #print(Version)
            dept_type=request.POST.get('dept_type')
            #print(dept_type)
            # status=request.POST.get('draft')
            # print(status)
            btnValues=request.POST.get('btnValues')
            #print(btnValues, 'BTN VALUR FSGGS JSJS')
        
        
            # empnox = models.Level_Desig.objects.exclude(delete_flag=True).filter(Q(official_email_ID=request.user) | Q(official_email_ID=request.user.email), empno__isnull=False)
            # print('==============', len(empnox[0].empno_id))

            # if empnox:
            #     empno = empnox[0].empno_id
            # else:
            #     messages.error(request, 'You are not authorize to create inspection. Please contact to admin')
        
                        
            if btnValues == 'Save as draft':
                m1.Inspection_Checklist.objects.create(department_id=dept_type,version=Version,checklist_title=checklist_title, inspection_type=inspection_type, delete_flag=0, status='Draft')
                checklist_id=m1.Inspection_Checklist.objects.all().last().checklist_id
            
            data = json.loads(activities)
            for i in data:
                m1.Inspection_Activity.objects.create(activities=i['activ'], checklist_id_id=checklist_id,delete_flag=0 )
                

            return JsonResponse({'success':True}, status=200)
        return JsonResponse({'success':False}, status=400)
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="admin_checklist",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})


@csrf_exempt
def admin_checklist_final(request):
    try:
        if request.method== 'POST':
            checklist_title=request.POST.get('checklist_title')
            #print(checklist_title)
            inspection_type=request.POST.get('inspection_type')
            #print(inspection_type)
            activities=request.POST.get('activit1')
            Version=request.POST.get('checklist_version')
            #print(activities)
            #print(Version)
            dept_type=request.POST.get('dept_type')
            #print(dept_type)
            # status=request.POST.get('submit')
            # print(status)
            btnValues=request.POST.get('btnValues')
            #print(btnValues, 'BTN VALUR FSGGS JSJS')
            
            # empnox = models.Level_Desig.objects.exclude(delete_flag=True).filter(Q(official_email_ID=request.user) | Q(official_email_ID=request.user.email), empno__isnull=False)
            # if empnox:
            #     empno = empnox[0].empno_id
            # else:
            #     messages.error(request, 'You are not authorize to create inspection. Please contact to admin')
        
                        
            if btnValues == 'Submit':
                m1.Inspection_Checklist.objects.create(department_id=dept_type,checklist_title=checklist_title, inspection_type=inspection_type, status='Finalized', delete_flag=1,version=Version)
                checklist_id=m1.Inspection_Checklist.objects.all().last().checklist_id
            
            data = json.loads(activities)
            for i in data:
                m1.Inspection_Activity.objects.create(activities=i['activ'], checklist_id_id=checklist_id, delete_flag=1 )
                

            return JsonResponse({'success':True}, status=200)
        return JsonResponse({'success':False}, status=400)
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="admin_checklist_final",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})


def search_editchecklist(request, pk):
    try:
        inspection_Check=m1.Inspection_Checklist.objects.get(checklist_id=pk)
        
        ass=m1.Inspection_Activity.objects.filter(checklist_id=int(inspection_Check.checklist_id)).values('activity_id','activities')
        asscount=m1.Inspection_Activity.objects.filter(checklist_id=int(inspection_Check.checklist_id)).count()
        list6=models.departMast.objects.all().values('department_name','department_code').order_by('department_name')
        inspection_Checklist=models.departMast.objects.filter(department_code= inspection_Check.department_id).values_list('department_code', flat=True).order_by('department_name')
        # print(inspection_Checklist,'aaaaaaaaaaaaa')
        # list6=[]
        # for i in list5:
        #     # print(i['department_name'],'_________')
        #     list6.append(i['department_name'])
        
        return render(request, 'search_updatechecklist.html',{'ass':ass, 'inspection_Check':inspection_Check,'asscount':asscount, 'dept':list6, 'inspection_Checklist':inspection_Checklist, "INSPECTION_TYPE":INSPECTION_TYPE, 'checklist_no': pk })
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="search_editchecklist",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})



@csrf_exempt
def admin_checklist_final_update(request):
    try:
        if request.method== 'POST' and request.is_ajax():
            checklist_title=request.POST.get('checklist_title')
            #print(checklist_title)
            inspection_type=request.POST.get('inspection_type')
            #print(inspection_type)
            activities=request.POST.get('activit1')
            #print(activities)
            # status=request.POST.get('submit')
            # print(status)
            dept_type=request.POST.get('dept_type')
            #print(dept_type)
            btnValues=request.POST.get('btnValues')
            #print(btnValues, 'BTN VALUR FSGGS JSJS')
            checklist_id=request.POST.get('checklist_id')
            # empnox = models.Level_Desig.objects.exclude(delete_flag=True).filter(Q(official_email_ID=request.user) | Q(official_email_ID=request.user.email), empno__isnull=False)
            # if empnox:
            #     empno = empnox[0].empno_id
            # else:
            #     messages.error(request, 'You are not authorize to create inspection. Please contact to admin')
        
            #print(checklist_id, '-----------------------')     
            if btnValues == 'Submit':
                
                m1.Inspection_Checklist.objects.filter(checklist_id=checklist_id).update(department_id=dept_type,checklist_title=checklist_title, inspection_type=inspection_type, status='Finalized', delete_flag=1)
            
            data = json.loads(activities)
            if m1.Inspection_Activity.objects.filter(checklist_id_id=checklist_id).exists():
                #print('======================', checklist_id)
                m1.Inspection_Activity.objects.filter(checklist_id_id=checklist_id).delete()
                for i in data:
                    m1.Inspection_Activity.objects.create(activities=i['activ'], checklist_id_id=checklist_id, delete_flag=1 )
                
            else:
                for i in data:
                    m1.Inspection_Activity.objects.create(activities=i['activ'], checklist_id_id=checklist_id, delete_flag=1 )
                
            

            return JsonResponse({'success':True}, status=200)
        return JsonResponse({'success':False}, status=400)
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="admin_checklist_final_update",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})


@csrf_exempt
def admin_checklist_update(request):
    try:
        if request.method== 'POST' and request.is_ajax():
            checklist_title=request.POST.get('checklist_title')
            #print(checklist_title)
            inspection_type=request.POST.get('inspection_type')
            #print(inspection_type)
            activities=request.POST.get('activit1')
            #print(activities)
            # status=request.POST.get('draft')
            # print(status)
            dept_type=request.POST.get('dept_type')
            #print(dept_type)
            btnValues=request.POST.get('btnValues')
            #print(btnValues, 'BTN VALUR FSGGS JSJS')
            
            checklist_id=request.POST.get('checklist_id')
            # empnox = models.Level_Desig.objects.exclude(delete_flag=True).filter(Q(official_email_ID=request.user) | Q(official_email_ID=request.user.email), empno__isnull=False)
            # if empnox:
            #     empno = empnox[0].empno_id
            # else:
            #     messages.error(request, 'You are not authorize to create inspection. Please contact to admin')
        
            #print(checklist_id, '-----------------------')     
            if btnValues == 'Save as draft':
                
                m1.Inspection_Checklist.objects.filter(checklist_id=checklist_id).update(department_id=dept_type,checklist_title=checklist_title, inspection_type=inspection_type, delete_flag=0, status='Draft')
            
            data = json.loads(activities)
            if m1.Inspection_Activity.objects.filter(checklist_id_id=checklist_id).exists():
                #print('======================', checklist_id)
                m1.Inspection_Activity.objects.filter(checklist_id_id=checklist_id).delete()
                for i in data:
                    m1.Inspection_Activity.objects.create(activities=i['activ'], checklist_id_id=checklist_id, delete_flag=0 )
                
            else:
                for i in data:
                    m1.Inspection_Activity.objects.create(activities=i['activ'], checklist_id_id=checklist_id, delete_flag=0 )
                
            

            return JsonResponse({'success':True}, status=200)
        return JsonResponse({'success':False}, status=400)
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="admin_checklist_update",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})


def admin_checklistpdf(request, activity_id):
    try:
        info=list(m1.Inspection_Activity.objects.filter(checklist_id=activity_id).values('activity_id','activities','created_on','created_by','created_on','checklist_id_id__status','checklist_id_id__inspection_type','checklist_id_id__version','checklist_id_id__checklist_title','checklist_id_id__created_on').distinct())
        #convert date dd-mm-yyyy
        for i in range(len(info)):
            if info[i]['created_on']!=None:
                x=info[i]['created_on'].strftime('%d'+'-'+'%m'+'-'+'%Y')
                info[i].update({'created_on':x})
        obj={}
        total=1
        checklist_1=info[0]['checklist_id_id__inspection_type']
        checklist_2=info[0]['checklist_id_id__checklist_title']
        checklist_3=info[0]['checklist_id_id__created_on']
        checklist_4=info[0]['checklist_id_id__version']
        checklist_5=info[0]['checklist_id_id__status']

        
        for m2 in info:
            temdata = {str(total):{"activity_id":m2['activity_id'], 
                                'activities':m2['activities'],
                                'created_by':m2['created_by'],
                                'created_on':m2['created_on']}}
            #print(temdata, 'gfggggggggggggggggggggggggggggggggg')
            #print(info, 'vissssss')
            obj.update(temdata)
        
            total=total+1
            # print(temdata,"********************") 
        
        # print(obj,'tyyytytytytytytytytyty')
        lent=len(obj)
        #print(lent, 'xxxxxxxxxxxxxxxxxxxxxxxxxxxx')

        context={'obj': obj, 'info':info, 'lent':lent,'one': checklist_1,'two':checklist_2, 'three':checklist_3,'four':checklist_4,'ten':checklist_5}
        template_src='admin_checklistpdf.html'
        return render_to_pdf(template_src, context)
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="admin_checklistpdf",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})
def admin_checklist_version(request):
    try:
        if request.method== 'GET':
            
            checklist_version=request.GET.get('checklist_version')
            #print(checklist_version)
            checklist_title=request.GET.get('checklist_title')
            #print(checklist_title)
            
            if m1.Inspection_Checklist.objects.filter(version=checklist_version,checklist_title=checklist_title).exists():
                
                x = True
                y=checklist_version 
            else:
                x = False
                
            context={'ver2':checklist_version, 'x':x}
            
            return JsonResponse(context, safe=False)
        return JsonResponse({'success':False}, status=400)
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="admin_checklist_version",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})




def checklistReportPdf(request, activity_id):
    try:
        info=list(m1.Inspection_Activity.objects.filter(checklist_id=activity_id).values().distinct())
        
        #convert date dd-mm-yyyy
        for i in range(len(info)):
            if info[i]['created_on']!=None:
                x=info[i]['created_on'].strftime('%d'+'-'+'%m'+'-'+'%Y')
                info[i].update({'created_on':x})
        
        obj={}
        total=1
        for m2 in info:
        
            temdata = {str(total):{"activity_id":m2['activity_id'], 
                                'activities':m2['activities'],
                                #    'inspection_officer':m2['inspection_officer'],
                                'created_on':m2['created_on'],
                                #    'observation':itemDetails[0].observation,
                                #    'modified_on':itemDetails[0].modified_on,
                                'created_on':m2['created_on']}}
            print(temdata, 'gfggggggggggggggggggggggggggggggggg')
            
        
            
            obj.update(temdata)
            total=total+1
            # print(temdata,"********************") 
        
        # print(obj,'tyyytytytytytytytytyty')
        lent=len(obj)
        # print(lent, 'xxxxxxxxxxxxxxxxxxxxxxxxxxxx')

        context={'info':info, 'obj': obj, 'lent':lent,}
        
        template_src='checklistReportPdf.html'
        return render_to_pdf(template_src, context)
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="checklistReportPdf",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})



def search_delete_flag(request, pk):
    try:
        # print('APPELLLLLL',pk)
        flag=m1.Inspection_Checklist.objects.filter(checklist_id=pk).update(delete_flag='True')
        # flag.status=="Draft"
        # flag.save()
        return HttpResponseRedirect('/search_list_created_checklist/')  
    except Exception as e: 
        # print('Except: ',e)
        try:
            m1.error_Table.objects.create(fun_name="search_delete_flag",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})



def search_delete_enable_flag(request, pk):
    try:
        flag=m1.Inspection_Checklist.objects.filter(checklist_id=pk).update(delete_flag='False')
        # flag.status=="Finalized"
        # flag.save()
        return HttpResponseRedirect('/search_list_created_checklist/') 
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="search_delete_enable_flag",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})

def delete_checklist_ajax(request):
    try:
        if request.method == 'GET' and request.is_ajax():
            checklist_id = request.GET.get('checklist_id')
            #print('helllp',checklist_id)
            
            if m1.Inspection_Checklist.objects.filter(checklist_id=checklist_id).exists():
                m1.Inspection_Checklist.objects.filter(checklist_id=checklist_id).delete()
                #print('gggggggggg')
                #m1.Inspection_Activity.objects.filter(checklist_id=checklist_id).delete()
                #print('rrrrrrrrrrrrrrrrrr')
            return JsonResponse({'success': 'del'}, safe = False)
        return JsonResponse({'success': False}, status=404)
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="delete_checklist_ajax",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})


def search_checklist_detail(request, pk):
    try:
        info=list(m1.Inspection_Checklist.objects.filter(checklist_id=pk).values().distinct())
        #convert date dd-mm-yyyy
        for i in range(len(info)):
            if info[i]['created_on']!=None:
                x=info[i]['created_on'].strftime('%d'+'-'+'%m'+'-'+'%Y')
                info[i].update({'created_on':x})
                
        obj={}
        total=1
        for m2 in info:

            
            temdata = {str(total):{"checklist_id":m2['checklist_id'], 
                                'checklist_title':m2['checklist_title'],
                                'created_on':m2['created_on'],
                                'created_by':m2['created_by'],
                                
                                'inspection_type':m2['modified_on']}}
            #print(temdata, 'gfggggggggggggggggggggggggggggggggg')
            obj.update(temdata)
            total=total+1
            # print(temdata,"********************") 
        
        # print(obj,'tyyytytytytytytytytyty')
        lent=len(obj)
        # print(lent, 'xxxxxxxxxxxxxxxxxxxxxxxxxxxx')

        context={'info':info, 'obj': obj, 'lent':lent,}
        pdf=render_to_pdf('search_checklist_detail.html', context) 
        return HttpResponse(pdf, content_type='application/pdf')
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="search_checklist_detail",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})


def search_checklist_views(request, pk):
    try:
        inspection_Checklist=m1.Inspection_Checklist.objects.get(checklist_id=pk)
        #print(inspection_Checklist)
        ass=m1.Inspection_Activity.objects.filter(checklist_id=int(inspection_Checklist.checklist_id)).values('activities')
        #print(ass, 'ddddddddddddddddddddddddddddd')
        
        
        return render(request, 'search_checklist_views.html',{'ass':ass,'inspection_Checklist':inspection_Checklist, "INSPECTION_TYPE":INSPECTION_TYPE })
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="search_checklist_views",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})


@csrf_exempt
def search_checklist_ajax(request):
    try:
        if request.method== 'POST' and request.is_ajax():
            checklist_title=request.POST.get('checklist_title')
            #print(checklist_title)
            inspection_type=request.POST.get('inspection_type')
            #print(inspection_type)
            act=request.POST.get('activities')
            #print(act)
            btnValues=request.POST.get('btnValues')
            # checklist_id=request.POST.get('checklist_id')
            if btnValues == 'Draft':
                m1.Inspection_Checklist.objects.create(checklist_title=checklist_title, inspection_type=inspection_type, status='Draft')
                checklist_id=m1.Inspection_Checklist.objects.all().last().created_on
                
            data = json.loads(act)
            for i in data:
                m1.Inspection_Activity.objects.create(act=i['activities'], checklist_no_id=checklist_id)
            
            return JsonResponse({'success':True}, status=200)
        return JsonResponse({'success':False}, status=400)   
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="search_checklist_ajax",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})




def search_checklist_template(request):
    try:
        obj=m1.Inspection_Checklist.objects.filter(status='Finalized').values('checklist_id', 'checklist_title','inspection_type','status','created_by','created_on','delete_flag')[::-1]
        # print(obj)
        for i in range(len(obj)):
            if obj[i]['created_on']!=None:
                x=obj[i]['created_on'].strftime('%d'+'-'+'%m'+'-'+'%Y')
                obj[i].update({'created_on':x})
        
                
        context={'obj':obj}
        template_name='search_checklist_template.html'
            
        return render(request, template_name, context)
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="search_checklist_template",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})



def search_checklist_template_report(request, pk):
    try:
        inspection_Checklist=m1.Inspection_Checklist.objects.get(checklist_id=pk)
        #print(inspection_Checklist)
        
        ass=m1.Inspection_Activity.objects.filter(checklist_id=int(inspection_Checklist.checklist_id)).values('activities')
        ass_count=m1.Inspection_Activity.objects.filter(checklist_id=int(inspection_Checklist.checklist_id)).count()+1
        #print(ass, 'ddddddddddddddddddddddddddddd')   
        empdata=list(m1.empmast.objects.values('empmname','empno','desig_longdesc').distinct())
        # empdata=list(m1.empmast.objects.filter(myuser_id_id=request.user).values('empmname','empno', 'desig_longdesc').distinct())
        #print(empdata, ';;;;;;;;;;;;;;;;;;;;;;;;;;;;)')
        desig_longdesc = empdata[0]['desig_longdesc']
        desg_no=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation__isnull=False,empno__isnull=False).values('designation','empno','designation_code').order_by('designation'))
        for i in range(len(desg_no)):
            if '/' in desg_no[i]['designation']:
                r_des=desg_no[i]['designation'].replace('/',' ')
            elif '.' in desg_no[i]['designation']:
                r_des=desg_no[i]['designation'].replace('.',' ')
            else:
                r_des=desg_no[i]['designation']
            desg_no[i].update({'empnoser':r_des})
            
        # print('ttttttttttttttttttttttttttttttttttttttttttttttttttttttt', desig_longdesc)
        list1=models.railwayLocationMaster.objects.filter(Q(location_type_desc='RAILWAY BOARD')|Q(location_type_desc='HEAD QUATER')|Q(location_type_desc='PRODUCTION UNIT')|Q(location_type_desc='OFFICE')).values('location_code').order_by('location_code')
        list2=[]
        for i in list1:
            list2.append(i['location_code'])
            list3=models.railwayLocationMaster.objects.filter(Q(location_type_desc='DIVISION')|Q(location_type_desc='WORKSHOP')|Q(location_type_desc='INSTITUTE')|Q(location_type_desc='STORE')|Q(location_type_desc='CONSTRUCTION')).values('location_code').order_by('location_code')
            list4=[]
            for i in list3:
                list4.append(i['location_code']) 
            list6=models.departMast.objects.all().values('department_name')
            alldesig=models.Level_Desig.objects.exclude(delete_flag=True).values('designation').distinct().order_by('designation')
        
        
        
        context={
            'Zone':list2 ,
            'division':list4,
            'department':list6,
            'alldesig':alldesig,
            'desig': desig_longdesc,
            'inspection_Checklist':inspection_Checklist,
            'ass':ass,
            'ass_count': ass_count,
            'desg_no':desg_no,
        
        
            }
        
        return render(request, 'search_checklist_template_report.html',context)
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="search_checklist_template_report",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})


      
@csrf_exempt
def search_checklist_template_ajax(request):
    try:
        if request.method== 'POST' and request.is_ajax():
            mydata= json.loads(request.POST.get("mydata"))
            obs_notes=request.POST.get('obs_notes')
            obs_good=request.POST.get('obs_good')
            obs_award=request.POST.get('obs_award')
        
            #markofficer save
            
            # railway saves
            from datetime import datetime
            rly=json.loads(request.POST.get('zone'))
            div=json.loads(request.POST.get('division'))
            dept=json.loads(request.POST.get('department'))
            loc=json.loads(request.POST.get('location'))
            insp_date=request.POST.get('inspection_date').split('to')
            
            st_date = insp_date[0].strip()
            en_date = insp_date[1].strip()
            
            #print(loc, '-------------------------------------------------------------')

            start_date = datetime.strptime(st_date, '%d/%m/%Y').strftime('%Y-%m-%d')
        
            inspected_on = datetime.strptime(en_date, '%d/%m/%Y').strftime('%Y-%m-%d')
        
            
            
            title=request.POST.get('titleinsp')
            
            #print(title,'111111111111111111111111')
            #inspection_no=request.POST.get('inspection_no')
            btnValues=request.POST.get('btnValues')
            
            
            # checklist_id=request.POST.get('checklist_id')
            if btnValues == 'Save as draft':
                # inspect_date = datetime.strptime(insp_date, '%d-%m-%Y').strftime('%Y-%m-%d')
                # print(inspect_date, 'ddddddddddddyyyyyyyyyyyyyyyyyyyyymmmmmmmmmmmmmmmmm')
                
                empnox = models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=request.user)| Q(official_email_ID=request.user.guest_email) | Q(official_email_ID=request.user.email), empno__isnull=False)
                # print('==============', empnox[0].empno)
                if empnox:
                    empno = empnox[0].empno_id
                    design = empnox[0].designation_code
            
                else:
                    messages.error(request, 'You are not authorize to create inspection. Please contact to admin')
                        
                m1.Inspection_details.objects.create(inspection_title=title, created_on=datetime.now(), item_type="Chk", status_flag=0, modified_by=empno, inspection_officer_id=design, created_by=empno, start_date=start_date, inspected_on=inspected_on)

                inspection_id=m1.Inspection_details.objects.all().last().inspection_no
                
                for rl in rly:
                    m1.Insp_multi_location.objects.create(inspection_no_id=inspection_id, item=rl, type='HQ')
                for di in div:
                    m1.Insp_multi_location.objects.create(inspection_no_id=inspection_id, item=di, type='DIV')
                for dp in dept:
                    m1.Insp_multi_location.objects.create(inspection_no_id=inspection_id, item=dp, type='DPT')
                for lo in loc:
                    m1.Insp_multi_location.objects.create(inspection_no_id=inspection_id, item=lo, type='LOC')
            
            # ojb1 = m1.Inspection_Activity.objects.filter(checklist_id_id='checklist_id_id')
            # for i in ojb1:
                # obj2=m1.Inspection_Activity.objects.filter(checklist_id=i.checklist_id)
                # print(obj2) 
                
                # print(i)
                # m1.Item_details.objects.create(checklist_id=i.checklist_id)
                
            
            for i in mydata:
                #print(i, 'qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq')
                date_change=datetime.strptime(i['targetdate'], '%d-%m-%Y').strftime('%Y-%m-%d')
                    
                #print(date_change)
                m1.Item_details.objects.create(observation=i['obser'], target_date=date_change, priority=i['checkbox'], type='CL', status='Draft',inspection_no_id=inspection_id, status_flag=0)
                markeofficer = i['markeofficer'].split(',')
                item_no = m1.Item_details.objects.values('item_no').last()
                item_no= item_no['item_no']
                if markeofficer:
                    #mark officer
                    for j in markeofficer:
                        
                        Desig=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=j)
                        if Desig:
                            Desig=Desig[0].designation_code
                            if m1.Marked_Officers.objects.all().last():
                                marked_no_id=(m1.Marked_Officers.objects.all().last().marked_no)+1
                            else:
                                marked_no_id = 1
                            m1.Marked_Officers.objects.create(created_on=datetime.now(),marked_no=marked_no_id, created_by=empno,status_flag=0,item_no_id=item_no,marked_to_id=Desig)
                        else:
                            print('error')
                else:
                    markeofficer=''
                
            aw_not = json.loads(obs_notes)
            
            for n in aw_not:
                #print(n, 'notenotenotenotenotenotenotenotenotenotenotenotenotenotenote')
                m1.Item_details.objects.create(observation=n['note'], type='OT', status='Draft', inspection_no_id=inspection_id, status_flag=0)
            
            aw_good = json.loads(obs_good)
            for g in aw_good:
                #print(g, 'aw_goodaw_goodaw_goodaw_goodaw_goodaw_goodaw_goodaw_good')
                m1.Item_details.objects.create(observation=g['good'], type='GW', status='Draft',inspection_no_id=inspection_id, status_flag=0)
            
            aw_data = json.loads(obs_award)
            #print(aw_data, aw_good, aw_not)
            for a in aw_data:
                #print(a, 'aw_dataaw_dataaw_dataaw_dataaw_dataaw_dataaw_data')
                m1.Item_details.objects.create(observation=a['award'], type='A', status='Draft',inspection_no_id=inspection_id, status_flag=0)        
        
            return JsonResponse({'success':True}, status=200)
        return JsonResponse({'success':False}, status=400)
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="search_checklist_template_ajax",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})



@csrf_exempt
def search_checklist_template_submit_ajax(request):
    try:
        if request.method== 'POST' and request.is_ajax():
            
            mydata= json.loads(request.POST.get("mydata"))
            obs_notes=request.POST.get('obs_notes')
            obs_good=request.POST.get('obs_good')
            obs_award=request.POST.get('obs_award')
        
            #markofficer save
            
            # railway saves
            from datetime import datetime
            rly=json.loads(request.POST.get('zone'))
            div=json.loads(request.POST.get('division'))
            dept=json.loads(request.POST.get('department'))
            loc=json.loads(request.POST.get('location'))
            insp_date=request.POST.get('inspection_date').split('to')
            
            st_date = insp_date[0].strip()
            en_date = insp_date[1].strip()
            
            #print(loc, '-------------------------------------------------------------')

        
            
            start_date = datetime.strptime(st_date, '%d/%m/%Y').strftime('%Y-%m-%d')
        
            inspected_on = datetime.strptime(en_date, '%d/%m/%Y').strftime('%Y-%m-%d')
            
        
            
            
            
            title=request.POST.get('titleinsp')
            
            #print(title,'111111111111111111111111')
            #inspection_no=request.POST.get('inspection_no')
            btnValues=request.POST.get('btnValues')
            
            year = str(datetime.now().year)
            
            # checklist_id=request.POST.get('checklist_id')
            if btnValues == 'Submit':
                # inspect_date = datetime.strptime(insp_date, '%d-%m-%Y').strftime('%Y-%m-%d')
                # print(inspect_date, 'ddddddddddddyyyyyyyyyyyyyyyyyyyyymmmmmmmmmmmmmmmmm')
                
                empnox = models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=request.user)| Q(official_email_ID=request.user.guest_email) | Q(official_email_ID=request.user.email), empno__isnull=False)
                # print('==============', empnox[0].empno)
                if empnox:
                    empno = empnox[0].empno_id
                    desig = empnox[0].designation
                    design = empnox[0].designation_code

                else:
                    messages.error(request, 'You are not authorize to create inspection. Please contact to admin')
                        
                
                last_note = m1.Inspection_details.objects.aggregate(Max('insp_last'))['insp_last__max']
            
                if last_note == None:
                    last_note = 1
                    note_no = year+'/'+desig+'/Insp'+'/'+ str(last_note)
                    
                else:
                    last_note = last_note +1
                    note_no = year+'/'+desig+'/Insp'+'/'+ str(last_note)

                
                

                ddesig=models.Level_Desig.objects.exclude(delete_flag=True).get(empno=empno)
            
                m1.Inspection_details.objects.create(inspection_title=title, created_on=datetime.now(), inspection_officer_id=design, item_type="Chk", status_flag=1, modified_by=empno, created_by=empno, start_date=start_date, inspected_on=inspected_on, inspection_note_no=note_no,insp_last=last_note,inspection_officer=ddesig)

                inspection_id=m1.Inspection_details.objects.all().last().inspection_no
                
                for rl in rly:
                    m1.Insp_multi_location.objects.create(inspection_no_id=inspection_id, item=rl, type='HQ')
                for di in div:
                    m1.Insp_multi_location.objects.create(inspection_no_id=inspection_id, item=di, type='DIV')
                for dp in dept:
                    m1.Insp_multi_location.objects.create(inspection_no_id=inspection_id, item=dp, type='DPT')
                for lo in loc:
                    m1.Insp_multi_location.objects.create(inspection_no_id=inspection_id, item=lo, type='LOC')
                
            for i in mydata:
                #print(i, 'qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq')
                date_change=datetime.strptime(i['targetdate'], '%d-%m-%Y').strftime('%Y-%m-%d')
                #print(date_change)
                m1.Item_details.objects.create(observation=i['obser'], priority=i['checkbox'], target_date=date_change, type='CL', status='Finalized',inspection_no_id=inspection_id, status_flag=1)
                markeofficer = i['markeofficer'].split(',')
                item_no = m1.Item_details.objects.values('item_no').last()
                item_no= item_no['item_no']
                if markeofficer:
                    #mark officer
                    for j in markeofficer:
                        
                        Desig=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=j)
                        if Desig:
                            Desig=Desig[0].designation_code
                            if m1.Marked_Officers.objects.all().last():
                                marked_no_id=(m1.Marked_Officers.objects.all().last().marked_no)+1
                            else:
                                marked_no_id = 1
                            m1.Marked_Officers.objects.create(created_on=datetime.now(), marked_no=marked_no_id, created_by=empno, status_flag=1, item_no_id=item_no, marked_to_id=Desig)
                        else:
                            print('error')
                else:
                    markeofficer=''
                
            aw_not = json.loads(obs_notes)
            
            for n in aw_not:
                #print(n, 'notenotenotenotenotenotenotenotenotenotenotenotenotenotenote')
                m1.Item_details.objects.create(observation=n['note'], type='OT', status='Finalized', inspection_no_id=inspection_id, status_flag=1)
            
            aw_good = json.loads(obs_good)
            for g in aw_good:
                #print(g, 'aw_goodaw_goodaw_goodaw_goodaw_goodaw_goodaw_goodaw_good')
                m1.Item_details.objects.create(observation=g['good'], type='GW', status='Finalized',inspection_no_id=inspection_id, status_flag=1)
            
            aw_data = json.loads(obs_award)
            #print(aw_data, aw_good, aw_not)
            for a in aw_data:
                #print(a, 'aw_dataaw_dataaw_dataaw_dataaw_dataaw_dataaw_data')
                m1.Item_details.objects.create(observation=a['award'], type='A', status='Finalized',inspection_no_id=inspection_id, status_flag=1)        
            
            
            return JsonResponse({'success':True}, status=200)
        return JsonResponse({'success':False}, status=400)
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="search_checklist_template_submit_ajax",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})

   

@csrf_exempt
def search_checklist_template_draft_update(request):
    try:
        if request.method== 'POST' and request.is_ajax():
            
            mydata= json.loads(request.POST.get("mydata"))
            obs_notes=request.POST.get('obs_notes')
            obs_good=request.POST.get('obs_good')
            obs_award=request.POST.get('obs_award')
            
            # railway saves
            from datetime import datetime
            rly=json.loads(request.POST.get('zone'))
            div=json.loads(request.POST.get('division'))
            dept=json.loads(request.POST.get('department'))
            loc=json.loads(request.POST.get('location'))
            insp_date=request.POST.get('inspection_date').split('to')
            inspection_no=request.POST.get('inspection_no')
            st_date = insp_date[0].strip()
            en_date = insp_date[1].strip()
            
            #print(loc, '-------------------------------------------------------------')

            
            start_date = datetime.strptime(st_date, '%d-%m-%Y').strftime('%Y-%m-%d')
            inspected_on = datetime.strptime(en_date, '%d-%m-%Y').strftime('%Y-%m-%d')
            
            title=request.POST.get('titleinsp')
            
            #print(title,'111111111111111111111111')
            #inspection_no=request.POST.get('inspection_no')
            btnValues=request.POST.get('btnValues')
            
            
            
            # checklist_id=request.POST.get('checklist_id')
            if btnValues == 'Save as draft':
                # inspect_date = datetime.strptime(insp_date, '%d-%m-%Y').strftime('%Y-%m-%d')
                # print(inspect_date, 'ddddddddddddyyyyyyyyyyyyyyyyyyyyymmmmmmmmmmmmmmmmm')
                
                empnox = models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=request.user)| Q(official_email_ID=request.user.guest_email) | Q(official_email_ID=request.user.email), empno__isnull=False)
                # print('==============', empnox[0].empno)
                if empnox:
                    empno = empnox[0].empno_id

                else:
                    messages.error(request, 'You are not authorize to create inspection. Please contact to admin')
                        
                m1.Inspection_details.objects.filter(inspection_no=inspection_no).update(inspection_title=title, created_on=datetime.now(), item_type="Chk", status_flag=0, modified_by=empno, created_by=empno, start_date=start_date, inspected_on=inspected_on)

                inspection_id=m1.Inspection_details.objects.all().last().inspection_no
                
                for rl in rly:
                    m1.Insp_multi_location.objects.create(inspection_no_id=inspection_id, item=rl, type='HQ')
                for di in div:
                    m1.Insp_multi_location.objects.create(inspection_no_id=inspection_id, item=di, type='DIV')
                for dp in dept:
                    m1.Insp_multi_location.objects.create(inspection_no_id=inspection_id, item=dp, type='DPT')
                for lo in loc:
                    m1.Insp_multi_location.objects.create(inspection_no_id=inspection_id, item=lo, type='LOC')
            # ojb1 = m1.Inspection_Activity.objects.filter(checklist_id_id='checklist_id_id')
            # for i in ojb1:
                # obj2=m1.Inspection_Activity.objects.filter(checklist_id=i.checklist_id)
                # print(obj2) 
                
                # print(i)
                # m1.Item_details.objects.create(checklist_id=i.checklist_id)
                
            for i in mydata:
                #print(i, 'qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq')
                date_change=datetime.strptime(i['targetdate'], '%d-%m-%Y').strftime('%Y-%m-%d')
                #print(date_change)
                m1.Item_details.objects.filter(inspection_no=inspection_no).update(observation=i['obser'], target_date=date_change, type='CL', status='Draft',inspection_no_id=inspection_id, status_flag=0)
                
                
            aw_not = json.loads(obs_notes)
            for n in aw_not:
                #print(n, 'notenotenotenotenotenotenotenotenotenotenotenotenotenotenote')
                m1.Item_details.objects.filter(inspection_no=inspection_no).update(observation=n['note'], type='OT', status='Draft', inspection_no_id=inspection_id, status_flag=0)
            
            aw_good = json.loads(obs_good)
            for g in aw_good:
                #print(g, 'aw_goodaw_goodaw_goodaw_goodaw_goodaw_goodaw_goodaw_good')
                m1.Item_details.objects.filter(inspection_no=inspection_no).update(observation=g['good'], type='GW', status='Draft',inspection_no_id=inspection_id, status_flag=0)
            
            aw_data = json.loads(obs_award)
            #print(aw_data, aw_good, aw_not)
            for a in aw_data:
                #print(a, 'aw_dataaw_dataaw_dataaw_dataaw_dataaw_dataaw_data')
                m1.Item_details.objects.filter(inspection_no=inspection_no).update(observation=a['award'], type='A', status='Draft',inspection_no_id=inspection_id, status_flag=0)        
            
            
            return JsonResponse({'success':True}, status=200)
        return JsonResponse({'success':False}, status=400)
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="search_checklist_template_draft_update",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})


def checklist_locat_ajax(request):
    try:
        if request.method == "GET" or request.is_ajax():
            rly=request.GET.getlist('rly[]')
            #print(rly,'_________++++++++++++++++++++++________________')
            if rly == []:
                division=models.railwayLocationMaster.objects.filter(Q(location_type_desc='DIVISION')|Q(location_type_desc='WORKSHOP')|Q(location_type_desc='INSTITUTE')|Q(location_type_desc='STORE')|Q(location_type_desc='CONSTRUCTION')).values('location_code')
            else:
                division=list(models.railwayLocationMaster.objects.filter(Q(location_type_desc='DIVISION')|Q(location_type_desc='WORKSHOP')|Q(location_type_desc='INSTITUTE')|Q(location_type_desc='STORE')|Q(location_type_desc='CONSTRUCTION'),parent_location_code__in=rly).order_by('location_code').values('location_code').distinct('location_code'))
            l=[]
            
            for i in division:
                l.append(i['location_code'])
            #print(l)    
            context={
                'division':l,
            } 
            return JsonResponse(context,safe = False)
        return JsonResponse({"success":False}, status = 400)
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="checklist_locat_ajax",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})




def checklist_autoFetchLocation_ajax(request):
    try:
        if request.method == 'GET' and request.is_ajax():
            last_val = request.GET.get('last_val')
            # list1=list(models.locationMaster.objects.values_list('city', flat=True).order_by('city').distinct('city'))

            list1=list(models.locationMaster.objects.filter(city__istartswith=last_val).values('city','pincode').order_by('city').distinct('city'))
            #print(list1)
            return JsonResponse(list1, safe=False)
        return JsonResponse({'success': False})
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="checklist_autoFetchLocation_ajax",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})


#checklist department wise all and category wise all

def dept_wise_guides(request):
    try:
        return render(request, 'search_checklist_wise_filter.html')
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="dept_wise_guides",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})


@csrf_exempt
def check_department_wise_all(request):
    try:
        if request.method== 'POST' and request.is_ajax():
            data1 = request.POST.get('data1')
            obj=list(m1.Inspection_Checklist.objects.filter(department=data1,status='Finalized').values('checklist_id','version','department', 'checklist_title','inspection_type','status'))
            return JsonResponse({'obj':obj }, safe=False)
        return JsonResponse({'success':False}, status=400)
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="check_department_wise_all",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})

@csrf_exempt
def check_category_wise_all(request):
    try:
        if request.method== 'POST' and request.is_ajax():
            data1 = request.POST.get('data1')
            obj=list(m1.Inspection_Checklist.objects.filter(inspection_type=data1,status='Finalized').values('checklist_id','version','department', 'checklist_title','inspection_type','status'))
            return JsonResponse({'obj':obj }, safe=False)
        return JsonResponse({'success':False}, status=400)
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="check_category_wise_all",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})


#end here vishnu

#bhart start
def view_inspection_draft(request):
    try:

        print("#########################")
        # result=list(m1.Item_details.objects.filter(status_flag=1).values('inspection_no_id','observation','item_title'))
        # result1=list(m1.Inspection_details.objects.filter(inspection_no=result[0]['inspection_no_id']).values('zone','dept','division'))
        # print(result,result1)
        context={
            # 'result':result,
            # 'zone':result1[0]['zone'],
            # 'dept':result1[0]['dept'],
            # 'division':result1[0]['division'],
        }
        return render(request, 'view_draft.html',context)
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="view_inspection_draft",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})


#bharti end


def forgotPassword(request):
    try:
        if request.method == "POST":
            _email = request.POST.get('email').strip()

            try:
                userObj = user.objects.get(email=_email)
                #print(userObj)
            except Exception as e:
                messages.error(request, 'Please enter registed email.')
                return HttpResponseRedirect('/rkvy_forgotPassword')

            email_context = {
                "email": userObj.email,
                'domain': 'railkvydev.indianrailways.gov.in',
                'site_name': 'Kaushal Vikas',
                "uid": urlsafe_base64_encode(force_bytes(userObj.pk)),
                "user": userObj,
                'token': default_token_generator.make_token(userObj),
                'protocol': 'http',
            }
            email_template_name = "accounts/email_forgotPassword_body.txt"
            email_body = render_to_string(email_template_name, email_context)
            try:
                #print("trying to send mail")
                #print(userObj.email)
                try:
                    # send_mail("Verify Your Mail", email_body, 'crisdlwproject@gmail.com',
                    #          [f'{userObj.email}'], fail_silently=False)


                    #saud faisal (28-08-2021) -----
                    subject="Reset password for RKVY login"
                    To=userObj.email
                    email_body1='<p>'+email_body+'</p>'
                    MailSend(subject,email_body1,To)
                    #end here
                    return HttpResponse('Verification Email has been successfully sent.(see also spam folder)')
                except:
                    print("error on sending")
                    messages.error(
                        request, 'Verification Email failed. Please Try Again.')
            except:
                messages.error(
                    request, 'Something went wrong.')
            return HttpResponseRedirect('/forgotPassword')

        return render(request, "forgotPassword.html")
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="forgotPassword",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})


def passwordVerification(request):
    try:
        username=request.POST.get('username2')
        email2=user.objects.filter(username=username)[0].email
        #print('email2')
        return render(request, "resetPassword.html",{'validLink': True,'email':email2, })
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="passwordVerification",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})
    
def forgotPasswordVerification(request):
    try:
        try:
            # print('00000000')
            # print(request.POST.get('email2'))
            userObj = user.objects.get(email= request.POST.get('email2'))
            #print(userObj)
            
        except(TypeError, ValueError, OverflowError, user.DoesNotExist):
            #print("%&^%&^%&^%&^@#%&^@#%&^@%#&@%#&")
            userObj = None

        if userObj is not None:
            #print('1111')

            # return HttpResponseRedirect('/reset_password')
            if request.method == "POST":
                try:
                    _password = request.POST.get('new_password')
                    userObj.set_password(_password)
                    userObj.save()
                    
                    messages.success(request, "Password Updated Successfully")
                except Exception as e:
                    #print(e)
                    messages.error(request, "Password Change Failed.")
                return HttpResponseRedirect('/login')

            return render(request, "resetPassword.html", {'validLink': True, })
        else:
            return HttpResponse('Email not registered')
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="forgotPasswordVerification",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})

# Aman start
def new_page(request):
    try:
        return render(request,'new_page.html')
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="new_page",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})
    
def new_page2(request):
    try:
        return render(request,'new_page2.html')
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="new_page2",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})

def new_data(request):
    try:
        railway = request.GET.get('railway')
        s = request.GET.get('status')
        sd = request.GET.get('sd')
        ed = request.GET.get('ed')
        #print(railway,s)
        data=[]
        if int(s)==0:
            #print("yes")
            flag=0
            t = m1.Inspection_details.objects.filter(zone=railway,inspected_on__gte=sd,inspected_on__lte=ed,status_flag=1).values('inspection_note_no','inspected_on','inspection_officer','zone','division','dept','status_flag','inspection_no')
            for i in t:
                if i['status_flag']!=None:
                    temp={}
                    temp['inno']=i['inspection_no']
                    temp['ins_no']=i['inspection_note_no']
                    temp['ins_date']=i['inspected_on'].strftime("%d-%b-%Y")
                    temp['desig']=i['inspection_officer']
                    t1=models.railwayLocationMaster.objects.filter(location_code=i['zone']).values('location_description')
                    temp['railway']=t1[0]['location_description']
                    t1=models.railwayLocationMaster.objects.filter(location_code=i['division']).values('location_description')
                    temp['division']=t1[0]['location_description']
                    temp['dept']=i['dept']
                    t1=m1.Item_details.objects.filter(inspection_no=i['inspection_no']).values()
                    for k in t1:
                        if k['status_flag']==1:
                            flag=1
                        elif k['status_flag']==2:
                            flag=2
                            break
                        elif k['status_flag']==4:
                            flag=3
                    if flag==1:
                        temp['status']="Pending Compliance"
                    elif flag==2:
                        temp['status']="Partial Compliance"
                    elif flag==3:
                        temp['status']="Closed"
                    flag=0
                    data.append(temp)
        elif int(s)==1:
            t = m1.Inspection_details.objects.filter(zone=railway,status_flag=s,inspected_on__gte=sd,inspected_on__lte=ed).values('inspection_no','inspection_note_no','inspected_on','inspection_officer','zone','division','dept','status_flag')
            for i in t:
                temp={}
                temp['inno']=i['inspection_no']
                temp['ins_no']=i['inspection_note_no']
                temp['ins_date']=i['inspected_on'].strftime("%d-%b-%Y")
                temp['desig']=i['inspection_officer']
                t1=models.railwayLocationMaster.objects.filter(location_code=i['zone']).values('location_description')
                temp['railway']=t1[0]['location_description']
                t1=models.railwayLocationMaster.objects.filter(location_code=i['division']).values('location_description')
                temp['division']=t1[0]['location_description']
                temp['dept']=i['dept']
                temp['status']="Pending Compliance"
                data.append(temp)
        elif int(s)==2:
            t = m1.Inspection_details.objects.filter(zone=railway,status_flag=s,inspected_on__gte=sd,inspected_on__lte=ed).values('inspection_no','inspection_note_no','inspected_on','inspection_officer','zone','division','dept','status_flag')
            for i in t:
                temp={}
                temp['inno']=i['inspection_no']
                temp['ins_no']=i['inspection_note_no']
                temp['ins_date']=i['inspected_on'].strftime("%d-%b-%Y")
                temp['desig']=i['inspection_officer']
                t1=models.railwayLocationMaster.objects.filter(location_code=i['zone']).values('location_description')
                temp['railway']=t1[0]['location_description']
                t1=models.railwayLocationMaster.objects.filter(location_code=i['division']).values('location_description')
                temp['division']=t1[0]['location_description']
                temp['dept']=i['dept']
                temp['status']="Partial Compliance"
                data.append(temp)
        elif int(s)==3:
            t = m1.Inspection_details.objects.filter(zone=railway,status_flag=s,inspected_on__gte=sd,inspected_on__lte=ed).values('inspection_no','inspection_note_no','inspected_on','inspection_officer','zone','division','dept','status_flag')
            for i in t:
                temp={}
                temp['inno']=i['inspection_no']
                temp['ins_no']=i['inspection_note_no']
                temp['ins_date']=i['inspected_on'].strftime("%d-%b-%Y")
                temp['desig']=i['inspection_officer']
                t1=models.railwayLocationMaster.objects.filter(location_code=i['zone']).values('location_description')
                temp['railway']=t1[0]['location_description']
                t1=models.railwayLocationMaster.objects.filter(location_code=i['division']).values('location_description')
                temp['division']=t1[0]['location_description']
                temp['dept']=i['dept']
                temp['status']="Closed"
                data.append(temp)
        #print(len(temp))
        context={'data':data}
        return JsonResponse(context,safe=False)
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="new_data",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})

def new_data1(request):
    try:
        railway = request.GET.get('div')
        s = request.GET.get('status')
        sd = request.GET.get('sd')
        ed = request.GET.get('ed')
        #print(railway,s)
        data=[]
        if int(s)==0:
            print("yes")
            flag=0
            t = m1.Inspection_details.objects.filter(division=railway,inspected_on__gte=sd,inspected_on__lte=ed).values('inspection_no','inspection_note_no','inspected_on','inspection_officer','zone','division','dept','status_flag')
            #print(t)
            for i in t:
                if i['status_flag']!=None:
                    temp={}
                    temp['inno']=i['inspection_no']
                    temp['ins_no']=i['inspection_note_no']
                    temp['ins_date']=i['inspected_on'].strftime("%d-%b-%Y")
                    temp['desig']=i['inspection_officer']
                    t1=models.railwayLocationMaster.objects.filter(location_code=i['zone']).values('location_description')
                    temp['railway']=t1[0]['location_description']
                    t1=models.railwayLocationMaster.objects.filter(location_code=i['division']).values('location_description')
                    temp['division']=t1[0]['location_description']
                    temp['dept']=i['dept']
                    t1=m1.Item_details.objects.filter(inspection_no=i['inspection_no']).values()
                    for k in t1:
                        if k['status_flag']==1:
                            flag=1
                        elif k['status_flag']==2:
                            flag=2
                            break
                        elif k['status_flag']==4:
                            flag=3
                    if flag==1:
                        temp['status']="Pending Compliance"
                    elif flag==2:
                        temp['status']="Partial Compliance"
                    elif flag==3:
                        temp['status']="Closed"
                    flag=0
                    data.append(temp)
        elif int(s)==1:
            t = m1.Inspection_details.objects.filter(division=railway,status_flag=s,inspected_on__gte=sd,inspected_on__lte=ed).values('inspection_no','inspection_note_no','inspected_on','inspection_officer','zone','division','dept','status_flag')
            for i in t:
                temp={}
                temp['inno']=i['inspection_no']
                temp['ins_no']=i['inspection_note_no']
                temp['ins_date']=i['inspected_on'].strftime("%d-%b-%Y")
                temp['desig']=i['inspection_officer']
                t1=models.railwayLocationMaster.objects.filter(location_code=i['zone']).values('location_description')
                temp['railway']=t1[0]['location_description']
                t1=models.railwayLocationMaster.objects.filter(location_code=i['division']).values('location_description')
                temp['division']=t1[0]['location_description']
                temp['dept']=i['dept']
                temp['status']="Pending Compliance"
                data.append(temp)
        elif int(s)==2:
            t = m1.Inspection_details.objects.filter(division=railway,status_flag=s,inspected_on__gte=sd,inspected_on__lte=ed).values('inspection_no','inspection_note_no','inspected_on','inspection_officer','zone','division','dept','status_flag')
            for i in t:
                temp={}
                temp['inno']=i['inspection_no']
                temp['ins_no']=i['inspection_note_no']
                temp['ins_date']=i['inspected_on'].strftime("%d-%b-%Y")
                temp['desig']=i['inspection_officer']
                t1=models.railwayLocationMaster.objects.filter(location_code=i['zone']).values('location_description')
                temp['railway']=t1[0]['location_description']
                t1=models.railwayLocationMaster.objects.filter(location_code=i['division']).values('location_description')
                temp['division']=t1[0]['location_description']
                temp['dept']=i['dept']
                temp['status']="Partial Compliance"
                data.append(temp)
        elif int(s)==3:
            t = m1.Inspection_details.objects.filter(division=railway,status_flag=s,inspected_on__gte=sd,inspected_on__lte=ed).values('inspection_no','inspection_note_no','inspected_on','inspection_officer','zone','division','dept','status_flag')
            for i in t:
                temp={}
                temp['inno']=i['inspection_no']
                temp['ins_no']=i['inspection_note_no']
                temp['ins_date']=i['inspected_on'].strftime("%d-%b-%Y")
                temp['desig']=i['inspection_officer']
                t1=models.railwayLocationMaster.objects.filter(location_code=i['zone']).values('location_description')
                temp['railway']=t1[0]['location_description']
                t1=models.railwayLocationMaster.objects.filter(location_code=i['division']).values('location_description')
                temp['division']=t1[0]['location_description']
                temp['dept']=i['dept']
                temp['status']="Closed"
                data.append(temp)
        context={'data':data}
        return JsonResponse(context,safe=False)
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="new_data1",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})

def new_data2(request):
    try:
        railway = request.GET.get('dept')
        s = request.GET.get('status')
        sd = request.GET.get('sd')
        ed = request.GET.get('ed')
        #print(railway,s)
        data=[]
        if int(s)==0:
            #print("yes")
            flag=0
            t = m1.Inspection_details.objects.filter(dept=railway,inspected_on__gte=sd,inspected_on__lte=ed,status_flag=1).values()
            #print(t)
            for i in t:
                if i['status_flag']!=None:
                    temp={}
                    temp['inno']=i['inspection_no']
                    temp['ins_no']=i['inspection_note_no']
                    temp['ins_date']=i['inspected_on'].strftime("%d-%b-%Y")
                    temp['desig']=i['inspection_officer']
                    t1=models.railwayLocationMaster.objects.filter(location_code=i['zone']).values('location_description')
                    temp['railway']=t1[0]['location_description']
                    t1=models.railwayLocationMaster.objects.filter(location_code=i['division']).values('location_description')
                    temp['division']=t1[0]['location_description']
                    temp['dept']=i['dept']
                    t1=m1.Item_details.objects.filter(inspection_no=i['inspection_no']).values()
                    for k in t1:
                        if k['status_flag']==1:
                            flag=1
                        elif k['status_flag']==2:
                            flag=2
                            break
                        elif k['status_flag']==4:
                            flag=3
                    if flag==1:
                        temp['status']="Pending Compliance"
                    elif flag==2:
                        temp['status']="Partial Compliance"
                    elif flag==3:
                        temp['status']="Closed"
                    flag=0
                    data.append(temp)
        elif int(s)==1:
            t = m1.Inspection_details.objects.filter(dept=railway,status_flag=s,inspected_on__gte=sd,inspected_on__lte=ed).values()
            for i in t:
                temp={}
                temp['inno']=i['inspection_no']
                temp['ins_no']=i['inspection_note_no']
                temp['ins_date']=i['inspected_on'].strftime("%d-%b-%Y")
                temp['desig']=i['inspection_officer']
                t1=models.railwayLocationMaster.objects.filter(location_code=i['zone']).values('location_description')
                temp['railway']=t1[0]['location_description']
                t1=models.railwayLocationMaster.objects.filter(location_code=i['division']).values('location_description')
                temp['division']=t1[0]['location_description']
                temp['dept']=i['dept']
                temp['status']="Pending Compliance"
                data.append(temp)
        elif int(s)==2:
            t = m1.Inspection_details.objects.filter(dept=railway,status_flag=s,inspected_on__gte=sd,inspected_on__lte=ed).values()
            for i in t:
                temp={}
                temp['inno']=i['inspection_no']
                temp['ins_no']=i['inspection_note_no']
                temp['ins_date']=i['inspected_on'].strftime("%d-%b-%Y")
                temp['desig']=i['inspection_officer']
                t1=models.railwayLocationMaster.objects.filter(location_code=i['zone']).values('location_description')
                temp['railway']=t1[0]['location_description']
                t1=models.railwayLocationMaster.objects.filter(location_code=i['division']).values('location_description')
                temp['division']=t1[0]['location_description']
                temp['dept']=i['dept']
                temp['status']="Partial Compliance"
                data.append(temp)
        elif int(s)==3:
            t = m1.Inspection_details.objects.filter(dept=railway,status_flag=s,inspected_on__gte=sd,inspected_on__lte=ed).values()
            for i in t:
                temp={}
                temp['inno']=i['inspection_no']
                temp['ins_no']=i['inspection_note_no']
                temp['ins_date']=i['inspected_on'].strftime("%d-%b-%Y")
                temp['desig']=i['inspection_officer']
                t1=models.railwayLocationMaster.objects.filter(location_code=i['zone']).values('location_description')
                temp['railway']=t1[0]['location_description']
                t1=models.railwayLocationMaster.objects.filter(location_code=i['division']).values('location_description')
                temp['division']=t1[0]['location_description']
                temp['dept']=i['dept']
                temp['status']="Closed"
                data.append(temp)
        context={'data':data}
        return JsonResponse(context,safe=False)
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="new_data2",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})

def new_data3(request):
    try:
        railway = request.GET.get('desig')
        s = request.GET.get('status')
        sd = request.GET.get('sd')
        ed = request.GET.get('ed')
        #print(railway,s)
        data=[]
        if int(s)==0:
            #print("yes")
            flag=0
            t1 = models.Level_Desig.objects.exclude(delete_flag=True).filter(designation=railway).values('department_code')
            t = m1.Inspection_details.objects.filter(inspection_officer=t1[0]['department_code'],inspected_on__gte=sd,inspected_on__lte=ed,status_flag=1).values()
            #print(t)
            for i in t:
                if i['status_flag']!=None:
                    temp={}
                    temp['inno']=i['inspection_no']
                    temp['ins_no']=i['inspection_note_no']
                    temp['ins_date']=i['inspected_on'].strftime("%d-%b-%Y")
                    temp['desig']=railway
                    t1=models.railwayLocationMaster.objects.filter(location_code=i['zone']).values('location_description')
                    temp['railway']=t1[0]['location_description']
                    t1=models.railwayLocationMaster.objects.filter(location_code=i['division']).values('location_description')
                    temp['division']=t1[0]['location_description']
                    temp['dept']=i['dept']
                    t1=m1.Item_details.objects.filter(inspection_no=i['inspection_no']).values()
                    for k in t1:
                        if k['status_flag']==1:
                            flag=1
                        elif k['status_flag']==2:
                            flag=2
                            break
                        elif k['status_flag']==4:
                            flag=3
                    if flag==1:
                        temp['status']="Pending Compliance"
                    elif flag==2:
                        temp['status']="Partial Compliance"
                    elif flag==3:
                        temp['status']="Closed"
                    flag=0
                    data.append(temp)
        elif int(s)==1:
            t1 = models.Level_Desig.objects.exclude(delete_flag=True).filter(designation=railway).values('department_code')
            t = m1.Inspection_details.objects.filter(inspection_officer=t1[0]['department_code'],inspected_on__gte=sd,inspected_on__lte=ed,status_flag=s).values()
            for i in t:
                temp={}
                temp['inno']=i['inspection_no']
                temp['ins_no']=i['inspection_note_no']
                temp['ins_date']=i['inspected_on'].strftime("%d-%b-%Y")
                temp['desig']=railway
                t1=models.railwayLocationMaster.objects.filter(location_code=i['zone']).values('location_description')
                temp['railway']=t1[0]['location_description']
                t1=models.railwayLocationMaster.objects.filter(location_code=i['division']).values('location_description')
                temp['division']=t1[0]['location_description']
                temp['dept']=i['dept']
                temp['status']="Pending Compliance"
                data.append(temp)
        elif int(s)==2:
            t1 = models.Level_Desig.objects.exclude(delete_flag=True).filter(designation=railway).values('department_code')
            t = m1.Inspection_details.objects.filter(inspection_officer=t1[0]['department_code'],status_flag=s,inspected_on__gte=sd,inspected_on__lte=ed).values()
            for i in t:
                temp={}
                temp['inno']=i['inspection_no']
                temp['ins_no']=i['inspection_note_no']
                temp['ins_date']=i['inspected_on'].strftime("%d-%b-%Y")
                temp['desig']=railway
                t1=models.railwayLocationMaster.objects.filter(location_code=i['zone']).values('location_description')
                temp['railway']=t1[0]['location_description']
                t1=models.railwayLocationMaster.objects.filter(location_code=i['division']).values('location_description')
                temp['division']=t1[0]['location_description']
                temp['dept']=i['dept']
                temp['status']="Partial Compliance"
                data.append(temp)
        elif int(s)==3:
            t1 = models.Level_Desig.objects.exclude(delete_flag=True).filter(designation=railway).values('department_code')
            t = m1.Inspection_details.objects.filter(inspection_officer=t1[0]['department_code'],status_flag=s,inspected_on__gte=sd,inspected_on__lte=ed).values()
            for i in t:
                temp={}
                temp['inno']=i['inspection_no']
                temp['ins_no']=i['inspection_note_no']
                temp['ins_date']=i['inspected_on'].strftime("%d-%b-%Y")
                temp['desig']=railway
                t1=models.railwayLocationMaster.objects.filter(location_code=i['zone']).values('location_description')
                temp['railway']=t1[0]['location_description']
                t1=models.railwayLocationMaster.objects.filter(location_code=i['division']).values('location_description')
                temp['division']=t1[0]['location_description']
                temp['dept']=i['dept']
                temp['status']="Closed"
                data.append(temp)
        context={'data':data}
        return JsonResponse(context,safe=False)
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="new_data3",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})

def new_data20(request):
    try:
        railway = request.GET.get('railway')
        s = request.GET.get('status')
        sd = request.GET.get('sd')
        ed = request.GET.get('ed')
        #print(railway,s)
        data=[]
        if int(s)==0:
            #print("yes")
            t = m1.Item_details.objects.filter(inspection_no__zone=railway,inspection_no__status_flag=1,inspection_no__inspected_on__gte=sd,inspection_no__inspected_on__lte=ed).values('item_no','observation','status_flag','target_date','inspection_no')
            #print(t)
            for i in t:
                if i['status_flag']!=None:
                    temp={}
                    temp['inno']=i['inspection_no']
                    temp['item_no']=i['item_no']
                    temp['target']=i['target_date']
                    temp['obs']=i['observation']
                    t1 = m1.Inspection_details.objects.filter(inspection_no=i['inspection_no']).values('zone','division','dept','inspected_on')
                    temp['ins_date']=t1[0]['inspected_on'].strftime("%d-%b-%Y")
                    t2=models.railwayLocationMaster.objects.filter(location_code=t1[0]['zone']).values('location_description')
                    temp['railway']=t2[0]['location_description']
                    t3=models.railwayLocationMaster.objects.filter(location_code=t1[0]['division']).values('location_description')
                    temp['division']=t3[0]['location_description']
                    temp['dept']=t1[0]['dept']
                    if i['status_flag']==1:
                        temp['status']="Pending Compliance"
                    elif i['status_flag']==2:
                        temp['status']="Partial Compliance"
                    elif i['status_flag']==3:
                        temp['status']="Closed"
                    data.append(temp)
        elif int(s)==1:
            t = m1.Item_details.objects.filter(inspection_no__zone=railway,inspection_no__status_flag=1,inspection_no__inspected_on__gte=sd,inspection_no__inspected_on__lte=ed,status_flag=s).values('item_no','observation','status_flag','target_date','inspection_no')
            for i in t:
                temp={}
                temp['inno']=i['inspection_no']
                temp['item_no']=i['item_no']
                temp['target']=i['target_date']
                temp['obs']=i['observation']
                t1 = m1.Inspection_details.objects.filter(inspection_no=i['inspection_no']).values('zone','division','dept','inspected_on')
                temp['ins_date']=t1[0]['inspected_on'].strftime("%d-%b-%Y")
                t2=models.railwayLocationMaster.objects.filter(location_code=t1[0]['zone']).values('location_description')
                temp['railway']=t2[0]['location_description']
                t3=models.railwayLocationMaster.objects.filter(location_code=t1[0]['division']).values('location_description')
                temp['division']=t3[0]['location_description']
                temp['dept']=t1[0]['dept']
                temp['status']="Pending Compliance"
                data.append(temp)
        elif int(s)==2:
            t = m1.Item_details.objects.filter(inspection_no__zone=railway,inspection_no__status_flag=1,inspection_no__inspected_on__gte=sd,inspection_no__inspected_on__lte=ed,status_flag=s).values('item_no','observation','status_flag','target_date','inspection_no')
            for i in t:
                temp={}
                temp['inno']=i['inspection_no']
                temp['item_no']=i['item_no']
                temp['target']=i['target_date']
                temp['obs']=i['observation']
                t1 = m1.Inspection_details.objects.filter(inspection_no=i['inspection_no']).values('zone','division','dept','inspected_on')
                temp['ins_date']=t1[0]['inspected_on'].strftime("%d-%b-%Y")
                t2=models.railwayLocationMaster.objects.filter(location_code=t1[0]['zone']).values('location_description')
                temp['railway']=t2[0]['location_description']
                t3=models.railwayLocationMaster.objects.filter(location_code=t1[0]['division']).values('location_description')
                temp['division']=t3[0]['location_description']
                temp['dept']=t1[0]['dept']
                temp['status']="Partial Compliance"
                data.append(temp)
        elif int(s)==3:
            t = m1.Item_details.objects.filter(inspection_no__zone=railway,inspection_no__status_flag=1,inspection_no__inspected_on__gte=sd,inspection_no__inspected_on__lte=ed,status_flag=s).values('item_no','observation','status_flag','target_date','inspection_no')
            for i in t:
                temp={}
                temp['inno']=i['inspection_no']
                temp['item_no']=i['item_no']
                temp['target']=i['target_date']
                temp['obs']=i['observation']
                t1 = m1.Inspection_details.objects.filter(inspection_no=i['inspection_no']).values('zone','division','dept','inspected_on')
                temp['ins_date']=t1[0]['inspected_on'].strftime("%d-%b-%Y")
                t2=models.railwayLocationMaster.objects.filter(location_code=t1[0]['zone']).values('location_description')
                temp['railway']=t2[0]['location_description']
                t3=models.railwayLocationMaster.objects.filter(location_code=t1[0]['division']).values('location_description')
                temp['division']=t3[0]['location_description']
                temp['dept']=t1[0]['dept']
                data.append(temp)
        context={'data':data}
        return JsonResponse(context,safe=False)
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="new_data20",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})

def new_data21(request):
    try:
        railway = request.GET.get('railway')
        s = request.GET.get('status')
        sd = request.GET.get('sd')
        ed = request.GET.get('ed')
        #print(railway,s)
        data=[]
        if int(s)==0:
            #print("yes")
            t = m1.Item_details.objects.filter(inspection_no__division=railway,inspection_no__status_flag=1,inspection_no__inspected_on__gte=sd,inspection_no__inspected_on__lte=ed).values('item_no','observation','status_flag','target_date','inspection_no')
            #print(t)
            for i in t:
                if i['status_flag']!=None:
                    temp={}
                    temp['inno']=i['inspection_no']
                    temp['item_no']=i['item_no']
                    temp['target']=i['target_date']
                    temp['obs']=i['observation']
                    t1 = m1.Inspection_details.objects.filter(inspection_no=i['inspection_no']).values('zone','division','dept','inspected_on')
                    temp['ins_date']=t1[0]['inspected_on'].strftime("%d-%b-%Y")
                    t2=models.railwayLocationMaster.objects.filter(location_code=t1[0]['zone']).values('location_description')
                    temp['railway']=t2[0]['location_description']
                    t3=models.railwayLocationMaster.objects.filter(location_code=t1[0]['division']).values('location_description')
                    temp['division']=t3[0]['location_description']
                    temp['dept']=t1[0]['dept']
                    if i['status_flag']==1:
                        temp['status']="Pending Compliance"
                    elif i['status_flag']==2:
                        temp['status']="Partial Compliance"
                    elif i['status_flag']==3:
                        temp['status']="Closed"
                    data.append(temp)
        elif int(s)==1:
            t = m1.Item_details.objects.filter(inspection_no__division=railway,inspection_no__status_flag=1,inspection_no__inspected_on__gte=sd,inspection_no__inspected_on__lte=ed,status_flag=s).values('item_no','observation','status_flag','target_date','inspection_no')
            for i in t:
                temp={}
                temp['inno']=i['inspection_no']
                temp['item_no']=i['item_no']
                temp['target']=i['target_date']
                temp['obs']=i['observation']
                t1 = m1.Inspection_details.objects.filter(inspection_no=i['inspection_no']).values('zone','division','dept','inspected_on')
                temp['ins_date']=t1[0]['inspected_on'].strftime("%d-%b-%Y")
                t2=models.railwayLocationMaster.objects.filter(location_code=t1[0]['zone']).values('location_description')
                temp['railway']=t2[0]['location_description']
                t3=models.railwayLocationMaster.objects.filter(location_code=t1[0]['division']).values('location_description')
                temp['division']=t3[0]['location_description']
                temp['dept']=t1[0]['dept']
                temp['status']="Pending Compliance"
                data.append(temp)
        elif int(s)==2:
            t = m1.Item_details.objects.filter(inspection_no__division=railway,inspection_no__status_flag=1,inspection_no__inspected_on__gte=sd,inspection_no__inspected_on__lte=ed,status_flag=s).values('item_no','observation','status_flag','target_date','inspection_no')
            for i in t:
                temp={}
                temp['inno']=i['inspection_no']
                temp['item_no']=i['item_no']
                temp['target']=i['target_date']
                temp['obs']=i['observation']
                t1 = m1.Inspection_details.objects.filter(inspection_no=i['inspection_no']).values('zone','division','dept','inspected_on')
                temp['ins_date']=t1[0]['inspected_on'].strftime("%d-%b-%Y")
                t2=models.railwayLocationMaster.objects.filter(location_code=t1[0]['zone']).values('location_description')
                temp['railway']=t2[0]['location_description']
                t3=models.railwayLocationMaster.objects.filter(location_code=t1[0]['division']).values('location_description')
                temp['division']=t3[0]['location_description']
                temp['dept']=t1[0]['dept']
                temp['status']="Partial Compliance"
                data.append(temp)
        elif int(s)==3:
            t = m1.Item_details.objects.filter(inspection_no__zone=railway,inspection_no__status_flag=1,inspection_no__inspected_on__gte=sd,inspection_no__inspected_on__lte=ed,status_flag=s).values('item_no','observation','status_flag','target_date','inspection_no')
            for i in t:
                temp={}
                temp['inno']=i['inspection_no']
                temp['item_no']=i['item_no']
                temp['target']=i['target_date']
                temp['obs']=i['observation']
                t1 = m1.Inspection_details.objects.filter(inspection_no=i['inspection_no']).values('zone','division','dept','inspected_on')
                temp['ins_date']=t1[0]['inspected_on'].strftime("%d-%b-%Y")
                t2=models.railwayLocationMaster.objects.filter(location_code=t1[0]['zone']).values('location_description')
                temp['railway']=t2[0]['location_description']
                t3=models.railwayLocationMaster.objects.filter(location_code=t1[0]['division']).values('location_description')
                temp['division']=t3[0]['location_description']
                temp['dept']=t1[0]['dept']
                data.append(temp)
        context={'data':data}
        return JsonResponse(context,safe=False)
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="new_data21",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})

def new_data22(request):
    try:
        railway = request.GET.get('railway')
        s = request.GET.get('status')
        sd = request.GET.get('sd')
        ed = request.GET.get('ed')
        #print(railway,s)
        data=[]
        if int(s)==0:
            #print("yes")
            t = m1.Item_details.objects.filter(inspection_no__dept=railway,inspection_no__status_flag=1,inspection_no__inspected_on__gte=sd,inspection_no__inspected_on__lte=ed).values('item_no','observation','status_flag','target_date','inspection_no')
            #print(t)
            for i in t:
                if i['status_flag']!=None:
                    temp={}
                    temp['inno']=i['inspection_no']
                    temp['item_no']=i['item_no']
                    temp['target']=i['target_date']
                    temp['obs']=i['observation']
                    t1 = m1.Inspection_details.objects.filter(inspection_no=i['inspection_no']).values('zone','division','dept','inspected_on')
                    temp['ins_date']=t1[0]['inspected_on'].strftime("%d-%b-%Y")
                    t2=models.railwayLocationMaster.objects.filter(location_code=t1[0]['zone']).values('location_description')
                    temp['railway']=t2[0]['location_description']
                    t3=models.railwayLocationMaster.objects.filter(location_code=t1[0]['division']).values('location_description')
                    temp['division']=t3[0]['location_description']
                    temp['dept']=t1[0]['dept']
                    if i['status_flag']==1:
                        temp['status']="Pending Compliance"
                    elif i['status_flag']==2:
                        temp['status']="Partial Compliance"
                    elif i['status_flag']==3:
                        temp['status']="Closed"
                    data.append(temp)
        elif int(s)==1:
            t = m1.Item_details.objects.filter(inspection_no__dept=railway,inspection_no__status_flag=1,inspection_no__inspected_on__gte=sd,inspection_no__inspected_on__lte=ed,status_flag=s).values('item_no','observation','status_flag','target_date','inspection_no')
            for i in t:
                temp={}
                temp['inno']=i['inspection_no']
                temp['item_no']=i['item_no']
                temp['target']=i['target_date']
                temp['obs']=i['observation']
                t1 = m1.Inspection_details.objects.filter(inspection_no=i['inspection_no']).values('zone','division','dept','inspected_on')
                temp['ins_date']=t1[0]['inspected_on'].strftime("%d-%b-%Y")
                t2=models.railwayLocationMaster.objects.filter(location_code=t1[0]['zone']).values('location_description')
                temp['railway']=t2[0]['location_description']
                t3=models.railwayLocationMaster.objects.filter(location_code=t1[0]['division']).values('location_description')
                temp['division']=t3[0]['location_description']
                temp['dept']=t1[0]['dept']
                temp['status']="Pending Compliance"
                data.append(temp)
        elif int(s)==2:
            t = m1.Item_details.objects.filter(inspection_no__dept=railway,inspection_no__status_flag=1,inspection_no__inspected_on__gte=sd,inspection_no__inspected_on__lte=ed,status_flag=s).values('item_no','observation','status_flag','target_date','inspection_no')
            for i in t:
                temp={}
                temp['inno']=i['inspection_no']
                temp['item_no']=i['item_no']
                temp['target']=i['target_date']
                temp['obs']=i['observation']
                t1 = m1.Inspection_details.objects.filter(inspection_no=i['inspection_no']).values('zone','division','dept','inspected_on')
                temp['ins_date']=t1[0]['inspected_on'].strftime("%d-%b-%Y")
                t2=models.railwayLocationMaster.objects.filter(location_code=t1[0]['zone']).values('location_description')
                temp['railway']=t2[0]['location_description']
                t3=models.railwayLocationMaster.objects.filter(location_code=t1[0]['division']).values('location_description')
                temp['division']=t3[0]['location_description']
                temp['dept']=t1[0]['dept']
                temp['status']="Partial Compliance"
                data.append(temp)
        elif int(s)==3:
            t = m1.Item_details.objects.filter(inspection_no__dept=railway,inspection_no__status_flag=1,inspection_no__inspected_on__gte=sd,inspection_no__inspected_on__lte=ed,status_flag=s).values('item_no','observation','status_flag','target_date','inspection_no')
            for i in t:
                temp={}
                temp['inno']=i['inspection_no']
                temp['item_no']=i['item_no']
                temp['target']=i['target_date']
                temp['obs']=i['observation']
                t1 = m1.Inspection_details.objects.filter(inspection_no=i['inspection_no']).values('zone','division','dept','inspected_on')
                temp['ins_date']=t1[0]['inspected_on'].strftime("%d-%b-%Y")
                t2=models.railwayLocationMaster.objects.filter(location_code=t1[0]['zone']).values('location_description')
                temp['railway']=t2[0]['location_description']
                t3=models.railwayLocationMaster.objects.filter(location_code=t1[0]['division']).values('location_description')
                temp['division']=t3[0]['location_description']
                temp['dept']=t1[0]['dept']
                data.append(temp)
        context={'data':data}
        return JsonResponse(context,safe=False)
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="new_data22",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})

def new_data23(request):
    try:
        railway = request.GET.get('railway')
        s = request.GET.get('status')
        sd = request.GET.get('sd')
        ed = request.GET.get('ed')
        #print(railway,s)
        data=[]
        t1 = models.Level_Desig.objects.exclude(delete_flag=True).filter(designation=railway).values('department_code')
        if int(s)==0:
            t = m1.Item_details.objects.filter(inspection_no__inspection_officer=t1[0]['department_code'],inspection_no__status_flag=1,inspection_no__inspected_on__gte=sd,inspection_no__inspected_on__lte=ed).values('item_no','observation','status_flag','target_date','inspection_no')
            #print(t)
            for i in t:
                if i['status_flag']!=None:
                    temp={}
                    temp['inno']=i['inspection_no']
                    temp['item_no']=i['item_no']
                    temp['target']=i['target_date']
                    temp['obs']=i['observation']
                    t1 = m1.Inspection_details.objects.filter(inspection_no=i['inspection_no']).values('zone','division','dept','inspected_on')
                    temp['ins_date']=t1[0]['inspected_on'].strftime("%d-%b-%Y")
                    t2=models.railwayLocationMaster.objects.filter(location_code=t1[0]['zone']).values('location_description')
                    temp['railway']=t2[0]['location_description']
                    t3=models.railwayLocationMaster.objects.filter(location_code=t1[0]['division']).values('location_description')
                    temp['division']=t3[0]['location_description']
                    temp['dept']=t1[0]['dept']
                    if i['status_flag']==1:
                        temp['status']="Pending Compliance"
                    elif i['status_flag']==2:
                        temp['status']="Partial Compliance"
                    elif i['status_flag']==3:
                        temp['status']="Closed"
                    data.append(temp)
        elif int(s)==1:
            t = m1.Item_details.objects.filter(inspection_no__inspection_officer=t1[0]['department_code'],inspection_no__status_flag=1,inspection_no__inspected_on__gte=sd,inspection_no__inspected_on__lte=ed,status_flag=s).values('item_no','observation','status_flag','target_date','inspection_no')
            for i in t:
                temp={}
                temp['inno']=i['inspection_no']
                temp['item_no']=i['item_no']
                temp['target']=i['target_date']
                temp['obs']=i['observation']
                t1 = m1.Inspection_details.objects.filter(inspection_no=i['inspection_no']).values('zone','division','dept','inspected_on')
                temp['ins_date']=t1[0]['inspected_on'].strftime("%d-%b-%Y")
                t2=models.railwayLocationMaster.objects.filter(location_code=t1[0]['zone']).values('location_description')
                temp['railway']=t2[0]['location_description']
                t3=models.railwayLocationMaster.objects.filter(location_code=t1[0]['division']).values('location_description')
                temp['division']=t3[0]['location_description']
                temp['dept']=t1[0]['dept']
                temp['status']="Pending Compliance"
                data.append(temp)
        elif int(s)==2:
            t = m1.Item_details.objects.filter(inspection_no__inspection_officer=t1[0]['department_code'],inspection_no__status_flag=1,inspection_no__inspected_on__gte=sd,inspection_no__inspected_on__lte=ed,status_flag=s).values('item_no','observation','status_flag','target_date','inspection_no')
            for i in t:
                temp={}
                temp['inno']=i['inspection_no']
                temp['item_no']=i['item_no']
                temp['target']=i['target_date']
                temp['obs']=i['observation']
                t1 = m1.Inspection_details.objects.filter(inspection_no=i['inspection_no']).values('zone','division','dept','inspected_on')
                temp['ins_date']=t1[0]['inspected_on'].strftime("%d-%b-%Y")
                t2=models.railwayLocationMaster.objects.filter(location_code=t1[0]['zone']).values('location_description')
                temp['railway']=t2[0]['location_description']
                t3=models.railwayLocationMaster.objects.filter(location_code=t1[0]['division']).values('location_description')
                temp['division']=t3[0]['location_description']
                temp['dept']=t1[0]['dept']
                temp['status']="Partial Compliance"
                data.append(temp)
        elif int(s)==3:
            t = m1.Item_details.objects.filter(inspection_no__inspection_officer=t1[0]['department_code'],inspection_no__status_flag=1,inspection_no__inspected_on__gte=sd,inspection_no__inspected_on__lte=ed,status_flag=s).values('item_no','observation','status_flag','target_date','inspection_no')
            for i in t:
                temp={}
                temp['inno']=i['inspection_no']
                temp['item_no']=i['item_no']
                temp['target']=i['target_date']
                temp['obs']=i['observation']
                t1 = m1.Inspection_details.objects.filter(inspection_no=i['inspection_no']).values('zone','division','dept','inspected_on')
                temp['ins_date']=t1[0]['inspected_on'].strftime("%d-%b-%Y")
                t2=models.railwayLocationMaster.objects.filter(location_code=t1[0]['zone']).values('location_description')
                temp['railway']=t2[0]['location_description']
                t3=models.railwayLocationMaster.objects.filter(location_code=t1[0]['division']).values('location_description')
                temp['division']=t3[0]['location_description']
                temp['dept']=t1[0]['dept']
                data.append(temp)
        context={'data':data}
        return JsonResponse(context,safe=False)
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="new_data23",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})


def dashboard(request):
    return render(request,'dashboard.html')
# connection = psycopg2.connect("dbname=200622 user=postgres password=9911772843")
def get_data(request):
    try:
        sd = request.GET.get('sd')
        ed = request.GET.get('ed')
        data=models.railwayLocationMaster.objects.filter(location_type='ZR').values('location_description','location_code').order_by('location_description')
        data1=models.railwayLocationMaster.objects.filter(location_type='DIV').values('location_description','location_code').order_by('location_description')
        data2=models.departMast.objects.values('department_name').distinct().order_by('department_name')
        data3=models.Level_Desig.objects.exclude(delete_flag=True).values('department_code','designation').distinct()
        list1=[]
        list2=[]
        list3=[]
        list4=[]
        for i in data:
            temp={}
            c1=0
            c2=0
            c3=0
            flag=0
            t = m1.Inspection_details.objects.filter(zone=i['location_code'],inspected_on__gte=sd,inspected_on__lte=ed,status_flag=1).values()
            temp['count']=t.count()  
            for j in t:
                t1=m1.Item_details.objects.filter(inspection_no=j['inspection_no']).values()
                for k in t1:
                    if k['status_flag']==1:
                        flag=1
                    elif k['status_flag']==2:
                        flag=2
                        break
                    elif k['status_flag']==4:
                        flag=3
                if flag==1:
                    c1+=1
                elif flag==2:
                    c2+=1
                elif flag==3:
                    c3+=1
                flag=0
            temp['c1']=c3
            temp['c2']=c2
            temp['c3']=c1  
            temp['loc']=i['location_description']
            temp['id']=i['location_code']
            list1.append(temp)
        for i in data1:
            temp={}
            c1=0
            c2=0
            c3=0
            flag=0
            t = m1.Inspection_details.objects.filter(division=i['location_code'],inspected_on__gte=sd,inspected_on__lte=ed,status_flag=1).values()
            temp['count']=t.count()  
            for j in t:
                t1=m1.Item_details.objects.filter(inspection_no=j['inspection_no']).values()
                for k in t1:
                    if k['status_flag']==1:
                        flag=1
                    elif k['status_flag']==2:
                        flag=2
                        break
                    elif k['status_flag']==4:
                        flag=3
                if flag==1:
                    c1+=1
                elif flag==2:
                    c2+=1
                elif flag==3:
                    c3+=1
                flag=0
            temp['c1']=c3
            temp['c2']=c2
            temp['c3']=c1  
            temp['loc']=i['location_description']
            temp['id']=i['location_code']
            list2.append(temp)
        for i in data2:
            temp={}
            c1=0
            c2=0
            c3=0
            flag=0
            t = m1.Inspection_details.objects.filter(dept=i['department_name'],inspected_on__gte=sd,inspected_on__lte=ed,status_flag=1).values()
            temp['count']=t.count()  
            for j in t:
                t1=m1.Item_details.objects.filter(inspection_no=j['inspection_no']).values()
                for k in t1:
                    if k['status_flag']==1:
                        flag=1
                    elif k['status_flag']==2:
                        flag=2
                        break
                    elif k['status_flag']==4:
                        flag=3
                if flag==1:
                    c1+=1
                elif flag==2:
                    c2+=1
                elif flag==3:
                    c3+=1
                flag=0
            temp['c1']=c3
            temp['c2']=c2
            temp['c3']=c1  
            temp['loc']=i['department_name']
            list3.append(temp)
        for i in data3:
            temp={}
            c1=0
            c2=0
            c3=0
            flag=0
            t = m1.Inspection_details.objects.filter(inspection_officer=i['department_code'],inspected_on__gte=sd,inspected_on__lte=ed,status_flag=1).values()
            temp['count']=t.count()  
            for j in t:
                t1=m1.Item_details.objects.filter(inspection_no=j['inspection_no']).values()
                for k in t1:
                    if k['status_flag']==1:
                        flag=1
                    elif k['status_flag']==2:
                        flag=2
                        break
                    elif k['status_flag']==4:
                        flag=3
                if flag==1:
                    c1+=1
                elif flag==2:
                    c2+=1
                elif flag==3:
                    c3+=1
                flag=0
            temp['c1']=c3
            temp['c2']=c2
            temp['c3']=c1  
            temp['loc']=i['designation']
            list4.append(temp)
        context={
            'list1':list1,
            'list2':list2,
            'list3':list3,
            'list4':list4,
        }
        return JsonResponse(context, safe = False)
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="get_data",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})

def get_data2(request):
    try:
        sd = request.GET.get('sd2')
        ed = request.GET.get('ed2')
        data=models.railwayLocationMaster.objects.filter(location_type='ZR').values('location_description','location_code').order_by('location_description')
        data1=models.railwayLocationMaster.objects.filter(location_type='DIV').values('location_description','location_code').order_by('location_description')
        data2=models.departMast.objects.values('department_name').distinct().order_by('department_name')
        data3=models.Level_Desig.objects.exclude(delete_flag=True).values('designation','department_code').distinct()
        list1=[]
        list2=[]
        list3=[]
        list4=[]
        for i in data:
            temp={}
            t = m1.Item_details.objects.filter(inspection_no__zone=i['location_code'],inspection_no__status_flag=1,inspection_no__inspected_on__gte=sd,inspection_no__inspected_on__lte=ed).values('status_flag')
            temp['count']=t.exclude(status_flag__in=[None,0]).count()
            temp['c1']=t.filter(status_flag=3).count()
            temp['c2']=t.filter(status_flag=2).count()
            temp['c3']=t.filter(status_flag=1).count()
            temp['loc']=i['location_description']
            temp['id']=i['location_code']
            list1.append(temp)
        for i in data1:
            temp={}
            t = m1.Item_details.objects.filter(inspection_no__division=i['location_code'],inspection_no__status_flag=1,inspection_no__inspected_on__gte=sd,inspection_no__inspected_on__lte=ed).values('inspection_no')
            temp['count']=t.exclude(status_flag__in=[None,0]).count()
            temp['c1']=t.filter(status_flag=3).count()
            temp['c2']=t.filter(status_flag=2).count()
            temp['c3']=t.filter(status_flag=1).count()
            temp['loc']=i['location_description']
            temp['id']=i['location_code']
            list2.append(temp)
        for i in data2:
            temp={}
            t = m1.Item_details.objects.filter(inspection_no__dept=i['department_name'],inspection_no__status_flag=1,inspection_no__inspected_on__gte=sd,inspection_no__inspected_on__lte=ed).values('inspection_no')
            temp['count']=t.exclude(status_flag__in=[None,0]).count()
            temp['c1']=t.filter(status_flag=3).count()
            temp['c2']=t.filter(status_flag=2).count()
            temp['c3']=t.filter(status_flag=1).count()
            temp['loc']=i['department_name'] 
            list3.append(temp)
        for i in data3:
            temp={}
            t = m1.Item_details.objects.filter(inspection_no__inspection_officer=i['department_code'],inspection_no__status_flag=1,inspection_no__inspected_on__gte=sd,inspection_no__inspected_on__lte=ed).values('inspection_no')
            temp['count']=t.exclude(status_flag__in=[None,0]).count()
            temp['c1']=t.filter(status_flag=3).count()
            temp['c2']=t.filter(status_flag=2).count()
            temp['c3']=t.filter(status_flag=1).count()
            temp['loc']=i['designation'] 
            list4.append(temp)
        context={
            'list1':list1,
            'list2':list2,
            'list3':list3,
            'list4':list4,
        }
        return JsonResponse(context, safe = False)
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="get_data2",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})

from datetime import timedelta

def dash_details(request):
    try:
        railway=request.GET.get('data')
        case=request.GET.get('data1')
        typei=request.GET.get('data2')
        color=request.GET.get('data3')
        daterange=request.GET.get('daterange')
        data4=request.GET.get('data4')
        data5=request.GET.get('data5')
        markoff=request.GET.get('markoff')
        loctype=request.GET.get('loctype')

        if markoff:
            markoff1=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation=markoff).values('designation_code')
        else:
            markoff1=False
        user=request.user
        das_desig=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=user.email)|Q(official_email_ID=user)).values('designation_code','department') 
        
        result=[]
        insp_data=[]
        c=0
        objm = m1.Marked_Officers.objects.filter(item_no__inspection_no__inspection_officer=das_desig[0]['designation_code']).values_list('item_no', flat=True)
                
        if typei=='Insp':
            if data4=='STM':
                obj4=models.station_master.objects.filter(stnshortcode=railway).values('station_name')
                railway=obj4[0]['station_name']
                loc_multi=m1.Insp_multi_location.objects.filter(item=obj4[0]['station_name']).values_list('inspection_no', flat=True)
            elif data4=='SEM':
                obj4=models.section_master.objects.filter(section_code=railway).values('section_name')
                railway=obj4[0]['section_name']
                loc_multi=m1.Insp_multi_location.objects.filter(item=obj4[0]['section_name']).values_list('inspection_no', flat=True)
            elif data4=='RRM':
                obj4=models.runningroom_master.objects.filter(rr_code=railway).values('rr_name')
                railway=obj4[0]['rr_name']
                loc_multi=m1.Insp_multi_location.objects.filter(item=obj4[0]['rr_name']).values_list('inspection_no', flat=True)
            elif data4=='ORL':
                obj4=models.railwayLocationMaster.objects.filter(location_code=railway).values('location_description')
                railway=obj4[0]['location_description']
                loc_multi=m1.Insp_multi_location.objects.filter(item=obj4[0]['location_description']).values_list('inspection_no', flat=True)
            elif data4=='SOP':
                obj4=models.Shop_section.objects.filter(shop_code=railway).values('section_desc')
                railway=obj4[0]['section_desc']
                loc_multi=m1.Insp_multi_location.objects.filter(item=obj4[0]['section_desc']).values_list('inspection_no', flat=True)
            else:
                obj4=models.railwayLocationMaster.objects.filter(location_code=railway).values('location_description')
                if loctype:
                    loc_multi=m1.Insp_multi_location.objects.filter(item=railway,type=loctype).values_list('inspection_no', flat=True)
                else:
                    loc_multi=m1.Insp_multi_location.objects.filter(item=railway).values_list('inspection_no', flat=True)
                railway=obj4[0]['location_description']
        
            if color in ['0-3','0-6','0-12','tofrom']:
                from dateutil.relativedelta import relativedelta
                if color=='0-3':
                    now = datetime.today()
                    six = now
                    prev = now - relativedelta(months=3)
                    prev = prev.date()
                elif color=='0-6':
                    now = datetime.today()
                    six = now
                    prev = now - relativedelta(months=6)
                    prev = prev.date()
                elif color=='0-12':
                    now = datetime.today()
                    six = now
                    prev = now - relativedelta(months=12)
                    prev = prev.date()
                elif color=='tofrom':
                    daterange1=daterange.split('-')
                    date1=daterange1[0].split('/')
                    date2=daterange1[1].split('/')
                    prev='20'+date1[2].strip()+'-'+date1[1].strip()+'-'+date1[0].strip()
                    six='20'+date2[2].strip()+'-'+date2[1].strip()+'-'+date2[0].strip()
                
                if case=='Total':
                    insp_data = m1.Inspection_details.objects.filter(~Q(status_flag=0),inspection_officer=das_desig[0]['designation_code'],inspected_on__gte=prev,inspected_on__lte=six,inspection_no__in=loc_multi).values()
                elif case=='Pending':
                    insp_data = m1.Inspection_details.objects.filter(status_flag__in=[1,2,3],inspection_officer=das_desig[0]['designation_code'],inspected_on__gte=prev,inspected_on__lte=six,inspection_no__in=loc_multi).values()
                elif case=='Closed':
                    insp_data = m1.Inspection_details.objects.filter(status_flag=4,inspection_officer=das_desig[0]['designation_code'],inspected_on__gte=prev,inspected_on__lte=six,inspection_no__in=loc_multi).values()

            else:
                if case=='Total':
                    insp_data = m1.Inspection_details.objects.filter(~Q(status_flag=0),inspection_officer=das_desig[0]['designation_code'],inspection_no__in=loc_multi).values()
                elif case=='Pending':
                    insp_data = m1.Inspection_details.objects.filter(status_flag__in=[1,2,3],inspection_officer=das_desig[0]['designation_code'],inspection_no__in=loc_multi).values()
                elif case=='Closed':
                    insp_data = m1.Inspection_details.objects.filter(status_flag=4,inspection_officer=das_desig[0]['designation_code'],inspection_no__in=loc_multi).values()



            
            for y in insp_data:
                location = m1.Insp_multi_location.objects.filter(inspection_no=y['inspection_no']).values()
                y.update({'multiple_loc': location})
            # print(insp_data)


        elif typei=='Item':
            status=''
            if data4 not in ['STM','SEM','RRM','ORL','SOP']:
                obj4=models.railwayLocationMaster.objects.filter(location_code=railway).values('location_description')
            else:
                if data4=='STM':
                    obj4=models.station_master.objects.filter(stnshortcode=railway).values('station_name')
                elif data4=='SEM':
                    obj4=models.section_master.objects.filter(section_code=railway).values('section_name')
                elif data4=='RRM':
                    obj4=models.runningroom_master.objects.filter(rr_code=railway).values('rr_name')
                elif data4=='ORL':
                    obj4=models.railwayLocationMaster.objects.filter(location_code=railway).values('location_description')
                elif data4=='SOP':
                    obj4=models.Shop_section.objects.filter(shop_code=railway).values('section_desc')
            
            if railway:
                if data4 == 'STM':
                    loc_multi=m1.Insp_multi_location.objects.filter(item=obj4[0]['station_name'], inspection_no__inspection_officer=das_desig[0]['designation_code']).values_list('inspection_no', flat=True)
                    railway=obj4[0]['station_name']
                elif data4 == 'SEM':
                    loc_multi=m1.Insp_multi_location.objects.filter(item=obj4[0]['section_name'], inspection_no__inspection_officer=das_desig[0]['designation_code']).values_list('inspection_no', flat=True)
                    railway=obj4[0]['section_name']
                elif data4=='RRM':
                    loc_multi=m1.Insp_multi_location.objects.filter(item=obj4[0]['rr_name'], inspection_no__inspection_officer=das_desig[0]['designation_code']).values_list('inspection_no', flat=True)
                    railway=obj4[0]['rr_name']

                elif data4=='SOP':
                    loc_multi=m1.Insp_multi_location.objects.filter(item=obj4[0]['section_desc'], inspection_no__inspection_officer=das_desig[0]['designation_code']).values_list('inspection_no', flat=True)
                    railway=obj4[0]['section_desc']
                else:
                    loc_multi=m1.Insp_multi_location.objects.filter(item=railway, inspection_no__inspection_officer=das_desig[0]['designation_code']).values_list('inspection_no', flat=True)
                    railway=obj4[0]['location_description']
            else:
                loc_multi = m1.Insp_multi_location.objects.filter(inspection_no__inspection_officer=das_desig[0]['designation_code']).values_list('inspection_no', flat=True)

            
            if color in ['0-3','0-6','0-12','tofrom']:
                from dateutil.relativedelta import relativedelta
                if color=='0-3':
                    now = datetime.today()
                    six = now
                    prev = now - relativedelta(months=3)
                    prev = prev.date()
                elif color=='0-6':
                    now = datetime.today()
                    six = now
                    prev = now - relativedelta(months=6)
                    prev = prev.date()
                elif color=='0-12':
                    now = datetime.today()
                    six = now
                    prev = now - relativedelta(months=12)
                    prev = prev.date()
                elif color=='tofrom':
                    daterange1=daterange.split('-')
                    date1=daterange1[0].split('/')
                    date2=daterange1[1].split('/')
                    prev='20'+date1[2].strip()+'-'+date1[1].strip()+'-'+date1[0].strip()
                    six='20'+date2[2].strip()+'-'+date2[1].strip()+'-'+date2[0].strip()
            
            
                if case=='pendj':
                    
                    if markoff1:
                        objm = m1.Marked_Officers.objects.filter(marked_to=markoff1[0]['designation_code'],status_flag__in=[1,2]).values_list('item_no', flat=True)
                    else:
                        objm = m1.Marked_Officers.objects.filter(status_flag__in=[1,2]).values_list('item_no', flat=True)
                    
                    obj1=m1.Item_details.objects.filter(inspection_no__status_flag__in=[1,2,3], inspection_no__inspection_officer=das_desig[0]['designation_code'],inspection_no__inspected_on__gte=prev,inspection_no__inspected_on__lte=six, item_no__in=objm).exclude(type='SSH').values('inspection_no','item_no','observation','item_title','inspection_no__inspection_note_no','inspection_no__inspected_on','inspection_no__status_flag','des_id')
                    
                    
                elif case=='fullj':
                    objm = m1.Marked_Officers.objects.filter(item_no__inspection_no__inspection_officer=das_desig[0]['designation_code']).values_list('item_no', flat=True)
                    
                    
                    obj1=m1.Item_details.objects.filter(status_flag=4,inspection_no__in=loc_multi,item_no__in=objm,inspection_no__inspection_officer=das_desig[0]['designation_code'],inspection_no__inspected_on__gte=prev,inspection_no__inspected_on__lte=six).exclude(type='SSH').values('inspection_no','item_no','observation','item_title','inspection_no__inspection_note_no','inspection_no__inspected_on','inspection_no__status_flag','des_id')
                elif case=='Total':
                    
                    obj1 = m1.Item_details.objects.filter(~Q(inspection_no__status_flag=0),inspection_no__in=loc_multi,inspection_no__inspection_officer=das_desig[0]['designation_code'],inspection_no__inspected_on__gte=prev,inspection_no__inspected_on__lte=six,item_no__in=objm).exclude(type='SSH').values('inspection_no','item_no','observation','item_title','inspection_no__inspection_note_no','inspection_no__inspected_on','inspection_no__status_flag','des_id')
                    
                    
                elif case=='Pending':
                    obj1 = m1.Item_details.objects.filter(inspection_no__status_flag__in=[1,2,3],inspection_no__in=loc_multi,inspection_no__inspection_officer=das_desig[0]['designation_code'],inspection_no__inspected_on__gte=prev,inspection_no__inspected_on__lte=six, item_no__in=objm).exclude(type='SSH').values('inspection_no','item_no','observation','item_title','inspection_no__inspection_note_no','inspection_no__inspected_on','inspection_no__status_flag','des_id')
                elif case=='Closed':
                    obj1 = m1.Item_details.objects.filter(inspection_no__status_flag=4,inspection_no__in=loc_multi,inspection_no__inspection_officer=das_desig[0]['designation_code'],inspection_no__inspected_on__gte=prev,inspection_no__inspected_on__lte=six,item_no__in=objm).exclude(type='SSH').values('inspection_no','item_no','observation','item_title','inspection_no__inspection_note_no','inspection_no__inspected_on','inspection_no__status_flag','des_id')
            
            
            else:
                if case=='pendj':
                    
                    if markoff1:
                        objm = m1.Marked_Officers.objects.filter(marked_to=markoff1[0]['designation_code'],status_flag__in=[1,2]).values_list('item_no', flat=True)
                    else:
                        objm = m1.Marked_Officers.objects.filter(status_flag__in=[1,2]).values_list('item_no', flat=True)
                    

                    obj1=m1.Item_details.objects.filter(inspection_no__status_flag__in=[1,2,3], inspection_no__inspection_officer=das_desig[0]['designation_code'], item_no__in=objm).exclude(type='SSH').values('inspection_no','item_no','observation','item_title','inspection_no__inspection_note_no','inspection_no__inspected_on','inspection_no__status_flag','des_id')
                    
                    
                elif case=='fullj':
                    objm = m1.Marked_Officers.objects.filter(item_no__inspection_no__inspection_officer=das_desig[0]['designation_code']).values_list('item_no', flat=True)
                    

                    obj1=m1.Item_details.objects.filter(status_flag=4,inspection_no__in=loc_multi,inspection_no__inspection_officer=das_desig[0]['designation_code'],item_no__in=objm).exclude(type='SSH').values('inspection_no','item_no','observation','item_title','inspection_no__inspection_note_no','inspection_no__inspected_on','inspection_no__status_flag','des_id')
                elif case=='Total':
                    
                    obj1 = m1.Item_details.objects.filter(~Q(inspection_no__status_flag=0),inspection_no__in=loc_multi,inspection_no__inspection_officer=das_desig[0]['designation_code'],item_no__in=objm).exclude(type='SSH').values('inspection_no','item_no','observation','item_title','inspection_no__inspection_note_no','inspection_no__inspected_on','inspection_no__status_flag','des_id')
                    
                    
                elif case=='Pending':
                    obj1 = m1.Item_details.objects.filter(inspection_no__status_flag__in=[1,2,3],inspection_no__in=loc_multi,inspection_no__inspection_officer=das_desig[0]['designation_code'],item_no__in=objm).exclude(type='SSH').values('inspection_no','item_no','observation','item_title','inspection_no__inspection_note_no','inspection_no__inspected_on','inspection_no__status_flag','des_id')
                elif case=='Closed':
                    obj1 = m1.Item_details.objects.filter(inspection_no__status_flag=4,inspection_no__in=loc_multi,inspection_no__inspection_officer=das_desig[0]['designation_code'],item_no__in=objm).exclude(type='SSH').values('inspection_no','item_no','observation','item_title','inspection_no__inspection_note_no','inspection_no__inspected_on','inspection_no__status_flag','des_id')


            if case != 'totalj' and case != 'fullj' and case != 'pendj':
                for j in obj1:
                    location = m1.Insp_multi_location.objects.filter(inspection_no=j['inspection_no']).values()
                    j.update({'multiple_loc': location})
                result = obj1
                # print('6666666666666666666666666666666666666666666666666666666666666')
                
            else:

                    
                for j in obj1:
                    location = m1.Insp_multi_location.objects.filter(inspection_no=j['inspection_no']).values()
                    j.update({'multiple_loc': location})
                result = obj1

                # print('55555555555555555555555555555555555555555555555555555555', result)
            
            # print(result)
        list1=models.railwayLocationMaster.objects.filter(location_type_desc__in=['RAILWAY BOARD', 'PRODUCTION UNIT', 'HEAD QUATER','OFFICE', 'PSU', 'PRODUCTION UNIT', 'INSTITUTE']).values('location_code').distinct().order_by('location_code')
        list2=[]
        for i in list1:
            # print(i['location_code'],'_________')
            list2.append(i['location_code'])
        list3=models.railwayLocationMaster.objects.filter(location_type_desc__in=['DIVISION','WORKSHOP', 'STORE', 'CONSTRUCTION', 'OFFICE']).distinct().values('location_code', 'location_type').order_by('location_code')
        list4=[]
        for i in list3:
            list4.append({'location_code': i['location_code'], 'location_type': i['location_type']}) 
        list5=models.departMast.objects.all().distinct().values('department_name').order_by('department_name')
        list6=[]
        for i in list5:
            # print(i['department_name'],'_________')
            list6.append(i['department_name'])
        
        
        insp = m1.Inspection_details.objects.filter(inspection_officer=das_desig[0]['designation_code']).values_list('inspection_no', flat=True).distinct('inspection_no')
        item_no = m1.Item_details.objects.filter(inspection_no__in=insp).values_list('item_no', flat=True)

        insp_officer = m1.Marked_Officers.objects.filter(item_no__inspection_no__inspection_officer_id=das_desig[0]['designation_code']).values('marked_to__designation', 'marked_to__designation_code').distinct('marked_to__designation_code')
        # print('}}}}}}}}}}}', insp_officer)

        hid_railway = m1.Insp_multi_location.objects.filter(inspection_no__inspection_officer=das_desig[0]['designation_code'], item=request.GET.get('data')).values('item', 'type').distinct('item')
        print('hid_railway=============', hid_railway)
        if typei!='Item':
            row={'result':result,
            'typei':typei,
            'railway':railway,
            'insp_data':insp_data,
            'case':case,
            'zone':list2 ,
            'division':list4,
            'dept':list6,
            'hid_railway': hid_railway,
            'daterange': daterange,
            'color_id': color,
            'insp_officer': insp_officer,
            'markoff':markoff,
            'markoff1':markoff1,
            'data5':data5,


            }
        else:
            row={
            'result':result,
            'typei':typei,
            'status':status,
            'railway': railway,
            'case':case,
            'zone':list2 ,
            'division':list4,
            'dept':list6,
            'hid_railway': hid_railway,
            'daterange': daterange,
            'color_id': color,
            'insp_officer': insp_officer,
            'markoff':markoff,
            'markoff1':markoff1,
            'data5':data5,

            
            }

        #print(row)
        return render(request,'dash_details.html',row)
    except Exception as e: 
            try:
                m1.error_Table.objects.create(fun_name="accept_mark_reply_ajax",user_id=request.user,err_details=str(e))
            except:
                print("Internal Error!!!",e)
            return render(request, "errorspage.html", {})


#tarun 24sept22
def dash_details_filterdata(request):
    try:
        if request.method == "GET" and request.is_ajax():
            from dateutil.relativedelta import relativedelta
            rly_id=request.GET.get('rly_id')
            div_id=request.GET.get('div_id')
            dept_id=request.GET.get('dept_id')
            
            railway=request.GET.get('railway_data')
            case=request.GET.get('case_data1')
            typei=request.GET.get('typei_data2')
            daterange_id=request.GET.get('daterange_id')
            color=request.GET.get('color_id')
            date_range=request.GET.get('date_range')
            forme_byme_id=request.GET.get('forme_byme_id')
            Officer_id=request.GET.get('Officer_id')
            print('case ======::',case, typei, div_id)
            print(rly_id, div_id, dept_id, forme_byme_id)
            insp_data=[]
            result = []
       
            if date_range:
                sp_date = date_range.split('-')
                start  = datetime.strptime(sp_date[0].strip(),"%d/%m/%Y").strftime("%Y-%m-%d")
                end  = datetime.strptime(sp_date[1].strip(),"%d/%m/%Y").strftime("%Y-%m-%d")

            

            empnox = models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=request.user)| Q(official_email_ID=request.user.guest_email) | Q(official_email_ID=request.user.email))
            if empnox:
                empno = empnox[0].designation_code
                desig = empnox[0].designation

            print(')))))))))))))))))', empno)
            loc_multi1 = []
            insp_data = []
            if typei=='Insp':
                
                if date_range !='' and div_id == '' and Officer_id =='':
                    print('1')
                    loc_multi = m1.Insp_multi_location.objects.filter(inspection_no__inspection_officer=empno, inspection_no__inspected_on__gte=start, inspection_no__inspected_on__lte=end).values_list('inspection_no', flat=True)
            
                elif date_range =='' and div_id != '' and Officer_id =='':
                    print('3', div_id)
                    loc_multi = m1.Insp_multi_location.objects.filter(Q(item=div_id, type='DIV'), inspection_no__inspection_officer=empno).values_list('inspection_no', flat=True)
                    print(loc_multi)
                elif date_range =='' and div_id == '' and Officer_id !='':
                    print('4', Officer_id)
                    loc_multi = m1.Marked_Officers.objects.filter(marked_to=Officer_id, item_no__inspection_no__inspection_officer=empno).values_list('item_no__inspection_no', flat=True)
                    print('len', len(loc_multi))
                    # loc_multi = m1.Inspection_details.objects.filter(inspection_officer=Officer_id).values_list('inspection_no', flat=True)
            
                elif date_range !='' and div_id != '' and Officer_id =='' :
                    print('7')
                    loc_multi = m1.Insp_multi_location.objects.filter(Q(item=div_id, type='DIV'), inspection_no__inspected_on__gte=start, inspection_no__inspected_on__lte=end, inspection_no__inspection_officer=empno).values_list('inspection_no', flat=True)
                elif date_range !=''  and div_id == '' and Officer_id !='':
                    print('8')
                    loc_multi = m1.Insp_multi_location.objects.filter(inspection_no__inspected_on__gte=start, inspection_no__inspected_on__lte=end, inspection_no__inspection_officer=Officer_id).values_list('inspection_no', flat=True)
            
                elif date_range =='' and div_id == '' and Officer_id =='':
                    print('11')
                    loc_multi = m1.Insp_multi_location.objects.filter(inspection_no__inspection_officer=empno).values_list('inspection_no', flat=True)
                else:
                    loc_multi = m1.Insp_multi_location.objects.filter(inspection_no__inspection_officer=empno).values_list('inspection_no', flat=True)

                if color in ['0-3','0-6','0-12','tofrom']:
                    
                    if color=='0-3':
                        now = datetime.today()
                        six = now
                        prev = now - relativedelta(months=3)
                        prev = prev.date()
                    elif color=='0-6':
                        now = datetime.today()
                        six = now
                        prev = now - relativedelta(months=6)
                        prev = prev.date()
                    elif color=='0-12':
                        now = datetime.today()
                        six = now
                        prev = now - relativedelta(months=12)
                        prev = prev.date()
                    elif color=='tofrom':
                        daterange1=daterange.split('-')
                        date1=daterange1[0].split('/')
                        date2=daterange1[1].split('/')
                        prev='20'+date1[2].strip()+'-'+date1[1].strip()+'-'+date1[0].strip()
                        six='20'+date2[2].strip()+'-'+date2[1].strip()+'-'+date2[0].strip()

                    if case=='Total':
                        insp_data = m1.Inspection_details.objects.filter(~Q(status_flag=0),inspection_officer=empno,inspected_on__gte=prev,inspected_on__lte=six,inspection_no__in=loc_multi).values()
                    elif case=='Pending':
                        insp_data = m1.Inspection_details.objects.filter(status_flag=1,inspection_officer=empno,inspected_on__gte=prev,inspected_on__lte=six,inspection_no__in=loc_multi).values()
                    elif case=='Closed':
                        insp_data = m1.Inspection_details.objects.filter(status_flag=4,inspection_officer=empno,inspected_on__gte=prev,inspected_on__lte=six,inspection_no__in=loc_multi).values()
                else:
                
                    if case=='Total':
                        insp_data = m1.Inspection_details.objects.filter(~Q(status_flag=0),inspection_officer=empno,inspection_no__in=loc_multi).values()
                    
                    elif case=='Pending':
                        insp_data = m1.Inspection_details.objects.filter(status_flag=1,inspection_officer=empno,inspection_no__in=loc_multi).values()
                    elif case=='Closed':
                        insp_data = m1.Inspection_details.objects.filter(status_flag=4,inspection_officer=empno,inspection_no__in=loc_multi).values()

               

                
                for y in insp_data:
                    location = m1.Insp_multi_location.objects.filter(inspection_no=y['inspection_no']).values()
                    y.update({'multiple_loc': list(location)})
                
                insp_data1 = list(insp_data)
                print(insp_data1)
                return JsonResponse({'insp_data': insp_data1, 'typei': typei}, safe=False)
                

            elif typei=='Item':
                # loc_multi = m1.Insp_multi_location.objects.filter(Q(item=rly_id)|Q(item=div_id)|Q(item=dept_id), inspection_no__inspection_officer=empno, inspection_no__inspected_on__gte=start, inspection_no__inspected_on__lte=end).values_list('inspection_no', flat=True)
                if date_range !='' and rly_id =='' and div_id == '' and Officer_id =='' :
                    print('1')
                    loc_multi = m1.Insp_multi_location.objects.filter(inspection_no__inspection_officer=empno, inspection_no__inspected_on__gte=start, inspection_no__inspected_on__lte=end).values_list('inspection_no', flat=True)
                elif date_range =='' and rly_id !='' and div_id == '' and Officer_id =='' :
                    print('2')
                    loc_multi = m1.Insp_multi_location.objects.filter(Q(item=rly_id, type='HQ'), inspection_no__inspection_officer=empno).values_list('inspection_no', flat=True)
                elif date_range =='' and rly_id =='' and div_id != '' and Officer_id =='':
                    print('3', div_id)
                    loc_multi = m1.Insp_multi_location.objects.filter(Q(item=div_id, type='DIV'), inspection_no__inspection_officer=empno).values_list('inspection_no', flat=True)
                    print(loc_multi)
                elif date_range =='' and rly_id =='' and div_id == '' and Officer_id !='':
                    print('4', Officer_id)
                    loc_multi = m1.Marked_Officers.objects.filter(marked_to=Officer_id, item_no__inspection_no__inspection_officer=empno).values_list('item_no', flat=True)
                    print('len', len(loc_multi))
                    # loc_multi = m1.Inspection_details.objects.filter(inspection_officer=Officer_id).values_list('inspection_no', flat=True)
                elif date_range =='' and rly_id !='' and div_id == '' and Officer_id !='':
                    print('55','---', Officer_id, rly_id)
                    
                    # print('len', len(objmt))
                    objmt1 = m1.Insp_multi_location.objects.filter(item=rly_id, type='HQ', inspection_no__inspection_officer=empno).values_list('inspection_no', flat=True)
                    loc_multi = m1.Marked_Officers.objects.filter(marked_to=Officer_id,item_no__inspection_no__in=objmt1,  item_no__inspection_no__inspection_officer=empno).values_list('item_no', flat=True)
                    print(loc_multi)
                elif date_range =='' and rly_id =='' and div_id != '' and Officer_id !='':
                    print('473', Officer_id)
                    objmt = m1.Marked_Officers.objects.filter(marked_to=Officer_id, item_no__inspection_no__inspection_officer=empno).values_list('item_no__inspection_no', flat=True)
                    loc_multi = m1.Insp_multi_location.objects.filter(Q(item=div_id, type='DIV'), inspection_no__inspection_officer=empno, inspection_no__in=objmt).values_list('inspection_no', flat=True)
                    print('len', len(loc_multi))
                    # loc_multi = m1.Inspection_details.objects.filter(inspection_officer=Officer_id).values_list('inspection_no', flat=True)
                elif date_range !='' and rly_id =='' and div_id != '' and Officer_id !='':
                    print('472', Officer_id)
                    objmt = m1.Marked_Officers.objects.filter(marked_to=Officer_id, item_no__inspection_no__inspection_officer=empno).values_list('item_no__inspection_no', flat=True)
                    loc_multi = m1.Insp_multi_location.objects.filter(Q(item=div_id, type='DIV'), inspection_no__inspection_officer=empno, inspection_no__in=objmt, inspection_no__inspected_on__gte=start, inspection_no__inspected_on__lte=end).values_list('inspection_no', flat=True)
                    # print('len', len(loc_multi))
                    # loc_multi = m1.Inspection_details.objects.filter(inspection_officer=Officer_id).values_list('inspection_no', flat=True)

                elif date_range !='' and rly_id !='' and div_id != '' and Officer_id !='':
                    print('470', Officer_id)
                    objmt = m1.Marked_Officers.objects.filter(marked_to=Officer_id, item_no__inspection_no__inspection_officer=empno).values_list('item_no__inspection_no', flat=True)
                    loc_multi = m1.Insp_multi_location.objects.filter(Q(item=div_id, type='DIV'), inspection_no__inspection_officer=empno, inspection_no__in=objmt, inspection_no__inspected_on__gte=start, inspection_no__inspected_on__lte=end).values_list('inspection_no', flat=True)
                    # print('len', len(loc_multi))
                    # loc_multi = m1.Inspection_details.objects.filter(inspection_officer=Officer_id).values_list('inspection_no', flat=True)
                elif date_range =='' and rly_id !='' and div_id != '' and Officer_id =='':
                    print('471', Officer_id)
                    objmt = m1.Marked_Officers.objects.filter(item_no__inspection_no__inspection_officer=empno).values_list('item_no__inspection_no', flat=True)
                    loc_multi = m1.Insp_multi_location.objects.filter(Q(item=div_id, type='DIV'), inspection_no__inspection_officer=empno, inspection_no__in=objmt).values_list('inspection_no', flat=True)
                    # print('len', len(loc_multi))
                    # loc_multi = m1.Inspection_details.objects.filter(inspection_officer=Officer_id).values_list('inspection_no', flat=True)
                
                elif date_range !='' and rly_id !='' and div_id == '' and Officer_id =='':
                    print('6')
                    loc_multi = m1.Insp_multi_location.objects.filter(Q(item=rly_id, type='HQ'), inspection_no__inspected_on__gte=start, inspection_no__inspected_on__lte=end, inspection_no__inspection_officer=empno).values_list('inspection_no', flat=True)
                elif date_range !='' and rly_id =='' and div_id != '' and Officer_id =='':
                    print('7')
                    loc_multi = m1.Insp_multi_location.objects.filter(Q(item=div_id, type='DIV'), inspection_no__inspected_on__gte=start, inspection_no__inspected_on__lte=end, inspection_no__inspection_officer=empno).values_list('inspection_no', flat=True)
                elif date_range !='' and rly_id =='' and div_id == '' and Officer_id !='':
                    print('8')
                    loc_multi = m1.Insp_multi_location.objects.filter(inspection_no__inspected_on__gte=start, inspection_no__inspected_on__lte=end, inspection_no__inspection_officer=Officer_id).values_list('inspection_no', flat=True)
              
                elif date_range !='' and rly_id !='' and div_id != '' and Officer_id =='':
                    print('10')
                    loc_multi = m1.Insp_multi_location.objects.filter(Q(item=div_id, type='DIV'), inspection_no__inspected_on__gte=start, inspection_no__inspected_on__lte=end, inspection_no__inspection_officer=empno).values_list('inspection_no', flat=True)
                elif date_range =='' and rly_id =='' and div_id == '' and Officer_id =='':
                    print('11')
                    loc_multi = m1.Insp_multi_location.objects.filter(inspection_no__inspection_officer=empno).values_list('inspection_no', flat=True)
                else:
                    loc_multi = m1.Insp_multi_location.objects.filter(inspection_no__inspection_officer=empno).values_list('inspection_no', flat=True)
                
                # loc_multi1 = m1.Marked_Officers.objects.filter(item_no__inspection_no__in=loc_multi, marked_to=empno).values_list('item_no__inspection_no', flat=True)
                if color in ['0-3','0-6','0-12','tofrom']:

                    if color=='0-3':
                        now = datetime.today()
                        six = now
                        prev = now - relativedelta(months=3)
                        prev = prev.date()
                    elif color=='0-6':
                        now = datetime.today()
                        six = now
                        prev = now - relativedelta(months=6)
                        prev = prev.date()
                    elif color=='0-12':
                        now = datetime.today()
                        six = now
                        prev = now - relativedelta(months=12)
                        prev = prev.date()
                    elif color=='tofrom':
                        daterange1=daterange.split('-')
                        date1=daterange1[0].split('/')
                        date2=daterange1[1].split('/')
                        prev='20'+date1[2].strip()+'-'+date1[1].strip()+'-'+date1[0].strip()
                        six='20'+date2[2].strip()+'-'+date2[1].strip()+'-'+date2[0].strip()
                
                
                    if case=='pendj':
                        
                        objm = m1.Marked_Officers.objects.filter(item_no__inspection_no__inspection_officer=empno, item_no__in=loc_multi).values_list('item_no', flat=True)
                    
                        obj1=m1.Item_details.objects.filter(inspection_no__status_flag__in=[1,2,3], inspection_no__inspection_officer=empno,inspection_no__inspected_on__gte=prev,inspection_no__inspected_on__lte=six, item_no__in=objm).exclude(type='SSH').values('inspection_no','item_no','observation','item_title','inspection_no__inspection_note_no','inspection_no__inspected_on','inspection_no__status_flag','des_id')
                        
                        
                    elif case=='fullj':
                        objm = m1.Marked_Officers.objects.filter(item_no__inspection_no__inspection_officer=empno, item_no__inspection_no__in=loc_multi).values_list('item_no', flat=True)
                        
                        
                        obj1=m1.Item_details.objects.filter(status_flag=4,item_no__in=objm,inspection_no__inspection_officer=empno, inspection_no__inspected_on__gte=prev,inspection_no__inspected_on__lte=six).exclude(type='SSH').values('inspection_no','item_no','observation','item_title','inspection_no__inspection_note_no','inspection_no__inspected_on','inspection_no__status_flag','des_id')
                    elif case=='Total':
                        
                        obj1 = m1.Item_details.objects.filter(~Q(inspection_no__status_flag=0),inspection_no__in=loc_multi,inspection_no__inspection_officer=empno, inspection_no__inspected_on__gte=prev,inspection_no__inspected_on__lte=six,item_no__in=objm).exclude(type='SSH').values('inspection_no','item_no','observation','item_title','inspection_no__inspection_note_no','inspection_no__inspected_on','inspection_no__status_flag','des_id')
                        
                        
                    elif case=='Pending':
                        obj1 = m1.Item_details.objects.filter(inspection_no__status_flag__in=[1,2,3],inspection_no__in=loc_multi,inspection_no__inspection_officer=empno, inspection_no__inspected_on__gte=prev,inspection_no__inspected_on__lte=six).exclude(type='SSH').values('inspection_no','item_no','observation','item_title','inspection_no__inspection_note_no','inspection_no__inspected_on','inspection_no__status_flag','des_id')
                    elif case=='Closed':
                        obj1 = m1.Item_details.objects.filter(inspection_no__status_flag=4,inspection_no__in=loc_multi,inspection_no__inspection_officer=empno, inspection_no__inspected_on__gte=prev,inspection_no__inspected_on__lte=six).exclude(type='SSH').values('inspection_no','item_no','observation','item_title','inspection_no__inspection_note_no','inspection_no__inspected_on','inspection_no__status_flag','des_id')

                else:
                    print(loc_multi)
                    if case=='pendj':
                        if Officer_id:
                            objm = m1.Marked_Officers.objects.filter(marked_to=Officer_id, item_no__in=loc_multi, status_flag__in=(1,2)).values_list('item_no', flat=True)
                        else:
                            objm = m1.Marked_Officers.objects.filter(item_no__in=loc_multi, status_flag__in=(1,2)).values_list('item_no', flat=True)
                        print('objm======', len(objm))
                        import time
                        
                        # t1 = time.time()
                        # objm23 = m1.Marked_Officers.objects.filter(marked_to=14,status_flag__in=[1,2], item_no__inspection_no__inspection_officer=18).select_related('item_no').all()
                        # obj1 = []
                        # for f in objm23:
                        #     obj1.append({
                        #         'inspection_no' : f.item_no.inspection_no_id,
                        #         'item_no' : f.item_no.item_no,
                        #         'observation' : f.item_no.observation,
                        #         'item_title' : f.item_no.item_title,
                        #         'inspection_no__inspection_note_no' : f.item_no.inspection_no.inspection_note_no,
                        #         'inspection_no__inspected_on' : f.item_no.inspection_no.inspected_on,
                        #         'inspection_no__status_flag' : f.item_no.inspection_no.status_flag,
                        #         'des_id' : f.item_no.des_id
                        #     })
                        

                            # print('objm23', inspection_no,item_no, observation, item_title, inspection_no_inspection_note_no,inspection_no_inspected_on, inspection_no_status_flag, des_id)
                        #'inspection_no','item_no','observation','item_title','inspection_no__inspection_note_no','inspection_no__inspected_on','inspection_no__status_flag','des_id'
                        
                        
                        obj1=m1.Item_details.objects.filter(inspection_no__status_flag__in=[1,2,3], inspection_no__inspection_officer=empno, item_no__in=objm).exclude(type='SSH').values('inspection_no','item_no','observation','item_title','inspection_no__inspection_note_no','inspection_no__inspected_on','inspection_no__status_flag','des_id')
                        # # print('pending-001', len(obj1))
                        # t2 = time.time()
                        # print('TOTAL TIME TAKEN: ', t2-t1)
                    elif case=='fullj':
                        objm = m1.Marked_Officers.objects.filter(item_no__inspection_no__inspection_officer=empno, item_no__inspection_no__in=loc_multi).values_list('item_no', flat=True)
                        

                        obj1=m1.Item_details.objects.filter(status_flag=4,inspection_no__in=loc_multi,inspection_no__inspection_officer=empno,item_no__in=objm).exclude(type='SSH').values('inspection_no','item_no','observation','item_title','inspection_no__inspection_note_no','inspection_no__inspected_on','inspection_no__status_flag','des_id')
                    elif case=='Total':
                        print('700')
                        # objm = m1.Marked_Officers.objects.filter(item_no__inspection_no__inspection_officer=empno, item_no__inspection_no__in=loc_multi).values_list('item_no', flat=True)
                        # print('=======', objm)
                        obj1 = m1.Item_details.objects.filter(~Q(inspection_no__status_flag=0),inspection_no__inspection_officer=empno, item_no__in=loc_multi).exclude(type='SSH').values('inspection_no','item_no','observation','item_title','inspection_no__inspection_note_no','inspection_no__inspected_on','inspection_no__status_flag','des_id')
                        print(obj1, '0000000000')
                        
                    elif case=='Pending':
                        obj1 = m1.Item_details.objects.filter(inspection_no__status_flag__in=[1,2,3],inspection_no__in=loc_multi,inspection_no__inspection_officer=empno).exclude(type='SSH').values('inspection_no','item_no','observation','item_title','inspection_no__inspection_note_no','inspection_no__inspected_on','inspection_no__status_flag','des_id')
                    elif case=='Closed':
                        obj1 = m1.Item_details.objects.filter(inspection_no__status_flag=4,inspection_no__in=loc_multi,inspection_no__inspection_officer=empno).exclude(type='SSH').values('inspection_no','item_no','observation','item_title','inspection_no__inspection_note_no','inspection_no__inspected_on','inspection_no__status_flag','des_id')

                
                
                # if color=='all':
                #     if case=='totalj':
                #         obj1=m1.Item_details.objects.filter(~Q(inspection_no__status_flag=0),inspection_no__inspection_officer=empno,inspection_no__in=loc_multi).values('item_no', 'item_title','observation','des_id',  'inspection_no__inspected_on','inspection_no', 'inspection_no__inspection_note_no')
                #     elif case=='pendj':
                #         print('9999', loc_multi)
                #         loc_multi1 = m1.Marked_Officers.objects.filter( item_no__inspection_no__inspection_officer=empno, item_no__inspection_no__in=loc_multi, status_flag__in=[1,2]).values_list('item_no', flat=True)
                #         # print('=======', loc_multi1)
                #         obj1=m1.Item_details.objects.filter(status_flag__in=[1,2], inspection_no__inspection_officer=empno, item_no__in=loc_multi1).exclude(type='SSH').values('item_no', 'item_title','observation','des_id', 'inspection_no__inspection_note_no', 'inspection_no__inspected_on', 'inspection_no')
                #         # print(obj1)
                        
                #         # obj2=[]
                #         # for i in obj1:
                #         #     if m1.Marked_Officers.objects.filter(item_no=i['item_no']).exists():
                #         #         obj2.append(i)
                #         # obj1=obj2
                #     elif case=='fullj':
                #         loc_multi1 = m1.Marked_Officers.objects.filter(item_no__inspection_no__inspection_officer=empno, item_no__inspection_no__in=loc_multi).values_list('item_no', flat=True)
                #         obj1=m1.Item_details.objects.filter(inspection_no__status_flag=4, inspection_no__inspection_officer=empno, item_no__in=loc_multi1).exclude(type='SSH').values('item_no', 'item_title','observation','des_id', 'inspection_no__inspection_note_no', 'inspection_no__inspected_on', 'inspection_no')
                        
                #         # obj1=m1.Item_details.objects.filter(observation__isnull=False,inspection_no__status_flag=4,inspection_no__inspection_officer=empno, inspection_no__in=loc_multi).exclude(type='SSH').values('item_no', 'item_title','observation','des_id', 'inspection_no__inspection_note_no', 'inspection_no__inspected_on', 'inspection_no')
                #         # obj2=[]
                #         # for i in obj1:
                #         #     if m1.Marked_Officers.objects.filter(item_no=i['item_no']).exists():
                #         #         obj2.append(i)
                #         # obj1=obj2
                #     elif case=='Total':
                #         obj1 = m1.Item_details.objects.filter(~Q(inspection_no__status_flag=0),inspection_no__inspection_officer=empno, inspection_no__in=loc_multi).exclude(type='SSH').values('item_no', 'item_title','observation','des_id', 'inspection_no__inspection_note_no', 'inspection_no__inspected_on', 'inspection_no')

                #     elif case=='Pending':
                #         obj1 = m1.Item_details.objects.filter(inspection_no__status_flag=1,inspection_no__inspection_officer=empno, inspection_no__in=loc_multi).exclude(type='SSH').values('item_no', 'item_title','observation','des_id', 'inspection_no__inspection_note_no', 'inspection_no__inspected_on', 'inspection_no')
                #     elif case=='Closed':
                #         obj1 = m1.Item_details.objects.filter(inspection_no__status_flag=4,inspection_no__inspection_officer=empno, inspection_no__in=loc_multi).exclude(type='SSH').values('item_no', 'item_title','observation','des_id', 'inspection_no__inspection_note_no', 'inspection_no__inspected_on', 'inspection_no')
           
                
                return JsonResponse({'result': list(obj1), 'typei': typei}, safe=False)
           

        
        
        return JsonResponse({'success':False}, status=404)
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="dash_details_filterdata",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})




###gunjan -mom 
def mom_dash_ajax(request):
    try:
        if request.method == "GET" and request.is_ajax():
            insp_no=request.GET.get('insp_no') 
            insp_details=m3.Insp_details.objects.filter(insp_no=insp_no).values()
            marked_details=m3.Marked_Members.objects.filter(item_no__insp_no=insp_no).values('item_no_id','reply_text','reply_file','reply_on','marked_to__designation')
            list1=[]
            list2=[]
            for i in insp_details:
                temp={}
                temp['insp_no']=i['insp_no']
                temp['note_no']=i['mom_note_no']   
                temp['mdate']=i['mom_date'].strftime("%d/%m/%Y")
                temp['title']=i['mom_title']
            list1.append(temp)
            for i in marked_details:
                if(m3.Item_details.objects.filter(item_no=i['item_no_id'])):
                    list_item=m3.Item_details.objects.filter(item_no=i['item_no_id']).values()
                    temp={}
                    temp['item_db']=i['item_no_id']
                    temp['marked_to']=i['marked_to__designation']
                    temp['item_no']=list_item[0]['des_id']
                    if i['reply_on']:
                        temp['reply_on']=i['reply_on'].strftime("%d/%m/%y")
                    else:
                        temp['reply_on']=''
                    temp['text']=i['reply_text']
                    if(i['reply_file']):
                        temp['file']=i['reply_file']
                        print(temp['file'])
                list2.append(temp)
            print(list2,'1234')
            return JsonResponse({'insp_details':list1,'item_details':list2,},safe=False)
        return JsonResponse({"success":False}, status = 400) 
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="mom_dash_ajax",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})

def dash_home(request):
    # try:
        do_total=0
        dodate=None
        dosubject=''
        doltotal=0
        dolreply=0
        doid=None
        dolreplied=0
        now = datetime.today()
        prev = now - timedelta(days=90)
        six=now - timedelta(days=180)
        month='{:02d}'.format(now.month)
        day='{:02d}'.format(now.day)
        prevmonth = '{:02d}'.format(prev.month)
        prevday = '{:02d}'.format(prev.day)
        year = '{:02d}'.format(now.year)
        prevyear = '{:02d}'.format(prev.year)
        dt1 = year+'-'+month+'-'+day
        dt2 = prevyear+'-'+prevmonth+'-'+prevday
        t1=m1.Inspection_details.objects.filter(start_date__lte=dt2).values()
        c6= t1.filter(status_flag=1).count()
        c7= t1.filter(status_flag=2).count()
        c8= t1.filter(status_flag=3).count()
        c9 = t1.filter(status_flag=0).count()
        c10 = t1.filter(status_flag=None).count()
        t = m1.Inspection_details.objects.values()
        c1= t.filter(status_flag=1).count()
        c2= t.filter(status_flag=2).count()
        c3= t.filter(status_flag=3).count()
        c4 = t.filter(status_flag=0).count()
        c5 = t.filter(status_flag=None).count()
        draft = c5+c4
        final = c1+c2+c3
        partial = c2
        closed = c3
        dless = c10+c9
        dmore = draft-dless
        fless = c6+c7+c8
        fmore = final-fless
        pless = c7
        pmore = partial-pless
        cless = c8
        cmore = closed-cless
        color='all'
        # daterange= '15/08/22 - '+str(now.strftime('%d/%m/%y'))
        daterange='All'
        setvalue='1'

        user=request.user
        if request.user.user_role == 'guest':
            user=request.user.guest_email
            request.user.email=request.user.guest_email
            # cuser_id=models.Level_Desig.objects.exclude(delete_flag=True).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].designation_code
        das_desig=models.Level_Desig.objects.exclude(delete_flag=True).filter(official_email_ID=user).values('designation_code')
        if das_desig.count()>0:
            das_desig=das_desig[0]['designation_code']
        else:
            das_desig=None

        das_desig_level=models.Level_Desig.objects.exclude(delete_flag=True).filter(official_email_ID=user)[0].d_level
        das_desig2=models.Level_Desig.objects.exclude(delete_flag=True).filter(official_email_ID=user).values('d_level')
        if das_desig2.count()>0:
            das_desig2=das_desig2[0]['d_level']
        else:
            das_desig2=None

        # #------------ all lists--------------
        tablea, tableb, tabled, tablerr,tablesec,tableu,tableshop = [],[],[],[],[],[],[]

        # # drm wise
        # drmwiselst=[]
        # drmwisedata=[]
        # drmwisedatanon1 = []
        # drmwisedatanon2 = []
        # countindrm=[]
        # countbeydrm=[]
        # countmarkdrm = []
        # drmwisefulldesig = []

        # # phod wise
        # phodwiselst=[]
        # phodwisedata=[]
        # phodwisedatanon1 = []
        # phodwisedatanon2 = []
        # countinphod=[]
        # countbeyphod=[]
        # countmarkphod = []
        # phodwisefulldesig = []

        budget_list_yr=[]
        budget_list_data=[]

        # bowiselst=[]
        # bowisedata=[]
        # bowisedatanon1 = []
        # bowisedatanon2 = []
        # countinbo=[]
        # countbeybo=[]
        # countmarkbo = []
        # bowisefulldesig = []

        # othwiselstnon = []
        # othwisedatanon1=[]
        # othwisedatanon2 = []
        # countinoth=[]
        # countbeyoth=[]
        # countmarkoth = []

        departwiselst=[]
        departwisedata=[]
        departwisedatanon1 = []
        departwisedatanon2 = []
        countindepart=[]
        countbeydepart=[]

        # adrmwiselst = []
        # adrmwisedata=[]
        # adrmwisedatanon1 = []
        # adrmwisedatanon2 = []
        # countinadrm=[]
        # countbeyadrm=[]
        # countmarkadrm = []
        # adrmwisefulldesig = []

        # zonalwiselst=[]
        # zonalwisedata=[]
        # zonalwiselstrb=[]
        # zonalwisedatarb=[]
        # zonalwiselstzone=[]
        # zonalwisedatazone=[]
        # zonalwisedatanon1=[]
        # zonalwisedatanon2=[]
        # zonalwisedatarbnon2=[]
        # zonalwisedatarbnon1=[]
        # zonalwisedatazonenon1=[]
        # zonalwisedatazonenon2=[]
        # countinzonal1=[]
        # countbeyzonal1=[]
        # countinrb1 = []
        # countbeyrb1 = []
        # countinzone1 = []
        # countbeyzone1 = []

        # counttotmarkall = []
        # counttotmarkzone = []
        # counttotmarkrb = []

        # listrb = []

        # cper1=[]
        # cper2=[]
        # cinrb=[]
        # cbeyrb=[]
        # cmarkrb=[]
        # listrb=[]

        # pulst=[]
        # pudata=[]
        # pulstpu=[]
        # pudatapu=[]
        # pulstcti=[]
        # pudatacti=[]
        # pulstpsu=[]
        # pudatapsu=[]
        # pudatanon1=[]
        # pudatanon2=[]
        # pudatapunon1=[]
        # pudatapunon2=[]
        # pudatactinon1=[]
        # pudatactinon2=[]
        # pudatapsunon1=[]
        # pudatapsunon2=[]
        # countinpu1=[]
        # countbeypu1=[]
        # countinpu2 = []
        # countbeypu2 = []
        # countincti1=[]
        # countbeycti1=[]
        # countinpsu1=[]
        # countbeypsu1=[]

        # counttotmarkall1 = []
        # counttotmarkpu = []
        # counttotmarkcti = []
        # counttotmarkpsu = []

        context={}

        # #------------ ends----------------

        from datetime import date
        today = date.today()
        empno = None
        desig = None
        empnox = models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=request.user)| Q(official_email_ID=request.user.guest_email) | Q(official_email_ID=request.user.email), empno__isnull=False)
        
        if empnox:
            empno = empnox[0].empno_id
            desig = empnox[0].designation_code
            
            empname=list(m1.empmast.objects.filter(empno=empno).values('empname'))
            if empname:
                empname=empname[0]['empname']
            else:
                empname="NA"
            # print(empno,empname)
    
        else:
            pass
            # messages.error(request, 'You are not authorize to create DO letters. Please contact to admin')

        officers=models.Level_Desig.objects.exclude(delete_flag=True).exclude(designation_code=desig).values('designation', 'designation_code')
        if request.method == 'POST':  
            do_letter_no=request.POST.get('do_letter_no')
            date111=request.POST.get('date')
            if date111:
                new_date = datetime.strptime(date111, '%d/%m/%y').strftime('%Y-%m-%d')
            subject=request.POST.get('subject')
            action_by= request.POST.get('action_by_test')
            copy_to= request.POST.get('copy_to_test')
            do_text=request.POST.get('do_text')
            fail=0


            if action_by:
                marked_officers=action_by.split(',')
                copy_to=copy_to.split(',')
                if len(do_text)>0:
                    do_file=None
                else:
                    do_text=None
                    do_file=request.FILES['do_file']
                
                values=m4.do_upload.objects.create(do_text=do_text, created_by_id = empno, desig_id_id= desig, status_flag=4, do_letter_no = do_letter_no,  do_letter_date=new_date, subject=subject, do_path= do_file, delete_flag=0 )

                if len(marked_officers[0])>0:
                    for i in marked_officers:
                        marked_officers_list = models.Level_Desig.objects.exclude(delete_flag=True).get(designation_code=i)
                        empnos=(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code = i).values('empno'))[0]
                        if empnos['empno']:
                            marked_officers_id= m1.empmast.objects.get(empno=empnos['empno'])
                            action= m4.do_act.objects.create(id_upload=values, desig_id=marked_officers_list, status_flag=False,  emp_no = marked_officers_id )  
                        else:
                            fail=1
                            m4.do_upload.objects.filter(id=values.id).delete()
                            # messages.error(request,"upload unsuccessful")
                
                if copy_to != [''] and fail==0:
                    try:
                        copy_mail =[]
                        copy_desig=[]
                        copy_contact=[]
                        copy_desig_list=''
                        copy_id_list=''
                        count_copy=len(copy_to)
                        countc=1
                        for i in copy_to:
                            mail_contact=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i)
                            if count_copy==countc:
                                copy_desig_list+=mail_contact[0].designation
                                copy_id_list+=str(mail_contact[0].designation_code)
                            else:
                                copy_desig_list+=mail_contact[0].designation+','
                                copy_id_list+=str(mail_contact[0].designation_code)+','
                                countc+=1
                            copy_desig.append(mail_contact[0].designation)
                            if mail_contact[0].official_email_ID:
                                copy_mail.append(mail_contact[0].official_email_ID)
                            if mail_contact[0].contactnumber:
                                copy_contact.append(mail_contact[0].contactnumber)
                        
                        To=copy_mail
                        subject=values.subject
                        context = {
                            'title': values.subject,
                            'do_date': values.do_letter_date,
                            'insp_no': values.id,
                            'do_officer': values.desig_id,
                            'str': 'copyto'          
                        }  
                        if m6.copyto_mails.objects.filter(sender_id_id=desig, doc_id=values.id, area_flag=0, doc_table='d').exists():
                            m6.copyto_mails.objects.filter(sender_id_id=desig, doc_id=values.id, area_flag=0, doc_table='d').update(created_on=datetime.now(),sender_id_id=desig,doc_id=values.id,doc_table='d',receiver_id=copy_id_list,receiver_desig=copy_desig_list,
                                subject='D.O. Letter', body=values.subject,area_flag=0)
                        else:
                            m6.copyto_mails.objects.create(created_on=datetime.now(),sender_id_id=desig,doc_id=values.id,doc_table='d',receiver_id=copy_id_list,receiver_desig=copy_desig_list,
                                subject='D.O. Letter', body=values.subject,area_flag=0)
                        # MomSendMail(subject,To,context,values.insp_no)
                        # messages.success(request, 'E-mail has been send successfully to copy-to officers.')  
                    except:
                        #print("ERROR-COPY-MAIL")
                        m4.do_upload.objects.filter(id=values.id).delete()
                        m4.do_act.objects.filter(id_upload=values).delete()
                        # messages.error(request, 'Request to sent e-mail to dealt officers failed. Please Try Again.')
            else:
                pass
                # messages.error(request,"upload unsuccessful")
        
        if request.method == 'POST' or request.method == 'GET':
            # print("AAAA")
            submitvalue=request.POST.get('submit')
            # print("dcnjdc",submitvalue)
            
            if submitvalue not in ['sum5','sum4','sum3','sum2'] :
                # for all case
                color='all'
                # print("color...",color)
                objm = m1.Marked_Officers.objects.filter(item_no__inspection_no__inspection_officer=das_desig).values_list('item_no', flat=True)
                objm1 = m1.Marked_Officers.objects.filter(item_no__inspection_no__inspection_officer=das_desig,status_flag__in=[1,2]).values_list('item_no', flat=True)

                # draft inspections
                deti=m1.Inspection_details.objects.filter(status_flag=0,inspection_officer=das_desig).count()
                # draft inspections - item
                detj=m1.Item_details.objects.filter(item_no__in=objm,inspection_no__in=m1.Inspection_details.objects.filter(status_flag=0,inspection_officer=das_desig)).exclude(type='SSH').values('inspection_no').count()

                # total inspections except draft
                totali=m1.Inspection_details.objects.filter(~Q(status_flag=0),inspection_officer=das_desig).count()
                # total inspections except draft - item
                totalj=m1.Item_details.objects.filter(item_no__in=objm,inspection_no__in=m1.Inspection_details.objects.filter(~Q(status_flag=0),inspection_officer=das_desig)).exclude(type='SSH').values('inspection_no').count()
                # pending inspections
                pendi=m1.Inspection_details.objects.filter(status_flag__in=[1,2,3],inspection_officer=das_desig).count()
                # pending inspections -items
                pendj=m1.Item_details.objects.filter(item_no__in=objm1,inspection_no__in=m1.Inspection_details.objects.filter(status_flag__in=[1,2,3],inspection_officer=das_desig)).exclude(type='SSH').values('inspection_no').count()
  
                # fully complied inspections
                fulli=m1.Inspection_details.objects.filter(status_flag=4,inspection_officer=das_desig).values()
                # fully complied inspections - items
                fullj=m1.Item_details.objects.filter(item_no__in=objm,status_flag=4).exclude(type='SSH').count()

                # # total replied inspections
                # treplyi=m1.Inspection_details.objects.filter(~Q(status_flag=0),inspection_no__in=m1.Item_details.objects.filter(item_no__in=m1.Marked_Officers.objects.filter((Q(status_flag=1)|Q(status_flag=2)|Q(status_flag=3)),marked_to_id=das_desig).values('item_no')).values('inspection_no')).count()

                # # total replied inspections - items
                # treplyj=m1.Item_details.objects.filter(inspection_no__in=m1.Inspection_details.objects.filter(~Q(status_flag=0),inspection_no__in=m1.Item_details.objects.filter(item_no__in=m1.Marked_Officers.objects.filter((Q(status_flag=1)|Q(status_flag=2)|Q(status_flag=3)),marked_to_id=das_desig).values('item_no')).values('inspection_no'))).count()

                # replies to my compliances
               # repliedi=m1.Inspection_details.objects.filter(~Q(status_flag=0),inspection_no__in=m1.Item_details.objects.filter(item_no__in=m1.Marked_Officers.objects.filter(marked_to_id=das_desig,status_flag=3).values('item_no')).values('inspection_no')).count()
                objre = m1.Marked_Officers.objects.filter(marked_to_id=das_desig).values('item_no','status_flag','item_no__status_flag','item_no__inspection_no')
                listre={}
                for i in range(len(objre)):
                    if str(objre[i]['item_no__inspection_no']) not in listre:
                        listre[str(objre[i]['item_no__inspection_no'])]=[[objre[i]['item_no__status_flag']],[objre[i]['status_flag']]]
                    else:
                        listre[str(objre[i]['item_no__inspection_no'])][0].append(objre[i]['item_no__status_flag'])
                        listre[str(objre[i]['item_no__inspection_no'])][1].append(objre[i]['status_flag'])

                repliedi=0
                for data,value in listre.items():
                    if (1 in value[0]) or (2 in value[0]):
                        if (1 not in value[1] and 2 not in value[1]):
                            listre[data]=0
                            repliedi+=1
                        else:
                            listre[data]=1
                    else:
                        listre[data]=0
                        repliedi+=1
                repliedj=m1.Marked_Officers.objects.filter(status_flag__in=[3,4],marked_to_id=das_desig,item_no__in=m1.Item_details.objects.filter(inspection_no__in=m1.Inspection_details.objects.filter(~Q(status_flag=0),inspection_no__in= m1.Item_details.objects.filter(~Q(status_flag=0)).values('inspection_no')).values('inspection_no')).values('item_no')).count()

                # pending replies
                pendingi=m1.Inspection_details.objects.filter(status_flag__in=[1,2,3],inspection_no__in=m1.Item_details.objects.filter(item_no__in=m1.Marked_Officers.objects.filter(marked_to_id=das_desig,status_flag=1).values('item_no')).values('inspection_no')).count()
        
                pendingj=m1.Marked_Officers.objects.filter(status_flag=1,marked_to_id=das_desig,item_no__in=m1.Item_details.objects.filter(inspection_no__in=m1.Inspection_details.objects.filter(status_flag__in=[1,2,3],inspection_no__in= m1.Item_details.objects.filter((Q(status_flag=1)|Q(status_flag=2)|Q(status_flag=3)|Q(status_flag=4))).values('inspection_no')).values('inspection_no')).values('item_no')).count()
                

                objm = m1.Marked_Officers.objects.filter(item_no__inspection_no__inspection_officer=das_desig).values_list('item_no', flat=True)

                replyi,replyj=0,0
                if pendingi+repliedi!=0 and pendingj+repliedj!=0:
                    replyi="{:.0f}".format((abs(repliedi/(pendingi+repliedi)))*100)
                    replyj="{:.0f}".format((abs(repliedj/(pendingj+repliedj)))*100)
                else:
                    replyi=0
                    replyj=0

                # -------------summary of inspection tables queries --------------------------------
                
                # 1. For Zone/PU/PSU/CTI table

                # 2. For Div./W.S. table 

                table=list(models.railwayLocationMaster.objects.filter(location_type_desc__in=['DIVISION','WORKSHOP'], parent_location_code__in=models.railwayLocationMaster.objects.filter(rly_unit_code__in=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=das_desig).values('rly_unit_id')).values('location_code')).values('location_code','rly_unit_code','location_type'))

                for i in range(len(table)):
                    location_code = table[i]['location_code']
                    rly_unit_code=table[i]['rly_unit_code']
                    location_type=table[i]['location_type']

                    multi_loc = m1.Insp_multi_location.objects.filter(item=location_code,inspection_no__inspection_officer=das_desig).values('inspection_no')

                    ti= m1.Inspection_details.objects.filter(~Q(status_flag=0),inspection_no__in=multi_loc).count()

                    tj=m1.Item_details.objects.filter(~Q(inspection_no__status_flag=0), inspection_no__in=multi_loc, item_no__in=objm).exclude(type='SSH').count()
        
                    pi=m1.Inspection_details.objects.filter((Q(status_flag=1)|Q(status_flag=2)|Q(status_flag=3)), inspection_officer=das_desig,inspection_no__in=multi_loc).count()

                    pj=m1.Item_details.objects.filter(Q(inspection_no__status_flag=1)|Q(inspection_no__status_flag=2)|Q(inspection_no__status_flag=3), inspection_no__in=multi_loc, item_no__in=objm).exclude(type='SSH').count()
            
                    fi=m1.Inspection_details.objects.filter(status_flag=4,inspection_no__in=multi_loc).count()

                    fj=m1.Item_details.objects.filter(inspection_no__status_flag=4, inspection_no__in=multi_loc, item_no__in=objm).exclude(type='SSH').count()

                    pc_insp=0
                    pc_item=0
                    if ti!=0 and tj!=0:
                        if (ti-pi)==0:
                            pc_insp=0
                        if (tj-pj)==0:
                            pc_item=0
                        else:
                            pc_insp="{:.0f}".format(((ti-pi)/ti)*100)
                            pc_item="{:.0f}".format(((tj-pj)/tj)*100)
                    elif ti==0 or tj==0:
                        pc_insp=0
                        pc_item=0
                    tabled.append({'type':location_code,'loc_type':location_type,'ti':ti,'tj':tj,'pi':pi,'pj':pj,'fi':fi,'fj':fj,'pc_insp':pc_insp,'pc_item':pc_item,'replyi':replyi,'replyj':replyj,'total':str(ti)+'/'+str(tj),'pend':str(pi)+'/'+str(pj),'closed':str(fi)+'/'+str(fj)})

                
                # 3. For Unit wise table 

                lstrlc=list(m1.Insp_multi_location.objects.filter(type='LOC',table_from='STM',inspection_no__in=m1.Inspection_details.objects.filter(~(Q(status_flag=0)),inspection_officer=das_desig).values('inspection_no')).values('item').distinct())


                
                for i in range(len(lstrlc)):
                    location_code=lstrlc[i]['item']
                    er=models.station_master.objects.filter(station_name=location_code).values('stnshortcode')
                    if er.count()>0:
                        stCode=er[0]['stnshortcode']
                    else:
                        stCode = ''
                    ti=m1.Inspection_details.objects.filter(~(Q(status_flag=0)),inspection_officer=das_desig,inspection_no__in=m1.Insp_multi_location.objects.filter(type='LOC',item=location_code).values('inspection_no')).count()

                    tj=m1.Marked_Officers.objects.filter(item_no__in=m1.Item_details.objects.filter(inspection_no__in=m1.Inspection_details.objects.filter(~(Q(status_flag=0)),inspection_officer=das_desig,inspection_no__in=m1.Insp_multi_location.objects.filter(type='LOC',item=location_code).values('inspection_no')).values('inspection_no')).values('item_no')).values('item_no').distinct().count()
                

                    pi=m1.Inspection_details.objects.filter((Q(status_flag=1)|Q(status_flag=2)|Q(status_flag=3)),inspection_officer=das_desig,inspection_no__in=m1.Insp_multi_location.objects.filter(type='LOC',item=location_code).values('inspection_no')).count()
                    pj=m1.Marked_Officers.objects.filter(item_no__in=m1.Item_details.objects.filter(inspection_no__in=m1.Inspection_details.objects.filter((Q(status_flag=1)|Q(status_flag=2)|Q(status_flag=3)),inspection_officer=das_desig,inspection_no__in=m1.Insp_multi_location.objects.filter(type='LOC',item=location_code).values('inspection_no')).values('inspection_no')).values('item_no')).values('item_no').distinct().count()
                    
                    fi=m1.Inspection_details.objects.filter(status_flag=4,inspection_officer=das_desig,inspection_no__in=m1.Insp_multi_location.objects.filter(type='LOC',item=location_code).values('inspection_no')).count()
                    fj=m1.Marked_Officers.objects.filter(item_no__in=m1.Item_details.objects.filter(inspection_no__in=m1.Inspection_details.objects.filter(status_flag=4,inspection_officer=das_desig,inspection_no__in=m1.Insp_multi_location.objects.filter(type='LOC',item=location_code).values('inspection_no')).values('inspection_no')).values('inspection_no')).values('item_no').values('item_no').distinct().count()
                    
                    if (ti!=0 and tj!=0) or ((ti-pi)!=0 or (tj-pj!=0)):
                        pc_insp="{:.0f}".format(((ti-pi)/ti)*100)
                        pc_item="{:.0f}".format(((tj-pj)/tj)*100)

                    else:
                        pc_insp=0
                        pc_item=0
                    tableu.append({'type':stCode,'pc_insp':pc_insp,'pc_item':pc_item,'ti':ti,'tj':tj,'pi':pi,'pj':pj,'fi':fi,'fj':fj,'total':str(ti)+'/'+str(tj),'pend':str(pi)+'/'+str(pj),'closed':str(fi)+'/'+str(fj)})

                lstrlc=list(m1.Insp_multi_location.objects.filter(type='LOC',table_from='SEM',inspection_no__in=m1.Inspection_details.objects.filter(~(Q(status_flag=0)),inspection_officer=das_desig).values('inspection_no')).values('item').distinct())
        
                for i in range(len(lstrlc)):
                    location_code=lstrlc[i]['item']
                    er=models.section_master.objects.filter(section_name=location_code).values('section_code')
                    ti=m1.Inspection_details.objects.filter(~(Q(status_flag=0)),inspection_officer=das_desig,inspection_no__in=m1.Insp_multi_location.objects.filter(type='LOC',item=location_code).values('inspection_no')).count()

                    tj=m1.Marked_Officers.objects.filter(item_no__in=m1.Item_details.objects.filter(inspection_no__in=m1.Inspection_details.objects.filter(~(Q(status_flag=0)),inspection_officer=das_desig,inspection_no__in=m1.Insp_multi_location.objects.filter(type='LOC',item=location_code).values('inspection_no')).values('inspection_no')).values('item_no')).values('item_no').distinct().count()
                

                    pi=m1.Inspection_details.objects.filter((Q(status_flag=1)|Q(status_flag=2)|Q(status_flag=3)),inspection_officer=das_desig,inspection_no__in=m1.Insp_multi_location.objects.filter(type='LOC',item=location_code).values('inspection_no')).count()
                    pj=m1.Marked_Officers.objects.filter(item_no__in=m1.Item_details.objects.filter(inspection_no__in=m1.Inspection_details.objects.filter((Q(status_flag=1)|Q(status_flag=2)|Q(status_flag=3)),inspection_officer=das_desig,inspection_no__in=m1.Insp_multi_location.objects.filter(type='LOC',item=location_code).values('inspection_no')).values('inspection_no')).values('item_no')).values('item_no').distinct().count()
                    
                    fi=m1.Inspection_details.objects.filter(status_flag=4,inspection_officer=das_desig,inspection_no__in=m1.Insp_multi_location.objects.filter(type='LOC',item=location_code).values('inspection_no')).count()
                    fj=m1.Marked_Officers.objects.filter(item_no__in=m1.Item_details.objects.filter(inspection_no__in=m1.Inspection_details.objects.filter(status_flag=4,inspection_officer=das_desig,inspection_no__in=m1.Insp_multi_location.objects.filter(type='LOC',item=location_code).values('inspection_no')).values('inspection_no')).values('inspection_no')).values('item_no').values('item_no').distinct().count()
                    
                    if (ti!=0 and tj!=0) or ((ti-pi)!=0 or (tj-pj!=0)):
                        pc_insp="{:.0f}".format(((ti-pi)/ti)*100)
                        pc_item="{:.0f}".format(((tj-pj)/tj)*100)
                        # print(pc_insp,pc_item)
                    else:
                        pc_insp=0
                        pc_item=0
                    if len(er)==0:
                        ers='NA'
                    else:
                        ers=er[0]['section_code']
                    tablesec.append({'type':ers,'pc_insp':pc_insp,'pc_item':pc_item,'ti':ti,'tj':tj,'pi':pi,'pj':pj,'fi':fi,'fj':fj,'total':str(ti)+'/'+str(tj),'pend':str(pi)+'/'+str(pj),'closed':str(fi)+'/'+str(fj)})

                lstrlc=list(m1.Insp_multi_location.objects.filter(type='LOC',table_from='RRM',inspection_no__in=m1.Inspection_details.objects.filter(~(Q(status_flag=0)),inspection_officer=das_desig).values('inspection_no')).values('item').distinct())
        
                for i in range(len(lstrlc)):
                    location_code=lstrlc[i]['item']
                    er=list(models.runningroom_master.objects.filter(rr_name=location_code).values('rr_code'))
                    if len(er)==0:
                        er.append({'rr_code':'NA'})
                    ti=m1.Inspection_details.objects.filter(~(Q(status_flag=0)),inspection_officer=das_desig,inspection_no__in=m1.Insp_multi_location.objects.filter(type='LOC',item=location_code).values('inspection_no')).count()

                    tj=m1.Marked_Officers.objects.filter(item_no__in=m1.Item_details.objects.filter(inspection_no__in=m1.Inspection_details.objects.filter(~(Q(status_flag=0)),inspection_officer=das_desig,inspection_no__in=m1.Insp_multi_location.objects.filter(type='LOC',item=location_code).values('inspection_no')).values('inspection_no')).values('item_no')).values('item_no').distinct().count()
                

                    pi=m1.Inspection_details.objects.filter((Q(status_flag=1)|Q(status_flag=2)|Q(status_flag=3)),inspection_officer=das_desig,inspection_no__in=m1.Insp_multi_location.objects.filter(type='LOC',item=location_code).values('inspection_no')).count()
                    pj=m1.Marked_Officers.objects.filter(item_no__in=m1.Item_details.objects.filter(inspection_no__in=m1.Inspection_details.objects.filter((Q(status_flag=1)|Q(status_flag=2)|Q(status_flag=3)),inspection_officer=das_desig,inspection_no__in=m1.Insp_multi_location.objects.filter(type='LOC',item=location_code).values('inspection_no')).values('inspection_no')).values('item_no')).values('item_no').distinct().count()
                    
                    fi=m1.Inspection_details.objects.filter(status_flag=4,inspection_officer=das_desig,inspection_no__in=m1.Insp_multi_location.objects.filter(type='LOC',item=location_code).values('inspection_no')).count()
                    fj=m1.Marked_Officers.objects.filter(item_no__in=m1.Item_details.objects.filter(inspection_no__in=m1.Inspection_details.objects.filter(status_flag=4,inspection_officer=das_desig,inspection_no__in=m1.Insp_multi_location.objects.filter(type='LOC',item=location_code).values('inspection_no')).values('inspection_no')).values('inspection_no')).values('item_no').values('item_no').distinct().count()
                    
                    if (ti!=0 and tj!=0) or ((ti-pi)!=0 or (tj-pj!=0)):
                        pc_insp="{:.0f}".format(((ti-pi)/ti)*100)
                        pc_item="{:.0f}".format(((tj-pj)/tj)*100)
                        # print(pc_insp,pc_item)
                    else:
                        pc_insp=0
                        pc_item=0
                    tablerr.append({'type':er[0]['rr_code'],'pc_insp':pc_insp,'pc_item':pc_item,'ti':ti,'tj':tj,'pi':pi,'pj':pj,'fi':fi,'fj':fj,'total':str(ti)+'/'+str(tj),'pend':str(pi)+'/'+str(pj),'closed':str(fi)+'/'+str(fj)})

                tablerly=[]
                lstrlc=list(m1.Insp_multi_location.objects.filter(type='LOC',table_from='ORL',inspection_no__in=m1.Inspection_details.objects.filter(~(Q(status_flag=0)),inspection_officer=das_desig).values('inspection_no')).values('item').distinct())

                for i in range(len(lstrlc)):
                    location_code=lstrlc[i]['item']
                    if '-' in location_code:
                        location_code1=location_code.rsplit('-', 1)
                        # print("location_code",location_code1)
                    else:
                        location_code1=location_code


                    er=models.railwayLocationMaster.objects.filter(location_description=location_code1[0],location_code=location_code1[1]).values('location_code')
                    # print("er",er)
                    ti=m1.Inspection_details.objects.filter(~(Q(status_flag=0)),inspection_officer=das_desig,inspection_no__in=m1.Insp_multi_location.objects.filter(type='LOC',item=location_code).values('inspection_no')).count()

                    tj=m1.Marked_Officers.objects.filter(item_no__in=m1.Item_details.objects.filter(inspection_no__in=m1.Inspection_details.objects.filter(~(Q(status_flag=0)),inspection_officer=das_desig,inspection_no__in=m1.Insp_multi_location.objects.filter(type='LOC',item=location_code).values('inspection_no')).values('inspection_no')).values('item_no')).values('item_no').distinct().count()
                

                    pi=m1.Inspection_details.objects.filter((Q(status_flag=1)|Q(status_flag=2)|Q(status_flag=3)),inspection_officer=das_desig,inspection_no__in=m1.Insp_multi_location.objects.filter(type='LOC',item=location_code).values('inspection_no')).count()
                    pj=m1.Marked_Officers.objects.filter(item_no__in=m1.Item_details.objects.filter(inspection_no__in=m1.Inspection_details.objects.filter((Q(status_flag=1)|Q(status_flag=2)|Q(status_flag=3)),inspection_officer=das_desig,inspection_no__in=m1.Insp_multi_location.objects.filter(type='LOC',item=location_code).values('inspection_no')).values('inspection_no')).values('item_no')).values('item_no').distinct().count()
                    
                    fi=m1.Inspection_details.objects.filter(status_flag=4,inspection_officer=das_desig,inspection_no__in=m1.Insp_multi_location.objects.filter(type='LOC',item=location_code).values('inspection_no')).count()
                    fj=m1.Marked_Officers.objects.filter(item_no__in=m1.Item_details.objects.filter(inspection_no__in=m1.Inspection_details.objects.filter(status_flag=4,inspection_officer=das_desig,inspection_no__in=m1.Insp_multi_location.objects.filter(type='LOC',item=location_code).values('inspection_no')).values('inspection_no')).values('inspection_no')).values('item_no').values('item_no').distinct().count()
                    
                    # print("fty",ti,tj,pi,pj,fi,fj)
                    if (ti!=0 and tj!=0) or ((ti-pi)!=0 or (tj-pj!=0)):
                        pc_insp="{:.0f}".format(((ti-pi)/ti)*100)
                        pc_item="{:.0f}".format(((tj-pj)/tj)*100)
                        # print(pc_insp,pc_item)
                    else:
                        pc_insp=0
                        pc_item=0
                    tablerly.append({'type':location_code,'pc_insp':pc_insp,'pc_item':pc_item,'ti':ti,'tj':tj,'pi':pi,'pj':pj,'fi':fi,'fj':fj,'total':str(ti)+'/'+str(tj),'pend':str(pi)+'/'+str(pj),'closed':str(fi)+'/'+str(fj)})

                lstrlc=list(m1.Insp_multi_location.objects.filter(type='LOC',table_from='SOP',inspection_no__in=m1.Inspection_details.objects.filter(~(Q(status_flag=0)),inspection_officer=das_desig).values('inspection_no')).values('item','item_code').distinct())
        
                for i in range(len(lstrlc)):
                    location_code=lstrlc[i]['item']
                    location_code1=lstrlc[i]['item_code']
                    er=models.Shop_section.objects.filter(section_desc=location_code,shop_code=location_code1).values('shop_code')
                    ti=m1.Inspection_details.objects.filter(~(Q(status_flag=0)),inspection_officer=das_desig,inspection_no__in=m1.Insp_multi_location.objects.filter(type='LOC',item=location_code,item_code=location_code1).values('inspection_no')).count()

                    tj=m1.Marked_Officers.objects.filter(item_no__in=m1.Item_details.objects.filter(inspection_no__in=m1.Inspection_details.objects.filter(~(Q(status_flag=0)),inspection_officer=das_desig,inspection_no__in=m1.Insp_multi_location.objects.filter(type='LOC',item=location_code,item_code=location_code1).values('inspection_no')).values('inspection_no')).values('item_no')).values('item_no').distinct().count()
                

                    pi=m1.Inspection_details.objects.filter((Q(status_flag=1)|Q(status_flag=2)|Q(status_flag=3)),inspection_officer=das_desig,inspection_no__in=m1.Insp_multi_location.objects.filter(type='LOC',item=location_code,item_code=location_code1).values('inspection_no')).count()
                    pj=m1.Marked_Officers.objects.filter(item_no__in=m1.Item_details.objects.filter(inspection_no__in=m1.Inspection_details.objects.filter((Q(status_flag=1)|Q(status_flag=2)|Q(status_flag=3)),inspection_officer=das_desig,inspection_no__in=m1.Insp_multi_location.objects.filter(type='LOC',item=location_code,item_code=location_code1).values('inspection_no')).values('inspection_no')).values('item_no')).values('item_no').distinct().count()
                    
                    fi=m1.Inspection_details.objects.filter(status_flag=4,inspection_officer=das_desig,inspection_no__in=m1.Insp_multi_location.objects.filter(type='LOC',item=location_code,item_code=location_code1).values('inspection_no')).count()
                    fj=m1.Marked_Officers.objects.filter(item_no__in=m1.Item_details.objects.filter(inspection_no__in=m1.Inspection_details.objects.filter(status_flag=4,inspection_officer=das_desig,inspection_no__in=m1.Insp_multi_location.objects.filter(type='LOC',item=location_code,item_code=location_code1).values('inspection_no')).values('inspection_no')).values('inspection_no')).values('item_no').values('item_no').distinct().count()
                    
                    if (ti!=0 and tj!=0) or ((ti-pi)!=0 or (tj-pj!=0)):
                        pc_insp="{:.0f}".format(((ti-pi)/ti)*100)
                        pc_item="{:.0f}".format(((tj-pj)/tj)*100)
                        # print(pc_insp,pc_item)
                    else:
                        pc_insp=0
                        pc_item=0
                    tableshop.append({'type':er[0]['shop_code'],'pc_insp':pc_insp,'pc_item':pc_item,'ti':ti,'tj':tj,'pi':pi,'pj':pj,'fi':fi,'fj':fj,'total':str(ti)+'/'+str(tj),'pend':str(pi)+'/'+str(pj),'closed':str(fi)+'/'+str(fj)})


                # ------------------- graphs queries --------------------

                # 1. DRM Wise
                drmwiselst=[]
                drmwisedata=[]
                drmwisedatanon1 = []
                drmwisedatanon2 = []
                countindrm=[]
                countbeydrm=[]
                countmarkdrm = []
                drmwisefulldesig = []

                lstrlc=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level='DRM',designation_code__isnull=False,rly_unit__in=models.railwayLocationMaster.objects.filter(location_type='DIV',parent_location_code__in=models.railwayLocationMaster.objects.filter(rly_unit_code__in=models.Level_Desig.objects.exclude(delete_flag=True).filter(official_email_ID=user).values('rly_unit_id')).values('location_code')).values('rly_unit_code')).values('designation','designation_code').distinct().order_by('designation_code'))

                for i in range(len(lstrlc)):
                    designation= lstrlc[i]['designation']
                    designationcode= lstrlc[i]['designation_code']
                    designation_drm=designation.split("/")[1]
                    
                    das_desig1=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=designationcode).values('designation_code')

                    gdeti=m1.Marked_Officers.objects.filter(item_no__in=m1.Item_details.objects.filter(inspection_no__in=m1.Inspection_details.objects.filter(~Q(status_flag=0),inspection_officer=das_desig).values('inspection_no')).values('item_no'),marked_to__in=das_desig1).values('item_no').distinct().count()
            
                    gpendi=m1.Marked_Officers.objects.filter(status_flag=1,item_no__in=m1.Item_details.objects.filter(inspection_no__in=m1.Inspection_details.objects.filter((Q(status_flag=1)|Q(status_flag=2)|Q(status_flag=3)),inspection_officer=das_desig).values('inspection_no')).values('item_no'),marked_to__in=das_desig1).values('item_no').distinct().count()

                    gpendi1=m1.Marked_Officers.objects.filter(status_flag=1,item_no__in=m1.Item_details.objects.filter((Q(target_date__gte=today)|Q(target_date__isnull=True)),inspection_no__in=m1.Inspection_details.objects.filter((Q(status_flag=1)|Q(status_flag=2)|Q(status_flag=3)),inspection_officer=das_desig).values('inspection_no')).values('item_no'),marked_to__in=das_desig1).values('item_no').distinct().count()
                    
                    gpendi2=gpendi-gpendi1
                
                    # print("drmwise..",das_desig,das_desig1,designation,designationcode,gdeti,gpendi,gpendi1,gpendi2)
                    per=0
                    pernon1=100
                    pernon2=100
                    if gpendi==0:
                        pernon1=0
                        pernon2=0
                    elif gpendi>0:
                        per="{:.2f}".format((gpendi/gdeti)*100)
                        # pernon1="{:.2f}".format(100-((gpendi1/gpendi)*100))
                        pernon1="{:.2f}".format(gpendi1/gdeti*100)
                        pernon2="{:.2f}".format(gpendi2/gdeti*100)
                    pernon1= float(pernon1)
                    pernon2= float(pernon2)

                    drmwisefulldesig.append(designation)
                    drmwiselst.append(designation_drm)
                    drmwisedata.append(per)
                    drmwisedatanon1.append(pernon1)
                    drmwisedatanon2.append(pernon2)
                    countindrm.append(gpendi1)
                    countbeydrm.append(gpendi2)
                    countmarkdrm.append(gdeti)
                
                # 2. PHOD Wise
                phodwiselst=[]
                phodwisedata=[]
                phodwisedatanon1 = []
                phodwisedatanon2 = []
                countinphod=[]
                countbeyphod=[]
                countmarkphod = []
                phodwisefulldesig = []

                lstrlc=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level='PHOD',designation_code__isnull=False,rly_unit__in=models.Level_Desig.objects.exclude(delete_flag=True).filter(official_email_ID=user).values('rly_unit_id')).values('designation','designation_code').distinct().order_by('designation_code'))

                for i in range(len(lstrlc)):
                    designation=lstrlc[i]['designation']
                    designationcode= lstrlc[i]['designation_code']
                    designation_split=designation.split("/")[0]

                    das_desig1=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=designationcode).values('designation_code')
                    
                
                    gdeti=m1.Marked_Officers.objects.filter(item_no__in=m1.Item_details.objects.filter(inspection_no__in=m1.Inspection_details.objects.filter((~Q(status_flag=0)),inspection_officer=das_desig).values('inspection_no')).values('item_no'),marked_to__in=das_desig1).values('item_no').distinct().count()
                    

                    gpendi=m1.Marked_Officers.objects.filter(status_flag=1,item_no__in=m1.Item_details.objects.filter(inspection_no__in=m1.Inspection_details.objects.filter((Q(status_flag=1)|Q(status_flag=2)|Q(status_flag=3)),inspection_officer=das_desig).values('inspection_no')).values('item_no'),marked_to__in=das_desig1).values('item_no').distinct().count()
                    gpendi1=m1.Marked_Officers.objects.filter(status_flag=1,item_no__in=m1.Item_details.objects.filter((Q(target_date__gte=today)|Q(target_date__isnull=True)),inspection_no__in=m1.Inspection_details.objects.filter((Q(status_flag=1)|Q(status_flag=2)|Q(status_flag=3)),inspection_officer=das_desig).values('inspection_no')).values('item_no'),marked_to__in=das_desig1).values('item_no').distinct().count()
                    

                    
                    gpendi2=gpendi-gpendi1
                    # print("phodwise..",designation,designationcode,gdeti,gpendi,gpendi1,gpendi2)
                    per=0
                    pernon1=100
                    pernon2=100
                    if gdeti==0:
                        pernon1=0
                        pernon2=0
                    elif gdeti>0:
                        per="{:.2f}".format((gpendi/gdeti)*100)
                        pernon1="{:.2f}".format(gpendi1/gdeti*100)
                        pernon2="{:.2f}".format(gpendi2/gdeti*100)
                    pernon1= float(pernon1)
                    pernon2= float(pernon2)

                    phodwisefulldesig.append(designation)
                    phodwiselst.append(designation_split)
                    phodwisedata.append(per)
                    phodwisedatanon1.append(pernon1)
                    phodwisedatanon2.append(pernon2)
                    countinphod.append(gpendi1)
                    countbeyphod.append(gpendi2)
                    countmarkphod.append(gdeti)
            
                # 3. BO Wise
                bowiselst=[]
                bowisedata=[]
                bowisedatanon1 = []
                bowisedatanon2 = []
                countinbo=[]
                countbeybo=[]
                countmarkbo = []
                bowisefulldesig = []

                lstrlc=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level='BO',designation_code__isnull=False,rly_unit__in=models.railwayLocationMaster.objects.filter(location_type='DIV',rly_unit_code__in=models.Level_Desig.objects.exclude(delete_flag=True).filter(official_email_ID=user).values('rly_unit_id')).values('rly_unit_code')).values('designation','designation_code').distinct().order_by('designation_code'))

                for i in range(len(lstrlc)):
                    designation= lstrlc[i]['designation']
                    designationcode= lstrlc[i]['designation_code']
                    designation_split=designation.split("/")[0]
                    das_desig1=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=designationcode).values('designation_code')   

                    gdeti=m1.Marked_Officers.objects.filter(item_no__in=m1.Item_details.objects.filter(inspection_no__in=m1.Inspection_details.objects.filter(~(Q(status_flag=0)),inspection_officer=das_desig).values('inspection_no')).values('item_no'),marked_to__in=das_desig1).count()
            
                    gpendi=m1.Marked_Officers.objects.filter(status_flag=1,item_no__in=m1.Item_details.objects.filter(inspection_no__in=m1.Inspection_details.objects.filter((Q(status_flag=1)|Q(status_flag=2)|Q(status_flag=3)),inspection_officer=das_desig).values('inspection_no')).values('item_no'),marked_to__in=das_desig1).count()
                    
                    gpendi1=m1.Marked_Officers.objects.filter(status_flag=1,item_no__in=m1.Item_details.objects.filter((Q(target_date__gte=today)|Q(target_date__isnull=True)),inspection_no__in=m1.Inspection_details.objects.filter((Q(status_flag=1)|Q(status_flag=2)|Q(status_flag=3)),inspection_officer=das_desig).values('inspection_no')).values('item_no'),marked_to__in=das_desig1).count()
                    
                    gpendi2=gpendi-gpendi1
                    per=0
                    pernon1=100
                    pernon2=100
                    if gdeti==0:
                        pernon1=0
                        pernon2=0
                    elif gdeti>0:
                        per="{:.2f}".format((gpendi/gdeti)*100)
                        pernon1="{:.2f}".format(gpendi1/gdeti*100)
                        pernon2="{:.2f}".format(gpendi2/gdeti*100)
                    pernon1= float(pernon1)
                    pernon2= float(pernon2)

                    if '&' in designation:
                        designation=designation.replace('&','%26')

                    bowisefulldesig.append(designation)
                    bowiselst.append(designation_split)
                    bowisedata.append(per)
                    bowisedatanon1.append(pernon1)
                    bowisedatanon2.append(pernon2)
                    countinbo.append(gpendi1)
                    countbeybo.append(gpendi2)
                    countmarkbo.append(gdeti)

                # 3. HOD Wise
                hodwiselst=[]
                hodwisedata=[]
                hodwisedatanon1 = []
                hodwisedatanon2 = []
                countinhod=[]
                countbeyhod=[]
                countmarkhod = []
                hodwisefulldesig = []

                lstrlc=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level='HOD',designation_code__isnull=False,rly_unit__in=models.railwayLocationMaster.objects.filter(rly_unit_code__in=models.Level_Desig.objects.exclude(delete_flag=True).filter(official_email_ID=user).values('rly_unit_id')).values('rly_unit_code')).values('designation','designation_code').distinct().order_by('designation_code'))

                for i in range(len(lstrlc)):
                    designation= lstrlc[i]['designation']
                    designationcode= lstrlc[i]['designation_code']
                    designation_split=designation.split("/")[0]
                    das_desig1=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=designationcode).values('designation_code')   

                    gdeti=m1.Marked_Officers.objects.filter(item_no__in=m1.Item_details.objects.filter(inspection_no__in=m1.Inspection_details.objects.filter(~(Q(status_flag=0)),inspection_officer=das_desig).values('inspection_no')).values('item_no'),marked_to__in=das_desig1).count()
            
                    gpendi=m1.Marked_Officers.objects.filter(status_flag=1,item_no__in=m1.Item_details.objects.filter(inspection_no__in=m1.Inspection_details.objects.filter((Q(status_flag=1)|Q(status_flag=2)|Q(status_flag=3)),inspection_officer=das_desig).values('inspection_no')).values('item_no'),marked_to__in=das_desig1).count()
                    
                    gpendi1=m1.Marked_Officers.objects.filter(status_flag=1,item_no__in=m1.Item_details.objects.filter((Q(target_date__gte=today)|Q(target_date__isnull=True)),inspection_no__in=m1.Inspection_details.objects.filter((Q(status_flag=1)|Q(status_flag=2)|Q(status_flag=3)),inspection_officer=das_desig).values('inspection_no')).values('item_no'),marked_to__in=das_desig1).count()
                    
                    gpendi2=gpendi-gpendi1
                    per=0
                    pernon1=100
                    pernon2=100
                    if gdeti==0:
                        pernon1=0
                        pernon2=0
                    elif gdeti>0:
                        per="{:.2f}".format((gpendi/gdeti)*100)
                        pernon1="{:.2f}".format(gpendi1/gdeti*100)
                        pernon2="{:.2f}".format(gpendi2/gdeti*100)
                    pernon1= float(pernon1)
                    pernon2= float(pernon2)

                    if '&' in designation:
                        designation=designation.replace('&','%26')

                    hodwisefulldesig.append(designation)
                    hodwiselst.append(designation_split)
                    hodwisedata.append(per)
                    hodwisedatanon1.append(pernon1)
                    hodwisedatanon2.append(pernon2)
                    countinhod.append(gpendi1)
                    countbeyhod.append(gpendi2)
                    countmarkhod.append(gdeti)


                # 4. Marked User wise
                othwiselstnon = []
                othwisedatanon1=[]
                othwisedatanon2 = []
                countinoth=[]
                countbeyoth=[]
                countmarkoth = []

                lstrlc = list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in = m1.Marked_Officers.objects.filter(item_no__in=m1.Item_details.objects.filter(inspection_no__in=m1.Inspection_details.objects.filter(~Q(status_flag=0),inspection_officer=das_desig).values('inspection_no')).values('item_no')).values('marked_to')).values('designation','designation_code').distinct().order_by('designation_code'))

                for i in range(len(lstrlc)):
                    designation= lstrlc[i]['designation']
                    designationcode= lstrlc[i]['designation_code']
                    
                    
                    das_desig1=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=designationcode).values('designation_code')

                    gdeti=m1.Marked_Officers.objects.filter(item_no__in=m1.Item_details.objects.filter(inspection_no__in=m1.Inspection_details.objects.filter(~Q(status_flag=0),inspection_officer=das_desig).values('inspection_no')).values('item_no'),marked_to__in=das_desig1).count()
            
                    gpendi=m1.Marked_Officers.objects.filter(status_flag=1,item_no__in=m1.Item_details.objects.filter(inspection_no__in=m1.Inspection_details.objects.filter((Q(status_flag=1)|Q(status_flag=2)|Q(status_flag=3)),inspection_officer=das_desig).values('inspection_no')).values('item_no'),marked_to__in=das_desig1).count()

                    gpendi1=m1.Marked_Officers.objects.filter(status_flag=1,item_no__in=m1.Item_details.objects.filter((Q(target_date__gte=today)|Q(target_date__isnull=True)),inspection_no__in=m1.Inspection_details.objects.filter((Q(status_flag=1)|Q(status_flag=2)|Q(status_flag=3)),inspection_officer=das_desig).values('inspection_no')).values('item_no'),marked_to__in=das_desig1).count()
                    
                    gpendi2=gpendi-gpendi1

                
                    per=0
                    pernon1=100
                    pernon2=100
                    if gdeti==0:
                        pernon1=0
                        pernon2=0
                    elif gdeti>0:
                        per="{:.2f}".format((gpendi/gdeti)*100)
                        # pernon1="{:.2f}".format(100-((gpendi1/gpendi)*100))
                        pernon1="{:.2f}".format(gpendi1/gdeti*100)
                        pernon2="{:.2f}".format(gpendi2/gdeti*100)
                    pernon1= float(pernon1)
                    pernon2= float(pernon2)

                    othwiselstnon.append(designation)
                    othwisedatanon1.append(pernon1)
                    othwisedatanon2.append(pernon2)
                    countinoth.append(gpendi1)
                    countbeyoth.append(gpendi2)
                    countmarkoth.append(gdeti)


                # 5. ADRM Wise
                adrmwiselst = []
                adrmwisedata=[]
                adrmwisedatanon1 = []
                adrmwisedatanon2 = []
                countinadrm=[]
                countbeyadrm=[]
                countmarkadrm = []
                adrmwisefulldesig = []

                lstrlc=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level='PHOD',designation_code__isnull=False,rly_unit__in=models.railwayLocationMaster.objects.filter(location_type='DIV',parent_location_code__in=models.railwayLocationMaster.objects.filter(rly_unit_code__in=models.Level_Desig.objects.exclude(delete_flag=True).filter(official_email_ID=user).values('rly_unit_id')).values('location_code')).values('rly_unit_code')).values('designation','designation_code').distinct().order_by('designation_code'))

                for i in range(len(lstrlc)):
                    designation= lstrlc[i]['designation']
                    designationcode= lstrlc[i]['designation_code']
                    # designation_drm=designation.split("ADRM/")[1]
                    designation_drm=designation.split("ADRM/")
                    # print("ADRM Designation........",designation_drm)
                    das_desig1=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=designationcode).values('designation_code')

                    gdeti=m1.Marked_Officers.objects.filter(item_no__in=m1.Item_details.objects.filter(inspection_no__in=m1.Inspection_details.objects.filter(~Q(status_flag=0),inspection_officer=das_desig).values('inspection_no')).values('item_no'),marked_to__in=das_desig1).count()
            
                    gpendi=m1.Marked_Officers.objects.filter(status_flag=1,item_no__in=m1.Item_details.objects.filter(inspection_no__in=m1.Inspection_details.objects.filter((Q(status_flag=1)|Q(status_flag=2)|Q(status_flag=3)),inspection_officer=das_desig).values('inspection_no')).values('item_no'),marked_to__in=das_desig1).count()

                    gpendi1=m1.Marked_Officers.objects.filter(status_flag=1,item_no__in=m1.Item_details.objects.filter((Q(target_date__gte=today)|Q(target_date__isnull=True)),inspection_no__in=m1.Inspection_details.objects.filter((Q(status_flag=1)|Q(status_flag=2)|Q(status_flag=3)),inspection_officer=das_desig).values('inspection_no')).values('item_no'),marked_to__in=das_desig1).count()
                    
                    gpendi2=gpendi-gpendi1
                    per=0
                    pernon1=100
                    pernon2=100
                    if gpendi==0:
                        pernon1=0
                        pernon2=0
                    elif gpendi>0:
                        per="{:.2f}".format((gpendi/gdeti)*100)
                        # pernon1="{:.2f}".format(100-((gpendi1/gpendi)*100))
                        pernon1="{:.2f}".format(gpendi1/gdeti*100)
                        pernon2="{:.2f}".format(gpendi2/gdeti*100)
                    pernon1= float(pernon1)
                    pernon2= float(pernon2)

                    adrmwisefulldesig.append(designation)
                    adrmwiselst.append(designation_drm)
                    adrmwisedata.append(per)
                    adrmwisedatanon1.append(pernon1)
                    adrmwisedatanon2.append(pernon2)
                    countinadrm.append(gpendi1)
                    countbeyadrm.append(gpendi2)
                    countmarkadrm.append(gdeti)


                # 5. Zone wise graph and table
                zonalwiselst=[]
                zonalwisedata=[]
                zonalwiselstrb=[]
                zonalwisedatarb=[]
                zonalwiselstzone=[]
                zonalwisedatazone=[]
                zonalwisedatanon1=[]
                zonalwisedatanon2=[]
                zonalwisedatarbnon2=[]
                zonalwisedatarbnon1=[]
                zonalwisedatazonenon1=[]
                zonalwisedatazonenon2=[]
                countinzonal1=[]
                countbeyzonal1=[]
                countinrb1 = []
                countbeyrb1 = []
                countinzone1 = []
                countbeyzone1 = []

                counttotmarkall = []
                counttotmarkzone = []
                counttotmarkrb = []
                listrb = []

                lstrlc=list(models.railwayLocationMaster.objects.filter(location_type_desc='RAILWAY BOARD').values('location_code','rly_unit_code').distinct().order_by('location_code'))

                for i in range(len(lstrlc)):
                    location_code=lstrlc[i]['location_code']
                    rly_unit_code=lstrlc[i]['rly_unit_code']
                
                    das_desig1=models.Level_Desig.objects.exclude(delete_flag=True).filter((Q(d_level='AM')|Q(d_level='BM')|Q(d_level='PED')),rly_unit=rly_unit_code,designation_code__isnull=False).values('designation_code')

                    das_desig3=models.Level_Desig.objects.exclude(delete_flag=True).filter((Q(d_level='AM')|Q(d_level='BM')|Q(d_level='PED')),rly_unit=rly_unit_code,designation_code__isnull=False).values('designation','designation_code')
                    
                    listrb.append(das_desig3)

                    gdeti=m1.Marked_Officers.objects.filter(item_no__in=m1.Item_details.objects.filter(inspection_no__in=m1.Inspection_details.objects.filter((~Q(status_flag=0)),inspection_officer=das_desig).values('inspection_no')).values('item_no'),marked_to__in=das_desig1).count()

                    gpendi=m1.Marked_Officers.objects.filter(status_flag__in=[1,2],item_no__in=m1.Item_details.objects.filter(inspection_no__in=m1.Inspection_details.objects.filter((Q(status_flag=1)|Q(status_flag=2)|Q(status_flag=3)),inspection_officer=das_desig).values('inspection_no')).values('item_no'),marked_to__in=das_desig1).count()
                    
                    gpendi1=m1.Marked_Officers.objects.filter(status_flag__in=[1,2],item_no__in=m1.Item_details.objects.filter((Q(target_date__gte=today)|Q(target_date__isnull=True)),inspection_no__in=m1.Inspection_details.objects.filter((Q(status_flag=1)|Q(status_flag=2)|Q(status_flag=3)),inspection_officer=das_desig).values('inspection_no')).values('item_no'),marked_to__in=das_desig1).count()

                    # print("rb........",location_code,das_desig1,gdeti,gpendi,gpendi1)
                    
                    
                    gpendi2=gpendi-gpendi1

                    per=0
                    pernon1=100
                    pernon2=100
                    if gdeti==0:
                        pernon1=0
                        pernon2=0
                    elif gdeti>0:
                        per="{:.2f}".format((gpendi/gdeti)*100)
                        pernon1="{:.2f}".format(gpendi1/gdeti*100)
                        pernon2="{:.2f}".format(gpendi2/gdeti*100)
                    pernon1= float(pernon1)
                    pernon2= float(pernon2)
                    countinzonal1.append(gpendi1)
                    countbeyzonal1.append(gpendi2)
                    zonalwisedatanon1.append(pernon1)
                    zonalwisedatanon2.append(pernon2)
                    countinrb1.append(gpendi1)
                    countbeyrb1.append(gpendi2)
                    zonalwisedatarbnon1.append(pernon1)
                    zonalwisedatarbnon2.append(pernon2)
                    zonalwiselst.append(location_code)
                    zonalwisedata.append(per)
                    zonalwiselstrb.append(location_code)
                    zonalwisedatarb.append(per)

                    counttotmarkall.append(gdeti)
                    counttotmarkrb.append(gdeti)

                    
                    ti=m1.Inspection_details.objects.filter(~Q(status_flag=0),inspection_officer=das_desig,inspection_no__in=m1.Insp_multi_location.objects.filter(type='HQ',item=location_code).values('inspection_no')).count()

                    tj=m1.Item_details.objects.filter(item_no__in=objm,inspection_no__in=m1.Inspection_details.objects.filter(~Q(status_flag=0),inspection_officer=das_desig,inspection_no__in=m1.Insp_multi_location.objects.filter(type='HQ',item=location_code).values('inspection_no')).values('inspection_no')).count()
                
                    pi=m1.Inspection_details.objects.filter((Q(status_flag=1)|Q(status_flag=2)|Q(status_flag=3)),inspection_officer=das_desig,inspection_no__in=m1.Insp_multi_location.objects.filter(type='HQ',item=location_code).values('inspection_no')).count()
                    pj=m1.Item_details.objects.filter(item_no__in=objm,inspection_no__in=m1.Inspection_details.objects.filter((Q(status_flag=1)|Q(status_flag=2)|Q(status_flag=3)),inspection_officer=das_desig,inspection_no__in=m1.Insp_multi_location.objects.filter(type='HQ',item=location_code).values('inspection_no')).values('inspection_no')).count()
                    
                    fi=m1.Inspection_details.objects.filter(status_flag=4,inspection_officer=das_desig,inspection_no__in=m1.Insp_multi_location.objects.filter(type='HQ',item=location_code).values('inspection_no')).count()
                    fj=m1.Item_details.objects.filter(item_no__in=objm,inspection_no__in=m1.Inspection_details.objects.filter(status_flag=4,inspection_officer=das_desig,inspection_no__in=m1.Insp_multi_location.objects.filter(type='HQ',item=location_code).values('inspection_no')).values('inspection_no')).count()
                    pc_insp=0
                    pc_item=0
                    if ti!=0 and tj!=0:
                        if (ti-pi)==0:
                            pc_insp=0
                        if (tj-pj)==0:
                            pc_item=0
                        else:
                            pc_insp="{:.0f}".format(((ti-pi)/ti)*100)
                            pc_item="{:.0f}".format(((tj-pj)/tj)*100)
                            #print(pc_insp,pc_item)
                    elif ti==0 or tj==0:
                        pc_insp=0
                        pc_item=0
                    tablea.append({'type':location_code,'ti':ti,'tj':tj,'pi':pi,'pj':pj,'fi':fi,'fj':fj,'pc_insp':pc_insp,'pc_item':pc_item,'replyi':replyi,'replyj':replyj,'total':str(ti)+'/'+str(tj),'pend':str(pi)+'/'+str(pj),'closed':str(fi)+'/'+str(fj)})

                cper1=[]
                cper2=[]
                cinrb=[]
                cbeyrb=[]
                cmarkrb=[]
                listrb=[]
                crbfulldesig=[]

                for i in range(len(das_desig3)):
                    das_desig1=das_desig3[i]['designation_code']
                    designation = das_desig3[i]['designation']
                    designation_split=designation.split("/",1)
                    
                    if len(designation_split)>1:
                        designation_split=designation_split[1]
                    else:
                        designation_split=designation_split[0]
                    
                    gdeti=m1.Marked_Officers.objects.filter(item_no__in=m1.Item_details.objects.filter(inspection_no__in=m1.Inspection_details.objects.filter((~Q(status_flag=0)),inspection_officer=das_desig).values('inspection_no')).values('item_no'),marked_to=das_desig1).count()

                    gpendi=m1.Marked_Officers.objects.filter(status_flag__in=[1,2],item_no__in=m1.Item_details.objects.filter(inspection_no__in=m1.Inspection_details.objects.filter((Q(status_flag=1)|Q(status_flag=2)|Q(status_flag=3)),inspection_officer=das_desig).values('inspection_no')).values('item_no'),marked_to=das_desig1).count()
                    
                    gpendi1=m1.Marked_Officers.objects.filter(status_flag__in=[1,2],item_no__in=m1.Item_details.objects.filter((Q(target_date__gte=today)|Q(target_date__isnull=True)),inspection_no__in=m1.Inspection_details.objects.filter((Q(status_flag=1)|Q(status_flag=2)|Q(status_flag=3)),inspection_officer=das_desig).values('inspection_no')).values('item_no'),marked_to=das_desig1).count()
                    
                    gpendi2=gpendi-gpendi1

                    # print("rbs......",das_desig1,designation,gdeti,gpendi)

                    per=0
                    pernon1=100
                    pernon2=100
                    if gdeti==0:
                        pernon1=0
                        pernon2=0
                    elif gdeti>0:
                        per="{:.2f}".format((gpendi/gdeti)*100)
                        pernon1="{:.2f}".format(gpendi1/gdeti*100)
                        pernon2="{:.2f}".format(gpendi2/gdeti*100)
                    pernon1= float(pernon1)
                    pernon2= float(pernon2)

                    listrb.append(designation_split)
                    cper1.append(pernon1)
                    cper2.append(pernon2)
                    cinrb.append(gpendi)
                    cbeyrb.append(gpendi2)
                    cmarkrb.append(gdeti)
                    crbfulldesig.append(designation)
                
                lstrlc=list(models.railwayLocationMaster.objects.filter(location_type_desc='HEAD QUATER').values('location_code','rly_unit_code').distinct().order_by('location_code'))

                for i in range(len(lstrlc)):
                    location_code=lstrlc[i]['location_code']
                    rly_unit_code=lstrlc[i]['rly_unit_code']
                
                    das_desig1=models.Level_Desig.objects.exclude(delete_flag=True).filter(rly_unit=rly_unit_code,designation_code__isnull=False,d_level='GM').values('designation_code').distinct()


                    gdeti=m1.Marked_Officers.objects.filter(item_no__in=m1.Item_details.objects.filter(inspection_no__in=m1.Inspection_details.objects.filter((~Q(status_flag=0)),inspection_officer=das_desig).values('inspection_no')).values('item_no'),marked_to__in=das_desig1).count()

                    gpendi=m1.Marked_Officers.objects.filter(status_flag__in=[1,2],item_no__in=m1.Item_details.objects.filter(inspection_no__in=m1.Inspection_details.objects.filter((Q(status_flag=1)|Q(status_flag=2)|Q(status_flag=3)),inspection_officer=das_desig).values('inspection_no')).values('item_no'),marked_to__in=das_desig1).count()
                    
                    gpendi1=m1.Marked_Officers.objects.filter(status_flag__in=[1,2],item_no__in=m1.Item_details.objects.filter((Q(target_date__gte=today)|Q(target_date__isnull=True)),inspection_no__in=m1.Inspection_details.objects.filter((Q(status_flag=1)|Q(status_flag=2)|Q(status_flag=3)),inspection_officer=das_desig).values('inspection_no')).values('item_no'),marked_to__in=das_desig1).count()

                    
                    # print("graph",location_code,das_desig1,rly_unit_code,gdeti,gpendi,gpendi1)
                    gpendi2=gpendi-gpendi1
                    
                    per=0
                    
                    pernon1=100
                    pernon2=100
                    if gdeti==0:
                        pernon1=0
                        pernon2=0
                    elif gdeti>0:
                        per="{:.2f}".format((gpendi/gdeti)*100)
                        pernon1="{:.2f}".format(gpendi1/gdeti*100)
                        pernon2="{:.2f}".format(gpendi2/gdeti*100)

                    pernon1= float(pernon1)
                    pernon2= float(pernon2)
                    countinzonal1.append(gpendi1)
                    countbeyzonal1.append(gpendi2)
                    zonalwisedatanon1.append(pernon1)
                    zonalwisedatanon2.append(pernon2)
                    countinzone1.append(gpendi1)
                    countbeyzone1.append(gpendi2)
                    zonalwisedatazonenon1.append(pernon1)
                    zonalwisedatazonenon2.append(pernon2)
                    
                    zonalwiselst.append(location_code)
                    zonalwisedata.append(per)
                    zonalwiselstzone.append(location_code)
                    zonalwisedatazone.append(per)

                    counttotmarkall.append(gdeti)
                    counttotmarkzone.append(gdeti)

                    ti=m1.Inspection_details.objects.filter(~Q(status_flag=0),inspection_officer=das_desig,inspection_no__in=m1.Insp_multi_location.objects.filter(type='HQ',item=location_code).values('inspection_no')).count()

                    tj=m1.Item_details.objects.filter(item_no__in=objm,inspection_no__in=m1.Inspection_details.objects.filter(~Q(status_flag=0),inspection_officer=das_desig,inspection_no__in=m1.Insp_multi_location.objects.filter(type='HQ',item=location_code).values('inspection_no')).values('inspection_no')).count()
                
                    pi=m1.Inspection_details.objects.filter((Q(status_flag=1)|Q(status_flag=2)|Q(status_flag=3)),inspection_officer=das_desig,inspection_no__in=m1.Insp_multi_location.objects.filter(type='HQ',item=location_code).values('inspection_no')).count()
                    pj=m1.Item_details.objects.filter(item_no__in=objm,inspection_no__in=m1.Inspection_details.objects.filter((Q(status_flag=1)|Q(status_flag=2)|Q(status_flag=3)),inspection_officer=das_desig,inspection_no__in=m1.Insp_multi_location.objects.filter(type='HQ',item=location_code).values('inspection_no')).values('inspection_no')).count()
                    
                    fi=m1.Inspection_details.objects.filter(status_flag=4,inspection_officer=das_desig,inspection_no__in=m1.Insp_multi_location.objects.filter(type='HQ',item=location_code).values('inspection_no')).count()
                    fj=m1.Item_details.objects.filter(item_no__in=objm,inspection_no__in=m1.Inspection_details.objects.filter(status_flag=4,inspection_officer=das_desig,inspection_no__in=m1.Insp_multi_location.objects.filter(type='HQ',item=location_code).values('inspection_no')).values('inspection_no')).count()
                    pc_insp=0
                    pc_item=0
                    if ti!=0 and tj!=0:
                        if (ti-pi)==0:
                            pc_insp=0
                        if (tj-pj)==0:
                            pc_item=0
                        else:
                            pc_insp="{:.0f}".format(((ti-pi)/ti)*100)
                            pc_item="{:.0f}".format(((tj-pj)/tj)*100)
                            #print(pc_insp,pc_item)
                    elif ti==0 or tj==0:
                        pc_insp=0
                        pc_item=0
                    tablea.append({'type':location_code,'ti':ti,'tj':tj,'pi':pi,'pj':pj,'fi':fi,'fj':fj,'pc_insp':pc_insp,'pc_item':pc_item,'replyi':replyi,'replyj':replyj,'total':str(ti)+'/'+str(tj),'pend':str(pi)+'/'+str(pj),'closed':str(fi)+'/'+str(fj)})
                
                # PU/PSU wise graph and table

                pulst=[]
                pudata=[]
                pulstpu=[]
                pudatapu=[]
                pulstcti=[]
                pudatacti=[]
                pulstpsu=[]
                pudatapsu=[]
                pudatanon1=[]
                pudatanon2=[]
                pudatapunon1=[]
                pudatapunon2=[]
                pudatactinon1=[]
                pudatactinon2=[]
                pudatapsunon1=[]
                pudatapsunon2=[]
                countinpu1=[]
                countbeypu1=[]
                countinpu2 = []
                countbeypu2 = []
                countincti1=[]
                countbeycti1=[]
                countinpsu1=[]
                countbeypsu1=[]

                counttotmarkall1 = []
                counttotmarkpu = []
                counttotmarkcti = []
                counttotmarkpsu = []

                allpufulldesig=[]
                pufulldesig=[]
                ctifulldesig=[]
                psufulldesig=[]

                lstrlc=list(models.railwayLocationMaster.objects.filter(Q(location_type_desc='PRODUCTION UNIT')).values('location_code','rly_unit_code').distinct().order_by('location_code'))

                for i in range(len(lstrlc)):
                    location_code=lstrlc[i]['location_code']
                    rly_unit_code=lstrlc[i]['rly_unit_code']
                
                    das_desig1=models.Level_Desig.objects.exclude(delete_flag=True).filter((Q(d_level='GM_PU')|Q(d_level='DG_CTI')),rly_unit=rly_unit_code,designation_code__isnull=False).values('designation_code')

                    das_designation=list(models.Level_Desig.objects.exclude(delete_flag=True).filter((Q(d_level='GM_PU')|Q(d_level='DG_CTI')),rly_unit=rly_unit_code,designation_code__isnull=False).values('designation'))

                    if das_designation != []:

                        gdeti=m1.Marked_Officers.objects.filter(item_no__in=m1.Item_details.objects.filter(inspection_no__in=m1.Inspection_details.objects.filter(~(Q(status_flag=0)),inspection_officer=das_desig).values('inspection_no')).values('item_no'),marked_to__in=das_desig1).count()

                        gpendi=m1.Marked_Officers.objects.filter(status_flag=1,item_no__in=m1.Item_details.objects.filter(inspection_no__in=m1.Inspection_details.objects.filter((Q(status_flag=1)|Q(status_flag=2)|Q(status_flag=3)),inspection_officer=das_desig).values('inspection_no')).values('item_no'),marked_to__in=das_desig1).count()
                        
                        gpendi1=m1.Marked_Officers.objects.filter(status_flag=1,item_no__in=m1.Item_details.objects.filter((Q(target_date__gte=today)|Q(target_date__isnull=True)),inspection_no__in=m1.Inspection_details.objects.filter((Q(status_flag=1)|Q(status_flag=3)|Q(status_flag=2)),inspection_officer=das_desig).values('inspection_no')).values('item_no'),marked_to__in=das_desig1).count()
                        
                        gpendi2=gpendi-gpendi1
                        
                        per=0
                        pernon1=100
                        pernon2=100
                        if gdeti==0:
                            pernon1=0
                            pernon2=0
                        elif gdeti>0:
                            per="{:.2f}".format((gpendi/gdeti)*100)
                            pernon1="{:.2f}".format(gpendi1/gdeti*100)
                            pernon2="{:.2f}".format(gpendi2/gdeti*100)
                        pernon1= float(pernon1)
                        pernon2= float(pernon2)
                        pudatanon1.append(pernon1)
                        pudatanon2.append(pernon2)
                        countinpu1.append(gpendi1)
                        countbeypu1.append(gpendi2)
                        pudatapunon1.append(pernon1)
                        pudatapunon2.append(pernon2)
                        countinpu2.append(gpendi1)
                        countbeypu2.append(gpendi2)
                        pulst.append(location_code)
                        pudata.append(per)
                        pulstpu.append(location_code)
                        pudatapu.append(per)

                        counttotmarkall1.append(gdeti)
                        counttotmarkpu.append(gdeti)
                        
                        
                        allpufulldesig.append(das_designation[0]['designation'])
                        pufulldesig.append(das_designation[0]['designation'])

                    #print("jjjjj...",allpufulldesig,pufulldesig)

                    ti=m1.Inspection_details.objects.filter(~Q(status_flag=0),inspection_officer=das_desig,inspection_no__in=m1.Insp_multi_location.objects.filter(type='HQ',item=location_code).values('inspection_no')).count()
                    tj=m1.Item_details.objects.filter(item_no__in=objm,inspection_no__in=m1.Inspection_details.objects.filter(~Q(status_flag=0),inspection_officer=das_desig,inspection_no__in=m1.Insp_multi_location.objects.filter(type='HQ',item=location_code).values('inspection_no')).values('inspection_no')).count()
                
                    pi=m1.Inspection_details.objects.filter((Q(status_flag=1)|Q(status_flag=2)|Q(status_flag=3)),inspection_officer=das_desig,inspection_no__in=m1.Insp_multi_location.objects.filter(type='HQ',item=location_code).values('inspection_no')).count()
                    pj=m1.Item_details.objects.filter(item_no__in=objm,inspection_no__in=m1.Inspection_details.objects.filter((Q(status_flag=1)|Q(status_flag=2)|Q(status_flag=3)),inspection_officer=das_desig,inspection_no__in=m1.Insp_multi_location.objects.filter(type='HQ',item=location_code).values('inspection_no')).values('inspection_no')).count()
                    
                    fi=m1.Inspection_details.objects.filter(status_flag=4,inspection_officer=das_desig,inspection_no__in=m1.Insp_multi_location.objects.filter(type='HQ',item=location_code).values('inspection_no')).count()
                    fj=m1.Item_details.objects.filter(item_no__in=objm,inspection_no__in=m1.Inspection_details.objects.filter(status_flag=4,inspection_officer=das_desig,inspection_no__in=m1.Insp_multi_location.objects.filter(type='HQ',item=location_code).values('inspection_no')).values('inspection_no')).count()

                    if ti!=0 and tj!=0:
                        if (ti-pi)==0:
                            pc_insp=0
                        if (tj-pj)==0:
                            pc_item=0
                        else:
                            pc_insp="{:.0f}".format(((ti-pi)/ti)*100)
                            pc_item="{:.0f}".format(((tj-pj)/tj)*100)
                    elif ti==0 or tj==0:
                        pc_insp=0
                        pc_item=0
                    
                    tableb.append({'type':location_code,'ti':ti,'tj':tj,'pi':pi,'pj':pj,'fi':fi,'fj':fj,'pc_insp':pc_insp,'pc_item':pc_item,'total':str(ti)+'/'+str(tj),'pend':str(pi)+'/'+str(pj),'closed':str(fi)+'/'+str(fj)})

        
                lstrlc=list(models.railwayLocationMaster.objects.filter(Q(location_type_desc='INSTITUTE')).values('location_code','rly_unit_code').distinct().order_by('location_code'))
                for i in range(len(lstrlc)):
                    location_code=lstrlc[i]['location_code']
                    rly_unit_code=lstrlc[i]['rly_unit_code']
                
                    das_desig1=models.Level_Desig.objects.exclude(delete_flag=True).filter((Q(d_level='GM_PU')|Q(d_level='DG_CTI')),rly_unit=rly_unit_code,designation_code__isnull=False).values('designation_code').distinct()

                    das_designation=list(models.Level_Desig.objects.exclude(delete_flag=True).filter((Q(d_level='GM_PU')|Q(d_level='DG_CTI')),rly_unit=rly_unit_code,designation_code__isnull=False).values('designation'))

                    gdeti=m1.Marked_Officers.objects.filter(item_no__in=m1.Item_details.objects.filter(inspection_no__in=m1.Inspection_details.objects.filter(~(Q(status_flag=0)),inspection_officer=das_desig).values('inspection_no')).values('item_no'),marked_to__in=das_desig1).count()

                    gpendi=m1.Marked_Officers.objects.filter(status_flag=1,item_no__in=m1.Item_details.objects.filter(inspection_no__in=m1.Inspection_details.objects.filter((Q(status_flag=1)|Q(status_flag=2)|Q(status_flag=3)),inspection_officer=das_desig).values('inspection_no')).values('item_no'),marked_to__in=das_desig1).count()
                    
                    gpendi1=m1.Marked_Officers.objects.filter(status_flag=1,item_no__in=m1.Item_details.objects.filter((Q(target_date__gte=today)|Q(target_date__isnull=True)),inspection_no__in=m1.Inspection_details.objects.filter((Q(status_flag=1)|Q(status_flag=2)|Q(status_flag=3)),inspection_officer=das_desig).values('inspection_no')).values('item_no'),marked_to__in=das_desig1).count()
                    
                    gpendi2=gpendi-gpendi1
                
                    per=0
                    pernon1=100
                    pernon2=100
                    if gdeti==0:
                        pernon1=0
                        pernon2=0
                    elif gdeti>0:
                        per="{:.2f}".format((gpendi/gpendi)*100)
                        pernon1="{:.2f}".format(gpendi1/gdeti*100)
                        pernon2="{:.2f}".format(gpendi2/gdeti*100)
                    pernon1= float(pernon1)
                    pernon2= float(pernon2)
                    pudatanon1.append(pernon1)
                    pudatanon2.append(pernon2)
                    countinpu1.append(gpendi1)
                    countbeypu1.append(gpendi2)
                    pudatactinon1.append(pernon1)
                    pudatactinon2.append(pernon2)
                    countincti1.append(gpendi1)
                    countbeycti1.append(gpendi2)
                    pulst.append(location_code)
                    pudata.append(per)
                    pulstcti.append(location_code)
                    pudatacti.append(per)

                    counttotmarkall1.append(gdeti)
                    counttotmarkcti.append(gdeti)
                    if das_designation:
                        allpufulldesig.append(das_designation[0]['designation'])
                        ctifulldesig.append(das_designation[0]['designation'])

                    ti=m1.Inspection_details.objects.filter(~Q(status_flag=0),inspection_officer=das_desig,inspection_no__in=m1.Insp_multi_location.objects.filter(type='HQ',item=location_code).values('inspection_no')).count()
                    tj=m1.Item_details.objects.filter(item_no__in=objm,inspection_no__in=m1.Inspection_details.objects.filter(~Q(status_flag=0),inspection_officer=das_desig,inspection_no__in=m1.Insp_multi_location.objects.filter(type='HQ',item=location_code).values('inspection_no')).values('inspection_no')).count()
                
                    pi=m1.Inspection_details.objects.filter((Q(status_flag=1)|Q(status_flag=2)|Q(status_flag=3)),inspection_officer=das_desig,inspection_no__in=m1.Insp_multi_location.objects.filter(type='HQ',item=location_code).values('inspection_no')).count()
                    pj=m1.Item_details.objects.filter(item_no__in=objm,inspection_no__in=m1.Inspection_details.objects.filter((Q(status_flag=1)|Q(status_flag=2)|Q(status_flag=3)),inspection_officer=das_desig,inspection_no__in=m1.Insp_multi_location.objects.filter(type='HQ',item=location_code).values('inspection_no')).values('inspection_no')).count()
                    
                    fi=m1.Inspection_details.objects.filter(status_flag=4,inspection_officer=das_desig,inspection_no__in=m1.Insp_multi_location.objects.filter(type='HQ',item=location_code).values('inspection_no')).count()
                    fj=m1.Item_details.objects.filter(item_no__in=objm,inspection_no__in=m1.Inspection_details.objects.filter(status_flag=4,inspection_officer=das_desig,inspection_no__in=m1.Insp_multi_location.objects.filter(type='HQ',item=location_code).values('inspection_no')).values('inspection_no')).count()

                    if ti!=0 and tj!=0:
                        if (ti-pi)==0:
                            pc_insp=0
                        if (tj-pj)==0:
                            pc_item=0
                        else:
                            pc_insp="{:.0f}".format(((ti-pi)/ti)*100)
                            pc_item="{:.0f}".format(((tj-pj)/tj)*100)
                    elif ti==0 or tj==0:
                        pc_insp=0
                        pc_item=0
                    
                    tableb.append({'type':location_code,'ti':ti,'tj':tj,'pi':pi,'pj':pj,'fi':fi,'fj':fj,'pc_insp':pc_insp,'pc_item':pc_item,'total':str(ti)+'/'+str(tj),'pend':str(pi)+'/'+str(pj),'closed':str(fi)+'/'+str(fj)})


                lstrlc=list(models.railwayLocationMaster.objects.filter(Q(location_type_desc='PSU')).values('location_code','rly_unit_code').distinct().order_by('location_code'))
                for i in range(len(lstrlc)):
                    location_code=lstrlc[i]['location_code']
                    rly_unit_code=lstrlc[i]['rly_unit_code']
                
                    das_desig1=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level='PSU',rly_unit=rly_unit_code,designation_code__isnull=False).values('designation_code').distinct()

                    das_designation=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level='PSU',rly_unit=rly_unit_code,designation_code__isnull=False).values('designation'))

                    # print("ffff",rly_unit_code,das_desig1,das_designation)

                    if das_designation != []:

                        gdeti=m1.Marked_Officers.objects.filter(item_no__in=m1.Item_details.objects.filter(inspection_no__in=m1.Inspection_details.objects.filter(~(Q(status_flag=0)),inspection_officer=das_desig).values('inspection_no')).values('item_no'),marked_to__in=das_desig1).count()

                        gpendi=m1.Marked_Officers.objects.filter(status_flag=1,item_no__in=m1.Item_details.objects.filter(inspection_no__in=m1.Inspection_details.objects.filter((Q(status_flag=1)|Q(status_flag=2)|Q(status_flag=3)),inspection_officer=das_desig).values('inspection_no')).values('item_no'),marked_to__in=das_desig1).count()
                        
                        gpendi1=m1.Marked_Officers.objects.filter(status_flag=1,item_no__in=m1.Item_details.objects.filter((Q(target_date__gte=today)|Q(target_date__isnull=True)),inspection_no__in=m1.Inspection_details.objects.filter((Q(status_flag=1)|Q(status_flag=2)|Q(status_flag=3)),inspection_officer=das_desig).values('inspection_no')).values('item_no'),marked_to__in=das_desig1).count()
                        
                        gpendi2=gpendi-gpendi1
                        
                        per=0
                        pernon1=100
                        pernon2=100
                        if gdeti==0:
                            pernon1=0
                            pernon2=0
                        elif gdeti>0:
                            per="{:.2f}".format((gpendi/gpendi)*100)
                            pernon1="{:.2f}".format(gpendi1/gdeti*100)
                            pernon2="{:.2f}".format(gpendi2/gdeti*100)
                        pernon1= float(pernon1)
                        pernon2= float(pernon2)
                        pudatanon1.append(pernon1)
                        pudatanon2.append(pernon2)
                        countinpu1.append(gpendi1)
                        countbeypu1.append(gpendi2)
                        pudatapsunon1.append(pernon1)
                        pudatapsunon2.append(pernon2)
                        countinpsu1.append(gpendi1)
                        countbeypsu1.append(gpendi2)
                        pulst.append(location_code)
                        pudata.append(per)
                        pulstpsu.append(location_code)
                        pudatapsu.append(per)

                        counttotmarkall1.append(gdeti)
                        counttotmarkpsu.append(gdeti)

                        allpufulldesig.append(das_designation[0]['designation'])
                        psufulldesig.append(das_designation[0]['designation'])

                    ti=m1.Inspection_details.objects.filter(~Q(status_flag=0),inspection_officer=das_desig,inspection_no__in=m1.Insp_multi_location.objects.filter(type='HQ',item=location_code).values('inspection_no')).count()
                    tj=m1.Item_details.objects.filter(item_no__in=objm,inspection_no__in=m1.Inspection_details.objects.filter(~Q(status_flag=0),inspection_officer=das_desig,inspection_no__in=m1.Insp_multi_location.objects.filter(type='HQ',item=location_code).values('inspection_no')).values('inspection_no')).count()
                
                    pi=m1.Inspection_details.objects.filter((Q(status_flag=1)|Q(status_flag=2)|Q(status_flag=3)),inspection_officer=das_desig,inspection_no__in=m1.Insp_multi_location.objects.filter(type='HQ',item=location_code).values('inspection_no')).count()
                    pj=m1.Item_details.objects.filter(item_no__in=objm,inspection_no__in=m1.Inspection_details.objects.filter((Q(status_flag=1)|Q(status_flag=2)|Q(status_flag=3)),inspection_officer=das_desig,inspection_no__in=m1.Insp_multi_location.objects.filter(type='HQ',item=location_code).values('inspection_no')).values('inspection_no')).count()
                    
                    fi=m1.Inspection_details.objects.filter(status_flag=4,inspection_officer=das_desig,inspection_no__in=m1.Insp_multi_location.objects.filter(type='HQ',item=location_code).values('inspection_no')).count()
                    fj=m1.Item_details.objects.filter(item_no__in=objm,inspection_no__in=m1.Inspection_details.objects.filter(status_flag=4,inspection_officer=das_desig,inspection_no__in=m1.Insp_multi_location.objects.filter(type='HQ',item=location_code).values('inspection_no')).values('inspection_no')).count()

                    if ti!=0 and tj!=0:
                        if (ti-pi)==0:
                            pc_insp=0
                        if (tj-pj)==0:
                            pc_item=0
                        else:
                            pc_insp="{:.0f}".format(((ti-pi)/ti)*100)
                            pc_item="{:.0f}".format(((tj-pj)/tj)*100)
                    elif ti==0 or tj==0:
                        pc_insp=0
                        pc_item=0
                    
                    tableb.append({'type':location_code,'ti':ti,'tj':tj,'pi':pi,'pj':pj,'fi':fi,'fj':fj,'pc_insp':pc_insp,'pc_item':pc_item,'total':str(ti)+'/'+str(tj),'pend':str(pi)+'/'+str(pj),'closed':str(fi)+'/'+str(fj)})
                rlytotal=0
                rlypend=0
                rlycls=0
                rlyins=''
                das_desig1=models.Level_Desig.objects.exclude(delete_flag=True).filter(rly_unit__in=models.railwayLocationMaster.objects.filter(location_type_desc='HEAD QUATER').values('rly_unit_code'),designation_code__isnull=False,d_level='GM').values('designation_code').distinct()

                rlytotal=m1.Marked_Officers.objects.filter(item_no__in=m1.Item_details.objects.filter(inspection_no__in=m1.Inspection_details.objects.filter(~(Q(status_flag=0)),inspection_officer=das_desig).values('inspection_no')).values('item_no'),marked_to__in=das_desig1).count()

                rlycls=m1.Marked_Officers.objects.filter(status_flag=3,item_no__in=m1.Item_details.objects.filter(inspection_no__in=m1.Inspection_details.objects.filter(~(Q(status_flag=0)),inspection_officer=das_desig).values('inspection_no')).values('item_no'),marked_to__in=das_desig1).count()
                rlypend=rlytotal - rlycls
                a=m1.Item_details.objects.filter(item_no__in=m1.Marked_Officers.objects.filter(item_no__in=m1.Item_details.objects.filter(inspection_no__in=m1.Inspection_details.objects.filter(~(Q(status_flag=0)),inspection_officer=das_desig).values('inspection_no')).values('item_no'),marked_to__in=das_desig1).values('item_no')).values('inspection_no')
                b=a.distinct().count()
                c=a.count()
                rlyins=str(b)+'/'+str(c)


                putotal=0
                rpupend=0
                pucls=0
                puins=''
                das_desig1=models.Level_Desig.objects.exclude(delete_flag=True).filter((Q(d_level='GM_PU')|Q(d_level='DG_CTI')),rly_unit__in=models.railwayLocationMaster.objects.filter(Q(location_type_desc='PRODUCTION UNIT')|Q(location_type_desc='INSTITUTE')).values('rly_unit_code'),designation_code__isnull=False).values('designation_code').distinct()
                putotal=m1.Marked_Officers.objects.filter(item_no__in=m1.Item_details.objects.filter(inspection_no__in=m1.Inspection_details.objects.filter(~(Q(status_flag=0)),inspection_officer=das_desig).values('inspection_no')).values('item_no'),marked_to__in=das_desig1).count()
                pucls=m1.Marked_Officers.objects.filter(status_flag=3,item_no__in=m1.Item_details.objects.filter(inspection_no__in=m1.Inspection_details.objects.filter(~(Q(status_flag=0)),inspection_officer=das_desig).values('inspection_no')).values('item_no'),marked_to__in=das_desig1).count()
                pupend=putotal - pucls
                a=m1.Item_details.objects.filter(item_no__in=m1.Marked_Officers.objects.filter(item_no__in=m1.Item_details.objects.filter(inspection_no__in=m1.Inspection_details.objects.filter(~(Q(status_flag=0)),inspection_officer=das_desig).values('inspection_no')).values('item_no'),marked_to__in=das_desig1).values('item_no')).values('inspection_no')
                b=a.distinct().count()
                c=a.count()
                puins=str(b)+'/'+str(c)
                

                dol=m4.do_upload.objects.filter(desig_id=das_desig).values('id','do_letter_date','subject').order_by('-do_letter_date')

                tabledol=[]
                tabledolt=[]

                for i in range(len(dol)):
                    dodate=dol[i]['do_letter_date']
                    dosubject=dol[i]['subject']
                    doid=dol[i]['id']
                    doltotal=m4.do_act.objects.filter(id_upload=doid).count()
                    dolreply=m4.do_act.objects.filter(id_upload=doid,status_flag='False').count()
                    dolreplied=m4.do_act.objects.filter(id_upload=doid,status_flag='True').count()

                    if doltotal!=0:
                        if (doltotal-dolreply)==0:
                            do_total=0
                        else:
                            do_total="{:.0f}".format(((doltotal-dolreply)/doltotal)*100)
                    elif doltotal==0:
                        do_total=0
                    dosubject=dosubject[0:20]+"..."
                    tabledol.append({'dodate':dodate,'dosubject':dosubject,'doltotal':doltotal,'dolreply':dolreply,'do_total':do_total,'doid':doid,'dolreplied':dolreplied})
                    tabledolt=tabledol
                    tabledolt=sorted(tabledolt, key = lambda item: (item['dodate'],item['dosubject']),reverse=True)

                tbllen=len(tabledolt)
                rem=tbllen % 4
                
                if (tabledolt == [] and rem == 0) or (rem != 0):
                    for i in range(rem,4):
                        tabledolt.append({'dodate':'-','dosubject':'-','doltotal':'-','dolreply':'-','do_total':'-','doid':'-','dolreplied':'-'})

                ##########################################

                do_rcvd=list(m4.do_act.objects.filter(desig_id=das_desig).values_list('id_upload',flat=True))
                
                dol=m4.do_upload.objects.filter(id__in=do_rcvd).values('id','do_letter_date','subject').order_by('-do_letter_date')
                tabledol1=[]
                tabledolt1=[]

                for i in range(len(dol)):
                    dodate=dol[i]['do_letter_date']
                    dosubject=dol[i]['subject']
                    doid=dol[i]['id']
                    doltotal=m4.do_act.objects.filter(id_upload=doid).count()
                    dolreply=m4.do_act.objects.filter(id_upload=doid,status_flag='False').count()
                    dolreplied=m4.do_act.objects.filter(id_upload=doid,status_flag='True').count()

                    if doltotal!=0:
                        if (doltotal-dolreply)==0:
                            do_total=0
                        else:
                            do_total="{:.0f}".format(((doltotal-dolreply)/doltotal)*100)
                    elif doltotal==0:
                        do_total=0
                    dosubject=dosubject[0:15]+"..."
                    tabledol1.append({'dodate':dodate,'dosubject':dosubject,'doltotal':doltotal,'dolreply':dolreply,'do_total':do_total,'doid':doid,'dolreplied':dolreplied})
                    tabledolt1=tabledol1
                    tabledolt1=sorted(tabledolt1, key = lambda item: (item['dodate'],item['dosubject']),reverse=True)

                tbllen=len(tabledolt1)
                rem=tbllen % 4
                
                if (tabledolt1 == [] and rem == 0) or (rem != 0):
                    for i in range(rem,4):
                        tabledolt1.append({'dodate':'-','dosubject':'-','doltotal':'-','dolreply':'-','do_total':'-','doid':'-','dolreplied':'-'})

                
                
            
                # if request.method == 'POST':  
                #             do_letter_no=request.POST.get('do_letter_no')
                #             date111=request.POST.get('date')
                #             if date111:
                #                 new_date = datetime.strptime(date111, '%d-%m-%y').strftime('%Y-%m-%d')
                #             subject=request.POST.get('subject')
                #             action_by= request.POST.get('action_by_test')
                #             copy_to= request.POST.get('copy_to_test')
                #             do_text=request.POST.get('do_text')
                #             if action_by:
                #                 marked_officers=action_by.split(',')
                #                 copy_to=copy_to.split(',')
                #                 if len(do_text)>0:
                #                     do_file=None
                #                 else:
                #                     do_text=None
                #                     do_file=request.FILES['do_file']
                #                 if len(marked_officers[0])>0:
                #                     values=m4.do_upload.objects.create(do_text=do_text, created_by_id = empno, desig_id_id= desig, status_flag=4, do_letter_no = do_letter_no,  do_letter_date=new_date, subject=subject, do_path= do_file, delete_flag=0 )
                #                     for i in marked_officers:
                #                         marked_officers_list = models.Level_Desig.objects.exclude(delete_flag=True).get(designation=i)
                #                         marked_officers_id= m1.empmast.objects.get(empno=(models.Level_Desig.objects.exclude(delete_flag=True).filter(Q(designation = i)).values('empno'))[0]['empno'])
                #                         action= m4.do_act.objects.create(id_upload=values, desig_id=marked_officers_list, status_flag=False,  emp_no = marked_officers_id )  
                #                     if copy_to != ['']:
                #                         for i in copy_to:
                #                             marked_officers_list = models.Level_Desig.objects.exclude(delete_flag=True).get(designation=i)
                #                             m4.do_copy.objects.create(do_upload=values, desig_id=marked_officers_list)  

                #                 else:
                #                     messages.error(request,"upload unsuccessful")

                
                

                mom=m3.Insp_details.objects.filter(mom_officer=das_desig).values('mom_date').order_by('-mom_date')[:4]

                tablemom=[]
                tablemomd=[]

                for i in range(len(mom)):
                    momdate=mom[i]['mom_date']

                    tablemom.append({'momdate':momdate})
                    tablemomd=tablemom
                    tablemomd=sorted(tablemomd, key = lambda item: (item['momdate']),reverse=True)


                # GUNJAN-MOM-CARD
                mom_heading_name='MOM'
                if request.user.user_role == 'guest':
                    mom_desig_details=models.Level_Desig.objects.exclude(delete_flag=True).filter(official_email_ID=request.user.guest_email).values()
                else:
                    mom_desig_details=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=request.user.username) |Q(official_email_ID=request.user.email) | Q(official_email_ID=request.user.guest_email) ).values()

                
                if mom_desig_details[0]['d_level']=='CRB' or mom_desig_details[0]['d_level']=='BM' or mom_desig_details[0]['d_level']=='Secy_RB' or mom_desig_details[0]['d_level']=='AM' or mom_desig_details[0]['d_level']=='ED' or mom_desig_details[0]['d_level']=='PED':
                    list_mom_details=[]
                    # list_mom=m3.Insp_details.objects.filter(mom_officer=mom_desig_details[0]['designation_code'],type=0).values('mom_date','insp_no')
                    list_mom=m3.Insp_details.objects.filter(type=0,mom_officer_id=mom_desig_details[0]['designation_code'],status_flag__in=[1,2,3,4]).values().distinct().order_by('-insp_no')

                    mom_heading_name='Board Meetings'
                    for i in list_mom:
                        temp={}
                        temp['meeting_type']='Board Meetings'
                        if(m3.Marked_Members.objects.filter(item_no__insp_no_id=i['insp_no']).exists()):
                            temp['mom_date']=i['mom_date']
                            temp['mom_no']=i['insp_no']
                            temp['total_status']=m3.Marked_Members.objects.filter(item_no__insp_no_id=i['insp_no']).count()
                            temp['reply_status']=m3.Marked_Members.objects.filter(item_no__insp_no_id=i['insp_no'],status_flag=3).count()
                        else:
                            temp['mom_date']=i['mom_date']
                            temp['mom_no']=i['insp_no']
                            temp['total_status']=int(0)
                            temp['reply_status']=int(0)
                        list_mom_details.append(temp)
                    # print(list_mom_details,'GUNJANRAJPUT')
                elif mom_desig_details[0]['d_level']=='GM' or mom_desig_details[0]['d_level']=='PHOD' or mom_desig_details[0]['d_level']=='AGM' or mom_desig_details[0]['d_level']=='Secy_GM':
                    list_mom_details=[]
                    list_mom=m3.Insp_details.objects.filter(type=1,mom_officer_id=mom_desig_details[0]['designation_code'], status_flag__in=[1,2,3,4]).values().distinct().order_by('-insp_no')
                    for i in list_mom:
                        temp={}
                        if(m3.Marked_Members.objects.filter(item_no__insp_no_id=i['insp_no']).exists()):
                            temp['mom_date']=i['mom_date']
                            temp['meeting_type']=i['meeting_type']
                            temp['mom_no']=i['insp_no']
                            temp['total_status']=m3.Marked_Members.objects.filter(item_no__insp_no_id=i['insp_no']).count()
                            temp['reply_status']=m3.Marked_Members.objects.filter(item_no__insp_no_id=i['insp_no'],status_flag=3).count()
                        else:
                            temp['mom_date']=i['mom_date']
                            temp['meeting_type']=i['meeting_type']
                            temp['mom_no']=i['insp_no']
                            temp['total_status']=int(0)
                            temp['reply_status']=int(0)
                        list_mom_details.append(temp)
                    print(list_mom_details,'GUNJANRAJPUT')
                else:
                    list_mom_details=[]
                    list_mom=m3.Insp_details.objects.filter(type=2,mom_officer_id=mom_desig_details[0]['designation_code'],status_flag__in=[1,2,3,4]).values().distinct().order_by('-insp_no')
                    for i in list_mom:
                        temp={}
                        temp['meeting_type']=i['meeting_type']
                        if(m3.Marked_Members.objects.filter(item_no__insp_no_id=i['insp_no']).exists()):
                            temp['mom_date']=i['mom_date']
                            temp['mom_no']=i['insp_no']
                            temp['total_status']=m3.Marked_Members.objects.filter(item_no__insp_no_id=i['insp_no']).count()
                            temp['reply_status']=m3.Marked_Members.objects.filter(item_no__insp_no_id=i['insp_no'],status_flag=3).count()
                        else:
                            temp['mom_date']=i['mom_date']
                            temp['mom_no']=i['insp_no']
                            temp['total_status']=int(0)
                            temp['reply_status']=int(0)
                        list_mom_details.append(temp)
                    # print(list_mom_details,'GUNJANRAJPUT')

                mom_recd_dealt_reply=[]
                count=1
                insp_details_mom_recd=m3.Insp_details.objects.values().order_by('insp_no')
                # meeting=m3.meeting_typelist.objects.values('meeting_type').distinct().order_by('meeting_type')
                for i in insp_details_mom_recd:
                        temp={}
                        temp['meeting_type']=i['meeting_type']
                        if(m3.Marked_Members.objects.filter(item_no__insp_no_id=i['insp_no'],marked_to=mom_desig_details[0]['designation_code']).exists()):
                            temp['mom_date']=i['mom_date']
                            temp['mom_no']=i['insp_no']
                            temp['total_status']=m3.Marked_Members.objects.filter(item_no__insp_no_id=i['insp_no'],marked_to=mom_desig_details[0]['designation_code']).count()
                            temp['reply_status']=m3.Marked_Members.objects.filter(item_no__insp_no_id=i['insp_no'],marked_to=mom_desig_details[0]['designation_code'],status_flag=3).count()
                        # else:
                        #     temp['mom_date']=i['mom_date']
                        #     temp['total_status']=int(0)
                        #     temp['reply_status']=int(0)
                            mom_recd_dealt_reply.append(temp)
                # print(mom_recd_dealt_reply,'GUNJANRAJPUT')
                
                

                tbllen=len(list_mom_details)
                rem=tbllen % 4

                if (list_mom_details == [] and rem == 0) or (rem != 0):
                    for i in range(rem,4):
                        list_mom_details.append({'mom_date':'-','reply_status':'-','total_status':'-','meeting_type':'-'})


                tbllen=len(mom_recd_dealt_reply)
                rem=tbllen % 4
                # print("mom_recd_dealt_reply",mom_recd_dealt_reply)
                if (mom_recd_dealt_reply == [] and rem == 0) or (rem != 0):
                    for i in range(rem,4):
                        mom_recd_dealt_reply.append({'mom_date':'-','reply_status':'-','total_status':'-','meeting_type':'-'})
                # print("mom_recd_dealt_reply",mom_recd_dealt_reply)




            elif submitvalue in ['sum5','sum4','sum3','sum2'] and request.method == 'POST':  
                from dateutil.relativedelta import relativedelta
                if submitvalue=='sum2':    # for last 3 months
                    now = datetime.today()
                    six = now
                    prev = now - relativedelta(months=3)
                    prev = prev.date()
                    color = '0-3'
                    # daterange=str(prev.strftime('%d/%m/%y'))+' - '+str(now.strftime('%d/%m/%y'))
                    daterange='Last 3 Months'
                elif submitvalue=='sum3':   # for last 6 months
                    now = datetime.today()
                    six = now
                    prev = now - relativedelta(months=6)
                    prev = prev.date()
                    color = '0-6'
                    # daterange=str(prev.strftime('%d/%m/%y'))+' - '+str(now.strftime('%d/%m/%y'))
                    daterange='Last 6 Months'
                elif submitvalue=='sum4':   # for last 12 months
                    now = datetime.today()
                    six = now
                    prev = now - relativedelta(months=12)
                    prev = prev.date()
                    color = '0-12'
                    # daterange=str(prev.strftime('%d/%m/%y'))+' - '+str(now.strftime('%d/%m/%y'))
                    daterange='Last 12 Months'
                elif submitvalue=='sum5':   # for custom range 
                    daterange=request.POST.get('daterange')
                    daterange1=daterange.split('-')
                    date1=daterange1[0].split('/')
                    date2=daterange1[1].split('/')
                    prev='20'+date1[2].strip()+'-'+date1[1].strip()+'-'+date1[0].strip()
                    six='20'+date2[2].strip()+'-'+date2[1].strip()+'-'+date2[0].strip()
                    color = 'tofrom'

                # draft inspections
                
                objm = m1.Marked_Officers.objects.filter(item_no__inspection_no__inspection_officer=das_desig).values_list('item_no', flat=True)
                objm1 = m1.Marked_Officers.objects.filter(item_no__inspection_no__inspection_officer=das_desig,status_flag__in=[1,2]).values_list('item_no', flat=True)

                # draft inspections
                
                deti=m1.Inspection_details.objects.filter(status_flag=0,inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six).count()
                # draft inspections - item
                detj=m1.Item_details.objects.filter(item_no__in=objm,inspection_no__in=m1.Inspection_details.objects.filter(status_flag=0,inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six).values('inspection_no')).count()

                # total inspections except draft
                totali=m1.Inspection_details.objects.filter(~Q(status_flag=0),inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six).count()
                # total inspections except draft - item
                totalj=m1.Item_details.objects.filter(item_no__in=objm,inspection_no__in=m1.Inspection_details.objects.filter(~Q(status_flag=0),inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six).values('inspection_no')).count()

                # pending inspections
                pendi=m1.Inspection_details.objects.filter(status_flag__in=[1,2,3],inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six).count()
                # pending inspections -items
                pendj=m1.Item_details.objects.filter(item_no__in=objm1,inspection_no__in=m1.Inspection_details.objects.filter(status_flag__in=[1,2,3],inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six)).exclude(type='SSH').values('inspection_no').count()

                
                # fully complied inspections
                fulli=m1.Inspection_details.objects.filter(status_flag=4,inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six).values()
                # fully complied inspections - items
                
                fullj=m1.Item_details.objects.filter(item_no__in=objm,status_flag=4,inspection_no__inspected_on__gte=prev,inspection_no__inspected_on__lte=six).exclude(type='SSH').count()
                # # total replied inspections
                # treplyi=m1.Inspection_details.objects.filter(~Q(status_flag=0),inspection_no__in=m1.Item_details.objects.filter(item_no__in=m1.Marked_Officers.objects.filter((Q(status_flag=1)|Q(status_flag=2)|Q(status_flag=3)),marked_to_id=das_desig).values('item_no')).values('inspection_no')).count()

                # # total replied inspections - items
                # treplyj=m1.Item_details.objects.filter(inspection_no__in=m1.Inspection_details.objects.filter(~Q(status_flag=0),inspection_no__in=m1.Item_details.objects.filter(item_no__in=m1.Marked_Officers.objects.filter((Q(status_flag=1)|Q(status_flag=2)|Q(status_flag=3)),marked_to_id=das_desig).values('item_no')).values('inspection_no'))).count()

                # replies to my compliances
                #repliedi=m1.Inspection_details.objects.filter(~Q(status_flag=0),inspected_on__gte=prev,inspected_on__lte=six,inspection_no__in=m1.Item_details.objects.filter(item_no__in=m1.Marked_Officers.objects.filter(marked_to_id=das_desig,status_flag=3).values('item_no')).values('inspection_no')).count()
                objre = m1.Marked_Officers.objects.filter(marked_to_id=das_desig,item_no__inspection_no__inspected_on__gte=prev,item_no__inspection_no__inspected_on__lte=six).values('item_no','status_flag','item_no__status_flag','item_no__inspection_no')
                listre={}
                for i in range(len(objre)):
                    if str(objre[i]['item_no__inspection_no']) not in listre:
                        listre[str(objre[i]['item_no__inspection_no'])]=[[objre[i]['item_no__status_flag']],[objre[i]['status_flag']]]
                    else:
                        listre[str(objre[i]['item_no__inspection_no'])][0].append(objre[i]['item_no__status_flag'])
                        listre[str(objre[i]['item_no__inspection_no'])][1].append(objre[i]['status_flag'])

                repliedi=0
                for data,value in listre.items():
                    if (1 in value[0]) or (2 in value[0]):
                        if (1 not in value[1] and 2 not in value[1]):
                            listre[data]=0
                            repliedi+=1
                        else:
                            listre[data]=1
                    else:
                        listre[data]=0
                        repliedi+=1
                repliedj=m1.Marked_Officers.objects.filter(status_flag__in=[3,4],marked_to_id=das_desig,item_no__in=m1.Item_details.objects.filter(inspection_no__in=m1.Inspection_details.objects.filter(~Q(status_flag=0),inspected_on__gte=prev,inspected_on__lte=six,inspection_no__in= m1.Item_details.objects.filter(~Q(status_flag=0)).values('inspection_no')).values('inspection_no')).values('item_no')).count()
                

                # pending replies
                pendingi=m1.Inspection_details.objects.filter(status_flag__in=[1,2,3],inspected_on__gte=prev,inspected_on__lte=six,inspection_no__in=m1.Item_details.objects.filter(item_no__in=m1.Marked_Officers.objects.filter(marked_to_id=das_desig,status_flag=1).values('item_no')).values('inspection_no')).count()
        
                pendingj=m1.Marked_Officers.objects.filter(status_flag=1,marked_to_id=das_desig,item_no__in=m1.Item_details.objects.filter(inspection_no__in=m1.Inspection_details.objects.filter(status_flag__in=[1,2,3],inspected_on__gte=prev,inspected_on__lte=six,inspection_no__in= m1.Item_details.objects.filter((Q(status_flag=1)|Q(status_flag=2)|Q(status_flag=3)|Q(status_flag=4))).values('inspection_no')).values('inspection_no')).values('item_no')).count()

               

                replyi,replyj=0,0
                if pendingi+repliedi!=0 and pendingj+repliedj!=0:
                    replyi="{:.0f}".format((abs(repliedi/(pendingi+repliedi)))*100)
                    replyj="{:.0f}".format((abs(repliedj/(pendingj+repliedj)))*100)
                else:
                    replyi=0
                    replyj=0

                # -------------summary of inspection tables queries --------------------------------
                
                # 1. For Zone/PU/PSU/CTI table

                # 2. For Div./W.S. table 

                table=list(models.railwayLocationMaster.objects.filter(location_type_desc__in=['DIVISION','WORKSHOP'], parent_location_code__in=models.railwayLocationMaster.objects.filter(rly_unit_code__in=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=das_desig).values('rly_unit_id')).values('location_code')).values('location_code','rly_unit_code','location_type'))

                for i in range(len(table)):
                    location_code = table[i]['location_code']
                    rly_unit_code=table[i]['rly_unit_code']
                    location_type=table[i]['location_type']

                    multi_loc = m1.Insp_multi_location.objects.filter(item=location_code,inspection_no__inspection_officer=das_desig).values('inspection_no')

                    ti= m1.Inspection_details.objects.filter(~Q(status_flag=0),inspection_no__in=multi_loc,inspected_on__gte=prev,inspected_on__lte=six).count()

                    tj=m1.Item_details.objects.filter(~Q(inspection_no__status_flag=0), inspection_no__in=multi_loc, item_no__in=objm,inspection_no__inspected_on__gte=prev,inspection_no__inspected_on__lte=six).exclude(type='SSH').count()
        
                    pi=m1.Inspection_details.objects.filter((Q(status_flag=1)|Q(status_flag=2)|Q(status_flag=3)), inspection_officer=das_desig,inspection_no__in=multi_loc,inspected_on__gte=prev,inspected_on__lte=six).count()

                    pj=m1.Item_details.objects.filter(Q(inspection_no__status_flag=1)|Q(inspection_no__status_flag=2)|Q(inspection_no__status_flag=3), inspection_no__in=multi_loc, item_no__in=objm,inspection_no__inspected_on__gte=prev,inspection_no__inspected_on__lte=six).exclude(type='SSH').count()
            
                    fi=m1.Inspection_details.objects.filter(status_flag=4,inspection_no__in=multi_loc,inspected_on__gte=prev,inspected_on__lte=six).count()

                    fj=m1.Item_details.objects.filter(inspection_no__status_flag=4, inspection_no__in=multi_loc, item_no__in=objm,inspection_no__inspected_on__gte=prev,inspection_no__inspected_on__lte=six).exclude(type='SSH').count()

                    pc_insp=0
                    pc_item=0
                    if ti!=0 and tj!=0:
                        if (ti-pi)==0:
                            pc_insp=0
                        if (tj-pj)==0:
                            pc_item=0
                        else:
                            pc_insp="{:.0f}".format(((ti-pi)/ti)*100)
                            pc_item="{:.0f}".format(((tj-pj)/tj)*100)
                    elif ti==0 or tj==0:
                        pc_insp=0
                        pc_item=0
                    tabled.append({'type':location_code,'loc_type':location_type,'ti':ti,'tj':tj,'pi':pi,'pj':pj,'fi':fi,'fj':fj,'pc_insp':pc_insp,'pc_item':pc_item,'replyi':replyi,'replyj':replyj,'total':str(ti)+'/'+str(tj),'pend':str(pi)+'/'+str(pj),'closed':str(fi)+'/'+str(fj)})
					
					
                # 3. For Unit wise table 

                lstrlc=list(m1.Insp_multi_location.objects.filter(type='LOC',table_from='STM',inspection_no__in=m1.Inspection_details.objects.filter(~(Q(status_flag=0)),inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six).values('inspection_no')).values('item').distinct())


                
                for i in range(len(lstrlc)):
                    location_code=lstrlc[i]['item']
                    er=models.station_master.objects.filter(station_name=location_code).values('stnshortcode')
                    ti=m1.Inspection_details.objects.filter(~(Q(status_flag=0)),inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six,inspection_no__in=m1.Insp_multi_location.objects.filter(type='LOC',item=location_code).values('inspection_no')).count()

                    tj=m1.Marked_Officers.objects.filter(item_no__in=m1.Item_details.objects.filter(inspection_no__in=m1.Inspection_details.objects.filter(~(Q(status_flag=0)),inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six,inspection_no__in=m1.Insp_multi_location.objects.filter(type='LOC',item=location_code).values('inspection_no')).values('inspection_no')).values('item_no')).values('item_no').distinct().count()
                

                    pi=m1.Inspection_details.objects.filter((Q(status_flag=1)|Q(status_flag=2)|Q(status_flag=3)),inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six,inspection_no__in=m1.Insp_multi_location.objects.filter(type='LOC',item=location_code).values('inspection_no')).count()
                    pj=m1.Marked_Officers.objects.filter(item_no__in=m1.Item_details.objects.filter(inspection_no__in=m1.Inspection_details.objects.filter((Q(status_flag=1)|Q(status_flag=2)|Q(status_flag=3)),inspected_on__gte=prev,inspected_on__lte=six,inspection_officer=das_desig,inspection_no__in=m1.Insp_multi_location.objects.filter(type='LOC',item=location_code).values('inspection_no')).values('inspection_no')).values('item_no')).values('item_no').distinct().count()
                    
                    fi=m1.Inspection_details.objects.filter(status_flag=4,inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six,inspection_no__in=m1.Insp_multi_location.objects.filter(type='LOC',item=location_code).values('inspection_no')).count()
                    fj=m1.Marked_Officers.objects.filter(item_no__in=m1.Item_details.objects.filter(inspection_no__in=m1.Inspection_details.objects.filter(status_flag=4,inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six,inspection_no__in=m1.Insp_multi_location.objects.filter(type='LOC',item=location_code).values('inspection_no')).values('inspection_no')).values('inspection_no')).values('item_no').values('item_no').distinct().count()
                    
                    if (ti!=0 and tj!=0) or ((ti-pi)!=0 or (tj-pj!=0)):
                        pc_insp="{:.0f}".format(((ti-pi)/ti)*100)
                        pc_item="{:.0f}".format(((tj-pj)/tj)*100)
                        
                    else:
                        pc_insp=0
                        pc_item=0
                    tableu.append({'type':er[0]['stnshortcode'],'pc_insp':pc_insp,'pc_item':pc_item,'ti':ti,'tj':tj,'pi':pi,'pj':pj,'fi':fi,'fj':fj,'total':str(ti)+'/'+str(tj),'pend':str(pi)+'/'+str(pj),'closed':str(fi)+'/'+str(fj)})

                lstrlc=list(m1.Insp_multi_location.objects.filter(type='LOC',table_from='SEM',inspection_no__in=m1.Inspection_details.objects.filter(~(Q(status_flag=0)),inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six).values('inspection_no')).values('item').distinct())
        
                for i in range(len(lstrlc)):
                    location_code=lstrlc[i]['item']
                    er=models.section_master.objects.filter(section_name=location_code).values('section_code')
                    ti=m1.Inspection_details.objects.filter(~(Q(status_flag=0)),inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six,inspection_no__in=m1.Insp_multi_location.objects.filter(type='LOC',item=location_code).values('inspection_no')).count()

                    tj=m1.Marked_Officers.objects.filter(item_no__in=m1.Item_details.objects.filter(inspection_no__in=m1.Inspection_details.objects.filter(~(Q(status_flag=0)),inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six,inspection_no__in=m1.Insp_multi_location.objects.filter(type='LOC',item=location_code).values('inspection_no')).values('inspection_no')).values('item_no')).values('item_no').distinct().count()
                

                    pi=m1.Inspection_details.objects.filter((Q(status_flag=1)|Q(status_flag=2)|Q(status_flag=3)),inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six,inspection_no__in=m1.Insp_multi_location.objects.filter(type='LOC',item=location_code).values('inspection_no')).count()
                    pj=m1.Marked_Officers.objects.filter(item_no__in=m1.Item_details.objects.filter(inspection_no__in=m1.Inspection_details.objects.filter((Q(status_flag=1)|Q(status_flag=2)|Q(status_flag=3)),inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six,inspection_no__in=m1.Insp_multi_location.objects.filter(type='LOC',item=location_code).values('inspection_no')).values('inspection_no')).values('item_no')).values('item_no').distinct().count()
                    
                    fi=m1.Inspection_details.objects.filter(status_flag=4,inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six,inspection_no__in=m1.Insp_multi_location.objects.filter(type='LOC',item=location_code).values('inspection_no')).count()
                    fj=m1.Marked_Officers.objects.filter(item_no__in=m1.Item_details.objects.filter(inspection_no__in=m1.Inspection_details.objects.filter(status_flag=4,inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six,inspection_no__in=m1.Insp_multi_location.objects.filter(type='LOC',item=location_code).values('inspection_no')).values('inspection_no')).values('inspection_no')).values('item_no').values('item_no').distinct().count()
                    
                    if (ti!=0 and tj!=0) or ((ti-pi)!=0 or (tj-pj!=0)):
                        pc_insp="{:.0f}".format(((ti-pi)/ti)*100)
                        pc_item="{:.0f}".format(((tj-pj)/tj)*100)
                        print(pc_insp,pc_item)
                    else:
                        pc_insp=0
                        pc_item=0
                    if len(er)==0:
                        ers='NA'
                    else:
                        ers=er[0]['section_code']
                    tablesec.append({'type':ers,'pc_insp':pc_insp,'pc_item':pc_item,'ti':ti,'tj':tj,'pi':pi,'pj':pj,'fi':fi,'fj':fj,'total':str(ti)+'/'+str(tj),'pend':str(pi)+'/'+str(pj),'closed':str(fi)+'/'+str(fj)})

                lstrlc=list(m1.Insp_multi_location.objects.filter(type='LOC',table_from='RRM',inspection_no__in=m1.Inspection_details.objects.filter(~(Q(status_flag=0)),inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six).values('inspection_no')).values('item').distinct())
        
                for i in range(len(lstrlc)):
                    location_code=lstrlc[i]['item']
                    er=models.runningroom_master.objects.filter(rr_name=location_code).values('rr_code')
                    ti=m1.Inspection_details.objects.filter(~(Q(status_flag=0)),inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six,inspection_no__in=m1.Insp_multi_location.objects.filter(type='LOC',item=location_code).values('inspection_no')).count()

                    tj=m1.Marked_Officers.objects.filter(item_no__in=m1.Item_details.objects.filter(inspection_no__in=m1.Inspection_details.objects.filter(~(Q(status_flag=0)),inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six,inspection_no__in=m1.Insp_multi_location.objects.filter(type='LOC',item=location_code).values('inspection_no')).values('inspection_no')).values('item_no')).values('item_no').distinct().count()
                

                    pi=m1.Inspection_details.objects.filter((Q(status_flag=1)|Q(status_flag=2)|Q(status_flag=3)),inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six,inspection_no__in=m1.Insp_multi_location.objects.filter(type='LOC',item=location_code).values('inspection_no')).count()
                    pj=m1.Marked_Officers.objects.filter(item_no__in=m1.Item_details.objects.filter(inspection_no__in=m1.Inspection_details.objects.filter((Q(status_flag=1)|Q(status_flag=2)|Q(status_flag=3)),inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six,inspection_no__in=m1.Insp_multi_location.objects.filter(type='LOC',item=location_code).values('inspection_no')).values('inspection_no')).values('item_no')).values('item_no').distinct().count()
                    
                    fi=m1.Inspection_details.objects.filter(status_flag=4,inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six,inspection_no__in=m1.Insp_multi_location.objects.filter(type='LOC',item=location_code).values('inspection_no')).count()
                    fj=m1.Marked_Officers.objects.filter(item_no__in=m1.Item_details.objects.filter(inspection_no__in=m1.Inspection_details.objects.filter(status_flag=4,inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six,inspection_no__in=m1.Insp_multi_location.objects.filter(type='LOC',item=location_code).values('inspection_no')).values('inspection_no')).values('inspection_no')).values('item_no').values('item_no').distinct().count()
                    
                    if (ti!=0 and tj!=0) or ((ti-pi)!=0 or (tj-pj!=0)):
                        pc_insp="{:.0f}".format(((ti-pi)/ti)*100)
                        pc_item="{:.0f}".format(((tj-pj)/tj)*100)
                        print(pc_insp,pc_item)
                    else:
                        pc_insp=0
                        pc_item=0
                    tablerr.append({'type':er[0]['rr_code'],'pc_insp':pc_insp,'pc_item':pc_item,'ti':ti,'tj':tj,'pi':pi,'pj':pj,'fi':fi,'fj':fj,'total':str(ti)+'/'+str(tj),'pend':str(pi)+'/'+str(pj),'closed':str(fi)+'/'+str(fj)})

                tablerly=[]
                lstrlc=list(m1.Insp_multi_location.objects.filter(type='LOC',table_from='ORL',inspection_no__in=m1.Inspection_details.objects.filter(~(Q(status_flag=0)),inspection_officer=das_desig).values('inspection_no')).values('item').distinct())

                for i in range(len(lstrlc)):
                    location_code=lstrlc[i]['item']
                    if '-' in location_code:
                        location_code1=location_code.rsplit('-', 1)
                        


                    er=models.railwayLocationMaster.objects.filter(location_description=location_code1[0],location_code=location_code1[1]).values('location_code')
                    
                    ti=m1.Inspection_details.objects.filter(~(Q(status_flag=0)),inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six,inspection_no__in=m1.Insp_multi_location.objects.filter(type='LOC',item=location_code).values('inspection_no')).count()

                    tj=m1.Marked_Officers.objects.filter(item_no__in=m1.Item_details.objects.filter(inspection_no__in=m1.Inspection_details.objects.filter(~(Q(status_flag=0)),inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six,inspection_no__in=m1.Insp_multi_location.objects.filter(type='LOC',item=location_code).values('inspection_no')).values('inspection_no')).values('item_no')).values('item_no').distinct().count()
                

                    pi=m1.Inspection_details.objects.filter((Q(status_flag=1)|Q(status_flag=2)|Q(status_flag=3)),inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six,inspection_no__in=m1.Insp_multi_location.objects.filter(type='LOC',item=location_code).values('inspection_no')).count()
                    pj=m1.Marked_Officers.objects.filter(item_no__in=m1.Item_details.objects.filter(inspection_no__in=m1.Inspection_details.objects.filter((Q(status_flag=1)|Q(status_flag=2)|Q(status_flag=3)),inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six,inspection_no__in=m1.Insp_multi_location.objects.filter(type='LOC',item=location_code).values('inspection_no')).values('inspection_no')).values('item_no')).values('item_no').distinct().count()
                    
                    fi=m1.Inspection_details.objects.filter(status_flag=4,inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six,inspection_no__in=m1.Insp_multi_location.objects.filter(type='LOC',item=location_code).values('inspection_no')).count()
                    fj=m1.Marked_Officers.objects.filter(item_no__in=m1.Item_details.objects.filter(inspection_no__in=m1.Inspection_details.objects.filter(status_flag=4,inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six,inspection_no__in=m1.Insp_multi_location.objects.filter(type='LOC',item=location_code).values('inspection_no')).values('inspection_no')).values('inspection_no')).values('item_no').values('item_no').distinct().count()
                    
                    
                    if (ti!=0 and tj!=0) or ((ti-pi)!=0 or (tj-pj!=0)):
                        pc_insp="{:.0f}".format(((ti-pi)/ti)*100)
                        pc_item="{:.0f}".format(((tj-pj)/tj)*100)
                        
                    else:
                        pc_insp=0
                        pc_item=0
                    tablerly.append({'type':location_code,'pc_insp':pc_insp,'pc_item':pc_item,'ti':ti,'tj':tj,'pi':pi,'pj':pj,'fi':fi,'fj':fj,'total':str(ti)+'/'+str(tj),'pend':str(pi)+'/'+str(pj),'closed':str(fi)+'/'+str(fj)})

                lstrlc=list(m1.Insp_multi_location.objects.filter(type='LOC',table_from='SOP',inspection_no__in=m1.Inspection_details.objects.filter(~(Q(status_flag=0)),inspection_officer=das_desig).values('inspection_no')).values('item','item_code').distinct())
        
                for i in range(len(lstrlc)):
                    location_code=lstrlc[i]['item']
                    location_code1=lstrlc[i]['item_code']
                    er=models.Shop_section.objects.filter(section_desc=location_code,shop_code=location_code1).values('shop_code')
                    ti=m1.Inspection_details.objects.filter(~(Q(status_flag=0)),inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six,inspection_no__in=m1.Insp_multi_location.objects.filter(type='LOC',item=location_code,item_code=location_code1).values('inspection_no')).count()

                    tj=m1.Marked_Officers.objects.filter(item_no__in=m1.Item_details.objects.filter(inspection_no__in=m1.Inspection_details.objects.filter(~(Q(status_flag=0)),inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six,inspection_no__in=m1.Insp_multi_location.objects.filter(type='LOC',item=location_code,item_code=location_code1).values('inspection_no')).values('inspection_no')).values('item_no')).values('item_no').distinct().count()
                

                    pi=m1.Inspection_details.objects.filter((Q(status_flag=1)|Q(status_flag=2)|Q(status_flag=3)),inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six,inspection_no__in=m1.Insp_multi_location.objects.filter(type='LOC',item=location_code,item_code=location_code1).values('inspection_no')).count()
                    pj=m1.Marked_Officers.objects.filter(item_no__in=m1.Item_details.objects.filter(inspection_no__in=m1.Inspection_details.objects.filter((Q(status_flag=1)|Q(status_flag=2)|Q(status_flag=3)),inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six,inspection_no__in=m1.Insp_multi_location.objects.filter(type='LOC',item=location_code,item_code=location_code1).values('inspection_no')).values('inspection_no')).values('item_no')).values('item_no').distinct().count()
                    
                    fi=m1.Inspection_details.objects.filter(status_flag=4,inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six,inspection_no__in=m1.Insp_multi_location.objects.filter(type='LOC',item=location_code,item_code=location_code1).values('inspection_no')).count()
                    fj=m1.Marked_Officers.objects.filter(item_no__in=m1.Item_details.objects.filter(inspection_no__in=m1.Inspection_details.objects.filter(status_flag=4,inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six,inspection_no__in=m1.Insp_multi_location.objects.filter(type='LOC',item=location_code,item_code=location_code1).values('inspection_no')).values('inspection_no')).values('inspection_no')).values('item_no').values('item_no').distinct().count()
                    
                    if (ti!=0 and tj!=0) or ((ti-pi)!=0 or (tj-pj!=0)):
                        pc_insp="{:.0f}".format(((ti-pi)/ti)*100)
                        pc_item="{:.0f}".format(((tj-pj)/tj)*100)
                        print(pc_insp,pc_item)
                    else:
                        pc_insp=0
                        pc_item=0
                    tableshop.append({'type':er[0]['shop_code'],'pc_insp':pc_insp,'pc_item':pc_item,'ti':ti,'tj':tj,'pi':pi,'pj':pj,'fi':fi,'fj':fj,'total':str(ti)+'/'+str(tj),'pend':str(pi)+'/'+str(pj),'closed':str(fi)+'/'+str(fj)})

                # ------------------- graphs queries --------------------

                # 1. DRM Wise
                drmwiselst=[]
                drmwisedata=[]
                drmwisedatanon1 = []
                drmwisedatanon2 = []
                countindrm=[]
                countbeydrm=[]
                countmarkdrm = []
                drmwisefulldesig = []

                lstrlc=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level='DRM',designation_code__isnull=False,rly_unit__in=models.railwayLocationMaster.objects.filter(location_type='DIV',parent_location_code__in=models.railwayLocationMaster.objects.filter(rly_unit_code__in=models.Level_Desig.objects.exclude(delete_flag=True).filter(official_email_ID=user).values('rly_unit_id')).values('location_code')).values('rly_unit_code')).values('designation','designation_code').distinct().order_by('designation_code'))

                for i in range(len(lstrlc)):
                    designation= lstrlc[i]['designation']
                    designationcode= lstrlc[i]['designation_code']
                    designation_drm=designation.split("/")[1]
                    
                    das_desig1=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=designationcode).values('designation_code')

                    gdeti=m1.Marked_Officers.objects.filter(item_no__in=m1.Item_details.objects.filter(inspection_no__in=m1.Inspection_details.objects.filter(~Q(status_flag=0),inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six).values('inspection_no')).values('item_no'),marked_to__in=das_desig1).values('item_no').distinct().count()
            
                    gpendi=m1.Marked_Officers.objects.filter(status_flag=1,item_no__in=m1.Item_details.objects.filter(inspection_no__in=m1.Inspection_details.objects.filter((Q(status_flag=1)|Q(status_flag=2)|Q(status_flag=3)),inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six).values('inspection_no')).values('item_no'),marked_to__in=das_desig1).values('item_no').distinct().count()

                    gpendi1=m1.Marked_Officers.objects.filter(status_flag=1,item_no__in=m1.Item_details.objects.filter((Q(target_date__gte=today)|Q(target_date__isnull=True)),inspection_no__in=m1.Inspection_details.objects.filter((Q(status_flag=1)|Q(status_flag=2)|Q(status_flag=3)),inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six).values('inspection_no')).values('item_no'),marked_to__in=das_desig1).values('item_no').distinct().count()
                    
                    gpendi2=gpendi-gpendi1
                
                    # print("drmwise..",das_desig,das_desig1,designation,designationcode,gdeti,gpendi,gpendi1,gpendi2)
                    per=0
                    pernon1=100
                    pernon2=100
                    if gpendi==0:
                        pernon1=0
                        pernon2=0
                    elif gpendi>0:
                        per="{:.2f}".format((gpendi/gdeti)*100)
                        # pernon1="{:.2f}".format(100-((gpendi1/gpendi)*100))
                        pernon1="{:.2f}".format(gpendi1/gdeti*100)
                        pernon2="{:.2f}".format(gpendi2/gdeti*100)
                    pernon1= float(pernon1)
                    pernon2= float(pernon2)

                    drmwisefulldesig.append(designation)
                    drmwiselst.append(designation_drm)
                    drmwisedata.append(per)
                    drmwisedatanon1.append(pernon1)
                    drmwisedatanon2.append(pernon2)
                    countindrm.append(gpendi1)
                    countbeydrm.append(gpendi2)
                    countmarkdrm.append(gdeti)
                    
                # 2. PHOD Wise
                phodwiselst=[]
                phodwisedata=[]
                phodwisedatanon1 = []
                phodwisedatanon2 = []
                countinphod=[]
                countbeyphod=[]
                countmarkphod = []
                phodwisefulldesig = []

                lstrlc=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level='PHOD',designation_code__isnull=False,rly_unit__in=models.Level_Desig.objects.exclude(delete_flag=True).filter(official_email_ID=user).values('rly_unit_id')).values('designation','designation_code').distinct().order_by('designation_code'))

                for i in range(len(lstrlc)):
                    designation=lstrlc[i]['designation']
                    designationcode= lstrlc[i]['designation_code']
                    designation_split=designation.split("/")[0]

                    das_desig1=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=designationcode).values('designation_code')
                    
                
                    gdeti=m1.Marked_Officers.objects.filter(item_no__in=m1.Item_details.objects.filter(inspection_no__in=m1.Inspection_details.objects.filter((~Q(status_flag=0)),inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six).values('inspection_no')).values('item_no'),marked_to__in=das_desig1).values('item_no').distinct().count()
                    

                    gpendi=m1.Marked_Officers.objects.filter(status_flag=1,item_no__in=m1.Item_details.objects.filter(inspection_no__in=m1.Inspection_details.objects.filter((Q(status_flag=1)|Q(status_flag=2)|Q(status_flag=3)),inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six).values('inspection_no')).values('item_no'),marked_to__in=das_desig1).values('item_no').distinct().count()
                    gpendi1=m1.Marked_Officers.objects.filter(status_flag=1,item_no__in=m1.Item_details.objects.filter((Q(target_date__gte=today)|Q(target_date__isnull=True)),inspection_no__in=m1.Inspection_details.objects.filter((Q(status_flag=1)|Q(status_flag=2)|Q(status_flag=3)),inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six).values('inspection_no')).values('item_no'),marked_to__in=das_desig1).values('item_no').distinct().count()
                    

                    
                    gpendi2=gpendi-gpendi1
                    print("phodwise..",designation,designationcode,gdeti,gpendi,gpendi1,gpendi2)
                    per=0
                    pernon1=100
                    pernon2=100
                    if gdeti==0:
                        pernon1=0
                        pernon2=0
                    elif gdeti>0:
                        per="{:.2f}".format((gpendi/gdeti)*100)
                        pernon1="{:.2f}".format(gpendi1/gdeti*100)
                        pernon2="{:.2f}".format(gpendi2/gdeti*100)
                    pernon1= float(pernon1)
                    pernon2= float(pernon2)

                    phodwisefulldesig.append(designation)
                    phodwiselst.append(designation_split)
                    phodwisedata.append(per)
                    phodwisedatanon1.append(pernon1)
                    phodwisedatanon2.append(pernon2)
                    countinphod.append(gpendi1)
                    countbeyphod.append(gpendi2)
                    countmarkphod.append(gdeti)
            
                # 3. BO Wise
                bowiselst=[]
                bowisedata=[]
                bowisedatanon1 = []
                bowisedatanon2 = []
                countinbo=[]
                countbeybo=[]
                countmarkbo = []
                bowisefulldesig = []

                lstrlc=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level='BO',designation_code__isnull=False,rly_unit__in=models.railwayLocationMaster.objects.filter(location_type='DIV',rly_unit_code__in=models.Level_Desig.objects.exclude(delete_flag=True).filter(official_email_ID=user).values('rly_unit_id')).values('rly_unit_code')).values('designation','designation_code').distinct().order_by('designation_code'))

                for i in range(len(lstrlc)):
                    designation= lstrlc[i]['designation']
                    designationcode= lstrlc[i]['designation_code']
                    designation_split=designation.split("/")[0]
                    das_desig1=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=designationcode).values('designation_code')   

                    gdeti=m1.Marked_Officers.objects.filter(item_no__in=m1.Item_details.objects.filter(inspection_no__in=m1.Inspection_details.objects.filter(~(Q(status_flag=0)),inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six).values('inspection_no')).values('item_no'),marked_to__in=das_desig1).count()
            
                    gpendi=m1.Marked_Officers.objects.filter(status_flag=1,item_no__in=m1.Item_details.objects.filter(inspection_no__in=m1.Inspection_details.objects.filter((Q(status_flag=1)|Q(status_flag=2)|Q(status_flag=3)),inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six).values('inspection_no')).values('item_no'),marked_to__in=das_desig1).count()
                    
                    gpendi1=m1.Marked_Officers.objects.filter(status_flag=1,item_no__in=m1.Item_details.objects.filter((Q(target_date__gte=today)|Q(target_date__isnull=True)),inspection_no__in=m1.Inspection_details.objects.filter((Q(status_flag=1)|Q(status_flag=2)|Q(status_flag=3)),inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six).values('inspection_no')).values('item_no'),marked_to__in=das_desig1).count()
                    
                    gpendi2=gpendi-gpendi1
                    per=0
                    pernon1=100
                    pernon2=100
                    if gdeti==0:
                        pernon1=0
                        pernon2=0
                    elif gdeti>0:
                        per="{:.2f}".format((gpendi/gdeti)*100)
                        pernon1="{:.2f}".format(gpendi1/gdeti*100)
                        pernon2="{:.2f}".format(gpendi2/gdeti*100)
                    pernon1= float(pernon1)
                    pernon2= float(pernon2)

                    if '&' in designation:
                        designation=designation.replace('&','%26')

                    bowisefulldesig.append(designation)
                    bowiselst.append(designation_split)
                    bowisedata.append(per)
                    bowisedatanon1.append(pernon1)
                    bowisedatanon2.append(pernon2)
                    countinbo.append(gpendi1)
                    countbeybo.append(gpendi2)
                    countmarkbo.append(gdeti)

                # 3.1 HOD Wise
                hodwiselst=[]
                hodwisedata=[]
                hodwisedatanon1 = []
                hodwisedatanon2 = []
                countinhod=[]
                countbeyhod=[]
                countmarkhod = []
                hodwisefulldesig = []

                lstrlc=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level='HOD',designation_code__isnull=False,rly_unit__in=models.railwayLocationMaster.objects.filter(rly_unit_code__in=models.Level_Desig.objects.exclude(delete_flag=True).filter(official_email_ID=user).values('rly_unit_id')).values('rly_unit_code')).values('designation','designation_code').distinct().order_by('designation_code'))

                for i in range(len(lstrlc)):
                    designation= lstrlc[i]['designation']
                    designationcode= lstrlc[i]['designation_code']
                    designation_split=designation.split("/")[0]
                    das_desig1=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=designationcode).values('designation_code')   

                    gdeti=m1.Marked_Officers.objects.filter(item_no__in=m1.Item_details.objects.filter(inspection_no__in=m1.Inspection_details.objects.filter(~(Q(status_flag=0)),inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six).values('inspection_no')).values('item_no'),marked_to__in=das_desig1).count()
            
                    gpendi=m1.Marked_Officers.objects.filter(status_flag=1,item_no__in=m1.Item_details.objects.filter(inspection_no__in=m1.Inspection_details.objects.filter((Q(status_flag=1)|Q(status_flag=2)|Q(status_flag=3)),inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six).values('inspection_no')).values('item_no'),marked_to__in=das_desig1).count()
                    
                    gpendi1=m1.Marked_Officers.objects.filter(status_flag=1,item_no__in=m1.Item_details.objects.filter((Q(target_date__gte=today)|Q(target_date__isnull=True)),inspection_no__in=m1.Inspection_details.objects.filter((Q(status_flag=1)|Q(status_flag=2)|Q(status_flag=3)),inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six).values('inspection_no')).values('item_no'),marked_to__in=das_desig1).count()
                    
                    gpendi2=gpendi-gpendi1
                    per=0
                    pernon1=100
                    pernon2=100
                    if gdeti==0:
                        pernon1=0
                        pernon2=0
                    elif gdeti>0:
                        per="{:.2f}".format((gpendi/gdeti)*100)
                        pernon1="{:.2f}".format(gpendi1/gdeti*100)
                        pernon2="{:.2f}".format(gpendi2/gdeti*100)
                    pernon1= float(pernon1)
                    pernon2= float(pernon2)

                    if '&' in designation:
                        designation=designation.replace('&','%26')

                    hodwisefulldesig.append(designation)
                    hodwiselst.append(designation_split)
                    hodwisedata.append(per)
                    hodwisedatanon1.append(pernon1)
                    hodwisedatanon2.append(pernon2)
                    countinhod.append(gpendi1)
                    countbeyhod.append(gpendi2)
                    countmarkhod.append(gdeti)


                # 4. Marked User wise
                othwiselstnon = []
                othwisedatanon1=[]
                othwisedatanon2 = []
                countinoth=[]
                countbeyoth=[]
                countmarkoth = []

                lstrlc = list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in = m1.Marked_Officers.objects.filter(item_no__in=m1.Item_details.objects.filter(inspection_no__in=m1.Inspection_details.objects.filter(~Q(status_flag=0),inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six).values('inspection_no')).values('item_no')).values('marked_to')).values('designation','designation_code').distinct().order_by('designation_code'))

                for i in range(len(lstrlc)):
                    designation= lstrlc[i]['designation']
                    designationcode= lstrlc[i]['designation_code']
                    
                    
                    das_desig1=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=designationcode).values('designation_code')

                    gdeti=m1.Marked_Officers.objects.filter(item_no__in=m1.Item_details.objects.filter(inspection_no__in=m1.Inspection_details.objects.filter(~Q(status_flag=0),inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six).values('inspection_no')).values('item_no'),marked_to__in=das_desig1).count()
            
                    gpendi=m1.Marked_Officers.objects.filter(status_flag=1,item_no__in=m1.Item_details.objects.filter(inspection_no__in=m1.Inspection_details.objects.filter((Q(status_flag=1)|Q(status_flag=2)|Q(status_flag=3)),inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six).values('inspection_no')).values('item_no'),marked_to__in=das_desig1).count()

                    gpendi1=m1.Marked_Officers.objects.filter(status_flag=1,item_no__in=m1.Item_details.objects.filter((Q(target_date__gte=today)|Q(target_date__isnull=True)),inspection_no__in=m1.Inspection_details.objects.filter((Q(status_flag=1)|Q(status_flag=2)|Q(status_flag=3)),inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six).values('inspection_no')).values('item_no'),marked_to__in=das_desig1).count()
                    
                    gpendi2=gpendi-gpendi1

                
                    per=0
                    pernon1=100
                    pernon2=100
                    if gdeti==0:
                        pernon1=0
                        pernon2=0
                    elif gdeti>0:
                        per="{:.2f}".format((gpendi/gdeti)*100)
                        # pernon1="{:.2f}".format(100-((gpendi1/gpendi)*100))
                        pernon1="{:.2f}".format(gpendi1/gdeti*100)
                        pernon2="{:.2f}".format(gpendi2/gdeti*100)
                    pernon1= float(pernon1)
                    pernon2= float(pernon2)

                    othwiselstnon.append(designation)
                    othwisedatanon1.append(pernon1)
                    othwisedatanon2.append(pernon2)
                    countinoth.append(gpendi1)
                    countbeyoth.append(gpendi2)
                    countmarkoth.append(gdeti)


                # 5. ADRM Wise
                adrmwiselst = []
                adrmwisedata=[]
                adrmwisedatanon1 = []
                adrmwisedatanon2 = []
                countinadrm=[]
                countbeyadrm=[]
                countmarkadrm = []
                adrmwisefulldesig = []

                lstrlc=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level='PHOD',designation_code__isnull=False,rly_unit__in=models.railwayLocationMaster.objects.filter(location_type='DIV',parent_location_code__in=models.railwayLocationMaster.objects.filter(rly_unit_code__in=models.Level_Desig.objects.exclude(delete_flag=True).filter(official_email_ID=user).values('rly_unit_id')).values('location_code')).values('rly_unit_code')).values('designation','designation_code').distinct().order_by('designation_code'))

                for i in range(len(lstrlc)):
                    designation= lstrlc[i]['designation']
                    designationcode= lstrlc[i]['designation_code']
                    designation_drm=designation.split("ADRM/")[1]
                    print("ADRM Designation........",designation_drm)
                    das_desig1=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=designationcode).values('designation_code')

                    gdeti=m1.Marked_Officers.objects.filter(item_no__in=m1.Item_details.objects.filter(inspection_no__in=m1.Inspection_details.objects.filter(~Q(status_flag=0),inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six).values('inspection_no')).values('item_no'),marked_to__in=das_desig1).count()
            
                    gpendi=m1.Marked_Officers.objects.filter(status_flag=1,item_no__in=m1.Item_details.objects.filter(inspection_no__in=m1.Inspection_details.objects.filter((Q(status_flag=1)|Q(status_flag=2)|Q(status_flag=3)),inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six).values('inspection_no')).values('item_no'),marked_to__in=das_desig1).count()

                    gpendi1=m1.Marked_Officers.objects.filter(status_flag=1,item_no__in=m1.Item_details.objects.filter((Q(target_date__gte=today)|Q(target_date__isnull=True)),inspection_no__in=m1.Inspection_details.objects.filter((Q(status_flag=1)|Q(status_flag=2)|Q(status_flag=3)),inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six).values('inspection_no')).values('item_no'),marked_to__in=das_desig1).count()
                    
                    gpendi2=gpendi-gpendi1
                    per=0
                    pernon1=100
                    pernon2=100
                    if gpendi==0:
                        pernon1=0
                        pernon2=0
                    elif gpendi>0:
                        per="{:.2f}".format((gpendi/gdeti)*100)
                        # pernon1="{:.2f}".format(100-((gpendi1/gpendi)*100))
                        pernon1="{:.2f}".format(gpendi1/gdeti*100)
                        pernon2="{:.2f}".format(gpendi2/gdeti*100)
                    pernon1= float(pernon1)
                    pernon2= float(pernon2)

                    adrmwisefulldesig.append(designation)
                    adrmwiselst.append(designation_drm)
                    adrmwisedata.append(per)
                    adrmwisedatanon1.append(pernon1)
                    adrmwisedatanon2.append(pernon2)
                    countinadrm.append(gpendi1)
                    countbeyadrm.append(gpendi2)
                    countmarkadrm.append(gdeti)


                # 5. Zone wise graph and table
                zonalwiselst=[]
                zonalwisedata=[]
                zonalwiselstrb=[]
                zonalwisedatarb=[]
                zonalwiselstzone=[]
                zonalwisedatazone=[]
                zonalwisedatanon1=[]
                zonalwisedatanon2=[]
                zonalwisedatarbnon2=[]
                zonalwisedatarbnon1=[]
                zonalwisedatazonenon1=[]
                zonalwisedatazonenon2=[]
                countinzonal1=[]
                countbeyzonal1=[]
                countinrb1 = []
                countbeyrb1 = []
                countinzone1 = []
                countbeyzone1 = []

                counttotmarkall = []
                counttotmarkzone = []
                counttotmarkrb = []
                listrb = []

                lstrlc=list(models.railwayLocationMaster.objects.filter(location_type_desc='RAILWAY BOARD').values('location_code','rly_unit_code').distinct().order_by('location_code'))

                for i in range(len(lstrlc)):
                    location_code=lstrlc[i]['location_code']
                    rly_unit_code=lstrlc[i]['rly_unit_code']
                
                    das_desig1=models.Level_Desig.objects.exclude(delete_flag=True).filter((Q(d_level='AM')|Q(d_level='BM')|Q(d_level='PED')),rly_unit=rly_unit_code,designation_code__isnull=False).values('designation_code')

                    das_desig3=models.Level_Desig.objects.exclude(delete_flag=True).filter((Q(d_level='AM')|Q(d_level='BM')),rly_unit=rly_unit_code,designation_code__isnull=False).values('designation','designation_code')
                    
                    listrb.append(das_desig3)

                    gdeti=m1.Marked_Officers.objects.filter(item_no__in=m1.Item_details.objects.filter(inspection_no__in=m1.Inspection_details.objects.filter((~Q(status_flag=0)),inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six).values('inspection_no')).values('item_no'),marked_to__in=das_desig1).count()

                    gpendi=m1.Marked_Officers.objects.filter(status_flag=1,item_no__in=m1.Item_details.objects.filter(inspection_no__in=m1.Inspection_details.objects.filter((Q(status_flag=1)|Q(status_flag=2)|Q(status_flag=3)),inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six).values('inspection_no')).values('item_no'),marked_to__in=das_desig1).count()
                    
                    gpendi1=m1.Marked_Officers.objects.filter(status_flag=1,item_no__in=m1.Item_details.objects.filter((Q(target_date__gte=today)|Q(target_date__isnull=True)),inspection_no__in=m1.Inspection_details.objects.filter((Q(status_flag=1)|Q(status_flag=2)|Q(status_flag=3)),inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six).values('inspection_no')).values('item_no'),marked_to__in=das_desig1).count()
                    
                    
                    gpendi2=gpendi-gpendi1

                    per=0
                    pernon1=100
                    pernon2=100
                    if gdeti==0:
                        pernon1=0
                        pernon2=0
                    elif gdeti>0:
                        per="{:.2f}".format((gpendi/gdeti)*100)
                        pernon1="{:.2f}".format(gpendi1/gdeti*100)
                        pernon2="{:.2f}".format(gpendi2/gdeti*100)
                    pernon1= float(pernon1)
                    pernon2= float(pernon2)
                    countinzonal1.append(gpendi1)
                    countbeyzonal1.append(gpendi2)
                    zonalwisedatanon1.append(pernon1)
                    zonalwisedatanon2.append(pernon2)
                    countinrb1.append(gpendi1)
                    countbeyrb1.append(gpendi2)
                    zonalwisedatarbnon1.append(pernon1)
                    zonalwisedatarbnon2.append(pernon2)
                    zonalwiselst.append(location_code)
                    zonalwisedata.append(per)
                    zonalwiselstrb.append(location_code)
                    zonalwisedatarb.append(per)

                    counttotmarkall.append(gdeti)
                    counttotmarkrb.append(gdeti)

                    
                    ti=m1.Inspection_details.objects.filter(~Q(status_flag=0),inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six,inspection_no__in=m1.Insp_multi_location.objects.filter(type='HQ',item=location_code).values('inspection_no')).count()

                    tj=m1.Item_details.objects.filter(item_no__in=objm,inspection_no__in=m1.Inspection_details.objects.filter(~Q(status_flag=0),inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six,inspection_no__in=m1.Insp_multi_location.objects.filter(type='HQ',item=location_code).values('inspection_no')).values('inspection_no')).count()
                
                    pi=m1.Inspection_details.objects.filter((Q(status_flag=1)|Q(status_flag=2)|Q(status_flag=3)),inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six,inspection_no__in=m1.Insp_multi_location.objects.filter(type='HQ',item=location_code).values('inspection_no')).count()
                    pj=m1.Item_details.objects.filter(item_no__in=objm,inspection_no__in=m1.Inspection_details.objects.filter((Q(status_flag=1)|Q(status_flag=2)|Q(status_flag=3)),inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six,inspection_no__in=m1.Insp_multi_location.objects.filter(type='HQ',item=location_code).values('inspection_no')).values('inspection_no')).count()
                    
                    fi=m1.Inspection_details.objects.filter(status_flag=4,inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six,inspection_no__in=m1.Insp_multi_location.objects.filter(type='HQ',item=location_code).values('inspection_no')).count()
                    fj=m1.Item_details.objects.filter(item_no__in=objm,inspection_no__in=m1.Inspection_details.objects.filter(status_flag=4,inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six,inspection_no__in=m1.Insp_multi_location.objects.filter(type='HQ',item=location_code).values('inspection_no')).values('inspection_no')).count()
                    pc_insp=0
                    pc_item=0
                    if ti!=0 and tj!=0:
                        if (ti-pi)==0:
                            pc_insp=0
                        if (tj-pj)==0:
                            pc_item=0
                        else:
                            pc_insp="{:.0f}".format(((ti-pi)/ti)*100)
                            pc_item="{:.0f}".format(((tj-pj)/tj)*100)
                            #print(pc_insp,pc_item)
                    elif ti==0 or tj==0:
                        pc_insp=0
                        pc_item=0
                    tablea.append({'type':location_code,'ti':ti,'tj':tj,'pi':pi,'pj':pj,'fi':fi,'fj':fj,'pc_insp':pc_insp,'pc_item':pc_item,'replyi':replyi,'replyj':replyj,'total':str(ti)+'/'+str(tj),'pend':str(pi)+'/'+str(pj),'closed':str(fi)+'/'+str(fj)})

                cper1=[]
                cper2=[]
                cinrb=[]
                cbeyrb=[]
                cmarkrb=[]
                listrb=[]
                crbfulldesig=[]

                for i in range(len(das_desig3)):
                    das_desig1=das_desig3[i]['designation_code']
                    designation = das_desig3[i]['designation']
                    designation_split=designation.split("/",1)
                    
                    if len(designation_split)>1:
                        designation_split=designation_split[1]
                    else:
                        designation_split=designation_split[0]
                    
                    gdeti=m1.Marked_Officers.objects.filter(item_no__in=m1.Item_details.objects.filter(inspection_no__in=m1.Inspection_details.objects.filter((~Q(status_flag=0)),inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six).values('inspection_no')).values('item_no'),marked_to=das_desig1).count()

                    gpendi=m1.Marked_Officers.objects.filter(status_flag=1,item_no__in=m1.Item_details.objects.filter(inspection_no__in=m1.Inspection_details.objects.filter((Q(status_flag=1)|Q(status_flag=2)|Q(status_flag=3)),inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six).values('inspection_no'),status_flag=3).values('item_no'),marked_to=das_desig1).count()
                    
                    gpendi1=m1.Marked_Officers.objects.filter(status_flag=1,item_no__in=m1.Item_details.objects.filter((Q(target_date__gte=today)|Q(target_date__isnull=True)),inspection_no__in=m1.Inspection_details.objects.filter((Q(status_flag=1)|Q(status_flag=2)|Q(status_flag=3)),inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six).values('inspection_no')).values('item_no'),marked_to=das_desig1).count()
                    
                    gpendi2=gpendi-gpendi1

                    per=0
                    pernon1=100
                    pernon2=100
                    if gdeti==0:
                        pernon1=0
                        pernon2=0
                    elif gdeti>0:
                        per="{:.2f}".format((gpendi/gdeti)*100)
                        pernon1="{:.2f}".format(gpendi1/gdeti*100)
                        pernon2="{:.2f}".format(gpendi2/gdeti*100)
                    pernon1= float(pernon1)
                    pernon2= float(pernon2)

                    listrb.append(designation_split)
                    cper1.append(pernon1)
                    cper2.append(pernon2)
                    cinrb.append(gpendi)
                    cbeyrb.append(gpendi2)
                    cmarkrb.append(gdeti)
                    crbfulldesig.append(designation)

                lstrlc=list(models.railwayLocationMaster.objects.filter(location_type_desc='HEAD QUATER').values('location_code','rly_unit_code').distinct().order_by('location_code'))

                for i in range(len(lstrlc)):
                    location_code=lstrlc[i]['location_code']
                    rly_unit_code=lstrlc[i]['rly_unit_code']
                
                    das_desig1=models.Level_Desig.objects.exclude(delete_flag=True).filter(rly_unit=rly_unit_code,designation_code__isnull=False,d_level='GM').values('designation_code').distinct()

                    gdeti=m1.Marked_Officers.objects.filter(item_no__in=m1.Item_details.objects.filter(inspection_no__in=m1.Inspection_details.objects.filter((~Q(status_flag=0)),inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six).values('inspection_no')).values('item_no'),marked_to__in=das_desig1).count()

                    gpendi=m1.Marked_Officers.objects.filter(status_flag=1,item_no__in=m1.Item_details.objects.filter(inspection_no__in=m1.Inspection_details.objects.filter((Q(status_flag=1)|Q(status_flag=2)|Q(status_flag=3)),inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six).values('inspection_no')).values('item_no'),marked_to__in=das_desig1).count()
                    
                    gpendi1=m1.Marked_Officers.objects.filter(status_flag=1,item_no__in=m1.Item_details.objects.filter((Q(target_date__gte=today)|Q(target_date__isnull=True)),inspection_no__in=m1.Inspection_details.objects.filter((Q(status_flag=1)|Q(status_flag=2)|Q(status_flag=3)),inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six).values('inspection_no')).values('item_no'),marked_to__in=das_desig1).count()
            

                    print("graph",location_code,rly_unit_code,gdeti,gpendi,gpendi1)
                    gpendi2=gpendi-gpendi1
                    
                    per=0
                    
                    pernon1=100
                    pernon2=100
                    if gdeti==0:
                        pernon1=0
                        pernon2=0
                    elif gdeti>0:
                        per="{:.2f}".format((gpendi/gdeti)*100)
                        pernon1="{:.2f}".format(gpendi1/gdeti*100)
                        pernon2="{:.2f}".format(gpendi2/gdeti*100)

                    pernon1= float(pernon1)
                    pernon2= float(pernon2)
                    countinzonal1.append(gpendi1)
                    countbeyzonal1.append(gpendi2)
                    zonalwisedatanon1.append(pernon1)
                    zonalwisedatanon2.append(pernon2)
                    countinzone1.append(gpendi1)
                    countbeyzone1.append(gpendi2)
                    zonalwisedatazonenon1.append(pernon1)
                    zonalwisedatazonenon2.append(pernon2)
                    
                    zonalwiselst.append(location_code)
                    zonalwisedata.append(per)
                    zonalwiselstzone.append(location_code)
                    zonalwisedatazone.append(per)

                    counttotmarkall.append(gdeti)
                    counttotmarkzone.append(gdeti)

                    ti=m1.Inspection_details.objects.filter(~Q(status_flag=0),inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six,inspection_no__in=m1.Insp_multi_location.objects.filter(type='HQ',item=location_code).values('inspection_no')).count()

                    tj=m1.Item_details.objects.filter(item_no__in=objm,inspection_no__in=m1.Inspection_details.objects.filter(~Q(status_flag=0),inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six,inspection_no__in=m1.Insp_multi_location.objects.filter(type='HQ',item=location_code).values('inspection_no')).values('inspection_no')).count()
                
                    pi=m1.Inspection_details.objects.filter((Q(status_flag=1)|Q(status_flag=2)|Q(status_flag=3)),inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six,inspection_no__in=m1.Insp_multi_location.objects.filter(type='HQ',item=location_code).values('inspection_no')).count()
                    pj=m1.Item_details.objects.filter(item_no__in=objm,inspection_no__in=m1.Inspection_details.objects.filter((Q(status_flag=1)|Q(status_flag=2)|Q(status_flag=3)),inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six,inspection_no__in=m1.Insp_multi_location.objects.filter(type='HQ',item=location_code).values('inspection_no')).values('inspection_no')).count()
                    
                    fi=m1.Inspection_details.objects.filter(status_flag=4,inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six,inspection_no__in=m1.Insp_multi_location.objects.filter(type='HQ',item=location_code).values('inspection_no')).count()
                    fj=m1.Item_details.objects.filter(item_no__in=objm,inspection_no__in=m1.Inspection_details.objects.filter(status_flag=4,inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six,inspection_no__in=m1.Insp_multi_location.objects.filter(type='HQ',item=location_code).values('inspection_no')).values('inspection_no')).count()
                    pc_insp=0
                    pc_item=0
                    if ti!=0 and tj!=0:
                        if (ti-pi)==0:
                            pc_insp=0
                        if (tj-pj)==0:
                            pc_item=0
                        else:
                            pc_insp="{:.0f}".format(((ti-pi)/ti)*100)
                            pc_item="{:.0f}".format(((tj-pj)/tj)*100)
                            #print(pc_insp,pc_item)
                    elif ti==0 or tj==0:
                        pc_insp=0
                        pc_item=0
                    tablea.append({'type':location_code,'ti':ti,'tj':tj,'pi':pi,'pj':pj,'fi':fi,'fj':fj,'pc_insp':pc_insp,'pc_item':pc_item,'replyi':replyi,'replyj':replyj,'total':str(ti)+'/'+str(tj),'pend':str(pi)+'/'+str(pj),'closed':str(fi)+'/'+str(fj)})

                # PU/PSU wise graph and table

                pulst=[]
                pudata=[]
                pulstpu=[]
                pudatapu=[]
                pulstcti=[]
                pudatacti=[]
                pulstpsu=[]
                pudatapsu=[]
                pudatanon1=[]
                pudatanon2=[]
                pudatapunon1=[]
                pudatapunon2=[]
                pudatactinon1=[]
                pudatactinon2=[]
                pudatapsunon1=[]
                pudatapsunon2=[]
                countinpu1=[]
                countbeypu1=[]
                countinpu2 = []
                countbeypu2 = []
                countincti1=[]
                countbeycti1=[]
                countinpsu1=[]
                countbeypsu1=[]

                counttotmarkall1 = []
                counttotmarkpu = []
                counttotmarkcti = []
                counttotmarkpsu = []

                allpufulldesig=[]
                pufulldesig=[]
                ctifulldesig=[]
                psufulldesig=[]

                

                lstrlc=list(models.railwayLocationMaster.objects.filter(Q(location_type_desc='PRODUCTION UNIT')).values('location_code','rly_unit_code').distinct().order_by('location_code'))

                for i in range(len(lstrlc)):
                    location_code=lstrlc[i]['location_code']
                    rly_unit_code=lstrlc[i]['rly_unit_code']
                
                    das_desig1=models.Level_Desig.objects.exclude(delete_flag=True).filter((Q(d_level='GM_PU')|Q(d_level='DG_CTI')),rly_unit=rly_unit_code,designation_code__isnull=False).values('designation_code').distinct()

                    das_designation=list(models.Level_Desig.objects.exclude(delete_flag=True).filter((Q(d_level='GM_PU')|Q(d_level='DG_CTI')),rly_unit=rly_unit_code,designation_code__isnull=False).values('designation'))

                    if das_designation != []:



                        gdeti=m1.Marked_Officers.objects.filter(item_no__in=m1.Item_details.objects.filter(inspection_no__in=m1.Inspection_details.objects.filter(~(Q(status_flag=0)),inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six).values('inspection_no')).values('item_no'),marked_to__in=das_desig1).count()

                        gpendi=m1.Marked_Officers.objects.filter(status_flag=1,item_no__in=m1.Item_details.objects.filter(inspection_no__in=m1.Inspection_details.objects.filter((Q(status_flag=1)|Q(status_flag=2)|Q(status_flag=3)),inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six).values('inspection_no')).values('item_no'),marked_to__in=das_desig1).count()
                        
                        gpendi1=m1.Marked_Officers.objects.filter(status_flag=1,item_no__in=m1.Item_details.objects.filter((Q(target_date__gte=today)|Q(target_date__isnull=True)),inspection_no__in=m1.Inspection_details.objects.filter((Q(status_flag=1)|Q(status_flag=3)|Q(status_flag=2)),inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six).values('inspection_no')).values('item_no'),marked_to__in=das_desig1).count()
                        
                        gpendi2=gpendi-gpendi1
                        
                        per=0
                        pernon1=100
                        pernon2=100
                        if gdeti==0:
                            pernon1=0
                            pernon2=0
                        elif gdeti>0:
                            per="{:.2f}".format((gpendi/gpendi)*100)
                            pernon1="{:.2f}".format(gpendi1/gdeti*100)
                            pernon2="{:.2f}".format(gpendi2/gdeti*100)
                        pernon1= float(pernon1)
                        pernon2= float(pernon2)
                        pudatanon1.append(pernon1)
                        pudatanon2.append(pernon2)
                        countinpu1.append(gpendi1)
                        countbeypu1.append(gpendi2)
                        pudatapunon1.append(pernon1)
                        pudatapunon2.append(pernon2)
                        countinpu2.append(gpendi1)
                        countbeypu2.append(gpendi2)
                        pulst.append(location_code)
                        pudata.append(per)
                        pulstpu.append(location_code)
                        pudatapu.append(per)

                        counttotmarkall1.append(gdeti)
                        counttotmarkpu.append(gdeti)

                        allpufulldesig.append(das_designation[0]['designation'])
                        pufulldesig.append(das_designation[0]['designation'])

                    ti=m1.Inspection_details.objects.filter(~Q(status_flag=0),inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six,inspection_no__in=m1.Insp_multi_location.objects.filter(type='HQ',item=location_code).values('inspection_no')).count()
                    tj=m1.Item_details.objects.filter(item_no__in=objm,inspection_no__in=m1.Inspection_details.objects.filter(~Q(status_flag=0),inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six,inspection_no__in=m1.Insp_multi_location.objects.filter(type='HQ',item=location_code).values('inspection_no')).values('inspection_no')).count()
                
                    pi=m1.Inspection_details.objects.filter((Q(status_flag=1)|Q(status_flag=2)|Q(status_flag=3)),inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six,inspection_no__in=m1.Insp_multi_location.objects.filter(type='HQ',item=location_code).values('inspection_no')).count()
                    pj=m1.Item_details.objects.filter(item_no__in=objm,inspection_no__in=m1.Inspection_details.objects.filter((Q(status_flag=1)|Q(status_flag=2)|Q(status_flag=3)),inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six,inspection_no__in=m1.Insp_multi_location.objects.filter(type='HQ',item=location_code).values('inspection_no')).values('inspection_no')).count()
                    
                    fi=m1.Inspection_details.objects.filter(status_flag=4,inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six,inspection_no__in=m1.Insp_multi_location.objects.filter(type='HQ',item=location_code).values('inspection_no')).count()
                    fj=m1.Item_details.objects.filter(item_no__in=objm,inspection_no__in=m1.Inspection_details.objects.filter(status_flag=4,inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six,inspection_no__in=m1.Insp_multi_location.objects.filter(type='HQ',item=location_code).values('inspection_no')).values('inspection_no')).count()

                    if ti!=0 and tj!=0:
                        if (ti-pi)==0:
                            pc_insp=0
                        if (tj-pj)==0:
                            pc_item=0
                        else:
                            pc_insp="{:.0f}".format(((ti-pi)/ti)*100)
                            pc_item="{:.0f}".format(((tj-pj)/tj)*100)
                    elif ti==0 or tj==0:
                        pc_insp=0
                        pc_item=0
                    
                    tableb.append({'type':location_code,'ti':ti,'tj':tj,'pi':pi,'pj':pj,'fi':fi,'fj':fj,'pc_insp':pc_insp,'pc_item':pc_item,'total':str(ti)+'/'+str(tj),'pend':str(pi)+'/'+str(pj),'closed':str(fi)+'/'+str(fj)})

        
                lstrlc=list(models.railwayLocationMaster.objects.filter(Q(location_type_desc='INSTITUTE')).values('location_code','rly_unit_code').distinct().order_by('location_code'))
                for i in range(len(lstrlc)):
                    location_code=lstrlc[i]['location_code']
                    rly_unit_code=lstrlc[i]['rly_unit_code']
                
                    das_desig1=models.Level_Desig.objects.exclude(delete_flag=True).filter((Q(d_level='GM_PU')|Q(d_level='DG_CTI')),rly_unit=rly_unit_code,designation_code__isnull=False).values('designation_code').distinct()

                    das_designation=list(models.Level_Desig.objects.exclude(delete_flag=True).filter((Q(d_level='GM_PU')|Q(d_level='DG_CTI')),rly_unit=rly_unit_code,designation_code__isnull=False).values('designation'))

                    if das_designation != []:


                        gdeti=m1.Marked_Officers.objects.filter(item_no__in=m1.Item_details.objects.filter(inspection_no__in=m1.Inspection_details.objects.filter(~(Q(status_flag=0)),inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six).values('inspection_no')).values('item_no'),marked_to__in=das_desig1).count()

                        gpendi=m1.Marked_Officers.objects.filter(status_flag=1,item_no__in=m1.Item_details.objects.filter(inspection_no__in=m1.Inspection_details.objects.filter((Q(status_flag=1)|Q(status_flag=2)|Q(status_flag=3)),inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six).values('inspection_no')).values('item_no'),marked_to__in=das_desig1).count()
                        
                        gpendi1=m1.Marked_Officers.objects.filter(status_flag=1,item_no__in=m1.Item_details.objects.filter((Q(target_date__gte=today)|Q(target_date__isnull=True)),inspection_no__in=m1.Inspection_details.objects.filter((Q(status_flag=1)|Q(status_flag=2)|Q(status_flag=3)),inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six).values('inspection_no')).values('item_no'),marked_to__in=das_desig1).count()
                        
                        gpendi2=gpendi-gpendi1
                    
                        per=0
                        pernon1=100
                        pernon2=100
                        if gdeti==0:
                            pernon1=0
                            pernon2=0
                        elif gdeti>0:
                            per="{:.2f}".format((gpendi/gpendi)*100)
                            pernon1="{:.2f}".format(gpendi1/gdeti*100)
                            pernon2="{:.2f}".format(gpendi2/gdeti*100)
                        pernon1= float(pernon1)
                        pernon2= float(pernon2)
                        pudatanon1.append(pernon1)
                        pudatanon2.append(pernon2)
                        countinpu1.append(gpendi1)
                        countbeypu1.append(gpendi2)
                        pudatactinon1.append(pernon1)
                        pudatactinon2.append(pernon2)
                        countincti1.append(gpendi1)
                        countbeycti1.append(gpendi2)
                        pulst.append(location_code)
                        pudata.append(per)
                        pulstcti.append(location_code)
                        pudatacti.append(per)

                        counttotmarkall1.append(gdeti)
                        counttotmarkcti.append(gdeti)

                        allpufulldesig.append(das_designation[0]['designation'])
                        ctifulldesig.append(das_designation[0]['designation'])

                    ti=m1.Inspection_details.objects.filter(~Q(status_flag=0),inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six,inspection_no__in=m1.Insp_multi_location.objects.filter(type='HQ',item=location_code).values('inspection_no')).count()
                    tj=m1.Item_details.objects.filter(item_no__in=objm,inspection_no__in=m1.Inspection_details.objects.filter(~Q(status_flag=0),inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six,inspection_no__in=m1.Insp_multi_location.objects.filter(type='HQ',item=location_code).values('inspection_no')).values('inspection_no')).count()
                
                    pi=m1.Inspection_details.objects.filter((Q(status_flag=1)|Q(status_flag=2)|Q(status_flag=3)),inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six,inspection_no__in=m1.Insp_multi_location.objects.filter(type='HQ',item=location_code).values('inspection_no')).count()
                    pj=m1.Item_details.objects.filter(item_no__in=objm,inspection_no__in=m1.Inspection_details.objects.filter((Q(status_flag=1)|Q(status_flag=2)|Q(status_flag=3)),inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six,inspection_no__in=m1.Insp_multi_location.objects.filter(type='HQ',item=location_code).values('inspection_no')).values('inspection_no')).count()
                    
                    fi=m1.Inspection_details.objects.filter(status_flag=4,inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six,inspection_no__in=m1.Insp_multi_location.objects.filter(type='HQ',item=location_code).values('inspection_no')).count()
                    fj=m1.Item_details.objects.filter(item_no__in=objm,inspection_no__in=m1.Inspection_details.objects.filter(status_flag=4,inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six,inspection_no__in=m1.Insp_multi_location.objects.filter(type='HQ',item=location_code).values('inspection_no')).values('inspection_no')).count()

                    if ti!=0 and tj!=0:
                        if (ti-pi)==0:
                            pc_insp=0
                        if (tj-pj)==0:
                            pc_item=0
                        else:
                            pc_insp="{:.0f}".format(((ti-pi)/ti)*100)
                            pc_item="{:.0f}".format(((tj-pj)/tj)*100)
                    elif ti==0 or tj==0:
                        pc_insp=0
                        pc_item=0
                    
                    tableb.append({'type':location_code,'ti':ti,'tj':tj,'pi':pi,'pj':pj,'fi':fi,'fj':fj,'pc_insp':pc_insp,'pc_item':pc_item,'total':str(ti)+'/'+str(tj),'pend':str(pi)+'/'+str(pj),'closed':str(fi)+'/'+str(fj)})


                lstrlc=list(models.railwayLocationMaster.objects.filter(Q(location_type_desc='PSU')).values('location_code','rly_unit_code').distinct().order_by('location_code'))
                for i in range(len(lstrlc)):
                    location_code=lstrlc[i]['location_code']
                    rly_unit_code=lstrlc[i]['rly_unit_code']
                
                    das_desig1=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level='PSU',rly_unit=rly_unit_code,designation_code__isnull=False).values('designation_code').distinct()

                    das_designation=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level='PSU',rly_unit=rly_unit_code,designation_code__isnull=False).values('designation'))

                    if das_designation != []:


                        gdeti=m1.Marked_Officers.objects.filter(item_no__in=m1.Item_details.objects.filter(inspection_no__in=m1.Inspection_details.objects.filter(~(Q(status_flag=0)),inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six).values('inspection_no')).values('item_no'),marked_to__in=das_desig1).count()

                        gpendi=m1.Marked_Officers.objects.filter(status_flag=1,item_no__in=m1.Item_details.objects.filter(inspection_no__in=m1.Inspection_details.objects.filter((Q(status_flag=1)|Q(status_flag=2)|Q(status_flag=3)),inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six).values('inspection_no')).values('item_no'),marked_to__in=das_desig1).count()
                        
                        gpendi1=m1.Marked_Officers.objects.filter(status_flag=1,item_no__in=m1.Item_details.objects.filter((Q(target_date__gte=today)|Q(target_date__isnull=True)),inspection_no__in=m1.Inspection_details.objects.filter((Q(status_flag=1)|Q(status_flag=2)|Q(status_flag=3)),inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six).values('inspection_no')).values('item_no'),marked_to__in=das_desig1).count()
                        
                        gpendi2=gpendi-gpendi1
                        
                        per=0
                        pernon1=100
                        pernon2=100
                        if gdeti==0:
                            pernon1=0
                            pernon2=0
                        elif gdeti>0:
                            per="{:.2f}".format((gpendi/gpendi)*100)
                            pernon1="{:.2f}".format(gpendi1/gdeti*100)
                            pernon2="{:.2f}".format(gpendi2/gdeti*100)
                        pernon1= float(pernon1)
                        pernon2= float(pernon2)
                        pudatanon1.append(pernon1)
                        pudatanon2.append(pernon2)
                        countinpu1.append(gpendi1)
                        countbeypu1.append(gpendi2)
                        pudatapsunon1.append(pernon1)
                        pudatapsunon2.append(pernon2)
                        countinpsu1.append(gpendi1)
                        countbeypsu1.append(gpendi2)
                        pulst.append(location_code)
                        pudata.append(per)
                        pulstpsu.append(location_code)
                        pudatapsu.append(per)

                        counttotmarkall1.append(gdeti)
                        counttotmarkpsu.append(gdeti)
                        allpufulldesig.append(das_designation[0]['designation'])
                        psufulldesig.append(das_designation[0]['designation'])

                    ti=m1.Inspection_details.objects.filter(~Q(status_flag=0),inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six,inspection_no__in=m1.Insp_multi_location.objects.filter(type='HQ',item=location_code).values('inspection_no')).count()
                    tj=m1.Item_details.objects.filter(item_no__in=objm,inspection_no__in=m1.Inspection_details.objects.filter(~Q(status_flag=0),inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six,inspection_no__in=m1.Insp_multi_location.objects.filter(type='HQ',item=location_code).values('inspection_no')).values('inspection_no')).count()
                
                    pi=m1.Inspection_details.objects.filter((Q(status_flag=1)|Q(status_flag=2)|Q(status_flag=3)),inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six,inspection_no__in=m1.Insp_multi_location.objects.filter(type='HQ',item=location_code).values('inspection_no')).count()
                    pj=m1.Item_details.objects.filter(item_no__in=objm,inspection_no__in=m1.Inspection_details.objects.filter((Q(status_flag=1)|Q(status_flag=2)|Q(status_flag=3)),inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six,inspection_no__in=m1.Insp_multi_location.objects.filter(type='HQ',item=location_code).values('inspection_no')).values('inspection_no')).count()
                    
                    fi=m1.Inspection_details.objects.filter(status_flag=4,inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six,inspection_no__in=m1.Insp_multi_location.objects.filter(type='HQ',item=location_code).values('inspection_no')).count()
                    fj=m1.Item_details.objects.filter(item_no__in=objm,inspection_no__in=m1.Inspection_details.objects.filter(status_flag=4,inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six,inspection_no__in=m1.Insp_multi_location.objects.filter(type='HQ',item=location_code).values('inspection_no')).values('inspection_no')).count()

                    if ti!=0 and tj!=0:
                        if (ti-pi)==0:
                            pc_insp=0
                        if (tj-pj)==0:
                            pc_item=0
                        else:
                            pc_insp="{:.0f}".format(((ti-pi)/ti)*100)
                            pc_item="{:.0f}".format(((tj-pj)/tj)*100)
                    elif ti==0 or tj==0:
                        pc_insp=0
                        pc_item=0
                    
                    tableb.append({'type':location_code,'ti':ti,'tj':tj,'pi':pi,'pj':pj,'fi':fi,'fj':fj,'pc_insp':pc_insp,'pc_item':pc_item,'total':str(ti)+'/'+str(tj),'pend':str(pi)+'/'+str(pj),'closed':str(fi)+'/'+str(fj)})
                rlytotal=0
                rlypend=0
                rlycls=0
                rlyins=''
                das_desig1=models.Level_Desig.objects.exclude(delete_flag=True).filter(rly_unit__in=models.railwayLocationMaster.objects.filter(location_type_desc='HEAD QUATER').values('rly_unit_code'),designation_code__isnull=False,d_level='GM').values('designation_code').distinct()

                rlytotal=m1.Marked_Officers.objects.filter(item_no__in=m1.Item_details.objects.filter(inspection_no__in=m1.Inspection_details.objects.filter(~(Q(status_flag=0)),inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six).values('inspection_no')).values('item_no'),marked_to__in=das_desig1).count()

                rlycls=m1.Marked_Officers.objects.filter(status_flag=3,item_no__in=m1.Item_details.objects.filter(inspection_no__in=m1.Inspection_details.objects.filter(~(Q(status_flag=0)),inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six).values('inspection_no')).values('item_no'),marked_to__in=das_desig1).count()
                rlypend=rlytotal - rlycls
                a=m1.Item_details.objects.filter(item_no__in=m1.Marked_Officers.objects.filter(item_no__in=m1.Item_details.objects.filter(inspection_no__in=m1.Inspection_details.objects.filter(~(Q(status_flag=0)),inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six).values('inspection_no')).values('item_no'),marked_to__in=das_desig1).values('item_no')).values('inspection_no')
                b=a.distinct().count()
                c=a.count()
                rlyins=str(b)+'/'+str(c)


                putotal=0
                rpupend=0
                pucls=0
                puins=''
                das_desig1=models.Level_Desig.objects.exclude(delete_flag=True).filter((Q(d_level='GM_PU')|Q(d_level='DG_CTI')),rly_unit__in=models.railwayLocationMaster.objects.filter(Q(location_type_desc='PRODUCTION UNIT')|Q(location_type_desc='INSTITUTE')).values('rly_unit_code'),designation_code__isnull=False).values('designation_code').distinct()
                putotal=m1.Marked_Officers.objects.filter(item_no__in=m1.Item_details.objects.filter(inspection_no__in=m1.Inspection_details.objects.filter(~(Q(status_flag=0)),inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six).values('inspection_no')).values('item_no'),marked_to__in=das_desig1).count()
                pucls=m1.Marked_Officers.objects.filter(status_flag=3,item_no__in=m1.Item_details.objects.filter(inspection_no__in=m1.Inspection_details.objects.filter(~(Q(status_flag=0)),inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six).values('inspection_no')).values('item_no'),marked_to__in=das_desig1).count()
                pupend=putotal - pucls
                a=m1.Item_details.objects.filter(item_no__in=m1.Marked_Officers.objects.filter(item_no__in=m1.Item_details.objects.filter(inspection_no__in=m1.Inspection_details.objects.filter(~(Q(status_flag=0)),inspection_officer=das_desig,inspected_on__gte=prev,inspected_on__lte=six).values('inspection_no')).values('item_no'),marked_to__in=das_desig1).values('item_no')).values('inspection_no')
                b=a.distinct().count()
                c=a.count()
                puins=str(b)+'/'+str(c)
                

                dol=m4.do_upload.objects.filter(desig_id=das_desig,do_letter_date__gte=prev,do_letter_date__lte=six).values('id','do_letter_date','subject').order_by('-do_letter_date')

                tabledol=[]
                tabledolt=[]

                for i in range(len(dol)):
                    dodate=dol[i]['do_letter_date']
                    dosubject=dol[i]['subject']
                    doid=dol[i]['id']
                    doltotal=m4.do_act.objects.filter(id_upload=doid).count()
                    dolreply=m4.do_act.objects.filter(id_upload=doid,status_flag='False').count()
                    dolreplied=m4.do_act.objects.filter(id_upload=doid,status_flag='True').count()

                    if doltotal!=0:
                        if (doltotal-dolreply)==0:
                            do_total=0
                        else:
                            do_total="{:.0f}".format(((doltotal-dolreply)/doltotal)*100)
                    elif doltotal==0:
                        do_total=0
                    dosubject=dosubject[0:20]+"..."
                    tabledol.append({'dodate':dodate,'dosubject':dosubject,'doltotal':doltotal,'dolreply':dolreply,'do_total':do_total,'doid':doid,'dolreplied':dolreplied})
                    tabledolt=tabledol
                    tabledolt=sorted(tabledolt, key = lambda item: (item['dodate'],item['dosubject']),reverse=True)

                tbllen=len(tabledolt)
                rem=tbllen % 4
                
                if (tabledolt == [] and rem == 0) or (rem != 0):
                    for i in range(rem,4):
                        tabledolt.append({'dodate':'-','dosubject':'-','doltotal':'-','dolreply':'-','do_total':'-','doid':'-','dolreplied':'-'})

                ##########################################

                do_rcvd=list(m4.do_act.objects.filter(desig_id=das_desig).values_list('id_upload',flat=True))
                dol=m4.do_upload.objects.filter(id__in=do_rcvd,do_letter_date__gte=prev,do_letter_date__lte=six).values('id','do_letter_date','subject').order_by('-do_letter_date')
                tabledol1=[]
                tabledolt1=[]

                for i in range(len(dol)):
                    dodate=dol[i]['do_letter_date']
                    dosubject=dol[i]['subject']
                    doid=dol[i]['id']
                    doltotal=m4.do_act.objects.filter(id_upload=doid).count()
                    dolreply=m4.do_act.objects.filter(id_upload=doid,status_flag='False').count()
                    dolreplied=m4.do_act.objects.filter(id_upload=doid,status_flag='True').count()

                    if doltotal!=0:
                        if (doltotal-dolreply)==0:
                            do_total=0
                        else:
                            do_total="{:.0f}".format(((doltotal-dolreply)/doltotal)*100)
                    elif doltotal==0:
                        do_total=0
                    dosubject=dosubject[0:15]+"..."
                    tabledol1.append({'dodate':dodate,'dosubject':dosubject,'doltotal':doltotal,'dolreply':dolreply,'do_total':do_total,'doid':doid,'dolreplied':dolreplied})
                    tabledolt1=tabledol1
                    tabledolt1=sorted(tabledolt1, key = lambda item: (item['dodate'],item['dosubject']),reverse=True)

                tbllen=len(tabledolt1)
                rem=tbllen % 4
                
                if (tabledolt1 == [] and rem == 0) or (rem != 0):
                    for i in range(rem,4):
                        tabledolt1.append({'dodate':'-','dosubject':'-','doltotal':'-','dolreply':'-','do_total':'-','doid':'-','dolreplied':'-'})

                
                # empnox = models.Level_Desig.objects.exclude(delete_flag=True).filter(Q(official_email_ID=request.user) | Q(official_email_ID=request.user.email), empno__isnull=False)
                # if empnox:
                #     empno = empnox[0].empno_id
                #     desig = empnox[0].designation_code
            
                # else:
                #     messages.error(request, 'You are not authorize to create DO letters. Please contact to admin')
                    
                # officers=models.Level_Desig.objects.exclude(delete_flag=True).filter().values('designation', 'designation_code')
            
                # if request.method == 'POST':  
                #             do_letter_no=request.POST.get('do_letter_no')
                #             date111=request.POST.get('date')
                #             if date111:
                #                 new_date = datetime.strptime(date111, '%d-%m-%y').strftime('%Y-%m-%d')
                #             subject=request.POST.get('subject')
                #             action_by= request.POST.get('action_by_test')
                #             copy_to= request.POST.get('copy_to_test')
                #             do_text=request.POST.get('do_text')
                #             if action_by:
                #                 marked_officers=action_by.split(',')
                #                 copy_to=copy_to.split(',')
                #                 if len(do_text)>0:
                #                     do_file=None
                #                 else:
                #                     do_text=None
                #                     do_file=request.FILES['do_file']
                #                 if len(marked_officers[0])>0:
                #                     values=m4.do_upload.objects.create(do_text=do_text, created_by_id = empno, desig_id_id= desig, status_flag=4, do_letter_no = do_letter_no,  do_letter_date=new_date, subject=subject, do_path= do_file, delete_flag=0 )
                #                     for i in marked_officers:
                #                         marked_officers_list = models.Level_Desig.objects.exclude(delete_flag=True).get(designation=i)
                #                         marked_officers_id= m1.empmast.objects.get(empno=(models.Level_Desig.objects.exclude(delete_flag=True).filter(Q(designation = i)).values('empno'))[0]['empno'])
                #                         action= m4.do_act.objects.create(id_upload=values, desig_id=marked_officers_list, status_flag=False,  emp_no = marked_officers_id )  
                #                     if copy_to != ['']:
                #                         for i in copy_to:
                #                             marked_officers_list = models.Level_Desig.objects.exclude(delete_flag=True).get(designation=i)
                #                             m4.do_copy.objects.create(do_upload=values, desig_id=marked_officers_list)    

                #                 else:
                #                     messages.error(request,"upload unsuccessful")

                
                

                mom=m3.Insp_details.objects.filter(mom_officer=das_desig,mom_date__gte=prev,mom_date__lte=six).values('mom_date').order_by('-mom_date')[:4]

                tablemom=[]
                tablemomd=[]

                for i in range(len(mom)):
                    momdate=mom[i]['mom_date']

                    tablemom.append({'momdate':momdate})
                    tablemomd=tablemom
                    tablemomd=sorted(tablemomd, key = lambda item: (item['momdate']),reverse=True)


                # GUNJAN-MOM-CARD
                mom_heading_name='MOM'
                if request.user.user_role == 'guest':
                    mom_desig_details=models.Level_Desig.objects.exclude(delete_flag=True).filter(official_email_ID=request.user.guest_email).values()
                else:
                    mom_desig_details=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=request.user.username) |Q(official_email_ID=request.user.email) | Q(official_email_ID=request.user.guest_email) ).values()

                

                
                if mom_desig_details[0]['d_level']=='CRB' or mom_desig_details[0]['d_level']=='BM' or mom_desig_details[0]['d_level']=='Secy_RB' or mom_desig_details[0]['d_level']=='AM' or mom_desig_details[0]['d_level']=='ED' or mom_desig_details[0]['d_level']=='PED':
                    list_mom_details=[]
                    # list_mom=m3.Insp_details.objects.filter(mom_officer=mom_desig_details[0]['designation_code'],type=0,mom_date__gte=prev,mom_date__lte=six).values('mom_date','insp_no')
                    list_mom=m3.Insp_details.objects.filter(type=0,mom_date__gte=prev,mom_date__lte=six,mom_officer_id=mom_desig_details[0]['designation_code'],status_flag__in=[1,2,3,4]).values().distinct().order_by('-insp_no')

                    mom_heading_name='Board Meetings'
                    for i in list_mom:
                        temp={}
                        temp['meeting_type']='Board Meeings'
                        if(m3.Marked_Members.objects.filter(item_no__insp_no_id=i['insp_no']).exists()):
                            temp['mom_date']=i['mom_date']
                            temp['mom_no']=i['insp_no']
                            temp['total_status']=m3.Marked_Members.objects.filter(item_no__insp_no_id=i['insp_no']).count()
                            temp['reply_status']=m3.Marked_Members.objects.filter(item_no__insp_no_id=i['insp_no'],status_flag=3).count()
                        else:
                            temp['mom_date']=i['mom_date']
                            temp['mom_no']=i['insp_no']
                            temp['total_status']=int(0)
                            temp['reply_status']=int(0)
                        list_mom_details.append(temp)
                    # print(list_mom_details,'GUNJANRAJPUT')
                elif mom_desig_details[0]['d_level']=='GM' or mom_desig_details[0]['d_level']=='PHOD' or mom_desig_details[0]['d_level']=='AGM' or mom_desig_details[0]['d_level']=='Secy_GM':
                    list_mom_details=[]
                    # list_mom=m3.Insp_details.objects.filter(type=1,mom_date__gte=prev,mom_date__lte=six).values('mom_date','insp_no')
                    list_mom=m3.Insp_details.objects.filter(type=1,mom_date__gte=prev,mom_date__lte=six,mom_officer_id=mom_desig_details[0]['designation_code'],status_flag__in=[1,2,3,4]).values().distinct().order_by('-insp_no')
                    for i in list_mom:
                        temp={}
                        temp['meeting_type']=i['meeting_type']
                        if(m3.Marked_Members.objects.filter(item_no__insp_no_id=i['insp_no']).exists()):
                            temp['mom_date']=i['mom_date']
                            temp['mom_no']=i['insp_no']
                            temp['total_status']=m3.Marked_Members.objects.filter(item_no__insp_no_id=i['insp_no']).count()
                            temp['reply_status']=m3.Marked_Members.objects.filter(item_no__insp_no_id=i['insp_no'],status_flag=3).count()
                        else:
                            temp['mom_date']=i['mom_date']
                            temp['total_status']=int(0)
                            temp['reply_status']=int(0)
                        list_mom_details.append(temp)
                    # print(list_mom_details,'GUNJANRAJPUT')
                else:
                    list_mom_details=[]
                    # list_mom=m3.Insp_details.objects.filter(type=2,mom_date__gte=prev,mom_date__lte=six).values('mom_date','insp_no')
                    list_mom=m3.Insp_details.objects.filter(type=2,mom_date__gte=prev,mom_date__lte=six,mom_officer_id=mom_desig_details[0]['designation_code'],status_flag__in=[1,2,3,4]).values().distinct().order_by('-insp_no')

                    for i in list_mom:
                        temp={}
                        temp['meeting_type']=i['meeting_type']
                        if(m3.Marked_Members.objects.filter(item_no__insp_no_id=i['insp_no']).exists()):
                            temp['mom_date']=i['mom_date']
                            temp['mom_no']=i['insp_no']
                            temp['total_status']=m3.Marked_Members.objects.filter(item_no__insp_no_id=i['insp_no']).count()
                            temp['reply_status']=m3.Marked_Members.objects.filter(item_no__insp_no_id=i['insp_no'],status_flag=3).count()
                        else:
                            temp['mom_date']=i['mom_date']
                            temp['mom_no']=i['insp_no']
                            temp['total_status']=int(0)
                            temp['reply_status']=int(0)
                        list_mom_details.append(temp)
                    # print(list_mom_details,'GUNJANRAJPUT')

                mom_recd_dealt_reply=[]
                count=1
                insp_details_mom_recd=m3.Insp_details.objects.filter(mom_date__gte=prev,mom_date__lte=six).values().order_by('insp_no')
                # meeting=m3.meeting_typelist.objects.values('meeting_type').distinct().order_by('meeting_type')
                for i in insp_details_mom_recd:
                        temp={}
                        temp['meeting_type']=i['meeting_type']
                        if(m3.Marked_Members.objects.filter(item_no__insp_no_id=i['insp_no'],marked_to=mom_desig_details[0]['designation_code']).exists()):
                            temp['mom_date']=i['mom_date']
                            temp['mom_no']=i['insp_no']
                            temp['total_status']=m3.Marked_Members.objects.filter(item_no__insp_no_id=i['insp_no'],marked_to=mom_desig_details[0]['designation_code']).count()
                            temp['reply_status']=m3.Marked_Members.objects.filter(item_no__insp_no_id=i['insp_no'],marked_to=mom_desig_details[0]['designation_code'],status_flag=3).count()
                        # else:
                        #     temp['mom_date']=i['mom_date']
                        #     temp['total_status']=int(0)
                        #     temp['reply_status']=int(0)
                            mom_recd_dealt_reply.append(temp)
                # print(mom_recd_dealt_reply,'GUNJANRAJPUT')
                
                

                tbllen=len(list_mom_details)
                rem=tbllen % 4

                if (list_mom_details == [] and rem == 0) or (rem != 0):
                    for i in range(rem,4):
                        list_mom_details.append({'mom_date':'-','reply_status':'-','total_status':'-', 'meeting_type':'-'})


                tbllen=len(mom_recd_dealt_reply)
                rem=tbllen % 4

                if (mom_recd_dealt_reply == [] and rem == 0) or (rem != 0):
                    for i in range(rem,4):
                        mom_recd_dealt_reply.append({'mom_date':'-','reply_status':'-','total_status':'-','meeting_type':'-'})


            #---------- Budget Card ------------------------

            from datetime import date

            cur_yr= date.today().year
            cur_yr=int(cur_yr)-5
            
            for i in range(5):
                budget_list_yr.append(str(cur_yr)[2:4]+"-"+str(cur_yr+1)[2:4])
            
                make_yr=str(cur_yr)+"-"+str(cur_yr+1)[2:4]
                data=m5.budget_para.objects.filter(financial_year=make_yr).values_list('budget_id',flat=True)
                budget=m5.budget_specific_actions.objects.filter(budget_id__in=data,specific_action__isnull=False).values().count()
                dataimplemented=m5.budget_para.objects.filter(financial_year=make_yr,status_flag=3).values_list('budget_id',flat=True)
                budgetimplemented=m5.budget_specific_actions.objects.filter(budget_id__in=dataimplemented,specific_action__isnull=False).values().count()
        
                budget_list_data.append({'display_yr':str(cur_yr)[2:4]+"-"+str(cur_yr+1)[2:4],'make_yr':make_yr,'dataa':budget,'datab':budgetimplemented})
                
                
                cur_yr+=1
            # print("year wise",budget_list_data)
            # -------------- ends --------------------------

            # sorting tables ascending 
            tablea=sorted(tablea, key = lambda item: (item['ti'],item['type']))
            tableb=sorted(tableb, key = lambda item: (item['ti'],item['type']))
            tablec=tablea+tableb
            tablec=sorted(tablec, key = lambda item: (item['ti'],item['tj']),reverse=True)
            tableu=sorted(tableu, key = lambda item: (item['ti'],item['tj']),reverse=True)
            tablesec=sorted(tablesec, key = lambda item: (item['ti'],item['tj']),reverse=True)
            tablerr=sorted(tablerr, key = lambda item: (item['ti'],item['tj']),reverse=True)
            tablerly=sorted(tablerly, key = lambda item: (item['ti'],item['tj']),reverse=True)
            tableshop=sorted(tableshop, key = lambda item: (item['ti'],item['tj']),reverse=True)

            if tableu == []:
                tableu.append({'type':' ','pc_insp':0,'pc_item':0,'ti':0,'tj':0,'pi':0,'pj':0,'fi':0,'fj':0,'total':'0','pend':'0','closed':'0'})
            if tablesec == []:
                tablesec.append({'type':' ','pc_insp':0,'pc_item':0,'ti':0,'tj':0,'pi':0,'pj':0,'fi':0,'fj':0,'total':'0','pend':'0','closed':'0'})
            if tablerr == []:
                tablerr.append({'type':' ','pc_insp':0,'pc_item':0,'ti':0,'tj':0,'pi':0,'pj':0,'fi':0,'fj':0,'total':'0','pend':'0','closed':'0'})
            if tablerly == []:
                tablerly.append({'type':' ','pc_insp':0,'pc_item':0,'ti':0,'tj':0,'pi':0,'pj':0,'fi':0,'fj':0,'total':'0','pend':'0','closed':'0'})
            if tableshop == []:
                tableshop.append({'type':' ','pc_insp':0,'pc_item':0,'ti':0,'tj':0,'pi':0,'pj':0,'fi':0,'fj':0,'total':'0','pend':'0','closed':'0'})
            # print("tableu....",tablerly)
            
            tablep=tabled
            tablep=sorted(tablep, key = lambda item: (item['ti'],item['tj']),reverse=True)

            # calculating fully compliance
            for i in fulli:
                    location = list(m1.Insp_multi_location.objects.filter(inspection_no=i['inspection_no']).values())
                    print(location)
                    
                    insp = m1.Marked_Officers.objects.filter(item_no__inspection_no=i['inspection_no'])
                    over_all = insp.count()
                    remaning = insp.filter(status_flag=3).count()
                    if over_all != 0:
                        persentage  = (remaning/over_all)*100
                        persentage = round(persentage)
                    else:
                        persentage = 0
                    i.update({'location_item': location, 'persentage': persentage})
            fulli1=0
            for i in fulli:
                if i['persentage']==100:
                    fulli1+=1
            # fulli1=len(list(fulli))
            if fulli1+pendi!=0 and fullj+pendj!=0:
                pmy="{:.0f}".format((abs(fulli1/(fulli1+pendi)))*100)
                pitem="{:.0f}".format((abs(fullj/(fullj+pendj)))*100)
            else:
                pmy=0
                pitem=0
            # -------------------------------------
            asgnme=m1.target_compliance.objects.filter(assigned_by_id = das_desig,status_flag__in=[0,1,2,4]).count()
            print(asgnme,'assigned')

            totalasgnme=m1.target_compliance.objects.filter(assigned_by_id = das_desig).count()

            penme=m1.target_compliance.objects.filter(pending_with_id= das_desig,status_flag__in=[0,1,2,4]).count()
            print(penme,'penme')

            totalpenme=m1.target_compliance.objects.filter(pending_with_id = das_desig).count()
            print(totalpenme,'totalpenme')
            context ={
                'asgnme':asgnme,
                'totalasgnme':totalasgnme,
                'penme':penme,
                'totalpenme':totalpenme,
                # 'empname':empname,
                'daterange':daterange,
                'color':color,
                'pulst':pulst,
                'pudata':pudata,
                'deti':deti,
                'detj':detj,
                'totali':totali,
                'totalj':totalj,
                'pendi':pendi,
                'pendj':pendj,
                'fulli':fulli,
                'fulli1':fulli1,
                'fullj':fullj,
                'zonalwiselst':zonalwiselst,
                'zonalwisedata':zonalwisedata,
                'rlytotal':rlytotal,
                'rlypend':rlypend,
                'rlycls':rlycls,
                'rlyins':rlyins,
                'putotal':putotal,
                'rpupend':rpupend,
                'pucls':pucls,
                'puins':puins,
                'tablea':tablea,
                'tableb':tableb,
                'tablec':tablec,
                'tabled':tabled,
                'tablep':tablep,
                'draft':draft,
                'final':final,
                'partial':partial,
                'closed':closed,
                'dless':dless,
                'fless':fless,
                'pless':pless,
                'cless':cless,
                'dmore':dmore,
                'fmore':fmore,
                'pmore':pmore,
                'cmore':cmore,
                'pmy':pmy,
                'pitem':pitem,
                'replyi':replyi,
                'replyj':replyj,

                'pulstpu':pulstpu,
                'pudatapu':pudatapu,
                'pulstcti':pulstcti,
                'pudatacti':pudatacti,
                'pulstpsu':pulstpsu,
                'pudatapsu':pudatapsu,
                'zonalwiselstrb':zonalwiselstrb,
                'zonalwisedatarb':zonalwisedatarb,
                'zonalwiselstzone':zonalwiselstzone,
                'zonalwisedatazone':zonalwisedatazone,

                'das_desig2':das_desig2,
                'drmwiselst':drmwiselst,
                'drmwisedata':drmwisedata,
                'phodwiselst':phodwiselst,
                'phodwisedata':phodwisedata,
                'pendingi':pendingi,
                'pendingj':pendingj,
                'repliedi':repliedi,
                'repliedj':repliedj,
                'dol':dol,
                'do_total':do_total,
                'dodate':dodate,
                'dosubject':dosubject,
                'doltotal':doltotal,
                'dolreply':dolreply,
                'tabledolt':tabledolt,
                'tabledolt1':tabledolt1,
                'doid':doid,
                'dolreplied':dolreplied,
                'officers':officers,
                'setvalue':setvalue,
                'mom':mom,
                'tablemomd':tablemomd,
                'tablemom':tablemom,
                'bowiselst':bowiselst,
                'bowisedata':bowisedata,
                'departwiselst':departwiselst,
                'departwisedata':departwisedata,
                'tableu':tableu,
                'tablesec':tablesec,
                'tablerr':tablerr,
                'tableshop':tableshop,

                'zonalwisedatanon1':zonalwisedatanon1,
                'zonalwisedatanon2':zonalwisedatanon2,
                'zonalwisedatarbnon1':zonalwisedatarbnon1,
                'zonalwisedatarbnon2':zonalwisedatarbnon2,
                'zonalwisedatazonenon1':zonalwisedatazonenon1,
                'zonalwisedatazonenon2':zonalwisedatazonenon2,
                
                'pudatanon1':pudatanon1,
                'pudatanon2':pudatanon2,
                'pudatapunon1':pudatapunon1,
                'pudatapunon2':pudatapunon2,
                'pudatactinon1':pudatactinon1,
                'pudatactinon2':pudatactinon2,
                'pudatapsunon1':pudatapsunon1,
                'pudatapsunon2':pudatapsunon2,
                'countinzonal1':countinzonal1,
                'countbeyzonal1': countbeyzonal1,
                'countinrb1': countinrb1,
                'countbeyrb1':countbeyrb1,
                'countinzone1': countinzone1,
                'countbeyzone1': countbeyzone1,

                'countinpu1': countinpu1,
                'countbeypu1':countbeypu1,
                'countinpu2':countinpu2,
                'countbeypu2':countbeypu2,
                'countincti1':countincti1,
                'countbeycti1':countbeycti1,
                'countinpsu1':countinpsu1,
                'countbeypsu1':countbeypsu1,

                'drmwisedatanon1':drmwisedatanon1,
                'drmwisedatanon2':drmwisedatanon2,
                'countindrm':countindrm,
                'countbeydrm':countbeydrm,

                'phodwisedatanon1':phodwisedatanon1,
                'phodwisedatanon2':phodwisedatanon2,
                'countinphod':countinphod,
                'countbeyphod':countbeyphod,

                'bowisedatanon1':bowisedatanon1,
                'bowisedatanon2':bowisedatanon2,
                'countinbo':countinbo,
                'countbeybo':countbeybo,

                'departwisedatanon1':departwisedatanon1,
                'departwisedatanon2':departwisedatanon2,
                'countindepart':countindepart,
                'countbeydepart':countbeydepart,

                'counttotmarkall':counttotmarkall,
                'counttotmarkzone':counttotmarkzone,
                'counttotmarkrb':counttotmarkrb,

                'counttotmarkall1':counttotmarkall1,
                'counttotmarkpu':counttotmarkpu,
                'counttotmarkcti':counttotmarkcti,
                'counttotmarkpsu':counttotmarkpsu,   

                'countmarkphod':  countmarkphod,
                'countmarkdrm':  countmarkdrm,
                'mom_heading_name':mom_heading_name,
                'list_mom_details':list_mom_details,

                'listrb': listrb,
                'cper1':cper1,
                'cper2':cper2,
                'cinrb':cinrb,
                'cbeyrb':cbeyrb,
                'cmarkrb':cmarkrb,  
                'budget_list_yr':budget_list_yr,
                'budget_list_data':budget_list_data,

                'adrmwiselst':adrmwiselst,
                'adrmwisedata':adrmwisedata,
                'adrmwisedatanon1':adrmwisedatanon1,
                'adrmwisedatanon2':adrmwisedatanon2,
                'countinadrm':countinadrm,
                'countbeyadrm':countbeyadrm,
                'countmarkadrm':countmarkadrm,

                'othwiselstnon':othwiselstnon,
                'othwisedatanon1':othwisedatanon1,
                'othwisedatanon2':othwisedatanon2,
                'countinoth':countinoth,
                'countbeyoth':countbeyoth,
                'countmarkoth':countmarkoth,

                'drmwisefulldesig':drmwisefulldesig,
                'phodwisefulldesig':phodwisefulldesig,
                'bowisefulldesig':bowisefulldesig,
                'countmarkbo':countmarkbo,
                'adrmwisefulldesig':adrmwisefulldesig,

                'allpufulldesig':allpufulldesig,
                'pufulldesig':pufulldesig,
                'ctifulldesig':ctifulldesig,
                'psufulldesig':psufulldesig,


                'crbfulldesig':crbfulldesig,
                'tablerly':tablerly,
                'mom_recd_dealt_reply':mom_recd_dealt_reply,
                'hodwiselst':hodwiselst,
                'hodwisedata':hodwisedata,
                'hodwisedatanon1':hodwisedatanon1,
                'hodwisedatanon2':hodwisedatanon2,
                'countinhod':countinhod,
                'countbeyhod':countbeyhod,
                'countmarkhod':countmarkhod,
                'hodwisefulldesig':hodwisefulldesig,
				


            }

        context=context
        return render(request, 'dash_home.html',context)
    # except Exception as e: 
    #     print(e)
    #     try:
    #         m1.error_Table.objects.create(fun_name="accept_mark_reply_ajax",user_id=request.user,err_details=str(e))
    #     except:
    #         print("Internal Error!!!")
    #     return render(request, "errorspage.html", {})


def chartdata(request):
    try:
        down = int(request.GET.get('down'))
        up = int(request.GET.get('up'))
        mn = request.GET.get('month')
        print(down,up,mn)
        now = datetime.today()
        month='{:02d}'.format(now.month)
        year = '{:02d}'.format(now.year)
        year1 = year[2:4]
        mon=[]
        mon1=[]
        if down>0:
            mn1=datetime.strptime(mn[0:3], '%b').month
            month = str(int(mn1)-1)
            year1=mn[4:6]
            year = '20'+year1
        elif up>0:
            mn1=datetime.strptime(mn[0:3], '%b').month
            month = str(int(mn1)-1)
            year1=str(int(mn[4:6])+1)
            year = '20'+year1
            print(month) 
        j=12
        if int(month)>=6:
            for i in range(0,6):
                temp = datetime.strptime(str(int(month)-i), "%m").strftime("%b")+'-'+year1
                mon1.append('{:02d}'.format(int(month)-i)+'-'+year)
                mon.append(temp)
        else:
            for i in range(0,6):
                if int(month)-i>0:
                    temp = datetime.strptime(str(int(month)-i), "%m").strftime("%b")+'-'+year1
                    mon1.append('{:02d}'.format(int(month)-i)+'-'+year)
                    mon.append(temp)
                else:
                    temp = datetime.strptime(str(j), "%m").strftime("%b")+'-'+str(int(year1)-1)
                    mon1.append('{:02d}'.format(j)+'-'+str(int(year)-1))
                    mon.append(temp)
                    j-=1  
        mon = mon[::-1]
        mon1 = mon1[::-1]
        print(mon1)
        count=[]
        count1=[]
        for k in mon1:
            k1 = k[0:2]
            k2 = k[3:7]
            print(k1,k2)
            t = m1.Inspection_details.objects.filter(inspected_on__month=k1,inspected_on__year=k2).values()
            c1= t.filter(status_flag=1).count()
            c2= t.filter(status_flag=2).count()
            c3= t.filter(status_flag=3).count()
            c4 = t.filter(status_flag=0).count()
            c5 = t.filter(status_flag=None).count()
            draft = c5+c4
            final = c1+c2+c3
            count1.append(final)
            count.append(draft)
        context={
            'count':count,
            'mon':mon,
            'count1':count1,
            'mon1':mon1,
        }
        return JsonResponse(context,safe=False)
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="chartdata",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})
    
def piedata(request):
    try:
        t = m1.Inspection_details.objects.values()
        c1= t.filter(status_flag=1).count()
        c2= t.filter(status_flag=2).count()
        c3= t.filter(status_flag=3).count()
        c4 = t.filter(status_flag=0).count()
        c5 = t.filter(status_flag=None).count()
        dta={}
        draft = c5+c4
        final = c1+c2+c3
        partial = c2
        closed = c3
        pending = c1
        dta['0']=closed
        dta['1']=pending
        dta['2']=partial
        print(dta)
        data8=[]
        data9=[]
        temp=[]
        temp.append("closed")
        temp.append((float(c3)/float(c1+c2+c3))*100)
        data8.append(temp)
        temp=[]
        temp.append("Pending Compliance")
        temp.append(40) #(float(c1)/float(c1+c2+c3))*100
        data8.append(temp)
        temp=[]
        temp.append("Partial Compliance")
        temp.append(60) #(float(c2)/float(c1+c2+c3))*100
        data8.append(temp)
        t = m1.Item_details.objects.values()
        c1= t.filter(status_flag=1).count()
        c2= t.filter(status_flag=2).count()
        c3= t.filter(status_flag=3).count()
        c4 = t.filter(status_flag=0).count()
        c5 = t.filter(status_flag=None).count()
        draft2 = c5+c4
        final2 = c1+c2+c3
        partial2 = c2
        closed2 = c3
        pending2 = c1
        temp=[]
        temp.append('closed')
        temp.append(0)#(float(c3)/float(c1+c2+c3))*100)
        data9.append(temp)
        temp=[]
        temp.append('Pending Compliances')
        temp.append(70)#(float(c1)/float(c1+c2+c3))*100)
        data9.append(temp)
        temp=[]
        temp.append('Partial Compliances')
        temp.append(30)#(float(c2)/float(c1+c2+c3))*100)
        data9.append(temp)
        context ={
            'closed':closed,
            'pending':pending,
            'partial':partial,
            'closed2':closed2,
            'pending2':pending2,
            'partial2':partial2,
            'data8':data8,
            'data9':data9,
            'dta':dta
        }
        return JsonResponse(context,safe=False)
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="piedata",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})
    # AMAN end

#tarun




def inspectionReportReply(request, insp_id):
    # try:
        inspection_no=insp_id 
        ins_title=m1.Inspection_details.objects.filter(inspection_no=insp_id).values()
        item_details1= list(m1.Item_details.objects.filter(inspection_no_id=insp_id).exclude(type='SSH').values().order_by('sl_no'))
        
        
        multi_loc = m1.Insp_multi_location.objects.filter(inspection_no_id=insp_id).values()

        
        for j in item_details1:
            # mrkoffi = {}
            if j['type'] == 'SH':
                mark=m1.Marked_Officers.objects.filter(item_no=j['item_no']).values('reverted_on','marked_to__designation', 'marked_to__empno_id','compliance','reply_on', 'viewed_on' ,'marked_no', 'status_flag','created_on', 'status', 'target_flag','target_date','priority').order_by('marked_no')
                # print(mark, '11111111')
                comp =m1.Marked_Officers.objects.filter(item_no=j['item_no']).count()
                flag =m1.Marked_Officers.objects.filter(item_no=j['item_no'], status_flag=3).count()
                # print(comp, '  hh00000000hh   ',flag)
                if comp > 0:
                    percentage = round((flag / comp)*100)
                else: 
                    percentage = 0
                for a in mark:
                    a.update({'marked_no': a['marked_no']})
                    if a['created_on']:
                        dt1 = datetime.today() - a['created_on']
                        a.update({'days': dt1.days})
                    else:
                        dt1 = 0
                        a.update({'days': dt1})
                    if a['status_flag'] ==3:
                        dt1 = date.today() - a['reply_on']
                        a.update({'days': dt1.days})
                    if a['status_flag'] ==4:
                        dt1 = date.today() - a['reverted_on']
                        a.update({'days': dt1.days})
                    if a['priority'] == 1:
                        a['priority'] = 'On priority'
                    else:
                        a['priority'] = '-'
                    if a['target_flag']:
                        tgt=m1.target_compliance.objects.filter(marked_no_id=a['marked_no']).values('target_date')
                        if tgt.count():
                            tgt_date=datetime.strftime(tgt[0]['target_date'],"%d/%m/%y") if tgt[0]['target_date'] else '-'
                        else:
                            tgt_date = '-'
                        # print(tgt_date)
                        a.update({'tgt_date': tgt_date})
                    else:
                        a.update({'tgt_date': "-"})
                    forwarded_graph=list(m1.Marked_Officers_forward.objects.filter(marked_no=a['marked_no']).values_list('marked_no_forward'))
                    a.update({'forwrd_ofcs': len(forwarded_graph)})

                    
                
                # desig_longdesc1 =''
                # marked_officers1 = ''
                # for x in mark:
                #     #marked=m1.empmast.objects.filter(myuser_id=x['myuser_id_id'])
                #     marked=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=x['marked_to_id'])
                #     print('^^^^^^^^^', marked)
                #     if marked[0].designation:
                #         desig_longdesc1 += marked[0].designation    
                #     marked_officers1 += marked[0].empno_id
                #     print('uuuuuuuuuu', marked[0].designation)
                    
                #     mrkoffi.update({'marked_officers': marked_officers1, 'desig_longdesc': desig_longdesc1})
                j.update({'mrkoffi': mark, 'percentage': percentage})

            elif j['type'] == 'H':
                mark=m1.Marked_Officers.objects.filter(item_no=j['item_no'])
                # print(mark.values(), '00000000')
        #         print('***********', mark)
                comp =m1.Marked_Officers.objects.filter(item_no=j['item_no']).count()
                flag =m1.Marked_Officers.objects.filter(item_no=j['item_no'], status_flag=3).count()
                # print(comp, '  00000000hh   ',flag)
                if comp > 0:
                    percentage = round((flag / comp)*100)
                else: 
                    percentage = 0
                if mark.exists():
                    all_h = mark.values('reverted_on','marked_to__designation','created_on', 'marked_to__empno_id','compliance','reply_on',  'viewed_on','marked_no', 'status_flag', 'status', 'target_flag','priority','target_date').order_by('marked_no')
                    for a in all_h:
                        a.update({'marked_no': a['marked_no']})
                        if a['created_on']:
                            dt1 = datetime.today() - a['created_on']
                            a.update({'days': dt1.days})
                        else:
                            dt1 = 0
                            a.update({'days': dt1})

                        # a.update({'days': dt1.days})
                        if a['status_flag'] ==3:
                            dt1 = date.today() - a['reply_on']
                            a.update({'days': dt1.days})
                        if a['status_flag'] ==4:
                            dt1 = date.today() - a['reverted_on']
                            a.update({'days': dt1.days})

                        if a['priority'] == 1:
                            a['priority'] = 'On priority'
                        else:
                            a['priority'] = '-'
                        if a['target_flag']:
                            tgt=m1.target_compliance.objects.filter(marked_no_id=a['marked_no']).values('target_date')
                            tgt_date=datetime.strftime(tgt[0]['target_date'],"%d/%m/%y") if tgt[0]['target_date'] else '-'
                            a.update({'tgt_date': tgt_date})
                        else:
                            a.update({'tgt_date': "-"})

                        forwarded_graph=list(m1.Marked_Officers_forward.objects.filter(marked_no=a['marked_no']).values_list('marked_no_forward'))
                        a.update({'forwrd_ofcs': len(forwarded_graph)})
                        
                    j.update({'mrkoffi': all_h, 'chk_cts':'YES', 'percentage': percentage})
                    
                    
                else:
                    j.update({'chk_cts':'NO', 'percentage': 0})
        #             
        # 
        # if mark[0].marked_to is not None: 
        #                 print('---------', j['item_no'])
        #                 # mrkoffi = {}
        #                 desig_longdesc1 =''
        #                 marked_officers1 = ''
        #                 for x in mark.values():
        #                     # print('xxxxxxxxx', x['myuser_id_id'])
                            
        #                     des = models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=x['marked_to_id'])
        #                     desig_longdesc1 += des[0].designation+','
        #                     marked_officers1 += des[0].empno_id+','
                        
                            
                        
        #                 mrkoffi.update({'marked_officers': marked_officers1, 'desig_longdesc': desig_longdesc1})
                        
                #         j.update({'mrkoffi': mrkoffi, 'chk_cts':'YES'})
                #     else:
                #         j.update({'mrkoffi': '', 'chk_cts':'YES'})
                # else:
                
                
                # j.update({'chk_cts':'NO'})
            

        # ins_detail[0].update({'item_details1': item_details1})
        # print('00000000', ins_detail)
        # print('$$$$$$$$$$', item_details1)
        # print('mmmmmmmmmmm', mark)
        empnox = models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=request.user)| Q(official_email_ID=request.user.guest_email) | Q(official_email_ID=request.user.email), empno__isnull=False)
        
        if empnox:
            empno = empnox[0].designation_code
            desig = empnox[0].designation
        context={
            'ins_title':ins_title,
            'ins_no':inspection_no,
            'item_details1': item_details1,
            
            'insp_number': insp_id,
            'multi_loc': multi_loc,
            'desig': desig,
            }  
        # print(item_details1)
        
            
        return render(request, 'inspectionReportReply.html', context)
    # except Exception as e: 
    #     try:
    #         m1.error_Table.objects.create(fun_name="inspectionReportReply",user_id=request.user,err_details=str(e))
    #     except:
    #         print("Internal Error!!!")
    #     return render(request, "errorspage.html", {})

def received_compliance_checklist(request):
    try:
        empnox = models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=request.user)| Q(official_email_ID=request.user.guest_email) | Q(official_email_ID=request.user.email), empno__isnull=False)
        if empnox:
            empno = empnox[0].designation_code
            # mydata=list(m1.Inspection_details.objects.filter(status_flag=1).values('inspection_no','inspection_note_no', 'inspection_title','zone','inspected_on','division','dept','location','report_path').order_by('-inspection_no'))
            # print(mydata)
            list3=models.railwayLocationMaster.objects.filter(location_type_desc__in=['DIVISION','WORKSHOP']).values('location_code', 'location_type').order_by('location_code')
            list4=[]
            for i in list3:
                list4.append({'location_code': i['location_code'], 'location_type': i['location_type']})   
            list1=models.railwayLocationMaster.objects.filter(location_type_desc__in=['RAILWAY BOARD', 'PRODUCTION UNIT', 'HEAD QUATER','OFFICE', 'PSU', 'PRODUCTION UNIT', 'INSTITUTE']).values('location_code').order_by('location_code')
            list2=[]
            for i in list1:
                list2.append(i['location_code'])
                
            list5=list(models.departMast.objects.all().values('department_name')) 
            item=[] 
            # print(list5)

            # obj1 = m1.Marked_Officers.objects.filter(status_flag=2, item_no__inspection_no__created_by=request.user).values('item_no__inspection_no').distinct()
            obj1 = m1.Marked_Officers.objects.filter(status_flag=3,item_no__inspection_no__inspection_officer=empno).values('item_no__inspection_no').distinct()
            
            mydata1 =[]
            for i in obj1:
                insp = i['item_no__inspection_no']
                mydata = list(m1.Inspection_details.objects.filter(inspection_no=insp).values())
                location = list(m1.Insp_multi_location.objects.filter(inspection_no=insp).values())
                for j in mydata:
                    j.update({'location_item': location})
                
                
                
                mydata1.extend(mydata)
                print('iiiiiiiiiiiii',  mydata)
                        
            context={
                'Zone':list2 ,
                    'division':list4,
                    'department':list5,
                    'item':item,
                    'mydata': mydata1,
                }

            if request.method == 'POST':
                print('@@@@@@@@@@@@@')
                rly=request.POST.get('zone')
                div=request.POST.get('division')
                dept=request.POST.get('department')
                loc=request.POST.get('loc')
                start_date=request.POST.get('start')
                end_date=request.POST.get('txtDate2')
                get_designation=request.POST.get('get_designation')
                print(rly,div,dept,loc,start_date,end_date,get_designation,"~~~~~~~~~")
                
                
                # mydata=m1.Inspection_details.objects.filter(zone=rly,division=div,dept=dept).values('inspection_no','inspection_note_no', 'inspection_title','inspected_on', 'zone','division','dept','location','report_path').order_by('-inspection_no')
                mydata1 =[]
                for i in obj1:
                    insp = i['item_no__inspection_no']
                    mydata = list(m1.Inspection_details.objects.filter(inspection_no=insp, zone=rly,division=div,dept=dept).values())
                    mydata1.extend(mydata)
                    print('iiiiiiiiiiiii',  mydata)

                context={
                    'Zone':list2 ,
                    'division':list4,
                    'department':list5,
                    'item':item,
                    'mydata': mydata1,
                }
                
                return render(request,"received_compliance_checklist.html",context)
            
            return render(request,"received_compliance_checklist.html",context)
        else:
            messages.error(request, 'You are not authorize to see inspection. Please contact to admin')
            return render(request,"received_compliance_checklist.html")
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="received_compliance_checklist",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})





    
def fetchAccompany(request):
    try:
        if request.method == 'GET' and request.is_ajax():
            desig = request.GET.get('last_val')
            empnumber = request.user.email
            print(empnumber)
            new_str = desig.replace(" ", "/")
            # print(new_str)
            # print('desig', desig, len(desig))
            # exclude(designation_code=empnumber)
            obj = list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation__istartswith=new_str).exclude(official_email_ID=empnumber).values('designation').order_by('designation'))
            # print('obj:', obj)
            return JsonResponse(obj,safe=False)
        return JsonResponse({'success':False},status=400)
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="fetchAccompany",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})



def reciveCompReportReply(request, insp_id):
    try:
        ins_title=m1.Inspection_details.objects.filter(inspection_no=insp_id).values()
        item_details1= list(m1.Item_details.objects.filter(inspection_no_id=insp_id).exclude(type='SSH').values().order_by('sl_no'))
        
        
        multi_loc = m1.Insp_multi_location.objects.filter(inspection_no_id=insp_id).values()

        
        for j in item_details1:
            mrkoffi = {}
            if j['type'] == 'SH':
                mark=m1.Marked_Officers.objects.filter(item_no=j['item_no']).values('marked_to__designation', 'marked_to__empno_id','compliance','reply_on' ,'marked_no', 'status_flag', 'status').order_by('marked_no')
                print(mark, '11111111')
                
                # desig_longdesc1 =''
                # marked_officers1 = ''
                # for x in mark:
                #     #marked=m1.empmast.objects.filter(myuser_id=x['myuser_id_id'])
                #     marked=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=x['marked_to_id'])
                #     print('^^^^^^^^^', marked)
                #     if marked[0].designation:
                #         desig_longdesc1 += marked[0].designation    
                #     marked_officers1 += marked[0].empno_id
                #     print('uuuuuuuuuu', marked[0].designation)
                    
                #     mrkoffi.update({'marked_officers': marked_officers1, 'desig_longdesc': desig_longdesc1})
                j.update({'mrkoffi': mark})

            elif j['type'] == 'H':
                mark=m1.Marked_Officers.objects.filter(item_no=j['item_no'])
                print(mark, '00000000')
        #         print('***********', mark)
                if mark.exists():
                    all_h = mark.values('marked_to__designation', 'marked_to__empno_id','compliance','reply_on' ,'marked_no', 'status_flag', 'status').order_by('marked_no')
                    
                    j.update({'mrkoffi': all_h, 'chk_cts':'YES'})

                else:
                    j.update({'chk_cts':'NO'})
        #             
        # 
        # if mark[0].marked_to is not None: 
        #                 print('---------', j['item_no'])
        #                 # mrkoffi = {}
        #                 desig_longdesc1 =''
        #                 marked_officers1 = ''
        #                 for x in mark.values():
        #                     # print('xxxxxxxxx', x['myuser_id_id'])
                            
        #                     des = models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=x['marked_to_id'])
        #                     desig_longdesc1 += des[0].designation+','
        #                     marked_officers1 += des[0].empno_id+','
                        
                            
                        
        #                 mrkoffi.update({'marked_officers': marked_officers1, 'desig_longdesc': desig_longdesc1})
                        
                #         j.update({'mrkoffi': mrkoffi, 'chk_cts':'YES'})
                #     else:
                #         j.update({'mrkoffi': '', 'chk_cts':'YES'})
                # else:
                
                
                # j.update({'chk_cts':'NO'})
            

        # ins_detail[0].update({'item_details1': item_details1})
        # print('00000000', ins_detail)
        #print('$$$$$$$$$$', item_details1)
        # print('mmmmmmmmmmm', mark)
        empnox = models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=request.user) | Q(official_email_ID=request.user.guest_email) | Q(official_email_ID=request.user.email), empno__isnull=False)
        
        if empnox:
            empno = empnox[0].designation_code
            desig = empnox[0].designation
        context={
            'ins_title':ins_title,
            'item_details1': item_details1,
            
            'insp_number': insp_id,
            'multi_loc': multi_loc,
            'desig': desig,
            }  
            
        return render(request, 'reciveCompReportReply.html', context)
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="reciveCompReportReply",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})


def actionBtnFunction_ajax(request):
    try:
        if request.method == 'GET' or request.is_ajax:
            insp_id = request.GET.get('insp_number')
            mark_officer_id = request.GET.get('mark_officer_id')
            phase = request.GET.get('phase')
            print(insp_id,mark_officer_id,phase)
            if phase == '2':
                obj = list(m2.einsp_marked.objects.exclude(revert=2).filter(id=mark_officer_id).values())
                rem_obj = list(m2.einsp_officers_remark.objects.filter(marked_no=mark_officer_id, status_flag=0).values())
            else:
                item_details1= list(m1.Item_details.objects.filter(inspection_no_id=insp_id).values())
                obj = list(m1.Marked_Officers.objects.filter(marked_no=mark_officer_id).values())
                m1.Marked_Officers.objects.filter()
                m1.Insp_mail_details.objects.filter()
                rem_obj = list(m1.Officers_Remark.objects.filter(marked_no=mark_officer_id, status_flag=0).values())

            context = {
                'obj': obj,
                'rem_obj': rem_obj,
            }
            print(context)
            return JsonResponse(context, safe=False)
        return JsonResponse({'success': False}, status=400)
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="actionBtnFunction_ajax",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})



def save_mark_reply_ajax(request):
    # try:
        if request.method == 'GET' or request.is_ajax:
            # action_option = request.GET.get('action_option')
            mark_id = request.GET.get('mark_num')
            remark_id = request.GET.get('remark_id')
            insp_number = request.GET.get('insp_number')
            phase = request.GET.get('phase')
            if phase == '2':
                obj = m2.einsp_marked.objects.exclude(revert=2).filter(id=mark_id)
                rem_obj = list(m2.einsp_officers_remark.objects.filter(marked_no=mark_id, status_flag=0).values())
                if len(rem_obj):
                    m2.einsp_officers_remark.objects.filter(marked_no=mark_id).update(status_flag=1)
                    m2.einspection_details.objects.filter(einspno=insp_number).update(status=1)
                if obj:
                    m2.einsp_marked.objects.filter(id=mark_id).update(status_flag=1, reject=1)
                    m2.einsp_officers_remark.objects.create(remark=remark_id, marked_desig_id=obj[0].marked_to, status='Reject',reply_on=obj[0].compliance_recieved_on, marked_no=obj[0],reply_received=obj[0].compliance,rejected_on=datetime.now())

            else:
            
                obj = m1.Marked_Officers.objects.filter(marked_no=mark_id)
                if m1.Officers_Remark.objects.filter(marked_no=mark_id).exists():
                    m1.Officers_Remark.objects.filter(marked_no=mark_id).update(status_flag=1)
                itm_id = m1.Marked_Officers.objects.filter(marked_no=mark_id)
                if itm_id:
                    item_no = itm_id[0].item_no_id
                    m1.Item_details.objects.filter(item_no=item_no).update(status_flag=2)
                    m1.Inspection_details.objects.filter(inspection_no=insp_number).update(status_flag=2)
                m1.Officers_Remark.objects.create(remark=remark_id, marked_desig_id=obj[0].marked_to, status='Reject',reply_on=obj[0].reply_on, marked_no=obj[0],reply_received=obj[0].compliance,rejected_on=datetime.now())
                m1.Marked_Officers.objects.filter(marked_no=mark_id).update(status_flag=1, status='R')
            
            return JsonResponse({'success': 'save'}, safe=False)
        return JsonResponse({'success': False}, status=400)
    # except Exception as e: 
    #     try:
    #         m1.error_Table.objects.create(fun_name="save_mark_reply_ajax",user_id=request.user,err_details=str(e))
    #     except:
    #         print("Internal Error!!!")
    #     return render(request, "errorspage.html", {})

def accept_mark_reply_ajax(request):
    try:
        if request.method == 'GET' or request.is_ajax:
            mark_id = request.GET.get('mark_num')
            insp_number = request.GET.get('insp_number')
    
            m1.Marked_Officers.objects.filter(marked_no=mark_id).update(status_flag=3)

            x = m1.Marked_Officers.objects.filter(~Q(status_flag=3), item_no__inspection_no=insp_number)
            if x.count() == 0:
                m1.Inspection_details.objects.filter(inspection_no=insp_number).update(status_flag=4)
                print('yyyyyyyyyyyyyyy')
            
            return JsonResponse({'success': 'save'}, safe=False)
        return JsonResponse({'success': False}, status=400)
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="accept_mark_reply_ajax",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})



def inspReminderSend_ajax(request):
    try:
        if request.method == 'GET' or request.is_ajax:
            insp_id = request.GET.get('insp_number')
            title=list(m1.Inspection_details.objects.filter(inspection_no=insp_id, ).values('inspection_title'))
            ins_detail1=list(m1.Item_details.objects.filter(inspection_no=insp_id, type='SH').values('item_no'))
            officer = []
            send_to = ''
            send_desig = ''
            for i in ins_detail1:
                mrk = m1.Marked_Officers.objects.filter(item_no=i['item_no']).values('marked_to__designation', 'marked_to__empno', 'marked_to__official_email_ID')
                for j in mrk:
                    # print('!!!!!!!!!!!!!!!!!', j)
                    officer.append(j['marked_to__official_email_ID'])
                    if j['marked_to__empno']:
                        send_to += j['marked_to__empno'] + ','
                    if j['marked_to__designation']:
                        send_desig += j['marked_to__designation'] + ','
            #     marked=m1.empmast.objects.filter(myuser_id=mrk[0]['myuser_id_id'])
            #     if marked:
            #         if marked[0].email not in officer:
            #             officer.append(marked[0].email)
            #             send_to += marked[0].empno + ','
            #             if marked[0].desig_longdesc:
            #                 send_desig += marked[0].desig_longdesc + ','
            # print('ssssssssss', officer)
            # print('rrrrrrrrrrrrr', send_to)
            # print('ttttttttttttt', send_desig)
            try:

                To=officer

                subject="Inspection Reminder"
                To.append('kr.abhijeet6235@gmail.com')

                inspection_title = title[0]['inspection_title']
                context = {'title': inspection_title, 'subject': subject}
                    
                InspSendMail(subject, To, context)

                m1.Insp_mail_details.objects.create(subject=subject, body=inspection_title,area='Reminder', inspection_no_id=insp_id, send_to=send_to,send_desig=send_desig)
                messages.success(request, 'Reminder has been send')
                
            except:
                print("error on sending")
                messages.error(
                    request, 'Email send failed. Please Try Again.')  

            return JsonResponse({'data': 'data'}, safe=False)
        return JsonResponse({'success': False}, status=400)

    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="inspReminderSend_ajax",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})

def close_compliance_checklist(request):
    try:
        daterangeselect=request.GET.get('data3')
        
        # mydata=list(m1.Inspection_details.objects.filter(status='Close').values('inspection_no','inspection_note_no', 'inspection_title','zone','inspected_on','division','dept','location','report_path').order_by('-inspection_no'))
        empnox = models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=request.user)| Q(official_email_ID=request.user.guest_email) | Q(official_email_ID=request.user.email), empno__isnull=False)
        if empnox:
            empno = empnox[0].designation_code
        
            # mydata=list(m1.Inspection_details.objects.filter(Q(status_flag=4), inspection_officer=empno).values().order_by('-inspection_no'))
            if daterangeselect not in ['0-3','0-6','0-12','tofrom']:
                mydata=list(m1.Inspection_details.objects.filter(Q(status_flag=4), inspection_officer=empno).values().order_by('-inspection_no'))
            else:
                from dateutil.relativedelta import relativedelta
                if daterangeselect=='0-3':
                    now = datetime.today()
                    six = now
                    prev = now - relativedelta(months=3)
                    prev = prev.date()
                elif daterangeselect=='0-6':
                    now = datetime.today()
                    six = now
                    prev = now - relativedelta(months=6)
                    prev = prev.date()
                elif daterangeselect=='0-12':
                    now = datetime.today()
                    six = now
                    prev = now - relativedelta(months=12)
                    prev = prev.date()
                elif daterangeselect=='tofrom':
                    daterange=request.GET.get('daterange')
                    daterange1=daterange.split('-')
                    date1=daterange1[0].split('/')
                    date2=daterange1[1].split('/')
                    prev='20'+date1[2].strip()+'-'+date1[1].strip()+'-'+date1[0].strip()
                    six='20'+date2[2].strip()+'-'+date2[1].strip()+'-'+date2[0].strip()
                mydata=list(m1.Inspection_details.objects.filter(Q(status_flag=4), inspection_officer=empno,inspected_on__gte=prev,inspected_on__lte=six).values().order_by('-inspection_no'))
            #PHASE 2
            closed = m2.einspection_details.objects.filter(status=4,designation_id=empno,instypeid__isnull=False).all().order_by('-einspno')
            count=len(closed)
            for i in mydata:
                count+=1
                i['sr_no']=count
                location = list(m1.Insp_multi_location.objects.filter(inspection_no=i['inspection_no']).values())
                # print(location)
                
                insp = m1.Marked_Officers.objects.filter(item_no__inspection_no=i['inspection_no'])
                over_all = insp.count()
                remaning = insp.filter(status_flag=3).count()
                if over_all != 0:
                    persentage  = (remaning/over_all)*100
                    persentage = round(persentage)
                else:
                    persentage = 0
                i.update({'location_item': location, 'persentage': persentage})
            
            
            list3=models.railwayLocationMaster.objects.filter(location_type_desc__in=['DIVISION','WORKSHOP']).values('location_code', 'location_type').order_by('location_code')
            list4=[]
            for i in list3:
                list4.append({'location_code': i['location_code'], 'location_type': i['location_type']})
            list1=models.railwayLocationMaster.objects.filter(location_type_desc__in=['RAILWAY BOARD', 'PRODUCTION UNIT', 'HEAD QUATER','OFFICE', 'PSU', 'PRODUCTION UNIT', 'INSTITUTE']).values('location_code').order_by('location_code')
            list2=[]
            for i in list1:
                list2.append(i['location_code'])
                
            list5=list(models.departMast.objects.all().values('department_name')) 
            item=[] 
            # print(list5)
            mydata1=[]
            for i in range(len(mydata)):
                # if mydata[i]['persentage'] == 100:
                mydata1.append(mydata[i])
            print(mydata1)
            context={
                    'Zone':list2 ,
                    'division':list4,
                    'department':list5,
                    'item':item,
                    'mydata': mydata1,
                    'phase2':closed
                }

            if request.method == 'POST':
                # print('@@@@@@@@@@@@@')
                rly=request.POST.get('zone')
                div=request.POST.get('division')
                dept=request.POST.get('department')
                loc=request.POST.get('loc')
                start_date=request.POST.get('start')
                end_date=request.POST.get('txtDate2')
                get_designation=request.POST.get('get_designation')
                # print(rly,div,dept,loc,start_date,end_date,get_designation,"~~~~~~~~~")
                
                
                mydata=m1.Inspection_details.objects.filter(status_flag=4).values('inspection_no','inspection_note_no', 'inspection_title','inspected_on','report_path').order_by('-inspection_no')
                
                context={
                    'Zone':list2 ,
                    'division':list4,
                    'department':list5,
                    'item':item,
                    'mydata': mydata,
                }
                
                return render(request,"close_compliance_checklist.html",context)
            
            return render(request,"close_compliance_checklist.html",context)
        else:
            messages.error(request, 'You are not authorize to see inspection. Please contact to admin')
            return render(request,"close_compliance_checklist.html")
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="close_compliance_checklist",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})
   
def corrigendum_compliance_checklist(request):
    # try:
        empnox = models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=request.user)| Q(official_email_ID=request.user.guest_email) | Q(official_email_ID=request.user.email), empno__isnull=False)
        if empnox:
            empno = empnox[0].designation_code

            list3=models.railwayLocationMaster.objects.filter(location_type_desc__in=['DIVISION','WORKSHOP']).values('location_code', 'location_type').order_by('location_code')
            list4=[]
            for i in list3:
                list4.append({'location_code': i['location_code'], 'location_type': i['location_type']})
            list1=models.railwayLocationMaster.objects.filter(location_type_desc__in=['RAILWAY BOARD', 'PRODUCTION UNIT', 'HEAD QUATER','OFFICE', 'PSU', 'PRODUCTION UNIT', 'INSTITUTE']).values('location_code').order_by('location_code')
            list2=[]
            for i in list1:
                list2.append(i['location_code'])
                
            list5=list(models.departMast.objects.all().values('department_name')) 
            item=[] 
            # print(list5)

            obj1 = m1.Marked_Officers.objects.filter(status_flag=4, item_no__inspection_no__inspection_officer=empno).values_list('item_no__inspection_no', flat=True).distinct()
            print('obj1', obj1)
            mydata =[]
            # for i in obj1:
            #     insp = i['item_no__inspection_no']
            mydata = list(m1.Inspection_details.objects.filter(inspection_no__in=obj1).values())
            
            for j in mydata:
                insp = j['inspection_no']
                location = list(m1.Insp_multi_location.objects.filter(inspection_no=insp).values())
                j.update({'location_item': location})

            counter=len(mydata)
            phase2 = list(m2.einsp_marked.objects.exclude(revert=2).filter(eitemid__einspno__designation_id=empno,status_flag=4, revert=1).values('eitemid__einspno__inspected_on','eitemid_id','created_on','status_flag','created_by','id','compliance','marked_to_id','marked_emp_id','designation_by','target_date','revert','designation','id','eitemid__einspno','eitemid__einspno__inspection_title','eitemid__einspno__instypeid__name','eitemid__einspno__rly_id_id__location_code','eitemid__einspno__div_id_id__location_code','eitemid__einspno__inspection_note_no','eitemid__einspno__designation__designation').distinct('eitemid__einspno'))
            for p in phase2:
                counter+=1
                p['sr_no']=counter
            context={
                'Zone':list2 ,
                    'division':list4,
                    'department':list5,
                    'item':item,
                    'mydata': mydata,
                    'phase2':phase2,
                }
            print(mydata)
            if request.method == 'POST':
                print('@@@@@@@@@@@@@')
                rly=request.POST.get('zone')
                div=request.POST.get('division')
                dept=request.POST.get('department')
                loc=request.POST.get('loc')
                start_date=request.POST.get('start')
                end_date=request.POST.get('txtDate2')
                get_designation=request.POST.get('get_designation')
                print(rly,div,dept,loc,start_date,end_date,get_designation,"~~~~~~~~~")
                
                
                # mydata=m1.Inspection_details.objects.filter(zone=rly,division=div,dept=dept).values('inspection_no','inspection_note_no', 'inspection_title','inspected_on', 'zone','division','dept','location','report_path').order_by('-inspection_no')
                mydata1 =[]
                for i in obj1:
                    insp = i['item_no__inspection_no']
                    mydata = list(m1.Inspection_details.objects.filter(inspection_no=insp, zone=rly,division=div,dept=dept).values())
                    mydata1.extend(mydata)
                    print('iiiiiiiiiiiii',  mydata)

                context={
                    'Zone':list2 ,
                    'division':list4,
                    'department':list5,
                    'item':item,
                    'mydata': mydata1,
                }
                
                return render(request,"corrigendum_compliance_checklist.html",context)
            
            return render(request,"corrigendum_compliance_checklist.html",context)
        else:
            messages.error(request, 'You are not authorize to see inspection. Please contact to admin')
            return render(request,"corrigendum_compliance_checklist.html")
    # except Exception as e: 
    #     try:
    #         m1.error_Table.objects.create(fun_name="corrigendum_compliance_checklist",user_id=request.user,err_details=str(e))
    #     except:
    #         print("Internal Error!!!")
    #     return render(request, "errorspage.html", {})


def corrigendumReportReply(request, insp_id):
    try:
        ins_title=m1.Inspection_details.objects.filter(inspection_no=insp_id).values()
        item_details1= list(m1.Item_details.objects.filter(inspection_no_id=insp_id).exclude(type='SSH').values().order_by('sl_no'))
        
        
        multi_loc = m1.Insp_multi_location.objects.filter(inspection_no_id=insp_id).values()

        
        for j in item_details1:
            # mrkoffi = {}
            if j['type'] == 'SH':
                mark=m1.Marked_Officers.objects.filter(item_no=j['item_no'], status_flag=4).values('marked_to__designation','revert','reverted_on', 'marked_to__empno_id','compliance','reply_on', 'viewed_on' ,'marked_no', 'status_flag','created_on', 'status').order_by('marked_no')
                print(mark, '11111111')
                comp =m1.Marked_Officers.objects.filter(item_no=j['item_no']).count()
                flag =m1.Marked_Officers.objects.filter(item_no=j['item_no'], status_flag=3).count()
                print(comp, '  hh00000000hh   ',flag)
                if comp > 0:
                    percentage = round((flag / comp)*100)
                else: 
                    percentage = 0
                for a in mark:
                    if a['created_on']:
                        dt1 = datetime.today() - a['created_on']
                        a.update({'days': dt1.days})
                    else:
                        dt1 = 0
                        a.update({'days': dt1})


                j.update({'mrkoffi': mark, 'percentage': percentage, })

            elif j['type'] == 'H':
                mark=m1.Marked_Officers.objects.filter(item_no=j['item_no'], status_flag=4)
                print(mark.values(), '00000000')
        #         print('***********', mark)
                comp =m1.Marked_Officers.objects.filter(item_no=j['item_no']).count()
                flag =m1.Marked_Officers.objects.filter(item_no=j['item_no'], status_flag=3).count()
                print(comp, '  00000000hh   ',flag)
                if comp > 0:
                    percentage = round((flag / comp)*100)
                else: 
                    percentage = 0
                if mark.exists():
                    all_h = mark.values('marked_to__designation','created_on','revert','reverted_on', 'marked_to__empno_id','compliance','reply_on',  'viewed_on','marked_no', 'status_flag', 'status').order_by('marked_no')
                    for a in all_h:
                        if a['created_on']:
                            dt1 = datetime.today() - a['created_on']
                            a.update({'days': dt1.days})
                        else:
                            dt1 = 0
                            a.update({'days': dt1})

                        a.update({'days': dt1.days})
                    j.update({'mrkoffi': all_h, 'chk_cts':'YES', 'percentage': percentage})

                else:
                    j.update({'chk_cts':'NO', 'percentage': 0})
    
        print('$$$$$$$$$$', item_details1)
        # print('mmmmmmmmmmm', mark)
        empnox = models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=request.user)| Q(official_email_ID=request.user.guest_email) | Q(official_email_ID=request.user.email), empno__isnull=False)
        all_desig = models.Level_Desig.objects.exclude(delete_flag=True).values().order_by('designation')
        
        if empnox:
            empno = empnox[0].designation_code
            desig = empnox[0].designation
    
        context={
            'ins_title':ins_title,
            'item_details1': item_details1,
            'insp_number': insp_id,
            'multi_loc': multi_loc,
            'desig': desig,
            'all_desig': all_desig,
            # 'zone': zone,
            # 'division': division,
            # 'department': department,
            # 'alldesig': alldesig

            }  
            
        return render(request, 'corrigendumReportReply.html', context)
    
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="corrigendumReportReply",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})







def saveCorrigendumOff(request):
    try:
        if request.method == 'GET' or request.is_ajax:
            desig_code = request.GET.get('new_desig')
            mark_no = request.GET.get('marked_num')
            remark = request.GET.get('remark')
            olddesig = request.GET.get('olddesig')
            
            # emp = m1.empmast.objects.filter(empno=empid)
            
            empnox = models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=request.user)| Q(official_email_ID=request.user.guest_email) | Q(official_email_ID=request.user.email), empno__isnull=False)
            if empnox:
                designation_code = empnox[0].designation_code
                
            desig = models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=desig_code)
            m1.Corrigendum_Report.objects.create(remark=remark,marked_no_id=mark_no, created_by=designation_code, old_value=olddesig, new_value=desig[0].designation)
            # m1.Corrigendum_Report.objects.filter(marked_no=mark_no).update(remark=remark,new_value=desig[0].designation)
            print('[[[[[[[[[[[[[[[[[[[[[[[[[[[')

            m1.Marked_Officers.objects.filter(marked_no=mark_no).update(
                status='R',
                # myuser_id=emp[0].myuser_id,
                marked_to_id=desig_code,
                # item_no=obj[0].item_no
                status_flag=1
                
                )
            
            return JsonResponse({'data': 'saved'}, safe=False)
        return JsonResponse({'success': False}, status=400)
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="saveCorrigendumOff",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})

def corrigendum_data_list(request):
    try:
        obj_all = m1.Corrigendum_Report.objects.all().order_by('-created_on')
        
        context = {
            'obj_all': obj_all
        }
        return render(request, 'corrigendum_data_list.html', context)
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="corrigendum_data_list",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})


def corrigendum_data_Pdf(request, pk):
    try:
        empnox = models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=request.user)| Q(official_email_ID=request.user.guest_email) | Q(official_email_ID=request.user.email))
        if empnox:
            empno = empnox[0].empno_id
            desig = empnox[0].designation
            obj_all = m1.Corrigendum_Report.objects.filter(report_no=pk)
            todaydate = datetime.today()
            context={
                'obj_all': obj_all,
                'desig': desig,
                'todaydate': todaydate
            }
            template_src='corrigendum_data_Pdf.html'
            return render_to_pdf(template_src, context)
        else:
            return HttpResponse('PDF not found 404')
    
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="corrigendum_data_Pdf",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})






def fetch_marked_officers(request):
    try:
        if request.method == 'GET' or request.is_ajax:
            mark_no = request.GET.get('mark')
            phase = request.GET.get('phase')
            if phase == '2':
                obj = list(m2.einsp_marked.objects.exclude(revert=2).filter(id=mark_no).values())
                for i in obj:
                    i.update({'revert': i['compliance']})
            else:
                obj = list(m1.Marked_Officers.objects.filter(marked_no=mark_no).values())

            for i in obj:
                desig = models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i['marked_to_id'])
                i.update({'designation': desig[0].designation})

            
            return JsonResponse(obj, safe=False)
        return JsonResponse({'success': False}, status=400)
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="fetch_marked_officers",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})


    



# def update_email(request):
#     obj = m1.empmast.objects.values()
#     for i in range(len(obj)):
#         email = 'cris'+str(i).zfill(4)+'@cris.itpi'
#         # obx = models.Level_Desig.objects.exclude(delete_flag=True).filter(empno_id=i['username'], official_email_ID__isnull=True).values('official_email_ID')
#         m1.empmast.objects.filter(empno=obj[i]['empno']).update(email=email)
#         # obx = models.Level_Desig.objects.exclude(delete_flag=True).filter(empno_id=i['username'], official_email_ID__isnull=True).values('official_email_ID')
#         # if obx:
#         #     print(i['email'])
#         #     print(obx)
#         #     models.Level_Desig.objects.exclude(delete_flag=True).filter(empno_id=i['username'], official_email_ID__isnull=True).update(official_email_ID=i['email'])
#         # # if models.Level_Desig.objects.exclude(delete_flag=True).filter(empno_id=i['username'])[0].official_email_ID:
#         #     continue
#         # else:
#         #     obx.update(official_email_ID=i['email'])

#     return HttpResponse('success')







### added by vanshika 20/9/22

def fetch_name(request):
    try:
        empid=request.GET.get('empid')
        #print(empid,"i m id")
            
        if(models.HRMS.objects.filter(ipas_employee_id=empid).exists()):
            empf_name=models.HRMS.objects.filter(ipas_employee_id=empid)[0].employee_first_name
            empm_name=models.HRMS.objects.filter(ipas_employee_id=empid)[0].employee_middle_name
            empl_name=models.HRMS.objects.filter(ipas_employee_id=empid)[0].employee_last_name

        
        
        # if(m1.empmast.objects.filter(empno=empid).exists()):
            
        #     empf_name=m1.empmast.objects.filter(empno=empid)[0].empname
        
        #     empm_name=m1.empmast.objects.filter(empno=empid)[0].empmname
        
        #     empl_name=m1.empmast.objects.filter(empno=empid)[0].emplname
    
            if(empm_name==None and empl_name==None):
                name=str(empf_name)
            elif(empm_name==None):
                name=str(empf_name) + " " + str(empl_name)
            elif(empl_name==None):
                name=str(empf_name) + " " + str(empm_name)
            else:
                name=str(empf_name) + " " + str(empm_name) + " " + str(empl_name)
            #print(name) 
            context={
                'name':str(name),
            }
            return JsonResponse(context)
        else:
            bono=[]        
            return JsonResponse(bono,safe = False)
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="fetch_name",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})


def checkifexist(request):
    try:
        email=request.GET.get('email')
        if(models.Level_Desig.objects.exclude(delete_flag=True).filter(official_email_ID=email).exists()):
            bono=[]
        else:
            bono=[1]
        return JsonResponse(bono,safe = False)
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="checkifexist",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})



def fetch_emp(request):
    try:
        email_id=request.GET.get('email_id')
        print(email_id)
            
        if(models.Level_Desig.objects.exclude(delete_flag=True).filter(official_email_ID=email_id).exists()):
            # designation_id=m1.HRMS.objects.filter(empno=emp_id)[0].designation_id
            # designation=models.Designation_Master.objects.filter(designation_master_no=designation_id)[0].designation
            # designation=models.HRMS.objects.filter(ipas_employee_id=emp_id)[0].designation
            # empf_name=models.HRMS.objects.filter(ipas_employee_id=emp_id)[0].employee_first_name
            # empm_name=models.HRMS.objects.filter(ipas_employee_id=emp_id)[0].employee_middle_name
            # empl_name=models.HRMS.objects.filter(ipas_employee_id=emp_id)[0].employee_last_name
            designation=models.Level_Desig.objects.exclude(delete_flag=True).filter(official_email_ID=email_id)[0].designation
            # if(empf_name==None):
            #     name=str(empm_name) + " " + str(empl_name)
            # elif(empm_name==None):
            #     name=str(empf_name) + " " + str(empl_name)
            # elif(empl_name==None):
            #     name=str(empf_name) + " " + str(empm_name)
            
            # rly=models.HRMS.objects.filter(ipas_employee_id=emp_id)[0].current_zone
            # division=models.HRMS.objects.filter(ipas_employee_id=emp_id)[0].current_unit_division
            # email_idd=models.HRMS.objects.filter(ipas_employee_id=emp_id)[0].official_email_id
            
            # desigg=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=designation)[0].designation
            # rly_code=models.railwayLocationMaster.objects.filter(rly_unit_code=rly_id)[0].location_code
            # if div_id!=None:
            #     div_code=models.railwayLocationMaster.objects.filter(rly_unit_code=div_id)[0].location_code
            # else:
            #     div_code=''
            context={
                # 'designation':str(designation),
                # 'empname':str(empname),
                # 'rly_code':str(rly_code),
                # 'div_code':str(div_code),
                # 'desigg':str(desigg),
                # 'email_idd':str(email_idd),
                # 'designation':str(designation),
                # 'rly':str(rly),
                # 'division':str(division),
                # 'email_idd':str(email_idd),
                'designation':str(designation),
            }
            return JsonResponse(context)
        else:
            bono=[]        
            return JsonResponse(bono,safe = False)
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="fetch_emp",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})

def Reset_Details(request):
    try:
        #print('a')
        if request.method == "GET":
            #print('b')
            datefrom=request.GET.get('datefrom')
            #print(datefrom,'datefrom')
            dateto=request.GET.get('dateto')
            #print(dateto,'dateto')
            status=request.GET.get('status')
            #print(status,'status')
            data=list(m1.user_request.objects.filter(requestDate__gte=datefrom,requestDate__lte=dateto,status=status).values())
            #print(data,"hgvhqysvqdyqgwebfryweilBAy")
            return JsonResponse({'data':data},safe=False)
        return JsonResponse({"success":False},status=400)
    except Exception as e:
        try:
            m1.error_Table.objects.create(fun_name="Reset_Details",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        #messages.error(request, 'Error : '+str(e))
        return render(request, "errorspage.html", {})



def show_details(request):
    try:
        if request.method== 'GET':
            #print("2")
            empno=request.GET.get('_id')
            empno=empno.split('@')
            # request_type=request.GET.get('request_type')
            # oldvalue=request.GET.get('oldvalue')
            # newvalue=request.GET.get('newvalue')
            # statuss=request.GET.get('statuss')
            # employeeno=list(m1.user_request.objects.filter(id=empno[1]).values())
            desig=list(m1.email_request.objects.filter(id=empno[1]).values())
            
            # rlyid=models.Level_Desig.objects.exclude(delete_flag=True).filter(official_email_ID=employeeno[0]['empno']).values('rly_unit')
            # if rlyid.count()>0:
            #     rlyid=rlyid[0]['rly_unit']
            # else:
            #     rlyid=None
            # print(empno  )
            # print(empno[0])
            if(empno[0]=='Accept'):
                change=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation=desig[0]['designation']).update(official_email_ID=desig[0]['email'],empno_id=desig[0]['empno'])

                update=m1.email_request.objects.filter(id=empno[1]).update(status='Accepted')
            elif(empno[0]=='Reject'):
                print("enter")
                update=m1.email_request.objects.filter(id=empno[1]).update(status='Rejected')

            context={
                
            }
            return JsonResponse(context,safe=False)
        return JsonResponse({"success":False},status=400)
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="show_details",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})


def signup(request):
    try:
        id=user.objects.filter().order_by('-id')[0].id
        id+=1
        print(id)
        designation=models.Level_Desig.objects.exclude(delete_flag=True).values('designation').order_by('designation').distinct()
        if request.method == "POST":
            submit_form=request.POST.get('submit_form')
           
            if(submit_form=="submit_form"):
                empno=request.POST.get('empno')
                empname=request.POST.get('empname')
                desig=request.POST.get('desig')
                email_id=request.POST.get('email_id')
                password=request.POST.get('password')
                status=request.POST.get('status')
                print('1')
                print(desig)
                # models.Level_Desig.objects.exclude(delete_flag=True).filter(designation=desig).update(status=status,empno_id=empno)
                empvar=models.Level_Desig.objects.exclude(delete_flag=True).filter(empno_id=empno,official_email_ID=email_id)
                statusvar=models.Level_Desig.objects.exclude(delete_flag=True).filter(status=status,official_email_ID=email_id)
                uservar=user.objects.filter(username=email_id)
                obj = models.Level_Desig.objects.exclude(delete_flag=True).filter(empno_id=empno,status='P').values()
                role=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation=desig).values('user_role')[0]['user_role']
                print(obj)
                # if(uservar.exists()):
                #     user.objects.filter(username=email_id).update(first_name=empname,password=password,email=email_id)
                if(not uservar.exists()):
                    user.objects.create_user(first_name=empname,username=email_id,password=password,is_active=True, id=id,email=email_id,user_role=role)

                elif(status=='D' and not models.Level_Desig.objects.exclude(delete_flag=True).filter(empno_id=empno,status='P').exists()):
                    messages.success(request,'Employee is not posted on any primary designation. ')
                elif(status=='D' and models.Level_Desig.objects.exclude(delete_flag=True).filter(empno_id=empno,status='P').exists()):
                    models.Level_Desig.objects.exclude(delete_flag=True).filter(designation=desig).update(status=status,empno_id=empno)
                    user.objects.filter(username=email_id).update(first_name=empname,password=password,email=email_id)
                elif(obj.exists() and status=='P'):
                    models.Level_Desig.objects.exclude(delete_flag=True).filter(empno_id=empno,status='P').update(status='V')
                    models.Level_Desig.objects.exclude(delete_flag=True).filter(designation=desig).update(status=status,empno_id=empno)
                    user.objects.filter(username=email_id).update(first_name=empname,password=password,email=email_id)
                elif(uservar.exists() and not empvar.exists() and not statusvar.exists()):
                    models.Level_Desig.objects.exclude(delete_flag=True).filter(designation=desig).update(status=status,empno_id=empno)
                    user.objects.filter(username=email_id).update(first_name=empname,password=password,email=email_id)
                    # messages.success(request,'User Already Exists.')
                elif(uservar.exists() and statusvar.exists() and not empvar.exists()):
                    models.Level_Desig.objects.exclude(delete_flag=True).filter(designation=desig).update(empno_id=empno)
                    user.objects.filter(username=email_id).update(password=password)
                elif(uservar.exists() and empvar.exists() and not statusvar.exists()):
                    models.Level_Desig.objects.exclude(delete_flag=True).filter(designation=desig).update(status=status)
                    user.objects.filter(username=email_id).update(password=password)
                elif(uservar.exists() and empvar.exists() and statusvar.exists()):
                    messages.success(request,'You are already registered.Use your login credentials')
                    #add forgot password
                else:    
                    print(empname,email_id)
                    id=user.objects.filter().order_by('-id')[0].id
                    id+=1
                    empno=request.POST.get('empno')
                    #update in level desig
                    user.objects.create_user(first_name=empname,username=email_id,password=password, id=id,email=email_id)
                    print('hlo')
                    # if(user.objects.filter(first_name=empname,username=empno).exists()):
                    #     myuser_id=user.objects.filter(first_name=empname,username=empno)[0].id
                    # print(myuser_id,'___________-')

            if(submit_form=="register"):
                employeeno=request.POST.get('employeeno')
                designation=request.POST.get('designation')
                emailid = request.POST.get('emailid')
                if m1.email_request.objects.filter(designation=designation).exists():
                    messages.error(request,"Registration request for this designation has already been raised")
                else:
                    desig=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation=designation).values('designation_code')
                    if m1.empmast.objects.filter(empno=employeeno).exists():
                        railway=m1.empmast.objects.filter(empno=employeeno).values('rly_id')[0]['rly_id']

                    else:
                        railway = ''
                
                    if railway != '':
                        railway=models.railwayLocationMaster.objects.get(rly_unit_code=railway)
                    else:
                        railway = None
                    # update=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation=designation).update(official_email_ID=emailid,empno_id=employeeno)
                    file=request.POST.get('img')
                    if file != '':
                        file=request.FILES['img']
                    else:
                        file=None
                    # models.file.objects.create(document=file,desig_code_id=desig)
                    if m1.email_request.objects.filter(email=emailid).exists():
                        messages.error(request,"Request for this email Id is already sent")
                    else:    
                        m1.email_request.objects.create(rly_id=railway,empno=employeeno,designation=designation,email=emailid,requestDate=datetime.today(),file=file,status='Pending')

                        messages.success(request,'Your request has been sent to concerned Admin')
 
        context={
            'designation':designation,
        }
        return render(request,"signup.html",context)
        
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="signup",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})



# def email_request(request):
#     status=request.POST.get('status')
#     # lst=m1.email_request.objects.all()
#     _email=request.user.username
#     print('hhhhhhhhhh           ',_email)
#     rlyid=models.AdminMaster.objects.filter(user_id=_email).values('rly_id')
#     if rlyid.count()>0:
#         rlyid=rlyid[0]['rly_id']
#     else:
#         rlyid=None
#     lst=m1.email_request.objects.filter(rly_id=rlyid).all()
#     print(rlyid)
   
#     context={'lst':lst,}
#     return render(request,"emailrequest.html",context)


def email_request(request):
    try:
        status=request.POST.get('status')
        # lst=m1.email_request.objects.all()
        _email=request.user.username
        print('hhhhhhhhhh           ',_email)
        if m1.email_request.objects.filter(rly_id=None).exists() and _email=='111111':
            lst=m1.email_request.objects.filter(rly_id=None).all()
        else:
            rlyid=models.AdminMaster.objects.filter(user_id=_email).values('rly_id')
            if rlyid.count()>0:
                rlyid=rlyid[0]['rly_id']
            else:
                rlyid=None
            lst=m1.email_request.objects.filter(rly_id=rlyid).all()
            print(rlyid)
        
        context={'lst':lst,}
        return render(request,"emailrequest.html",context)
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="email_request",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})


def send_otp1(request):
    try:
        if request.method == 'GET':
            email=request.GET.get("email")
            otp=generateOTP()
            htmlgen = 'Your OTP is '+otp
            # send_mail(
            #             'OTP request', #subject
            #              htmlgen, #message body
            #             'mfgcris@cris.org.in', # from email
            #             [email], fail_silently=False, #to email
                    
            #         )
            return JsonResponse({'otp':otp}, safe = False)
        return JsonResponse({}, safe = False)
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="send_otp1",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})





######  help menu shubham 20/09
def help_menu(request):
    try:
        context={}
        return render(request, "Help_Menu/help_menu.html")
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="help_menu",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})

def help_menu_videos(request):
    try:
        context={}
        return render(request, "Help_Menu/help_menu_videos.html")
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="help_menu_videos",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})


#tarun otp


def saveByOtp_ajax(request):
    try:
        if request.method == 'GET' and request.is_ajax():
            newotp = generateOTP()
            print('saved otp===>', newotp, request.user.id, datetime.now())
            # now = datetime.now()
            now= datetime.now() + timedelta(minutes=3)
            m1.MyUser.objects.filter(id=request.user.id).update(otp_created_on=now, otp=newotp)
            # var='12345678asd'
            # message="Successfully registered with Username: "+var+" and Password: "+var+" CRIS/RKVY"
            # sms(phoneno,message)
            timer_count = 180 #for 3 minitus

            return JsonResponse({'timer': timer_count, 'newotp': newotp}, safe = False)
        return JsonResponse({'success': False}, status=404)
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="saveByOtp_ajax",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})


def verify_my_otp_ajax(request):
    try:
        if request.method == 'POST' and request.is_ajax():
            newotp = request.POST.get('myotp')
            dte=datetime.now()
            print(dte)
            x = m1.MyUser.objects.filter(id=request.user.id)
            # print(type(newotp))
            # print(x[0].otp_created_on, ':----')
            # print(x[0].otp_created_on >= dte)

            if int(newotp) == x[0].otp and x[0].otp_created_on >= dte:
                ret = 'True'
            else:
                ret='False'

    
            return JsonResponse({'ret': ret}, safe = False)
        return JsonResponse({'success': False}, status=404)
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="verify_my_otp_ajax",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})


def delete_inspection_ajax(request):
    try:
        if request.method == 'GET' and request.is_ajax():
            insp_id = request.GET.get('insp_id')
            
            if m1.Inspection_details.objects.filter(inspection_no=insp_id).exists():
                m1.Inspection_details.objects.filter(inspection_no=insp_id).delete()
                m1.Item_details.objects.filter(inspection_no=insp_id).delete()

            return JsonResponse({'success': 'del'}, safe = False)
        return JsonResponse({'success': False}, status=404)
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="delete_inspection_ajax",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})


#=======================Inspection schedule starts here  ================================================

#=======================SIDHI JAIN START ================================================

def deletionFunction(request):
    try:
        if request.method == 'GET':
            event_id = request.GET.get('event_id')
            
            if m1.Events.objects.filter(event_id=event_id).exists():
                m1.Events.objects.filter(event_id=event_id).delete()
                
            return JsonResponse({'success': 'del'}, safe = False)
        return JsonResponse({'success': False}, status=404)
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="deletionFunction",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})     
 
def updatedraft(request):
    try:
 
        if request.method=='POST' and request.is_ajax():
            
            all_data = json.loads(request.POST.get('my_data'))
            print(all_data)
            event_id = request.POST.get('event_id')
            event_title=request.POST.get('event')
            email=request.user.username
            print(email)
            description=request.POST.get('description')
            print('abcdef',event_id, event_title, description)
            
            m1.Events.objects.filter(event_id=event_id).update(event_title=event_title,description=description)
 
            print("Data saved successfully in table1", all_data)
            # maxevent=list(m1.Events.objects.values('event_id').order_by('-event_id'))
            # maxevent=m1.Events.objects.get(event_id=maxevent[0]['event_id'])
            # maxact=list(m1.Event_activty.objects.values('activity_id').order_by('-activity_id'))
            
            
 
            # m1.Event_activty.objects.filter(event_id=event_id).update(Railways_act=i['zone'],Division_act=i['division'],location3_act=i['location'],date_to_act=dt,event_id=event_id)
                
            objec = m1.Event_activty.objects.filter(event_id=event_id)
            if objec.exists():
                objec.delete()
                for i in all_data:
                    print('aaaaaaaaaaaaa',i)
                    if i['date']:
        
                        dt = datetime.strptime(i['date'], '%d/%m/%y').strftime('%Y-%m-%d')
                    else:
                        dt = None
                    m1.Event_activty.objects.create(Railways_act=i['zone'],Division_act=i['division'],location3_act=i['location'],date_to_act=dt,event_id_id=event_id,created_by=email,status=1)
                    
                    maxact=m1.Event_activty.objects.last()
                    markeofficer=i['markeofficer']
                    
                    #print('999999', maxact)
                    if markeofficer:
                        m11=markeofficer.split(',')
                        for j in m11:
                            print('666', j)
                            m1.schedule_marked1.objects.create(marked_to_id=j,event_id_id=event_id,act_id_id= maxact.activity_id)
                
                    # markeofficer=i['markeofficer']
                # maxact=m1.Event_activty.objects.last()
                # print('999999', maxact)
                # if markeofficer:
                #     m11=markeofficer.split(',')
                #     for j in m11:
                #         print('666', j)
                #         m1.schedule_marked1.objects.filter(event_id=event_id).update(marked_to_id=j,event_id=maxevent,act_id_id= maxact.activity_id)
            return JsonResponse({"success":True},safe=False)
        return JsonResponse({"success":False},status=404)
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="updatedraft",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})


def savedraft(request):
 
    try:
        if request.method=='POST' and request.is_ajax():
            
            all_data = json.loads(request.POST.get('my_data'))
            print(all_data)
            event_id = request.POST.get('event_id')
            event_title=request.POST.get('event')
            email=request.user.username
            print(email)
            description=request.POST.get('description')
            print('abcdef',event_id, event_title, description)
            
            m1.Events.objects.filter(event_id=event_id).update(event_title=event_title,description=description,status=0)
 
            print("Data saved successfully in table1", all_data)
            # maxevent=list(m1.Events.objects.values('event_id').order_by('-event_id'))
            # maxevent=m1.Events.objects.get(event_id=maxevent[0]['event_id'])
            # maxact=list(m1.Event_activty.objects.values('activity_id').order_by('-activity_id'))
            
            
 
                # m1.Event_activty.objects.filter(event_id=event_id).update(Railways_act=i['zone'],Division_act=i['division'],location3_act=i['location'],date_to_act=dt,event_id=event_id)
                
            objec = m1.Event_activty.objects.filter(event_id=event_id)
            if objec.exists():
                objec.delete()
                for i in all_data:
                    print('aaaaaaaaaaaaa',i)
                    if i['date']:
        
                        dt = datetime.strptime(i['date'], '%d/%m/%y').strftime('%Y-%m-%d')
                    else:
                        dt = None
                    m1.Event_activty.objects.create(Railways_act=i['zone'],Division_act=i['division'],location3_act=i['location'],date_to_act=dt,event_id_id=event_id,created_by=email,status=0)
                    markeofficer=i['markeofficer']
                    maxact=m1.Event_activty.objects.last()
                    #print('999999', maxact)
                    if markeofficer:
                        m11=markeofficer.split(',')
                        for j in m11:
                            #print('666', j)
                            m1.schedule_marked1.objects.create(marked_to_id=j,event_id_id=event_id,act_id_id= maxact.activity_id)
                
                    # markeofficer=i['markeofficer']
                # maxact=m1.Event_activty.objects.last()
                # print('999999', maxact)
                # if markeofficer:
                #     m11=markeofficer.split(',')
                #     for j in m11:
                #         print('666', j)
                #         m1.schedule_marked1.objects.filter(event_id=event_id).update(marked_to_id=j,event_id=maxevent,act_id_id= maxact.activity_id)
            return JsonResponse({"success":True},safe=False)
        return JsonResponse({"success":False},status=404)
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="savedraft",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})
 
# def saveDraftData(request):
#     try:
#         if request.method=='POST' and request.is_ajax():
            
#             all_data = json.loads(request.POST.get('my_data'))
#             email=request.user.username
#             print(email)
            
#             event_title=request.POST.get('event')
            
#             description=request.POST.get('description')
#             print(event_title, description)
            
            
#             m1.Events.objects.create(event_title=event_title,description=description,created_by=email,status=1)
#             print("Data saved successfully in table1", all_data)
#             maxevent=list(m1.Events.objects.values('event_id').order_by('-event_id'))
#             maxevent=m1.Events.objects.get(event_id=maxevent[0]['event_id'])
#             maxact=list(m1.Event_activty.objects.values('activity_id').order_by('-activity_id'))
            
#             for i in all_data:
#                 print(i)
#                 if i['date']:
    
#                     dt = datetime.strptime(i['date'], '%d/%m/%y').strftime('%Y-%m-%d')
#                 else:
#                     dt = None
#                 m1.Event_activty.objects.create(Railways_act=i['zone'],Division_act=i['division'],location3_act=i['location'],date_to_act=dt,event_id=maxevent,status=1,created_by=email)
#                 markeofficer=i['markeofficer']
#                 maxact=m1.Event_activty.objects.last()
#                 print('999999', maxact)
#                 if markeofficer:
#                     m11=markeofficer.split(',')
#                     for j in m11:
#                         print('666', j)
#                         m1.schedule_marked1.objects.create(marked_to_id=j,event_id=maxevent,act_id_id= maxact.activity_id)
        
#             print("Data saved successfully in table2")
        
#             print("Data saved successfully in table") 
 
        
#             return JsonResponse({"success":True},safe=False)
#         return JsonResponse({"success":False},status=404)
#     except Exception as e: 
#         try:
#             m1.error_Table.objects.create(fun_name="saveDraftData",user_id=request.user,err_details=str(e))
#         except:
#             print("Internal Error!!!")
#         return render(request, "errorspage.html", {})    
 
def draftschedule(request): 
    try:
        list2=m1.Events.objects.filter( status=1).values().order_by('-event_id')
        for i in list2:
            # print(i['event_id'])
            list1=m1.Event_activty.objects.filter(event_id_id=i['event_id'], status=1).values()
            i.update({'list1': list1})
        # print(list2)
        return render(request, "draftschedule.html",{'list2':list2})
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="draftschedule",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})   


def Showpdf(request):
    try:
        email=request.user.username
        print(email)
        
        donor=list(m1.Event_activty.objects.filter(created_by=email,delete_flag=False,date_to_act__gte=datetime.today().strftime("%Y-%m-%d")).values().order_by('date_to_act'))
        list1=list(m1.Events.objects.filter(delete_flag=False).values())
    
        for i in range(len(donor)):
            dat=''
            if donor[i]['date_to_act'] is not None:
                cd=datetime.today().strftime("%d/%m/%y")
                dat=donor[i]['date_to_act'].strftime('%d-%m-%y')
                for j in range(len(list1)):
                    if donor[i]['event_id_id']==list1[j]['event_id'] :
                        donor[i].update({'event':list1[j]['event_title'], 'description':list1[j]['description']})
                    
            else:
                donor[i].update({'event':'-', 'description':'-'})
            donor[i].update({'date_to_act':dat})
            obj2 = list(m1.schedule_marked1.objects.filter(act_id=donor[i]['activity_id']).values('marked_emp'))
            if len(obj2):
                for j in range(len(obj2)):
                    
                    obj = list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code = obj2[j]['marked_emp']).values('designation'))
                
                    donor[i].update({'designation':obj[0]['designation']})
                    print('fgfffffffffffffffffffffffffffffffffff',donor)
                    
            else:
                donor[i].update({'designation':'-'})

        context={
                    'donor':donor
            }
        print(donor)
        submitbtn= request.POST.get('submitpdf')
        if submitbtn=='PDF':
            pdf=render_to_pdf('ScheduleOfficer.html',context)
            return HttpResponse(pdf, content_type='application/pdf')
        elif submitbtn=='excel':   
            import xlwt 
            from xlwt import Workbook
            response = HttpResponse(content_type='application/ms-excel')
            response['Content-Disposition'] = 'attachment; filename="ScheduleOfficer.xls"'
            wb = Workbook() 
            sheet1 = wb.add_sheet('Sheet 1')
            style= xlwt.easyxf("font: bold on;borders: top_color black, bottom_color black, right_color black, left_color black,\
                                                    left thin, right thin, top thin, bottom thin;")
            style1= xlwt.easyxf("borders: top_color black, bottom_color black, right_color black, left_color black,\
                                                    left thin, right thin, top thin, bottom thin;")  
            heading1 = "Schedule of officer" 
            row=1
            sheet1.write_merge(row,row,5,6,heading1,style=style)
            from datetime import date
            currDate = datetime.now().strftime("%d-%m-%Y")
            row=3
                                    
            sheet1.write_merge(row,row,0,4,'Date :'+currDate)
            row=4
            sheet1.write(row,0,'S.No.',style=style)
            sheet1.write_merge(row,row,1,2,' Inspection date',style=style)
            sheet1.write_merge(row,row,3,4,'Designation',style=style)                                                 
            sheet1.write_merge(row,row,5,6,'Rly./Org.',style=style)
            sheet1.write_merge(row,row,7,8,'Div./Unit',style=style)
            sheet1.write_merge(row,row,9,10,'Major Location',style=style)
            sheet1.write_merge(row,row,11,12,'Details of Inspection',style=style)
            sheet1.write_merge(row,row,13,14,'description',style=style)
            sheet1.write_merge(row,row,15,16,'Status',style=style)
                                    
            index=1
            row=row+1
            # print('0000000000000000000000000000',donor)
            for i in donor :
                print("+++++++++++++---------------------")  
                sheet1.write(row,0,index,style=style1)
                sheet1.write_merge(row,row,1,2,i['date_to_act'],style=style1)
                sheet1.write_merge(row,row,3,4,i['designation'],style=style1)                        
                sheet1.write_merge(row,row,5,6,i['Railways_act'],style=style1)
                sheet1.write_merge(row,row,7,8,i['Division_act'],style=style1)
                sheet1.write_merge(row,row,9,10,i['location3_act'],style=style1)
                sheet1.write_merge(row,row,11,12,i['event'],style=style1)
                sheet1.write_merge(row,row,13,14,i['description'],style=style1)
                sheet1.write_merge(row,row,15,16,i['status'],style=style1)                            
                row+=1
                print("+++++++++++++")                          
                index+=1
            wb.save(response)
        return response                 
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="Showpdf1",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})    
def Showpdf1(request):
    try:

        donor=list(m1.Event_activty.objects.filter(delete_flag=False).values().order_by('-date_to_act'))
        status=1
        for i in range(len(donor)):
            dat=''
            if donor[i]['date_to_act'] is not None:
                try:
                    dat=donor[i]['date_to_act'].strftime('%d/%m/%y')
                except:
                    dat=donor[i]['date_to_act'].strftime('%d/%m/%Y')
                dat1=donor[i]['date_to_act']
                cd=datetime.now().date()
                if dat1 < cd:
                    status="Overdue"
                    donor[i].update({'date_to_act':dat,'status':status})
                else:
                    donor[i].update({'date_to_act':dat})
        
            context={
                    'donor':donor
                }
        
        submitbtn= request.POST.get('submitpdf')
        if submitbtn=='PDF':
            pdf=render_to_pdf('ScheduleOfficer1.html',context)
            return HttpResponse(pdf, content_type='application/pdf')                       
        elif submitbtn=='excel':   
            import xlwt 
            from xlwt import Workbook
            response = HttpResponse(content_type='application/ms-excel')
            response['Content-Disposition'] = 'attachment; filename="Listofschedule.xls"'
            wb = Workbook() 
            sheet1 = wb.add_sheet('Sheet 1')
            style= xlwt.easyxf("font: bold on;borders: top_color black, bottom_color black, right_color black, left_color black,\
                                                    left thin, right thin, top thin, bottom thin;")
            style1= xlwt.easyxf("borders: top_color black, bottom_color black, right_color black, left_color black,\
                                                    left thin, right thin, top thin, bottom thin;")  
            heading1 = "List of Schedule" 
            row=1
            sheet1.write_merge(row,row,5,6,heading1,style=style)
            from datetime import date
            currDate = datetime.now().strftime("%d-%m-%Y")
            row=3
                                    
            sheet1.write_merge(row,row,0,4,'Date :'+currDate)
            row=4
            sheet1.write(row,0,'S.No.',style=style)
            sheet1.write_merge(row,row,1,2,' Inspection date',style=style)
                                                            
            sheet1.write_merge(row,row,3,4,'Rly./Org.',style=style)
                                
            sheet1.write_merge(row,row,5,6,'Div./Unit',style=style)
            sheet1.write_merge(row,row,7,8,'Major Location',style=style)
            sheet1.write_merge(row,row,9,10,'Status',style=style)
                                    
            index=1
            row=row+1
            # print('0000000000000000000000000000',donor)
            for i in donor:  
                sheet1.write(row,0,index,style=style1)
                sheet1.write_merge(row,row,1,2,i['date_to_act'],style=style1)                          
                sheet1.write_merge(row,row,3,4,i['Railways_act'],style=style1)
                sheet1.write_merge(row,row,5,6,i['Division_act'],style=style1)
                sheet1.write_merge(row,row,7,8,i['location3_act'],style=style1)
                sheet1.write_merge(row,row,9,10,i['status'],style=style1)                            
                row+=1
                #print("+++++++++++++")                          
                index+=1
            wb.save(response)
        return response                 
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="Showpdf1",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})  


def searchDetails1(request):
    try:
        if request.method=='GET' and request.is_ajax():
            # date1 = request.GET.get('date')
            # print(date1)
            date1 = request.GET.get('date')
            # print('dates-------------',date1)
            if date1:
                sp_date = date1.split('-')
                start  = datetime.strptime(sp_date[0].strip(),"%d/%m/%y")
                end  = datetime.strptime(sp_date[1].strip(),"%d/%m/%y")
            # print('start-----------',start)
            # print('end-----------',end)
            
            zone = request.GET.get('zone')
            division = request.GET.get('division')
        
            # print(zone)
            # print(division)
           
            if date1 and not zone and not division:
                # date1 = datetime.strptime(date1,'%d/%m/%y')
                
                details = list(m1.Event_activty.objects.filter(date_to_act__gte=start,date_to_act__lte=end).values())
                for i in range(len(details)):
                    dat=details[i]['date_to_act'].strftime('%d-%m-%y')
                    details[i].update({'date_to_act': dat})
            
            elif zone and not date1 and not division:    
                details = list(m1.Event_activty.objects.filter(Railways_act=zone).values())
            elif  not zone and not date1 and  division:    
                details = list(m1.Event_activty.objects.filter(Division_act=division).values())    
            elif zone and  date1 and not division:  
                # date1 = datetime.strptime(date1,'%d/%m/%y')  
                details = list(m1.Event_activty.objects.filter(date_to_act__gte=start,date_to_act__lte=end,Railways_act=zone).values())
                for i in range(len(details)):
                    dat=details[i]['date_to_act'].strftime('%d-%m-%y')
                    details[i].update({'date_to_act': dat})
            
            elif zone and not date1 and  division:    
                details = list(m1.Event_activty.objects.filter(Railways_act=zone,Division_act=division).values())
            elif not zone and  date1 and  division:
                # date1 = datetime.strptime(date1,'%d/%m/%y')    
                details = list(m1.Event_activty.objects.filter(date_to_act__gte=start,date_to_act__lte=end,Division_act=division).values()) 
                for i in range(len(details)):
                    dat=details[i]['date_to_act'].strftime('%d-%m-%y')
                    details[i].update({'date_to_act': dat})             
            else:
                # date1 = datetime.strptime(date1,'%d/%m/%y')
                details = list(m1.Event_activty.objects.filter(date_to_act__gte=start,date_to_act__lte=end,Railways_act=zone,Division_act=division).values())
                for i in range(len(details)):
                    dat=details[i]['date_to_act'].strftime('%d-%m-%y')
                    details[i].update({'date_to_act': dat})    
            
            # print(len(details))
            for i in range(len(details)):
                
                # print(details)
                if details[i]['status']=='0':
                    details[i].update({'statusNew':'Pending'})
                elif details[i]['status']=='1':
                    details[i].update({'statusNew':'Draft'})
                elif details[i]['status']=='2':
                    details[i].update({'statusNew':'Postponed'})
                elif details[i]['status']=='3':
                    details[i].update({'statusNew':'Cancelled'})
                else:
                    details[i].update({'statusNew':'Completed'})
        return JsonResponse({'details':details},safe=False)
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="searchDetails1",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})


def searchDraft(request):
    try:
        if request.method=='GET' and request.is_ajax():
            date1 = request.GET.get('date')
            # print(date1)
            # print('dates-------------',date1)
            if date1:
                sp_date = date1.split('-')
                start  = datetime.strptime(sp_date[0].strip(),"%d/%m/%y").strftime("%Y-%m-%d")
                end  = datetime.strptime(sp_date[1].strip(),"%d/%m/%y").strftime("%Y-%m-%d")
                # start  = datetime.strptime(sp_date[0].strip(),"%d/%m/%y")
                # end  = datetime.strptime(sp_date[1].strip(),"%d/%m/%y")
            # print('start-----------',start)
            # print('end-----------',end)
            
            # list4=list(m1.Events.objects.filter(status=1).values().order_by('-event_id'))
            # for i in list4: 
                # print(i['event_id'])
            list3=list(m1.Event_activty.objects.filter(status=1,date_to_act__range=[start,end],delete_flag=False).values('date_to_act'))
            # print('list3...................',list3)
            # listt=list(m1.Event_activty.objects.filter(status=1,date_to_act__range=[start,end],delete_flag=False).values('event_id').distinct('event_id'))
            # print('listt...................',listt)
            # list4=list(m1.Events.objects.filter(event_id=).values().order_by('-event_id'))
            list1=[]
            # list2=[]
            # # print(list2)
            event_obj= m1.Event_activty.objects.filter(date_to_act__range=[start,end], status=1,delete_flag=False).values('event_id')
            listt=list(m1.Events.objects.filter(status=1, event_id__in=event_obj).values())
            for i in range(len(listt)):
                list3=list(m1.Event_activty.objects.filter(event_id=listt[i]['event_id'],date_to_act__range=[start,end], status=1,delete_flag=False).values('event_id_id__event_title','event_id_id__description','date_to_act','Railways_act','location3_act','Division_act','event_id'))
                for j in range(len(list3)):
                    dat=list3[j]['date_to_act'].strftime('%d-%m-%y')
                    list3[j].update({'date_to_act': dat})
                    # list3[j].update({'loop_length':len(list3)})
                listt[i].update({'event_list':list3})
                
            # i.update({'list3': list3})
            # print('listtttttttttttt4',(listt))
            # for i in range(len(listt)):
            #     print('event_list',listt[i]['event_list'])
            #     for j in range(len(listt[i]['event_list'])):
            #         print('qq',listt[i][j]['Railways_act'])
            # print('list2',list2)
            context={
                'list1':listt
            }
            return JsonResponse(context,safe=False)
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="searchDraft",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})

def getdiv_rly1(request):
    try:
        if request.method == "GET" or request.is_ajax():
            rly=request.GET.get('rly_data')
            newrly = json.loads(rly)
            print(newrly)

            print(rly,'rly=======')
            
            division=list(models.railwayLocationMaster.objects.filter(location_type_desc__in=['DIVISION','WORKSHOP'],parent_location_code=newrly).order_by('location_code').values('location_code', 'location_type').distinct('location_code'))
            l=[]
            print('divb',division)
            for i in division:
                l.append({'location_code': i['location_code'], 'location_type':i['location_type']})
            # print(l)    
            context={
                'division':l,
            } 
            return JsonResponse(context,safe = False)
        return JsonResponse({"success":False}, status = 400)
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="getdiv_rly1",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {}) 



def update_schedule(request):
    try:
        
        if request.method == 'GET'and request.is_ajax():
            activity_id = request.GET.get('activity_id')
            date_to_act1 = request.GET.get('date_to_act')

            status1 = request.GET.get('status')
            print('Status1: ',status1)
            
            print(activity_id,date_to_act1)
            
            dat=datetime.strptime(date_to_act1,('%d/%m/%y'))
            
            print(dat) 
            

            m1.Event_activty.objects.filter(activity_id=activity_id).update( date_to_act= dat ,status=status1)
            return JsonResponse({'success':'True'})
        return JsonResponse({'success':False},status=404)
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="update_schedule",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})

def listofschedule(request):
    try:
       
        list1=models.railwayLocationMaster.objects.filter(Q(location_type_desc='RAILWAY BOARD')|Q(location_type_desc='HEAD QUATER')|Q(location_type_desc='PRODUCTION UNIT')|Q(location_type_desc='OFFICE')).values('location_code')
        list2=[]
        for i in list1:
            # print(i['location_code'],'_________')
            list2.append(i['location_code'])
        list3=models.railwayLocationMaster.objects.filter(Q(location_type_desc='DIVISION')|Q(location_type_desc='WORKSHOP')|Q(location_type_desc='INSTITUTE')|Q(location_type_desc='STORE')|Q(location_type_desc='CONSTRUCTION')).values('location_code','location_type')
        list4=[]
       
        for i in list3:
            # print(i['location_code'],'_________')
            list4.append(i['location_code'])    
        
        context={
            'Zone':list2 ,
            # 'division1':list3,
            'division':list4
            }
        return render(request, "listofschedule.html",context)
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="listofschedule",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})

def ScheduleInspection(request):
    try:
        return render(request, "ScheduleInspection.html")
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="ScheduleInspection",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})


def Show(request):
    try:
        donor=list(m1.Event_activty.objects.filter(delete_flag=False).values().order_by('-date_to_act'))
       
        
        for i in range(len(donor)):
                
            dat=''
            if donor[i]['date_to_act'] is not None:
                try:
                    dat=donor[i]['date_to_act'].strftime('%d/%m/%y')
                except:
                    dat=donor[i]['date_to_act'].strftime('%d/%m/%Y')
                
                dat1=donor[i]['date_to_act']
                
                cd=datetime.now().date()
                

                # if dat1 <  cd:
                #     donor[i].update({'date_to_act':dat,'statusNew':'Overdue'})
                #     # if donor[i]['status']!='4':
                    #     m1.Event_activty.objects.filter(activity_id=donor[i]['activity_id']).update(status=4)
                # elif dat1 >= cd:
                if donor[i]['status']=='0':
                    donor[i].update({'date_to_act':dat,'statusNew':'Pending'})
                elif donor[i]['status']=='1':
                    donor[i].update({'date_to_act':dat,'statusNew':'Draft'})
                elif donor[i]['status']=='2':
                    donor[i].update({'date_to_act':dat,'statusNew':'Postponed'})
                elif donor[i]['status']=='3':
                    donor[i].update({'date_to_act':dat,'statusNew':'Cancelled'})
                        # if donor[i]['status']!='0':
                        #     m1.Event_activty.objects.filter(activity_id=donor[i]['activity_id']).update(status=0)
                else:
                    donor[i].update({'date_to_act':dat,'statusNew':'Completed'})
                        # if donor[i]['status']!='1':
                        #     m1.Event_activty.objects.filter(activity_id=donor[i]['activity_id']).update(status=1)
                # else:
                #      donor[i].update({'date_to_act':dat,'statusNew':'Cancelled'})
                    #  if donor[i]['status']!='3':
                    #         m1.Event_activty.objects.filter(activity_id=donor[i]['activity_id']).update(status=3)

        
        return JsonResponse({'donor':donor},safe='False') 
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="Show",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})

# def form(request):
#     try:
#         if request.method=="POST" :
#             rly=request.POST.get('zone')
#             div=request.POST.get('division')
#             dept=request.POST.get('department')
#             loc=request.POST.get('location')
#             inspection_date=request.POST.get('start')
#             # print("@@@@@@@@@@@@@@@@@@@")
#         # print('-----------', request.user)
#         # print('-----------', request.user.username)
#         # print('-----------', request.user.email)
        
#         # empdata=m1.empmast.objects.filter(myuser_id=request.user).values('empmname','empno', 'desig_longdesc')
        
#         empdata = models.Level_Desig.objects.exclude(delete_flag=True).filter(official_email_ID=request.user).values('designation',  'empno')
#         # print(empdata)
#         # 'empno__empname','empno__empmname','empno__emplname',
#         if empdata:
#             desig_longdesc = empdata[0]['designation']
#         else:
#             desig_longdesc ='NA'
    
        
#         # desig_longdesc = empdata[0]['desig_longdesc']
#         # print('ttttttttttttttttttttttttttttttttttttttttttttttttttttttt', desig_longdesc)
#         list1=models.railwayLocationMaster.objects.filter(Q(location_type_desc='RAILWAY BOARD')|Q(location_type_desc='HEAD QUATER')|Q(location_type_desc='PRODUCTION UNIT')|Q(location_type_desc='OFFICE')).values('location_code')
#         list2=[]
#         for i in list1:
#             # print(i['location_code'],'_________')
#             list2.append(i['location_code'])
#         list3=models.railwayLocationMaster.objects.filter(Q(location_type_desc='DIVISION')|Q(location_type_desc='WORKSHOP')|Q(location_type_desc='INSTITUTE')|Q(location_type_desc='STORE')|Q(location_type_desc='CONSTRUCTION')).values('location_code','location_type')
#         list4=[]
#         list5 =[]
#         for i in list3:
#             # print(i['location_code'],'_________')
#             list4.append(i['location_code']) 
#         try:
            
#             list5=list(models.Level_Desig.objects.exclude(delete_flag=True).all().values('designation','designation_code'))  
#         except Exception as e:
#             print("e==",e)  
#         list6=models.departMast.objects.all().values('department_name')
#         alldesig=models.Level_Desig.objects.exclude(delete_flag=True).values('designation').distinct().order_by('designation')
#         desg_no=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation__isnull=False,empno__isnull=False).values('designation','empno','designation_code').order_by('designation'))
#         for i in range(len(desg_no)):
#             if '/' in desg_no[i]['designation']:
#                 r_des=desg_no[i]['designation'].replace('/',' ')
#             elif '.' in desg_no[i]['designation']:
#                 r_des=desg_no[i]['designation'].replace('.',' ')
#             else:
#                 r_des=desg_no[i]['designation']
#             desg_no[i].update({'empnoser':r_des})
#             #print('aaaaaaaaaaaaaaaaaaa',desg_no[i]['designation'])  
#         context={
#             'Zone':list2 ,
#             'division1':list3,
#             'division':list4,
#             'marked_to':list5,
#             'department':list6,
#             'desig': desig_longdesc,
#             'alldesig':alldesig,
#             'desg_no':desg_no,
            
#             }
#         # print(list2,'_____________')
#         event_id=request.GET.get('event_id')
        
#         # print(ins_id,'______________________________')
#         # ins_detail=[]
#         # item_id=[]
#         # length = 0
#         # sh = []
#         # ssh = []
#         if event_id!=None:
            
#             l1 = m1.Events.objects.filter(event_id=event_id).values()
 
            
#             l2 = m1.Event_activty.objects.filter(event_id_id=event_id).values('activity_id', 'Railways_act','Division_act','location3_act','date_to_act')
#             # l4= m1.Event_activty.objects.filter(event_id_id=event_id).values('activity_id')
#             l3 = []
            
#             for i in range(len(l2)):
#                 mydict = {}
#                 mark_desig = ''
#                 mark_desigcode = ''
#                 print(l2[i]['activity_id'])
#                 l3 = m1.schedule_marked1.objects.filter(act_id_id=l2[i]['activity_id']).values('marked_to', 'marked_to__designation', 'marked_to__designation_code')
#                 l4=[]
            
#                 for j in l3:
#                     if j['marked_to']:
#                         print(j['marked_to__designation'])
                        
#                         mark_desig += str(j['marked_to__designation']) +','
#                         mark_desigcode += str(j['marked_to__designation_code']) +','
#                 l2[i].update({'desig': mark_desig, 'desig_code': mark_desigcode})
#                 #     l3= models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code = l3[j]['marked_emp']).values('designation')
#                 #     if l3:
#                 #         l3[j].update({'designation': l3[0]['designation']})
            
#                 mydict.update({'mark_desig': l4})
#                 # l2[i].update({'markoff': l4})
#             event_id=request.GET.get('event_id') 
#             print('2222', l2)
#             # print('33333333333333', mydict)
#             context={
                
#                 'list1':l1,
#                 "list2": l2,
#                 'list3':l3,
#                 'Zone':list2 ,
#                 'division1':list3,
#                 'division':list4,
#                 'marked_to':list5,
#                 'department':list6,
#                 'desig': desig_longdesc,
#                 'alldesig':alldesig,
#                 'desg_no':desg_no,
#                 'event_id':event_id,
#                 }  
                
#             return render(request,"edit_form.html",context)
        
#         else:     
#             return render(request,"form.html", context)
#     except Exception as e: 
#         try:
#             m1.error_Table.objects.create(fun_name="form",user_id=request.user,err_details=str(e))
#         except:
#             print("Internal Error!!!")
#         return render(request, "errorspage.html", {})

def autoFetchLocation1(request):
    if request.method == 'GET' and request.is_ajax():
        last_val = request.GET.get('last_val')
        # list1=list(models.locationMaster.objects.values_list('city', flat=True).order_by('city').distinct('city'))

        # list1=list(models.locationMaster.objects.filter(city__istartswith=last_val).values('city','pincode').order_by('city').distinct('city'))
        # print(list1)
        list1 = []
        list_obj = models.station_master.objects.filter(station_name__istartswith=last_val).values('station_name').order_by('station_name').distinct('station_name')
        for i in list_obj:
            list1.append({'city': i['station_name']})
        return JsonResponse(list1, safe=False)
    return JsonResponse({'success': False})


def notification(request):
    try:
        obj= m6.copyto_mails.objects.filter(receiver_desig__contains=request.session.get('designation'),area_flag=1).values('created_on','body','subject','sender_id__designation')
        # print('11111111111111111111111111111111111',obj)
        return render(request,'notification.html',{'obj':obj})
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="notification",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})



def message1(request):
    try:
        if request.method == 'GET':
            empnox = models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=request.user)| Q(official_email_ID=request.user.guest_email) | Q(official_email_ID=request.user.email), empno__isnull=False)
            if empnox:
                empno = empnox[0].empno_id
                desig = empnox[0].designation_code

            else:
                messages.error(request, 'You are not authorize to view this page. Please contact admin')

            mails=[]
            count_pend=0
            temp_mails = list(m6.copyto_mails.objects.filter( area_flag=0).values('sender_id__designation','mail_no','created_on','sender_id','doc_id',
            'doc_table','receiver_id','subject','body','noted_flag','noted_by').distinct())
            
            for m in temp_mails:
                receivers=m['receiver_id'].split(',')
                if str(desig) in receivers:
                    if m['noted_flag']!=0:
                        if m6.copyto_mails.objects.filter(noted_by__contains=str(desig),mail_no=m['mail_no']):
                            m.update({'noted':'1'})
                        else:
                            m.update({'noted':'0'})
                    else:
                        m.update({'noted':'0'})
                        
                    if m['doc_table'] == 'i':
                        if m1.Inspection_details.objects.exclude(status_flag=0).filter(inspection_no=m['doc_id']):
                            note_no=m1.Inspection_details.objects.exclude(status_flag=0).filter(inspection_no=m['doc_id']).values('inspection_note_no')[0]['inspection_note_no']
                            m.update({'note_no':note_no})
                            if m not in mails:
                                mails.append(m)

                    elif m['doc_table'] == 'd':
                        if m4.do_upload.objects.exclude(status_flag=0).filter(id=m['doc_id']):
                            note_no=m4.do_upload.objects.exclude(status_flag=0).filter(id=m['doc_id']).values('do_letter_no')[0]['do_letter_no']
                            m.update({'note_no':note_no})
                            if m not in mails:
                                mails.append(m)
                        
                    elif m['doc_table'] == 'm':
                        if m3.Insp_details.objects.exclude(status_flag=0).filter(insp_no=m['doc_id']):
                            note_no=m3.Insp_details.objects.exclude(status_flag=0).filter(insp_no=m['doc_id']).values('mom_note_no')[0]['mom_note_no']
                            m.update({'note_no':note_no})
                            if m not in mails:
                                mails.append(m)

            for m in mails:
                if m['noted']=='0':
                    count_pend+=1

            print(count_pend)

            
        
            # print(mails,"apekshaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa")
        
            # obj= m6.copyto_mails.objects.filter(receiver_desig__contains=request.session.get('designation'),area_flag=1).values('body')
            # obj1= m6.copyto_mails.objects.filter(receiver_desig__contains=request.session.get('designation'),area_flag=1).values('created_on')
            # count=obj.count()
            # detail_list = []
            # To_list=[]
            # for x in range(0,len(obj)):
            #     detail_list.append(obj[x])
            #     To_list.append(obj1[x])
               
            name=[]
            date1=[]
            # for dic in detail_list:
            #     name.append(dic.get('body'))
            # for dic in To_list:  
            #     if date1 is not None:  
            #         xx=dic.get('created_on')
            #         xx=xx.strftime('%d/%m/%Y')
            #         date1.append(xx)
                   
            return JsonResponse({'count':count_pend,'name':name,'date1':date1})
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="message1",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})




def searchDetails2(request):
    try:
        if request.method=='GET' and request.is_ajax():
            date1 = request.GET.get('date')
            # print('--------------------------------',date1)
            if date1:
                sp_date = date1.split('-')
                start  = datetime.strptime(sp_date[0].strip(),"%d/%m/%y")
                end  = datetime.strptime(sp_date[1].strip(),"%d/%m/%y")
            # print('--------------------------------',start)
            # print('--------------------------------',end)   
            # date1 = datetime.strptime(date1,'%d/%m/%y')

        email=request.user.username
        desgig=request.session.get('designation')
        # print('44444444444444444444444444444',desgig)
        desig_code1=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation=desgig)[0]
        # print( "desig_code1",desig_code1)
        list2=list(m1.schedule_marked1.objects.filter(marked_to_id=desig_code1).values('act_id_id'))
        # print('list2',list2)
        list3=list(m1.schedule_marked1.objects.filter(marked_to_id=desig_code1).values('event_id_id'))
        # print('list3',list3)
        list1=list(m1.Events.objects.filter(delete_flag=False).values())
        list4=list(models.Level_Desig.objects.exclude(delete_flag=True).values())
        # list2=[]
        donorList=[]
        for i in range (len(list2)):
            donor=list(m1.Event_activty.objects.filter(activity_id=list2[i]['act_id_id'],delete_flag=False,date_to_act__gte=start,date_to_act__lte=end).values())
            # print('11111111111111111111111111111111111111111111111111111',donor)
            for k in range (len(donor)):

                if donor[k]['date_to_act'] is not None:
                    # cd=datetime.today().strftime("%d/%m/%y")
                    dat=donor[k]['date_to_act'].strftime('%d-%m-%y')
                
                    for j in range(len(list1)):
                        if donor[k]['event_id_id']==list1[j]['event_id'] :
                            donor[k].update({'event':list1[j]['event_title'], 'description':list1[j]['description']})
                    for j in range(len(list4)):
                        if  donor[k]['created_by']==list4[j]['official_email_ID'] :
                            donor[k].update({'designation':list4[j]['designation']})

                donor[k].update({'date_to_act':dat})
                if donor[k]['status']=='0':
                    donor[k].update({'date_to_act':dat,'statusNew':'Pending'})
                elif donor[k]['status']=='1':
                    donor[k].update({'date_to_act':dat,'statusNew':'Draft'})
                elif donor[k]['status']=='2':
                    donor[k].update({'date_to_act':dat,'statusNew':'Postponed'})
                elif donor[k]['status']=='3':
                    donor[k].update({'date_to_act':dat,'statusNew':'Cancelled'})
                            # if donor[i]['status']!='0':
                            #     m1.Event_activty.objects.filter(activity_id=donor[i]['activity_id']).update(status=0)
                else:
                    donor[k].update({'date_to_act':dat,'statusNew':'Completed'})
                # print('1111111111111111111111111111111111111111',donor) 
                donorList.append(donor)
        print('donorList: ',(donorList[0]))

        return JsonResponse({'donor':donorList},safe='False') 
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="searchDetails2",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})
def ScheduleSendMail(subject, To, context):
    html_message = render_to_string('Schedule_mail_template.html', context)
    plain_message = strip_tags(html_message)
    from_email = 'mfgcris@cris.org.in'
    send_mail(subject, plain_message, from_email, To, html_message=html_message)



def Show1(request):
    try:
        email=request.user.username
        desgig=request.session.get('designation')
        print('44444444444444444444444444444',desgig)
        desig_code1=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation =desgig)[0]
        print( "desig_code1",desig_code1)
        list2=list(m1.schedule_marked1.objects.filter(marked_to_id=desig_code1).values('act_id_id'))
        print('list2',list2)
        list3=list(m1.schedule_marked1.objects.filter(marked_to_id=desig_code1).values('event_id_id'))
        print('list3',list3)
        list1=list(m1.Events.objects.filter(delete_flag=False).values())
        list4=list(models.Level_Desig.objects.exclude(delete_flag=True).values())
        # list2=[]
        donorList=[]
        for i in range (len(list2)):
            donor=list(m1.Event_activty.objects.filter(activity_id=list2[i]['act_id_id'],delete_flag=False,date_to_act__gte=datetime.today().strftime("%Y-%m-%d")).values().order_by('date_to_act'))
            for k in range (len(donor)):
 
                if donor[k]['date_to_act'] is not None:
                    cd=datetime.today().strftime("%d/%m/%y")
                    dat=donor[k]['date_to_act'].strftime('%d-%m-%y')
                
                    for j in range(len(list1)):
                        if donor[k]['event_id_id']==list1[j]['event_id'] :
                            donor[k].update({'event':list1[j]['event_title'], 'description':list1[j]['description']})
                    for j in range(len(list4)):
                        if  donor[k]['created_by']==list4[j]['official_email_ID'] :
                            donor[k].update({'designation':list4[j]['designation']})
 
                donor[k].update({'date_to_act':dat})
                if donor[k]['status']=='0':
                    donor[k].update({'date_to_act':dat,'statusNew':'Pending'})
                elif donor[k]['status']=='1':
                    donor[k].update({'date_to_act':dat,'statusNew':'Draft'})
                elif donor[k]['status']=='2':
                    donor[k].update({'date_to_act':dat,'statusNew':'Postponed'})
                elif donor[k]['status']=='3':
                    donor[k].update({'date_to_act':dat,'statusNew':'Cancelled'})
                            # if donor[i]['status']!='0':
                            #     m1.Event_activty.objects.filter(activity_id=donor[i]['activity_id']).update(status=0)
                else:
                    donor[k].update({'date_to_act':dat,'statusNew':'Completed'})
                # print('1111111111111111111111111111111111111111',donor) 
                print('donorrrrrrrrrrrrrrrr',donor)
                donorList.append(donor)
        print('donorList: ',(donorList[0]))
 
        return JsonResponse({'donor':donorList},safe='False') 
        
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="Show1",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})

def saveData1(request):
    try:
        if request.method=='POST' and request.is_ajax():
            
            all_data = json.loads(request.POST.get('my_data'))
            email=request.user.username
            print(email)
            markofficer_email=[]
            markofficer_contact=[]
            event_title=request.POST.get('event')
            
            description=request.POST.get('description')
            print(event_title, description)
            
            
            m1.Events.objects.create(event_title=event_title,description=description,created_by=email,status=0)
            print("Data saved successfully in table1", all_data)
            maxevent=list(m1.Events.objects.values('event_id').order_by('-event_id'))
            maxevent=m1.Events.objects.get(event_id=maxevent[0]['event_id'])
            maxact=list(m1.Event_activty.objects.values('activity_id').order_by('-activity_id'))
            
            for i in all_data:
                print(i)
                if i['date']:
    
                    dt = datetime.strptime(i['date'], '%d/%m/%y').strftime('%Y-%m-%d')
                else:
                    dt = None
                m1.Event_activty.objects.create(Railways_act=i['zone'],Division_act=i['division'],location3_act=i['location'],date_to_act=dt,event_id=maxevent,created_by=email,status=0)
                markeofficer=i['markeofficer']
                print('eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee',markeofficer)
                maxact=m1.Event_activty.objects.last()
                #print('999999', maxact)
                if markeofficer:
                    m11=markeofficer.split(',')
                    print('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',m11)
                    mark=[]
                    for j in m11:
                        print('666', j)
                        designat=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=j)
                        # designat1=designat.split(',')[1]
                        print('designatttttttttttttttttttttt',designat[0].designation)
                        mark.append(designat[0].designation)
                        # print('markkkkkkkkkkkkkkkkkk',mark)

                        m1.schedule_marked1.objects.create(marked_to_id=j,event_id=maxevent,act_id_id= maxact.activity_id)
                        markofficerid=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=j)
                        if markofficerid[0].official_email_ID:
                            markofficer_email.append(markofficerid[0].official_email_ID)
                        if markofficerid[0].contactnumber:
                            markofficer_contact.append(markofficerid[0].contactnumber)
                        print(markofficer_email)
                    print('markkkkkkkkkkkk',mark)
            x=''
            for i in range(len(mark)):
                try:
                    if mark[i+1]:
                        x+=mark[i]+',' 
                except:
                    x+=mark[i]

            print('AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAa',x)               
            print("Data saved successfully in table2")
            title=request.POST.get('event')
            desgig=request.session.get('designation')
            print('44444444444444444444444444444',desgig)
            desig_code1=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation =desgig).values('designation_code')
            print( "desig_code1",desig_code1)
            # print('titlee',title)
            try:
               
                subject="Inspection Schedule"
                To=['kr.abhijeet6235@gmail.com',]
                context = {'title': title}
                # Schedulesms(9034060472)
                    # if len(markofficer_contact) > 0:
                    #     for num in markofficer_contact:
                    #          Schedulesms(num)

                ScheduleSendMail(subject, To, context)
                m6.copyto_mails.objects.create(sender_id_id=desig_code1, subject=subject, body=title, area_flag=1, doc_table='s',receiver_id= markeofficer,receiver_desig=x)
                messages.success(request, 'Successfully save data and mail sent')                    
            except:
                print("error on sending")
                messages.error(
                    request, 'Email send failed. Please Try Again.')    

        
        
        
        
        
            return JsonResponse({"success":True},safe=False)
        return JsonResponse({"success":False},status=404)
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="saveData1",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})  



def delet(request):
    try:
        if request.method=='GET'and request.is_ajax():
            activity_id= request.GET.get('activity_id')
            m1.Event_activty.objects.filter(activity_id=activity_id).update(Flag=True)
            print(activity_id)
            return JsonResponse({'success':True})
        return JsonResponse({'success':False},status=404)  
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="delete",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})
 
def upschedule(request):
    try:
        if request.method == 'GET'and request.is_ajax():
            activity_id = request.GET.get('activity_id')
            print(activity_id)
            donor_obj=list( m1.Event_activty.objects.filter(activity_id=activity_id).values())
            print('donor_obj',donor_obj[0]['date_to_act'])
            xx=donor_obj[0]['date_to_act'].strftime('%d/%m/%y')
            donor_obj[0].update({'date_to_act':xx})
            
            return JsonResponse({'donor_obj':donor_obj})
        return JsonResponse({'success':False},status=404)
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="upschedule",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})

def update(request):
    try:
        if request.method == 'GET'and request.is_ajax():
            activity_id = request.GET.get('activity_id')
            date_to_act = request.GET.get('date_to_act')
            Railways_act = request.GET.get('Railways_act')
            Division_act = request.GET.get('Division_act')
            location3_act = request.GET.get('location3_act')
            status = request.GET.get('status')
            print(activity_id, date_to_act,Railways_act,Division_act,location3_act,status)
            m1.Event_activty.objects.filter(activity_id=activity_id).update( date_to_act= date_to_act, Railways_act= Railways_act,location3_act=location3_act,Division_act=Division_act,status=status)
            return JsonResponse({'success':'True'})
        return JsonResponse({'success':False},status=404)
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="update",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})
 


#=======================SIDHI JAIN END ================================================
#=======================Aryaman starts here  ================================================

#1)autoFetchLocationForInspectionForm - 

def autoFetchLocationForInspectionForm(request):
    if request.method == 'GET' and request.is_ajax():
        last_val = request.GET.get('last_val')
        if last_val is None:
            last_val = ''

        stype = json.loads(request.GET.get('stype'))
        rly_zone = json.loads(request.GET.get('rly_zone'))
        division_id = json.loads(request.GET.get('division_id'))
        temp = []
        for i in division_id:
            temp.append(i.split('-')[0])
        division_id = temp
        print('last_val', last_val,'div', division_id,'rly', rly_zone, stype)
        list1 = []
        # list_obj = models.station_master.objects.filter(station_name__istartswith=last_val).values('station_name').order_by('station_name').distinct('station_name')
        if len(division_id):
            rly_list = models.railwayLocationMaster.objects.filter(Q(location_code__in=division_id)).values_list('rly_unit_code', flat=True)
        else:
            rly_list = models.railwayLocationMaster.objects.filter(Q(location_code__in=rly_zone)|Q(location_code__in=division_id)).values_list('rly_unit_code', flat=True)
        
        print('rly_list', rly_list)

        for i in stype:
            if i == 'RRM':
                obj = models.station_master.objects.filter(Q(station_name__istartswith=last_val)|Q(stnshortcode__istartswith=last_val),(Q(rly_id_id_id__in=rly_list)| Q(div_id_id_id__in=rly_list)), station_name__isnull=False).values('station_name', 'stnshortcode').distinct('station_name').order_by('station_name')

                # obj = models.runningroom_master.objects.filter(rr_name__istartswith=last_val, rly_id_id_id__in=rly_list,  rr_name__isnull=False).values('rr_name', 'rrid').distinct('rr_name').order_by('rr_name')
                for j in obj:
                    loc_stm = j['station_name'].strip()
                    list1.append({'city': loc_stm, 'table_from':'RRM', 'loc_code': j['stnshortcode']})
            if i == 'SEM':
                obj = models.section_master.objects.filter(Q(section_name__istartswith=last_val)|Q(section_code__istartswith=last_val),(Q(rly_id_id_id__in=rly_list)| Q(div_id_id_id__in=rly_list)), section_name__isnull=False).values('section_name', 'secid').distinct('section_name').order_by('section_name')
                for j in obj:
                    # loc_sem = y['section_name'].strip() + '-' + y['']
                    list1.append({'city': j['section_name'], 'table_from':'SEM', 'loc_code': j['secid']})
            if i == 'STM':
                obj = models.station_master.objects.filter(Q(station_name__istartswith=last_val)|Q(stnshortcode__istartswith=last_val),(Q(rly_id_id_id__in=rly_list)| Q(div_id_id_id__in=rly_list)), station_name__isnull=False).values('station_name', 'stnshortcode').distinct('station_name').order_by('station_name')
                # print('Station', obj)
                for y in obj:
                    loc_stm = y['station_name'].strip()
                    list1.append({'city': loc_stm, 'table_from':'STM', 'loc_code': y['stnshortcode']})
            if i == 'ORL':
                obj = models.railwayLocationMaster.objects.filter(Q(location_description__istartswith=last_val) | Q(location_code__istartswith=last_val), rly_unit_code__in=rly_list , location_type_desc__in=['Coach Depot','Wagon Depot']).values('location_description','location_code','rly_unit_code').distinct('location_description').order_by('-location_description')
                for j in obj:
                    loc_orl = j['location_description'].strip()
                    list1.append({'city': loc_orl, 'table_from':'ORL', 'loc_code': j['rly_unit_code']})
            if i == 'SOP':
                rly_list1 = [str(s) for s in rly_list]
               
                obj = models.Shop_section.objects.filter(Q(section_desc__istartswith=last_val)|Q(shop_code__istartswith=last_val), rly_unit_code__in=rly_list1, section_desc__isnull=False).values('section_desc', 'section_code', 'shop_code').distinct('section_desc').order_by('-section_desc')
                for j in obj:
                    loc_sop = j['section_desc'].strip()
                    list1.append({'city': loc_sop, 'table_from':'SOP', 'loc_code': j['section_code']})
            if i == 'WOS':
                rly_list1 = [str(s) for s in rly_list]
                obj = models.railwayLocationMaster.objects.filter(Q(location_description__istartswith=last_val) | Q(location_code__istartswith=last_val), parent_rly_unit_code__in=rly_list1 , location_type='WS').values('location_description','location_code','rly_unit_code').distinct('location_description').order_by('-location_description')
                for j in obj:
                    loc_orl = j['location_description'].strip()
                    list1.append({'city': loc_orl, 'table_from':'WOS', 'loc_code': j['rly_unit_code']})

            if i == 'DLS':
                if len(division_id)==0:
                    rly_list1 = [str(s) for s in rly_list]
                    rly_list = models.railwayLocationMaster.objects.filter(parent_rly_unit_code__in=rly_list1, location_type ='DIV').values_list('rly_unit_code', flat=True)
                rly_list1 = [str(s) for s in rly_list]

                obj = models.railwayLocationMaster.objects.filter(Q(location_description__istartswith=last_val) | Q(location_code__istartswith=last_val), parent_rly_unit_code__in=rly_list1 , location_type='DS').values('location_description','location_code','rly_unit_code').distinct('location_description').order_by('-location_description')
                for j in obj:
                    loc_orl = j['location_description'].strip()
                    list1.append({'city': loc_orl, 'table_from':'DLS', 'loc_code': j['rly_unit_code']})
            if i == 'ELS':
                if len(division_id)==0:
                    rly_list1 = [str(s) for s in rly_list]
                    rly_list = models.railwayLocationMaster.objects.filter(parent_rly_unit_code__in=rly_list1, location_type ='DIV').values_list('rly_unit_code', flat=True)
                rly_list1 = [str(s) for s in rly_list]

                obj = models.railwayLocationMaster.objects.filter(Q(location_description__istartswith=last_val) | Q(location_code__istartswith=last_val), parent_rly_unit_code__in=rly_list1 , location_type='ES').values('location_description','location_code','rly_unit_code').distinct('location_description').order_by('-location_description')
                for j in obj:
                    loc_orl = j['location_description'].strip()
                    list1.append({'city': loc_orl, 'table_from':'ELS', 'loc_code': j['rly_unit_code']})
            
            if i == 'COD':
                rly_list1 = [str(s) for s in rly_list]
                obj = models.railwayLocationMaster.objects.filter((Q(location_description__istartswith=last_val) | Q(location_code__istartswith=last_val)), parent_rly_unit_code__in=rly_list1 , location_type='CD').values('location_description','location_code','rly_unit_code').distinct('location_description').order_by('-location_description')
                for j in obj:
                    loc_orl = j['location_description'].strip()
                    list1.append({'city': loc_orl, 'table_from':'COD', 'loc_code': j['rly_unit_code']})
            
            if i == 'WAD':
                rly_list1 = [str(s) for s in rly_list]
                obj = models.railwayLocationMaster.objects.filter(Q(location_description__istartswith=last_val) | Q(location_code__istartswith=last_val), parent_rly_unit_code__in=rly_list1 , location_type='WD').values('location_description','location_code','rly_unit_code').distinct('location_description').order_by('-location_description')
                for j in obj:
                    loc_orl = j['location_description'].strip()
                    list1.append({'city': loc_orl, 'table_from':'WAD', 'loc_code': j['rly_unit_code']})
            if i == 'CTI':
                rly_list1 = [str(s) for s in rly_list]
                obj = models.railwayLocationMaster.objects.filter(Q(location_description__istartswith=last_val) | Q(location_code__istartswith=last_val), parent_rly_unit_code__in=rly_list1 , location_type='CTI').values('location_description','location_code','rly_unit_code').distinct('location_description').order_by('-location_description')
                for j in obj:
                    loc_orl = j['location_description'].strip()
                    list1.append({'city': loc_orl, 'table_from':'CTI', 'loc_code': j['rly_unit_code']})
            
            if i == 'TRN':
                rly_list1=[]
                for rs in rly_zone:
                    rly_list1.append(rs)
                for rs in division_id:
                    rly_list1.append(rs)
                
                for r in rly_list1:
                    obj = models.trainMaster.objects.filter((Q(train_name__istartswith=last_val) | Q(train_no__istartswith=last_val)), (Q(passing_rly__icontains=r) | Q(passing_division__icontains=r)) ).values('train_name','train_no','org_rly_id','tnid').distinct('tnid').order_by('-tnid')
                    for j in obj:
                        loc_orl = j['train_no'].strip()+' - '+j['train_name'].strip()
                        list1.append({'city': loc_orl, 'table_from':'TRN', 'loc_code': j['tnid']})
            
            if i == 'HOS':
                rly_list1=[]
                for rs in rly_zone:
                    rly_list1.append(rs)
                for rs in division_id:
                    rly_list1.append(rs)
                for r in rly_list1:
                    obj = models.iem_hospmstr.objects.filter((Q(iavhccfullname__istartswith=last_val) | Q(iavhccfullname__istartswith=last_val)), (Q(iavhcczonecode__icontains=r) | Q(iavhccdvsncode__icontains=r))).values('iavhccfullname','iavhcccode','iairlyunitcode').distinct('iavhccfullname').order_by('-iavhccfullname')
                    for j in obj:
                        loc_orl = j['iavhccfullname'].strip()
                        list1.append({'city': loc_orl, 'table_from':'HOS', 'loc_code': j['iairlyunitcode']})
            
        if last_val == '':
            list1 = list1[:20]
        print("", list1)
        return JsonResponse(list1, safe=False)
    return JsonResponse({'success': False})



#2)autoFetchDesig - 
all_desig = models.Level_Desig.objects.filter(designation__isnull=False).values('designation').distinct('designation')

def autoFetchDesig(request):
    if request.method == 'GET' and request.is_ajax():
        last_val = request.GET.get('last_val[term]')
        # pattern = '*.'+last_val+'.*'
        # print("last value: ", last_val,"\n" "pattern: ", pattern)
        list = []
        for i in all_desig:
            if last_val.upper() in i['designation'].upper():
            # if(re.search(pattern, i['designation'])):
                list.append(i['designation'])
        list = list[:20]
        return JsonResponse(list, safe=False)

#3)division_by_rly2-

def division_by_rly2(request):
    try:
        if request.method == "GET" and request.is_ajax():
            rly_1=request.GET.getlist('rly_1[]')
            if rly_1 == []:
                division=models.railwayLocationMaster.objects.filter(Q(location_type_desc='DIVISION')|Q(location_type_desc='WORKSHOP')|Q(location_type_desc='INSTITUTE')|Q(location_type_desc='STORE')|Q(location_type_desc='CONSTRUCTION')).values('location_code', 'location_type')
            else:
                division=list(models.railwayLocationMaster.objects.filter(Q(location_type_desc='DIVISION')|Q(location_type_desc='WORKSHOP')|Q(location_type_desc='INSTITUTE')|Q(location_type_desc='STORE')|Q(location_type_desc='CONSTRUCTION'),parent_location_code__in=rly_1).order_by('location_code').values('location_code', 'location_type').distinct('location_code'))
            l=[]
            # print(division)
            for i in division:
                x = i['location_code']+'-'+i['location_type']
                l.append(x)
            context={
                'division':l,
            } 
            print("hi", context)
            return JsonResponse(context,safe = False)
        return JsonResponse({"success":False}, status = 400)
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="division_by_rly1",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {}) 

#4)delete_draft -

def delete_draft(request):
    try:
        draft_id = request.GET['draft_id']
        obj = m1.schedule_detail.objects.filter(id=draft_id)[0]
        obj.delete_flag = True
        obj.save()
        return redirect('/form?drafts_page_view')
    except:
        return render(request, "errorspage.html", {}) 

#5)create_time - 

def create_time(hour, minute):
    if 0 <= hour < 24 and 0 <= minute < 60:
        return f"{hour:02d}:{minute:02d}"
    else:
        raise ValueError("Invalid hour or minute value")

#6)get_days_between_dates-

def get_days_between_dates(date1, date2):
    format_str = "%d/%m/%y"
    d1 = datetime.strptime(date1, format_str)
    d2 = datetime.strptime(date2, format_str)
    delta = d2 - d1
    return delta.days + 1

#7)tour_update-

def tour_update(request):
    if request.method == 'POST' and request.is_ajax():
        schedule_id = request.POST.get('id')
        action = request.POST.get('action')
        schedule = m1.schedule_detail.objects.filter(id = schedule_id)[0]
        obj=models.Level_Desig.objects.exclude(official_email_ID = None).filter(Q(official_email_ID=request.user.username) | Q(official_email_ID=request.user.email)).values("designation","parent_desig_code","department","contactnumber","official_email_ID","empno_id", "empno_id__empno","empno_id__empname","empno_id__empmname","empno_id__emplname","empno_id__gender","empno_id__email","contactnumber","empno_id__currentzone", "empno_id__currentunitdivision","empno_id__appointmentdate","empno_id__superannuation_date","empno_id__pc7_level","empno_id__billunit","empno_id__service_status","empno_id__station_des")[0]
        # email = request.user
        # curr_user_desig = models.Level_Desig.objects.filter(official_email_ID=email)[0]
        # curr_user = m1.empmast.objects.filter(email=email)[0]

        curr_user_desig = models.Level_Desig.objects.filter(designation = obj['designation'])[0]
        user_id = obj['empno_id']

        curr_user = m1.empmast.objects.filter(empno=user_id)[0]

        last_entry = m1.schedule_remarks.objects.filter(schedule_detail = schedule)[0]

        if action == "completed":
            schedule.status_flag = 4
            o1 = m1.schedule_remarks(remarks = "schedule completed", given_by = curr_user_desig, schedule_detail = schedule, action_taken = 6, created_by = last_entry.created_by, letter_no = last_entry.letter_no, remarks_by_officer = "")

        elif action == "cancelled":
            schedule.status_flag = 7
            o1 = m1.schedule_remarks(remarks = "schedule cancelled", given_by = curr_user_desig, schedule_detail = schedule, action_taken = 7, created_by = last_entry.created_by, letter_no = last_entry.letter_no, remarks_by_officer = "")
        schedule.save()
        o1.save()
        return JsonResponse({'status': 'success'}, status=200)

#8)tour_modify - 

def tour_modify(request):
    if request.method == 'POST' and request.is_ajax():
        existing_schedule_id = request.GET['schedule_id']
        all_data = json.loads(request.POST.get('data'))
        # print(all_data)
        email = request.user
        obj=models.Level_Desig.objects.exclude(official_email_ID = None).filter(Q(official_email_ID=request.user.username) | Q(official_email_ID=request.user.email)).values("designation","parent_desig_code","department","contactnumber","official_email_ID","empno_id", "empno_id__empno","empno_id__empname","empno_id__empmname","empno_id__emplname","empno_id__gender","empno_id__email","contactnumber","empno_id__currentzone", "empno_id__currentunitdivision","empno_id__appointmentdate","empno_id__superannuation_date","empno_id__pc7_level","empno_id__billunit","empno_id__service_status","empno_id__station_des")[0]
    
        inspecting_officer = models.Level_Desig.objects.filter(designation = obj['designation'])[0]
        user_id = obj['empno_id']

        curr_user = m1.empmast.objects.filter(empno=user_id)[0]

        for i in all_data[0]:
            if i == "railway":
                railway = all_data[0]['railway']   #list
            elif i == "division":
                division = all_data[0]['division']  #list
            elif i == "location": #location name
                location = all_data[0]['location']
            elif i== "location_type":
                location_type = all_data[0]['location_type']
            elif i == "description":
                tour_description = all_data[0]['description']
            elif i == "accompanied_by":
                accompanied_by = ",".join(all_data[0]['accompanied_by'])
            elif i == "looking_after":
                d = all_data[0]['looking_after']
                if d == '':
                    looking_after = None
                else:
                    looking_after = models.Level_Desig.objects.filter(designation = d)[0]
            elif i == "recom_officer":
                d = all_data[0]['recom_officer']
                if d == '':
                    recom_officer = None
                else:
                    recom_officer = models.Level_Desig.objects.filter(designation = d)[0]
            elif i == "approve_auth":
                a = all_data[0]['approve_auth']
                if a == '':
                    approving_auth = None
                else:
                    approving_auth = models.Level_Desig.objects.filter(designation = a)[0]
            elif i == "info":
                info = all_data[0]['info']
            elif i == "document":
                document = all_data[0]['document']

        existing_schedule = m1.schedule_detail.objects.filter(id = existing_schedule_id)[0]

        existing_schedule.status_flag = 6
        existing_schedule.is_modified = True
        existing_schedule.last_modified_on=datetime.now()
        existing_schedule.last_modified_by = curr_user
        existing_schedule.save()

        a = m1.schedule_detail(inspecting_officer = inspecting_officer, tour_description = tour_description, accompanied_by = accompanied_by, recommending_officer = recom_officer, approving_officer = approving_auth, looking_after_officer = looking_after, document=document, status_flag = 0, delete_flag = 0, created_by = curr_user, last_modified_by = curr_user, letter_no = existing_schedule.letter_no, is_modified = False, modified_new_schedule = existing_schedule)
        a.save()
        
        x = a

        if x.recommending_officer == None:
            designation = models.Level_Desig.objects.filter(official_email_ID=email)[0]
            temporary = m1.schedule_detail.objects.filter(created_by=curr_user, created_on__year=x.created_on.year).exclude(status_flag=0)
            # letter_no = str(x.created_on.year) + "/" + designation + "/Tour/" + str(len(temporary) + 1)
            letter_no = x.letter_no
            o1 = m1.schedule_remarks(remarks = "schedule modified", created_by=curr_user, given_by = designation, schedule_detail = existing_schedule, action_taken = 8, letter_no = letter_no)
            o1.save()
            remark_obj1 = m1.schedule_remarks(remarks="schedule submitted", created_by = curr_user, given_by = designation, schedule_detail = x, action_taken = 0, letter_no = letter_no)
            remark_obj1.save()
            remark_obj2 = m1.schedule_remarks(remarks="schedule pending with Sanctioning Authority", created_by = curr_user, given_by = designation, schedule_detail = x, action_taken = 2)
            remark_obj2.save()
                
            x.status_flag = 2
        else:
            designation = models.Level_Desig.objects.filter(official_email_ID=email)[0]
            temporary = m1.schedule_detail.objects.filter(created_by=curr_user, created_on__year=x.created_on.year).exclude(status_flag=0)
            # letter_no = str(x.created_on.year) + "/" + designation + "/Tour/" + str(len(temporary) + 1)
            letter_no = x.letter_no
            o1 = m1.schedule_remarks(remarks = "schedule modified", created_by=curr_user, given_by = designation, schedule_detail = existing_schedule, action_taken = 8, letter_no = letter_no)
            o1.save()
            remark_obj1 = m1.schedule_remarks(remarks="schedule submitted", created_by = curr_user, given_by = designation, schedule_detail = x, action_taken = 0, letter_no = letter_no)
            remark_obj1.save()
            remark_obj2 = m1.schedule_remarks(remarks="schedule pending with recommending officer", created_by = curr_user, given_by = designation, schedule_detail = x, action_taken = 1)
            remark_obj2.save()
            
            x.status_flag = 1

        x.save()

        for i in railway:
            b1 = m1.schedule_location(schedule_detail = x, type = "HQ", value=i, created_by = curr_user, last_mod_by = curr_user)
            b1.save()
        for i in division:
            b2 = m1.schedule_location(schedule_detail = x, type = "DIV", value=i, created_by = curr_user, last_mod_by = curr_user)
            b2.save()
        for i in location_type:
            b4 = m1.schedule_location(schedule_detail = a, type = "LOC_TYPE", value=i, created_by = curr_user, last_mod_by = curr_user)
            b4.save()
        for i in location:
            b5 = m1.schedule_location(schedule_detail = a, type = "LOC", value=i, created_by = curr_user, last_mod_by = curr_user)
            b5.save()

        for i in all_data[1]:
            if i == {}:
                continue
            date = i['date']
            date = datetime.strptime(date, "%d-%m-%Y").strftime("%Y-%m-%d")
            mode = i['mode']
            number = i['number']
            date1 = i['date1']
            date1 = datetime.strptime(date1, "%d-%m-%Y").strftime("%Y-%m-%d")
            if i['dep_hour'] != "":
                dep_hour = i['dep_hour']
            else:
                dep_hour = None
        
            if i['arr_hour'] != "":
                arr_hour = i['arr_hour']
            else:
                arr_hour = None
            
            from_ = i['from']
            to = i['to']
            purpose = i['purpose']
            if(dep_hour == None):
                dep_time = None
            else:
                hour, minute = map(int, dep_hour.split(':'))
                dep_time = f"{hour:02d}:{minute:02d}"
            if(arr_hour == None):
                arr_time = None
            else:
                hour, minute = map(int, arr_hour.split(':'))
                arr_time = f"{hour:02d}:{minute:02d}"

            b4 = m1.tour_detail(schedule_detail = x, date = date, end_date=date1, mode = mode, trans_detail = number, dep_time = dep_time, arr_time = arr_time, from_location = from_, to = to, purpose = purpose, delete_flag = 0)
            b4.save()

        return JsonResponse({"success":True}, status = 200)

#9)accept_schedule -

def accept_schedule(request):
    if request.method == 'POST' and request.is_ajax():
        schedule_id = request.POST.get('schedule_id')
        remarks = request.POST.get('remarks')
        schedule = m1.schedule_detail.objects.filter(id = schedule_id)[0]
        status = schedule.status_flag

        obj=models.Level_Desig.objects.exclude(official_email_ID = None).filter(Q(official_email_ID=request.user.username) | Q(official_email_ID=request.user.email)).values("designation","parent_desig_code","department","contactnumber","official_email_ID","empno_id", "empno_id__empno","empno_id__empname","empno_id__empmname","empno_id__emplname","empno_id__gender","empno_id__email","contactnumber","empno_id__currentzone", "empno_id__currentunitdivision","empno_id__appointmentdate","empno_id__superannuation_date","empno_id__pc7_level","empno_id__billunit","empno_id__service_status","empno_id__station_des")[0]

        email = obj['official_email_ID']
        user_id = obj['empno_id']

        # email = request.user
        curr_user_desig = models.Level_Desig.objects.filter(designation = obj['designation'])[0]
        curr_user = m1.empmast.objects.filter(empno=user_id)[0]

        last_entry = m1.schedule_remarks.objects.filter(schedule_detail = schedule)[0]

        if status==1 or schedule.forwarded_to_officer!=None:
            schedule.status_flag = 2
            schedule.last_modified_by = curr_user
            schedule.forwarded_to_officer = None
            remarks_obj1 = m1.schedule_remarks(remarks = "schedule pending with Sanctioning Authority", given_by = curr_user_desig, schedule_detail = schedule, action_taken = 2, created_by = last_entry.created_by, letter_no = last_entry.letter_no, remarks_by_officer = remarks)
            remarks_obj1.save()
        elif status==2:
            schedule.status_flag = 3
            schedule.last_modified_by = curr_user
            schedule.forwarded_to_officer = None
            remarks_obj2 = m1.schedule_remarks(remarks = "sanctioned final", given_by = curr_user_desig, schedule_detail = schedule, action_taken = 3, created_by = last_entry.created_by, letter_no = last_entry.letter_no, remarks_by_officer = remarks)
            remarks_obj2.save()
            all_marked = m1.schedule_marked.objects.filter(schedule_detail = schedule)
            for z in all_marked:
                z.view_flag = True
                z.save()
        schedule.save()
        return JsonResponse({"success":True}, status = 200)
    return JsonResponse({"success":False}, status = 400)
        
#10)reject_schedule -

def reject_schedule(request):
    if request.method == 'POST' and request.is_ajax():
        schedule_id = request.POST.get('schedule_id')
        remarks = request.POST.get('remarks')
        schedule = m1.schedule_detail.objects.filter(id = schedule_id)[0]
        status = schedule.status_flag

        obj=models.Level_Desig.objects.exclude(official_email_ID = None).filter(Q(official_email_ID=request.user.username) | Q(official_email_ID=request.user.email)).values("designation","parent_desig_code","department","contactnumber","official_email_ID","empno_id", "empno_id__empno","empno_id__empname","empno_id__empmname","empno_id__emplname","empno_id__gender","empno_id__email","contactnumber","empno_id__currentzone", "empno_id__currentunitdivision","empno_id__appointmentdate","empno_id__superannuation_date","empno_id__pc7_level","empno_id__billunit","empno_id__service_status","empno_id__station_des")[0]

        email = obj['official_email_ID']
        user_id = obj['empno_id']
        
        curr_user_desig = models.Level_Desig.objects.filter(designation = obj['designation'])[0]
        curr_user = m1.empmast.objects.filter(empno=user_id)[0]

        last_entry = m1.schedule_remarks.objects.filter(schedule_detail = schedule)[0]

        if schedule.forwarded_to_officer!=None:
            schedule.status_flag = 5
            schedule.last_modified_by = curr_user
            schedule.forwarded_to_officer = None
            remarks_obj1 = m1.schedule_remarks(remarks = "schedule rejected by "+curr_user_desig.designation, given_by = curr_user_desig, schedule_detail = schedule, action_taken = 10, created_by = last_entry.created_by, letter_no = last_entry.letter_no, remarks_by_officer = remarks)
            remarks_obj1.save()
        elif status == 1:
            schedule.status_flag = 5
            schedule.last_modified_by = curr_user
            schedule.forwarded_to_officer = None
            remarks_obj1 = m1.schedule_remarks(remarks = "schedule rejected by recommending officer", given_by = curr_user_desig, schedule_detail = schedule, action_taken = 4, created_by = last_entry.created_by, letter_no = last_entry.letter_no, remarks_by_officer = remarks)
            remarks_obj1.save()
        elif status == 2:
            schedule.status_flag = 5
            schedule.last_modified_by = curr_user
            schedule.forwarded_to_officer = None
            remarks_obj1 = m1.schedule_remarks(remarks = "schedule rejected by accepting officer", given_by = curr_user_desig, schedule_detail = schedule, action_taken = 5, created_by = last_entry.created_by, letter_no = last_entry.letter_no, remarks_by_officer = remarks)
            remarks_obj1.save()
        schedule.save()
        return JsonResponse({"success":True}, status = 200)
    return JsonResponse({"success":False}, status = 400)

#11)forward_schedule -
def forward_schedule(request):
    if request.method == 'POST' and request.is_ajax():
        schedule_id = request.POST.get('schedule_id')
        remarks = request.POST.get('remarks')
        forwarded_officer = request.POST.get('forwarded_officer')
        schedule = m1.schedule_detail.objects.filter(id = schedule_id)[0]

        obj=models.Level_Desig.objects.exclude(official_email_ID = None).filter(Q(official_email_ID=request.user.username) | Q(official_email_ID=request.user.email)).values("designation","parent_desig_code","department","contactnumber","official_email_ID","empno_id", "empno_id__empno","empno_id__empname","empno_id__empmname","empno_id__emplname","empno_id__gender","empno_id__email","contactnumber","empno_id__currentzone", "empno_id__currentunitdivision","empno_id__appointmentdate","empno_id__superannuation_date","empno_id__pc7_level","empno_id__billunit","empno_id__service_status","empno_id__station_des")[0]

        email = obj['official_email_ID']
        user_id = obj['empno_id']
        
        forwarded_officer_desig = models.Level_Desig.objects.filter(designation = forwarded_officer)[0]

        curr_user_desig = models.Level_Desig.objects.filter(designation = obj['designation'])[0]
        curr_user = m1.empmast.objects.filter(empno=user_id)[0]

        last_entry = m1.schedule_remarks.objects.filter(schedule_detail = schedule)[0]

        schedule.last_modified_by = curr_user
        schedule.forwarded_to_officer = forwarded_officer_desig
        remarks_obj1 = m1.schedule_remarks(remarks = "schedule forwarded to "+forwarded_officer+" by "+curr_user_desig.designation, given_by = curr_user_desig, schedule_detail = schedule, action_taken = 9, created_by = last_entry.created_by, letter_no = last_entry.letter_no, remarks_by_officer = remarks)
        remarks_obj1.save()
        schedule.save()

        return JsonResponse({"success":True}, status = 200)
    return JsonResponse({"success":False}, status = 400)

#12)upload_doc -
def upload_doc(request): 
    if request.method == "POST" and request.is_ajax():
        op = request.POST.get('op')
        # print(op)
        if op == 'upload':
            file=request.FILES.get('file')
            print(file)
            folder='inspection_doc/'
            fs=FileSystemStorage(location='media/inspection_doc/')
            # pic_filename = secure_filename(file.name)
            pic_filename = file.name
            filename = str(uuid.uuid1()) + "_" + pic_filename
            
            files=fs.save(file.name,file)
            
            f2 ='media/inspection_doc/'+str(files)
            os.rename(f2, 'media/inspection_doc/'+filename)
            files = filename
            data={'file':files}
            return JsonResponse(data, safe = False)
        # else:
        #     file=request.POST.get('file')
        #     os.remove(file[1:])
        #     return JsonResponse('', safe = False)
    return JsonResponse({'failure': False}, status=400)


#13)form -

def form(request):
    # try:
    if request.method=="POST" :
        rly=request.POST.get('zone')
        div=request.POST.get('division')
        dept=request.POST.get('department')
        loc=request.POST.get('location')
        inspection_date=request.POST.get('start')
        # print("@@@@@@@@@@@@@@@@@@@")
    # print('-----------', request.user)
    # print('-----------', request.user.username)
    # print('-----------', request.user.email)
    
    # empdata=m1.empmast.objects.filter(myuser_id=request.user).values('empmname','empno', 'desig_longdesc')
    
    obj=models.Level_Desig.objects.exclude(official_email_ID = None).filter(Q(official_email_ID=request.user.username) | Q(official_email_ID=request.user.email)).values("designation","parent_desig_code","department","contactnumber","official_email_ID","empno_id", "empno_id__empno","empno_id__empname","empno_id__empmname","empno_id__emplname","empno_id__gender","empno_id__email","contactnumber","empno_id__currentzone", "empno_id__currentunitdivision","empno_id__appointmentdate","empno_id__superannuation_date","empno_id__pc7_level","empno_id__billunit","empno_id__service_status","empno_id__station_des")[0]
    email = obj['official_email_ID']
    user_id = obj['empno_id']
    # print('OBJ = ', email)

    inspecting_officer = models.Level_Desig.objects.filter(designation = obj['designation'])[0]
    curr_user = m1.empmast.objects.filter(empno=user_id)[0]

    # print("CURR_USE = ", curr_user)
    draft_details = {"is_exists": False, "is_modify": False, "tour_count": 1}

    if request.method == "GET" and "draft_id" in request.GET and request.GET["draft_id"] != "":
        draft_id = request.GET["draft_id"]
        draft_details['draft_id'] = draft_id
        # draft_main = m1.schedule_detail.objects.filter(id=draft_id).filter(created_by = obj).filter(status_flag=0).filter(delete_flag = 0)
        # print(draft_main)
        draft_main = m1.schedule_detail.objects.filter(id=draft_id, inspecting_officer = inspecting_officer, status_flag=0, delete_flag = 0)

        if(len(draft_main) != 0):
            draft_details["is_exists"] = True
            draft_main = draft_main[0]
            draft_details['description'] = draft_main.tour_description
            draft_details['accompanied_by'] = draft_main.accompanied_by.split(',')
            draft_details['document'] = draft_main.document

            if draft_main.approving_officer != None:
                draft_details['approving_auth'] = draft_main.approving_officer.designation
            else:
                draft_details['approving_auth'] = ""

            if draft_main.recommending_officer != None:
                draft_details['recommending_officer'] = draft_main.recommending_officer.designation
            else:
                draft_details['recommending_officer'] = ""

            if draft_main.looking_after_officer != None:
                draft_details['looking_after_officer'] = draft_main.looking_after_officer.designation
            else:
                draft_details['looking_after_officer'] = ""

            rail_location = m1.schedule_location.objects.filter(schedule_detail = draft_main).values("type", "value")
            rail = []
            div = []
            loc_type = []
            loc = []

            for i in rail_location:
                if i['type'] == "HQ":
                    rail.append(i['value'])
                elif i['type'] == "DIV":
                    div.append(i['value'])
                elif i['type'] == "LOC":
                    loc.append(i['value'])
                elif i['type'] == "LOC_TYPE":
                    loc_type.append(i['value'])

            draft_details["rail"] = rail
            draft_details["div"] = div
            draft_details["loc"] = loc
            draft_details["loc_type"] = loc_type
            
            tour_details = m1.tour_detail.objects.filter(schedule_detail = draft_main).order_by('id')
            
            draft_details["tour_count"] = len(tour_details)
            tour = []
            
            for i in tour_details:
                temp_dict = {"date": i.date.strftime("%d-%m-%Y"), "mode": i.mode, "no": i.trans_detail, "from": i.from_location, "to": i.to, "purpose": i.purpose}
                if i.end_date != None:
                    temp_dict["date1"] = i.end_date.strftime("%d-%m-%Y")
                temp_dict["arr_hour"] = str(i.arr_time)
                temp_dict["dep_hour"] = str(i.dep_time)
                temp_dict["tour_id"] = i.id
                tour.append(temp_dict)

            all_marked = []
            marked = m1.schedule_marked.objects.filter(schedule_detail = draft_main)
            for x in marked:
                all_marked.append(x.marked_to.designation)
            draft_details['all_marked'] = all_marked
            draft_details["tour_details"] = tour

    elif request.method == "GET" and "modify_schedule_id" in request.GET and request.GET["modify_schedule_id"] != "":
        modify_schedule_id = request.GET["modify_schedule_id"]
        schedule = m1.schedule_detail.objects.filter(id=modify_schedule_id, inspecting_officer = inspecting_officer, status_flag=3, delete_flag = 0)
        draft_details['draft_id'] = modify_schedule_id
        # draft_main = ""
        if len(schedule) != 0:
            draft_main = schedule[0]
            draft_details["is_modify"] = True
            draft_details["modify_schedule_id"] = modify_schedule_id
            draft_details["is_exists"] = True
            draft_details['description'] = draft_main.tour_description
            draft_details['accompanied_by'] = draft_main.accompanied_by.split(',')
            draft_details['document'] = draft_main.document

            if draft_main.approving_officer != None:
                draft_details['approving_auth'] = draft_main.approving_officer.designation
            else:
                draft_details['approving_auth'] = ""

            if draft_main.recommending_officer != None:
                draft_details['recommending_officer'] = draft_main.recommending_officer.designation
            else:
                draft_details['recommending_officer'] = ""

            if draft_main.looking_after_officer != None:
                draft_details['looking_after_officer'] = draft_main.looking_after_officer.designation
            else:
                draft_details['looking_after_officer'] = ""

            rail_location = m1.schedule_location.objects.filter(schedule_detail = draft_main).values("type", "value")
            rail = []
            div = []
            loc = []
            loc_type = []

            for i in rail_location:
                if i['type'] == "HQ":
                    rail.append(i['value'])
                elif i['type'] == "DIV":
                    div.append(i['value'])
                elif i['type'] == "LOC":
                    loc.append(i["value"])
                elif i['type'] == "LOC_TYPE":
                    loc_type.append(i['value'])

            draft_details["rail"] = rail
            draft_details["div"] = div
            draft_details["loc"] = loc
            draft_details["loc_type"] = loc_type

            
            tour_details = m1.tour_detail.objects.filter(schedule_detail = draft_main)
            
            draft_details["tour_count"] = len(tour_details)
            tour = []
            
            for i in tour_details:
                temp_dict = {"date": i.date.strftime("%d-%m-%Y"), "mode": i.mode, "no": i.trans_detail, "from": i.from_location, "to": i.to, "purpose": i.purpose}
                if i.end_date != None:
                    temp_dict["date1"] = i.end_date.strftime("%d-%m-%Y")
                temp_dict["arr_hour"] = str(i.arr_time)
                temp_dict["dep_hour"] = str(i.dep_time)
                temp_dict["tour_id"] = i.id
                tour.append(temp_dict)
            draft_details["tour_details"] = tour
            all_marked = []
            marked = m1.schedule_marked.objects.filter(schedule_detail = draft_main)
            for x in marked:
                all_marked.append(x.marked_to.designation)
            draft_details['all_marked'] = all_marked
        print(draft_details)


    empdata = models.Level_Desig.objects.filter(official_email_ID=request.user).values('designation',  'empno')
    # print(empdata)
    # 'empno__empname','empno__empmname','empno__emplname',
    if empdata:
        desig_longdesc = empdata[0]['designation']
    else:
        desig_longdesc ='NA'

    
    # desig_longdesc = empdata[0]['desig_longdesc']
    # print('ttttttttttttttttttttttttttttttttttttttttttttttttttttttt', desig_longdesc)
    list1=models.railwayLocationMaster.objects.filter(Q(location_type_desc='RAILWAY BOARD')|Q(location_type_desc='HEAD QUATER')|Q(location_type_desc='PRODUCTION UNIT')|Q(location_type_desc='OFFICE')).values('location_code')
    list2=[]
    for i in list1:
        # print(i['location_code'],'_________')
        list2.append(i['location_code'])
    list3=models.railwayLocationMaster.objects.filter(Q(location_type_desc='DIVISION')|Q(location_type_desc='WORKSHOP')|Q(location_type_desc='INSTITUTE')|Q(location_type_desc='STORE')|Q(location_type_desc='CONSTRUCTION')).values('location_code','location_type')
    list4=[]
    list5 =[]
    for i in list3:
        # print(i['location_code'],'_________')
        list4.append(i['location_code']) 
    try:
        
        list5=list(models.Level_Desig.objects.all().values('designation','designation_code'))  
    except Exception as e:
        print("e==",e)  
    list6=models.departMast.objects.all().values('department_name')
    alldesig=models.Level_Desig.objects.values('designation').distinct().order_by('designation')
    desg_no=list(models.Level_Desig.objects.filter(designation__isnull=False,empno__isnull=False).values('designation','empno','designation_code').order_by('designation'))
    for i in range(len(desg_no)):
        if '/' in desg_no[i]['designation']:
            r_des=desg_no[i]['designation'].replace('/',' ')
        elif '.' in desg_no[i]['designation']:
            r_des=desg_no[i]['designation'].replace('.',' ')
        else:
            r_des=desg_no[i]['designation']
        desg_no[i].update({'empnoser':r_des})
        #print('aaaaaaaaaaaaaaaaaaa',desg_no[i]['designation'])

    

    all_current_drafts = m1.schedule_detail.objects.filter(status_flag='0', inspecting_officer=inspecting_officer, delete_flag = False).order_by("id")


    # print('all_current_drafts', all_current_drafts)

    all_drafts = []
    count_drafts = 0

    for i in all_current_drafts:
        rail = []
        loc = []
        loc_type = []
        try:
            rail_location = m1.schedule_location.objects.filter(schedule_detail = i).values("type", "value")
            for j in rail_location:
                # print(j)
                if(j["type"]=="HQ" or j["type"]=="DIV"):
                    rail.append(j["value"])
                elif j["type"]=="LOC":
                    loc.append(j["value"])
                else:
                    loc_type.append(j["value"])
        except:
            pass
        
        temp = {}
        all_tour = m1.tour_detail.objects.filter(schedule_detail = i).order_by('id')
        temp['from'] = "-"
        temp["to"] = "-"
        temp['number_of_days'] = "-"
        a = None
        b = None
        if len(all_tour) == 0:
            temp['from'] = "-"
            temp['to'] = "-"
        else:
            a = all_tour[0].date
            b = all_tour[len(all_tour)-1].end_date
        if a == None and b != None:
            temp['from'] = re.sub(" ", "/", str(b.strftime("%d %m %y")))
        elif a != None and b == None:
            temp['to'] = re.sub(" ", "/", str(a.strftime("%d %m %y")))
        elif a != None and b != None:
            temp['from'] = re.sub(" ", "/", str(all_tour[0].date.strftime("%d %m %y")))
            temp['to'] = re.sub(" ", "/", str(all_tour[len(all_tour)-1].end_date.strftime("%d %m %y")))
            temp['number_of_days'] = get_days_between_dates(temp['from'], temp['to'])

        count_drafts+=1
        
        temp['description'] = i.tour_description
        temp['created_on'] = re.sub(" ", "-", str(i.created_on.strftime("%d %m %y")))
        temp['id'] = i.id
        temp['rail'] = ",".join(rail)
        temp['location'] = ",".join(loc)
        temp['loc_type'] = loc_type
        all_drafts.append(temp)
    
    all_outbox_schedules = m1.schedule_detail.objects.filter(inspecting_officer = inspecting_officer, delete_flag = False).order_by("id").exclude(Q(status_flag="0") | Q(status_flag="3") | Q(status_flag="4") | Q(status_flag="5") | Q(status_flag="6") | Q(status_flag="7"))
    print(all_outbox_schedules)
    
    location_array = [{'type_code':'RRM', 'type': 'Running Room'},
                            {'type_code': 'SEM', 'type': 'Section'},
                            {'type_code': 'STM', 'type': 'Station'},
                            # {'type_code':'SOP' , 'type': 'Shop'},
                            {'type_code':'WOS' , 'type': 'Work Shop'},
                            {'type_code':'DLS' , 'type': 'Diesel Loco Shed'},
                            {'type_code':'ELS' , 'type': 'Electric Loco Shed'},
                            {'type_code':'COD' , 'type': 'Coaching Depot'},
                            {'type_code':'WAD' , 'type': 'Wagon Depot'},
                            { 'type_code': 'CTI', 'type': 'Training Institute'},
                            { 'type_code': 'TRN', 'type': 'Train'},
                            { 'type_code': 'HOS', 'type': 'Hospital'},
                        ]

    all_outbox = []
    count_outbox = 0
    designation = inspecting_officer.designation
    
    for i in all_outbox_schedules:
        temp = {}
        temp["id"] = i.id
        temp["previous_schedules"] = []
        remarks_data = []

        temp_prev_schedules = []
        temp_var = i.modified_new_schedule
        while(temp_var != None):
            temp_prev_schedules.append(temp_var)
            temp_var = temp_var.modified_new_schedule
        
        # temp_prev_schedules.reverse()
        iterator = len(temp_prev_schedules)
        for j in temp_prev_schedules:
            temp_schedules = {}
            all_tour = m1.tour_detail.objects.filter(schedule_detail = j).order_by("date")
            temp_schedules["counter"] = iterator
            iterator = iterator - 1
            tour = []
            for k in all_tour:
                tour_temp = {}
                tour_temp['date'] = re.sub(" ", "/", str(k.date.strftime("%d %m %y")))
                if k.end_date == None:
                    tour_temp['end_date'] = "-"
                else:
                    tour_temp['end_date'] = re.sub(" ", "/", str(k.end_date.strftime("%d %m %y")))
                tour_temp['mode'] = k.mode
                tour_temp['no'] = k.trans_detail
                tour_temp['arr_time'] = k.arr_time
                tour_temp['dep_time'] = k.dep_time
                tour_temp['from'] = k.from_location
                tour_temp['to'] = k.to
                tour_temp['purpose'] = k.purpose
                tour.append(tour_temp)
            
            temp_schedules['tour'] = tour
            all_remarks = m1.schedule_remarks.objects.filter(schedule_detail = j)
            for k in all_remarks:
                rem_temp = {}
                rem_temp['rem_date'] = re.sub(" ", "-", str(k.rem_date.strftime("%d %m %y")))
                rem_temp['remarks'] = k.remarks
                # rem_temp['given_by'] = models.Level_Desig.objects.filter(official_email_ID=j.given_by.email)[0].designation
                rem_temp['given_by'] = k.given_by.designation
                rem_temp['remarks_by_officer'] = k.remarks_by_officer
                remarks_data.append(rem_temp)
            rail = []
            only_rail = []
            only_div = []
            loc = []
            loc_type = []
            try:
                rail_location = m1.schedule_location.objects.filter(schedule_detail = j).values("type", "value")
                for k in rail_location:
                    if(k["type"]=="HQ" or k["type"]=="DIV"):
                        rail.append(k["value"])
                        if k["type"]=="HQ":
                            only_rail.append(k["value"])
                        else:
                            only_div.append(k["value"])
                    elif j["type"]=="LOC":
                        loc.append(j["value"])
                    else:
                        loc_type.append(j["value"])
            except:
                pass
            
            if j.recommending_officer == None:
                temp_schedules['recommending_officer'] = 'N/A'
            else:
                temp_schedules['recommending_officer'] = j.recommending_officer.designation

            if j.looking_after_officer == None:
                temp_schedules['looking_after_officer'] = 'N/A'
            else:
                temp_schedules['looking_after_officer'] = j.looking_after_officer.designation
            
            temp_schedules['approving_officer'] = j.approving_officer.designation

            temp_schedules['loc'] = ",".join(loc)
            temp_schedules['loc_type'] = ",".join(loc_type)
            temp_schedules['only_rail'] = ','.join(only_rail)
            temp_schedules['only_div'] =','.join(only_div)
            temp_schedules['accompanied_by'] = j.accompanied_by
            remarks = m1.schedule_remarks.objects.filter(schedule_detail = j).order_by("id")
            
            temp_schedules['sent_on'] = ""
            temp_schedules['sent_to'] = ""
            if len(remarks) != 0:
                temp_schedules['sent_on'] = remarks[1].rem_date
                sent_to = remarks[1].action_taken
                if sent_to == 1:
                    temp_schedules['sent_to'] = j.recommending_officer.designation
                elif sent_to == 2:
                    temp_schedules['sent_to'] = j.approving_officer.designation
            temp_schedules['rail'] = ','.join(rail)
            temp_schedules["letter_no"] = j.letter_no 
            temp_schedules["description"] = j.tour_description
            
            temp_schedules["date"] = re.sub(" ", "-", str(j.created_on.strftime("%d %m %y")))

            all_marked = m1.schedule_marked.objects.filter(schedule_detail = j)
            marked = []
            for k in all_marked:
                marked.append(k.marked_to.designation)
            temp_schedules["marked_to"] = ','.join(marked)
            
            temp["previous_schedules"].append(temp_schedules)

        print(temp["previous_schedules"])

        all_tour = m1.tour_detail.objects.filter(schedule_detail = i).order_by("date")
        tour = []
        for j in all_tour:
            tour_temp = {}
            tour_temp['date'] = re.sub(" ", "/", str(j.date.strftime("%d %m %y")))
            if j.end_date == None:
                tour_temp['end_date'] = "-"
            else:
                tour_temp['end_date'] = re.sub(" ", "/", str(j.end_date.strftime("%d %m %y")))
            tour_temp['mode'] = j.mode
            tour_temp['no'] = j.trans_detail
            tour_temp['arr_time'] = str(j.arr_time)
            tour_temp['dep_time'] = str(j.dep_time)
            # print('arr_time = ', j.arr_time, " j.dep_time = ", j.dep_time)
            tour_temp['from'] = j.from_location
            tour_temp['to'] = j.to
            tour_temp['purpose'] = j.purpose
            tour.append(tour_temp)
        
        temp['tour'] = tour

        rem = m1.schedule_remarks.objects.filter(schedule_detail = i).order_by("id")
        if len(rem) != 0:
            temp["remarks"] = re.sub(" ", "-", str(rem[1].rem_date.strftime("%d %m %y")))
        else:
            temp["remarks"] = "-"

        all_remarks = m1.schedule_remarks.objects.filter(schedule_detail = i)
        
        for j in all_remarks:
            rem_temp = {}
            rem_temp['rem_date'] = re.sub(" ", "-", str(j.rem_date.strftime("%d %m %y")))
            rem_temp['remarks'] = j.remarks
            # rem_temp['given_by'] = models.Level_Desig.objects.filter(official_email_ID=j.given_by.email)[0].designation
            rem_temp['given_by'] = j.given_by.designation
            if j.remarks_by_officer == "":
                rem_temp['remarks_by_officer'] = "-"
            else:
                rem_temp['remarks_by_officer'] = j.remarks_by_officer
            remarks_data.append(rem_temp)
        temp['remarks_data'] = remarks_data
        rail = []
        only_rail = []
        only_div = []
        loc = []
        loc_type = []
        try:
            rail_location = m1.schedule_location.objects.filter(schedule_detail = i).values("type", "value")
            for j in rail_location:
                if(j["type"]=="HQ" or j["type"]=="DIV"):
                    rail.append(j["value"])
                    if j["type"]=="HQ":
                        only_rail.append(j["value"])
                    else:
                        only_div.append(j["value"])
                elif j["type"]=="LOC":
                    loc.append(j["value"])
                else:
                    loc_type.append(j["value"])
        except:
            pass
        
        
        if i.recommending_officer == None:
            temp['recommending_officer'] = 'N/A'
        else:
            temp['recommending_officer'] = i.recommending_officer.designation

        if i.looking_after_officer == None:
            temp['looking_after_officer'] = 'N/A'
        else:
            temp['looking_after_officer'] = i.looking_after_officer.designation
        
        temp['approving_officer'] = i.approving_officer.designation
        temp['document'] = i.document

        temp['only_rail'] = ','.join(only_rail)
        temp['only_div'] =','.join(only_div)
        temp['loc'] = ",".join(loc)
        print('location = ', temp['loc'])
        temp['loc_type'] = ",".join(loc_type)
        temp['accompanied_by'] = i.accompanied_by
        
        all_marked = m1.schedule_marked.objects.filter(schedule_detail = i)
        marked = []
        for k in all_marked:
            marked.append(k.marked_to.designation)
        temp["marked_to"] = ','.join(marked)

        temp['sent_on'] = ""
        temp['sent_to'] = ""

        remarks = m1.schedule_remarks.objects.filter(schedule_detail = i).order_by("id")
        if len(remarks) != 0:
            temp['sent_on'] = remarks[1].rem_date
            sent_to = remarks[1].action_taken
            if sent_to == 1:
                temp['sent_to'] = i.recommending_officer.designation
            elif sent_to == 2:
                temp['sent_to'] = i.approving_officer.designation
        temp['rail'] = ','.join(rail)
        temp["letter_no"] = i.letter_no 
        temp["description"] = i.tour_description
        temp["date"] = re.sub(" ", "-", str(i.created_on.strftime("%d %m %y")))

        all_tour = m1.tour_detail.objects.filter(schedule_detail = i).order_by('id')
        temp['from'] = "-"
        temp["to"] = "-"
        temp['number_of_days'] = "-"
        a = None
        b = None
        if len(all_tour) == 0:
            temp['from'] = "-"
            temp['to'] = "-"
        else:
            a = all_tour[0].date
            b = all_tour[len(all_tour)-1].end_date
        if a == None and b != None:
            temp['to'] = re.sub(" ", "/", str(b.strftime("%d %m %y")))
        elif a != None and b == None:
            temp['from'] = re.sub(" ", "/", str(a.strftime("%d %m %y")))
        elif a != None and b != None:
            temp['from'] = re.sub(" ", "/", str(all_tour[0].date.strftime("%d %m %y")))
            temp['to'] = re.sub(" ", "/", str(all_tour[len(all_tour)-1].end_date.strftime("%d %m %y")))
            temp['number_of_days'] = get_days_between_dates(temp['from'], temp['to'])

        all_outbox.append(temp)
        count_outbox+=1

    all_accepted_schedules = m1.schedule_detail.objects.filter(Q(inspecting_officer = inspecting_officer, delete_flag = False, status_flag = 3) | Q(inspecting_officer = inspecting_officer, delete_flag = False, status_flag = 4) | Q(inspecting_officer = inspecting_officer, delete_flag = False, status_flag = 7)).order_by("created_on")
    print(all_accepted_schedules)
    all_accepted = []
    count_accepted = 0
    for i in all_accepted_schedules:
        temp = {}
        temp['id'] = i.id
        temp["previous_schedules"] = []
        remarks_data = []

        temp_prev_schedules = []
        temp_var = i.modified_new_schedule
        while(temp_var != None):
            temp_prev_schedules.append(temp_var)
            temp_var = temp_var.modified_new_schedule
        
        # temp_prev_schedules.reverse()
        iterator = len(temp_prev_schedules)
        for j in temp_prev_schedules:
            temp_schedules = {}
            all_tour = m1.tour_detail.objects.filter(schedule_detail = j).order_by("date")
            temp_schedules["counter"] = iterator
            iterator = iterator - 1
            tour = []
            for k in all_tour:
                tour_temp = {}
                tour_temp['date'] = re.sub(" ", "/", str(k.date.strftime("%d %m %y")))
                if k.end_date == None:
                    tour_temp['end_date'] = "-"
                else:
                    tour_temp['end_date'] = re.sub(" ", "/", str(k.end_date.strftime("%d %m %y")))
                tour_temp['mode'] = k.mode
                tour_temp['no'] = k.trans_detail
                tour_temp['arr_time'] = k.arr_time
                tour_temp['dep_time'] = k.dep_time
                tour_temp['from'] = k.from_location
                tour_temp['to'] = k.to
                tour_temp['purpose'] = k.purpose
                tour.append(tour_temp)
            
            temp_schedules['tour'] = tour
            all_remarks = m1.schedule_remarks.objects.filter(schedule_detail = j)
            for k in all_remarks:
                rem_temp = {}
                rem_temp['rem_date'] = re.sub(" ", "-", str(k.rem_date.strftime("%d %m %y")))
                rem_temp['remarks'] = k.remarks
                # rem_temp['given_by'] = models.Level_Desig.objects.filter(official_email_ID=j.given_by.email)[0].designation
                rem_temp['given_by'] = k.given_by.designation
                rem_temp['remarks_by_officer'] = k.remarks_by_officer
                remarks_data.append(rem_temp)
            rail = []
            only_rail = []
            only_div = []
            try:
                rail_location = m1.schedule_location.objects.filter(schedule_detail = j).values("type", "value")
                for k in rail_location:
                    if(k["type"]=="HQ" or k["type"]=="DIV"):
                        rail.append(k["value"])
                        if k["type"]=="HQ":
                            only_rail.append(k["value"])
                        else:
                            only_div.append(k["value"])
                    else:
                        temp['location'] = k["value"]
            except:
                pass
            
            if j.recommending_officer == None:
                temp_schedules['recommending_officer'] = 'N/A'
            else:
                temp_schedules['recommending_officer'] = j.recommending_officer.designation

            if j.looking_after_officer == None:
                temp_schedules['looking_after_officer'] = 'N/A'
            else:
                temp_schedules['looking_after_officer'] = j.looking_after_officer.designation
            
            temp_schedules['approving_officer'] = j.approving_officer.designation

            temp_schedules['only_rail'] = ','.join(only_rail)
            temp_schedules['only_div'] =','.join(only_div)
            temp_schedules['accompanied_by'] = j.accompanied_by
            remarks = m1.schedule_remarks.objects.filter(schedule_detail = j).order_by("id")
            
            temp_schedules['sent_on'] = ""
            temp_schedules['sent_to'] = ""
            if len(remarks) != 0:
                temp_schedules['sent_on'] = remarks[1].rem_date
                sent_to = remarks[1].action_taken
                if sent_to == 1:
                    temp_schedules['sent_to'] = j.recommending_officer.designation
                elif sent_to == 2:
                    temp_schedules['sent_to'] = j.approving_officer.designation
            temp_schedules['rail'] = ','.join(rail)
            temp_schedules["letter_no"] = j.letter_no 
            temp_schedules["description"] = j.tour_description
            temp_schedules["date"] = re.sub(" ", "-", str(j.created_on.strftime("%d %m %y")))

            all_marked = m1.schedule_marked.objects.filter(schedule_detail = j)
            marked = []
            for k in all_marked:
                marked.append(k.marked_to.designation)
            temp_schedules["marked_to"] = ','.join(marked)

            temp["previous_schedules"].append(temp_schedules)
        temp['status'] = i.status_flag
        all_tour = m1.tour_detail.objects.filter(schedule_detail = i)
        tour = []
        for j in all_tour:
            tour_temp = {}
            tour_temp['date'] = re.sub(" ", "/", str(j.date.strftime("%d %m %y")))
            if j.end_date == None:
                tour_temp['end_date'] = "-"
            else:
                tour_temp['end_date'] = re.sub(" ", "/", str(j.end_date.strftime("%d %m %y")))
            tour_temp['mode'] = j.mode
            tour_temp['no'] = j.trans_detail
            tour_temp['arr_time'] = j.arr_time
            tour_temp['dep_time'] = j.dep_time
            tour_temp['from'] = j.from_location
            tour_temp['to'] = j.to
            tour_temp['purpose'] = j.purpose
            tour.append(tour_temp)
        
        temp['tour'] = tour
        all_remarks = m1.schedule_remarks.objects.filter(schedule_detail = i)
        # remarks_data = []
        temp['approved_on']=''
        temp['approved_by']=''
        for j in all_remarks:
            rem_temp = {}
            rem_temp['rem_date'] = re.sub(" ", "/", str(j.rem_date.strftime("%d %m %y")))
            rem_temp['remarks'] = j.remarks
            # rem_temp['given_by'] = models.Level_Desig.objects.filter(official_email_ID=j.given_by.email)[0].designation
            rem_temp['given_by'] = j.given_by.designation
            rem_temp['remarks_by_officer'] = j.remarks_by_officer
            temp['approved_on'] = re.sub(" ", "/", str(j.rem_date.strftime("%d %m %y")))
            temp['approved_by'] = j.given_by.designation
            remarks_data.append(rem_temp)
        temp['remarks_data'] = remarks_data
        rail = []
        only_rail = []
        only_div = []
        try:
            rail_location = m1.schedule_location.objects.filter(schedule_detail = i).values("type", "value")
            for j in rail_location:
                if(j["type"]=="HQ" or j["type"]=="DIV"):
                    rail.append(j["value"])
                    if j["type"]=="HQ":
                        only_rail.append(j["value"])
                    else:
                        only_div.append(j["value"])
                else:
                    temp['location'] = j["value"]
        except:
            pass
        
        if i.recommending_officer == None:
            temp['recommending_officer'] = 'N/A'
        else:
            temp['recommending_officer'] = i.recommending_officer.designation

        if i.looking_after_officer == None:
            temp['looking_after_officer'] = 'N/A'
        else:
            temp['looking_after_officer'] = i.looking_after_officer.designation
        
        temp['approving_officer'] = i.approving_officer.designation
        temp['document'] = i.document

        temp['only_rail'] = ','.join(only_rail)
        temp['only_div'] =','.join(only_div)
        temp['accompanied_by'] = i.accompanied_by
        remarks = m1.schedule_remarks.objects.filter(schedule_detail = i).order_by("id")
        # print(remarks)
        temp['sent_on'] = ""
        temp['sent_to'] = ""
        if len(remarks) != 0:
            temp['sent_on'] = remarks[1].rem_date
            sent_to = remarks[1].action_taken
            if sent_to == 1:
                temp['sent_to'] = i.recommending_officer.designation
            elif sent_to == 2:
                temp['sent_to'] = i.approving_officer.designation
        temp['rail'] = ','.join(rail)
        temp["letter_no"] = i.letter_no 
        temp["description"] = i.tour_description
        temp["date"] = re.sub(" ", "/", str(i.created_on.strftime("%d %m %y")))

        all_tour = m1.tour_detail.objects.filter(schedule_detail = i).order_by('id')
        temp['from'] = "-"
        temp["to"] = "-"
        temp['number_of_days'] = "-"
        a = None
        b = None
        if len(all_tour) == 0:
            temp['from'] = "-"
            temp['to'] = "-"
        else:
            a = all_tour[0].date
            b = all_tour[len(all_tour)-1].end_date
        if a == None and b != None:
            temp['to'] = re.sub(" ", "/", str(b.strftime("%d %m %y")))
        elif a != None and b == None:
            temp['from'] = re.sub(" ", "/", str(a.strftime("%d %m %y")))
        elif a != None and b != None:
            temp['from'] = re.sub(" ", "/", str(all_tour[0].date.strftime("%d %m %y")))
            temp['to'] = re.sub(" ", "/", str(all_tour[len(all_tour)-1].end_date.strftime("%d %m %y")))
            temp['number_of_days'] = get_days_between_dates(temp['from'], temp['to'])

        all_marked = m1.schedule_marked.objects.filter(schedule_detail = i)
        marked = []
        for k in all_marked:
            marked.append(k.marked_to.designation)
        temp["marked_to"] = ','.join(marked)

        temp["id"] = i.id
        all_accepted.append(temp)
        count_accepted+=1

    
    all_rejected_schedules = m1.schedule_detail.objects.filter(inspecting_officer = inspecting_officer, delete_flag = False, status_flag = 5)
    all_rejected = []
    count_rejected = 0
    for i in all_rejected_schedules:
        temp = {}
        temp["id"] = i.id
        temp["previous_schedules"] = []
        remarks_data = []

        temp_prev_schedules = []
        temp_var = i.modified_new_schedule
        while(temp_var != None):
            temp_prev_schedules.append(temp_var)
            temp_var = temp_var.modified_new_schedule
        
        # temp_prev_schedules.reverse()
        iterator = len(temp_prev_schedules)
        for j in temp_prev_schedules:
            temp_schedules = {}
            all_tour = m1.tour_detail.objects.filter(schedule_detail = j).order_by("date")
            temp_schedules["counter"] = iterator
            iterator = iterator - 1
            tour = []
            for k in all_tour:
                tour_temp = {}
                tour_temp['date'] = re.sub(" ", "-", str(k.date.strftime("%d %m %y")))
                if k.end_date == None:
                    tour_temp['end_date'] = "-"
                else:
                    tour_temp['end_date'] = re.sub(" ", "/", str(k.end_date.strftime("%d %m %y")))
                tour_temp['mode'] = k.mode
                tour_temp['no'] = k.trans_detail
                tour_temp['arr_time'] = k.arr_time
                tour_temp['dep_time'] = k.dep_time
                tour_temp['from'] = k.from_location
                tour_temp['to'] = k.to
                tour_temp['purpose'] = k.purpose
                tour.append(tour_temp)
            
            temp_schedules['tour'] = tour
            all_remarks = m1.schedule_remarks.objects.filter(schedule_detail = j)
            for k in all_remarks:
                rem_temp = {}
                rem_temp['rem_date'] = re.sub(" ", "-", str(k.rem_date.strftime("%d %m %y")))
                rem_temp['remarks'] = k.remarks
                # rem_temp['given_by'] = models.Level_Desig.objects.filter(official_email_ID=j.given_by.email)[0].designation
                rem_temp['given_by'] = k.given_by.designation
                rem_temp['remarks_by_officer'] = k.remarks_by_officer
                remarks_data.append(rem_temp)
            rail = []
            only_rail = []
            only_div = []
            try:
                rail_location = m1.schedule_location.objects.filter(schedule_detail = j).values("type", "value")
                for k in rail_location:
                    if(k["type"]=="HQ" or k["type"]=="DIV"):
                        rail.append(k["value"])
                        if k["type"]=="HQ":
                            only_rail.append(k["value"])
                        else:
                            only_div.append(k["value"])
                    else:
                        temp['location'] = k["value"]
            except:
                pass
            
            if j.recommending_officer == None:
                temp_schedules['recommending_officer'] = 'N/A'
            else:
                temp_schedules['recommending_officer'] = j.recommending_officer.designation

            if j.looking_after_officer == None:
                temp_schedules['looking_after_officer'] = 'N/A'
            else:
                temp_schedules['looking_after_officer'] = j.looking_after_officer.designation
            
            temp_schedules['approving_officer'] = j.approving_officer.designation

            temp_schedules['only_rail'] = ','.join(only_rail)
            temp_schedules['only_div'] =','.join(only_div)
            temp_schedules['accompanied_by'] = j.accompanied_by
            remarks = m1.schedule_remarks.objects.filter(schedule_detail = j).order_by("id")
            
            temp_schedules['sent_on'] = ""
            temp_schedules['sent_to'] = ""
            if len(remarks) != 0:
                temp_schedules['sent_on'] = remarks[1].rem_date
                sent_to = remarks[1].action_taken
                if sent_to == 1:
                    temp_schedules['sent_to'] = j.recommending_officer.designation
                elif sent_to == 2:
                    temp_schedules['sent_to'] = j.approving_officer.designation
            temp_schedules['rail'] = ','.join(rail)
            temp_schedules["letter_no"] = j.letter_no 
            temp_schedules["description"] = j.tour_description
            temp_schedules["date"] = re.sub(" ", "-", str(j.created_on.strftime("%d %m %y")))

            all_marked = m1.schedule_marked.objects.filter(schedule_detail = j)
            marked = []
            for k in all_marked:
                marked.append(k.marked_to.designation)
            temp_schedules["marked_to"] = ','.join(marked)

            temp["previous_schedules"].append(temp_schedules)
        all_tour = m1.tour_detail.objects.filter(schedule_detail = i).order_by("date")
        tour = []
        for j in all_tour:
            tour_temp = {}
            tour_temp['date'] = re.sub(" ", "-", str(j.date.strftime("%d %m %y")))
            if j.end_date == None:
                tour_temp['end_date'] = "-"
            else:
                tour_temp['end_date'] = re.sub(" ", "/", str(j.end_date.strftime("%d %m %y")))
            tour_temp['mode'] = j.mode
            tour_temp['no'] = j.trans_detail
            tour_temp['arr_time'] = j.arr_time
            tour_temp['dep_time'] = j.dep_time
            tour_temp['from'] = j.from_location
            tour_temp['to'] = j.to
            tour_temp['purpose'] = j.purpose
            tour.append(tour_temp)
        
        temp['tour'] = tour
        all_remarks = m1.schedule_remarks.objects.filter(schedule_detail = i)
        # remarks_data = []
        temp['approved_on']=''
        temp['approved_by']=''
        for j in all_remarks:
            rem_temp = {}
            rem_temp['rem_date'] = re.sub(" ", "-", str(j.rem_date.strftime("%d %m %y")))
            rem_temp['remarks'] = j.remarks
            # rem_temp['given_by'] = models.Level_Desig.objects.filter(official_email_ID=j.given_by.email)[0].designation
            rem_temp['given_by'] = j.given_by.designation
            rem_temp['remarks_by_officer'] = j.remarks_by_officer
            temp['approved_on'] = re.sub(" ", "/", str(j.rem_date.strftime("%d %m %y")))
            temp['approved_by'] = j.given_by.designation
            remarks_data.append(rem_temp)
        temp['remarks_data'] = remarks_data
        rail = []
        only_rail = []
        only_div = []
        try:
            rail_location = m1.schedule_location.objects.filter(schedule_detail = i).values("type", "value")
            for j in rail_location:
                if(j["type"]=="HQ" or j["type"]=="DIV"):
                    rail.append(j["value"])
                    if j["type"]=="HQ":
                        only_rail.append(j["value"])
                    else:
                        only_div.append(j["value"])
                else:
                    temp['location'] = j["value"]
        except:
            pass
        
        if i.recommending_officer == None:
            temp['recommending_officer'] = 'N/A'
        else:
            temp['recommending_officer'] = i.recommending_officer.designation

        if i.looking_after_officer == None:
            temp['looking_after_officer'] = 'N/A'
        else:
            temp['looking_after_officer'] = i.looking_after_officer.designation
        
        temp['approving_officer'] = i.approving_officer.designation
        temp['document'] = i.document

        temp['only_rail'] = ','.join(only_rail)
        temp['only_div'] =','.join(only_div)
        temp['accompanied_by'] = i.accompanied_by
        remarks = m1.schedule_remarks.objects.filter(schedule_detail = i).order_by("id")
        # print(remarks)
        temp['sent_on'] = ""
        temp['sent_to'] = ""
        if len(remarks) != 0:
            temp['sent_on'] = remarks[1].rem_date
            sent_to = remarks[1].action_taken
            if sent_to == 1:
                temp['sent_to'] = i.recommending_officer.designation
            elif sent_to == 2:
                temp['sent_to'] = i.approving_officer.designation
        temp['rail'] = ','.join(rail)
        temp["letter_no"] = i.letter_no 
        temp["description"] = i.tour_description
        # temp["date"] = re.sub(" ", "-", str(i.created_on.strftime("%d %m %y")))
        rem = m1.schedule_remarks.objects.filter(schedule_detail = i).order_by("id")
        if len(rem) != 0:
            temp["date"] = re.sub(" ", "/", str(rem[1].rem_date.strftime("%d %m %y")))
        else:
            temp["date"] = "-"

        all_marked = m1.schedule_marked.objects.filter(schedule_detail = i)
        marked = []
        for k in all_marked:
            marked.append(k.marked_to.designation)
        temp["marked_to"] = ','.join(marked)

        all_rejected.append(temp)
        count_rejected+=1

    curr_user_desig_obj = inspecting_officer
    all_inbox_schedules = []
    all_inbox_schedules_forwarding = m1.schedule_detail.objects.filter(forwarded_to_officer = curr_user_desig_obj).exclude(inspecting_officer = inspecting_officer)
    all_inbox_schedules_recommending = m1.schedule_detail.objects.filter(status_flag = 1, recommending_officer = curr_user_desig_obj, forwarded_to_officer = None).exclude(inspecting_officer = inspecting_officer)
    all_inbox_schedules_approving = m1.schedule_detail.objects.filter(status_flag = 2, approving_officer = curr_user_desig_obj, forwarded_to_officer = None).exclude(inspecting_officer = inspecting_officer)


    count_inbox = 0
    for i in all_inbox_schedules_forwarding:
        temp = {}
        temp['status_flag'] = 1
        temp["previous_schedules"] = []
        remarks_data = []

        temp_prev_schedules = []
        temp_var = i.modified_new_schedule
        while(temp_var != None):
            temp_prev_schedules.append(temp_var)
            temp_var = temp_var.modified_new_schedule
        
        # temp_prev_schedules.reverse()
        iterator = len(temp_prev_schedules)
        for j in temp_prev_schedules:
            temp_schedules = {}
            all_tour = m1.tour_detail.objects.filter(schedule_detail = j).order_by("date")
            temp_schedules["counter"] = iterator
            iterator = iterator - 1
            tour = []
            for k in all_tour:
                tour_temp = {}
                tour_temp['date'] = re.sub(" ", "-", str(k.date.strftime("%d %m %y")))
                if k.end_date == None:
                    tour_temp['end_date'] = "-"
                else:
                    tour_temp['end_date'] = re.sub(" ", "/", str(k.end_date.strftime("%d %m %y")))
                tour_temp['mode'] = k.mode
                tour_temp['no'] = k.trans_detail
                tour_temp['arr_time'] = k.arr_time
                tour_temp['dep_time'] = k.dep_time
                tour_temp['from'] = k.from_location
                tour_temp['to'] = k.to
                tour_temp['purpose'] = k.purpose
                tour.append(tour_temp)
            
            temp_schedules['tour'] = tour
            all_remarks = m1.schedule_remarks.objects.filter(schedule_detail = j)
            for k in all_remarks:
                rem_temp = {}
                rem_temp['rem_date'] = re.sub(" ", "-", str(k.rem_date.strftime("%d %m %y")))
                rem_temp['remarks'] = k.remarks
                # rem_temp['given_by'] = models.Level_Desig.objects.filter(official_email_ID=j.given_by.email)[0].designation
                rem_temp['given_by'] = k.given_by.designation
                rem_temp['remarks_by_officer'] = k.remarks_by_officer
                remarks_data.append(rem_temp)
            rail = []
            only_rail = []
            only_div = []
            try:
                rail_location = m1.schedule_location.objects.filter(schedule_detail = j).values("type", "value")
                for k in rail_location:
                    if(k["type"]=="HQ" or k["type"]=="DIV"):
                        rail.append(k["value"])
                        if k["type"]=="HQ":
                            only_rail.append(k["value"])
                        else:
                            only_div.append(k["value"])
                    else:
                        temp['location'] = k["value"]
            except:
                pass
            
            if j.recommending_officer == None:
                temp_schedules['recommending_officer'] = 'N/A'
            else:
                temp_schedules['recommending_officer'] = j.recommending_officer.designation

            if j.looking_after_officer == None:
                temp_schedules['looking_after_officer'] = 'N/A'
            else:
                temp_schedules['looking_after_officer'] = j.looking_after_officer.designation
            
            temp_schedules['approving_officer'] = j.approving_officer.designation

            temp_schedules['only_rail'] = ','.join(only_rail)
            temp_schedules['only_div'] =','.join(only_div)
            temp_schedules['accompanied_by'] = j.accompanied_by
            remarks = m1.schedule_remarks.objects.filter(schedule_detail = j).order_by("id")
            
            temp_schedules['sent_on'] = ""
            temp_schedules['sent_to'] = ""
            if len(remarks) != 0:
                temp_schedules['sent_on'] = remarks[1].rem_date
                sent_to = remarks[1].action_taken
                if sent_to == 1:
                    temp_schedules['sent_to'] = j.recommending_officer.designation
                elif sent_to == 2:
                    temp_schedules['sent_to'] = j.approving_officer.designation
            temp_schedules['rail'] = ','.join(rail)
            temp_schedules["letter_no"] = j.letter_no 
            temp_schedules["description"] = j.tour_description
            temp_schedules["date"] = re.sub(" ", "-", str(j.created_on.strftime("%d %m %y")))

            temp["previous_schedules"].append(temp_schedules)
        all_tour = m1.tour_detail.objects.filter(schedule_detail = i).order_by("date")
        tour = []
        for j in all_tour:
            tour_temp = {}
            tour_temp['date'] = re.sub(" ", "-", str(j.date.strftime("%d %m %y")))
            if j.end_date == None:
                tour_temp['end_date'] = "-"
            else:
                tour_temp['end_date'] = re.sub(" ", "/", str(j.end_date.strftime("%d %m %y")))
            # print(tour_temp['end_date'])
            tour_temp['mode'] = j.mode
            tour_temp['no'] = j.trans_detail
            tour_temp['arr_time'] = j.arr_time
            tour_temp['dep_time'] = j.dep_time
            tour_temp['from'] = j.from_location
            tour_temp['to'] = j.to
            tour_temp['purpose'] = j.purpose
            tour.append(tour_temp)
        
        temp['tour'] = tour
        temp['id'] = i.id
        
        all_remarks = m1.schedule_remarks.objects.filter(schedule_detail = i)

        temp['remark_to_be_shown'] = "-"
        # remarks_data = []
        for j in all_remarks:
            rem_temp = {}
            rem_temp['rem_date'] = re.sub(" ", "/", str(j.rem_date.strftime("%d %m %y")))
            rem_temp['remarks'] = j.remarks
            # rem_temp['created_by'] = models.Level_Desig.objects.filter(official_email_ID=j.created_by.email)[0].designation
            rem_temp['given_by'] = j.given_by.designation
            if j.remarks_by_officer != None:
                rem_temp['remarks_by_officer'] = j.remarks_by_officer
            else:
                rem_temp['remarks_by_officer'] = "-"
            if j.remarks_by_officer != None:
                temp['remark_to_be_shown'] = j.remarks_by_officer
            remarks_data.append(rem_temp)
        temp['remarks_data'] = remarks_data

        rail = []
        rail_location = m1.schedule_location.objects.filter(schedule_detail = i, type="HQ")
        for j in rail_location:
            rail.append(j.value)
        temp['rail'] = ','.join(rail)

        div = []
        div_location = m1.schedule_location.objects.filter(schedule_detail = i, type="DIV")
        for j in div_location:
            div.append(j.value)
        temp['div'] = ','.join(div)

        temp['location'] = m1.schedule_location.objects.filter(schedule_detail = i, type="LOC")
        if len(temp['location'])!=0:
            temp['location'] = temp['location'][0].value
        else:
            temp['location'] = ""
        
        if i.recommending_officer == None:
            temp['recommending_officer'] = 'N/A'
        else:
            temp['recommending_officer'] = i.recommending_officer.designation

        if i.looking_after_officer == None:
            temp['looking_after_officer'] = 'N/A'
        else:
            temp['looking_after_officer'] = i.looking_after_officer.designation
        
        temp['approving_officer'] = i.approving_officer.designation
        temp['document'] = i.document

        temp['accompanied_by'] = i.accompanied_by
        
        temp['letter_no'] = i.letter_no
        temp['description'] = i.tour_description
        temp['sent_by'] = models.Level_Desig.objects.filter(empno_id=i.created_by.empno)[0].designation
        count_inbox += 1
        all_inbox_schedules.append(temp)

    for i in all_inbox_schedules_recommending:
        temp = {}
        temp['status_flag'] = i.status_flag
        temp["previous_schedules"] = []
        remarks_data = []

        temp_prev_schedules = []
        temp_var = i.modified_new_schedule
        while(temp_var != None):
            temp_prev_schedules.append(temp_var)
            temp_var = temp_var.modified_new_schedule
        
        # temp_prev_schedules.reverse()
        iterator = len(temp_prev_schedules)
        for j in temp_prev_schedules:
            temp_schedules = {}
            all_tour = m1.tour_detail.objects.filter(schedule_detail = j).order_by("date")
            temp_schedules["counter"] = iterator
            iterator = iterator - 1
            tour = []
            for k in all_tour:
                tour_temp = {}
                tour_temp['date'] = re.sub(" ", "-", str(k.date.strftime("%d %m %y")))
                if k.end_date == None:
                    tour_temp['end_date'] = "-"
                else:
                    tour_temp['end_date'] = re.sub(" ", "/", str(k.end_date.strftime("%d %m %y")))
                tour_temp['mode'] = k.mode
                tour_temp['no'] = k.trans_detail
                tour_temp['arr_time'] = k.arr_time
                tour_temp['dep_time'] = k.dep_time
                tour_temp['from'] = k.from_location
                tour_temp['to'] = k.to
                tour_temp['purpose'] = k.purpose
                tour.append(tour_temp)
            
            temp_schedules['tour'] = tour
            all_remarks = m1.schedule_remarks.objects.filter(schedule_detail = j)
            for k in all_remarks:
                rem_temp = {}
                rem_temp['rem_date'] = re.sub(" ", "-", str(k.rem_date.strftime("%d %m %y")))
                rem_temp['remarks'] = k.remarks
                # rem_temp['given_by'] = models.Level_Desig.objects.filter(official_email_ID=j.given_by.email)[0].designation
                rem_temp['given_by'] = k.given_by.designation
                rem_temp['remarks_by_officer'] = k.remarks_by_officer
                remarks_data.append(rem_temp)
            rail = []
            only_rail = []
            only_div = []
            try:
                rail_location = m1.schedule_location.objects.filter(schedule_detail = j).values("type", "value")
                for k in rail_location:
                    if(k["type"]=="HQ" or k["type"]=="DIV"):
                        rail.append(k["value"])
                        if k["type"]=="HQ":
                            only_rail.append(k["value"])
                        else:
                            only_div.append(k["value"])
                    else:
                        temp['location'] = k["value"]
            except:
                pass
            
            if j.recommending_officer == None:
                temp_schedules['recommending_officer'] = 'N/A'
            else:
                temp_schedules['recommending_officer'] = j.recommending_officer.designation

            if j.looking_after_officer == None:
                temp_schedules['looking_after_officer'] = 'N/A'
            else:
                temp_schedules['looking_after_officer'] = j.looking_after_officer.designation
            
            temp_schedules['approving_officer'] = j.approving_officer.designation

            temp_schedules['only_rail'] = ','.join(only_rail)
            temp_schedules['only_div'] =','.join(only_div)
            temp_schedules['accompanied_by'] = j.accompanied_by
            remarks = m1.schedule_remarks.objects.filter(schedule_detail = j).order_by("id")
            
            temp_schedules['sent_on'] = ""
            temp_schedules['sent_to'] = ""
            if len(remarks) != 0:
                temp_schedules['sent_on'] = remarks[1].rem_date
                sent_to = remarks[1].action_taken
                if sent_to == 1:
                    temp_schedules['sent_to'] = j.recommending_officer.designation
                elif sent_to == 2:
                    temp_schedules['sent_to'] = j.approving_officer.designation
            temp_schedules['rail'] = ','.join(rail)
            temp_schedules["letter_no"] = j.letter_no 
            temp_schedules["description"] = j.tour_description
            temp_schedules["date"] = re.sub(" ", "-", str(j.created_on.strftime("%d %m %y")))

            temp["previous_schedules"].append(temp_schedules)
        all_tour = m1.tour_detail.objects.filter(schedule_detail = i).order_by("date")
        tour = []
        for j in all_tour:
            tour_temp = {}
            tour_temp['date'] = re.sub(" ", "-", str(j.date.strftime("%d %m %y")))
            if j.end_date == None:
                tour_temp['end_date'] = "-"
            else:
                tour_temp['end_date'] = re.sub(" ", "/", str(j.end_date.strftime("%d %m %y")))
            # print(tour_temp['end_date'])
            tour_temp['mode'] = j.mode
            tour_temp['no'] = j.trans_detail
            tour_temp['arr_time'] = j.arr_time
            tour_temp['dep_time'] = j.dep_time
            tour_temp['from'] = j.from_location
            tour_temp['to'] = j.to
            tour_temp['purpose'] = j.purpose
            tour.append(tour_temp)
        
        temp['tour'] = tour
        temp['id'] = i.id
        
        all_remarks = m1.schedule_remarks.objects.filter(schedule_detail = i)

        temp['remark_to_be_shown'] = "-"
        # remarks_data = []
        for j in all_remarks:
            rem_temp = {}
            rem_temp['rem_date'] = re.sub(" ", "/", str(j.rem_date.strftime("%d %m %y")))
            rem_temp['remarks'] = j.remarks
            # rem_temp['created_by'] = models.Level_Desig.objects.filter(official_email_ID=j.created_by.email)[0].designation
            rem_temp['given_by'] = j.given_by.designation
            if j.remarks_by_officer != None:
                rem_temp['remarks_by_officer'] = j.remarks_by_officer
            else:
                rem_temp['remarks_by_officer'] = "-"
            if j.remarks_by_officer != None:
                temp['remark_to_be_shown'] = j.remarks_by_officer
            remarks_data.append(rem_temp)
        temp['remarks_data'] = remarks_data

        rail = []
        rail_location = m1.schedule_location.objects.filter(schedule_detail = i, type="HQ")
        for j in rail_location:
            rail.append(j.value)
        temp['rail'] = ','.join(rail)

        div = []
        div_location = m1.schedule_location.objects.filter(schedule_detail = i, type="DIV")
        for j in div_location:
            div.append(j.value)
        temp['div'] = ','.join(div)

        temp['location'] = m1.schedule_location.objects.filter(schedule_detail = i, type="LOC")
        if len(temp['location'])!=0:
            temp['location'] = temp['location'][0].value
        else:
            temp['location'] = ""
        
        if i.recommending_officer == None:
            temp['recommending_officer'] = 'N/A'
        else:
            temp['recommending_officer'] = i.recommending_officer.designation

        if i.looking_after_officer == None:
            temp['looking_after_officer'] = 'N/A'
        else:
            temp['looking_after_officer'] = i.looking_after_officer.designation
        
        temp['approving_officer'] = i.approving_officer.designation
        temp['document'] = i.document

        temp['accompanied_by'] = i.accompanied_by
        
        temp['letter_no'] = i.letter_no
        temp['description'] = i.tour_description
        temp['sent_by'] = models.Level_Desig.objects.filter(empno_id=i.created_by.empno)[0].designation
        count_inbox += 1
        all_inbox_schedules.append(temp)

    for i in all_inbox_schedules_approving:
        temp = {}
        temp['id'] = i.id
        temp['status_flag'] = i.status_flag
        temp["previous_schedules"] = []
        remarks_data = []

        temp_prev_schedules = []
        temp_var = i.modified_new_schedule
        while(temp_var != None):
            temp_prev_schedules.append(temp_var)
            temp_var = temp_var.modified_new_schedule
        
        # temp_prev_schedules.reverse()
        iterator = len(temp_prev_schedules)
        for j in temp_prev_schedules:
            temp_schedules = {}
            all_tour = m1.tour_detail.objects.filter(schedule_detail = j).order_by("date")
            temp_schedules["counter"] = iterator
            iterator = iterator - 1
            tour = []
            for k in all_tour:
                tour_temp = {}
                tour_temp['date'] = re.sub(" ", "-", str(k.date.strftime("%d %m %y")))
                if k.end_date == None:
                    tour_temp['end_date'] = "-"
                else:
                    tour_temp['end_date'] = re.sub(" ", "/", str(k.end_date.strftime("%d %m %y")))
                tour_temp['mode'] = k.mode
                tour_temp['no'] = k.trans_detail
                tour_temp['arr_time'] = k.arr_time
                tour_temp['dep_time'] = k.dep_time
                tour_temp['from'] = k.from_location
                tour_temp['to'] = k.to
                tour_temp['purpose'] = k.purpose
                tour.append(tour_temp)
            
            temp_schedules['tour'] = tour
            all_remarks = m1.schedule_remarks.objects.filter(schedule_detail = j)
            for k in all_remarks:
                rem_temp = {}
                rem_temp['rem_date'] = re.sub(" ", "-", str(k.rem_date.strftime("%d %m %y")))
                rem_temp['remarks'] = k.remarks
                # rem_temp['given_by'] = models.Level_Desig.objects.filter(official_email_ID=j.given_by.email)[0].designation
                rem_temp['given_by'] = k.given_by.designation
                rem_temp['remarks_by_officer'] = k.remarks_by_officer
                remarks_data.append(rem_temp)
            rail = []
            only_rail = []
            only_div = []
            try:
                rail_location = m1.schedule_location.objects.filter(schedule_detail = j).values("type", "value")
                for k in rail_location:
                    if(k["type"]=="HQ" or k["type"]=="DIV"):
                        rail.append(k["value"])
                        if k["type"]=="HQ":
                            only_rail.append(k["value"])
                        else:
                            only_div.append(k["value"])
                    else:
                        temp['location'] = k["value"]
            except:
                pass
            
            if j.recommending_officer == None:
                temp_schedules['recommending_officer'] = 'N/A'
            else:
                temp_schedules['recommending_officer'] = j.recommending_officer.designation

            if j.looking_after_officer == None:
                temp_schedules['looking_after_officer'] = 'N/A'
            else:
                temp_schedules['looking_after_officer'] = j.looking_after_officer.designation
            
            temp_schedules['approving_officer'] = j.approving_officer.designation

            temp_schedules['only_rail'] = ','.join(only_rail)
            temp_schedules['only_div'] =','.join(only_div)
            temp_schedules['accompanied_by'] = j.accompanied_by
            remarks = m1.schedule_remarks.objects.filter(schedule_detail = j).order_by("id")
            
            temp_schedules['sent_on'] = ""
            temp_schedules['sent_to'] = ""
            if len(remarks) != 0:
                temp_schedules['sent_on'] = remarks[1].rem_date
                sent_to = remarks[1].action_taken
                if sent_to == 1:
                    temp_schedules['sent_to'] = j.recommending_officer.designation
                elif sent_to == 2:
                    temp_schedules['sent_to'] = j.approving_officer.designation
            temp_schedules['rail'] = ','.join(rail)
            temp_schedules["letter_no"] = j.letter_no 
            temp_schedules["description"] = j.tour_description
            temp_schedules["date"] = re.sub(" ", "-", str(j.created_on.strftime("%d %m %y")))

            temp["previous_schedules"].append(temp_schedules)
        all_tour = m1.tour_detail.objects.filter(schedule_detail = i).order_by("date")
        tour = []
        for j in all_tour:
            tour_temp = {}
            tour_temp['date'] = re.sub(" ", "-", str(j.date.strftime("%d %m %y")))
            if j.end_date == None:
                tour_temp['end_date'] = "-"
            else:
                tour_temp['end_date'] = re.sub(" ", "/", str(j.end_date.strftime("%d %m %y")))
            tour_temp['mode'] = j.mode
            tour_temp['no'] = j.trans_detail
            tour_temp['arr_time'] = j.arr_time
            tour_temp['dep_time'] = j.dep_time
            tour_temp['from'] = j.from_location
            tour_temp['to'] = j.to
            tour_temp['purpose'] = j.purpose
            tour.append(tour_temp)
        
        temp['tour'] = tour
        temp['id'] = i.id
        all_remarks = m1.schedule_remarks.objects.filter(schedule_detail = i)

        temp['remark_to_be_shown'] = "-"
        for j in all_remarks:
            rem_temp = {}
            rem_temp['rem_date'] = re.sub(" ", "-", str(j.rem_date.strftime("%d %m %y")))
            rem_temp['remarks'] = j.remarks
            # rem_temp['created_by'] = models.Level_Desig.objects.filter(official_email_ID=j.created_by.email)[0].designation
            rem_temp['given_by'] = j.given_by.designation
            if j.remarks_by_officer != None:
                rem_temp['remarks_by_officer'] = j.remarks_by_officer
            else:
                rem_temp['remarks_by_officer'] = "-"
            if j.remarks_by_officer != None:
                temp['remark_to_be_shown'] = j.remarks_by_officer
            remarks_data.append(rem_temp)

        temp['remarks_data'] = remarks_data

        temp['accompanied_by'] = i.accompanied_by
        rail = []
        rail_location = m1.schedule_location.objects.filter(schedule_detail = i, type="HQ")
        for j in rail_location:
            rail.append(j.value)
        temp['rail'] = ','.join(rail)

        div = []
        div_location = m1.schedule_location.objects.filter(schedule_detail = i, type="DIV")
        for j in div_location:
            div.append(j.value)
        temp['div'] = ','.join(div)

        temp['location'] = m1.schedule_location.objects.filter(schedule_detail = i, type="LOC")
        if len(temp['location'])!=0:
            temp['location'] = temp['location'][0].value
        else:
            temp['location'] = ""
        
        if i.recommending_officer == None:
            temp['recommending_officer'] = 'N/A'
        else:
            temp['recommending_officer'] = i.recommending_officer.designation

        if i.looking_after_officer == None:
            temp['looking_after_officer'] = 'N/A'
        else:
            temp['looking_after_officer'] = i.looking_after_officer.designation
        
        temp['approving_officer'] = i.approving_officer.designation
        temp['document'] = i.document

        temp['letter_no'] = i.letter_no
        temp['description'] = i.tour_description
        temp['sent_by'] = models.Level_Desig.objects.filter(empno_id=i.created_by.empno)[0].designation
        count_inbox += 1
        all_inbox_schedules.append(temp)
    

    context={
        'Zone':list2 ,
        'division1':list3,
        'division':list4,
        'marked_to':list5,
        'department':list6,
        'desig': desig_longdesc,
        'alldesig':alldesig,
        'desg_no':desg_no,
        'option_val':'edit',
        'drafts_count': count_drafts,
        'all_drafts': all_drafts,
        'draft_details': draft_details,
        'all_outbox': all_outbox,
        'all_accepted': all_accepted,
        'all_rejected': all_rejected,
        'count_rejected': count_rejected,
        'count_accepted': count_accepted,
        'count_outbox': count_outbox,
        'all_inbox': all_inbox_schedules,
        'count_inbox': count_inbox,
        'location_array': location_array
        }
    # print(list2,'_____________')
    event_id=request.GET.get('event_id')
    
    # print(ins_id,'______________________________')
    # ins_detail=[]
    # item_id=[]
    # length = 0
    # sh = []
    # ssh = []
    if event_id!=None:
        
        l1 = m1.Events.objects.filter(event_id=event_id).values()

        
        l2 = m1.Event_activty.objects.filter(event_id_id=event_id).values('activity_id', 'Railways_act','Division_act','location3_act','date_to_act')
        # l4= m1.Event_activty.objects.filter(event_id_id=event_id).values('activity_id')
        l3 = []
        
        for i in range(len(l2)):
            mydict = {}
            mark_desig = ''
            mark_desigcode = ''
            print(l2[i]['activity_id'])
            l3 = m1.schedule_marked1.objects.filter(act_id_id=l2[i]['activity_id']).values('marked_to', 'marked_to__designation', 'marked_to__designation_code')
            l4=[]
        
            for j in l3:
                if j['marked_to']:
                    print(j['marked_to__designation'])
                    
                    mark_desig += str(j['marked_to__designation']) +','
                    mark_desigcode += str(j['marked_to__designation_code']) +','
            l2[i].update({'desig': mark_desig, 'desig_code': mark_desigcode})
            #     l3= models.Level_Desig.objects.filter(designation_code = l3[j]['marked_emp']).values('designation')
            #     if l3:
            #         l3[j].update({'designation': l3[0]['designation']})
        
            mydict.update({'mark_desig': l4})
            # l2[i].update({'markoff': l4})
        event_id=request.GET.get('event_id') 
        print('2222', l2)
        # print('33333333333333', mydict)
        context={
            
            'list1':l1,
            "list2": l2,
            'list3':l3,
            'Zone':list2 ,
            'division1':list3,
            'division':list4,
            'marked_to':list5,
            'department':list6,
            'desig': desig_longdesc,
            'alldesig':alldesig,
            'desg_no':desg_no,
            'event_id':event_id,
            }  
            
        return render(request,"edit_form.html",context)
    
    else:     
        return render(request,"insp_schedule.html", context)
    # except Exception as e: 
    #     try:
    #         m1.error_Table.objects.create(fun_name="form",user_id=request.user,err_details=str(e))
    #     except:
    #         print("Internal Error!!!")
    #     return render(request, "errorspage.html", {})

#14)savedraftdata -

def saveDraftData(request):
    # try:
        flag = 0

        if request.method=='POST' and "draft_id" in request.GET and request.POST.get('is_exists')=="true":
            draft_id = request.GET['draft_id']
            all_data = json.loads(request.POST.get('data'))
            # print(all_data)
            email = request.user
            obj=models.Level_Desig.objects.exclude(official_email_ID = None).filter(Q(official_email_ID=request.user.username) | Q(official_email_ID=request.user.email)).values("designation","parent_desig_code","department","contactnumber","official_email_ID", "empno_id", "empno_id__empno","empno_id__empname","empno_id__empmname","empno_id__emplname","empno_id__gender","empno_id__email","contactnumber","empno_id__currentzone", "empno_id__currentunitdivision","empno_id__appointmentdate","empno_id__superannuation_date","empno_id__pc7_level","empno_id__billunit","empno_id__service_status","empno_id__station_des")[0]
            inspecting_officer = models.Level_Desig.objects.filter(designation = obj['designation'])[0]
            user_id = obj['empno_id']

            curr_user = m1.empmast.objects.filter(empno=user_id)[0]

            for i in all_data[0]:
                if i == "railway":
                    railway = all_data[0]['railway']   #list
                elif i == "division":
                    division = all_data[0]['division']  #list
                elif i == "department": #location name
                    location = all_data[0]['location']
                elif i== "location_type":
                    location_type = all_data[0]['location_type']
                elif i == "description":
                    tour_description = all_data[0]['description']
                elif i == "accompanied_by":
                    accompanied_by = all_data[0]['accompanied_by']
                    print(accompanied_by)
                elif i == "looking_after":
                    d = all_data[0]['looking_after']
                    if d == '':
                        looking_after = None
                    else:
                        looking_after = models.Level_Desig.objects.filter(designation = d)[0]
                elif i == "recom_officer":
                    d = all_data[0]['recom_officer']
                    if d == '':
                        recom_officer = None
                    else:
                        recom_officer = models.Level_Desig.objects.filter(designation = d)[0]
                elif i == "approve_auth":
                    a = all_data[0]['approve_auth']
                    if a == '':
                        approving_auth = None
                    else:
                        approving_auth = models.Level_Desig.objects.filter(designation = a)[0]
                elif i == "info":
                    info = all_data[0]['info']
                elif i == "document":
                    document = all_data[0]['document']
                elif i=="for_information":
                    for_information = all_data[0]['for_information']

            x = m1.schedule_detail.objects.filter(id=int(draft_id))[0]
            print(x)
            if document!="":
                x.inspecting_officer = inspecting_officer
                x.tour_description = tour_description
                x.accompanied_by = ",".join(accompanied_by)
                x.recommending_officer = recom_officer
                x.approving_officer = approving_auth
                x.looking_after_officer = looking_after
                x.document=document
                x.status_flag = 0
                x.delete_flag = 0
                x.created_by = curr_user
                x.last_modified_by = curr_user
                x.last_modified_on=datetime.now()
            else:
                x.inspecting_officer = inspecting_officer
                x.tour_description = tour_description
                x.accompanied_by = ",".join(accompanied_by)
                x.recommending_officer = recom_officer
                x.approving_officer = approving_auth
                x.looking_after_officer = looking_after
                x.status_flag = 0
                x.delete_flag = 0
                x.created_by = curr_user
                x.last_modified_by = curr_user
                x.last_modified_on=datetime.now()
            x.save()
            
            all_tour_ids = []

            for i in all_data[1]:
                if "tour_id" not in i:
                    continue
                else:
                    print(i["tour_id"])
                    all_tour_ids.append(int(i["tour_id"]))

            temp = m1.tour_detail.objects.filter(schedule_detail = draft_id).order_by('id')
            print(temp)
            print(all_tour_ids)
            for i in temp:
                print(i.id)
                if i.id not in all_tour_ids:
                    i.delete()

            for i in all_data[1]:
                if "tour_id" not in i:
                    print(i)
                    if i == {}:
                        continue
                    date = i['date']
                    date = datetime.strptime(date, "%d-%m-%Y").strftime("%Y-%m-%d")
                    date1 = i['date1']
                    date1 = datetime.strptime(date1, "%d-%m-%Y").strftime("%Y-%m-%d")
                    mode = i['mode']
                    number = i['number']
                    if i['dep_hour'] != "":
                        dep_hour = i['dep_hour']
                    else:
                        dep_hour = None
                
                    if i['arr_hour'] != "":
                        arr_hour = i['arr_hour']
                    else:
                        arr_hour = None

                    from_ = i['from']
                    to = i['to']
                    purpose = i['purpose']
                    if(dep_hour == None):
                        dep_time = None
                    else:
                        hour, minute = map(int, dep_hour.split(':'))
                        dep_time = f"{hour:02d}:{minute:02d}"
                    if(arr_hour == None):
                        arr_time = None
                    else:
                        hour, minute = map(int, arr_hour.split(':'))
                        arr_time = f"{hour:02d}:{minute:02d}"

                    b4 = m1.tour_detail(schedule_detail = x, date = date,end_date=date1, mode = mode, trans_detail = number, dep_time = dep_time, arr_time = arr_time, from_location = from_, to = to, purpose = purpose, delete_flag = 0)
                    b4.save()
                    continue

                
                y = m1.tour_detail.objects.filter(id=int(i["tour_id"]))[0]   
                print(i)
                y.date = datetime.strptime(i['date'], "%d-%m-%Y").strftime("%Y-%m-%d")
                y.end_date = datetime.strptime(i['date1'], "%d-%m-%Y").strftime("%Y-%m-%d")
                y.mode = i['mode']
                y.trans_detail = i['number']

                if i['dep_hour'] != "":
                    dep_hour = i['dep_hour']
                else:
                    dep_hour = None
            
                if i['arr_hour'] != "":
                    arr_hour = i['arr_hour']
                else:
                    arr_hour = None

                y.from_location = i['from']
                y.to = i['to']
                y.purpose = i['purpose']
                if(dep_hour == None):
                    y.dep_time = None
                else:
                    hour, minute = map(int, dep_hour.split(':'))
                    y.dep_time = f"{hour:02d}:{minute:02d}"
                if(arr_hour == None):
                    y.arr_time = None
                else:
                    hour, minute = map(int, arr_hour.split(':'))
                    y.arr_time = f"{hour:02d}:{minute:02d}"
                
                y.save()
            
        
            
            # locations = m1.schedule_location.objects.filter(created_by=curr_user, type="LOC", schedule_detail = x)

            # if len(locations) == 0:
            #     loc = m1.schedule_location(schedule_detail = x, type = "LOC", value=all_data[0]["location"], created_by = curr_user, last_mod_by = curr_user)
            #     loc.save()
            # else:
            #     locations[0].value = all_data[0]["location"]
            #     locations[0].last_mod_by = curr_user
            #     locations[0].save()

            railways = m1.schedule_location.objects.filter(created_by=curr_user, type="HQ", schedule_detail = x)
            rail_list = []
            curr_rail_list = []
            for i in railways:
                rail_list.append(i.value)
                
            for i in all_data[0]['railway']:
                curr_rail_list.append(i)
                if i not in rail_list:
                    new_obj = m1.schedule_location(schedule_detail = x, type = "HQ", value=i, created_by = curr_user, last_mod_by = curr_user)
                    new_obj.save()
            print(curr_rail_list)
            for i in railways:
                if i.value not in curr_rail_list:
                    i.delete()

            divisions = m1.schedule_location.objects.filter(created_by=curr_user, type="DIV", schedule_detail = x)
            div_list = []
            curr_div_list = []
            for i in divisions:
                div_list.append(i.value)
                
            for i in all_data[0]['division']:
                curr_div_list.append(i)
                if i not in div_list:
                    new_obj = m1.schedule_location(schedule_detail = x, type = "DIV", value=i, created_by = curr_user, last_mod_by = curr_user)
                    new_obj.save()
            for i in divisions:
                if i.value not in curr_div_list:
                    i.delete()

            marked = m1.schedule_marked.objects.filter(created_by=curr_user, schedule_detail = x)
            marked_list = []
            curr_marked_list = []
            for i in marked:
                marked_list.append(i.marked_to.designation)
                
            for i in all_data[0]['for_information']:
                curr_marked_list.append(i)
                if i not in marked_list:
                    desig_obj = models.Level_Desig.objects.filter(designation = i)[0]
                    new_obj = m1.schedule_marked(schedule_detail = x, created_by = curr_user, marked_to = desig_obj,  view_flag = False, remarks="")
                    new_obj.save()
            for i in marked:
                if i.marked_to.designation not in curr_marked_list:
                    i.delete()

            loc_type = m1.schedule_location.objects.filter(created_by=curr_user, type="LOC_TYPE", schedule_detail = x)
            loc_list = []
            curr_loc_list = []
            for i in loc_type:
                loc_list.append(i.value)
                
            for i in all_data[0]['location_type']:
                curr_loc_list.append(i)
                if i not in loc_list:
                    new_obj = m1.schedule_location(schedule_detail = x, type = "LOC_TYPE", value=i, created_by = curr_user, last_mod_by = curr_user)
                    new_obj.save()
            for i in loc_type:
                if i.value not in curr_loc_list:
                    i.delete()

            location = m1.schedule_location.objects.filter(created_by=curr_user, type="LOC", schedule_detail = x)
            location_list = []
            curr_location_list = []
            for i in location:
                location_list.append(i.value)
                
            for i in all_data[0]['location']:
                curr_location_list.append(i)
                if i not in location_list:
                    new_obj = m1.schedule_location(schedule_detail = x, type = "LOC", value=i, created_by = curr_user, last_mod_by = curr_user)
                    new_obj.save()
            for i in location:
                if i.value not in curr_location_list:
                    i.delete()


            if request.method=='POST' and (request.POST.get('isSubmit')=="true"):
                if x.recommending_officer == None:
                    designation = inspecting_officer.designation
                    temporary = m1.schedule_detail.objects.filter(inspecting_officer=inspecting_officer, created_on__year=x.created_on.year).exclude(status_flag=0, is_modified=True)
                    letter_no = str(x.created_on.year) + "/" + designation + "/Tour/" + str(len(temporary) + 1)
                    x.letter_no = letter_no
                    remark_obj1 = m1.schedule_remarks(remarks="schedule submitted", created_by = curr_user, given_by = inspecting_officer, schedule_detail = x, action_taken = 0, letter_no = letter_no)
                    remark_obj1.save()
                    remark_obj2 = m1.schedule_remarks(remarks="schedule pending with Sanctioning Authority", created_by = curr_user, given_by = inspecting_officer, schedule_detail = x, action_taken = 2, letter_no = letter_no)
                    remark_obj2.save()

                    all_marked = m1.schedule_marked.objects.filter(schedule_detail = x)
                    
                    x.status_flag = 2
                else:
                    designation = inspecting_officer.designation
                    temporary = m1.schedule_detail.objects.filter(inspecting_officer=inspecting_officer, created_on__year=x.created_on.year).exclude(status_flag=0, is_modified=True)
                    letter_no = str(x.created_on.year) + "/" + designation + "/Tour/" + str(len(temporary) + 1)
                    x.letter_no = letter_no
                    remark_obj1 = m1.schedule_remarks(remarks="schedule submitted", created_by = curr_user, given_by = inspecting_officer, schedule_detail = x, action_taken = 0, letter_no = letter_no)
                    remark_obj1.save()
                    remark_obj2 = m1.schedule_remarks(remarks="schedule pending with recommending officer", created_by = curr_user, given_by = inspecting_officer, schedule_detail = x, action_taken = 1, letter_no = letter_no)
                    remark_obj2.save()
                    
                    x.status_flag = 1

                x.save()

            return JsonResponse({"success":True, "draft_id":draft_id}, status = 200)

        elif request.method=='POST' and request.is_ajax():
            all_data = json.loads(request.POST.get('data'))
            # print(all_data)
            email = request.user
            obj=models.Level_Desig.objects.exclude(official_email_ID = None).filter(Q(official_email_ID=request.user.username) | Q(official_email_ID=request.user.email)).values("designation","parent_desig_code","department","contactnumber","official_email_ID","empno_id", "empno_id__empno","empno_id__empname","empno_id__empmname","empno_id__emplname","empno_id__gender","empno_id__email","contactnumber","empno_id__currentzone", "empno_id__currentunitdivision","empno_id__appointmentdate","empno_id__superannuation_date","empno_id__pc7_level","empno_id__billunit","empno_id__service_status","empno_id__station_des")[0]
        
            inspecting_officer = models.Level_Desig.objects.filter(designation = obj['designation'])[0]
            # print(inspecting_officer)
            # print(email)
            user_id = obj['empno_id']

            curr_user = m1.empmast.objects.filter(empno=user_id)[0]

            for i in all_data[0]:
                if i == "railway":
                    railway = all_data[0]['railway']   #list
                elif i == "division":
                    division = all_data[0]['division']  #list
                elif i == "location": #location name
                    location = all_data[0]['location']
                elif i == "description":
                    tour_description = all_data[0]['description']
                elif i == "accompanied_by":
                    accompanied_by = ",".join(all_data[0]['accompanied_by'])
                elif i== "location_type":
                    location_type = all_data[0]['location_type']
                elif i == "location":
                    location = all_data[0]['location']
                elif i == "looking_after":
                    d = all_data[0]['looking_after']
                    if d == '':
                        looking_after = None
                    else:
                        looking_after = models.Level_Desig.objects.filter(designation = d)[0]
                elif i == "recom_officer":
                    d = all_data[0]['recom_officer']
                    if d == '':
                        recom_officer = None
                    else:
                        recom_officer = models.Level_Desig.objects.filter(designation = d)[0]
                elif i == "approve_auth":
                    a = all_data[0]['approve_auth']
                    if a == '':
                        approving_auth = None
                    else:
                        approving_auth = models.Level_Desig.objects.filter(designation = a)[0]
                elif i == "info":
                    info = all_data[0]['info']
                elif i == "document":
                    document = all_data[0]['document']
                elif i=="for_information":
                    for_information = all_data[0]['for_information']

            a = m1.schedule_detail(inspecting_officer = inspecting_officer, tour_description = tour_description, accompanied_by = accompanied_by, recommending_officer = recom_officer, approving_officer = approving_auth, looking_after_officer = looking_after, document=document, status_flag = 0, delete_flag = 0, created_by = curr_user, last_modified_by = curr_user)
            a.save()

            for i in railway:
                b1 = m1.schedule_location(schedule_detail = a, type = "HQ", value=i, created_by = curr_user, last_mod_by = curr_user)
                b1.save()
            for i in division:
                b2 = m1.schedule_location(schedule_detail = a, type = "DIV", value=i, created_by = curr_user, last_mod_by = curr_user)
                b2.save()
            for i in location_type:
                b4 = m1.schedule_location(schedule_detail = a, type = "LOC_TYPE", value=i, created_by = curr_user, last_mod_by = curr_user)
                b4.save()
            for i in location:
                b5 = m1.schedule_location(schedule_detail = a, type = "LOC", value=i, created_by = curr_user, last_mod_by = curr_user)
                b5.save()

            for i in all_data[1]:
                if i == {}:
                    continue
                date = i['date']
                date = datetime.strptime(date, "%d-%m-%Y").strftime("%Y-%m-%d")
                mode = i['mode']
                number = i['number']
                date1 = i['date1']
                date1 = datetime.strptime(date1, "%d-%m-%Y").strftime("%Y-%m-%d")
                if i['dep_hour'] != "":
                    dep_hour = i['dep_hour']
                else:
                    dep_hour = None
            
                if i['arr_hour'] != "":
                    arr_hour = i['arr_hour']
                else:
                    arr_hour = None
                
                from_ = i['from']
                to = i['to']
                purpose = i['purpose']
                if(dep_hour == None):
                    dep_time = None
                else:
                    hour, minute = map(int, dep_hour.split(':'))
                    dep_time = f"{hour:02d}:{minute:02d}"
                if(arr_hour == None):
                    arr_time = None
                else:
                    hour, minute = map(int, arr_hour.split(':'))
                    arr_time = f"{hour:02d}:{minute:02d}"

                b4 = m1.tour_detail(schedule_detail = a, date = date, end_date=date1, mode = mode, trans_detail = number, dep_time = dep_time, arr_time = arr_time, from_location = from_, to = to, purpose = purpose, delete_flag = 0)
                b4.save()

            for k in for_information:
                desig_obj = models.Level_Desig.objects.filter(designation = k)[0]
                new_object_marked = m1.schedule_marked(schedule_detail = a, created_by = curr_user, marked_to = desig_obj,  view_flag = False, remarks="")
                new_object_marked.save()

            if request.method=='POST' and (request.POST.get('isSubmit')=="true"):
                x = a
                if a.recommending_officer == None:
                    designation = inspecting_officer.designation
                    temporary = m1.schedule_detail.objects.filter(inspecting_officer=inspecting_officer, created_on__year=x.created_on.year).exclude(status_flag=0, is_modified=True)
                    letter_no = str(x.created_on.year) + "/" + designation + "/Tour/" + str(len(temporary) + 1)
                    x.letter_no = letter_no
                    remark_obj1 = m1.schedule_remarks(remarks="schedule submitted", created_by = curr_user, given_by = inspecting_officer, schedule_detail = x, action_taken = 0, letter_no = letter_no)
                    remark_obj1.save()
                    remark_obj2 = m1.schedule_remarks(remarks="schedule pending with Sanctioning Authority", created_by = curr_user, given_by = inspecting_officer, schedule_detail = x, action_taken = 2, letter_no = letter_no)
                    remark_obj2.save()
                    x.status_flag = 2
                else:
                    designation = inspecting_officer.designation
                    temporary = m1.schedule_detail.objects.filter(inspecting_officer=inspecting_officer, created_on__year=x.created_on.year).exclude(status_flag=0, is_modified=True)
                    letter_no = str(x.created_on.year) + "/" + designation + "/Tour/" + str(len(temporary) + 1)
                    x.letter_no = letter_no
                    remark_obj1 = m1.schedule_remarks(remarks="schedule submitted", created_by = curr_user, given_by = inspecting_officer, schedule_detail = x, action_taken = 0, letter_no = letter_no)
                    remark_obj1.save()
                    remark_obj2 = m1.schedule_remarks(remarks="schedule pending with recommending officer", created_by = curr_user, given_by = inspecting_officer, schedule_detail = x, action_taken = 1, letter_no = letter_no)
                    remark_obj2.save()
                    x.status_flag = 1

                x.save()

            return JsonResponse({"success":True, "draft_id":a.id}, status = 200)
    
    
    # except:
    #     print("Internal Error!!!")

#15)ScheduleInspection
def ScheduleInspection(request):
    try:
        obj=models.Level_Desig.objects.exclude(official_email_ID = None).filter(Q(official_email_ID=request.user.username) | Q(official_email_ID=request.user.email)).values("designation","parent_desig_code","department","contactnumber","official_email_ID","empno_id", "empno_id__empno","empno_id__empname","empno_id__empmname","empno_id__emplname","empno_id__gender","empno_id__email","contactnumber","empno_id__currentzone", "empno_id__currentunitdivision","empno_id__appointmentdate","empno_id__superannuation_date","empno_id__pc7_level","empno_id__billunit","empno_id__service_status","empno_id__station_des")[0]
        email = obj['official_email_ID']
        user_id = obj['empno_id']
        our_desig_obj = models.Level_Desig.objects.filter(designation = obj['designation'])[0]
        curr_user = m1.empmast.objects.filter(empno=user_id)[0]

        incoming_show = []
        ongoing_show = []
        elapsed_show = []
        all_marked_to_us = m1.schedule_marked.objects.exclude(created_by=curr_user).filter(view_flag = True, marked_to=our_desig_obj, schedule_detail__status_flag=3)
        print(all_marked_to_us)

        for z in all_marked_to_us:
            i = z.schedule_detail

            temp = {}
            temp["designation"] = i.inspecting_officer.designation
            temp["id"] = i.id
            temp["previous_schedules"] = []
            remarks_data = []

            temp_prev_schedules = []
            temp_var = i.modified_new_schedule
            while(temp_var != None):
                temp_prev_schedules.append(temp_var)
                temp_var = temp_var.modified_new_schedule
            
            # temp_prev_schedules.reverse()
            iterator = len(temp_prev_schedules)
            for j in temp_prev_schedules:
                temp_schedules = {}
                all_tour = m1.tour_detail.objects.filter(schedule_detail = j).order_by("date")
                temp_schedules["counter"] = iterator
                iterator = iterator - 1
                tour = []
                for k in all_tour:
                    tour_temp = {}
                    tour_temp['date'] = re.sub(" ", "/", str(k.date.strftime("%d %m %y")))
                    if k.end_date == None:
                        tour_temp['end_date'] = "-"
                    else:
                        tour_temp['end_date'] = re.sub(" ", "/", str(k.end_date.strftime("%d %m %y")))
                    tour_temp['mode'] = k.mode
                    tour_temp['no'] = k.trans_detail
                    tour_temp['arr_time'] = k.arr_time
                    tour_temp['dep_time'] = k.dep_time
                    tour_temp['from'] = k.from_location
                    tour_temp['to'] = k.to
                    tour_temp['purpose'] = k.purpose
                    tour.append(tour_temp)
                
                temp_schedules['tour'] = tour
                all_remarks = m1.schedule_remarks.objects.filter(schedule_detail = j)
                for k in all_remarks:
                    rem_temp = {}
                    rem_temp['rem_date'] = re.sub(" ", "-", str(k.rem_date.strftime("%d %m %y")))
                    rem_temp['remarks'] = k.remarks
                    # rem_temp['given_by'] = models.Level_Desig.objects.filter(official_email_ID=j.given_by.email)[0].designation
                    rem_temp['given_by'] = k.given_by.designation
                    rem_temp['remarks_by_officer'] = k.remarks_by_officer
                    remarks_data.append(rem_temp)
                rail = []
                only_rail = []
                only_div = []
                loc = []
                loc_type = []
                try:
                    rail_location = m1.schedule_location.objects.filter(schedule_detail = j).values("type", "value")
                    for k in rail_location:
                        if(k["type"]=="HQ" or k["type"]=="DIV"):
                            rail.append(k["value"])
                            if k["type"]=="HQ":
                                only_rail.append(k["value"])
                            else:
                                only_div.append(k["value"])
                        elif j["type"]=="LOC":
                            loc.append(j["value"])
                        else:
                            loc_type.append(j["value"])
                except:
                    pass
                
                if j.recommending_officer == None:
                    temp_schedules['recommending_officer'] = 'N/A'
                else:
                    temp_schedules['recommending_officer'] = j.recommending_officer.designation

                if j.looking_after_officer == None:
                    temp_schedules['looking_after_officer'] = 'N/A'
                else:
                    temp_schedules['looking_after_officer'] = j.looking_after_officer.designation
                
                temp_schedules['approving_officer'] = j.approving_officer.designation

                temp_schedules['loc'] = ",".join(loc)
                temp_schedules['loc_type'] = ",".join(loc_type)
                temp_schedules['only_rail'] = ','.join(only_rail)
                temp_schedules['only_div'] =','.join(only_div)
                temp_schedules['accompanied_by'] = j.accompanied_by
                remarks = m1.schedule_remarks.objects.filter(schedule_detail = j).order_by("id")
                
                temp_schedules['sent_on'] = ""
                temp_schedules['sent_to'] = ""
                if len(remarks) != 0:
                    temp_schedules['sent_on'] = remarks[1].rem_date
                    sent_to = remarks[1].action_taken
                    if sent_to == 1:
                        temp_schedules['sent_to'] = j.recommending_officer.designation
                    elif sent_to == 2:
                        temp_schedules['sent_to'] = j.approving_officer.designation
                temp_schedules['rail'] = ','.join(rail)
                temp_schedules["letter_no"] = j.letter_no 
                temp_schedules["description"] = j.tour_description
                
                temp_schedules["date"] = re.sub(" ", "-", str(j.created_on.strftime("%d %m %y")))

                all_marked = m1.schedule_marked.objects.filter(schedule_detail = j)
                marked = []
                for k in all_marked:
                    marked.append(k.marked_to.designation)
                temp_schedules["marked_to"] = ','.join(marked)
                
                temp["previous_schedules"].append(temp_schedules)

            print(temp["previous_schedules"])

            all_tour = m1.tour_detail.objects.filter(schedule_detail = i).order_by("date")
            tour = []
            for j in all_tour:
                tour_temp = {}
                tour_temp['date'] = re.sub(" ", "/", str(j.date.strftime("%d %m %y")))
                if j.end_date == None:
                    tour_temp['end_date'] = "-"
                else:
                    tour_temp['end_date'] = re.sub(" ", "/", str(j.end_date.strftime("%d %m %y")))
                tour_temp['mode'] = j.mode
                tour_temp['no'] = j.trans_detail
                tour_temp['arr_time'] = str(j.arr_time)
                tour_temp['dep_time'] = str(j.dep_time)
                # print('arr_time = ', j.arr_time, " j.dep_time = ", j.dep_time)
                tour_temp['from'] = j.from_location
                tour_temp['to'] = j.to
                tour_temp['purpose'] = j.purpose
                tour.append(tour_temp)
            
            temp['tour'] = tour

            rem = m1.schedule_remarks.objects.filter(schedule_detail = i).order_by("id")
            if len(rem) != 0:
                temp["remarks"] = re.sub(" ", "-", str(rem[1].rem_date.strftime("%d %m %y")))
            else:
                temp["remarks"] = "-"

            all_remarks = m1.schedule_remarks.objects.filter(schedule_detail = i)
            
            for j in all_remarks:
                rem_temp = {}
                rem_temp['rem_date'] = re.sub(" ", "-", str(j.rem_date.strftime("%d %m %y")))
                rem_temp['remarks'] = j.remarks
                # rem_temp['given_by'] = models.Level_Desig.objects.filter(official_email_ID=j.given_by.email)[0].designation
                rem_temp['given_by'] = j.given_by.designation
                rem_temp['remarks_by_officer'] = j.remarks_by_officer
                remarks_data.append(rem_temp)
            temp['remarks_data'] = remarks_data
            rail = []
            only_rail = []
            only_div = []
            loc = []
            loc_type = []
            try:
                rail_location = m1.schedule_location.objects.filter(schedule_detail = i).values("type", "value")
                for j in rail_location:
                    if(j["type"]=="HQ" or j["type"]=="DIV"):
                        rail.append(j["value"])
                        if j["type"]=="HQ":
                            only_rail.append(j["value"])
                        else:
                            only_div.append(j["value"])
                    elif j["type"]=="LOC":
                        loc.append(j["value"])
                    else:
                        loc_type.append(j["value"])
            except:
                pass
            
            
            if i.recommending_officer == None:
                temp['recommending_officer'] = 'N/A'
            else:
                temp['recommending_officer'] = i.recommending_officer.designation

            if i.looking_after_officer == None:
                temp['looking_after_officer'] = 'N/A'
            else:
                temp['looking_after_officer'] = i.looking_after_officer.designation
            
            temp['approving_officer'] = i.approving_officer.designation
            temp['document'] = i.document

            temp['only_rail'] = ','.join(only_rail)
            temp['only_div'] =','.join(only_div)
            temp['loc'] = ",".join(loc)
            print('location = ', temp['loc'])
            temp['loc_type'] = ",".join(loc_type)
            temp['accompanied_by'] = i.accompanied_by
            
            all_marked = m1.schedule_marked.objects.filter(schedule_detail = i)
            marked = []
            for k in all_marked:
                marked.append(k.marked_to.designation)
            temp["marked_to"] = ','.join(marked)

            temp['sent_on'] = ""
            temp['sent_to'] = ""

            remarks = m1.schedule_remarks.objects.filter(schedule_detail = i).order_by("id")
            if len(remarks) != 0:
                temp['sent_on'] = remarks[1].rem_date
                sent_to = remarks[1].action_taken
                if sent_to == 1:
                    temp['sent_to'] = i.recommending_officer.designation
                elif sent_to == 2:
                    temp['sent_to'] = i.approving_officer.designation
            temp['rail'] = ','.join(rail)
            temp["letter_no"] = i.letter_no 
            temp["description"] = i.tour_description
            temp["date"] = re.sub(" ", "-", str(i.created_on.strftime("%d %m %y")))

            all_tour = m1.tour_detail.objects.filter(schedule_detail = i).order_by('id')
            temp['from'] = "-"
            temp["to"] = "-"
            from_date = ""
            to_date = ""
            temp['number_of_days'] = "-"
            a = None
            b = None
            if len(all_tour) == 0:
                temp['from'] = "-"
                temp['to'] = "-"
            else:
                a = all_tour[0].date
                b = all_tour[len(all_tour)-1].end_date
            if a == None and b != None:
                temp['to'] = re.sub(" ", "/", str(b.strftime("%d %m %y")))
            elif a != None and b == None:
                temp['from'] = re.sub(" ", "/", str(a.strftime("%d %m %y")))
            elif a != None and b != None:
                temp['from'] = re.sub(" ", "/", str(all_tour[0].date.strftime("%d %m %y")))
                temp['to'] = re.sub(" ", "/", str(all_tour[len(all_tour)-1].end_date.strftime("%d %m %y")))
                from_date = all_tour[0].date
                to_date = all_tour[len(all_tour)-1].end_date
                # temp['number_of_days'] = get_days_between_dates(temp['from'], temp['to'])
            
            ct = datetime.now().date()

            if from_date > ct:
                incoming_show.append(temp)
            elif from_date <= ct and to_date >= ct:
                ongoing_show.append(temp)
            else:
                elapsed_show.append(temp)

            # all_marked_to_show.append(temp)
        # print("ongoing = ", ongoing_show, "\nincoming = ", incoming_show, "\nelapsed = ", elapsed_show)

        return render(request, "ScheduleInspection.html", {"ongoing":ongoing_show, "incoming": incoming_show, "elapsed": elapsed_show, "count_ongoing": len(ongoing_show), "count_elapsed": len(elapsed_show), "count_incoming": len(incoming_show)})
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="ScheduleInspection",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})

#=======================Aryaman end  ================================================
#=======================Inspection schedule ends here  ================================================

############################################################ Apeksha part #######################################################################################################
# def copyto_list(request):
#     empnox = models.Level_Desig.objects.exclude(delete_flag=True).filter(Q(official_email_ID=request.user) | Q(official_email_ID=request.user.email), empno__isnull=False)
#     if empnox:
#         empno = empnox[0].empno_id
#         desig = empnox[0].designation_code
 
#     else:
#         messages.error(request, 'You are not authorize to view this page. Please contact admin')
 
   
#     mails = list(m1.Insp_mail_details.objects.filter(area='Copy To').values('mail_no','inspection_no', 'body', 'send_to', 'created_on'))
#     new_mail=[]
#     space =''
#     for i in mails:
       
#         i.update({'created_on':i['created_on'].strftime("%d/%m/%y")})
#         ofcs=i['send_to'].split(',')
#         if space in ofcs or 'RD030110007' in ofcs:
#             mails.remove(i)
#         else:
#             for j in range(len(ofcs)):
#                 ofcs[j]=int(ofcs[j])
           
#             if desig not in ofcs:
#                 mails.remove(i)
#             else:
#                 new_mail.append(i)
#     for i in new_mail:
#         insp_ofc=list(m1.Inspection_details.objects.filter(inspection_no=i['inspection_no']).values('inspection_officer__designation', 'inspection_officer_id'))
#         i.update(insp_ofc[0])
#         i.update({'doc_type':'Inspection'})
#         print(i)
 
    ########################################################### SEARCH PART ###############################################################################
 
    # officers=models.Level_Desig.objects.exclude(delete_flag=True).filter().values('designation', 'designation_code')
    # if request.method == 'POST':  
    #     date_range=request.POST.get('date_range')
    #     subject=request.POST.get('subject')
    #     action_by= request.POST.get('action_by_test')
    #     marked_officers=action_by.split(',')
 
    #     if action_by:
    #         lst=[]
    #         for m in new_mail:
    #             if str(m['inspection_officer_id']) in marked_officers:
    #                 lst.append(m)
    #         new_mail=lst
           
    #     if date_range:
    #         lst=[]
    #         sp_date = date_range.split('-')
    #         start  = datetime.strptime(sp_date[0].strip(),"%d/%m/%Y").strftime("%d/%m/%y")
    #         end  = datetime.strptime(sp_date[1].strip(),"%d/%m/%Y").strftime("%d/%m/%y")
    #         for m in new_mail:
    #             if m['created_on'] >=start and m['created_on'] <=end:
    #                lst.append(m)
    #         new_mail=lst
           
    #     if subject:
    #         lst=[]
    #         for m in new_mail:
    #             if m['doc_type'] == subject:
    #                 lst.append(m)
    #         new_mail=lst
       
    # context={'mails':new_mail, 'officers':officers}
    # return render(request,'copyto_list.html', context)    
 
############################################################ Apeksha part end ###################################################################################################






#######################################   commanlogin 

import secrets
import string
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import pad,unpad
def encrypt_login(raw, key ):
    raw = pad(raw.encode(),16)
    cipher = AES.new(key.encode('utf-8'), AES.MODE_ECB)
    return base64.b64encode(cipher.encrypt(raw))

def decrypt_login(enc , key):
    enc = base64.b64decode(enc)
    cipher = AES.new(key.encode('utf-8'), AES.MODE_ECB)
    return unpad(cipher.decrypt(enc),16)


def commanloginwithencode(request):
    alphabet = string.ascii_letters + string.digits
    token = ''.join(secrets.choice(alphabet) for i in range(32))
    # token=bytes(token, 'utf-8')
    user = 'crb@rb.railnet.gov.in'
    lst = list(m1.commanlogin.objects.filter(user = user, sites = 'DLW').values())
    print(lst)
    if len(lst)>0:
        username = lst[0]['auth']
        password = lst[0]['pwd']
        user = encrypt_login(username, token).decode('utf-8')
        password = encrypt_login(password, token).decode('utf-8')
        password = token + password 
        data = {
                'user':user,
                'pwd':password
        }
        return redirect(f'https://trialblwerp.indianrailways.gov.in/login_post/{json.dumps(data)}')
    else:
        return HttpResponse(' Not Permitted')



def compliance_filterdata_ajax_dash(request):
    try:
        if request.method == "GET" and request.is_ajax():
            str=request.GET.get('str')
            # if(str=='filter'):
            #     rly_id=request.GET.get('rly_id')
            #     if(rly_id==""):
            #         list3=models.railwayLocationMaster.objects.filter(location_type='DIV').values('location_code')
            #     else:    
            #         list3=models.railwayLocationMaster.objects.filter(location_type='DIV',parent_location_code=rly_id).values('location_code')
            #     list4=[]
            #     for i in list3:
            #         list4.append(i['location_code'])   
            #     return JsonResponse({'div':list4})
            
            cuser=request.user.username
            desigid=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].designation_code
        
        #data for reply modal    
            if(str=='reply'):
                status=request.GET.get('status')
                item_no=0
                inspection_id=0
                list3=[]
                list4=[]
                list6=[]
                desiglist=[]
            #gunjan
                if(request.GET.get('inspection_id')):
                    inspection_id=request.GET.get('inspection_id')
                    listdesig1=m1.Inspection_details.objects.filter(inspection_no=inspection_id).values('inspection_officer_id')
                    listdesig=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=listdesig1).values('designation')
                    listname1=m1.Inspection_details.objects.filter(inspection_no=inspection_id).values('modified_by')
                    empfname=m1.empmast.objects.filter(empno__in=listname1)[0].empname
                    empmname=m1.empmast.objects.filter(empno__in=listname1)[0].empmname
                    emplname=m1.empmast.objects.filter(empno__in=listname1)[0].emplname
                    if(empmname==None and emplname==None):
                        listname=empfname
                    elif(empmname==None):
                        listname=empfname + " " + emplname
                    elif(emplname==None):
                        listname=empfname + " " + empmname   
                    else:
                        listname=empfname + " " + empmname + " " + emplname
                    # print(listname,'rajputttttttttttttttttttttttt')
                    list1=m1.Inspection_details.objects.filter(inspection_no=inspection_id).values()
                    list5=[]
                # # for pending/rejected reply and pending query
                #     if(status=='P'):
                #         list5=m1.Marked_Officers.objects.filter(item_no__inspection_no_id=inspection_id,marked_to_id=desigid,status_flag=1).values('item_no_id')
                # # for send reply
                #     elif(status=='S'):
                #         list5=m1.Marked_Officers.objects.filter(item_no__inspection_no_id=inspection_id,marked_to_id=desigid,status_flag=2).values('item_no_id')
                # # for accepted reply
                #     elif(status=='A'):
                #         list5=m1.Marked_Officers.objects.filter(item_no__inspection_no_id=inspection_id,marked_to_id=desigid,status_flag=3).values('item_no_id')
                # # for rejected reply    
                #     elif(status=='R'):
                #         list5=m1.Marked_Officers.objects.filter(item_no__inspection_no_id=inspection_id,marked_to_id=desigid,status_flag=4).values('item_no_id')
                # # for send query
                #     else:
                    # list5=m1.Marked_Officers.objects.filter(item_no__inspection_no_id=inspection_id,marked_to_id=desigid).values('item_no_id')
                    # for i in list5:
                    #     list6.append(i['item_no_id'])
                    # list2=m1.Item_details.objects.filter(item_no__in=list6).values() 
                    for i in list1:
                        temp={}
                        temp['inspection_no']=i['inspection_no']
                        temp['inspection_note_no']=i['inspection_note_no'] if i['inspection_note_no']!=None else 'NA'
                        temp['inspection_title']=i['inspection_title']
                        temp['inspection_date']=i['inspected_on'].strftime("%d/%m/%y") if i['inspected_on']!=None else 'NA'
                        temp['empname']=listname if listname!=None else 'NA'
                        list3.append(temp)
                    list5=m1.Marked_Officers.objects.filter(item_no__inspection_no_id=inspection_id).values_list('item_no', flat=True)
                    print('list5', list5)
                    list4=list(m1.Item_details.objects.filter(item_no__in=list5).values())
                    
                    for i in list4:
                        # if m1.Marked_Officers.objects.filter(item_no__inspection_no_id=inspection_id,marked_to_id=desigid,status_flag=4): 
                            # temp['revert']=m1.Marked_Officers.objects.filter(item_no__inspection_no_id=inspection_id,marked_to_id=desigid,status_flag=4)[0].revert
                            # reverted_on=m1.Marked_Officers.objects.filter(item_no__inspection_no_id=inspection_id,marked_to_id=desigid,status_flag=4)[0].reverted_on
                            # temp['reverted_on']=reverted_on.strftime("%d/%m/%y") if reverted_on!=None else 'NA'
                        comp=m1.Marked_Officers.objects.filter(item_no=i['item_no'])
                        if comp:
                            if comp[0].compliance is not None:
                                compliance = comp[0].compliance
                            else:
                                compliance = '-'
                        reply_on=m1.Marked_Officers.objects.filter(item_no=i['item_no'])[0].reply_on
                        reply_on=reply_on.strftime("%d/%m/%y") if reply_on!=None else '-'
                        
                        i.update({'compliance': compliance, 'reply_on': reply_on})
                    print(list4)
                    for i in listdesig:
                        temp={}
                        temp['designation']=i['designation'] if i['designation']!=None else 'NA'
                        desiglist.append(temp)
                    
                        # list4.append(temp)
                    # for i in list2:
                    #     #print(i,'iiii')
                    #     temp={} 
                    #     temp['item_no']=i['item_no']
                    #     if(i['type']=='H'):
                    #         temp['type']=i['type']
                    #         temp['item_title']=i['item_title']
                    #     elif(i['type']=='SH'):
                    #         temp['type']=i['type']
                    #         temp['observation']=i['observation']
                    #     item_list=[]
                    #     item_list=item_no_details(inspection_id)
                    #     for j in item_list:
                    #         # print(j,'jjjjj')
                    #         if(i['item_no']==j['item_test']):
                    #             temp['item']=j['count']
                    # # for rejected reply
                    #     if(m1.Officers_Remark.objects.filter(marked_no__item_no=i['item_no'],marked_desig_id_id=desigid)):
                    #         temp['reply_received']=m1.Officers_Remark.objects.filter(marked_no__item_no=i['item_no'],marked_desig_id_id=desigid)[0].reply_received
                    #         temp['remark']=m1.Officers_Remark.objects.filter(marked_no__item_no=i['item_no'],marked_desig_id_id=desigid)[0].remark
                    #         temp['rejected_on']=m1.Officers_Remark.objects.filter(marked_no__item_no=i['item_no'],marked_desig_id_id=desigid)[0].rejected_on.strftime("%d/%m/%y")
                    # # for reverted inspection
                    #     if m1.Marked_Officers.objects.filter(item_no__inspection_no_id=inspection_id,marked_to_id=desigid,status_flag=4): 
                    #         temp['revert']=m1.Marked_Officers.objects.filter(item_no__inspection_no_id=inspection_id,marked_to_id=desigid,status_flag=4)[0].revert
                    #         reverted_on=m1.Marked_Officers.objects.filter(item_no__inspection_no_id=inspection_id,marked_to_id=desigid,status_flag=4)[0].reverted_on
                    #         temp['reverted_on']=reverted_on.strftime("%d/%m/%y") if reverted_on!=None else 'NA'
                    #     temp['compliance']=m1.Marked_Officers.objects.filter(item_no=i['item_no'],marked_to_id=desigid)[0].compliance
                    #     reply_on=m1.Marked_Officers.objects.filter(item_no=i['item_no'],marked_to_id=desigid)[0].reply_on
                    #     temp['reply_on']=reply_on.strftime("%d/%m/%y") if reply_on!=None else 'NA'
                    #     list4.append(temp)  
                 
            return JsonResponse({'idetails':list3,'itemdetails':list4,'desigdetails':desiglist,})
            
           
    except Exception as e:
        try:
            m1.error_Table.objects.create(fun_name="compliance_filterdata_ajax_dash",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        #messages.error(request, 'Error : '+str(e))
        return render(request, "errorspage.html", {})





# Punctuality

# def devinsapi_punctuality_cause(request):
#     url='http://10.60.200.171/reports/Report?reportType=RailwayWisePunctualityCauseService'
#     data = {"userName": "RailwayWisePunctualityCauses",
#             "password":"icmsReport@20221",
#             "fromDate":"1-Apr-2022",
#             "toDate":"30-Oct-2022",
#             "gauge":"BG",
#             "trainTypeGroup":"ALL",
#             "reportLevel":"ZN"}
#     headers = {"Content-Type": "application/json; charset=utf-8"}
#     response = requests.request("POST", url,headers=headers,json=data)
#     l_main=response.json() 
#     data = l_main['records']
#     print(data)
#     from datetime import datetime 
#     for i in range(len(data)):
#         # print(mylist1['records'][i]['scheduleDate'])
#         dates = data[i]['scheduleDate']
#         dates = datetime.strptime(dates,'%d-%b-%Y')
#         if m1.Cause_Service_Output.objects.filter(Scheduled_Date=dates,Zone_Code=data[i]['zoneCode'],cause_code=data[i]['causeCode'],train_group=data[i]['trainTypeGroup']).exists():
#             m1.Cause_Service_Output.objects.update(department_code=data[i]['departmentCode'],duration=data[i]['duration'])
#         else:
#             m1.Cause_Service_Output.objects.create(Scheduled_Date=dates,Zone_Code=data[i]['zoneCode'],cause_code=data[i]['causeCode'],department_code=data[i]['departmentCode'],duration=data[i]['duration'],train_group=data[i]['trainTypeGroup'])
#     return data

# def devinsapi_punctuality_service(request):
#     url='http://10.60.200.171/reports/Report?reportType=RailwayWisePunctualityService'
#     data = {"userName": "RailwayWisePunctualityService",
#                 "password":"icmsReport@20221",
#                 "fromDate":"1-Apr-2022",
#                 "toDate":"30-Oct-2022",
#                 "gauge":"BG",
#                 "trainTypeGroup":"ALL",
#                 "reportLevel":"ZN"}
#     headers = {"Content-Type": "application/json; charset=utf-8"}
#     response = requests.request("POST", url,headers=headers,json=data)
#     l_main=response.json() 
#     data = l_main['records']
#     from datetime import datetime 
#     for i in range(len(data)):
#         # print(mylist1['records'][i]['scheduleDate'])
#         dates = data[i]['scheduleDate']
#         dates = datetime.strptime(dates,'%d-%b-%Y')
#         if m1.Punctuality_Service_Output.objects.filter(Scheduled_Date=dates,Zone_Code=data[i]['zoneCode'],train_group=data[i]['trainTypeGroup']).exists():
#             m1.Punctuality_Service_Output.objects.filter(Scheduled_Date=dates,Zone_Code=data[i]['zoneCode'],train_group=data[i]['trainTypeGroup']).update(train_count=data[i]['trainCount'],nlt_count=data[i]['nltCount'])
#         else:
#             m1.Punctuality_Service_Output.objects.create(Scheduled_Date=dates,Zone_Code=data[i]['zoneCode'],train_count=data[i]['trainCount'],nlt_count=data[i]['nltCount'],train_group=data[i]['trainTypeGroup'])
#     print("count",len(data))
#     return data

# def devinsapi_punctuality_mrafdashboard(request):
#     url='http://10.60.200.171/reports/Report?reportType=MRAfDashboard'
#     data = {"fromDate":"1-Apr-2022",
#             "toDate":"30-Oct-2022"}
#     headers = {"Content-Type": "application/json; charset=utf-8"}
#     response = requests.request("POST", url,headers=headers,json=data)
#     l_main=response.json() 
#     # data = l_main['vSubAssetFailureList']
#     data = l_main['vSubAssetFailureList']
#     return data

# def devinsapi(request):
#     data = devinsapi_punctuality_cause(request)
#     print(data)
#     data1 = devinsapi_punctuality_service(request)
#     print(data1)
#     # data3 = devinsapi_punctuality_mrafdashboard(request)
#     # print(data3)
#     return HttpResponse('hhh')







###########################   rsa encription decription      mithun

def prime_nos():
    s=100
    e=999
    import random
    primes = [i for i in range(s,e) if isPrime(i)]
    return primes

def isPrime(num):
        for i in range(2, math.floor(math.sqrt(num))+1):
            if num % i == 0:
                return False
        return True  

def generate_public_private_key(p: int, q: int, primes):
    n = p * q
    phi_n = (p - 1) * (q - 1)
    public_key = 65537
    private_key = pow(public_key, -1, phi_n)
    return (public_key,private_key)

def encrypt_text(public_key, n , plaintext):
    e = public_key
    encrypted = ''
    for letter in plaintext:
        encrypted = encrypted + chr((ord(letter) ** e) % n)
    return encrypted


def decrypt_text(private_key, n, ciphertext):
    ciphertext = base64.urlsafe_b64decode(ciphertext)
    ciphertext = ciphertext.decode()
    d = private_key
    decrypted = ''
    for letter in ciphertext:
        decrypted = decrypted + chr(ord(letter) ** d % n)
    return decrypted

def key_generate():
    primes = prime_nos()
    p=random.choice(primes)
    q=random.choice(primes)
    while p == q:
        q=random.choice(primes)
    n = p * q
    public_key, private_key = generate_public_private_key(p ,q ,primes)
    plain_text = 'itpi@123'
    cipher_text = encrypt_text(public_key, n, plain_text)
    cipher_text = bytes(cipher_text, 'utf-8')
    cipher_text = base64.urlsafe_b64encode(cipher_text)
    plain_text = decrypt_text(private_key, n, cipher_text)
    return HttpResponse('hhhh')



from rest_framework import status
from rest_framework.response import Response
from rest_framework.decorators import api_view
from rest_framework.decorators import permission_classes
from rest_framework.decorators import authentication_classes
from django.views.decorators.csrf import csrf_exempt
from rest_framework.authentication import TokenAuthentication
from rest_framework.permissions import IsAuthenticated
from rest_framework.authtoken.models import Token
import os
import uuid
@api_view(['GET','POST'])
def get_sso_session(request):
    if request.method=="POST":
        try:            
            import json
            yourdata=[]
            received_json_data = json.loads(request.body) 
            app_id=received_json_data['app_id']
            pub_key=int(received_json_data['public_key'])
            pub_val=int(received_json_data['value'])
            user_id=received_json_data['user_id']
            
            yourdata=[]
            primes = prime_nos()
            p=random.choice(primes)
            q=random.choice(primes)
            while p == q:
                q=random.choice(primes)
            n = p * q
            public_key, private_key = generate_public_private_key(p ,q ,primes) 
            lowercase_str = uuid.uuid4().hex[:5]
            
            time = str(datetime.now()).split('.')[1]
            s_id =lowercase_str + time
            if m1.Sso_Session_Key.objects.filter(user_id = user_id,application=app_id).exists():
                m1.Sso_Session_Key.objects.filter(user_id = user_id,application=app_id).update(s_id=s_id,pub_key=public_key,pri_key=private_key,value=n)
            else:
                m1.Sso_Session_Key.objects.create(user_id = user_id, s_id=s_id,pub_key=public_key,pri_key=private_key,application=app_id,value=n)

            cipher_text = encrypt_text(pub_key, pub_val, s_id)
            cipher_text = bytes(cipher_text, 'utf-8')
            cipher_text = base64.urlsafe_b64encode(cipher_text)
            cipher_text = cipher_text.decode('UTF-8')
            

            #plain_text = decrypt_text(private_key, n, cipher_text)
            
            yourdata = {'status':'success','session_key':cipher_text,'public_key':public_key , 'value':n}
            
        except Exception as e: 
            yourdata = {'status':'error'}
            yourdata = json.dumps(yourdata)
            return HttpResponse(yourdata)


@api_view(['GET','POST'])
def get_application_user(request):
    print('received_json_data')
    if request.method=="POST":            
        import json
        yourdata={""}
        received_json_data = json.loads(request.body)   
        app_id=received_json_data['app_id']
        user_id=received_json_data['user_id']
        session_key=received_json_data['session_key']  

        data = list(m1.Sso_Session_Key.objects.filter(user_id = user_id,application=app_id).values())
        private_key = int(data[0]['pri_key'])
        n = int(data[0]['value'])
        plain_text = decrypt_text(private_key, n, session_key)

        if m1.Sso_Session_Key.objects.filter(user_id = user_id,application=app_id,s_id=plain_text).exists():
            data = list(m1.Sso_User_Details.objects.filter(sso_user=user_id,application=app_id).values())
            yourdata = {'status':'success','app_user':data[0]['app_user']}
        else:
            
            yourdata = {'status':'error'}
        yourdata = json.dumps(yourdata)
        return HttpResponse(yourdata)



###############################  111111111111



############################    e-praman comman login to include from here for destination server
import requests
import uuid
import http.client
import json
import hashlib
import base64
import hmac
import http
import secrets
import string
import pkce # run command pip install pkce
from django.shortcuts import render, redirect
from django.views.decorators.csrf import csrf_exempt
import jwt # run command pip install pyjwt
from jwcrypto import jwk, jwe # run command pip install jwcrypto
from cryptography.x509 import load_pem_x509_certificate

token_request_uri = "https://epramaan.meripehchaan.gov.in/openid/jwt/processJwtTokenRequest.do"
authGrantRequestUrl = "https://epramaan.meripehchaan.gov.in/openid/jwt/processJwtAuthGrantRequest.do"
client_id = "100001103" # will be shared by e-Pramaan at the time of service registration
aesKey = "995dd68b-142a-445d-bbf7-d8d1884a1dcc"
redirectionUri = "https://deveins.indianrailways.gov.in/processAuthCodeAndGetToken"
certificate = "epramaanprod2016.cer"
grant_type = "authorization_code"
scope = "openid"
nonce = uuid.uuid4().hex   # Create new randomly generated 32 characters string for every request
code_verifier = pkce.generate_code_verifier(length=64)  # Create new randomly generated 64 characters string for every request

def user_authenticate(request): 
    state = ''.join(secrets.choice(string.ascii_uppercase + string.ascii_lowercase) for i in range(16))    # Must be unique and create new for each request  
    code_challenge = pkce.get_code_challenge(code_verifier)
    response_type = "code"
    code_challenge_method = "S256"
    inputValue = ""+client_id+aesKey+state+nonce+redirectionUri+scope+code_challenge
    apiHmac = hashHMAChex(aesKey,inputValue)
    authRequestUrl = authGrantRequestUrl+"?scope="+scope+"&response_type="+response_type+"&redirect_uri="+redirectionUri+"&state="+state+"&code_challenge_method="+code_challenge_method+"&nonce="+nonce+"&client_id="+client_id+"&code_challenge="+code_challenge+"&request_uri="+authGrantRequestUrl+"&apiHmac="+apiHmac+""
    return redirect(authRequestUrl)

def user_authenticateprod(request): 
    token_request_uri = "https://epramaan.meripehchaan.gov.in/openid/jwt/processJwtTokenRequest.do"
    authGrantRequestUrl = "https://epramaan.meripehchaan.gov.in/openid/jwt/processJwtAuthGrantRequest.do"
    client_id = "100001080" # will be shared by e-Pramaan at the time of service registration
    aesKey = "995dd68b-142a-445d-bbf7-d8d1884a1dcc"
    redirectionUri = "https://einspection.indianrailways.gov.in/processAuthCodeAndGetToken"
    grant_type = "authorization_code"
    scope = "openid"
    nonce = uuid.uuid4().hex   # Create new randomly generated 32 characters string for every request
    code_verifier = pkce.generate_code_verifier(length=64)  # Create new randomly generated 64 characters string for every request
    state = ''.join(secrets.choice(string.ascii_uppercase + string.ascii_lowercase) for i in range(16))    # Must be unique and create new for each request  
    code_challenge = pkce.get_code_challenge(code_verifier)
    response_type = "code"
    code_challenge_method = "S256"
    inputValue = ""+client_id+aesKey+state+nonce+redirectionUri+scope+code_challenge
    apiHmac = hashHMAChex(aesKey,inputValue)
    authRequestUrl = authGrantRequestUrl+"?scope="+scope+"&response_type="+response_type+"&redirect_uri="+redirectionUri+"&state="+state+"&code_challenge_method="+code_challenge_method+"&nonce="+nonce+"&client_id="+client_id+"&code_challenge="+code_challenge+"&request_uri="+authGrantRequestUrl+"&apiHmac="+apiHmac+""
    print(authRequestUrl)
    return redirect(authRequestUrl)




def hashHMAChex(key,value):
    message = bytes(value, 'utf-8')
    secret = bytes(key, 'utf-8')
    hash = hmac.new(secret, message, hashlib.sha256)
    hash.hexdigest()
    var = base64.b64encode(hash.digest())
    apihmac = str(var.decode('utf-8')).replace('/', '_').replace('+','-')
    return apihmac
    
import ssl
ssl._create_default_https_context = ssl._create_unverified_context
# ssh.connect(hostname='epramaan.meripehchaan.gov.in', port=22, username='user')


def login_epramaan(request):
    if request.method == 'POST':
        username = request.POST.get('username')
        app_user = username.strip()
        _email=app_user
        userObj=m1.MyUser.objects.filter(username=app_user).first()
        # global f_name
        # global l_name
        global role_list 
        if userObj is not None:
            login(request, userObj)
            if userObj.user_role=="admin_rly" or userObj.user_role=="admin_super" or userObj.user_role=="admin_div" or userObj.user_role=="admin_roster":
                rlyid=models.AdminMaster.objects.filter(user_id=_email).values('rly_id')
            elif userObj.user_role!="admin_rly" or userObj.user_role!="admin_div" or userObj.user_role!="admin_super" or userObj.user_role!="admin_roster":
                desig=models.Level_Desig.objects.exclude(delete_flag=True).filter(official_email_ID=_email).values('designation','d_level')
                request.session["designation"] = desig[0]['designation']
                request.session["d_level"]=desig[0]['d_level']
            print(userObj)
            # f_name = userObj.first_name
            # l_name = userObj.last_name
            username =userObj.username
            
            if (userObj.is_admin==True) and (userObj.user_role=="admin_super"):
                if (userObj.phase_type=='1') or (userObj.phase_type==None) or (userObj.phase_type=='3'):
                    role_list = str(userObj.user_role)
                    request.session["nav"] = custommenu_admin(request)
                    # return HttpResponseRedirect('/adminuserHome')
                    return HttpResponseRedirect('/employeeList')
                elif userObj.phase_type=='2':
                    role_list = str(userObj.user_role)
                    # request.session["nav"] = custommenu2(userObj.phase_type,d_level)
                    return HttpResponseRedirect('/masterTable')
            
            elif (userObj.is_admin==True) and (userObj.user_role=="admin_rly"):
                if userObj.phase_type=='1' or (userObj.phase_type==None) or (userObj.phase_type=='3'): 
                    role_list = str(userObj.user_role)
                    request.session["nav"] = custommenu_admin(request)
                    return HttpResponseRedirect('/DivisonMaster')
                elif userObj.phase_type=='2':
                    role_list = str(userObj.user_role)
                    # request.session["nav "] = custommenu2(userObj.phase_type,d_level)
                    return HttpResponseRedirect('/masterTable')  

            elif (userObj.is_admin==True) and (userObj.user_role=="admin_div"):
                if (userObj.phase_type=='1') or (userObj.phase_type==None) or (userObj.phase_type=='3'):
                    role_list = str(userObj.user_role)
                    request.session["nav"] = custommenu_admin(request)
                    return HttpResponseRedirect('/requests111')
                elif userObj.phase_type=='2':
                    role_list = str(userObj.user_role)
                    # request.session["nav"] = custommenu2(userObj.phase_type,d_level)
                    return HttpResponseRedirect('/masterTable')

            elif (userObj.is_admin==True) and (userObj.user_role=="admin_roster"):
                if userObj.phase_type=='1' or (userObj.phase_type==None) or (userObj.phase_type=='3'): 
                    role_list = str(userObj.user_role)
                    request.session["nav"] = custommenu_admin(request)
                    return HttpResponseRedirect('/roster_list')
                elif userObj.phase_type=='2':
                    role_list = str(userObj.user_role)
                    # request.session["nav "] = custommenu2(userObj.phase_type,d_level)
                    return HttpResponseRedirect('/masterTable')

            ##################################### USER LOGIN ###########################################
            else:
                try:
                    d_level=models.Level_Desig.objects.exclude(delete_flag=True).filter(official_email_ID=username)[0]
                    request.session['d_level']=d_level.d_level
                    #print('d_level: ',d_level.d_level,userObj.phase_type)
                except:
                    d_level=''
                username =userObj.username
                # role_list = "user"
                # Phase type 1
                if userObj.phase_type=='1':
                    role_list = str(userObj.user_role)
                    request.session["nav"] = custommenu(request,userObj.phase_type,d_level)
                    request.session['phase']='1'
                    if request.session['designation']=='CRB & CEO':
                        return HttpResponseRedirect('/home_page')
                    else:
                        return HttpResponseRedirect('/dash_home')

                # Phase Type 2
                elif userObj.phase_type=='2':
                    role_list = str(userObj.user_role)
                    request.session["nav"] = custommenu2(userObj.phase_type,d_level)
                    request.session['phase']='2'
                    return HttpResponseRedirect('/frontpage')
                
                # Phase Type 3
                elif userObj.phase_type=='3':
                    role_list = str(userObj.user_role)

                    request.session['nav1']=custommenu2(userObj.phase_type,d_level)
                    storeNav = custommenu(request,userObj.phase_type,d_level)
                    request.session['nav']=storeNav
                    request.session['phase']='3'
                    return HttpResponseRedirect('/frontpage')

                else:
                    role_list = str(userObj.user_role)
                    request.session["nav"] = custommenu(request,userObj.phase_type,d_level)
                    request.session['phase']='1'
                    return HttpResponseRedirect('/dash_home')

        else:
                #change 21-10
                if user.objects.filter(email=_email,is_active=False).exists():
                    messages.error(request, 'Request is not accepted yet.')
                else:
                    messages.error(request, 'Invalid Credentials')#till here 21-10
                #return HttpResponseRedirect('/rkvy_login')
                return render(request, "login.html")
        #print('hhhh')
            # context={
            #     'userObj':userObj,
            # }
        return render(request, "login.html")

@csrf_exempt
def processAuthCodeAndGetToken(request):
    try:
        code = request.GET['code']
        conn = http.client.HTTPSConnection("epramaan.meripehchaan.gov.in")   
        payload = json.dumps({
                "code": [
                            code
                        ],
                "grant_type": [
                        grant_type
                        ],
                "scope":[
                        scope
                        ],
                "redirect_uri": [
                        token_request_uri
                        ],
                "request_uri": [
                        redirectionUri
                        ],
                "code_verifier": [
                            code_verifier
                        ],
                "client_id": [
                            client_id
                        ]
            })
        headers = {'Content-Type': 'application/json'}
        data= requests.request("POST", "https://epramaan.meripehchaan.gov.in/openid/jwt/processJwtTokenRequest.do", headers=headers, data=payload , stream=True)
        res = data.raw
        data = res.read()
        # conn.request("POST", "/openid/jwt/processJwtTokenRequest.do", payload, headers=headers)
        # res = conn.getresponse()
        jweToken = data.decode("utf-8")
        base64urlencodedkey = base64.b64encode(hashlib.sha256(nonce.encode('utf-8')).digest()).decode()
        finalbase64urlencodedkey = base64urlencodedkey.replace('+','-').replace('/','_').replace('=','')
        Startofkey='{"kty":"oct","k":"'
        endofkey='"}'
        jwkobjectkey="%s%s%s"%(Startofkey,finalbase64urlencodedkey,endofkey)
        finalKey = jwk.JWK.from_json(jwkobjectkey)
        jwe_token = jwe.JWE()
        jwe_token.deserialize(jweToken)
        jwe_token.decrypt(finalKey)
        decrypted_payload = jwe_token.payload.decode()
        certificateData = open(certificate, "r").read().encode()
        cert = load_pem_x509_certificate(certificateData).public_key()
        jsonData = jwt.decode(decrypted_payload, cert, algorithms=['RS256'], options={"verify_exp": False},)   # type: ignore
        name = jsonData.get('name')
        print(jsonData)
        einsp_username = jsonData.get('service_user_id')
        
        
        
        
        
        # local_app_id = "insp1"

        # primes = prime_nos()
        # p=random.choice(primes)
        # q=random.choice(primes)
        # while p == q:
        #     q=random.choice(primes)
        # n = p * q
        # public_key, private_key = generate_public_private_key(p ,q ,primes) 

        # url='https://deveins.indianrailways.gov.in/get_sso_session/'
        # data = {"app_id": local_app_id,"public_key": public_key, "value":n,"user_id":sso_username}
        # headers = {"Content-Type": "application/json; charset=utf-8"}
        # response = requests.request("POST", url,headers=headers,json=data)
        # l_main=response.json() 
        # status = l_main['status']
        # session_key = l_main['session_key']
        # pub_key = int(l_main['public_key'])
        # pub_val = int(l_main['value'])

        # plain_text = decrypt_text(private_key, n, session_key)

        # cipher_text = encrypt_text(pub_key, pub_val, plain_text)
        # cipher_text = bytes(cipher_text, 'utf-8')
        # cipher_text = base64.urlsafe_b64encode(cipher_text)
        # cipher_text = cipher_text.decode('UTF-8')


        # url='https://deveins.indianrailways.gov.in/get_application_user/'
        # data = {"app_id": local_app_id,"session_key": cipher_text,"user_id":sso_username}
        # headers = {"Content-Type": "application/json; charset=utf-8"}
        # response = requests.request("POST", url,headers=headers,json=data)
        # l_main=response.json() 
        # status = l_main['status']
        # app_user = l_main['app_user']
        # print('ggggggggggggggggggggggggggg               ',app_user)
        
        
        
        # login(request, userObj)
        # if userObj.user_role=="user":
        username = einsp_username.strip()
        # app_user=_email
        # userObj=m1.MyUser.objects.filter(username=app_user).first()
        # login(request, userObj)
        # print(userObj,userObj.user_role)
        # if userObj.user_role=="admin_rly" or userObj.user_role=="admin_super" or userObj.user_role=="admin_div":
        #     rlyid=models.AdminMaster.objects.filter(user_id=_email).values('rly_id')
        # elif userObj.user_role!="admin_rly" or userObj.user_role!="admin_div" or userObj.user_role!="admin_super":
        #     desig=models.Level_Desig.objects.exclude(delete_flag=True).filter(official_email_ID=_email).values('designation','d_level')
        #     request.session["designation"] = desig[0]['designation']
        #     request.session["d_level"]=desig[0]['d_level']
        
        
        # # print("###################### Inside Login ######################")
        # # print(userObj.username==None)
        # # print(userObj.username,'000000000')
        # # print(userObj.is_admin)
        # f_name = userObj.first_name
        # l_name = userObj.last_name
        # username =userObj.username
        # print(f_name,l_name,username)
        # if (userObj.is_admin==True) and (userObj.user_role=="admin_super"):
        #     if (userObj.phase_type=='1') or (userObj.phase_type==None) or (userObj.phase_type=='3'):
        #         role_list = str(userObj.user_role)
        #         request.session["nav"] = custommenu_admin(request)
        #         # return HttpResponseRedirect('/adminuserHome')
        #         return HttpResponseRedirect('/employeeList')
        #     elif userObj.phase_type=='2':
        #         role_list = str(userObj.user_role)
        #         # request.session["nav"] = custommenu2(userObj.phase_type,d_level)
        #         return HttpResponseRedirect('/masterTable')
        #     print('hhhhhhhhhhhhhhhh')
        # elif (userObj.is_admin==True) and (userObj.user_role=="admin_rly"):
        #     if userObj.phase_type=='1' or (userObj.phase_type==None) or (userObj.phase_type=='3'): 
        #         role_list = str(userObj.user_role)
        #         # request.session["nav"] = custommenu(userObj.phase_type,d_level)
        #         return HttpResponseRedirect('/zonaluserHome')
        #     elif userObj.phase_type=='2':
        #         role_list = str(userObj.user_role)
        #         # request.session["nav "] = custommenu2(userObj.phase_type,d_level)
        #         return HttpResponseRedirect('/masterTable')  

        # elif (userObj.is_admin==True) and (userObj.user_role=="admin_div"):
        #     if (userObj.phase_type=='1') or (userObj.phase_type==None) or (userObj.phase_type=='3'):
        #         role_list = str(userObj.user_role)
        #         # request.session["nav"] = custommenu(userObj.phase_type,d_level)
        #         return HttpResponseRedirect('/divisonuserHome')
        #     elif userObj.phase_type=='2':
        #         role_list = str(userObj.user_role)
        #         # request.session["nav"] = custommenu2(userObj.phase_type,d_level)
        #         return HttpResponseRedirect('/masterTable')
        
        # ##################################### USER LOGIN ###########################################
        # else:
        #     try:
        #         d_level=models.Level_Desig.objects.exclude(delete_flag=True).filter(official_email_ID=username)[0]
        #         request.session['d_level']=d_level.d_level
        #         #print('d_level: ',d_level.d_level,userObj.phase_type)
        #     except:
        #         d_level=''
        #     username =userObj.username
        #     print(username,userObj.phase_type)
        #     # role_list = "user"
        #     # Phase type 1
        #     if userObj.phase_type=='1':
        #         role_list = str(userObj.user_role)
        #         request.session["nav"] = custommenu(request,userObj.phase_type,d_level)
        #         request.session['phase']='1'
        #         if request.session['designation']=='CRB & CEO':
        #             return HttpResponseRedirect('/home_page')
        #         else:
        #             return HttpResponseRedirect('/dash_home')

        #     # Phase Type 2
        #     elif userObj.phase_type=='2':
        #         role_list = str(userObj.user_role)
        #         request.session["nav"] = custommenu2(userObj.phase_type,d_level)
        #         request.session['phase']='2'
        #         return HttpResponseRedirect('/frontpage')
            
        #     # Phase Type 3
        #     elif userObj.phase_type=='3':
        #         role_list = str(userObj.user_role)
        #         request.session['nav1']=custommenu2(userObj.phase_type,d_level)
        #         storeNav = custommenu(request,userObj.phase_type,d_level)
        #         request.session['nav']=storeNav
        #         request.session['phase']='3'
        #         return HttpResponseRedirect('/frontpage')

        #     else:
        #         role_list = str(userObj.user_role)
        #         request.session["nav"] = custommenu(request,userObj.phase_type,d_level)
        #         request.session['phase']='1'
        #         return HttpResponseRedirect('/dash_home')
        
        return render(request, "login_epramaan.html",{'username':username})
    except Exception as e:
        try:
            m1.error_Table.objects.create(fun_name="compliance_filterdata_ajax_dash",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        messages.error(request, 'invalid login')
        return redirect("/")

salt = ""

@ csrf_exempt
# def postbackusername( request):
   
#     sso_token = request.POST[ 'ssoToken']
#     print(sso_token)
#     if sso_token is not None:
#         #transactionID = request.POST['transactionId']
       
#         #print(transactionID)
   
#         seed = hashlib. sha256( aesKey. encode( 'utf-8')). digest()
   
#         encryptedTextByte = base64. b64decode( sso_token)
#         cipher = AES. new( seed, AES. MODE_ECB)
#         decryptedText = cipher. decrypt( encryptedTextByte)
   
#         decryptedText = decryptedText. decode( 'utf-8')
#         decryptedText_data = decryptedText. rsplit( '}', 1)[ 0]+ '}'
#         decryptedTextinjsonform = json. loads( decryptedText_data)       
#         global salt
       
#         remainingString = decryptedText. rsplit( '}', 1)[ 1]
#         for i in remainingString:
#             if i. isdigit() == True:
#                 salt = salt + i  
       
#         if 'sso_id' in decryptedTextinjsonform:
#             sso_Id = decryptedTextinjsonform.get('sso_id')
#         else:
#             sso_Id = decryptedTextinjsonform.get('epramaanId')  
#         return render(request,'pushbackusername.html',{'sso_Id':sso_Id})
    
def postbackusername( request):
   
    sso_token = request.POST[ 'ssoToken']
    print(sso_token)
    if sso_token is not None:
        #transactionID = request.POST['transactionId']
       
        #print(transactionID)
   
        seed = hashlib. sha256( aesKey. encode( 'utf-8')). digest()
   
        encryptedTextByte = base64. b64decode( sso_token)
        cipher = AES. new( seed, AES. MODE_ECB)
        decryptedText = cipher. decrypt( encryptedTextByte)
   
        decryptedText = decryptedText. decode( 'utf-8')
        decryptedText_data = decryptedText. rsplit( '}', 1)[ 0]+ '}'
        decryptedTextinjsonform = json. loads( decryptedText_data)       
        global salt
       
        remainingString = decryptedText. rsplit( '}', 1)[ 1]
        for i in remainingString:
            if i. isdigit() == True:
                salt = salt + i  
       
        if 'sso_id' in decryptedTextinjsonform:
            sso_Id = decryptedTextinjsonform.get('sso_id')
        else:
            sso_Id = decryptedTextinjsonform.get('epramaanId')  
        return render(request,'pushbackusername.html',{'sso_Id':sso_Id})




class EnrolSPServiceResponse:
       
    def __init__( self, responseTimestamp, serviceId, serviceUserId, transactionId, verified):
          self. responseTimestamp = responseTimestamp
          self. serviceId = serviceId
          self. serviceUserId = serviceUserId
          self. transactionId = transactionId
          self. verified = verified
   
    def __str__( self):
        return f" { self . responseTimestamp }{ self . serviceId }{ self . serviceUserId }{ self . transactionId }{ self . verified } "
 
    # getter method
    def getresponseTimestamp( self):
        return self. responseTimestamp
     
    # setter method
    def setresponseTimestamp( self, x):
        self. responseTimestamp = x
       
    # getter method
    def getserviceId( self):
        return self. serviceId
     
    # setter method
    def setserviceId( self, x):
        self. serviceId = x    

    # getter method
    def getserviceUserId( self):
        return self. serviceUserId
     
    # setter method
    def setserviceUserId( self, x):
        self. serviceUserId = x
   
    # getter method
    def gettransactionId( self):
        return self. transactionId
     
    # setter method
    def settransactionId( self, x):
        self. transactionId = x

    # getter method
    def getverified( self):
        return self. verified
     
    # setter method
    def setverified( self, x):
        self. verified = x
       


class EnrolSPServiceResponseWrapper:
       
    def __init__( self, encryptedEnrolSPServiceResponse, serviceId):
          self. encryptedEnrolSPServiceResponse = encryptedEnrolSPServiceResponse
          self. serviceId = serviceId
          #print(self.encryptedEnrolSPServiceResponse)
   
    def __str__( self):
        return f" { self . encryptedEnrolSPServiceResponse }{ self . serviceId } "
 
    # getter method
    def getencryptedEnrolSPServiceResponse( self):
        return self. encryptedEnrolSPServiceResponse
     
    # setter method
    def setencryptedEnrolSPServiceResponse( self, x):
        self. encryptedEnrolSPServiceResponse = x
       
    # getter method
    def getserviceId( self):
        return self. serviceId
     
    # setter method
    def setserviceId( self, x):
        self. serviceId = x    

import time
@ csrf_exempt
def onetimepushback(request):
    username = request.POST['Uname'] 
    password = request.POST['Pass'] 
    sso_id = request.POST['sso_id'] 
    userObj = authenticate(username=username, password=password)
    if userObj is None:
        messages.error(request, "Wrong Username or Password")
        return render(request,'pushbackusername.html',{'sso_Id':sso_id})
    
    epramaanURL = "https://epramaan.meripehchaan.gov.in/rest/epramaan/enrol/response"
    responseObject = EnrolSPServiceResponse( round(time.time()* 1000), int( client_id), username, sso_id, True)
    responseJSON = str( json. dumps( responseObject. __dict__)) + salt

    seed = hashlib. sha256( aesKey. encode( 'utf-8')). digest()
    cipher = AES. new( seed, AES. MODE_ECB)
   
    encryptedByte = cipher. encrypt( pad( responseJSON. encode( 'utf-8'), AES. block_size))
    encryptedtext = base64. b64encode( encryptedByte)
    encryptedEnrolSPServiceResponse = encryptedtext. decode( "UTF-8")
   
    enrolSPServiceResponseWrapper = EnrolSPServiceResponseWrapper( encryptedEnrolSPServiceResponse, int( client_id))
    enrolSPServiceResponseWrapperinjsonform = json. dumps( enrolSPServiceResponseWrapper. __dict__)
    #print(enrolSPServiceResponseWrapperinjsonform)
   
    response = requests.post( epramaanURL, data= enrolSPServiceResponseWrapperinjsonform, headers={ "Content-Type": "application/json"})

    if response.status_code == 200:
        return redirect('/user_authenticate')
        
        #return render( request, "success.html")        
    else:
        return render( request, "error_test.html")


#saud faisal


# def signup_hrms(request):
#     if request.method == 'GET':
#         print(request.GET.get('ajaxname'))
#         if request.GET.get('ajaxname') == 'fetch_hrms':
#             hrms_id = request.GET.get('hrms_id')
#             print(hrms_id)
#             rlycode = None
#             if models.HRMS.objects.filter(hrms_employee_id = hrms_id).exists():
#                 obj = list(models.HRMS.objects.filter(hrms_employee_id = hrms_id).values())
#                 obj1 = models.HRMS.objects.get(hrms_employee_id = hrms_id)
#                 if models.railwayLocationMaster.objects.filter(location_description = obj[0]['current_unit_division']).exists():
#                     rlycode = models.railwayLocationMaster.objects.filter(location_description = obj[0]['current_unit_division'])[0]
                    
#                 if m1.empmast.objects.filter(hrms_id = hrms_id).exists():
#                     data = m1.empmast.objects.filter(hrms_id = hrms_id).update(empno=obj[0]['ipas_employee_id'],empname = obj[0]['employee_first_name'],
#                     empmname = obj[0]['employee_middle_name'],emplname = obj[0]['employee_last_name'],appointmentdate=obj[0]['appointment_date'],superannuation_date=obj[0]['superannuation_date'],gender=obj[0]['gender'],email=obj[0]['official_email_id'],contactno=obj[0]['official_mobile_no'],railwaygroup=obj[0]['railway_group'],pc7_level=obj[0]['paylevel'],service_status=obj[0]['service_status'],desig_longdesc=obj[0]['designation'],station_des=obj[0]['current_place'],dept_desc=obj[0]['department'],subdepartment=obj[0]['sub_department'],currentzone=obj[0]['current_zone'],currentunitdivision=obj[0]['current_unit_division'],rl_type=obj[0]['rltype'],rly_id = rlycode,profile_modified_by=obj[0]['ipas_employee_id']
#                     ,profile_modified_on=datetime.today()
#                     )
#                     print('inside empmast update')
                   
#                     # return JsonResponse({"obj":obj,"data":data},safe=False)
#                 else:
#                     m1.empmast.objects.create(empno=obj[0]['ipas_employee_id'], hrms_id = obj1,empname = obj[0]['employee_first_name'],
#                     empmname = obj[0]['employee_middle_name'],emplname = obj[0]['employee_last_name'],appointmentdate=obj[0]['appointment_date'],superannuation_date=obj[0]['superannuation_date'],gender=obj[0]['gender'],email=obj[0]['official_email_id'],contactno=obj[0]['official_mobile_no'],railwaygroup=obj[0]['railway_group'],pc7_level=obj[0]['paylevel'],service_status=obj[0]['service_status'],desig_longdesc=obj[0]['designation'],station_des=obj[0]['current_place'],dept_desc=obj[0]['department'],subdepartment=obj[0]['sub_department'],currentzone=obj[0]['current_zone'],currentunitdivision=obj[0]['current_unit_division'],rl_type=obj[0]['rltype'],rly_id = rlycode,profile_modified_by=obj[0]['ipas_employee_id']
#                     ,profile_modified_on=datetime.today()
#                     )
#                     print('inside empmast create')
#                 # TO SHOW THE RLY DIVISION AND DESIGNATION
#                     # return JsonResponse({"success":"created successfully"},safe=False)
                
#                 # hrms_id = request.GET.get('hrms_id')
#                 print("rlycode",rlycode)
#                 # print("hrms_id78",hrms_id)
#                 # emp = m1.empmast.objects.filter(hrms_id = hrms_id).values('empno')[0]['empno']
#                 # print("emp_data",emp)
#                 # if m1.empmast.objects.filter(empno = emp,rly_id_id__isnull = False).exists():
#                 #     rlyid = m1.empmast.objects.filter(empno = emp).values('rly_id_id')[0]['rly_id_id']
#                 #     print("rlyid99999999",rlyid)
#                 #     list1 = models.railwayLocationMaster.objects.filter(Q(location_type_desc='RAILWAY BOARD')|Q(location_type_desc='HEAD QUATER')|Q(location_type_desc='PRODUCTION UNIT')|Q(location_type_desc='PSU')|Q(location_type_desc='INSTITUTE')|Q(location_type_desc='RDSO'),rly_unit_code=rlyid).values('location_code')
#                 #     list2 =[]
#                 #     for i in list1:
#                 #         # print(i['designation'],'_________')
#                 #         list2.append(i['location_code'])

#                 #     # if there is division then list2 (railway) is empty then find its railway
#                 #     if(len(list2) == 0):
#                 #         list4 = list(models.railwayLocationMaster.objects.filter(Q(location_type_desc='DIVISION')|Q(location_type_desc='WORKSHOP')|Q(location_type_desc='OFFICE')|Q(location_type_desc='STORE')|Q(location_type_desc='CONSTRUCTION'),rly_unit_code=rlyid).values('location_code','location_type','parent_location_code'))
#                 #         print("parent_location_cod",list4[0]['parent_location_code'])
#                 #         list2.extend(list4[0]['parent_location_code'])
#                 #     else:
#                 #         list4 = list(models.railwayLocationMaster.objects.filter(Q(location_type_desc='DIVISION')|Q(location_type_desc='WORKSHOP')|Q(location_type_desc='OFFICE')|Q(location_type_desc='STORE')|Q(location_type_desc='CONSTRUCTION'),rly_unit_code=rlyid).values('location_code','location_type'))
#                 #     list7=models.Level_Desig.objects.exclude(delete_flag=True).filter(rly_unit_id=rlyid).values('designation','designation_code').order_by('designation')
                    
#                 #     if models.Level_Desig.objects.exclude(delete_flag=True).filter(rly_unit_id=rlyid,empno = emp).values('designation','designation_code').order_by('designation').exists():
#                 #         list7=models.Level_Desig.objects.exclude(delete_flag=True).filter(rly_unit_id=rlyid,empno = emp).values('designation','designation_code').order_by('designation')
#                 #     # else:
#                 #     #     pass
#                 #     allDesignations=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(rly_unit_id=rlyid).values('designation','designation_code').order_by('designation'))
#                 #     list8=[]
#                 #     for i in list7:
#                 #         # print(i['designation'],'_________')
#                 #         list8.append({"designation":i['designation'],"designation_code":i['designation_code']})
#                 #     print('list 899999',list8,list2,list4)
                        
#                 #     return JsonResponse({'Zone1':list2,'division1':list4,'desi':list8,'allDesignations':allDesignations},safe=False)
#                 # else:
#                 #     return JsonResponse({'alert1':'Railway id of the employee doest not exists'},safe = False) 
#                 return JsonResponse({'alert1':'hrms id matched'},safe = False) 
#             else:
#                 return JsonResponse({'alert':"HRMS Id Does Not Exist.Please Contact Admin"},safe=False)
        
#         elif request.GET.get('ajaxname') == 'send_otp':
#             cuser=request.user
#             hrms_id=request.GET.get("hrms_id")
#             # email = list(models.HRMS.objects.filter(hrms_employee_id =hrms_id).values('official_email_id','official_mobile_no'))[0]['official_email_id']
#             email = list(models.HRMS.objects.filter(hrms_employee_id =hrms_id).values('official_email_id','official_mobile_no'))[0]['official_email_id']
#             print(email)
#             if not email:
                
#                 print('inside if of email')
#                 return JsonResponse({'msg':"This HRMS Number has no Email Id"}, safe = False)
#             #print(type(email),'-------email------')
#             otp=generateOTP()
#             #print(otp,'___')
#             htmlgen = 'Your OTP is '+otp
#             # send_mail('E-inspection user verification for '+hrms_id,otp,'mfgcris@cris.org.in',[email], html_message=htmlgen)
#             # send_mail(
#             #             'Inspection user verification for '+hrms_id, #subject
#             #             htmlgen, #message body
#             #             'mfgcris@cris.org.in', # from email
#             #             [email], fail_silently=False, #to email
                    
#             #         )  
            
#             return JsonResponse({'otp':otp,"email":email}, safe = False)
        
#         elif request.GET.get('ajaxname') == 'FetchEmployee':
#                 hrms_id = request.GET.get('hrms_id')
#                 emp = m1.empmast.objects.filter(hrms_id = hrms_id).values('empno')[0]['empno']
#                 print("emp_data",emp)
#                 if m1.empmast.objects.filter(empno = emp,rly_id_id__isnull = False).exists():
#                     rlyid = m1.empmast.objects.filter(empno = emp).values('rly_id_id')[0]['rly_id_id']
#                     print("rlyid99999999",rlyid)
#                     list1 = models.railwayLocationMaster.objects.filter(Q(location_type_desc='RAILWAY BOARD')|Q(location_type_desc='HEAD QUATER')|Q(location_type_desc='PRODUCTION UNIT')|Q(location_type_desc='PSU')|Q(location_type_desc='INSTITUTE')|Q(location_type_desc='RDSO'),rly_unit_code=rlyid).values('location_code')
#                     list2 =[]
#                     for i in list1:
#                         # print(i['designation'],'_________')
#                         list2.append(i['location_code'])

#                     # if there is division then list2 (railway) is empty then find its railway
#                     if(len(list2) == 0):
#                         list4 = list(models.railwayLocationMaster.objects.filter(Q(location_type_desc='DIVISION')|Q(location_type_desc='WORKSHOP')|Q(location_type_desc='OFFICE')|Q(location_type_desc='STORE')|Q(location_type_desc='CONSTRUCTION'),rly_unit_code=rlyid).values('location_code','location_type','parent_location_code'))
#                         print("parent_location_cod",list4[0]['parent_location_code'])
#                         list2.extend(list4[0]['parent_location_code'])
#                     else:
#                         list4 = list(models.railwayLocationMaster.objects.filter(Q(location_type_desc='DIVISION')|Q(location_type_desc='WORKSHOP')|Q(location_type_desc='OFFICE')|Q(location_type_desc='STORE')|Q(location_type_desc='CONSTRUCTION'),rly_unit_code=rlyid).values('location_code','location_type'))
#                     list7=models.Level_Desig.objects.exclude(delete_flag=True).filter(rly_unit_id=rlyid).values('designation','designation_code').order_by('designation')
                    
#                     if models.Level_Desig.objects.exclude(delete_flag=True).filter(rly_unit_id=rlyid,empno = emp).values('designation','designation_code').order_by('designation').exists():
#                         list7=models.Level_Desig.objects.exclude(delete_flag=True).filter(rly_unit_id=rlyid,empno = emp).values('designation','designation_code').order_by('designation')
#                     # else:
#                     #     pass
#                     allDesignations=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(rly_unit_id=rlyid).values('designation','designation_code').order_by('designation'))
#                     list8=[]
#                     for i in list7:
#                         # print(i['designation'],'_________')
#                         list8.append({"designation":i['designation'],"designation_code":i['designation_code']})
#                     print('list 899999',list8,list2,list4)
                        
#                     return JsonResponse({'Zone1':list2,'division1':list4,'desi':list8,'allDesignations':allDesignations},safe=False)
#                 else:
#                     return JsonResponse({'alert1':'Railway id of the employee doest not exists'},safe = False) 
        
#         elif request.GET.get('ajaxname')=='proceed':

#             zone = request.GET.get('zone')
#             location_type = request.GET.get('location_type')
#             designation = request.GET.get('designation')

#             empnum = request.GET.get('empnum')
#             # empobject = m1.Level_Desig.objects.get(empno=empnum)

            
#             mobile = request.GET.get('contact')
#             empemail= request.GET.get('empemail')
#             posting = request.GET.get('status')
            
#             zone1 = request.GET.get('zone1')
#             location_type1 = request.GET.get('location_type1')
#             designation1 = request.GET.get('designation1')
#             password = request.GET.get('password')
#             # if password:
#             #     print("inside password009")
#             #     empobject.myuser_id.set_password(password)
#             #     empobject.save()
#             #     empobject.refresh_from_db()
#             print("datatosave",zone,location_type,designation,empnum,mobile,empemail,posting,zone1,location_type1,designation1,password)
#             print("password0009",password)

#             if models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code = designation,desig_user__isnull = True):
#                 id=user.objects.filter().order_by('-id')[0].id
#                 id+=1
#                 obj = user.objects.create_user(id = id,username=empemail,password=password,is_active=True, email=empemail,user_role='user')
#                 models.Level_Desig.objects.exclude(delete_flag=True).filter(empno_id = empnum,designation_code = designation).update(desig_user = obj)
#             else:
#                 users = models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code = designation)
#                 print("users99999999999",users[0])
#                 print("users99999999999",users[0].desig_user.password)
#                 # password1=users[0].desig_user.set_password(password)
#                 # print("password1",password1)
#                 # password1.save()
#                 # password1.refresh_from_db()
#                 m1.MyUser.objects.filter(username=empemail).update(password=make_password(password))
#             # write condition to save the primary charge and dual charge
#             alert = ''
#             if posting == 'P' and models.Level_Desig.objects.exclude(delete_flag=True).filter(empno_id = empnum,status = posting).exists():
#                 objectdesig= list(models.Level_Desig.objects.exclude(delete_flag=True).filter(empno_id = empnum,status = posting).values())
#                 models.Level_Desig.objects.exclude(delete_flag=True).filter(empno_id = empnum,designation_code =objectdesig[0]['designation_code']).update(empno_id = None)
#                 models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code =designation).update(empno_id =empnum,contactnumber = mobile,official_email_ID = empemail,status = posting,parent_desig_code = designation1)
#                 # return JsonResponse({"alert":"You are alreay on primary charge it will"},safe=False)
#                 alert = "You are alreay on primary charge it will change you primary charge"
#             elif posting == 'D' and models.Level_Desig.objects.exclude(delete_flag=True).filter(~Q(status = 'P'),empno_id = empnum).exists():
#                 models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code =designation).update(empno_id =empnum,contactnumber = mobile,official_email_ID = empemail,status = posting,parent_desig_code = designation1)
#                 # return JsonResponse({"alert":"You do not have any primary charge"},safe=False)
#                 alert = "You do not have any primary charge"
#             else:
#                 models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code =designation).update(empno_id =empnum,contactnumber = mobile,official_email_ID = empemail,status = posting,parent_desig_code = designation1)
#                 # print("FOrP79834",data)
#             # if models.Level_Desig.objects.exclude(delete_flag=True).filter(empno_id = empnum,designation_code = designation).exists():
#             #     models.Level_Desig.objects.exclude(delete_flag=True).filter(empno_id = empnum,designation_code =designation).update(contactnumber = mobile,official_email_ID = empemail)
#             # else:
#             #     models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code =designation).update(empno_id =empnum,contactnumber = mobile,official_email_ID = empemail)
            
#             # #save data to level desig 
#             # models.Level_Desig.objects.exclude(delete_flag=True).filter(empno_id = empnum,designation_code =designation).update(contactnumber = mobile,official_email_ID = empemail)

#             # code to save the password of the user
            
            
#             return JsonResponse({"DATA":"Data Saved Successfully",'alert1':alert},safe=False)

#         elif request.GET.get('ajaxname') == 'employee_details':
#             desig_code = request.GET.get('desig_code')
#             print("desig_code 45",desig_code)
#             # hrms_id = request.GET.get('hrms_id')
#             # employnum = m1.empmast.objects.filter(hrms_id = hrms_id).values('empno')[0]['empno']

#             # employee detils
#             emp = list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code = desig_code).values('empno','contactnumber','official_email_ID','status','parent_desig_code'))
#             print(emp[0]['parent_desig_code'])
#             # if emp[0]['parent_desig_code']:
#             #     emmm = list(models.Level_Desig.objects.exclude(delete_flag=True).filter(Q(rly_unit__location_type_desc='RAILWAY BOARD')|Q(rly_unit__location_type_desc='HEAD QUATER')|Q(rly_unit__location_type_desc='PRODUCTION UNIT')|Q(rly_unit__location_type_desc='PSU')|Q(rly_unit__location_type_desc='INSTITUTE')|Q(rly_unit__location_type_desc='RDSO'),designation_code = emp[0]['parent_desig_code']).values('designation','designation_code',"rly_unit__location_code"))
#             #     print("mydata4666",emmm)
#             #     if not emmm:
#             #         print("not emmm")
#             #         emmm = list(models.Level_Desig.objects.exclude(delete_flag=True).filter(Q(rly_unit__location_type_desc='DIVISION')|Q(rly_unit__location_type_desc='WORKSHOP')|Q(rly_unit__location_type_desc='OFFICE')|Q(rly_unit__location_type_desc='STORE')|Q(rly_unit__location_type_desc='CONSTRUCTION'),designation_code = emp[0]['parent_desig_code']).values('designation','designation_code',"rly_unit__location_code","rly_unit__location_type","rly_unit__parent_location_code"))[0]
#             if emp[0]['parent_desig_code']:
#                 if models.Level_Desig.objects.exclude(delete_flag=True).filter(Q(rly_unit__location_type_desc='RAILWAY BOARD')|Q(rly_unit__location_type_desc='HEAD QUATER')|Q(rly_unit__location_type_desc='PRODUCTION UNIT')|Q(rly_unit__location_type_desc='PSU')|Q(rly_unit__location_type_desc='INSTITUTE')|Q(rly_unit__location_type_desc='RDSO'),designation_code = emp[0]['parent_desig_code']).exists():
#                     zones1 = list(models.Level_Desig.objects.exclude(delete_flag=True).filter(Q(rly_unit__location_type_desc='RAILWAY BOARD')|Q(rly_unit__location_type_desc='HEAD QUATER')|Q(rly_unit__location_type_desc='PRODUCTION UNIT')|Q(rly_unit__location_type_desc='PSU')|Q(rly_unit__location_type_desc='INSTITUTE')|Q(rly_unit__location_type_desc='RDSO'),designation_code = emp[0]['parent_desig_code']).values('designation','designation_code',"rly_unit__location_code"))[0]
#                     divisions1 =[]
#                     print("mydata4666",zones1)

#                 else:
#                     print("not emmm")
#                     divisions1 = list(models.Level_Desig.objects.exclude(delete_flag=True).filter(Q(rly_unit__location_type_desc='DIVISION')|Q(rly_unit__location_type_desc='WORKSHOP')|Q(rly_unit__location_type_desc='OFFICE')|Q(rly_unit__location_type_desc='STORE')|Q(rly_unit__location_type_desc='CONSTRUCTION'),designation_code = emp[0]['parent_desig_code']).values('designation','designation_code',"rly_unit__location_code","rly_unit__location_type","rly_unit__parent_location_code"))[0]
#                     zones1 = divisions1['rly_unit__parent_location_code']
#                     print("mydata49999",divisions1)
#             else:
#                 divisions1 = []
#                 zones1 = []
#             list1=models.railwayLocationMaster.objects.filter(Q(location_type_desc='RAILWAY BOARD')|Q(location_type_desc='HEAD QUATER')|Q(location_type_desc='PRODUCTION UNIT')|Q(location_type_desc='PSU')|Q(location_type_desc='INSTITUTE')|Q(location_type_desc='RDSO')).values('location_code').order_by('location_code')
#             list2=[]
#             for i in list1:
#                 # print(i['location_code'],'_________')
#                 list2.append(i['location_code'])
            
            
#             list3=models.railwayLocationMaster.objects.filter(Q(location_type_desc='DIVISION')|Q(location_type_desc='WORKSHOP')|Q(location_type_desc='OFFICE')|Q(location_type_desc='STORE')|Q(location_type_desc='CONSTRUCTION')).values('location_code','location_type').order_by('location_code')
#             list4=[]
#             for i in list3:
#                 # print(i['location_code'],'_________')
#                 list4.append({'location_code':i['location_code'],'location_type':i['location_type']})  

#             # print("list4",list4)
                
                
#             # list5=models.departMast.objects.all().values('department_name').order_by('department_name')
#             # list6=[]
#             # for i in list5:
#             #     # print(i['department_name'],'_________')
#             #     list6.append(i['department_name'])
            
#             list7=models.Level_Desig.objects.exclude(delete_flag=True).all().values('designation').order_by('designation')
#             list8=[]
#             for i in list7:
#                 # print(i['designation'],'_________')
#                 list8.append(i['designation'])
#             print('emmm')
#             # get the reporting officer rly division and desgnation
#             # report_detail = list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code = emmm['designation_code']).values("rly_unit__location_code","rly_unit__location_type"))
#             # print('report_detail',report_detail)

#             # data2 = list(m1.MyUser.objects.filter(email = emp[0]['official_email_ID']).values('password'))
#             if models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code = desig_code,desig_user__isnull = False).exists():
#                 data2 = models.Level_Desig.objects.exclude(delete_flag=True).get(designation_code = desig_code).desig_user.password
#             else:
#                 data2 = ''
#             print("password_data2",data2)
#             return JsonResponse({"emp":emp , "password":data2 ,"Reporting_officerZone":zones1,"Reporting_officerDiv":divisions1,'Zone':list2,'division':list4,'desi':list8},safe=False)

#         elif request.GET.get('ajaxname') == 'employee_numbers':
#             hrms_id = request.GET.get('hrms_id')
#             empno = list(m1.empmast.objects.filter(hrms_id = hrms_id).values('empno'))
#             print("empno56",empno)
#             return JsonResponse({"empno":empno},safe = False)
        
#         elif request.GET.get('ajaxname') == 'changeDivision':
#             division = request.GET.get('division').split('-')
#             div = list(models.railwayLocationMaster.objects.filter(location_code = division[0],location_type = division[1]).values('parent_location_code'))
            
#             print("div338743",div)
            
#             return JsonResponse({"div":div},safe = False)
        
#         elif request.GET.get('ajaxname') == 'validate_email':
#             desig_id = request.GET.get('desig_id')
#             print('desig_id99999',desig_id)
#             email = list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code = desig_id).values('official_email_ID'))[0]['official_email_ID']
            
#             #  TO CHECK WHEATHER THE EMAIL EXISTS IN MYUSER TABLE OR NOT 
#             if m1.MyUser.objects.filter(email = email).exists():
#                 myuserdata = m1.MyUser.objects.get(email = email)
#                 if models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code = desig_id,desig_user__isnull = True):
#                     models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code = desig_id).update(desig_user = myuserdata)
#                 else:
#                     pass

#             otp=generateOTP()
#             #print(otp,'___')
#             htmlgen = 'Your OTP is '+otp
#             # send_mail('E-inspection user verification for '+desig_id,otp,'mfgcris@cris.org.in',[email], html_message=htmlgen)
#             # send_mail(
#             #             'E-inspection user verification for '+desig_id, #subject
#             #             htmlgen, #message body
#             #             'mfgcris@cris.org.in', # from email
#             #             [email], fail_silently=False, #to email
                    
#             #         ) 
#             return JsonResponse({'otp':otp},safe = False)
                
#         elif request.GET.get('ajaxname') == 'getdesigdivwise':
#             zones = request.GET.get('zones')
#             div = request.GET.get('div').split('-')
#             print("mydata99999",zones,div)
#             rly_unit_code = models.railwayLocationMaster.objects.get(location_code = div[0],location_type = div[1]).rly_unit_code
#             desig = list(models.Level_Desig.objects.exclude(delete_flag=True).filter(rly_unit_id = rly_unit_code).values('designation','designation_code').order_by('designation'))
#             return JsonResponse({"desig":desig},safe = False)

    
#     # TO SAVE THE REGISTRATION OF THE USER
    
#     id=user.objects.filter().order_by('-id')[0].id
#     id+=1
#     print(id)
#     print("mydata",request.POST.get('submit_form'))
#     print("mydata",request.method)
#     if request.method == "POST":
#         submit_form=request.POST.get('submit_form')
        
#         if(submit_form=="register"):
#             print("inside register")
#             employeeno=request.POST.get('employeeno')
#             designation=request.POST.get('designation')
#             emailid = request.POST.get('emailid')
#             if m1.email_request.objects.filter(designation=designation).exists():
#                 messages.error(request,"Registration request for this designation has already been raised")
#             else:
#                 desig=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation=designation).values('designation_code')
#                 if m1.empmast.objects.filter(empno=employeeno).exists():
#                     railway=m1.empmast.objects.filter(empno=employeeno).values('rly_id')[0]['rly_id']

#                 else:
#                     railway = ''
            
#                 if railway != '':
#                     railway=models.railwayLocationMaster.objects.get(rly_unit_code=railway)
#                 else:
#                     railway = None
#                 # update=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation=designation).update(official_email_ID=emailid,empno_id=employeeno)
#                 file=request.POST.get('img')
#                 if file != '':
#                     file=request.FILES['img']
#                 else:
#                     file=None
#                 # models.file.objects.create(document=file,desig_code_id=desig)
#                 if m1.email_request.objects.filter(email=emailid).exists():
#                     messages.error(request,"Request for this email Id is already sent")
#                 else:    
#                     m1.email_request.objects.create(rly_id=railway,empno=employeeno,designation=designation,email=emailid,requestDate=datetime.today(),file=file,status='Pending')

#                     messages.success(request,'Your request has been sent to concerned Admin')


#     list1=models.railwayLocationMaster.objects.filter(Q(location_type_desc='RAILWAY BOARD')|Q(location_type_desc='HEAD QUATER')|Q(location_type_desc='PRODUCTION UNIT')|Q(location_type_desc='PSU')|Q(location_type_desc='INSTITUTE')|Q(location_type_desc='RDSO')).values('location_code').order_by('location_code')
#     list2=[]
#     for i in list1:
#         # print(i['location_code'],'_________')
#         list2.append(i['location_code'])
    
    
#     list3=models.railwayLocationMaster.objects.filter(Q(location_type_desc='DIVISION')|Q(location_type_desc='WORKSHOP')|Q(location_type_desc='OFFICE')|Q(location_type_desc='STORE')|Q(location_type_desc='CONSTRUCTION')).values('location_code','location_type').order_by('location_code')
#     list4=[]
#     for i in list3:
#         # print(i['location_code'],'_________')
#         list4.append({'location_code':i['location_code'],'location_type':i['location_type']})  

#     # print("list4",list4)
        
    
#     list7=models.Level_Desig.objects.exclude(delete_flag=True).all().values('designation','designation_code').order_by('designation')
#     list8=[]
#     for i in list7:
#         # print(i['designation'],'_________')
#         list8.append(i['designation'])

#     # print("mydata",list2,list4,list8)
#     context={'Zone':list2,'division':list4,'desi':list7}
#     return render(request,"signup_hrms.html",context)

# # -------------------------------------------------------------------------------

# def getdiv_rly_hrms(request):
#     try:
#         if request.method == "GET" or request.is_ajax():
#             rly=request.GET.get('rly_data_hrms')
#             newrly = json.loads(rly)
            
#             # dev desgitantion accoring to railway
#             division=list(models.railwayLocationMaster.objects.filter(location_type_desc__in=['DIVISION','WORKSHOP'],parent_location_code=newrly).order_by('location_code').values('location_code', 'location_type').distinct('location_code'))
#             if len(division) == 0:
#                 print("insideifdiv")
#                 rly_unit_code = models.railwayLocationMaster.objects.get(location_code = newrly).rly_unit_code
#                 desig = list(models.Level_Desig.objects.exclude(delete_flag=True).filter(rly_unit_id = rly_unit_code).values('designation','designation_code').order_by('designation'))
#                 print(desig)
#                 return JsonResponse({"desig":desig},safe = False)
#             else:
#                 print(" inside_else")
#                 l=[]
#                 print("division list)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))",division)
#                 # for i in division:
#                 #     l.append({'location_code': i['location_code'], 'location_type':i['location_type']})

#                 # saud faisal
#                 rly_unit_code = models.railwayLocationMaster.objects.get(location_code = newrly).rly_unit_code
#                 desig = list(models.Level_Desig.objects.exclude(delete_flag=True).filter(rly_unit_id = rly_unit_code).values('designation','designation_code').order_by('designation'))
#                 print(desig)
#                 # print(l)    
#                 context={
#                     'division':division,
#                     "desig":desig
#                 } 
            
#                 return JsonResponse(context,safe = False)
#         return JsonResponse({"success":False}, status = 400)
#     except Exception as e: 
#         try:
#             m1.error_Table.objects.create(fun_name="getdiv_rly_hrms",user_id=request.user,err_details=str(e))
#         except:
#             print("Internal Error!!!")
#         return render(request, "errorspage.html", {}) 


# def signup_hrms(request):
#     if request.method == 'GET':
#         print(request.GET.get('ajaxname'))
#         if request.GET.get('ajaxname') == 'fetch_hrms':
#             hrms_id = request.GET.get('hrms_id')
#             print(hrms_id)
#             rlycode = None
#             if models.HRMS.objects.filter(hrms_employee_id = hrms_id).exists():
#                 obj = list(models.HRMS.objects.filter(hrms_employee_id = hrms_id).values())
#                 obj1 = models.HRMS.objects.get(hrms_employee_id = hrms_id)
#                 if models.railwayLocationMaster.objects.filter(location_description = obj[0]['current_unit_division']).exists():
#                     rlycode = models.railwayLocationMaster.objects.filter(location_description = obj[0]['current_unit_division'])[0]
                    
#                 if m1.empmast.objects.filter(hrms_id = hrms_id).exists():
#                     data = m1.empmast.objects.filter(hrms_id = hrms_id).update(empno=obj[0]['ipas_employee_id'],empname = obj[0]['employee_first_name'],
#                     empmname = obj[0]['employee_middle_name'],emplname = obj[0]['employee_last_name'],appointmentdate=obj[0]['appointment_date'],superannuation_date=obj[0]['superannuation_date'],gender=obj[0]['gender'],email=obj[0]['official_email_id'],contactno=obj[0]['official_mobile_no'],railwaygroup=obj[0]['railway_group'],pc7_level=obj[0]['paylevel'],service_status=obj[0]['service_status'],desig_longdesc=obj[0]['designation'],station_des=obj[0]['current_place'],dept_desc=obj[0]['department'],subdepartment=obj[0]['sub_department'],currentzone=obj[0]['current_zone'],currentunitdivision=obj[0]['current_unit_division'],rl_type=obj[0]['rltype'],rly_id = rlycode,profile_modified_by=obj[0]['ipas_employee_id']
#                     ,profile_modified_on=datetime.today()
#                     )
#                     print('inside empmast update')
                   
#                     # return JsonResponse({"obj":obj,"data":data},safe=False)
#                 else:
#                     m1.empmast.objects.create(empno=obj[0]['ipas_employee_id'], hrms_id = obj1,empname = obj[0]['employee_first_name'],
#                     empmname = obj[0]['employee_middle_name'],emplname = obj[0]['employee_last_name'],appointmentdate=obj[0]['appointment_date'],superannuation_date=obj[0]['superannuation_date'],gender=obj[0]['gender'],email=obj[0]['official_email_id'],contactno=obj[0]['official_mobile_no'],railwaygroup=obj[0]['railway_group'],pc7_level=obj[0]['paylevel'],service_status=obj[0]['service_status'],desig_longdesc=obj[0]['designation'],station_des=obj[0]['current_place'],dept_desc=obj[0]['department'],subdepartment=obj[0]['sub_department'],currentzone=obj[0]['current_zone'],currentunitdivision=obj[0]['current_unit_division'],rl_type=obj[0]['rltype'],rly_id = rlycode,profile_modified_by=obj[0]['ipas_employee_id']
#                     ,profile_modified_on=datetime.today()
#                     )
#                     print('inside empmast create')
#                 # TO SHOW THE RLY DIVISION AND DESIGNATION
#                     # return JsonResponse({"success":"created successfully"},safe=False)
                
#                 # hrms_id = request.GET.get('hrms_id')
#                 print("rlycode",rlycode)
#                 # print("hrms_id78",hrms_id)
#                 # emp = m1.empmast.objects.filter(hrms_id = hrms_id).values('empno')[0]['empno']
#                 # print("emp_data",emp)
#                 # if m1.empmast.objects.filter(empno = emp,rly_id_id__isnull = False).exists():
#                 #     rlyid = m1.empmast.objects.filter(empno = emp).values('rly_id_id')[0]['rly_id_id']
#                 #     print("rlyid99999999",rlyid)
#                 #     list1 = models.railwayLocationMaster.objects.filter(Q(location_type_desc='RAILWAY BOARD')|Q(location_type_desc='HEAD QUATER')|Q(location_type_desc='PRODUCTION UNIT')|Q(location_type_desc='PSU')|Q(location_type_desc='INSTITUTE')|Q(location_type_desc='RDSO'),rly_unit_code=rlyid).values('location_code')
#                 #     list2 =[]
#                 #     for i in list1:
#                 #         # print(i['designation'],'_________')
#                 #         list2.append(i['location_code'])

#                 #     # if there is division then list2 (railway) is empty then find its railway
#                 #     if(len(list2) == 0):
#                 #         list4 = list(models.railwayLocationMaster.objects.filter(Q(location_type_desc='DIVISION')|Q(location_type_desc='WORKSHOP')|Q(location_type_desc='OFFICE')|Q(location_type_desc='STORE')|Q(location_type_desc='CONSTRUCTION'),rly_unit_code=rlyid).values('location_code','location_type','parent_location_code'))
#                 #         print("parent_location_cod",list4[0]['parent_location_code'])
#                 #         list2.extend(list4[0]['parent_location_code'])
#                 #     else:
#                 #         list4 = list(models.railwayLocationMaster.objects.filter(Q(location_type_desc='DIVISION')|Q(location_type_desc='WORKSHOP')|Q(location_type_desc='OFFICE')|Q(location_type_desc='STORE')|Q(location_type_desc='CONSTRUCTION'),rly_unit_code=rlyid).values('location_code','location_type'))
#                 #     list7=models.Level_Desig.objects.exclude(delete_flag=True).filter(rly_unit_id=rlyid).values('designation','designation_code').order_by('designation')
                    
#                 #     if models.Level_Desig.objects.exclude(delete_flag=True).filter(rly_unit_id=rlyid,empno = emp).values('designation','designation_code').order_by('designation').exists():
#                 #         list7=models.Level_Desig.objects.exclude(delete_flag=True).filter(rly_unit_id=rlyid,empno = emp).values('designation','designation_code').order_by('designation')
#                 #     # else:
#                 #     #     pass
#                 #     allDesignations=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(rly_unit_id=rlyid).values('designation','designation_code').order_by('designation'))
#                 #     list8=[]
#                 #     for i in list7:
#                 #         # print(i['designation'],'_________')
#                 #         list8.append({"designation":i['designation'],"designation_code":i['designation_code']})
#                 #     print('list 899999',list8,list2,list4)
                        
#                 #     return JsonResponse({'Zone1':list2,'division1':list4,'desi':list8,'allDesignations':allDesignations},safe=False)
#                 # else:
#                 #     return JsonResponse({'alert1':'Railway id of the employee doest not exists'},safe = False) 
#                 return JsonResponse({'alert1':'hrms id matched'},safe = False) 
#             else:
#                 return JsonResponse({'alert':"HRMS Id Does Not Exist.Please Contact Admin"},safe=False)
        
#         elif request.GET.get('ajaxname') == 'send_otp':
#             cuser=request.user
#             hrms_id=request.GET.get("hrms_id")
#             # email = list(models.HRMS.objects.filter(hrms_employee_id =hrms_id).values('official_email_id','official_mobile_no'))[0]['official_email_id']
#             email = list(models.HRMS.objects.filter(hrms_employee_id =hrms_id).values('official_email_id','official_mobile_no'))[0]['official_email_id']
#             print(email)
#             if not email:
                
#                 print('inside if of email')
#                 return JsonResponse({'msg':"This HRMS Number has no Email Id"}, safe = False)
#             #print(type(email),'-------email------')
#             otp=generateOTP()
#             #print(otp,'___')
#             htmlgen = 'Your OTP is '+otp
#             # send_mail('E-inspection user verification for '+hrms_id,otp,'mfgcris@cris.org.in',[email], html_message=htmlgen)
#             # send_mail(
#             #             'Inspection user verification for '+hrms_id, #subject
#             #             htmlgen, #message body
#             #             'mfgcris@cris.org.in', # from email
#             #             [email], fail_silently=False, #to email
                    
#             #         )  
            
#             return JsonResponse({'otp':otp,"email":email}, safe = False)
        
#         elif request.GET.get('ajaxname') == 'FetchEmployee':
#                 hrms_id = request.GET.get('hrms_id')
#                 emp = m1.empmast.objects.filter(hrms_id = hrms_id).values('empno')[0]['empno']
#                 print("emp_data",emp)
#                 if m1.empmast.objects.filter(empno = emp,rly_id_id__isnull = False).exists():
#                     rlyid = m1.empmast.objects.filter(empno = emp).values('rly_id_id')[0]['rly_id_id']
#                     print("rlyid99999999",rlyid)
#                     list1 = models.railwayLocationMaster.objects.filter(Q(location_type_desc='RAILWAY BOARD')|Q(location_type_desc='HEAD QUATER')|Q(location_type_desc='PRODUCTION UNIT')|Q(location_type_desc='PSU')|Q(location_type_desc='INSTITUTE')|Q(location_type_desc='RDSO'),rly_unit_code=rlyid).values('location_code')
#                     list2 =[]
#                     print("raiway",list1)
#                     for i in list1:
#                         # print(i['designation'],'_________')
#                         list2.append(i['location_code'])

#                     # if there is division then list2 (railway) is empty then find its railway
#                     if(len(list2) == 0):
#                         list4 = list(models.railwayLocationMaster.objects.filter(Q(location_type_desc='DIVISION')|Q(location_type_desc='WORKSHOP')|Q(location_type_desc='OFFICE')|Q(location_type_desc='STORE')|Q(location_type_desc='CONSTRUCTION'),rly_unit_code=rlyid).values('location_code','location_type','parent_location_code'))
#                         print("parent_location_cod",list4[0]['parent_location_code'])
#                         list2.append(list4[0]['parent_location_code'])
#                         print("railway list2 ",list2)
#                     else:
#                         list4 = list(models.railwayLocationMaster.objects.filter(Q(location_type_desc='DIVISION')|Q(location_type_desc='WORKSHOP')|Q(location_type_desc='OFFICE')|Q(location_type_desc='STORE')|Q(location_type_desc='CONSTRUCTION'),rly_unit_code=rlyid).values('location_code','location_type'))
#                     list7=models.Level_Desig.objects.exclude(delete_flag=True).filter(rly_unit_id=rlyid).values('designation','designation_code').order_by('designation')
                    
#                     if models.Level_Desig.objects.exclude(delete_flag=True).filter(rly_unit_id=rlyid,empno = emp).values('designation','designation_code').order_by('designation').exists():
#                         list7=models.Level_Desig.objects.exclude(delete_flag=True).filter(rly_unit_id=rlyid,empno = emp).values('designation','designation_code').order_by('designation')
#                     # else:
#                     #     pass
#                     allDesignations=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(rly_unit_id=rlyid).values('designation','designation_code').order_by('designation'))
#                     list8=[]
#                     for i in list7:
#                         # print(i['designation'],'_________')
#                         list8.append({"designation":i['designation'],"designation_code":i['designation_code']})
#                     print('list 899999',list8,list2,list4)
                        
#                     return JsonResponse({'Zone1':list2,'division1':list4,'desi':list8,'allDesignations':allDesignations},safe=False)
#                 else:
#                     return JsonResponse({'alert1':'Railway id of the employee doest not exists'},safe = False) 
        
#         elif request.GET.get('ajaxname')=='proceed':

#             zone = request.GET.get('zone')
#             location_type = request.GET.get('location_type')
#             designation = request.GET.get('designation')

#             empnum = request.GET.get('empnum')
#             # empobject = m1.Level_Desig.objects.get(empno=empnum)

            
#             mobile = request.GET.get('contact')
#             empemail= request.GET.get('empemail')
#             posting = request.GET.get('status')
            
#             zone1 = request.GET.get('zone1')
#             location_type1 = request.GET.get('location_type1')
#             designation1 = request.GET.get('designation1')
#             password = request.GET.get('password')
#             # if password:
#             #     print("inside password009")
#             #     empobject.myuser_id.set_password(password)
#             #     empobject.save()
#             #     empobject.refresh_from_db()
#             print("datatosave",zone,location_type,designation,empnum,mobile,empemail,posting,zone1,location_type1,designation1,password)
#             print("password0009",password)

#             if models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code = designation,desig_user__isnull = True):
#                 id=user.objects.filter().order_by('-id')[0].id
#                 id+=1
#                 obj = user.objects.create_user(id = id,username=empemail,password=password,is_active=True, email=empemail,user_role='user')
#                 models.Level_Desig.objects.exclude(delete_flag=True).filter(empno_id = empnum,designation_code = designation).update(desig_user = obj)
#             else:
#                 users = models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code = designation)
#                 print("users99999999999",users[0])
#                 print("users99999999999",users[0].desig_user.password)
#                 # password1=users[0].desig_user.set_password(password)
#                 # print("password1",password1)
#                 # password1.save()
#                 # password1.refresh_from_db()
#                 m1.MyUser.objects.filter(username=empemail).update(password=make_password(password))
#             # write condition to save the primary charge and dual charge
#             alert = ''
#             if posting == 'P' and models.Level_Desig.objects.exclude(delete_flag=True).filter(empno_id = empnum,status = posting).exists():
#                 objectdesig= list(models.Level_Desig.objects.exclude(delete_flag=True).filter(empno_id = empnum,status = posting).values())
#                 models.Level_Desig.objects.exclude(delete_flag=True).filter(empno_id = empnum,designation_code =objectdesig[0]['designation_code']).update(empno_id = None)
#                 models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code =designation).update(empno_id =empnum,contactnumber = mobile,official_email_ID = empemail,status = posting,parent_desig_code = designation1)
#                 # return JsonResponse({"alert":"You are alreay on primary charge it will"},safe=False)
#                 alert = "You are alreay on primary charge it will change you primary charge"
#             elif posting == 'D' and models.Level_Desig.objects.exclude(delete_flag=True).filter(~Q(status = 'P'),empno_id = empnum).exists():
#                 models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code =designation).update(empno_id =empnum,contactnumber = mobile,official_email_ID = empemail,status = posting,parent_desig_code = designation1)
#                 # return JsonResponse({"alert":"You do not have any primary charge"},safe=False)
#                 alert = "You do not have any primary charge"
#             else:
#                 models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code =designation).update(empno_id =empnum,contactnumber = mobile,official_email_ID = empemail,status = posting,parent_desig_code = designation1)
#                 # print("FOrP79834",data)
#             # if models.Level_Desig.objects.exclude(delete_flag=True).filter(empno_id = empnum,designation_code = designation).exists():
#             #     models.Level_Desig.objects.exclude(delete_flag=True).filter(empno_id = empnum,designation_code =designation).update(contactnumber = mobile,official_email_ID = empemail)
#             # else:
#             #     models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code =designation).update(empno_id =empnum,contactnumber = mobile,official_email_ID = empemail)
            
#             # #save data to level desig 
#             # models.Level_Desig.objects.exclude(delete_flag=True).filter(empno_id = empnum,designation_code =designation).update(contactnumber = mobile,official_email_ID = empemail)

#             # code to save the password of the user
            
            
#             return JsonResponse({"DATA":"Data Saved Successfully",'alert1':alert},safe=False)

#         elif request.GET.get('ajaxname') == 'employee_details':
#             desig_code = request.GET.get('desig_code')
#             print("desig_code 45",desig_code)
#             # hrms_id = request.GET.get('hrms_id')
#             # employnum = m1.empmast.objects.filter(hrms_id = hrms_id).values('empno')[0]['empno']

#             # employee detils
#             emp = list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code = desig_code).values('empno','contactnumber','official_email_ID','status','parent_desig_code'))
#             print(emp[0]['parent_desig_code'])
#             # if emp[0]['parent_desig_code']:
#             #     emmm = list(models.Level_Desig.objects.exclude(delete_flag=True).filter(Q(rly_unit__location_type_desc='RAILWAY BOARD')|Q(rly_unit__location_type_desc='HEAD QUATER')|Q(rly_unit__location_type_desc='PRODUCTION UNIT')|Q(rly_unit__location_type_desc='PSU')|Q(rly_unit__location_type_desc='INSTITUTE')|Q(rly_unit__location_type_desc='RDSO'),designation_code = emp[0]['parent_desig_code']).values('designation','designation_code',"rly_unit__location_code"))
#             #     print("mydata4666",emmm)
#             #     if not emmm:
#             #         print("not emmm")
#             #         emmm = list(models.Level_Desig.objects.exclude(delete_flag=True).filter(Q(rly_unit__location_type_desc='DIVISION')|Q(rly_unit__location_type_desc='WORKSHOP')|Q(rly_unit__location_type_desc='OFFICE')|Q(rly_unit__location_type_desc='STORE')|Q(rly_unit__location_type_desc='CONSTRUCTION'),designation_code = emp[0]['parent_desig_code']).values('designation','designation_code',"rly_unit__location_code","rly_unit__location_type","rly_unit__parent_location_code"))[0]
#             if emp[0]['parent_desig_code']:
#                 if models.Level_Desig.objects.exclude(delete_flag=True).filter(Q(rly_unit__location_type_desc='RAILWAY BOARD')|Q(rly_unit__location_type_desc='HEAD QUATER')|Q(rly_unit__location_type_desc='PRODUCTION UNIT')|Q(rly_unit__location_type_desc='PSU')|Q(rly_unit__location_type_desc='INSTITUTE')|Q(rly_unit__location_type_desc='RDSO'),designation_code = emp[0]['parent_desig_code']).exists():
#                     zones1 = list(models.Level_Desig.objects.exclude(delete_flag=True).filter(Q(rly_unit__location_type_desc='RAILWAY BOARD')|Q(rly_unit__location_type_desc='HEAD QUATER')|Q(rly_unit__location_type_desc='PRODUCTION UNIT')|Q(rly_unit__location_type_desc='PSU')|Q(rly_unit__location_type_desc='INSTITUTE')|Q(rly_unit__location_type_desc='RDSO'),designation_code = emp[0]['parent_desig_code']).values('designation','designation_code',"rly_unit__location_code"))[0]
#                     divisions1 =[]
#                     print("mydata4666",zones1)

#                 else:
#                     print("not emmm")
#                     divisions1 = list(models.Level_Desig.objects.exclude(delete_flag=True).filter(Q(rly_unit__location_type_desc='DIVISION')|Q(rly_unit__location_type_desc='WORKSHOP')|Q(rly_unit__location_type_desc='OFFICE')|Q(rly_unit__location_type_desc='STORE')|Q(rly_unit__location_type_desc='CONSTRUCTION'),designation_code = emp[0]['parent_desig_code']).values('designation','designation_code',"rly_unit__location_code","rly_unit__location_type","rly_unit__parent_location_code"))[0]
#                     zones1 = divisions1['rly_unit__parent_location_code']
#                     print("mydata49999",divisions1)
#             else:
#                 divisions1 = []
#                 zones1 = []
#             list1=models.railwayLocationMaster.objects.filter(Q(location_type_desc='RAILWAY BOARD')|Q(location_type_desc='HEAD QUATER')|Q(location_type_desc='PRODUCTION UNIT')|Q(location_type_desc='PSU')|Q(location_type_desc='INSTITUTE')|Q(location_type_desc='RDSO')).values('location_code').order_by('location_code')
#             list2=[]
#             for i in list1:
#                 # print(i['location_code'],'_________')
#                 list2.append(i['location_code'])
            
            
#             list3=models.railwayLocationMaster.objects.filter(Q(location_type_desc='DIVISION')|Q(location_type_desc='WORKSHOP')|Q(location_type_desc='OFFICE')|Q(location_type_desc='STORE')|Q(location_type_desc='CONSTRUCTION')).values('location_code','location_type').order_by('location_code')
#             list4=[]
#             for i in list3:
#                 # print(i['location_code'],'_________')
#                 list4.append({'location_code':i['location_code'],'location_type':i['location_type']})  

#             # print("list4",list4)
                
                
#             # list5=models.departMast.objects.all().values('department_name').order_by('department_name')
#             # list6=[]
#             # for i in list5:
#             #     # print(i['department_name'],'_________')
#             #     list6.append(i['department_name'])
            
#             list7=list(models.Level_Desig.objects.exclude(delete_flag=True).all().values('designation','designation_code').order_by('designation'))
#             # list8=[]
#             # for i in list7:
#             #     # print(i['designation'],'_________')
#             #     list8.append(i['designation'])
#             print('emmm')
#             # get the reporting officer rly division and desgnation
#             # report_detail = list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code = emmm['designation_code']).values("rly_unit__location_code","rly_unit__location_type"))
#             # print('report_detail',report_detail)

#             # data2 = list(m1.MyUser.objects.filter(email = emp[0]['official_email_ID']).values('password'))
#             if models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code = desig_code,desig_user__isnull = False).exists():
#                 data2 = models.Level_Desig.objects.exclude(delete_flag=True).get(designation_code = desig_code).desig_user.password
#             else:
#                 data2 = ''
#             print("password_data2",data2)
#             return JsonResponse({"emp":emp , "password":data2 ,"Reporting_officerZone":zones1,"Reporting_officerDiv":divisions1,'Zone':list2,'division':list4,'desi':list7},safe=False)

#         elif request.GET.get('ajaxname') == 'employee_numbers':
#             hrms_id = request.GET.get('hrms_id')
#             empno = list(m1.empmast.objects.filter(hrms_id = hrms_id).values('empno'))
#             print("empno56",empno)
#             return JsonResponse({"empno":empno},safe = False)
        
#         elif request.GET.get('ajaxname') == 'changeDivision':
#             division = request.GET.get('division').split('-')
#             div = list(models.railwayLocationMaster.objects.filter(location_code = division[0],location_type = division[1]).values('parent_location_code'))
            
#             print("div338743",div)
            
#             return JsonResponse({"div":div},safe = False)
        
#         elif request.GET.get('ajaxname') == 'validate_email':
#             desig_id = request.GET.get('desig_id')
#             empemail = request.GET.get('empemail')
#             print('desig_id99999',desig_id)

#             email = list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code = desig_id).values('official_email_ID'))[0]['official_email_ID']
            
#             #  TO CHECK WHEATHER THE EMAIL EXISTS IN MYUSER TABLE OR NOT 
#             if m1.MyUser.objects.filter(email = email).exists():
#                 myuserdata = m1.MyUser.objects.get(email = email)
#                 if models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code = desig_id,desig_user__isnull = True):
#                     models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code = desig_id).update(desig_user = myuserdata)
#                 else:
#                     pass

#             otp=generateOTP()
#             #print(otp,'___')
#             htmlgen = 'Your OTP is '+otp
#             msg = 'your email is used to update the designation is that you, if not please contact cris...'
#             # send_mail('E-inspection user verification for '+desig_id,otp,'mfgcris@cris.org.in',[empemail], html_message=msg)
#             # send_mail(
#             #             'E-inspection user verification for '+desig_id, #subject
#             #             htmlgen, #message body
#             #             'mfgcris@cris.org.in', # from email
#             #             [email], fail_silently=False, #to email
                    
#             #         ) 
#             return JsonResponse({'otp':otp},safe = False)
                
#         elif request.GET.get('ajaxname') == 'getdesigdivwise':
#             zones = request.GET.get('zones')
#             div = request.GET.get('div').split('-')
#             print("mydata99999",zones,div)
#             rly_unit_code = models.railwayLocationMaster.objects.get(location_code = div[0],location_type = div[1]).rly_unit_code
#             desig = list(models.Level_Desig.objects.exclude(delete_flag=True).filter(rly_unit_id = rly_unit_code).values('designation','designation_code').order_by('designation'))
#             return JsonResponse({"desig":desig},safe = False)

    
#     # TO SAVE THE REGISTRATION OF THE USER
    
#     id=user.objects.filter().order_by('-id')[0].id
#     id+=1
#     print(id)
#     print("mydata",request.POST.get('submit_form'))
#     print("mydata",request.method)
#     if request.method == "POST":
#         submit_form=request.POST.get('submit_form')
        
#         if(submit_form=="register"):
#             print("inside register")
#             employeeno=request.POST.get('employeeno')
#             designation=request.POST.get('designation')
#             emailid = request.POST.get('emailid')
#             if m1.email_request.objects.filter(designation=designation).exists():
#                 messages.error(request,"Registration request for this designation has already been raised")
#             else:
#                 desig=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation=designation).values('designation_code')
#                 if m1.empmast.objects.filter(empno=employeeno).exists():
#                     railway=m1.empmast.objects.filter(empno=employeeno).values('rly_id')[0]['rly_id']

#                 else:
#                     railway = ''
            
#                 if railway != '':
#                     railway=models.railwayLocationMaster.objects.get(rly_unit_code=railway)
#                 else:
#                     railway = None
#                 # update=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation=designation).update(official_email_ID=emailid,empno_id=employeeno)
#                 file=request.POST.get('img')
#                 if file != '':
#                     file=request.FILES['img']
#                 else:
#                     file=None
#                 # models.file.objects.create(document=file,desig_code_id=desig)
#                 if m1.email_request.objects.filter(email=emailid).exists():
#                     messages.error(request,"Request for this email Id is already sent")
#                 else:    
#                     m1.email_request.objects.create(rly_id=railway,empno=employeeno,designation=designation,email=emailid,requestDate=datetime.today(),file=file,status='Pending')

#                     messages.success(request,'Your request has been sent to concerned Admin')


#     list1=models.railwayLocationMaster.objects.filter(Q(location_type_desc='RAILWAY BOARD')|Q(location_type_desc='HEAD QUATER')|Q(location_type_desc='PRODUCTION UNIT')|Q(location_type_desc='PSU')|Q(location_type_desc='INSTITUTE')|Q(location_type_desc='RDSO')).values('location_code').order_by('location_code')
#     list2=[]
#     for i in list1:
#         # print(i['location_code'],'_________')
#         list2.append(i['location_code'])
    
    
#     list3=models.railwayLocationMaster.objects.filter(Q(location_type_desc='DIVISION')|Q(location_type_desc='WORKSHOP')|Q(location_type_desc='OFFICE')|Q(location_type_desc='STORE')|Q(location_type_desc='CONSTRUCTION')).values('location_code','location_type').order_by('location_code')
#     list4=[]
#     for i in list3:
#         # print(i['location_code'],'_________')
#         list4.append({'location_code':i['location_code'],'location_type':i['location_type']})  

#     # print("list4",list4)
        
    
#     list7=models.Level_Desig.objects.exclude(delete_flag=True).all().values('designation','designation_code').order_by('designation')
#     list8=[]
#     for i in list7:
#         # print(i['designation'],'_________')
#         list8.append(i['designation'])

#     # print("mydata",list2,list4,list8)
#     context={'Zone':list2,'division':list4,'desi':list7}
#     return render(request,"signup_hrms.html",context)

# # -------------------------------------------------------------------------------

# def getdiv_rly_hrms(request):
#     try:
#         if request.method == "GET" or request.is_ajax():
#             rly=request.GET.get('rly_data_hrms')
#             newrly = json.loads(rly)
            
#             # dev desgitantion accoring to railway
#             division=list(models.railwayLocationMaster.objects.filter(location_type_desc__in=['DIVISION','WORKSHOP'],parent_location_code=newrly).order_by('location_code').values('location_code', 'location_type').distinct('location_code'))
#             if len(division) == 0:
#                 print("insideifdiv")
#                 rly_unit_code = models.railwayLocationMaster.objects.get(location_code = newrly).rly_unit_code
#                 desig = list(models.Level_Desig.objects.exclude(delete_flag=True).filter(rly_unit_id = rly_unit_code).values('designation','designation_code').order_by('designation'))
#                 print(desig)
#                 return JsonResponse({"desig":desig},safe = False)
#             else:
#                 print(" inside_else")
#                 l=[]
#                 print("division list)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))",division)
#                 # for i in division:
#                 #     l.append({'location_code': i['location_code'], 'location_type':i['location_type']})

#                 # saud faisal
#                 rly_unit_code = models.railwayLocationMaster.objects.get(location_code = newrly).rly_unit_code
#                 desig = list(models.Level_Desig.objects.exclude(delete_flag=True).filter(rly_unit_id = rly_unit_code).values('designation','designation_code').order_by('designation'))
#                 print(desig)
#                 # print(l)    
#                 context={
#                     'division':division,
#                     "desig":desig
#                 } 
            
#                 return JsonResponse(context,safe = False)
#         return JsonResponse({"success":False}, status = 400)
#     except Exception as e: 
#         try:
#             m1.error_Table.objects.create(fun_name="getdiv_rly_hrms",user_id=request.user,err_details=str(e))
#         except:
#             print("Internal Error!!!")
#         return render(request, "errorspage.html", {}) 

# def signup_hrms(request):
#     if request.method == 'GET':
#         print(request.GET.get('ajaxname'))
#         if request.GET.get('ajaxname') == 'fetch_hrms':
#             hrms_id = request.GET.get('hrms_id')
#             print(hrms_id)
#             rlycode = None
#             if models.HRMS.objects.filter(hrms_employee_id = hrms_id).exists():
#                 obj = list(models.HRMS.objects.filter(hrms_employee_id = hrms_id).values())
#                 obj1 = models.HRMS.objects.get(hrms_employee_id = hrms_id)
#                 if models.railwayLocationMaster.objects.filter(location_description = obj[0]['current_unit_division']).exists():
#                     rlycode = models.railwayLocationMaster.objects.filter(location_description = obj[0]['current_unit_division'])[0]
                    
#                 if m1.empmast.objects.filter(hrms_id = hrms_id).exists():
#                     data = m1.empmast.objects.filter(hrms_id = hrms_id).update(empno=obj[0]['ipas_employee_id'],empname = obj[0]['employee_first_name'],
#                     empmname = obj[0]['employee_middle_name'],emplname = obj[0]['employee_last_name'],appointmentdate=obj[0]['appointment_date'],superannuation_date=obj[0]['superannuation_date'],gender=obj[0]['gender'],email=obj[0]['official_email_id'],contactno=obj[0]['official_mobile_no'],railwaygroup=obj[0]['railway_group'],pc7_level=obj[0]['paylevel'],service_status=obj[0]['service_status'],desig_longdesc=obj[0]['designation'],station_des=obj[0]['current_place'],dept_desc=obj[0]['department'],subdepartment=obj[0]['sub_department'],currentzone=obj[0]['current_zone'],currentunitdivision=obj[0]['current_unit_division'],rl_type=obj[0]['rltype'],rly_id = rlycode,profile_modified_by=obj[0]['ipas_employee_id']
#                     ,profile_modified_on=datetime.today()
#                     )
#                     print('inside empmast update')
                   
#                     # return JsonResponse({"obj":obj,"data":data},safe=False)
#                 else:
#                     m1.empmast.objects.create(empno=obj[0]['ipas_employee_id'], hrms_id = obj1,empname = obj[0]['employee_first_name'],
#                     empmname = obj[0]['employee_middle_name'],emplname = obj[0]['employee_last_name'],appointmentdate=obj[0]['appointment_date'],superannuation_date=obj[0]['superannuation_date'],gender=obj[0]['gender'],email=obj[0]['official_email_id'],contactno=obj[0]['official_mobile_no'],railwaygroup=obj[0]['railway_group'],pc7_level=obj[0]['paylevel'],service_status=obj[0]['service_status'],desig_longdesc=obj[0]['designation'],station_des=obj[0]['current_place'],dept_desc=obj[0]['department'],subdepartment=obj[0]['sub_department'],currentzone=obj[0]['current_zone'],currentunitdivision=obj[0]['current_unit_division'],rl_type=obj[0]['rltype'],rly_id = rlycode,profile_modified_by=obj[0]['ipas_employee_id']
#                     ,profile_modified_on=datetime.today()
#                     )
#                     print('inside empmast create')
#                 # TO SHOW THE RLY DIVISION AND DESIGNATION
#                     # return JsonResponse({"success":"created successfully"},safe=False)
                
#                 # hrms_id = request.GET.get('hrms_id')
#                 print("rlycode",rlycode)
#                 # print("hrms_id78",hrms_id)
#                 # emp = m1.empmast.objects.filter(hrms_id = hrms_id).values('empno')[0]['empno']
#                 # print("emp_data",emp)
#                 # if m1.empmast.objects.filter(empno = emp,rly_id_id__isnull = False).exists():
#                 #     rlyid = m1.empmast.objects.filter(empno = emp).values('rly_id_id')[0]['rly_id_id']
#                 #     print("rlyid99999999",rlyid)
#                 #     list1 = models.railwayLocationMaster.objects.filter(Q(location_type_desc='RAILWAY BOARD')|Q(location_type_desc='HEAD QUATER')|Q(location_type_desc='PRODUCTION UNIT')|Q(location_type_desc='PSU')|Q(location_type_desc='INSTITUTE')|Q(location_type_desc='RDSO'),rly_unit_code=rlyid).values('location_code')
#                 #     list2 =[]
#                 #     for i in list1:
#                 #         # print(i['designation'],'_________')
#                 #         list2.append(i['location_code'])

#                 #     # if there is division then list2 (railway) is empty then find its railway
#                 #     if(len(list2) == 0):
#                 #         list4 = list(models.railwayLocationMaster.objects.filter(Q(location_type_desc='DIVISION')|Q(location_type_desc='WORKSHOP')|Q(location_type_desc='OFFICE')|Q(location_type_desc='STORE')|Q(location_type_desc='CONSTRUCTION'),rly_unit_code=rlyid).values('location_code','location_type','parent_location_code'))
#                 #         print("parent_location_cod",list4[0]['parent_location_code'])
#                 #         list2.extend(list4[0]['parent_location_code'])
#                 #     else:
#                 #         list4 = list(models.railwayLocationMaster.objects.filter(Q(location_type_desc='DIVISION')|Q(location_type_desc='WORKSHOP')|Q(location_type_desc='OFFICE')|Q(location_type_desc='STORE')|Q(location_type_desc='CONSTRUCTION'),rly_unit_code=rlyid).values('location_code','location_type'))
#                 #     list7=models.Level_Desig.objects.exclude(delete_flag=True).filter(rly_unit_id=rlyid).values('designation','designation_code').order_by('designation')
                    
#                 #     if models.Level_Desig.objects.exclude(delete_flag=True).filter(rly_unit_id=rlyid,empno = emp).values('designation','designation_code').order_by('designation').exists():
#                 #         list7=models.Level_Desig.objects.exclude(delete_flag=True).filter(rly_unit_id=rlyid,empno = emp).values('designation','designation_code').order_by('designation')
#                 #     # else:
#                 #     #     pass
#                 #     allDesignations=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(rly_unit_id=rlyid).values('designation','designation_code').order_by('designation'))
#                 #     list8=[]
#                 #     for i in list7:
#                 #         # print(i['designation'],'_________')
#                 #         list8.append({"designation":i['designation'],"designation_code":i['designation_code']})
#                 #     print('list 899999',list8,list2,list4)
                        
#                 #     return JsonResponse({'Zone1':list2,'division1':list4,'desi':list8,'allDesignations':allDesignations},safe=False)
#                 # else:
#                 #     return JsonResponse({'alert1':'Railway id of the employee doest not exists'},safe = False) 
#                 return JsonResponse({'alert1':'hrms id matched'},safe = False) 
#             else:
#                 return JsonResponse({'alert':"HRMS Id Does Not Exist.Please Contact Admin"},safe=False)
        
#         elif request.GET.get('ajaxname') == 'send_otp':
#             cuser=request.user
#             hrms_id=request.GET.get("hrms_id")
#             # email = list(models.HRMS.objects.filter(hrms_employee_id =hrms_id).values('official_email_id','official_mobile_no'))[0]['official_email_id']
#             email = list(models.HRMS.objects.filter(hrms_employee_id =hrms_id).values('official_email_id','official_mobile_no'))[0]['official_email_id']
#             print(email)
#             if not email:
                
#                 print('inside if of email')
#                 return JsonResponse({'msg':"This HRMS Number has no Email Id"}, safe = False)
#             #print(type(email),'-------email------')
#             otp=generateOTP()
#             #print(otp,'___')
#             htmlgen = 'Your OTP is '+otp
#             # send_mail('E-inspection user verification for '+hrms_id,otp,'mfgcris@cris.org.in',[email], html_message=htmlgen)
#             # send_mail(
#             #             'Inspection user verification for '+hrms_id, #subject
#             #             htmlgen, #message body
#             #             'mfgcris@cris.org.in', # from email
#             #             [email], fail_silently=False, #to email
                    
#             #         )  
            
#             return JsonResponse({'otp':otp,"email":email}, safe = False)
        
#         elif request.GET.get('ajaxname') == 'FetchEmployee':
#                 hrms_id = request.GET.get('hrms_id')
#                 emp = m1.empmast.objects.filter(hrms_id = hrms_id).values('empno')[0]['empno']
#                 print("emp_data",emp)
#                 if m1.empmast.objects.filter(empno = emp,rly_id_id__isnull = False).exists():
#                     rlyid = m1.empmast.objects.filter(empno = emp).values('rly_id_id')[0]['rly_id_id']
#                     print("rlyid99999999",rlyid)
#                     list1 = models.railwayLocationMaster.objects.filter(Q(location_type_desc='RAILWAY BOARD')|Q(location_type_desc='HEAD QUATER')|Q(location_type_desc='PRODUCTION UNIT')|Q(location_type_desc='PSU')|Q(location_type_desc='INSTITUTE')|Q(location_type_desc='RDSO'),rly_unit_code=rlyid).values('location_code')
#                     list2 =[]
#                     print("raiway",list1)
#                     for i in list1:
#                         # print(i['designation'],'_________')
#                         list2.append(i['location_code'])

#                     # if there is division then list2 (railway) is empty then find its railway
#                     if(len(list2) == 0):
#                         list4 = list(models.railwayLocationMaster.objects.filter(Q(location_type_desc='DIVISION')|Q(location_type_desc='WORKSHOP')|Q(location_type_desc='OFFICE')|Q(location_type_desc='STORE')|Q(location_type_desc='CONSTRUCTION'),rly_unit_code=rlyid).values('location_code','location_type','parent_location_code'))
#                         print("parent_location_cod",list4[0]['parent_location_code'])
#                         list2.append(list4[0]['parent_location_code'])
#                         print("railway list2 ",list2)
#                     else:
#                         list4 = list(models.railwayLocationMaster.objects.filter(Q(location_type_desc='DIVISION')|Q(location_type_desc='WORKSHOP')|Q(location_type_desc='OFFICE')|Q(location_type_desc='STORE')|Q(location_type_desc='CONSTRUCTION'),rly_unit_code=rlyid).values('location_code','location_type'))
#                     list7=models.Level_Desig.objects.exclude(delete_flag=True).filter(rly_unit_id=rlyid).values('designation','designation_code').order_by('designation')
                    
#                     if models.Level_Desig.objects.exclude(delete_flag=True).filter(rly_unit_id=rlyid,empno = emp).values('designation','designation_code').order_by('designation').exists():
#                         list7=models.Level_Desig.objects.exclude(delete_flag=True).filter(rly_unit_id=rlyid,empno = emp).values('designation','designation_code').order_by('designation')
#                     # else:
#                     #     pass
#                     allDesignations=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(rly_unit_id=rlyid).values('designation','designation_code').order_by('designation'))
#                     list8=[]
#                     for i in list7:
#                         # print(i['designation'],'_________')
#                         list8.append({"designation":i['designation'],"designation_code":i['designation_code']})
#                     print('list 899999',list8,list2,list4)
                        
#                     return JsonResponse({'Zone1':list2,'division1':list4,'desi':list8,'allDesignations':allDesignations},safe=False)
#                 else:
#                     return JsonResponse({'alert1':'Railway id of the employee doest not exists'},safe = False) 
        
#         elif request.GET.get('ajaxname')=='proceed':

#             zone = request.GET.get('zone')
#             location_type = request.GET.get('location_type')
#             designation = request.GET.get('designation')

#             empnum = request.GET.get('empnum')
#             # empobject = m1.Level_Desig.objects.get(empno=empnum)

            
#             mobile = request.GET.get('contact')
#             empemail= request.GET.get('empemail')
#             posting = request.GET.get('status')
            
#             zone1 = request.GET.get('zone1')
#             location_type1 = request.GET.get('location_type1')
#             designation1 = request.GET.get('designation1')
#             password = request.GET.get('password')
#             # if password:
#             #     print("inside password009")
#             #     empobject.myuser_id.set_password(password)
#             #     empobject.save()
#             #     empobject.refresh_from_db()
#             print("datatosave",zone,location_type,designation,empnum,mobile,empemail,posting,zone1,location_type1,designation1,password)
#             print("password0009",password)

#             if models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code = designation,desig_user__isnull = True):
#                 id=user.objects.filter().order_by('-id')[0].id
#                 id+=1
#                 obj = user.objects.create_user(id = id,username=empemail,password=password,is_active=True, email=empemail,user_role='user')
#                 models.Level_Desig.objects.exclude(delete_flag=True).filter(empno_id = empnum,designation_code = designation).update(desig_user = obj)
#             else:
#                 users = models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code = designation)
#                 print("users99999999999",users[0].official_email_ID)
#                 print("users99999999999",users[0].desig_user.password)
#                 # password1=users[0].desig_user.set_password(password)
#                 # print("password1",password1)
#                 # password1.save()
#                 # password1.refresh_from_db()
#                 m1.MyUser.objects.filter(username=users[0].official_email_ID).update(password=make_password(password),username = empemail)
#             # write condition to save the primary charge and dual charge
#             alert = ''
#             if posting == 'P' and models.Level_Desig.objects.exclude(delete_flag=True).filter(empno_id = empnum,status = posting).exists():
#                 objectdesig= list(models.Level_Desig.objects.exclude(delete_flag=True).filter(empno_id = empnum,status = posting).values())
#                 models.Level_Desig.objects.exclude(delete_flag=True).filter(empno_id = empnum,designation_code =objectdesig[0]['designation_code']).update(empno_id = None)
#                 models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code =designation).update(empno_id =empnum,contactnumber = mobile,official_email_ID = empemail,status = posting,parent_desig_code = designation1)
#                 # return JsonResponse({"alert":"You are alreay on primary charge it will"},safe=False)
#                 alert = "You are alreay on primary charge it will change you primary charge"
#             elif posting == 'D' and models.Level_Desig.objects.exclude(delete_flag=True).filter(~Q(status = 'P'),empno_id = empnum).exists():
#                 models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code =designation).update(empno_id =empnum,contactnumber = mobile,official_email_ID = empemail,status = posting,parent_desig_code = designation1)
#                 # return JsonResponse({"alert":"You do not have any primary charge"},safe=False)
#                 alert = "You do not have any primary charge"
#             else:
#                 models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code =designation).update(empno_id =empnum,contactnumber = mobile,official_email_ID = empemail,status = posting,parent_desig_code = designation1)
#                 # print("FOrP79834",data)
#             # if models.Level_Desig.objects.exclude(delete_flag=True).filter(empno_id = empnum,designation_code = designation).exists():
#             #     models.Level_Desig.objects.exclude(delete_flag=True).filter(empno_id = empnum,designation_code =designation).update(contactnumber = mobile,official_email_ID = empemail)
#             # else:
#             #     models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code =designation).update(empno_id =empnum,contactnumber = mobile,official_email_ID = empemail)
            
#             # #save data to level desig 
#             # models.Level_Desig.objects.exclude(delete_flag=True).filter(empno_id = empnum,designation_code =designation).update(contactnumber = mobile,official_email_ID = empemail)

#             # code to save the password of the user
            
            
#             return JsonResponse({"DATA":"Data Saved Successfully",'alert1':alert},safe=False)

#         elif request.GET.get('ajaxname') == 'employee_details':
#             desig_code = request.GET.get('desig_code')
#             print("desig_code 45",desig_code)
#             # hrms_id = request.GET.get('hrms_id')
#             # employnum = m1.empmast.objects.filter(hrms_id = hrms_id).values('empno')[0]['empno']

#             # employee detils
#             emp = list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code = desig_code).values('empno','contactnumber','official_email_ID','status','parent_desig_code'))
#             print(emp[0]['parent_desig_code'])
#             # if emp[0]['parent_desig_code']:
#             #     emmm = list(models.Level_Desig.objects.exclude(delete_flag=True).filter(Q(rly_unit__location_type_desc='RAILWAY BOARD')|Q(rly_unit__location_type_desc='HEAD QUATER')|Q(rly_unit__location_type_desc='PRODUCTION UNIT')|Q(rly_unit__location_type_desc='PSU')|Q(rly_unit__location_type_desc='INSTITUTE')|Q(rly_unit__location_type_desc='RDSO'),designation_code = emp[0]['parent_desig_code']).values('designation','designation_code',"rly_unit__location_code"))
#             #     print("mydata4666",emmm)
#             #     if not emmm:
#             #         print("not emmm")
#             #         emmm = list(models.Level_Desig.objects.exclude(delete_flag=True).filter(Q(rly_unit__location_type_desc='DIVISION')|Q(rly_unit__location_type_desc='WORKSHOP')|Q(rly_unit__location_type_desc='OFFICE')|Q(rly_unit__location_type_desc='STORE')|Q(rly_unit__location_type_desc='CONSTRUCTION'),designation_code = emp[0]['parent_desig_code']).values('designation','designation_code',"rly_unit__location_code","rly_unit__location_type","rly_unit__parent_location_code"))[0]
#             if emp[0]['parent_desig_code']:
#                 if models.Level_Desig.objects.exclude(delete_flag=True).filter(Q(rly_unit__location_type_desc='RAILWAY BOARD')|Q(rly_unit__location_type_desc='HEAD QUATER')|Q(rly_unit__location_type_desc='PRODUCTION UNIT')|Q(rly_unit__location_type_desc='PSU')|Q(rly_unit__location_type_desc='INSTITUTE')|Q(rly_unit__location_type_desc='RDSO'),designation_code = emp[0]['parent_desig_code']).exists():
#                     zones1 = list(models.Level_Desig.objects.exclude(delete_flag=True).filter(Q(rly_unit__location_type_desc='RAILWAY BOARD')|Q(rly_unit__location_type_desc='HEAD QUATER')|Q(rly_unit__location_type_desc='PRODUCTION UNIT')|Q(rly_unit__location_type_desc='PSU')|Q(rly_unit__location_type_desc='INSTITUTE')|Q(rly_unit__location_type_desc='RDSO'),designation_code = emp[0]['parent_desig_code']).values('designation','designation_code',"rly_unit__location_code"))[0]
#                     divisions1 =[]
#                     print("mydata4666",zones1)

#                 else:
#                     print("not emmm")
#                     divisions1 = list(models.Level_Desig.objects.exclude(delete_flag=True).filter(Q(rly_unit__location_type_desc='DIVISION')|Q(rly_unit__location_type_desc='WORKSHOP')|Q(rly_unit__location_type_desc='OFFICE')|Q(rly_unit__location_type_desc='STORE')|Q(rly_unit__location_type_desc='CONSTRUCTION'),designation_code = emp[0]['parent_desig_code']).values('designation','designation_code',"rly_unit__location_code","rly_unit__location_type","rly_unit__parent_location_code"))[0]
#                     zones1 = divisions1['rly_unit__parent_location_code']
#                     print("mydata49999",divisions1)
#             else:
#                 divisions1 = []
#                 zones1 = []
#             list1=models.railwayLocationMaster.objects.filter(Q(location_type_desc='RAILWAY BOARD')|Q(location_type_desc='HEAD QUATER')|Q(location_type_desc='PRODUCTION UNIT')|Q(location_type_desc='PSU')|Q(location_type_desc='INSTITUTE')|Q(location_type_desc='RDSO')).values('location_code').order_by('location_code')
#             list2=[]
#             for i in list1:
#                 # print(i['location_code'],'_________')
#                 list2.append(i['location_code'])
            
            
#             list3=models.railwayLocationMaster.objects.filter(Q(location_type_desc='DIVISION')|Q(location_type_desc='WORKSHOP')|Q(location_type_desc='OFFICE')|Q(location_type_desc='STORE')|Q(location_type_desc='CONSTRUCTION')).values('location_code','location_type').order_by('location_code')
#             list4=[]
#             for i in list3:
#                 # print(i['location_code'],'_________')
#                 list4.append({'location_code':i['location_code'],'location_type':i['location_type']})  

#             # print("list4",list4)
                
                
#             # list5=models.departMast.objects.all().values('department_name').order_by('department_name')
#             # list6=[]
#             # for i in list5:
#             #     # print(i['department_name'],'_________')
#             #     list6.append(i['department_name'])
            
#             list7=list(models.Level_Desig.objects.exclude(delete_flag=True).all().values('designation','designation_code').order_by('designation'))
#             # list8=[]
#             # for i in list7:
#             #     # print(i['designation'],'_________')
#             #     list8.append(i['designation'])
#             print('emmm')
#             # get the reporting officer rly division and desgnation
#             # report_detail = list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code = emmm['designation_code']).values("rly_unit__location_code","rly_unit__location_type"))
#             # print('report_detail',report_detail)

#             # data2 = list(m1.MyUser.objects.filter(email = emp[0]['official_email_ID']).values('password'))
#             if models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code = desig_code,desig_user__isnull = False).exists():
#                 data2 = models.Level_Desig.objects.exclude(delete_flag=True).get(designation_code = desig_code).desig_user.password
#             else:
#                 data2 = ''
#             print("password_data2",data2)
#             return JsonResponse({"emp":emp , "password":data2 ,"Reporting_officerZone":zones1,"Reporting_officerDiv":divisions1,'Zone':list2,'division':list4,'desi':list7},safe=False)

#         elif request.GET.get('ajaxname') == 'employee_numbers':
#             hrms_id = request.GET.get('hrms_id')
#             empno = list(m1.empmast.objects.filter(hrms_id = hrms_id).values('empno'))
#             print("empno56",empno)
#             return JsonResponse({"empno":empno},safe = False)
        
#         elif request.GET.get('ajaxname') == 'changeDivision':
#             division = request.GET.get('division').split('-')
#             div = list(models.railwayLocationMaster.objects.filter(location_code = division[0],location_type = division[1]).values('parent_location_code'))
            
#             print("div338743",div)
            
#             return JsonResponse({"div":div},safe = False)
        
#         elif request.GET.get('ajaxname') == 'validate_email':
#             desig_id = request.GET.get('desig_id')
#             empemail = request.GET.get('empemail')
#             print('desig_id99999',desig_id)

#             email = list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code = desig_id).values('official_email_ID'))[0]['official_email_ID']
            
#             #  TO CHECK WHEATHER THE EMAIL EXISTS IN MYUSER TABLE OR NOT 
#             if m1.MyUser.objects.filter(email = email).exists():
#                 myuserdata = m1.MyUser.objects.get(email = email)
#                 if models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code = desig_id,desig_user__isnull = True):
#                     models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code = desig_id).update(desig_user = myuserdata)
#                 else:
#                     pass

#             otp=generateOTP()
#             #print(otp,'___')
#             htmlgen = 'Your OTP is '+otp
#             msg = 'your email is used to update the designation is that you, if not please contact cris...'
#             # send_mail('E-inspection user verification for '+desig_id,otp,'mfgcris@cris.org.in',[empemail], html_message=msg)
#             # send_mail(
#             #             'E-inspection user verification for '+desig_id, #subject
#             #             htmlgen, #message body
#             #             'mfgcris@cris.org.in', # from email
#             #             [email], fail_silently=False, #to email
                    
#             #         ) 
#             return JsonResponse({'otp':otp},safe = False)
                
#         elif request.GET.get('ajaxname') == 'getdesigdivwise':
#             zones = request.GET.get('zones')
#             div = request.GET.get('div').split('-')
#             print("mydata99999",zones,div)
#             rly_unit_code = models.railwayLocationMaster.objects.get(location_code = div[0],location_type = div[1]).rly_unit_code
#             desig = list(models.Level_Desig.objects.exclude(delete_flag=True).filter(rly_unit_id = rly_unit_code).values('designation','designation_code').order_by('designation'))
#             return JsonResponse({"desig":desig},safe = False)

    
#     # TO SAVE THE REGISTRATION OF THE USER
    
#     id=user.objects.filter().order_by('-id')[0].id
#     id+=1
#     print(id)
#     print("mydata",request.POST.get('submit_form'))
#     print("mydata",request.method)
#     if request.method == "POST":
#         submit_form=request.POST.get('submit_form')
        
#         if(submit_form=="register"):
#             print("inside register")
#             employeeno=request.POST.get('employeeno')
#             designation=request.POST.get('designation')
#             emailid = request.POST.get('emailid')
#             if m1.email_request.objects.filter(designation=designation).exists():
#                 messages.error(request,"Registration request for this designation has already been raised")
#             else:
#                 desig=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation=designation).values('designation_code')
#                 if m1.empmast.objects.filter(empno=employeeno).exists():
#                     railway=m1.empmast.objects.filter(empno=employeeno).values('rly_id')[0]['rly_id']

#                 else:
#                     railway = ''
            
#                 if railway != '':
#                     railway=models.railwayLocationMaster.objects.get(rly_unit_code=railway)
#                 else:
#                     railway = None
#                 # update=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation=designation).update(official_email_ID=emailid,empno_id=employeeno)
#                 file=request.POST.get('img')
#                 if file != '':
#                     file=request.FILES['img']
#                 else:
#                     file=None
#                 # models.file.objects.create(document=file,desig_code_id=desig)
#                 if m1.email_request.objects.filter(email=emailid).exists():
#                     messages.error(request,"Request for this email Id is already sent")
#                 else:    
#                     m1.email_request.objects.create(rly_id=railway,empno=employeeno,designation=designation,email=emailid,requestDate=datetime.today(),file=file,status='Pending')

#                     messages.success(request,'Your request has been sent to concerned Admin')


#     list1=models.railwayLocationMaster.objects.filter(Q(location_type_desc='RAILWAY BOARD')|Q(location_type_desc='HEAD QUATER')|Q(location_type_desc='PRODUCTION UNIT')|Q(location_type_desc='PSU')|Q(location_type_desc='INSTITUTE')|Q(location_type_desc='RDSO')).values('location_code').order_by('location_code')
#     list2=[]
#     for i in list1:
#         # print(i['location_code'],'_________')
#         list2.append(i['location_code'])
    
    
#     list3=models.railwayLocationMaster.objects.filter(Q(location_type_desc='DIVISION')|Q(location_type_desc='WORKSHOP')|Q(location_type_desc='OFFICE')|Q(location_type_desc='STORE')|Q(location_type_desc='CONSTRUCTION')).values('location_code','location_type').order_by('location_code')
#     list4=[]
#     for i in list3:
#         # print(i['location_code'],'_________')
#         list4.append({'location_code':i['location_code'],'location_type':i['location_type']})  

#     # print("list4",list4)
        
    
#     list7=models.Level_Desig.objects.exclude(delete_flag=True).all().values('designation','designation_code').order_by('designation')
#     list8=[]
#     for i in list7:
#         # print(i['designation'],'_________')
#         list8.append(i['designation'])

#     # print("mydata",list2,list4,list8)
#     context={'Zone':list2,'division':list4,'desi':list7}
#     return render(request,"signup_hrms.html",context)

# # -------------------------------------------------------------------------------

# def getdiv_rly_hrms(request):
#     try:
#         if request.method == "GET" or request.is_ajax():
#             rly=request.GET.get('rly_data_hrms')
#             newrly = json.loads(rly)
            
#             # dev desgitantion accoring to railway
#             division=list(models.railwayLocationMaster.objects.filter(location_type_desc__in=['DIVISION','WORKSHOP'],parent_location_code=newrly).order_by('location_code').values('location_code', 'location_type').distinct('location_code'))
#             if len(division) == 0:
#                 print("insideifdiv")
#                 rly_unit_code = models.railwayLocationMaster.objects.get(location_code = newrly).rly_unit_code
#                 desig = list(models.Level_Desig.objects.exclude(delete_flag=True).filter(rly_unit_id = rly_unit_code).values('designation','designation_code').order_by('designation'))
#                 print(desig)
#                 return JsonResponse({"desig":desig},safe = False)
#             else:
#                 print(" inside_else")
#                 l=[]
#                 print("division list)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))",division)
#                 # for i in division:
#                 #     l.append({'location_code': i['location_code'], 'location_type':i['location_type']})

#                 # saud faisal
#                 rly_unit_code = models.railwayLocationMaster.objects.get(location_code = newrly).rly_unit_code
#                 desig = list(models.Level_Desig.objects.exclude(delete_flag=True).filter(rly_unit_id = rly_unit_code).values('designation','designation_code').order_by('designation'))
#                 print(desig)
#                 # print(l)    
#                 context={
#                     'division':division,
#                     "desig":desig
#                 } 
            
#                 return JsonResponse(context,safe = False)
#         return JsonResponse({"success":False}, status = 400)
#     except Exception as e: 
#         try:
#             m1.error_Table.objects.create(fun_name="getdiv_rly_hrms",user_id=request.user,err_details=str(e))
#         except:
#             print("Internal Error!!!")
#         return render(request, "errorspage.html", {}) 


def signup_hrms(request):
    if request.method == 'GET':
        print(request.GET.get('ajaxname'))
        if request.GET.get('ajaxname') == 'fetch_hrms':
            hrms_id = request.GET.get('hrms_id')
            print(hrms_id)
            rlycode = None
            if models.HRMS.objects.filter(hrms_employee_id = hrms_id).exists():
                obj = list(models.HRMS.objects.filter(hrms_employee_id = hrms_id).values())
                obj1 = models.HRMS.objects.get(hrms_employee_id = hrms_id)
                if models.railwayLocationMaster.objects.filter(location_description = obj[0]['current_unit_division']).exists():
                    rlycode = models.railwayLocationMaster.objects.filter(location_description = obj[0]['current_unit_division'])[0]
                    
                if m1.empmast.objects.filter(hrms_id = hrms_id).exists():
                    data = m1.empmast.objects.filter(hrms_id = hrms_id).update(empno=obj[0]['ipas_employee_id'],empname = obj[0]['employee_first_name'],
                    empmname = obj[0]['employee_middle_name'],emplname = obj[0]['employee_last_name'],appointmentdate=obj[0]['appointment_date'],superannuation_date=obj[0]['superannuation_date'],gender=obj[0]['gender'],email=obj[0]['official_email_id'],contactno=obj[0]['official_mobile_no'],railwaygroup=obj[0]['railway_group'],pc7_level=obj[0]['paylevel'],service_status=obj[0]['service_status'],desig_longdesc=obj[0]['designation'],station_des=obj[0]['current_place'],dept_desc=obj[0]['department'],subdepartment=obj[0]['sub_department'],currentzone=obj[0]['current_zone'],currentunitdivision=obj[0]['current_unit_division'],rl_type=obj[0]['rltype'],rly_id = rlycode,profile_modified_by=obj[0]['ipas_employee_id']
                    ,profile_modified_on=datetime.today()
                    )
                    print('inside empmast update')
                   
                    # return JsonResponse({"obj":obj,"data":data},safe=False)
                else:
                    m1.empmast.objects.create(empno=obj[0]['ipas_employee_id'], hrms_id = obj1,empname = obj[0]['employee_first_name'],
                    empmname = obj[0]['employee_middle_name'],emplname = obj[0]['employee_last_name'],appointmentdate=obj[0]['appointment_date'],superannuation_date=obj[0]['superannuation_date'],gender=obj[0]['gender'],email=obj[0]['official_email_id'],contactno=obj[0]['official_mobile_no'],railwaygroup=obj[0]['railway_group'],pc7_level=obj[0]['paylevel'],service_status=obj[0]['service_status'],desig_longdesc=obj[0]['designation'],station_des=obj[0]['current_place'],dept_desc=obj[0]['department'],subdepartment=obj[0]['sub_department'],currentzone=obj[0]['current_zone'],currentunitdivision=obj[0]['current_unit_division'],rl_type=obj[0]['rltype'],rly_id = rlycode,profile_modified_by=obj[0]['ipas_employee_id']
                    ,profile_modified_on=datetime.today()
                    )
                    print('inside empmast create')
                # TO SHOW THE RLY DIVISION AND DESIGNATION
                    # return JsonResponse({"success":"created successfully"},safe=False)
                
                # hrms_id = request.GET.get('hrms_id')
                print("rlycode",rlycode)
                # print("hrms_id78",hrms_id)
                # emp = m1.empmast.objects.filter(hrms_id = hrms_id).values('empno')[0]['empno']
                # print("emp_data",emp)
                # if m1.empmast.objects.filter(empno = emp,rly_id_id__isnull = False).exists():
                #     rlyid = m1.empmast.objects.filter(empno = emp).values('rly_id_id')[0]['rly_id_id']
                #     print("rlyid99999999",rlyid)
                #     list1 = models.railwayLocationMaster.objects.filter(Q(location_type_desc='RAILWAY BOARD')|Q(location_type_desc='HEAD QUATER')|Q(location_type_desc='PRODUCTION UNIT')|Q(location_type_desc='PSU')|Q(location_type_desc='INSTITUTE')|Q(location_type_desc='RDSO'),rly_unit_code=rlyid).values('location_code')
                #     list2 =[]
                #     for i in list1:
                #         # print(i['designation'],'_________')
                #         list2.append(i['location_code'])

                #     # if there is division then list2 (railway) is empty then find its railway
                #     if(len(list2) == 0):
                #         list4 = list(models.railwayLocationMaster.objects.filter(Q(location_type_desc='DIVISION')|Q(location_type_desc='WORKSHOP')|Q(location_type_desc='OFFICE')|Q(location_type_desc='STORE')|Q(location_type_desc='CONSTRUCTION'),rly_unit_code=rlyid).values('location_code','location_type','parent_location_code'))
                #         print("parent_location_cod",list4[0]['parent_location_code'])
                #         list2.extend(list4[0]['parent_location_code'])
                #     else:
                #         list4 = list(models.railwayLocationMaster.objects.filter(Q(location_type_desc='DIVISION')|Q(location_type_desc='WORKSHOP')|Q(location_type_desc='OFFICE')|Q(location_type_desc='STORE')|Q(location_type_desc='CONSTRUCTION'),rly_unit_code=rlyid).values('location_code','location_type'))
                #     list7=models.Level_Desig.objects.exclude(delete_flag=True).filter(rly_unit_id=rlyid).values('designation','designation_code').order_by('designation')
                    
                #     if models.Level_Desig.objects.exclude(delete_flag=True).filter(rly_unit_id=rlyid,empno = emp).values('designation','designation_code').order_by('designation').exists():
                #         list7=models.Level_Desig.objects.exclude(delete_flag=True).filter(rly_unit_id=rlyid,empno = emp).values('designation','designation_code').order_by('designation')
                #     # else:
                #     #     pass
                #     allDesignations=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(rly_unit_id=rlyid).values('designation','designation_code').order_by('designation'))
                #     list8=[]
                #     for i in list7:
                #         # print(i['designation'],'_________')
                #         list8.append({"designation":i['designation'],"designation_code":i['designation_code']})
                #     print('list 899999',list8,list2,list4)
                        
                #     return JsonResponse({'Zone1':list2,'division1':list4,'desi':list8,'allDesignations':allDesignations},safe=False)
                # else:
                #     return JsonResponse({'alert1':'Railway id of the employee doest not exists'},safe = False) 
                return JsonResponse({'alert1':'hrms id matched'},safe = False) 
            else:
                return JsonResponse({'alert':"HRMS Id Does Not Exist.Please Contact Admin"},safe=False)
        
        elif request.GET.get('ajaxname') == 'send_otp':
            cuser=request.user
            hrms_id=request.GET.get("hrms_id")
            # email = list(models.HRMS.objects.filter(hrms_employee_id =hrms_id).values('official_email_id','official_mobile_no'))[0]['official_email_id']
            email = list(models.HRMS.objects.filter(hrms_employee_id =hrms_id).values('official_email_id','official_mobile_no'))[0]['official_email_id']
            print(email)
            if not email:
                
                print('inside if of email')
                return JsonResponse({'msg':"This HRMS Number has no Email Id"}, safe = False)
            #print(type(email),'-------email------')
            otp=generateOTP()
            #print(otp,'___')
            htmlgen = 'Your OTP is '+otp
            send_mail('E-inspection user verification for '+hrms_id,otp,'mfgcris@cris.org.in',[email], html_message=htmlgen)
            # send_mail(
            #             'Inspection user verification for '+hrms_id, #subject
            #             htmlgen, #message body
            #             'mfgcris@cris.org.in', # from email
            #             [email], fail_silently=False, #to email
                    
            #         )  
            
            return JsonResponse({'otp':otp,"email":email}, safe = False)
        
        elif request.GET.get('ajaxname') == 'FetchEmployee':
                hrms_id = request.GET.get('hrms_id')
                emp = m1.empmast.objects.filter(hrms_id = hrms_id).values('empno')[0]['empno']
                print("emp_data",emp)
                if m1.empmast.objects.filter(empno = emp,rly_id_id__isnull = False).exists():
                    rlyid = m1.empmast.objects.filter(empno = emp).values('rly_id_id')[0]['rly_id_id']
                    print("rlyid99999999",rlyid)
                    list1 = models.railwayLocationMaster.objects.filter(Q(location_type_desc='RAILWAY BOARD')|Q(location_type_desc='HEAD QUATER')|Q(location_type_desc='PRODUCTION UNIT')|Q(location_type_desc='PSU')|Q(location_type_desc='INSTITUTE')|Q(location_type_desc='RDSO'),rly_unit_code=rlyid).values('location_code')
                    list2 =[]
                    for i in list1:
                        # print(i['designation'],'_________')
                        list2.append(i['location_code'])

                    # if there is division then list2 (railway) is empty then find its railway
                    if(len(list2) == 0):
                        list4 = list(models.railwayLocationMaster.objects.filter(Q(location_type_desc='DIVISION')|Q(location_type_desc='WORKSHOP')|Q(location_type_desc='OFFICE')|Q(location_type_desc='STORE')|Q(location_type_desc='CONSTRUCTION'),rly_unit_code=rlyid).values('location_code','location_type','parent_location_code'))
                        print("parent_location_cod",list4[0]['parent_location_code'])
                        list2.extend(list4[0]['parent_location_code'])
                    else:
                        list4 = list(models.railwayLocationMaster.objects.filter(Q(location_type_desc='DIVISION')|Q(location_type_desc='WORKSHOP')|Q(location_type_desc='OFFICE')|Q(location_type_desc='STORE')|Q(location_type_desc='CONSTRUCTION'),rly_unit_code=rlyid).values('location_code','location_type'))
                    list7=models.Level_Desig.objects.exclude(delete_flag=True).filter(rly_unit_id=rlyid).values('designation','designation_code').order_by('designation')
                    
                    if models.Level_Desig.objects.exclude(delete_flag=True).filter(rly_unit_id=rlyid,empno = emp).values('designation','designation_code').order_by('designation').exists():
                        list7=models.Level_Desig.objects.exclude(delete_flag=True).filter(rly_unit_id=rlyid,empno = emp).values('designation','designation_code').order_by('designation')
                    # else:
                    #     pass
                    allDesignations=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(rly_unit_id=rlyid).values('designation','designation_code').order_by('designation'))
                    list8=[]
                    for i in list7:
                        # print(i['designation'],'_________')
                        list8.append({"designation":i['designation'],"designation_code":i['designation_code']})
                    print('list 899999',list8,list2,list4)
                        
                    return JsonResponse({'Zone1':list2,'division1':list4,'desi':list8,'allDesignations':allDesignations},safe=False)
                else:
                    return JsonResponse({'alert1':'Railway id of the employee doest not exists'},safe = False) 
        
        elif request.GET.get('ajaxname')=='proceed':

            zone = request.GET.get('zone')
            location_type = request.GET.get('location_type')
            designation = request.GET.get('designation')

            empnum = request.GET.get('empnum')
            # empobject = m1.Level_Desig.objects.get(empno=empnum)

            
            mobile = request.GET.get('contact')
            empemail= request.GET.get('empemail')
            posting = request.GET.get('status')
            
            zone1 = request.GET.get('zone1')
            location_type1 = request.GET.get('location_type1')
            designation1 = request.GET.get('designation1')
            password = request.GET.get('password')
            # if password:
            #     print("inside password009")
            #     empobject.myuser_id.set_password(password)
            #     empobject.save()
            #     empobject.refresh_from_db()
            print("datatosave",zone,location_type,designation,empnum,mobile,empemail,posting,zone1,location_type1,designation1,password)
            print("password0009",password)

            if models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code = designation,desig_user__isnull = True):
                id=user.objects.filter().order_by('-id')[0].id
                id+=1
                obj = user.objects.create_user(id = id,username=empemail,password=password,is_active=True, email=empemail,user_role='user')
                models.Level_Desig.objects.exclude(delete_flag=True).filter(empno_id = empnum,designation_code = designation).update(desig_user = obj)
            else:
                users = models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code = designation)
                print("users99999999999",users[0])
                print("users99999999999",users[0].desig_user.password)
                # password1=users[0].desig_user.set_password(password)
                # print("password1",password1)
                # password1.save()
                # password1.refresh_from_db()
                m1.MyUser.objects.filter(username=empemail).update(password=make_password(password))
            # write condition to save the primary charge and dual charge
            alert = ''
            if posting == 'P' and models.Level_Desig.objects.exclude(delete_flag=True).filter(empno_id = empnum,status = posting).exists():
                objectdesig= list(models.Level_Desig.objects.exclude(delete_flag=True).filter(empno_id = empnum,status = posting).values())
                models.Level_Desig.objects.exclude(delete_flag=True).filter(empno_id = empnum,designation_code =objectdesig[0]['designation_code']).update(empno_id = None)
                models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code =designation).update(empno_id =empnum,contactnumber = mobile,official_email_ID = empemail,status = posting)
                # return JsonResponse({"alert":"You are alreay on primary charge it will"},safe=False)
                alert = "You are alreay on primary charge it will change you primary charge"
            elif posting == 'D' and models.Level_Desig.objects.exclude(delete_flag=True).filter(~Q(status = 'P'),empno_id = empnum).exists():
                models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code =designation).update(empno_id =empnum,contactnumber = mobile,official_email_ID = empemail,status = posting)
                # return JsonResponse({"alert":"You do not have any primary charge"},safe=False)
                alert = "You do not have any primary charge"
            else:
                models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code =designation).update(empno_id =empnum,contactnumber = mobile,official_email_ID = empemail,status = posting)
                print("FOrP79834",data)
            # if models.Level_Desig.objects.exclude(delete_flag=True).filter(empno_id = empnum,designation_code = designation).exists():
            #     models.Level_Desig.objects.exclude(delete_flag=True).filter(empno_id = empnum,designation_code =designation).update(contactnumber = mobile,official_email_ID = empemail)
            # else:
            #     models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code =designation).update(empno_id =empnum,contactnumber = mobile,official_email_ID = empemail)
            
            # #save data to level desig 
            # models.Level_Desig.objects.exclude(delete_flag=True).filter(empno_id = empnum,designation_code =designation).update(contactnumber = mobile,official_email_ID = empemail)

            # code to save the password of the user
            
            
            return JsonResponse({"DATA":"Data Saved Successfully",'alert1':alert},safe=False)

        elif request.GET.get('ajaxname') == 'employee_details':
            desig_code = request.GET.get('desig_code')
            print("desig_code 45",desig_code)
            # hrms_id = request.GET.get('hrms_id')
            # employnum = m1.empmast.objects.filter(hrms_id = hrms_id).values('empno')[0]['empno']

            # employee detils
            emp = list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code = desig_code).values('empno','contactnumber','official_email_ID','status','parent_desig_code'))

            if emp[0]['parent_desig_code']:
                emmm = models.Level_Desig.objects.exclude(delete_flag=True).filter(Q(rly_unit__location_type_desc='RAILWAY BOARD')|Q(rly_unit__location_type_desc='HEAD QUATER')|Q(rly_unit__location_type_desc='PRODUCTION UNIT')|Q(rly_unit__location_type_desc='PSU')|Q(rly_unit__location_type_desc='INSTITUTE')|Q(rly_unit__location_type_desc='RDSO'),designation_code = emp[0]['parent_desig_code']).values('designation','designation_code',"rly_unit__location_code")[0]

                if not emmm :
                    print("not emmm")
                    emmm = models.Level_Desig.objects.exclude(delete_flag=True).filter(Q(rly_unit__location_type_desc='DIVISION')|Q(rly_unit__location_type_desc='WORKSHOP')|Q(rly_unit__location_type_desc='OFFICE')|Q(rly_unit__location_type_desc='STORE')|Q(rly_unit__location_type_desc='CONSTRUCTION'),designation_code = emp[0]['parent_desig_code']).values('designation','designation_code',"rly_unit__location_code","rly_unit__location_type")[0]
            else:
                emmm = []
            list1=models.railwayLocationMaster.objects.filter(Q(location_type_desc='RAILWAY BOARD')|Q(location_type_desc='HEAD QUATER')|Q(location_type_desc='PRODUCTION UNIT')|Q(location_type_desc='PSU')|Q(location_type_desc='INSTITUTE')|Q(location_type_desc='RDSO')).values('location_code').order_by('location_code')
            list2=[]
            for i in list1:
                # print(i['location_code'],'_________')
                list2.append(i['location_code'])
            
            
            list3=models.railwayLocationMaster.objects.filter(Q(location_type_desc='DIVISION')|Q(location_type_desc='WORKSHOP')|Q(location_type_desc='OFFICE')|Q(location_type_desc='STORE')|Q(location_type_desc='CONSTRUCTION')).values('location_code','location_type').order_by('location_code')
            list4=[]
            for i in list3:
                # print(i['location_code'],'_________')
                list4.append({'location_code':i['location_code'],'location_type':i['location_type']})  

            # print("list4",list4)
                
                
            # list5=models.departMast.objects.all().values('department_name').order_by('department_name')
            # list6=[]
            # for i in list5:
            #     # print(i['department_name'],'_________')
            #     list6.append(i['department_name'])
            
            list7=models.Level_Desig.objects.exclude(delete_flag=True).all().values('designation').order_by('designation')
            list8=[]
            for i in list7:
                # print(i['designation'],'_________')
                list8.append(i['designation'])
            print('emmm',emmm)
            # get the reporting officer rly division and desgnation
            # report_detail = list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code = emmm['designation_code']).values("rly_unit__location_code","rly_unit__location_type"))
            # print('report_detail',report_detail)

            # data2 = list(m1.MyUser.objects.filter(email = emp[0]['official_email_ID']).values('password'))
            if models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code = desig_code,desig_user__isnull = False).exists():
                data2 = models.Level_Desig.objects.exclude(delete_flag=True).get(designation_code = desig_code).desig_user.password
            else:
                data2 = ''
            print("password_data2",data2)
            return JsonResponse({"emp":emp , "password":data2 ,"Reporting_officer":emmm,'Zone':list2,'division':list4,'desi':list8},safe=False)

        elif request.GET.get('ajaxname') == 'employee_numbers':
            hrms_id = request.GET.get('hrms_id')
            empno = list(m1.empmast.objects.filter(hrms_id = hrms_id).values('empno'))
            print("empno56",empno)
            return JsonResponse({"empno":empno},safe = False)
        
        elif request.GET.get('ajaxname') == 'changeDivision':
            division = request.GET.get('division').split('-')
            div = list(models.railwayLocationMaster.objects.filter(location_code = division[0],location_type = division[1]).values('parent_location_code'))
            
            print("div338743",div)
            
            return JsonResponse({"div":div},safe = False)
        
        elif request.GET.get('ajaxname') == 'validate_email':
            desig_id = request.GET.get('desig_id')
            print('desig_id99999',desig_id)
            email = list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code = desig_id).values('official_email_ID'))[0]['official_email_ID']
            
            #  TO CHECK WHEATHER THE EMAIL EXISTS IN MYUSER TABLE OR NOT 
            if m1.MyUser.objects.filter(email = email).exists():
                myuserdata = m1.MyUser.objects.get(email = email)
                if models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code = desig_id,desig_user__isnull = True):
                    models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code = desig_id).update(desig_user = myuserdata)
                else:
                    pass

            otp=generateOTP()
            #print(otp,'___')
            htmlgen = 'Your OTP is '+otp
            send_mail('E-inspection user verification for '+desig_id,otp,'mfgcris@cris.org.in',[email], html_message=htmlgen)
            # send_mail(
            #             'E-inspection user verification for '+desig_id, #subject
            #             htmlgen, #message body
            #             'mfgcris@cris.org.in', # from email
            #             [email], fail_silently=False, #to email
                    
            #         ) 
            return JsonResponse({'otp':otp},safe = False)
                
        elif request.GET.get('ajaxname') == 'getdesigdivwise':
            zones = request.GET.get('zones')
            div = request.GET.get('div').split('-')
            print("mydata99999",zones,div)
            rly_unit_code = models.railwayLocationMaster.objects.get(location_code = div[0],location_type = div[1]).rly_unit_code
            desig = list(models.Level_Desig.objects.exclude(delete_flag=True).filter(rly_unit_id = rly_unit_code).values('designation','designation_code').order_by('designation'))
            return JsonResponse({"desig":desig},safe = False)

    
    # TO SAVE THE REGISTRATION OF THE USER
    
    id=user.objects.filter().order_by('-id')[0].id
    id+=1
    print(id)
    print("mydata",request.POST.get('submit_form'))
    print("mydata",request.method)
    if request.method == "POST":
        submit_form=request.POST.get('submit_form')
        
        if(submit_form=="register"):
            print("inside register")
            employeeno=request.POST.get('employeeno')
            designation=request.POST.get('designation')
            emailid = request.POST.get('emailid')
            if m1.email_request.objects.filter(designation=designation).exists():
                messages.error(request,"Registration request for this designation has already been raised")
            else:
                desig=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation=designation).values('designation_code')
                if m1.empmast.objects.filter(empno=employeeno).exists():
                    railway=m1.empmast.objects.filter(empno=employeeno).values('rly_id')[0]['rly_id']

                else:
                    railway = ''
            
                if railway != '':
                    railway=models.railwayLocationMaster.objects.get(rly_unit_code=railway)
                else:
                    railway = None
                # update=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation=designation).update(official_email_ID=emailid,empno_id=employeeno)
                file=request.POST.get('img')
                if file != '':
                    file=request.FILES['img']
                else:
                    file=None
                # models.file.objects.create(document=file,desig_code_id=desig)
                if m1.email_request.objects.filter(email=emailid).exists():
                    messages.error(request,"Request for this email Id is already sent")
                else:    
                    m1.email_request.objects.create(rly_id=railway,empno=employeeno,designation=designation,email=emailid,requestDate=datetime.today(),file=file,status='Pending')

                    messages.success(request,'Your request has been sent to concerned Admin')


    list1=models.railwayLocationMaster.objects.filter(Q(location_type_desc='RAILWAY BOARD')|Q(location_type_desc='HEAD QUATER')|Q(location_type_desc='PRODUCTION UNIT')|Q(location_type_desc='PSU')|Q(location_type_desc='INSTITUTE')|Q(location_type_desc='RDSO')).values('location_code').order_by('location_code')
    list2=[]
    for i in list1:
        # print(i['location_code'],'_________')
        list2.append(i['location_code'])
    
    
    list3=models.railwayLocationMaster.objects.filter(Q(location_type_desc='DIVISION')|Q(location_type_desc='WORKSHOP')|Q(location_type_desc='OFFICE')|Q(location_type_desc='STORE')|Q(location_type_desc='CONSTRUCTION')).values('location_code','location_type').order_by('location_code')
    list4=[]
    for i in list3:
        # print(i['location_code'],'_________')
        list4.append({'location_code':i['location_code'],'location_type':i['location_type']})  

    # print("list4",list4)
        
    
    list7=models.Level_Desig.objects.exclude(delete_flag=True).all().values('designation','designation_code').order_by('designation')
    list8=[]
    for i in list7:
        # print(i['designation'],'_________')
        list8.append(i['designation'])

    # print("mydata",list2,list4,list8)
    context={'Zone':list2,'division':list4,'desi':list7}
    return render(request,"signup_hrms.html",context)

# -------------------------------------------------------------------------------

def getdiv_rly_hrms(request):
    try:
        if request.method == "GET" or request.is_ajax():
            rly=request.GET.get('rly_data_hrms')
            newrly = json.loads(rly)
            
            # dev desgitantion accoring to railway
            division=list(models.railwayLocationMaster.objects.filter(location_type_desc__in=['DIVISION','WORKSHOP'],parent_location_code=newrly).order_by('location_code').values('location_code', 'location_type').distinct('location_code'))
            if len(division) == 0:
                print("insideifdiv")
                rly_unit_code = models.railwayLocationMaster.objects.get(location_code = newrly).rly_unit_code
                desig = list(models.Level_Desig.objects.exclude(delete_flag=True).filter(rly_unit_id = rly_unit_code).values('designation','designation_code').order_by('designation'))
                print(desig)
                return JsonResponse({"desig":desig},safe = False)
            else:
                print(" inside_else")
                l=[]
                print("division list)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))",division)
                # for i in division:
                #     l.append({'location_code': i['location_code'], 'location_type':i['location_type']})

                # saud faisal
                rly_unit_code = models.railwayLocationMaster.objects.get(location_code = newrly).rly_unit_code
                desig = list(models.Level_Desig.objects.exclude(delete_flag=True).filter(rly_unit_id = rly_unit_code).values('designation','designation_code').order_by('designation'))
                print(desig)
                # print(l)    
                context={
                    'division':division,
                    "desig":desig
                } 
            
                return JsonResponse(context,safe = False)
        return JsonResponse({"success":False}, status = 400)
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="getdiv_rly_hrms",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {}) 


# # SAUD FAISAL

# def INPECTION_REPORT_RLY_WISE(request):
#     # try:
#         list1=models.railwayLocationMaster.objects.filter(Q(location_type_desc='RAILWAY BOARD')|Q(location_type_desc='HEAD QUATER')|Q(location_type_desc='PRODUCTION UNIT')|Q(location_type_desc='PSU')|Q(location_type_desc='INSTITUTE')|Q(location_type_desc='RDSO')).values('location_code').order_by('location_code')
#         list2=[]
#         for i in list1:
#             # print(i['location_code'],'_________')
#             list2.append(i['location_code'])
        
        
#         list3=models.railwayLocationMaster.objects.filter(Q(location_type_desc='DIVISION')|Q(location_type_desc='WORKSHOP')|Q(location_type_desc='OFFICE')|Q(location_type_desc='STORE')|Q(location_type_desc='CONSTRUCTION')).values('location_code','location_type').order_by('location_code')
#         list4=[]
#         for i in list3:
#             # print(i['location_code'],'_________')
#             list4.append({'location_code':i['location_code'],'location_type':i['location_type']})  

#         # print("list4",list4)
            
            
#         list5=models.departMast.objects.all().values('department_name').order_by('department_name')
#         list6=[]
#         for i in list5:
#             # print(i['department_name'],'_________')
#             list6.append(i['department_name'])
        
#         list7=models.Level_Desig.objects.exclude(delete_flag=True).all().values('designation').order_by('designation')
#         list8=[]
#         for i in list7:
#             # print(i['designation'],'_________')
#             list8.append(i['designation'])

#         if request.method== 'POST':
#             query = request.POST['query']
#             #print(query)
#             que=Q()
#             for word in query.split():
#                 que &=Q(observation__icontains=word)
            
#             des_location=m1.Item_details.objects.filter(que)
#             return render(request,'keyword_location_search.html', {'des_location':des_location})
#         else:
#             query = False
        
#         # saud faisal changes
#         puproduction_type = models.railwayLocationMaster.objects.filter(location_type__in = ['ZR','PU']).values('location_code').order_by('location_code')
#         print("puproduction_type",puproduction_type)
#         context={'zone':list2,'division':list4,'dept':list6, 'desi':list8,'puproduction_type':puproduction_type}
#         return render(request, 'INPECTION_REPORT_RLY_WISE.html',context)
#     # except Exception as e: 
#     #     try:
#     #         m1.error_Table.objects.create(fun_name="INPECTION_REPORT_RLY_WISE",user_id=request.user,err_details=str(e))
#     #     except:
#     #         print("Internal Error!!!")
#     #     return render(request, "errorspage.html", {}) 

# from django.db import connection
# def fetch_desig_ajax2(request):
#     # try:
#         if request.method == 'GET' and request.is_ajax():

#             rly_list=json.loads(request.GET.get("rly_list"))
#             datefrom=request.GET.get("datefrom")
#             dateto=request.GET.get("dateto")
#             print("mydates",datefrom,dateto)
            
#             print("rly_listrly_list",rly_list,type(rly_list))
#             puproduction_type = list(models.railwayLocationMaster.objects.filter(location_type__in = rly_list).values_list('location_code',flat = True).order_by('location_code'))
#             print(puproduction_type)
#             total_total_inspection = 0
#             total_total_closed = 0
#             total_total_open = 0
#             total_total_item = 0
#             total_total_item_pending = 0
#             total_total_item_overdue = 0
#             my_data = []
#             if datefrom and dateto:
#                 print("inside if")
#                 datefrom = datetime.strptime(datefrom,'%d-%m-%Y')
#                 dateto = datetime.strptime(dateto,'%d-%m-%Y')
#                 for i in puproduction_type:
                
#                     cursor = connection.cursor()
#                     cursor.execute(''' SELECT count( DISTINCT A.inspection_no) total_inspection
#                     FROM public.inspects_inspection_details A,
#                     public.myadmin_level_desig B,
#                     public.inspects_insp_multi_location C
#                     where A.inspection_officer_id = B.designation_code and A.status_flag!=0 and
#                             A.inspection_no = C.inspection_no_id  and C.type ='HQ' and C.item = %s and
#                             (A.inspected_on >= %s and A.inspected_on <= %s) ''',[str(i),datefrom,dateto])
#                     total_inspection = cursor.fetchall()
#                     total_total_inspection +=1
#                     cursor.close()
#                     print("total_inspection45",total_inspection[0][0])

#                     # total_closed
#                     cursor = connection.cursor()
#                     cursor.execute(''' SELECT count( DISTINCT A.inspection_no) total_closed
#                     FROM public.inspects_inspection_details A,
#                     public.myadmin_level_desig B,
#                     public.inspects_insp_multi_location C
#                     where A.inspection_officer_id = B.designation_code and A.status_flag=5 and
#                             A.inspection_no = C.inspection_no_id  and C.type ='HQ' and C.item = %s and
#                             A.inspected_on >= %s and A.inspected_on <= %s ''',[str(i),datefrom,dateto])
#                     total_closed = cursor.fetchall()
#                     total_total_closed +=1
#                     cursor.close()

#                     # pending
#                     cursor = connection.cursor()
#                     cursor.execute(''' SELECT count( DISTINCT A.inspection_no) total_open
#                     FROM public.inspects_inspection_details A,
#                     public.myadmin_level_desig B,
#                     public.inspects_insp_multi_location C
#                     where A.inspection_officer_id = B.designation_code and A.status_flag between 1 and 4 and
#                             A.inspection_no = C.inspection_no_id  and C.type ='HQ' and C.item = %s and
#                             A.inspected_on >= %s and A.inspected_on <= %s ''',[str(i),datefrom,dateto])
#                     total_open = cursor.fetchall()
#                     total_total_open +=1
#                     cursor.close()

#                     # total_item
#                     cursor = connection.cursor()
#                     cursor.execute(''' SELECT count( DISTINCT D.item_no) total_item
#                     FROM public.inspects_inspection_details A,
#                     public.myadmin_level_desig B,
#                     public.inspects_insp_multi_location C,
#                     public.inspects_item_details D
#                     where A.inspection_officer_id = B.designation_code and A.status_flag>0 and
#                             A.inspection_no = C.inspection_no_id  and C.type ='HQ' and
#                     A.inspection_no = D.inspection_no_id and D.status_flag >0 and C.item = %s and
#                             A.inspected_on >= %s and A.inspected_on <= %s  ''',[str(i),datefrom,dateto])
#                     total_item = cursor.fetchall()
#                     total_total_item +=1
#                     cursor.close()

#                     # total_item_pending
#                     cursor = connection.cursor()
#                     cursor.execute(''' SELECT count( DISTINCT D.item_no) total_item_pending
#                     FROM public.inspects_inspection_details A,
#                     public.myadmin_level_desig B,
#                     public.inspects_insp_multi_location C,
#                     public.inspects_item_details D
#                     where A.inspection_officer_id = B.designation_code and A.status_flag between 1 and 4 and
#                             A.inspection_no = C.inspection_no_id  and C.type ='HQ' and
#                     A.inspection_no = D.inspection_no_id and D.status_flag between 1 and 4 and C.item = %s and
#                             A.inspected_on >= %s and A.inspected_on <= %s ''',[str(i),datefrom,dateto])
#                     total_item_pending = cursor.fetchall()
#                     total_total_item_pending +=1
#                     cursor.close()


#                     # total_item_overdue
#                     cursor = connection.cursor()
#                     cursor.execute(''' SELECT count( DISTINCT D.item_no) total_item_overdue
#                     FROM public.inspects_inspection_details A,
#                     public.myadmin_level_desig B,
#                     public.inspects_insp_multi_location C,
#                     public.inspects_item_details D
#                     where A.inspection_officer_id = B.designation_code and A.status_flag between 1 and 4 and
#                             A.inspection_no = C.inspection_no_id  and C.type ='HQ' and
#                     A.inspection_no = D.inspection_no_id and D.status_flag between 1 and 4 and
#                             D.target_date < now() and C.item = %s and
#                             A.inspected_on >= %s and A.inspected_on <= %s  ''',[str(i),datefrom,dateto])
#                     total_item_overdue = cursor.fetchall()
#                     total_total_item_overdue +=1
#                     cursor.close()

#                     my_data.append({'rly':i,"total_inspection":total_inspection[0][0],"total_closed":total_closed[0][0],
#                     "total_open":total_open[0][0],"total_item":total_item[0][0],"total_item_pending":total_item_pending[0][0],'total_item_overdue':total_item_overdue[0][0]})
#             else:
#                 print("inside else")
#                 for i in puproduction_type:
#                     # total_inspection
#                     # print(i)
#                     cursor = connection.cursor()
#                     cursor.execute(''' SELECT count( DISTINCT A.inspection_no) total_inspection
#                     FROM public.inspects_inspection_details A,
#                     public.myadmin_level_desig B,
#                     public.inspects_insp_multi_location C
#                     where A.inspection_officer_id = B.designation_code and A.status_flag!=0 and
#                             A.inspection_no = C.inspection_no_id  and C.type ='HQ' and C.item = %s ''',[str(i)])
#                     total_inspection = cursor.fetchall()
#                     total_total_inspection +=1
#                     cursor.close()
#                     print("total_inspection45",total_inspection[0][0])

#                     # total_closed
#                     cursor = connection.cursor()
#                     cursor.execute(''' SELECT count( DISTINCT A.inspection_no) total_closed
#                     FROM public.inspects_inspection_details A,
#                     public.myadmin_level_desig B,
#                     public.inspects_insp_multi_location C
#                     where A.inspection_officer_id = B.designation_code and A.status_flag=5 and
#                             A.inspection_no = C.inspection_no_id  and C.type ='HQ' and C.item = %s ''',[str(i)])
#                     total_closed = cursor.fetchall()
#                     total_total_closed +=1
#                     cursor.close()

#                     # pending
#                     cursor = connection.cursor()
#                     cursor.execute(''' SELECT count( DISTINCT A.inspection_no) total_open
#                     FROM public.inspects_inspection_details A,
#                     public.myadmin_level_desig B,
#                     public.inspects_insp_multi_location C
#                     where A.inspection_officer_id = B.designation_code and A.status_flag between 1 and 4 and
#                             A.inspection_no = C.inspection_no_id  and C.type ='HQ' and C.item = %s ''',[str(i)])
#                     total_open = cursor.fetchall()
#                     total_total_open +=1
#                     cursor.close()

#                     # total_item
#                     cursor = connection.cursor()
#                     cursor.execute(''' SELECT count( DISTINCT D.item_no) total_item
#                     FROM public.inspects_inspection_details A,
#                     public.myadmin_level_desig B,
#                     public.inspects_insp_multi_location C,
#                     public.inspects_item_details D
#                     where A.inspection_officer_id = B.designation_code and A.status_flag>0 and
#                             A.inspection_no = C.inspection_no_id  and C.type ='HQ' and
#                     A.inspection_no = D.inspection_no_id and D.status_flag >0 and C.item = %s ''',[str(i)])
#                     total_item = cursor.fetchall()
#                     total_total_item +=1
#                     cursor.close()

#                     # total_item_pending
#                     cursor = connection.cursor()
#                     cursor.execute(''' SELECT count( DISTINCT D.item_no) total_item_pending
#                     FROM public.inspects_inspection_details A,
#                     public.myadmin_level_desig B,
#                     public.inspects_insp_multi_location C,
#                     public.inspects_item_details D
#                     where A.inspection_officer_id = B.designation_code and A.status_flag between 1 and 4 and
#                             A.inspection_no = C.inspection_no_id  and C.type ='HQ' and
#                     A.inspection_no = D.inspection_no_id and D.status_flag between 1 and 4 and C.item = %s ''',[str(i)])
#                     total_item_pending = cursor.fetchall()
#                     total_total_item_pending +=1
#                     cursor.close()


#                     # total_item_overdue
#                     cursor = connection.cursor()
#                     cursor.execute(''' SELECT count( DISTINCT D.item_no) total_item_overdue
#                     FROM public.inspects_inspection_details A,
#                     public.myadmin_level_desig B,
#                     public.inspects_insp_multi_location C,
#                     public.inspects_item_details D
#                     where A.inspection_officer_id = B.designation_code and A.status_flag between 1 and 4 and
#                             A.inspection_no = C.inspection_no_id  and C.type ='HQ' and
#                     A.inspection_no = D.inspection_no_id and D.status_flag between 1 and 4 and
#                             D.target_date < now() and C.item = %s ''',[str(i)])
#                     total_item_overdue = cursor.fetchall()
#                     total_total_item_overdue +=1
#                     cursor.close()

#                     my_data.append({'rly':i,"total_inspection":total_inspection[0][0],"total_closed":total_closed[0][0],
#                     "total_open":total_open[0][0],"total_item":total_item[0][0],"total_item_pending":total_item_pending[0][0],'total_item_overdue':total_item_overdue[0][0]})
                    


#             return JsonResponse({'rly_list':my_data,'total_total_inspection':total_total_inspection,"total_total_closed":total_total_closed,
#             "total_total_open":total_total_open,"total_total_item":total_total_item,"total_total_item_pending":total_total_item_pending,
#             "total_total_item_overdue":total_total_item_overdue}, safe=False)
#         return JsonResponse({'success':False}, status=400)
     
#     # except Exception as e: 
#     #     try:
#     #         m1.error_Table.objects.create(fun_name="fetch_desig_ajax",user_id=request.user,err_details=str(e))
#     #     except:
#     #         print("Internal Error!!!")
#     #     return render(request, "errorspage.html", {})




# def INPECTION_REPORT_RLY_WISE(request):
#     # try:
#         list1=models.railwayLocationMaster.objects.filter(Q(location_type_desc='RAILWAY BOARD')|Q(location_type_desc='HEAD QUATER')|Q(location_type_desc='PRODUCTION UNIT')|Q(location_type_desc='PSU')|Q(location_type_desc='INSTITUTE')|Q(location_type_desc='RDSO')).values('location_code').order_by('location_code')
#         list2=[]
#         for i in list1:
#             # print(i['location_code'],'_________')
#             list2.append(i['location_code'])
        
        
#         list3=models.railwayLocationMaster.objects.filter(Q(location_type_desc='DIVISION')|Q(location_type_desc='WORKSHOP')|Q(location_type_desc='OFFICE')|Q(location_type_desc='STORE')|Q(location_type_desc='CONSTRUCTION')).values('location_code','location_type').order_by('location_code')
#         list4=[]
#         for i in list3:
#             # print(i['location_code'],'_________')
#             list4.append({'location_code':i['location_code'],'location_type':i['location_type']})  

#         # print("list4",list4)
            
            
#         list5=models.departMast.objects.all().values('department_name').order_by('department_name')
#         list6=[]
#         for i in list5:
#             # print(i['department_name'],'_________')
#             list6.append(i['department_name'])
        
#         list7=models.Level_Desig.objects.exclude(delete_flag=True).all().values('designation').order_by('designation')
#         list8=[]
#         for i in list7:
#             # print(i['designation'],'_________')
#             list8.append(i['designation'])

#         if request.method== 'POST':
#             query = request.POST['query']
#             #print(query)
#             que=Q()
#             for word in query.split():
#                 que &=Q(observation__icontains=word)
            
#             des_location=m1.Item_details.objects.filter(que)
#             return render(request,'keyword_location_search.html', {'des_location':des_location})
#         else:
#             query = False
        
#         # saud faisal changes
#         puproduction_type = models.railwayLocationMaster.objects.filter(location_type__in = ['ZR','PU']).values('location_code').order_by('location_code')
#         print("puproduction_type",puproduction_type)
#         context={'zone':list2,'division':list4,'dept':list6, 'desi':list8,'puproduction_type':puproduction_type}
#         return render(request, 'INPECTION_REPORT_RLY_WISE.html',context)
#     # except Exception as e: 
#     #     try:
#     #         m1.error_Table.objects.create(fun_name="INPECTION_REPORT_RLY_WISE",user_id=request.user,err_details=str(e))
#     #     except:
#     #         print("Internal Error!!!")
#     #     return render(request, "errorspage.html", {}) 

# from django.db import connection
# def fetch_desig_ajax2(request):
#     # try:
#         if request.method == 'GET' and request.is_ajax():

#             rly_list=json.loads(request.GET.get("rly_list"))
#             datefrom=request.GET.get("datefrom")
#             dateto=request.GET.get("dateto")
#             print("mydates",datefrom,dateto)
            
#             print("rly_listrly_list",rly_list,type(rly_list))
#             puproduction_type = list(models.railwayLocationMaster.objects.filter(location_type__in = rly_list).values_list('location_code',flat = True).order_by('location_code'))
#             print(puproduction_type)
#             total_total_inspection = 0
#             total_total_closed = 0
#             total_total_open = 0
#             total_total_item = 0
#             total_total_item_pending = 0
#             total_total_item_overdue = 0
#             my_data = []
#             if datefrom and dateto:
#                 print("inside if")
#                 datefrom = datetime.strptime(datefrom,'%d-%m-%Y')
#                 dateto = datetime.strptime(dateto,'%d-%m-%Y')
#                 for i in puproduction_type:
                
#                     cursor = connection.cursor()
#                     cursor.execute(''' SELECT count( DISTINCT A.inspection_no) total_inspection
#                     FROM public.inspects_inspection_details A,
#                     public.myadmin_level_desig B,
#                     public.inspects_insp_multi_location C
#                     where A.inspection_officer_id = B.designation_code and A.status_flag!=0 and
#                             A.inspection_no = C.inspection_no_id  and C.type ='HQ' and C.item = %s and
#                             (A.inspected_on >= %s and A.inspected_on <= %s) ''',[str(i),datefrom,dateto])
#                     total_inspection = cursor.fetchall()
#                     total_total_inspection +=total_inspection[0][0]
#                     cursor.close()
#                     # print("total_inspection45",total_inspection[0][0])

#                     # total_closed
#                     cursor = connection.cursor()
#                     cursor.execute(''' SELECT count( DISTINCT A.inspection_no) total_closed
#                     FROM public.inspects_inspection_details A,
#                     public.myadmin_level_desig B,
#                     public.inspects_insp_multi_location C
#                     where A.inspection_officer_id = B.designation_code and A.status_flag=5 and
#                             A.inspection_no = C.inspection_no_id  and C.type ='HQ' and C.item = %s and
#                             A.inspected_on >= %s and A.inspected_on <= %s ''',[str(i),datefrom,dateto])
#                     total_closed = cursor.fetchall()
#                     total_total_closed +=total_closed[0][0]
#                     cursor.close()

#                     # pending
#                     cursor = connection.cursor()
#                     cursor.execute(''' SELECT count( DISTINCT A.inspection_no) total_open
#                     FROM public.inspects_inspection_details A,
#                     public.myadmin_level_desig B,
#                     public.inspects_insp_multi_location C
#                     where A.inspection_officer_id = B.designation_code and A.status_flag between 1 and 4 and
#                             A.inspection_no = C.inspection_no_id  and C.type ='HQ' and C.item = %s and
#                             A.inspected_on >= %s and A.inspected_on <= %s ''',[str(i),datefrom,dateto])
#                     total_open = cursor.fetchall()
#                     total_total_open +=total_open[0][0]
#                     cursor.close()

#                     # total_item
#                     cursor = connection.cursor()
#                     cursor.execute(''' SELECT count( DISTINCT D.item_no) total_item
#                     FROM public.inspects_inspection_details A,
#                     public.myadmin_level_desig B,
#                     public.inspects_insp_multi_location C,
#                     public.inspects_item_details D
#                     where A.inspection_officer_id = B.designation_code and A.status_flag>0 and
#                             A.inspection_no = C.inspection_no_id  and C.type ='HQ' and
#                     A.inspection_no = D.inspection_no_id and D.status_flag >0 and C.item = %s and
#                             A.inspected_on >= %s and A.inspected_on <= %s  ''',[str(i),datefrom,dateto])
#                     total_item = cursor.fetchall()
#                     total_total_item +=total_item[0][0]
#                     cursor.close()

#                     # total_item_pending
#                     cursor = connection.cursor()
#                     cursor.execute(''' SELECT count( DISTINCT D.item_no) total_item_pending
#                     FROM public.inspects_inspection_details A,
#                     public.myadmin_level_desig B,
#                     public.inspects_insp_multi_location C,
#                     public.inspects_item_details D
#                     where A.inspection_officer_id = B.designation_code and A.status_flag between 1 and 4 and
#                             A.inspection_no = C.inspection_no_id  and C.type ='HQ' and
#                     A.inspection_no = D.inspection_no_id and D.status_flag between 1 and 4 and C.item = %s and
#                             A.inspected_on >= %s and A.inspected_on <= %s ''',[str(i),datefrom,dateto])
#                     total_item_pending = cursor.fetchall()
#                     total_total_item_pending +=total_item_pending[0][0]
#                     cursor.close()


#                     # total_item_overdue
#                     cursor = connection.cursor()
#                     cursor.execute(''' SELECT count( DISTINCT D.item_no) total_item_overdue
#                     FROM public.inspects_inspection_details A,
#                     public.myadmin_level_desig B,
#                     public.inspects_insp_multi_location C,
#                     public.inspects_item_details D
#                     where A.inspection_officer_id = B.designation_code and A.status_flag between 1 and 4 and
#                             A.inspection_no = C.inspection_no_id  and C.type ='HQ' and
#                     A.inspection_no = D.inspection_no_id and D.status_flag between 1 and 4 and
#                             D.target_date < now() and C.item = %s and
#                             A.inspected_on >= %s and A.inspected_on <= %s  ''',[str(i),datefrom,dateto])
#                     total_item_overdue = cursor.fetchall()
#                     total_total_item_overdue +=total_item_overdue[0][0]
#                     cursor.close()

#                     my_data.append({'rly':i,"total_inspection":total_inspection[0][0],"total_closed":total_closed[0][0],
#                     "total_open":total_open[0][0],"total_item":total_item[0][0],"total_item_pending":total_item_pending[0][0],'total_item_overdue':total_item_overdue[0][0]})
#             else:
#                 print("inside else")
#                 for i in puproduction_type:
#                     # total_inspection
#                     # print(i)
#                     cursor = connection.cursor()
#                     cursor.execute(''' SELECT count( DISTINCT A.inspection_no) total_inspection
#                     FROM public.inspects_inspection_details A,
#                     public.myadmin_level_desig B,
#                     public.inspects_insp_multi_location C
#                     where A.inspection_officer_id = B.designation_code and A.status_flag!=0 and
#                             A.inspection_no = C.inspection_no_id  and C.type ='HQ' and C.item = %s ''',[str(i)])
#                     total_inspection = cursor.fetchall()
#                     total_total_inspection +=total_inspection[0][0]
#                     cursor.close()
#                     print("total_inspection45",total_inspection[0][0])

#                     # total_closed
#                     cursor = connection.cursor()
#                     cursor.execute(''' SELECT count( DISTINCT A.inspection_no) total_closed
#                     FROM public.inspects_inspection_details A,
#                     public.myadmin_level_desig B,
#                     public.inspects_insp_multi_location C
#                     where A.inspection_officer_id = B.designation_code and A.status_flag=5 and
#                             A.inspection_no = C.inspection_no_id  and C.type ='HQ' and C.item = %s ''',[str(i)])
#                     total_closed = cursor.fetchall()
#                     total_total_closed +=total_closed[0][0]
#                     cursor.close()

#                     # pending
#                     cursor = connection.cursor()
#                     cursor.execute(''' SELECT count( DISTINCT A.inspection_no) total_open
#                     FROM public.inspects_inspection_details A,
#                     public.myadmin_level_desig B,
#                     public.inspects_insp_multi_location C
#                     where A.inspection_officer_id = B.designation_code and A.status_flag between 1 and 4 and
#                             A.inspection_no = C.inspection_no_id  and C.type ='HQ' and C.item = %s ''',[str(i)])
#                     total_open = cursor.fetchall()
#                     total_total_open +=total_open[0][0]
#                     cursor.close()

#                     # total_item
#                     cursor = connection.cursor()
#                     cursor.execute(''' SELECT count( DISTINCT D.item_no) total_item
#                     FROM public.inspects_inspection_details A,
#                     public.myadmin_level_desig B,
#                     public.inspects_insp_multi_location C,
#                     public.inspects_item_details D
#                     where A.inspection_officer_id = B.designation_code and A.status_flag>0 and
#                             A.inspection_no = C.inspection_no_id  and C.type ='HQ' and
#                     A.inspection_no = D.inspection_no_id and D.status_flag >0 and C.item = %s ''',[str(i)])
#                     total_item = cursor.fetchall()
#                     total_total_item +=total_item[0][0]
#                     cursor.close()

#                     # total_item_pending
#                     cursor = connection.cursor()
#                     cursor.execute(''' SELECT count( DISTINCT D.item_no) total_item_pending
#                     FROM public.inspects_inspection_details A,
#                     public.myadmin_level_desig B,
#                     public.inspects_insp_multi_location C,
#                     public.inspects_item_details D
#                     where A.inspection_officer_id = B.designation_code and A.status_flag between 1 and 4 and
#                             A.inspection_no = C.inspection_no_id  and C.type ='HQ' and
#                     A.inspection_no = D.inspection_no_id and D.status_flag between 1 and 4 and C.item = %s ''',[str(i)])
#                     total_item_pending = cursor.fetchall()
#                     total_total_item_pending +=total_item_pending[0][0]
#                     cursor.close()


#                     # total_item_overdue
#                     cursor = connection.cursor()
#                     cursor.execute(''' SELECT count( DISTINCT D.item_no) total_item_overdue
#                     FROM public.inspects_inspection_details A,
#                     public.myadmin_level_desig B,
#                     public.inspects_insp_multi_location C,
#                     public.inspects_item_details D
#                     where A.inspection_officer_id = B.designation_code and A.status_flag between 1 and 4 and
#                             A.inspection_no = C.inspection_no_id  and C.type ='HQ' and
#                     A.inspection_no = D.inspection_no_id and D.status_flag between 1 and 4 and
#                             D.target_date < now() and C.item = %s ''',[str(i)])
#                     total_item_overdue = cursor.fetchall()
#                     total_total_item_overdue +=total_item_overdue[0][0]
#                     cursor.close()

#                     my_data.append({'rly':i,"total_inspection":total_inspection[0][0],"total_closed":total_closed[0][0],
#                     "total_open":total_open[0][0],"total_item":total_item[0][0],"total_item_pending":total_item_pending[0][0],'total_item_overdue':total_item_overdue[0][0]})
                    

#             print("mydata",total_total_item_overdue)
#             return JsonResponse({'rly_list':my_data,'total_total_inspection':total_total_inspection,"total_total_closed":total_total_closed,
#             "total_total_open":total_total_open,"total_total_item":total_total_item,"total_total_item_pending":total_total_item_pending,
#             "total_total_item_overdue":total_total_item_overdue}, safe=False)
#         return JsonResponse({'success':False}, status=400)
     
#     # except Exception as e: 
#     #     try:
#     #         m1.error_Table.objects.create(fun_name="fetch_desig_ajax",user_id=request.user,err_details=str(e))
#     #     except:
#     #         print("Internal Error!!!")
#     #     return render(request, "errorspage.html", {})

# INPECTION_REPORT_RLY_WISE

# def inspection_report(request):
#     try:
#         list1=models.railwayLocationMaster.objects.filter(Q(location_type_desc='RAILWAY BOARD')|Q(location_type_desc='HEAD QUATER')|Q(location_type_desc='PRODUCTION UNIT')|Q(location_type_desc='PSU')|Q(location_type_desc='INSTITUTE')|Q(location_type_desc='RDSO')).values('location_code').order_by('location_code')
#         list2=[]
#         for i in list1:
#             # print(i['location_code'],'_________')
#             list2.append(i['location_code'])
        
        
#         list3=models.railwayLocationMaster.objects.filter(Q(location_type_desc='DIVISION')|Q(location_type_desc='WORKSHOP')|Q(location_type_desc='OFFICE')|Q(location_type_desc='STORE')|Q(location_type_desc='CONSTRUCTION')).values('location_code','location_type').order_by('location_code')
#         list4=[]
#         for i in list3:
#             # print(i['location_code'],'_________')
#             list4.append({'location_code':i['location_code'],'location_type':i['location_type']})  

#         # print("list4",list4)
            
            
#         list5=models.departMast.objects.all().values('department_name').order_by('department_name')
#         list6=[]
#         for i in list5:
#             # print(i['department_name'],'_________')
#             list6.append(i['department_name'])
        
#         list7=models.Level_Desig.objects.exclude(delete_flag=True).all().values('designation').order_by('designation')
#         list8=[]
#         for i in list7:
#             # print(i['designation'],'_________')
#             list8.append(i['designation'])

#         if request.method== 'POST':
#             query = request.POST['query']
#             #print(query)
#             que=Q()
#             for word in query.split():
#                 que &=Q(observation__icontains=word)
            
#             des_location=m1.Item_details.objects.filter(que)
#             return render(request,'keyword_location_search.html', {'des_location':des_location})
#         else:
#             query = False
        
#         # saud faisal changes
#         puproduction_type = models.railwayLocationMaster.objects.filter(location_type__in = ['ZR','PU']).values('location_code').order_by('location_code')
#         # print("puproduction_type",puproduction_type)
#         context={'zone':list2,'division':list4,'dept':list6, 'desi':list8,'puproduction_type':puproduction_type}
#         return render(request, 'INPECTION_REPORT_RLY_WISE.html',context)
#     except Exception as e: 
#         try:
#             m1.error_Table.objects.create(fun_name="INPECTION_REPORT_RLY_WISE",user_id=request.user,err_details=str(e))
#         except:
#             print("Internal Error!!!")
#         return render(request, "errorspage.html", {}) 

# from django.db import connection

# def fetch_desig_ajax2(request):
#     try:
#         if request.method == 'GET' and request.is_ajax():

#             rly_list=json.loads(request.GET.get("rly_list"))
#             datefrom=request.GET.get("datefrom")
#             dateto=request.GET.get("dateto")
#             # print("mydates",datefrom,dateto)
            
#             # print("rly_listrly_list",rly_list,type(rly_list))
#             puproduction_type = list(models.railwayLocationMaster.objects.filter(location_type__in = rly_list).values_list('location_code',flat = True).order_by('location_code'))
#             # print(puproduction_type)
#             total_total_inspection = 0
#             total_total_closed = 0
#             total_total_open = 0
#             total_total_item = 0
#             total_total_item_pending = 0
#             total_total_item_overdue = 0
#             my_data = []
#             if datefrom and dateto:
#                 # print("inside if")
#                 datefrom = datetime.strptime(datefrom,'%d-%m-%Y')
#                 dateto = datetime.strptime(dateto,'%d-%m-%Y')
#                 for i in puproduction_type:
                
#                     cursor = connection.cursor()
#                     cursor.execute(''' SELECT count( DISTINCT A.inspection_no) total_inspection
#                     FROM public.inspects_inspection_details A,
#                     public.myadmin_level_desig B,
#                     public.inspects_insp_multi_location C
#                     where A.inspection_officer_id = B.designation_code and A.status_flag!=0 and
#                             A.inspection_no = C.inspection_no_id  and C.type ='HQ' and C.item = %s and
#                             (A.inspected_on >= %s and A.inspected_on <= %s) ''',[str(i),datefrom,dateto])
#                     total_inspection = cursor.fetchall()
#                     total_total_inspection +=total_inspection[0][0]
#                     cursor.close()
#                     # print("total_inspection45",total_inspection[0][0])

#                     # total_closed
#                     cursor = connection.cursor()
#                     cursor.execute(''' SELECT count( DISTINCT A.inspection_no) total_closed
#                     FROM public.inspects_inspection_details A,
#                     public.myadmin_level_desig B,
#                     public.inspects_insp_multi_location C
#                     where A.inspection_officer_id = B.designation_code and A.status_flag=4 and
#                             A.inspection_no = C.inspection_no_id  and C.type ='HQ' and C.item = %s and
#                             A.inspected_on >= %s and A.inspected_on <= %s ''',[str(i),datefrom,dateto])
#                     total_closed = cursor.fetchall()
#                     total_total_closed +=total_closed[0][0]
#                     cursor.close()

#                     # pending
#                     cursor = connection.cursor()
#                     cursor.execute(''' SELECT count( DISTINCT A.inspection_no) total_open
#                     FROM public.inspects_inspection_details A,
#                     public.myadmin_level_desig B,
#                     public.inspects_insp_multi_location C
#                     where A.inspection_officer_id = B.designation_code and A.status_flag between 1 and 3 and
#                             A.inspection_no = C.inspection_no_id  and C.type ='HQ' and C.item = %s and
#                             A.inspected_on >= %s and A.inspected_on <= %s ''',[str(i),datefrom,dateto])
#                     total_open = cursor.fetchall()
#                     total_total_open +=total_open[0][0]
#                     cursor.close()

#                     # total_item
#                     cursor = connection.cursor()
                    
#                     cursor.execute(''' SELECT count( distinct B.item_no_id) total_item
#                     FROM public.inspects_inspection_details A,
#                 	 public.inspects_marked_officers B,
#                     public.inspects_insp_multi_location C,
#                     public.inspects_item_details D
#                     where  A.status_flag>0 and
# 						B.item_no_id=D.item_no and
#                             A.inspection_no = C.inspection_no_id  and C.type ='HQ' and
#                     A.inspection_no = D.inspection_no_id and D.status_flag >0 and C.item = %s and
#                     #         A.inspected_on >= %s and A.inspected_on <= %s  ''',[str(i),datefrom,dateto])

                    
#                     total_item = cursor.fetchall()
#                     total_total_item +=total_item[0][0]
#                     cursor.close()

#                     # total_item_pending
#                     cursor = connection.cursor()
#                     cursor.execute(''' SELECT count( distinct B.item_no_id) total_item
#                     FROM public.inspects_inspection_details A,
#                 	 public.inspects_marked_officers B,
#                     public.inspects_insp_multi_location C,
#                     public.inspects_item_details D
#                     where  A.status_flag between 1 and 3 and
# 						B.item_no_id=D.item_no and
#                             A.inspection_no = C.inspection_no_id  and C.type ='HQ' and
#                     A.inspection_no = D.inspection_no_id and D.status_flag between 1 and 3 and C.item =  %s and
#                             A.inspected_on >= %s and A.inspected_on <= %s ''',[str(i),datefrom,dateto])
#                     total_item_pending = cursor.fetchall()
#                     total_total_item_pending +=total_item_pending[0][0]
#                     cursor.close()


#                     # total_item_overdue
#                     cursor = connection.cursor()
#                     cursor.execute(''' SELECT count( distinct B.item_no_id) total_item
#                     FROM public.inspects_inspection_details A,
#                 	 public.inspects_marked_officers B,
#                     public.inspects_insp_multi_location C,
#                     public.inspects_item_details D
#                     where B.item_no_id=D.item_no and A.status_flag between 1 and 4 and
#                             A.inspection_no = C.inspection_no_id  and C.type ='HQ' and
#                     A.inspection_no = D.inspection_no_id and D.status_flag between 1 and 3 and
#                             D.target_date < now() and C.item = %s and
#                             A.inspected_on >= %s and A.inspected_on <= %s  ''',[str(i),datefrom,dateto])
#                     total_item_overdue = cursor.fetchall()
#                     total_total_item_overdue +=total_item_overdue[0][0]
#                     cursor.close()

#                     my_data.append({'rly':i,"total_inspection":total_inspection[0][0],"total_closed":total_closed[0][0],
#                     "total_open":total_open[0][0],"total_item":total_item[0][0],"total_item_pending":total_item_pending[0][0],'total_item_overdue':total_item_overdue[0][0]})
#             else:
#                 # print("inside else")
#                 for i in puproduction_type:
#                     # total_inspection
#                     # print(i)
#                     cursor = connection.cursor()
#                     cursor.execute(''' SELECT count( DISTINCT A.inspection_no) total_inspection
#                     FROM public.inspects_inspection_details A,
#                     public.myadmin_level_desig B,
#                     public.inspects_insp_multi_location C
#                     where A.inspection_officer_id = B.designation_code and A.status_flag!=0 and
#                             A.inspection_no = C.inspection_no_id  and C.type ='HQ' and C.item = %s''',[str(i)])
#                     total_inspection = cursor.fetchall()
#                     total_total_inspection +=total_inspection[0][0]
#                     cursor.close()
#                     # print("total_inspection45",total_inspection[0][0])

#                     # total_closed
#                     cursor = connection.cursor()
#                     cursor.execute(''' SELECT count( DISTINCT A.inspection_no) total_closed
#                     FROM public.inspects_inspection_details A,
#                     public.myadmin_level_desig B,
#                     public.inspects_insp_multi_location C
#                     where A.inspection_officer_id = B.designation_code and A.status_flag=4 and
#                             A.inspection_no = C.inspection_no_id  and C.type ='HQ' and C.item = %s ''',[str(i)])
#                     total_closed = cursor.fetchall()
#                     total_total_closed +=total_closed[0][0]
#                     cursor.close()

#                     # pending
#                     cursor = connection.cursor()
#                     cursor.execute(''' SELECT count( DISTINCT A.inspection_no) total_open
#                     FROM public.inspects_inspection_details A,
#                     public.myadmin_level_desig B,
#                     public.inspects_insp_multi_location C
#                     where A.inspection_officer_id = B.designation_code and A.status_flag between 1 and 3 and
#                             A.inspection_no = C.inspection_no_id  and C.type ='HQ' and C.item = %s ''',[str(i)])
#                     total_open = cursor.fetchall()
#                     total_total_open +=total_open[0][0]
#                     cursor.close()

#                     # total_item
#                     cursor = connection.cursor()
#                     cursor.execute('''SELECT count( distinct B.item_no_id) total_item
#                     FROM public.inspects_inspection_details A,
#                 	 public.inspects_marked_officers B,
#                     public.inspects_insp_multi_location C,
#                     public.inspects_item_details D
#                     where  A.status_flag>0 and
# 						B.item_no_id=D.item_no and
#                             A.inspection_no = C.inspection_no_id  and C.type ='HQ' and
#                     A.inspection_no = D.inspection_no_id and D.status_flag >0 and C.item = %s ''',[str(i)])
#                     total_item = cursor.fetchall()
#                     total_total_item +=total_item[0][0]
#                     cursor.close()

#                     # total_item_pending
#                     cursor = connection.cursor()
#                     cursor.execute(''' SELECT count( distinct B.item_no_id) total_item
#                     FROM public.inspects_inspection_details A,
#                 	 public.inspects_marked_officers B,
#                     public.inspects_insp_multi_location C,
#                     public.inspects_item_details D
#                     where  A.status_flag between 1 and 3 and
# 						B.item_no_id=D.item_no and
#                             A.inspection_no = C.inspection_no_id  and C.type ='HQ' and
#                     A.inspection_no = D.inspection_no_id and D.status_flag between 1 and 3 and C.item =  %s ''',[str(i)])
#                     total_item_pending = cursor.fetchall()
#                     total_total_item_pending +=total_item_pending[0][0]
#                     cursor.close()


#                     # total_item_overdue
#                     cursor = connection.cursor()
#                     cursor.execute(''' SELECT count( distinct B.item_no_id) total_item
#                     FROM public.inspects_inspection_details A,
#                 	 public.inspects_marked_officers B,
#                     public.inspects_insp_multi_location C,
#                     public.inspects_item_details D
#                     where B.item_no_id=D.item_no and A.status_flag between 1 and 4 and
#                             A.inspection_no = C.inspection_no_id  and C.type ='HQ' and
#                     A.inspection_no = D.inspection_no_id and D.status_flag between 1 and 3 and
#                             D.target_date < now() and C.item = %s ''',[str(i)])
#                     total_item_overdue = cursor.fetchall()
#                     total_total_item_overdue +=total_item_overdue[0][0]
#                     cursor.close()

#                     my_data.append({'rly':i,"total_inspection":total_inspection[0][0],"total_closed":total_closed[0][0],
#                     "total_open":total_open[0][0],"total_item":total_item[0][0],"total_item_pending":total_item_pending[0][0],'total_item_overdue':total_item_overdue[0][0]})
                    

#             # print("mydata",total_total_item_overdue)
#             return JsonResponse({'rly_list':my_data,'total_total_inspection':total_total_inspection,"total_total_closed":total_total_closed,
#             "total_total_open":total_total_open,"total_total_item":total_total_item,"total_total_item_pending":total_total_item_pending,
#             "total_total_item_overdue":total_total_item_overdue}, safe=False)
#         return JsonResponse({'success':False}, status=400)
     
#     except Exception as e: 
#         try:
#             m1.error_Table.objects.create(fun_name="fetch_desig_ajax",user_id=request.user,err_details=str(e))
#         except:
#             print("Internal Error!!!")
#         return render(request, "errorspage.html", {})

# new saud faisal april_23
	

	
def inspection_report(request):
    try:
        list1=models.railwayLocationMaster.objects.filter(Q(location_type_desc='RAILWAY BOARD')|Q(location_type_desc='HEAD QUATER')|Q(location_type_desc='PRODUCTION UNIT')|Q(location_type_desc='PSU')|Q(location_type_desc='INSTITUTE')|Q(location_type_desc='RDSO')).values('location_code').order_by('location_code')
        list2=[]
        for i in list1:
            # print(i['location_code'],'_________')
            list2.append(i['location_code'])
        
        
        list3=models.railwayLocationMaster.objects.filter(Q(location_type_desc='DIVISION')|Q(location_type_desc='WORKSHOP')|Q(location_type_desc='OFFICE')|Q(location_type_desc='STORE')|Q(location_type_desc='CONSTRUCTION')).values('location_code','location_type').order_by('location_code')
        list4=[]
        for i in list3:
            # print(i['location_code'],'_________')
            list4.append({'location_code':i['location_code'],'location_type':i['location_type']})  

        # print("list4",list4)
            
            
        list5=models.departMast.objects.all().values('department_name').order_by('department_name')
        list6=[]
        for i in list5:
            # print(i['department_name'],'_________')
            list6.append(i['department_name'])
        
        list7=models.Level_Desig.objects.exclude(delete_flag=True).all().values('designation').order_by('designation')
        list8=[]
        for i in list7:
            # print(i['designation'],'_________')
            list8.append(i['designation'])

        if request.method== 'POST':
            query = request.POST['query']
            #print(query)
            que=Q()
            for word in query.split():
                que &=Q(observation__icontains=word)
            
            des_location=m1.Item_details.objects.filter(que)
            return render(request,'keyword_location_search.html', {'des_location':des_location})
        else:
            query = False
        
        # saud faisal changes
        puproduction_type = models.railwayLocationMaster.objects.filter(location_type__in = ['ZR','PU']).values('location_code').order_by('location_code')
        # print("puproduction_type",puproduction_type)
        app_date = date(2022,9,11)
        app_date = app_date.strftime('%d-%m-%Y')

        curr_date = date.today()
        curr_date = curr_date.strftime('%d-%m-%Y')
        context={'zone':list2,'division':list4,'dept':list6, 'desi':list8,'puproduction_type':puproduction_type,'app_date':app_date,"curr_date":curr_date}
        return render(request, 'INPECTION_REPORT_RLY_WISE.html',context)
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="INPECTION_REPORT_RLY_WISE",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {}) 

from django.db import connection
def fetch_desig_ajax2(request):
    # try:
        if request.method == 'GET' and request.is_ajax():

            rly_list=json.loads(request.GET.get("rly_list"))
            datefrom=request.GET.get("datefrom")
            dateto=request.GET.get("dateto")
            print("mydates",datefrom,dateto)
            
            print("rly_listrly_list",rly_list,type(rly_list))
            puproduction_type = list(models.railwayLocationMaster.objects.filter(location_type__in = rly_list).values_list('location_code',flat = True).order_by('location_code'))
            # print(puproduction_type)
            total_total_inspection = 0
            total_total_closed = 0
            total_total_open = 0
            total_total_item = 0
            total_total_item_pending = 0
            total_total_item_overdue = 0
            total_total_do = 0
            total_total_mom = 0
            total_total_task_assign = 0
            total_total_task_completed = 0

            total_total_per_complied = 0
            total_total_per_complied = 0
            my_data = []
            if datefrom and dateto:
                # print("inside if")
                datefrom = datetime.strptime(datefrom,'%d-%m-%Y')
                dateto = datetime.strptime(dateto,'%d-%m-%Y')
                for i in puproduction_type:
                
                    cursor = connection.cursor()
                    cursor.execute(''' SELECT count( DISTINCT A.inspection_no) total_inspection
                    FROM public.inspects_inspection_details A,
                    public.myadmin_level_desig B,
                    public.inspects_insp_multi_location C
                    where A.inspection_officer_id = B.designation_code and A.status_flag!=0 and
                            A.inspection_no = C.inspection_no_id  and C.type ='HQ' and C.item = %s and
                            (A.inspected_on >= %s and A.inspected_on <= %s) ''',[str(i),datefrom,dateto])
                    total_inspection = cursor.fetchall()
                    total_total_inspection +=total_inspection[0][0]
                    cursor.close()
                    # print("total_inspection45",total_inspection[0][0])

                    # total_closed
                    cursor = connection.cursor()
                    cursor.execute(''' SELECT count( DISTINCT A.inspection_no) total_closed
                    FROM public.inspects_inspection_details A,
                    public.myadmin_level_desig B,
                    public.inspects_insp_multi_location C
                    where A.inspection_officer_id = B.designation_code and A.status_flag=4 and
                            A.inspection_no = C.inspection_no_id  and C.type ='HQ' and C.item = %s and
                            A.inspected_on >= %s and A.inspected_on <= %s ''',[str(i),datefrom,dateto])
                    total_closed = cursor.fetchall()
                    total_total_closed +=total_closed[0][0]
                    cursor.close()

                    # pending
                    cursor = connection.cursor()
                    cursor.execute(''' SELECT count( DISTINCT A.inspection_no) total_open
                    FROM public.inspects_inspection_details A,
                    public.myadmin_level_desig B,
                    public.inspects_insp_multi_location C
                    where A.inspection_officer_id = B.designation_code and A.status_flag between 1 and 3 and
                            A.inspection_no = C.inspection_no_id  and C.type ='HQ' and C.item = %s and
                            A.inspected_on >= %s and A.inspected_on <= %s ''',[str(i),datefrom,dateto])
                    total_open = cursor.fetchall()
                    total_total_open +=total_open[0][0]
                    cursor.close()

                    # total_item
                    cursor = connection.cursor()
                    
                    cursor.execute(''' SELECT count( distinct B.item_no_id) total_item
                    FROM public.inspects_inspection_details A,
                     public.inspects_marked_officers B,
                    public.inspects_insp_multi_location C,
                    public.inspects_item_details D
                    where  A.status_flag>0 and
                        B.item_no_id=D.item_no and
                            A.inspection_no = C.inspection_no_id  and C.type ='HQ' and
                    A.inspection_no = D.inspection_no_id and D.status_flag >0 and C.item = %s and
                       A.inspected_on >= %s and A.inspected_on <= %s''',[str(i),datefrom,dateto])

                    
                    total_item = cursor.fetchall()
                    total_total_item +=total_item[0][0]
                    cursor.close()

                    # total_item_pending
                    cursor = connection.cursor()
                    cursor.execute(''' SELECT count( distinct B.item_no_id) total_item
                    FROM public.inspects_inspection_details A,
                     public.inspects_marked_officers B,
                    public.inspects_insp_multi_location C,
                    public.inspects_item_details D
                    where  A.status_flag between 1 and 3 and
                        B.item_no_id=D.item_no and
                            A.inspection_no = C.inspection_no_id  and C.type ='HQ' and
                    A.inspection_no = D.inspection_no_id and D.status_flag between 1 and 3 and C.item =  %s and
                            A.inspected_on >= %s and A.inspected_on <= %s ''',[str(i),datefrom,dateto])
                    total_item_pending = cursor.fetchall()
                    total_total_item_pending +=total_item_pending[0][0]
                    cursor.close()

                    
                    # total mom inspection
                    total_mom_inspection =m3.Insp_details.objects.filter(mom_officer__rly_unit__location_code = i,mom_date__range = [datefrom,dateto]).count()
                    total_total_mom += total_mom_inspection

                    # total do inspection
                    total_do_inspection =m4.do_upload.objects.filter(desig_id__rly_unit__location_code = i,do_letter_date__range = [datefrom,dateto]).count()
                    total_total_do += total_do_inspection

                    # total task tracker assign data
                    # task_assigned_insp = m1.target_compliance.objects.filter(marked_no__item_no__inspection_no__inspection_officer__rly_unit__location_code = i, task_flag=1,target_date__range =[datefrom,dateto] ).exclude(status_flag = 3).count()
                    # task_assigned_tracker = m1.target_compliance.objects.filter(assigned_by__rly_unit__location_code = i, task_flag=2,target_date__range =[datefrom,dateto]).exclude(status_flag = 3).count()
                    # task_assigned = task_assigned_insp+task_assigned_tracker
                    # total_total_task_assign += task_assigned
                    task_assigned = m1.target_compliance.objects.filter(assigned_by__rly_unit__location_code = i,target_date__range = [datefrom,dateto]).exclude(status_flag = 3).count()
                    total_total_task_assign += task_assigned

                    # total task tracker completed data

                    # task_completed_insp = m1.target_compliance.objects.filter(marked_no__item_no__inspection_no__inspection_officer__rly_unit__location_code = i, task_flag=1,status_flag = 3,target_date__range =[datefrom,dateto]).count()
                    # task_completed_tracker = m1.target_compliance.objects.filter(assigned_by__rly_unit__location_code = i, task_flag=2,status_flag = 3,target_date__range =[datefrom,dateto]).count()
                    # task_completed = task_completed_insp + task_completed_tracker
                    # total_total_task_completed += task_completed
                    task_completed = m1.target_compliance.objects.filter(assigned_by__rly_unit__location_code = i,status_flag = 3,target_date__range = [datefrom,dateto]).count()
                    total_total_task_completed += task_completed

                    # total_item_overdue
                    cursor = connection.cursor()
                    cursor.execute(''' SELECT count( distinct B.item_no_id) total_item
                    FROM public.inspects_inspection_details A,
                     public.inspects_marked_officers B,
                    public.inspects_insp_multi_location C,
                    public.inspects_item_details D
                    where B.item_no_id=D.item_no and A.status_flag between 1 and 4 and
                            A.inspection_no = C.inspection_no_id  and C.type ='HQ' and
                    A.inspection_no = D.inspection_no_id and D.status_flag between 1 and 3 and
                            D.target_date < now() and C.item = %s and
                            A.inspected_on >= %s and A.inspected_on <= %s  ''',[str(i),datefrom,dateto])
                    total_item_overdue = cursor.fetchall()
                    total_total_item_overdue +=total_item_overdue[0][0]
                    cursor.close()

                    # % complied
                    try:
                        per_complied = ((total_item[0][0]-total_item_pending[0][0])/total_item[0][0])*100
                   
                    except:
                        per_complied = 0
                

                    my_data.append({'rly':i,"total_inspection":total_inspection[0][0],"total_closed":total_closed[0][0],
                    "total_open":total_open[0][0],"total_item":total_item[0][0],"total_item_pending":total_item_pending[0][0],
                    'total_item_overdue':total_item_overdue[0][0],"per_complied":per_complied,'total_mom_inspection':total_mom_inspection,
                    'total_do_inspection':total_do_inspection,"task_assigned":task_assigned,'task_completed':task_completed})
            try:
                total_total_per_complied = ((total_total_item - total_total_item_pending)/total_total_item)*100
            except:
                total_total_per_complied = 0
            # print("mydata",total_total_item_overdue)
            return JsonResponse({'rly_list':my_data,'total_total_inspection':total_total_inspection,"total_total_closed":total_total_closed,
            "total_total_open":total_total_open,"total_total_item":total_total_item,"total_total_item_pending":total_total_item_pending,
            "total_total_item_overdue":total_total_item_overdue,"total_total_per_complied":total_total_per_complied,'total_total_mom':total_total_mom,'total_total_do':total_total_do,
            'total_total_task_assign':total_total_task_assign,"total_total_task_completed":total_total_task_completed}, safe=False)
        return JsonResponse({'success':False}, status=400)
     
    # except Exception as e: 
    #     try:
    #         m1.error_Table.objects.create(fun_name="fetch_desig_ajax",user_id=request.user,err_details=str(e))
    #     except:
    #         print("Internal Error!!!")
    #     return render(request, "errorspage.html", {})


def inspection_report_divisionwise(request):
    # try:
    emp = request.user.username
    # emp = '34329800052'
    print('EMPLOYEE',emp)
    # if mmodels.AdminMaster.objects.filter(user_id = emp).exists():
    rlyid = models.AdminMaster.objects.filter(user_id = emp).values('rly_id')[0]['rly_id']
    print("rlyid99999999",rlyid)
    list4 = list(models.railwayLocationMaster.objects.filter(Q(location_type_desc='DIVISION'),parent_rly_unit_code=str(rlyid)).values('location_code','location_type','parent_location_code'))
    # list1 = models.railwayLocationMaster.objects.filter(Q(location_type_desc='RAILWAY BOARD')|Q(location_type_desc='HEAD QUATER')|Q(location_type_desc='PRODUCTION UNIT')|Q(location_type_desc='PSU')|Q(location_type_desc='INSTITUTE')|Q(location_type_desc='RDSO'),parent_rly_unit_code=rlyid).values('location_code')
    # list2 =[]
    # print("raiway",list1)
    # for i in list1:
    #     # print(i['designation'],'_________')
    #     list2.append(i['location_code'])

    # if there is division then list2 (railway) is empty then find its railway
    # if(len(list2) == 0):
    #     list4 = list(models.railwayLocationMaster.objects.filter(Q(location_type_desc='DIVISION')|Q(location_type_desc='WORKSHOP')|Q(location_type_desc='OFFICE')|Q(location_type_desc='STORE')|Q(location_type_desc='CONSTRUCTION')).values('location_code','location_type','parent_location_code'))
    #     # print("parent_location_cod",list4[0]['parent_location_code'])
    #     # list2.append(list4[0]['parent_location_code'])
    #     print("railway list2 ",list2)
    # else:
    #     list4 = list(models.railwayLocationMaster.objects.filter(Q(location_type_desc='DIVISION')|Q(location_type_desc='WORKSHOP')|Q(location_type_desc='OFFICE')|Q(location_type_desc='STORE')|Q(location_type_desc='CONSTRUCTION'),parent_rly_unit_code=rlyid).values('location_code','location_type'))
    list7=models.Level_Desig.objects.exclude(delete_flag=True).filter(rly_unit_id=rlyid).values('designation','designation_code').order_by('designation')
    
    if models.Level_Desig.objects.exclude(delete_flag=True).filter(rly_unit_id=rlyid,official_email_ID = emp).values('designation','designation_code').order_by('designation').exists():
        list7=models.Level_Desig.objects.exclude(delete_flag=True).filter(rly_unit_id=rlyid,official_email_ID = emp).values('designation','designation_code').order_by('designation')
    # else:
    #     pass
    allDesignations=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(rly_unit_id=rlyid).values('designation','designation_code').order_by('designation'))
    list8=[]
    for i in list7:
        # print(i['designation'],'_________')
        list8.append({"designation":i['designation'],"designation_code":i['designation_code']})
    # print('list 899999',list8,list2,list4)
    # saud faisal changes
    puproduction_type = models.railwayLocationMaster.objects.filter(location_type__in = ['ZR','PU']).values('location_code').order_by('location_code')
    # print("puproduction_type",puproduction_type)
    print("list455555555555555555",list4)
    app_date = date(2022,9,11)
    app_date = app_date.strftime('%d-%m-%Y')

    curr_date = date.today()
    curr_date = curr_date.strftime('%d-%m-%Y')
    context={'division':list4,'desi':list8,'puproduction_type':puproduction_type,"app_date":app_date,'curr_date':curr_date}
    return render(request, 'inspection_report_divisionwise.html',context)
    # return render(request, 'inspection_report_divisionwise.html')
    # except Exception as e: 
    #     try:
    #         m1.error_Table.objects.create(fun_name="INPECTION_REPORT_RLY_WISE",user_id=request.user,err_details=str(e))
    #     except:
    #         print("Internal Error!!!")
    #     return render(request, "errorspage.html", {}) 

from django.db import connection
def fetch_desig_ajax_divwise(request):
    try:
        if request.method == 'GET' and request.is_ajax():

            rly_list=json.loads(request.GET.get("rly_list"))
            datefrom=request.GET.get("datefrom")
            dateto=request.GET.get("dateto")
            print("mydates",datefrom,dateto)
            
            print("rly_listrly_list",rly_list,type(rly_list))
            # puproduction_type = list(models.railwayLocationMaster.objects.filter(location_type__in = rly_list).values_list('location_code',flat = True).order_by('location_code'))
            # print('puproduction_type,',puproduction_type)
            total_total_inspection = 0
            total_total_closed = 0
            total_total_open = 0
            total_total_item = 0
            total_total_item_pending = 0
            total_total_item_overdue = 0
            total_total_per_complied = 0
            my_data = []
            if datefrom and dateto:
                # print("inside if")
                datefrom = datetime.strptime(datefrom,'%d-%m-%Y')
                dateto = datetime.strptime(dateto,'%d-%m-%Y')
                for i in rly_list:
                
                    cursor = connection.cursor()
                    cursor.execute(''' SELECT count( DISTINCT A.inspection_no) total_inspection
                    FROM public.inspects_inspection_details A,
                    public.myadmin_level_desig B,
                    public.inspects_insp_multi_location C
                    where A.inspection_officer_id = B.designation_code and A.status_flag!=0 and
                            A.inspection_no = C.inspection_no_id  and C.type =%s and C.item = %s and
                            (A.inspected_on >= %s and A.inspected_on <= %s) ''',[str(i.split('-')[1]),str(i.split('-')[0]),datefrom,dateto])
                    total_inspection = cursor.fetchall()
                    total_total_inspection +=total_inspection[0][0]
                    cursor.close()
                    # print("total_inspection45",total_inspection[0][0])

                    # total_closed
                    cursor = connection.cursor()
                    cursor.execute(''' SELECT count( DISTINCT A.inspection_no) total_closed
                    FROM public.inspects_inspection_details A,
                    public.myadmin_level_desig B,
                    public.inspects_insp_multi_location C
                    where A.inspection_officer_id = B.designation_code and A.status_flag=4 and
                            A.inspection_no = C.inspection_no_id  and C.type =%s and C.item = %s and
                            (A.inspected_on >= %s and A.inspected_on <= %s) ''',[str(i.split('-')[1]),str(i.split('-')[0]),datefrom,dateto])
                    total_closed = cursor.fetchall()
                    total_total_closed +=total_closed[0][0]
                    cursor.close()

                    # pending
                    cursor = connection.cursor()
                    cursor.execute(''' SELECT count( DISTINCT A.inspection_no) total_open
                    FROM public.inspects_inspection_details A,
                    public.myadmin_level_desig B,
                    public.inspects_insp_multi_location C
                    where A.inspection_officer_id = B.designation_code and A.status_flag between 1 and 3 and
                            A.inspection_no = C.inspection_no_id  and C.type =%s and C.item = %s and
                            (A.inspected_on >= %s and A.inspected_on <= %s) ''',[str(i.split('-')[1]),str(i.split('-')[0]),datefrom,dateto])
                    total_open = cursor.fetchall()
                    total_total_open +=total_open[0][0]
                    cursor.close()

                    # total_item
                    cursor = connection.cursor()
                    
                    cursor.execute(''' SELECT count( distinct B.item_no_id) total_item
                    FROM public.inspects_inspection_details A,
                     public.inspects_marked_officers B,
                    public.inspects_insp_multi_location C,
                    public.inspects_item_details D
                    where  A.status_flag>0 and
                        B.item_no_id=D.item_no and
                            A.inspection_no = C.inspection_no_id  and C.type =%s and
                    A.inspection_no = D.inspection_no_id and D.status_flag >0 and C.item = %s and
                            (A.inspected_on >= %s and A.inspected_on <= %s) ''',[str(i.split('-')[1]),str(i.split('-')[0]),datefrom,dateto])

                    
                    total_item = cursor.fetchall()
                    total_total_item +=total_item[0][0]
                    cursor.close()

                    # total_item_pending
                    cursor = connection.cursor()
                    cursor.execute(''' SELECT count( distinct B.item_no_id) total_item
                    FROM public.inspects_inspection_details A,
                     public.inspects_marked_officers B,
                    public.inspects_insp_multi_location C,
                    public.inspects_item_details D
                    where  A.status_flag between 1 and 3 and
                        B.item_no_id=D.item_no and
                            A.inspection_no = C.inspection_no_id  and C.type =%s and
                    A.inspection_no = D.inspection_no_id and D.status_flag between 1 and 3 and C.item = %s and
                            (A.inspected_on >= %s and A.inspected_on <= %s) ''',[str(i.split('-')[1]),str(i.split('-')[0]),datefrom,dateto])
                    total_item_pending = cursor.fetchall()
                    total_total_item_pending +=total_item_pending[0][0]
                    cursor.close()


                    # total_item_overdue
                    cursor = connection.cursor()
                    cursor.execute(''' SELECT count( distinct B.item_no_id) total_item
                    FROM public.inspects_inspection_details A,
                     public.inspects_marked_officers B,
                    public.inspects_insp_multi_location C,
                    public.inspects_item_details D
                    where B.item_no_id=D.item_no and A.status_flag between 1 and 4 and
                            A.inspection_no = C.inspection_no_id  and C.type =%s and
                    A.inspection_no = D.inspection_no_id and D.status_flag between 1 and 3 and
                            D.target_date < now() and C.item = %s and
                            (A.inspected_on >= %s and A.inspected_on <= %s) ''',[str(i.split('-')[1]),str(i.split('-')[0]),datefrom,dateto])
                    total_item_overdue = cursor.fetchall()
                    total_total_item_overdue +=total_item_overdue[0][0]
                    cursor.close()

                    # %complied 
                    try:
                        per_complied = ((total_item[0][0]-total_item_pending[0][0])/total_item[0][0])*100
                        
                    except:
                        per_complied = 0
                       

                    my_data.append({'rly':i,"total_inspection":total_inspection[0][0],"total_closed":total_closed[0][0],
                    "total_open":total_open[0][0],"total_item":total_item[0][0],"total_item_pending":total_item_pending[0][0],
                    'total_item_overdue':total_item_overdue[0][0],"per_complied":per_complied})
            else:
                # print("inside else")
                for i in rly_list:
                    # total_inspection
                    # print(i)
                    cursor = connection.cursor()
                    cursor.execute(''' SELECT count( DISTINCT A.inspection_no) total_inspection
                    FROM public.inspects_inspection_details A,
                    public.myadmin_level_desig B,
                    public.inspects_insp_multi_location C
                    where A.inspection_officer_id = B.designation_code and A.status_flag!=0 and
                            A.inspection_no = C.inspection_no_id  and C.type =%s and C.item = %s''',[str(i.split('-')[1]),str(i.split('-')[0])])
                    total_inspection = cursor.fetchall()
                    print("total_inspection77777777777",total_inspection)
                    total_total_inspection +=total_inspection[0][0]
                    cursor.close()
                    # print("total_inspection45",total_inspection[0][0])

                    # total_closed
                    cursor = connection.cursor()
                    cursor.execute(''' SELECT count( DISTINCT A.inspection_no) total_closed
                    FROM public.inspects_inspection_details A,
                    public.myadmin_level_desig B,
                    public.inspects_insp_multi_location C
                    where A.inspection_officer_id = B.designation_code and A.status_flag=4 and
                            A.inspection_no = C.inspection_no_id  and C.type =%s and C.item = %s''',[str(i.split('-')[1]),str(i.split('-')[0])])
                    total_closed = cursor.fetchall()
                    total_total_closed +=total_closed[0][0]
                    cursor.close()

                    # pending
                    cursor = connection.cursor()
                    cursor.execute(''' SELECT count( DISTINCT A.inspection_no) total_open
                    FROM public.inspects_inspection_details A,
                    public.myadmin_level_desig B,
                    public.inspects_insp_multi_location C
                    where A.inspection_officer_id = B.designation_code and A.status_flag between 1 and 3 and
                            A.inspection_no = C.inspection_no_id  and C.type =%s and C.item = %s''',[str(i.split('-')[1]),str(i.split('-')[0])])
                    total_open = cursor.fetchall()
                    total_total_open +=total_open[0][0]
                    cursor.close()

                    # total_item
                    cursor = connection.cursor()
                    cursor.execute('''SELECT count( distinct B.item_no_id) total_item
                    FROM public.inspects_inspection_details A,
                     public.inspects_marked_officers B,
                    public.inspects_insp_multi_location C,
                    public.inspects_item_details D
                    where  A.status_flag>0 and
                        B.item_no_id=D.item_no and
                            A.inspection_no = C.inspection_no_id  and C.type =%s and
                    A.inspection_no = D.inspection_no_id and D.status_flag >0 and C.item = %s''',[str(i.split('-')[1]),str(i.split('-')[0])]) 
                    total_item = cursor.fetchall()
                    total_total_item +=total_item[0][0]
                    cursor.close()

                    # total_item_pending
                    cursor = connection.cursor()
                    cursor.execute(''' SELECT count( distinct B.item_no_id) total_item
                    FROM public.inspects_inspection_details A,
                     public.inspects_marked_officers B,
                    public.inspects_insp_multi_location C,
                    public.inspects_item_details D
                    where  A.status_flag between 1 and 3 and
                        B.item_no_id=D.item_no and
                            A.inspection_no = C.inspection_no_id  and C.type =%s and
                    A.inspection_no = D.inspection_no_id and D.status_flag between 1 and 3 and C.item = %s''',[str(i.split('-')[1]),str(i.split('-')[0])])
                    total_item_pending = cursor.fetchall()
                    total_total_item_pending +=total_item_pending[0][0]
                    cursor.close()


                    # total_item_overdue
                    cursor = connection.cursor()
                    cursor.execute(''' SELECT count( distinct B.item_no_id) total_item
                    FROM public.inspects_inspection_details A,
                     public.inspects_marked_officers B,
                    public.inspects_insp_multi_location C,
                    public.inspects_item_details D
                    where B.item_no_id=D.item_no and A.status_flag between 1 and 4 and
                            A.inspection_no = C.inspection_no_id  and C.type =%s and
                    A.inspection_no = D.inspection_no_id and D.status_flag between 1 and 3 and
                            D.target_date < now() and C.item = %s''',[str(i.split('-')[1]),str(i.split('-')[0])])
                    total_item_overdue = cursor.fetchall()
                    total_total_item_overdue +=total_item_overdue[0][0]
                    cursor.close()
                    
                    # %complied 
                    try:
                        per_complied = ((total_item[0][0]-total_item_pending[0][0])/total_item[0][0])*100
                        
                    except:
                        per_complied = 0
                       

                    my_data.append({'rly':i,"total_inspection":total_inspection[0][0],"total_closed":total_closed[0][0],
                    "total_open":total_open[0][0],"total_item":total_item[0][0],"total_item_pending":total_item_pending[0][0],
                    'total_item_overdue':total_item_overdue[0][0],"per_complied":per_complied})
                    
            try:
              
                total_total_per_complied = ((total_total_item-total_total_item_pending)/total_total_item)*100
            except:
               
                total_total_per_complied = 0
            # print("mydata",total_total_item_overdue)
            return JsonResponse({'rly_list':my_data,'total_total_inspection':total_total_inspection,"total_total_closed":total_total_closed,
            "total_total_open":total_total_open,"total_total_item":total_total_item,"total_total_item_pending":total_total_item_pending,
            "total_total_item_overdue":total_total_item_overdue,"total_total_per_complied":total_total_per_complied}, safe=False)
        return JsonResponse({'success':False}, status=400)
     
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="fetch_desig_ajax",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})



def inspection_report_officerwise(request):
    try:
        list1=models.railwayLocationMaster.objects.filter(Q(location_type_desc='RAILWAY BOARD')|Q(location_type_desc='HEAD QUATER')|Q(location_type_desc='PRODUCTION UNIT')|Q(location_type_desc='PSU')|Q(location_type_desc='INSTITUTE')|Q(location_type_desc='RDSO')).values('location_code').order_by('location_code')
        list2=[]
        for i in list1:
            # print(i['location_code'],'_________')
            list2.append(i['location_code'])
        
        
        list3=models.railwayLocationMaster.objects.filter(Q(location_type_desc='DIVISION')|Q(location_type_desc='WORKSHOP')|Q(location_type_desc='OFFICE')|Q(location_type_desc='STORE')|Q(location_type_desc='CONSTRUCTION')).values('location_code','location_type').order_by('location_code')
        list4=[]
        for i in list3:
            # print(i['location_code'],'_________')
            list4.append({'location_code':i['location_code'],'location_type':i['location_type']})  

        # print("list4",list4)
            
            
        list5=models.departMast.objects.all().values('department_name').order_by('department_name')
        list6=[]
        for i in list5:
            # print(i['department_name'],'_________')
            list6.append(i['department_name'])
        
        list7=models.Level_Desig.objects.exclude(delete_flag=True).all().values('designation').order_by('designation')
        list8=[]
        for i in list7:
            # print(i['designation'],'_________')
            list8.append(i['designation'])

        if request.method== 'POST':
            query = request.POST['query']
            #print(query)
            que=Q()
            for word in query.split():
                que &=Q(observation__icontains=word)
            
            des_location=m1.Item_details.objects.filter(que)
            return render(request,'keyword_location_search.html', {'des_location':des_location})
        else:
            query = False
        
        # saud faisal changes
        puproduction_type = models.railwayLocationMaster.objects.filter(location_type__in = ['ZR','PU']).values('location_code').order_by('location_code')
        app_date = date(2022,9,11)
        app_date = app_date.strftime('%d-%m-%Y')

        curr_date = date.today()
        curr_date = curr_date.strftime('%d-%m-%Y')
        context={'zone':list2,'division':list4,'desi':list8,'puproduction_type':puproduction_type,"app_date":app_date,'curr_date':curr_date}
        return render(request, 'inspection_report_officer_wise.html',context)
    # else:
    #     return redirect('/inspection_report_officerwise')
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="INPECTION_REPORT_RLY_WISE",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {}) 

from django.db import connection
# def fetch_desig_ajax_officerwise(request):
#     try:
#         if request.method == 'GET' and request.is_ajax():
#             # DATA FROM AJAX 
#             location_code = json.loads(request.GET.get("location_code"))
#             location_type = json.loads(request.GET.get("location_type"))
#             designation = json.loads(request.GET.get("designation"))
#             created_on = request.GET.get("created_on")
#             print('mydatas4444444',location_code,location_type,designation,created_on)
#             l=[]
#             if designation:
#                 l = designation
#                 print("mydesigs",l)
#             elif location_type:
#                 # DIVISION WISE
                
#                 for x in location_type:
#                     x1=x.split('-')
#                     ins=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation__icontains=x1[0]).values('designation').distinct('designation'))
#                     #print(ins,'==============================================')
#                     for i in ins:
#                         l.append(i['designation'])
#                 # END DIVISION WISE
#             elif location_code:
#                 # RAILWAYS WISE
#                 # grou=json.loads(request.GET.get("group"))
                
#                 # ins=list(models.railwayLocationMaster.objects.filter(location_type='DIV',parent_location_code=grou).values('location_code', 'rly_unit_code'))
         
#                 ins=list(models.railwayLocationMaster.objects.filter(Q(location_type_desc='DIVISION')|Q(location_type_desc='WORKSHOP')|Q(location_type_desc='INSTITUTE')|Q(location_type_desc='STORE')|Q(location_type_desc='CONSTRUCTION'),parent_location_code__in=location_code).values('location_code', 'location_type'))
#                 l=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(rly_unit_id__in=(models.railwayLocationMaster.objects.filter(location_code__in=location_code).values('rly_unit_code'))).values_list('designation',flat=True).distinct('designation'))
#                 print("insdesig",l)

#                 # END RAILWAY WISE
#             else:
#                 list7=models.Level_Desig.objects.exclude(delete_flag=True).all().values('designation').order_by('designation')
#                 list8=[]
#                 for i in list7:
#                     # print(i['designation'],'_________')
#                     list8.append(i['designation'])
#                     l = list8
#             print("mylist5555",l)
#             total_total_inspection = 0
#             total_total_closed = 0
#             total_total_open = 0
#             total_total_item = 0
#             total_total_item_pending = 0
#             total_total_item_overdue = 0
#             total_total_per_complied = 0
#             my_data = []
#             if created_on:
#                 # print("inside if")
#                 print("mydate",len(created_on.split('to')[0].strip()))
#                 datefrom = datetime.strptime(created_on.split('to')[0].strip(),'%d/%m/%y')
#                 dateto = datetime.strptime(created_on.split('to')[1].strip(),'%d/%m/%y')
#                 for i in l:
#                     desig_code = models.Level_Desig.objects.exclude(delete_flag=True).get(designation = i).designation_code
#                     cursor = connection.cursor()
#                     cursor.execute(''' SELECT count( DISTINCT A.inspection_no) total_inspection
#                     FROM public.inspects_inspection_details A,
#                     public.myadmin_level_desig B
#                     where A.inspection_officer_id = B.designation_code and A.status_flag!=0 and
#                             A.inspection_officer_id = %s and
#                             (A.inspected_on >= %s and A.inspected_on <= %s) ''',[desig_code,datefrom,dateto])
#                     total_inspection = cursor.fetchall()
#                     total_total_inspection +=total_inspection[0][0]
#                     cursor.close()
#                     # print("total_inspection45",total_inspection[0][0])

#                     # total_closed
#                     cursor = connection.cursor()
#                     cursor.execute(''' SELECT count( DISTINCT A.inspection_no) total_closed
#                     FROM public.inspects_inspection_details A,
#                     public.myadmin_level_desig B
                   
#                     where A.inspection_officer_id = B.designation_code and A.status_flag=4 and
#                             A.inspection_officer_id = %s and
#                             (A.inspected_on >= %s and A.inspected_on <= %s) ''',[desig_code,datefrom,dateto])
#                     total_closed = cursor.fetchall()
#                     total_total_closed +=total_closed[0][0]
#                     cursor.close()

#                     # pending
#                     cursor = connection.cursor()
#                     cursor.execute(''' SELECT count( DISTINCT A.inspection_no) total_open
#                     FROM public.inspects_inspection_details A,
#                     public.myadmin_level_desig B
                   
#                     where A.inspection_officer_id = B.designation_code and A.status_flag between 1 and 3 and
#                             A.inspection_officer_id = %s and
#                             (A.inspected_on >= %s and A.inspected_on <= %s) ''',[desig_code,datefrom,dateto])
#                     total_open = cursor.fetchall()
#                     total_total_open +=total_open[0][0]
#                     cursor.close()

#                     # total_item
#                     cursor = connection.cursor()
                    
#                     cursor.execute(''' SELECT count( distinct B.item_no_id) total_item
#                     FROM public.inspects_inspection_details A,
#                      public.inspects_marked_officers B,
                   
#                     public.inspects_item_details D
#                     where  A.status_flag>0 and
#                         B.item_no_id=D.item_no and
                            
#                     A.inspection_no = D.inspection_no_id and D.status_flag >0 and A.inspection_officer_id = %s and
#                             (A.inspected_on >= %s and A.inspected_on <= %s) ''',[desig_code,datefrom,dateto])

                    
#                     total_item = cursor.fetchall()
#                     total_total_item +=total_item[0][0]
#                     cursor.close()

#                     # total_item_pending
#                     cursor = connection.cursor()
#                     cursor.execute(''' SELECT count( distinct B.item_no_id) total_item
#                     FROM public.inspects_inspection_details A,
#                      public.inspects_marked_officers B,
                   
#                     public.inspects_item_details D
#                     where  A.status_flag between 1 and 3 and
#                         B.item_no_id=D.item_no and
                           
#                     A.inspection_no = D.inspection_no_id and D.status_flag between 1 and 3 and A.inspection_officer_id = %s and
#                             (A.inspected_on >= %s and A.inspected_on <= %s) ''',[desig_code,datefrom,dateto])
#                     total_item_pending = cursor.fetchall()
#                     total_total_item_pending +=total_item_pending[0][0]
#                     cursor.close()


#                     # total_item_overdue
#                     cursor = connection.cursor()
#                     cursor.execute(''' SELECT count( distinct B.item_no_id) total_item
#                     FROM public.inspects_inspection_details A,
#                      public.inspects_marked_officers B,
                  
#                     public.inspects_item_details D
#                     where B.item_no_id=D.item_no and A.status_flag between 1 and 4 and
                            
#                     A.inspection_no = D.inspection_no_id and D.status_flag between 1 and 3 and
#                             D.target_date < now() and A.inspection_officer_id = %s and
#                             (A.inspected_on >= %s and A.inspected_on <= %s) ''',[desig_code,datefrom,dateto])
#                     total_item_overdue = cursor.fetchall()
#                     total_total_item_overdue +=total_item_overdue[0][0]
#                     cursor.close()

#                     # %complied 
#                     try:
#                         per_complied = ((total_item[0][0]-total_item_pending[0][0])/total_item[0][0])*100
                        
#                     except:
#                         per_complied = 0
                       

#                     my_data.append({'rly':i,"total_inspection":total_inspection[0][0],"total_closed":total_closed[0][0],
#                     "total_open":total_open[0][0],"total_item":total_item[0][0],"total_item_pending":total_item_pending[0][0],
#                     'total_item_overdue':total_item_overdue[0][0],"per_complied":per_complied,"total_total_per_complied":total_total_per_complied})
            
#             else:
#                 # print("inside else")
#                 for i in l:
#                     # total_inspection
#                     # print(i)
#                     desig_code = models.Level_Desig.objects.exclude(delete_flag=True).filter(designation = i)[0].designation_code
#                     cursor = connection.cursor()
#                     cursor.execute(''' SELECT count( DISTINCT A.inspection_no) total_inspection
#                     FROM public.inspects_inspection_details A,
#                     public.myadmin_level_desig B
                    
#                     where A.inspection_officer_id = B.designation_code and A.status_flag!=0 and
#                             A.inspection_officer_id = %s''',[desig_code])
#                     total_inspection = cursor.fetchall()
#                     print("total_inspection77777777777",total_inspection)
#                     total_total_inspection +=total_inspection[0][0]
#                     cursor.close()
#                     # print("total_inspection45",total_inspection[0][0])

#                     # total_closed
#                     cursor = connection.cursor()
#                     cursor.execute(''' SELECT count( DISTINCT A.inspection_no) total_closed
#                     FROM public.inspects_inspection_details A,
#                     public.myadmin_level_desig B
                   
#                     where A.inspection_officer_id = B.designation_code and A.status_flag=4 and
#                            A.inspection_officer_id = %s''',[desig_code])
#                     total_closed = cursor.fetchall()
#                     total_total_closed +=total_closed[0][0]
#                     cursor.close()

#                     # pending
#                     cursor = connection.cursor()
#                     cursor.execute(''' SELECT count( DISTINCT A.inspection_no) total_open
#                     FROM public.inspects_inspection_details A,
#                     public.myadmin_level_desig B
                    
#                     where A.inspection_officer_id = B.designation_code and A.status_flag between 1 and 3 and
#                             A.inspection_officer_id = %s''',[desig_code])
#                     total_open = cursor.fetchall()
#                     total_total_open +=total_open[0][0]
#                     cursor.close()

#                     # total_item
#                     cursor = connection.cursor()
#                     cursor.execute('''SELECT count( distinct B.item_no_id) total_item
#                     FROM public.inspects_inspection_details A,
#                      public.inspects_marked_officers B,
                 
#                     public.inspects_item_details D
#                     where  A.status_flag>0 and
#                         B.item_no_id=D.item_no and
                        
#                     A.inspection_no = D.inspection_no_id and D.status_flag >0 and A.inspection_officer_id = %s''',[desig_code]) 
#                     total_item = cursor.fetchall()
#                     total_total_item +=total_item[0][0]
#                     cursor.close()

#                     # total_item_pending
#                     cursor = connection.cursor()
#                     cursor.execute(''' SELECT count( distinct B.item_no_id) total_item
#                     FROM public.inspects_inspection_details A,
#                      public.inspects_marked_officers B,
                    
#                     public.inspects_item_details D
#                     where  A.status_flag between 1 and 3 and
#                         B.item_no_id=D.item_no and
#                     A.inspection_no = D.inspection_no_id and D.status_flag between 1 and 3 and A.inspection_officer_id = %s''',[desig_code])
#                     total_item_pending = cursor.fetchall()
#                     total_total_item_pending +=total_item_pending[0][0]
#                     cursor.close()


#                     # total_item_overdue
#                     cursor = connection.cursor()
#                     cursor.execute(''' SELECT count( distinct B.item_no_id) total_item
#                     FROM public.inspects_inspection_details A,
#                      public.inspects_marked_officers B,
                 
#                     public.inspects_item_details D
#                     where B.item_no_id=D.item_no and A.status_flag between 1 and 4 and
                            
#                     A.inspection_no = D.inspection_no_id and D.status_flag between 1 and 3 and
#                             D.target_date < now() and A.inspection_officer_id = %s''',[desig_code])
#                     total_item_overdue = cursor.fetchall()
#                     total_total_item_overdue +=total_item_overdue[0][0]
#                     cursor.close()

#                     # %complied 
#                     try:
#                         per_complied = ((total_item[0][0]-total_item_pending[0][0])/total_item[0][0])*100
                        
#                     except:
#                         per_complied = 0
                       

#                     my_data.append({'rly':i,"total_inspection":total_inspection[0][0],"total_closed":total_closed[0][0],
#                     "total_open":total_open[0][0],"total_item":total_item[0][0],"total_item_pending":total_item_pending[0][0],
#                     'total_item_overdue':total_item_overdue[0][0],"per_complied":per_complied,"total_total_per_complied":total_total_per_complied})
#             try:
              
#                 total_total_per_complied = ((total_total_item-total_total_item_pending)/total_total_item)*100
#             except:
               
#                 total_total_per_complied = 0

#             # print("mydata",total_total_item_overdue)
#             return JsonResponse({'rly_list':my_data,'total_total_inspection':total_total_inspection,"total_total_closed":total_total_closed,
#             "total_total_open":total_total_open,"total_total_item":total_total_item,"total_total_item_pending":total_total_item_pending,
#             "total_total_item_overdue":total_total_item_overdue,"total_total_per_complied":total_total_per_complied}, safe=False)
#         return JsonResponse({'success':False}, status=400)
     
#     except Exception as e: 
#         try:
#             m1.error_Table.objects.create(fun_name="fetch_desig_ajax",user_id=request.user,err_details=str(e))
#         except:
#             print("Internal Error!!!")
#         return render(request, "errorspage.html", {})

from django.db import connection
def fetch_desig_ajax_officerwise(request):
    # try:
        if request.method == 'GET' and request.is_ajax():

            location_code = json.loads(request.GET.get("location_code"))
            location_type = json.loads(request.GET.get("location_type"))
            designation = json.loads(request.GET.get("designation"))
            created_on = request.GET.get("created_on")
            print('mydatas4444444',location_code,location_type,designation,created_on)
            l=[]
            if designation:
                l = designation
                print("mydesigs",l)
            elif location_type:
                # DIVISION WISE
                
                for x in location_type:
                    x1=x.split('-')
                    ins=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation__icontains=x1[0]).values('designation').distinct('designation'))
                    #print(ins,'==============================================')
                    for i in ins:
                        l.append(i['designation'])
                # END DIVISION WISE
            elif location_code:
                # RAILWAYS WISE
                # grou=json.loads(request.GET.get("group"))
                
                # ins=list(models.railwayLocationMaster.objects.filter(location_type='DIV',parent_location_code=grou).values('location_code', 'rly_unit_code'))
        
                ins=list(models.railwayLocationMaster.objects.filter(Q(location_type_desc='DIVISION')|Q(location_type_desc='WORKSHOP')|Q(location_type_desc='INSTITUTE')|Q(location_type_desc='STORE')|Q(location_type_desc='CONSTRUCTION'),parent_location_code__in=location_code).values('location_code', 'location_type'))
                l=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(rly_unit_id__in=(models.railwayLocationMaster.objects.filter(location_code__in=location_code).values('rly_unit_code'))).values_list('designation',flat=True).distinct('designation'))
                print("insdesig",l)

                # END RAILWAY WISE
            else:
                list7=models.Level_Desig.objects.exclude(delete_flag=True).all().values('designation').order_by('designation')
                list8=[]
                for i in list7:
                    # print(i['designation'],'_________')
                    list8.append(i['designation'])
                    l = list8
            print("mylist5555",l)
            # inspection report
            total_total_inspection = 0
            total_total_closed = 0
            total_total_open = 0
            total_total_item = 0
            total_total_item_pending = 0
            total_total_item_overdue = 0
            total_total_per_complied = 0

            # inspection report mom
            mom_total_total_inspection = 0
            mom_total_total_closed = 0
            mom_total_total_open = 0
            mom_total_total_item = 0
            mom_total_total_item_pending = 0
            mom_total_total_item_overdue = 0
            mom_total_total_per_complied = 0
            my_data = []
            ajaxname = request.GET.get('ajaxname')

            if ajaxname == 'MarkedByOfficer':
                print("inside MarkedByOfficer")
                # DATA FROM AJAX MarkedByOfficer
                if created_on:
                    print("inside else")
                    for i in l:
                        print(i)
                        
                        desig_code = models.Level_Desig.objects.exclude(delete_flag=True).filter(designation = i)[0].designation_code

                        ###############################3 INSPECTION REPORT ##################################
                        # total complaince
                        cursor = connection.cursor()
                        cursor.execute(''' SELECT count(distinct(A.inspection_no)) total_comp
                        FROM public.inspects_inspection_details A,
                        public.inspects_marked_officers B,
                        public.inspects_item_details D, 
                        public.myadmin_level_desig E
                        where B.item_no_id=D.item_no and B.marked_to_id = E.designation_code and B.marked_to_id = %s
                        and B.status_flag != 0 and A.inspection_no = D.inspection_no_id ''',[desig_code])
                        total_inspection = cursor.fetchall()
                        total_total_inspection +=total_inspection[0][0]
                        cursor.close()

                        # total_closed
                        cursor = connection.cursor()
                        cursor.execute(''' SELECT count(distinct(A.inspection_no)) total_closed
                        FROM public.inspects_inspection_details A,
                        public.inspects_marked_officers B,
                        public.inspects_item_details D, 
                        public.myadmin_level_desig E
                        where B.item_no_id=D.item_no and B.marked_to_id = E.designation_code and B.marked_to_id =%s
                        and B.status_flag = 4 and A.inspection_no = D.inspection_no_id ''',[desig_code])
                        total_closed = cursor.fetchall()
                        total_total_closed +=total_closed[0][0]
                        print("total_inspection7777777777closed",total_closed)

                        # pending
                        cursor = connection.cursor()
                        cursor.execute(''' SELECT count(distinct(A.inspection_no)) pending
                        FROM public.inspects_inspection_details A,
                        public.inspects_marked_officers B,
                        public.inspects_item_details D, 
                        public.myadmin_level_desig E
                        where B.item_no_id=D.item_no and B.marked_to_id = E.designation_code and B.marked_to_id = %s
                        and B.status_flag in (1,2,3) and A.inspection_no = D.inspection_no_id ''',[desig_code])
                        total_open = cursor.fetchall()
                        total_total_open +=total_open[0][0]
                        # print("total_inspection7777777777total_open",total_open)

                        # total_item
                        cursor = connection.cursor()
                        cursor.execute(''' SELECT count(D.item_no)
                        FROM public.inspects_inspection_details A,
                        public.inspects_marked_officers B,
                        public.inspects_item_details D, 
                        public.myadmin_level_desig E
                        where B.item_no_id=D.item_no and B.marked_to_id = E.designation_code and B.marked_to_id = %s
                        and A.inspection_no = D.inspection_no_id and
                        D.status_flag >0 ''',[desig_code])
                        total_item = cursor.fetchall()
                        total_total_item +=total_item[0][0]
       

                        # total_item_pending
                        cursor = connection.cursor()
                        cursor.execute(''' SELECT count(D.item_no)
                        FROM public.inspects_inspection_details A,
                        public.inspects_marked_officers B,
                        public.inspects_item_details D, 
                        public.myadmin_level_desig E
                        where B.item_no_id=D.item_no and B.marked_to_id = E.designation_code and B.marked_to_id = %s
                        and A.inspection_no = D.inspection_no_id and
                        D.status_flag  in (1,2,3)  ''',[desig_code])
                        total_item_pending = cursor.fetchall()
                        total_total_item_pending +=total_item_pending[0][0]
                     
                        # total_item_overdue
                        cursor = connection.cursor()
                        cursor.execute(''' SELECT count(*)
                        FROM public.inspects_inspection_details A,
                        public.inspects_marked_officers B,
                        public.inspects_item_details D, 
                        public.myadmin_level_desig E
                        where B.item_no_id=D.item_no and B.marked_to_id = E.designation_code and B.marked_to_id = %s
                        and A.inspection_no = D.inspection_no_id and
                        A.status_flag between 1 and 4 and D.status_flag between 1 and 3 and
                        D.target_date < now() ''',[desig_code])
                        total_item_overdue = cursor.fetchall()
                        total_total_item_overdue +=total_item_overdue[0][0]

                        # %complied 
                        try:
                            per_complied = ((total_item-total_item_pending)/total_item)*100
                            
                        except:
                            per_complied = 0
                        
                        # ####################### MOM INSPECTION REPORT #########################################
                        # total complaince
                        cursor = connection.cursor()
                        cursor.execute(''' SELECT count(distinct(A.insp_no)) total_comp
                        FROM public.mom_insp_details A,
                        public.mom_marked_members B,
                        public.mom_item_details D, 
                        public.myadmin_level_desig E
                        where B.item_no_id=D.item_no and B.marked_to_id = E.designation_code and B.marked_to_id = %s
                        and B.status_flag != 0 and A.insp_no = D.insp_no_id ''',[desig_code])
                        mom_total_inspection = cursor.fetchall()
                        mom_total_total_inspection +=mom_total_inspection[0][0]
                        cursor.close()

                        # total_closed
                        cursor = connection.cursor()
                        cursor.execute(''' SELECT count(distinct(A.insp_no)) total_closed
                        FROM public.mom_insp_details A,
                        public.mom_marked_members B,
                        public.mom_item_details D, 
                        public.myadmin_level_desig E
                        where B.item_no_id=D.item_no and B.marked_to_id = E.designation_code and B.marked_to_id = %s
                        and B.status_flag = 4 and A.insp_no = D.insp_no_id''',[desig_code])
                        mom_total_closed = cursor.fetchall()
                        mom_total_total_closed +=mom_total_closed[0][0]
                        print("total_inspection7777777777closed",mom_total_closed)

                        # pending
                        cursor = connection.cursor()
                        cursor.execute(''' SELECT count(distinct(A.insp_no)) pending
                        FROM public.mom_insp_details A,
                        public.mom_marked_members B,
                        public.mom_item_details D, 
                        public.myadmin_level_desig E
                        where B.item_no_id=D.item_no and B.marked_to_id = E.designation_code and B.marked_to_id = %s
                        and B.status_flag in (1,2) and A.insp_no = D.insp_no_id ''',[desig_code])
                        mom_total_open = cursor.fetchall()
                        mom_total_total_open +=mom_total_open[0][0]
                        # print("total_inspection7777777777total_open",mom_total_open)

                        # total_item
                        cursor = connection.cursor()
                        cursor.execute(''' SELECT count(*) FROM public.mom_insp_details A,
                        public.mom_marked_members B,
                        public.mom_item_details D, 
                        public.myadmin_level_desig E
                        where B.item_no_id=D.item_no and B.marked_to_id = E.designation_code and B.marked_to_id = %s
                        and A.insp_no = D.insp_no_id and
                        D.status_flag >0''',[desig_code])
                        mom_total_item = cursor.fetchall()
                        mom_total_total_item +=mom_total_item[0][0]
       

                        # total_item_pending
                        cursor = connection.cursor()
                        cursor.execute(''' SELECT count(*) FROM public.mom_insp_details A,
                        public.mom_marked_members B,
                        public.mom_item_details D, 
                        public.myadmin_level_desig E
                        where B.item_no_id=D.item_no and B.marked_to_id = E.designation_code and B.marked_to_id = %s
                        and A.insp_no = D.insp_no_id and
                        D.status_flag  in (1,2,3)    ''',[desig_code])
                        mom_total_item_pending = cursor.fetchall()
                        mom_total_total_item_pending +=mom_total_item_pending[0][0]
                     
                        # total_item_overdue
                        cursor = connection.cursor()
                        cursor.execute(''' SELECT count(*) FROM public.mom_insp_details A,
                        public.mom_marked_members B,
                        public.mom_item_details D, 
                        public.myadmin_level_desig E
                        where B.item_no_id=D.item_no and B.marked_to_id = E.designation_code and B.marked_to_id = %s
                        and A.insp_no = D.insp_no_id and
                        D.status_flag  in (1,2,3)   ''',[desig_code])
                        mom_total_item_overdue = cursor.fetchall()
                        mom_total_total_item_overdue +=mom_total_item_overdue[0][0]

                        # %complied 
                        try:
                            mom_per_complied = ((mom_total_item-mom_total_item_pending)/mom_total_item)*100
                            
                        except:
                            mom_per_complied = 0


                        my_data.append({'rly':i,"total_inspection":total_inspection,"total_closed":total_closed,
                        "total_open":total_open,"total_item":total_item,"total_item_pending":total_item_pending,
                        'total_item_overdue':total_item_overdue,"per_complied":per_complied,"mom_total_inspection":mom_total_inspection,"mom_total_closed":mom_total_closed,
                        "mom_total_open":mom_total_open,"mom_total_item":mom_total_item,"mom_total_item_pending":mom_total_item_pending,
                        'mom_total_item_overdue':mom_total_item_overdue,"mom_per_complied":mom_per_complied})
                
                try:
                
                    total_total_per_complied = ((total_total_item-total_total_item_pending)/total_total_item)*100
                except:
                
                    total_total_per_complied = 0
                try:
                
                    mom_total_total_per_complied = ((mom_total_total_item-mom_total_total_item_pending)/mom_total_total_item)*100
                except:
                
                    mom_total_total_per_complied = 0

                # print("mydata",total_total_item_overdue)
                return JsonResponse({'rly_list':my_data,'total_total_inspection':total_total_inspection,"total_total_closed":total_total_closed,
                "total_total_open":total_total_open,"total_total_item":total_total_item,"total_total_item_pending":total_total_item_pending,
                "total_total_item_overdue":total_total_item_overdue,"total_total_per_complied":total_total_per_complied,'mom_total_total_inspection':mom_total_total_inspection,"mom_total_total_closed":mom_total_total_closed,
                "mom_total_total_open":mom_total_total_open,"mom_total_total_item":mom_total_total_item,"mom_total_total_item_pending":mom_total_total_item_pending,
                "mom_total_total_item_overdue":mom_total_total_item_overdue,"mom_total_total_per_complied":mom_total_total_per_complied}, safe=False)
            
            else:
                # DATA FROM AJAX issues By Officer
                if created_on:
                    # print("inside if")
                    print("mydate",len(created_on.split('to')[0].strip()))
                    print("mydate1",created_on.split('to')[0].strip(),created_on.split('to')[1].strip())
                    datefrom = datetime.strptime(created_on.split('to')[0].strip(),'%d/%m/%y')
                    dateto = datetime.strptime(created_on.split('to')[1].strip(),'%d/%m/%y')
                    for i in l:
                        desig_code = models.Level_Desig.objects.exclude(delete_flag=True).filter(designation = i)[0].designation_code

                        # total inspection notes
                        cursor = connection.cursor()
                        cursor.execute(''' SELECT count( DISTINCT A.inspection_no) total_inspection
                        FROM public.inspects_inspection_details A,
                        public.myadmin_level_desig B
                        where A.inspection_officer_id = B.designation_code and A.status_flag!=0 and
                                A.inspection_officer_id = %s and
                                (A.inspected_on >= %s and A.inspected_on <= %s) ''',[desig_code,datefrom,dateto])
                        total_inspection = cursor.fetchall()
                        total_total_inspection +=total_inspection[0][0]
                        cursor.close()
                        # print("total_inspection45",total_inspection[0][0])

                        # total_closed
                        cursor = connection.cursor()
                        cursor.execute(''' SELECT count( DISTINCT A.inspection_no) total_closed
                        FROM public.inspects_inspection_details A,
                        public.myadmin_level_desig B
                    
                        where A.inspection_officer_id = B.designation_code and A.status_flag=4 and
                                A.inspection_officer_id = %s and
                                (A.inspected_on >= %s and A.inspected_on <= %s) ''',[desig_code,datefrom,dateto])
                        total_closed = cursor.fetchall()
                        total_total_closed +=total_closed[0][0]
                        cursor.close()

                        # pending
                        cursor = connection.cursor()
                        cursor.execute(''' SELECT count( DISTINCT A.inspection_no) total_open
                        FROM public.inspects_inspection_details A,
                        public.myadmin_level_desig B
                    
                        where A.inspection_officer_id = B.designation_code and A.status_flag between 1 and 3 and
                                A.inspection_officer_id = %s and
                                (A.inspected_on >= %s and A.inspected_on <= %s) ''',[desig_code,datefrom,dateto])
                        total_open = cursor.fetchall()
                        total_total_open +=total_open[0][0]
                        cursor.close()

                        # total_item
                        cursor = connection.cursor()
                        
                        cursor.execute(''' SELECT count( distinct B.item_no_id) total_item
                        FROM public.inspects_inspection_details A,
                        public.inspects_marked_officers B,
                    
                        public.inspects_item_details D
                        where  A.status_flag>0 and
                            B.item_no_id=D.item_no and
                                
                        A.inspection_no = D.inspection_no_id and D.status_flag >0 and A.inspection_officer_id = %s and
                                (A.inspected_on >= %s and A.inspected_on <= %s) ''',[desig_code,datefrom,dateto])

                        
                        total_item = cursor.fetchall()
                        total_total_item +=total_item[0][0]
                        cursor.close()

                        # total_item_pending
                        cursor = connection.cursor()
                        cursor.execute(''' SELECT count( distinct B.item_no_id) total_item
                        FROM public.inspects_inspection_details A,
                        public.inspects_marked_officers B,
                    
                        public.inspects_item_details D
                        where  A.status_flag between 1 and 3 and
                            B.item_no_id=D.item_no and
                            
                        A.inspection_no = D.inspection_no_id and D.status_flag between 1 and 3 and A.inspection_officer_id = %s and
                                (A.inspected_on >= %s and A.inspected_on <= %s) ''',[desig_code,datefrom,dateto])
                        total_item_pending = cursor.fetchall()
                        total_total_item_pending +=total_item_pending[0][0]
                        cursor.close()


                        # total_item_overdue
                        cursor = connection.cursor()
                        cursor.execute(''' SELECT count( distinct B.item_no_id) total_item
                        FROM public.inspects_inspection_details A,
                        public.inspects_marked_officers B,
                    
                        public.inspects_item_details D
                        where B.item_no_id=D.item_no and A.status_flag between 1 and 4 and
                                
                        A.inspection_no = D.inspection_no_id and D.status_flag between 1 and 3 and
                                D.target_date < now() and A.inspection_officer_id = %s and
                                (A.inspected_on >= %s and A.inspected_on <= %s) ''',[desig_code,datefrom,dateto])
                        total_item_overdue = cursor.fetchall()
                        total_total_item_overdue +=total_item_overdue[0][0]
                        cursor.close()

                        # %complied 
                        try:
                            per_complied = ((total_item[0][0]-total_item_pending[0][0])/total_item[0][0])*100
                            
                        except:
                            per_complied = 0


                        # ####################### MOM INSPECTION REPORT #########################################
                        # total complaince
                        cursor = connection.cursor()
                        cursor.execute(''' SELECT count( DISTINCT A.insp_no) total_inspection
                        FROM public.mom_insp_details A,
                        public.myadmin_level_desig B
                        where A.mom_officer_id = B.designation_code and A.status_flag!=0 and
                        A.mom_officer_id = %s and (A.mom_date >= %s and A.mom_date <= %s) ''',[desig_code,datefrom,dateto])
                        mom_total_inspection = cursor.fetchall()
                        mom_total_total_inspection +=mom_total_inspection[0][0]
                        cursor.close()

                        # total_closed
                        cursor = connection.cursor()
                        cursor.execute(''' SELECT count( DISTINCT A.insp_no) total_closed
                        FROM public.mom_insp_details A,
                        public.myadmin_level_desig B
                        where A.mom_officer_id = B.designation_code and A.status_flag=4 and
                        A.mom_officer_id = %s and (A.mom_date >= %s and A.mom_date <= %s)  ''',[desig_code,datefrom,dateto])
                        mom_total_closed = cursor.fetchall()
                        mom_total_total_closed +=mom_total_closed[0][0]
                        print("total_inspection7777777777closed",mom_total_closed)

                        # pending
                        cursor = connection.cursor()
                        cursor.execute('''  SELECT count( DISTINCT A.insp_no) total_open
                        FROM public.mom_insp_details A,
                        public.myadmin_level_desig B
                    
                        where A.mom_officer_id = B.designation_code and A.status_flag between 1 and 3 and
                        A.mom_officer_id = %s and (A.mom_date >= %s and A.mom_date <= %s) ''',[desig_code,datefrom,dateto])
                        mom_total_open = cursor.fetchall()
                        mom_total_total_open +=mom_total_open[0][0]
                        # print("total_inspection7777777777total_open",mom_total_open)

                        # total_item
                        cursor = connection.cursor()
                        cursor.execute(''' SELECT count( distinct B.item_no_id) total_item
                        FROM public.mom_insp_details A,
                        public.mom_marked_members B,
                    
                        public.mom_item_details D
                        where  A.status_flag>0 and
                            B.item_no_id=D.item_no and
                                
                        A.insp_no = D.insp_no_id and D.status_flag >0 and A.mom_officer_id = %s and (A.mom_date >= %s and A.mom_date <= %s) ''',[desig_code,datefrom,dateto])
                        mom_total_item = cursor.fetchall()
                        mom_total_total_item +=mom_total_item[0][0]
       

                        # total_item_pending
                        cursor = connection.cursor()
                        cursor.execute(''' SELECT count( distinct B.item_no_id) total_item
                        FROM public.mom_insp_details A,
                            public.mom_marked_members B,
                        
                        public.mom_item_details D
                        where  A.status_flag between 1 and 3 and
                            B.item_no_id=D.item_no and
                                
                        A.insp_no = D.insp_no_id and D.status_flag between 1 and 3 and A.mom_officer_id = %s and (A.mom_date >= %s and A.mom_date <= %s)''',[desig_code,datefrom,dateto])
                        mom_total_item_pending = cursor.fetchall()
                        mom_total_total_item_pending +=mom_total_item_pending[0][0]
                     
                        # total_item_overdue
                        cursor = connection.cursor()
                        cursor.execute(''' SELECT count( distinct B.item_no_id) total_item
                        FROM public.mom_insp_details A,
                            public.mom_marked_members B,
                        
                        public.mom_item_details D
                        where B.item_no_id=D.item_no and A.status_flag between 1 and 4 and
                                
                        A.insp_no = D.insp_no_id and D.status_flag between 1 and 3 and
                                D.target_date < now() and A.mom_officer_id = %s and (A.mom_date >= %s and A.mom_date <= %s) ''',[desig_code,datefrom,dateto])
                        mom_total_item_overdue = cursor.fetchall()
                        mom_total_total_item_overdue +=mom_total_item_overdue[0][0]

                        # %complied 
                        try:
                            mom_per_complied = ((mom_total_item-mom_total_item_pending)/mom_total_item)*100
                            
                        except:
                            mom_per_complied = 0
                        

                        my_data.append({'rly':i,"total_inspection":total_inspection[0][0],"total_closed":total_closed[0][0],
                        "total_open":total_open[0][0],"total_item":total_item[0][0],"total_item_pending":total_item_pending[0][0],
                        'total_item_overdue':total_item_overdue[0][0],"per_complied":per_complied,"mom_total_inspection":mom_total_inspection,"mom_total_closed":mom_total_closed,
                        "mom_total_open":mom_total_open,"mom_total_item":mom_total_item,"mom_total_item_pending":mom_total_item_pending,
                        'mom_total_item_overdue':mom_total_item_overdue,"mom_per_complied":mom_per_complied})
    
                try:
                
                    total_total_per_complied = ((total_total_item-total_total_item_pending)/total_total_item)*100
                except:
                
                    total_total_per_complied = 0
                
                try:
                
                    mom_total_total_per_complied = ((mom_total_total_item-mom_total_total_item_pending)/mom_total_total_item)*100
                except:
                
                    mom_total_total_per_complied = 0

                print("mydata",my_data)
                return JsonResponse({'rly_list':my_data,'total_total_inspection':total_total_inspection,"total_total_closed":total_total_closed,
                "total_total_open":total_total_open,"total_total_item":total_total_item,"total_total_item_pending":total_total_item_pending,
                "total_total_item_overdue":total_total_item_overdue,"total_total_per_complied":total_total_per_complied,'mom_total_total_inspection':mom_total_total_inspection,"mom_total_total_closed":mom_total_total_closed,
                "mom_total_total_open":mom_total_total_open,"mom_total_total_item":mom_total_total_item,"mom_total_total_item_pending":mom_total_total_item_pending,
                "mom_total_total_item_overdue":mom_total_total_item_overdue,"mom_total_total_per_complied":mom_total_total_per_complied}, safe=False)
       
        
        return JsonResponse({'success':False}, status=400)
     
    # except Exception as e: 
    #     try:
    #         m1.error_Table.objects.create(fun_name="fetch_desig_ajax",user_id=request.user,err_details=str(e))
    #     except:
    #         print("Internal Error!!!")
    #     return render(request, "errorspage.html", {})

def zone_get_accompany_officers(request):
    if request.method == 'GET' and request.is_ajax():
        zone = request.GET.get('rly_data')
        

        # div = request.GET.get('divs').split(',')
        empnox = models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=request.user)| Q(official_email_ID=request.user.guest_email) | Q(official_email_ID=request.user.email), empno__isnull=False)
        empnumber=None
        if empnox:
            empnumber = empnox[0].designation_code
        data=[]

        if zone!=None:
            zone = request.GET.get('rly_data').split(',')
            
            # Div wise filter
            # if div[0]=="":
            #    pass
            # else:
            #   for i in range(len(div)):
            #     l_id=list(models.railwayLocationMaster.objects.filter(Q(location_code=div[i])).values('rly_unit_code'))
            #     print(l_id)
            #     if len(l_id)>0:
            #         for x in range(len(l_id)):
            #             desg_no=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation__isnull=False,rly_unit=l_id[x]['rly_unit_code']).exclude(designation_code=empnumber).values('designation','empno', 'designation_code').order_by('designation'))
            #             if len(desg_no)>0:
            #                 if desg_no not in data:
            #                     data.extend(desg_no) 
            
            # Zone wise filter
            for i in range(len(zone)):
                l_id=list(models.railwayLocationMaster.objects.filter(Q(location_code=zone[i])).values('rly_unit_code'))
                if len(l_id)>0:
                    desg_no=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation__isnull=False,rly_unit=l_id[0]['rly_unit_code']).exclude(designation_code=empnumber).values('designation','empno', 'designation_code').order_by('designation'))
                    if len(desg_no)>0:
                        if desg_no not in data:
                            data.extend(desg_no)
            print(len(data))
            for i in range(len(zone)):
                l_id=list(models.railwayLocationMaster.objects.filter(Q(parent_location_code=zone[i])).values('rly_unit_code'))
                if len(l_id)>0:
                    for x in range(len(l_id)):
                        desg_no=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation__isnull=False,rly_unit=l_id[x]['rly_unit_code']).exclude(designation_code=empnumber).values('designation','empno', 'designation_code').order_by('designation'))
                        if len(desg_no)>0:
                            if desg_no[0] not in data:
                                data.extend(desg_no) 
        
        #All other officers
        desg_no=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation__isnull=False).exclude(designation_code=empnumber).values('designation','empno', 'designation_code').order_by('designation'))
        for x in range(len(desg_no)):
            # print(desg_no[x])
            if desg_no[x] not in data:
                data.append(desg_no[x])
        print(len(data))
        return JsonResponse(data, safe=False)
    return JsonResponse({'success': False}, status=400)








###  image upload
from django.core.files.storage import FileSystemStorage
import os
def upload_img(request): 
    if request.method == "POST" and request.is_ajax():
        op = request.POST.get('op')
        if op == 'upload':
            file=request.FILES.get('file')
            folder='Inspection/'
            empnox = models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=request.user)| Q(official_email_ID=request.user.guest_email) | Q(official_email_ID=request.user.email), empno__isnull=False)
            empnumber = 0
            if empnox:
                empnumber = empnox[0].designation_code
            f1 = str(file)
            for1 = f1.split('.')
            for1 = for1[len(for1)-1]
            fs=FileSystemStorage(location='media/Inspection/')
            filename = 'insp_'+str(datetime.today().strftime('%Y%m%d %H%M%S'))+'_d'+str(empnumber)+'.'+str(for1)
            filename = filename.replace(' ','_')
            files=fs.save(file.name,file)
            
            f2 ='media/Inspection/'+str(files)
            os.rename(f2, 'media/Inspection/'+filename)
            files = filename
            data={'file':files}
            return JsonResponse(data, safe = False)
        else:
            file=request.POST.get('file')
            os.remove(file[1:])
            return JsonResponse('', safe = False)
    return JsonResponse({'success': False}, status=400)


#APEKSHA CODE FOR SEARCH INSPECTION
from datetime import date,datetime,timedelta
from dateutil.relativedelta import relativedelta
def fetch_desig_ajax_search(request):
    # try:
        if request.method == 'GET' and request.is_ajax():
            location_code=json.loads(request.GET.get("location_code"))
            location_type=json.loads(request.GET.get("location_type"))
            dept=json.loads(request.GET.get("dept"))
            obser=request.GET.get("query")
            created_on=request.GET.get('created_on')
            designation=json.loads(request.GET.get("designation"))
            status=json.loads(request.GET.get('status'))
            typeInsp=request.GET.get('typeInsp')
            newstatus=[]
            print(location_code,location_type)
            if status:
                for i in status:
                    if i=='Closed':
                        newstatus.append(4)
                    if i=='Pending':
                        newstatus.append(1)
                        newstatus.append(2)
                        newstatus.append(3)
            else:
                newstatus=[1,2,3,4]

            if len(location_code)==0:
                # location_code=list(m1.Insp_multi_location.objects.filter(type='HQ').distinct('item').values_list('item',flat=True))
                location_code=list(models.railwayLocationMaster.objects.filter(location_type='ZR').distinct('location_code').values_list('location_code',flat=True))

            
            if len(location_type)==0:
                loc_name=list(models.railwayLocationMaster.objects.filter(Q(location_type_desc='DIVISION')|Q(location_type_desc='WORKSHOP')|Q(location_type_desc='INSTITUTE')|Q(location_type_desc='STORE')|Q(location_type_desc='CONSTRUCTION'),parent_location_code__in=location_code).values_list('location_code',flat=True).distinct('location_code'))
                loc_types=list(models.railwayLocationMaster.objects.filter(Q(location_type_desc='DIVISION')|Q(location_type_desc='WORKSHOP')|Q(location_type_desc='INSTITUTE')|Q(location_type_desc='STORE')|Q(location_type_desc='CONSTRUCTION'),parent_location_code__in=location_code).values_list('location_type',flat=True).distinct('location_type'))
            else:
                loc_types=[]
                loc_name=[]
                for l in location_type:
                    loc_types.append(l.split('-')[1])
                    loc_name.append(l.split('-')[0])
            
            if len(designation)==0:
                # designation=list(m1.Inspection_details.objects.filter().distinct('inspection_officer').values_list('inspection_officer',flat=True)) 
                designation=list(models.Level_Desig.objects.filter().distinct('designation_code').values_list('designation_code',flat=True)) 

            else:
                designation=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation__in=designation).values_list('designation_code',flat=True).distinct('designation_code'))
            
            if created_on=='':
                startDate=date.today() - relativedelta(years = 50)
                endDate=date.today()
            else:
                print(created_on,"hello ap")
                if 'to' in created_on:
                    startDate=created_on.split('to')[0].strip()
                    startDate = datetime.strptime(startDate,'%d/%m/%Y')
                    endDate=created_on.split('to')[1].strip()
                    endDate = datetime.strptime(endDate,'%d/%m/%Y')
                else:
                    startDate=created_on.strip()
                    startDate = datetime.strptime(startDate,'%d/%m/%Y')
                    endDate=created_on.strip()
                    endDate = datetime.strptime(endDate,'%d/%m/%Y')
            startDate = datetime.strftime(startDate,'%Y-%m-%d')
            endDate = datetime.strftime(endDate,'%Y-%m-%d')
            
            locations=list(m1.Insp_multi_location.objects.filter(Q(item__in=location_code)| Q(item__in=loc_name, type__in=loc_types)).values_list('inspection_no',flat=True).distinct('inspection_no'))
            if len(location_type)!=0:
                locations=list(m1.Insp_multi_location.objects.filter( Q(item__in=loc_name, type__in=loc_types)).values_list('inspection_no',flat=True).distinct('inspection_no'))
                # print(locations)
            ins=list(m1.Inspection_details.objects.filter(inspection_no__in=locations,inspection_officer__in=designation,status_flag__in=newstatus,inspected_on__gte=startDate,inspected_on__lte=endDate).values())

            
            insp_filtered=[]
            for i in ins:
                ofc=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i['inspection_officer_id']).values('designation'))
                if ofc:
                    ofc=ofc[0]['designation']
                else:
                    ofc='NA'
                i.update({'insp_ofc':ofc})
                insp_filtered.append(i['inspection_no'])
                locs=list(m1.Insp_multi_location.objects.filter(inspection_no=i['inspection_no']).values('item','type'))
                rly=[]
                div=[]
                for l in locs:
                    if l['type']=='HQ':
                        rly.append(l['item'])
                    elif l['type']!='LOC':
                        d=l['item']+'-'+ l['type']
                        div.append(d)
                i.update({'rly':rly,'div':div})

            
            if typeInsp == '-1':
                phase2=[]
            elif typeInsp == 'all':
                phase2=list(m2.einspection_details.objects.filter(rly_id_id__location_code__in=location_code, div_id_id__location_code__in=loc_types,inspected_on__lte=startDate,inspected_on__gte=endDate,designation_id__in=designation,status__in=newstatus).values())
            else:
                ins=[]
                phase2=list(m2.einspection_details.objects.filter(rly_id_id__location_code__in=location_code, div_id_id__location_code__in=loc_types,inspected_on__lte=startDate,inspected_on__gte=endDate,instypeid_id=typeInsp,designation_id__in=designation,status__in=newstatus).values('inspected_on','einspno','instypeid__name','designation__designation','inspection_note_no','rly_id_id__location_code','div_id_id__location_code','inspection_title','status'))
            print(phase2,'phase2')
            
            

            listsearch=[]
            
            if obser!='' and obser!='@@' :
                words=obser.split(' ')
                for w in words:
                    # titlesearch=list(m1.Inspection_details.objects.filter(inspection_title__icontains=w,inspection_no__in=insp_filtered))
                    listsearch=list(m1.Item_details.objects.filter(Q(observation__icontains=w) | Q(inspection_no_id__inspection_title__icontains=w),inspection_no_id__in=insp_filtered).values('item_no','observation','inspection_no_id__inspection_title','inspection_no_id__inspected_on','inspection_no_id','inspection_no_id__inspection_note_no','inspection_no_id__inspection_officer_id__designation','inspection_no_id__status_flag').distinct('inspection_no_id').exclude(inspection_no_id__status_flag=0))
                    
                    for i in range(len(listsearch)):
                        title=False
                        print(w)
                        if m1.Item_details.objects.filter(inspection_no_id__inspection_title__icontains=w,inspection_no_id=listsearch[i]['inspection_no_id']).exists():
                            title=True

                        paras=list(m1.Item_details.objects.filter(observation__icontains=w,inspection_no_id=listsearch[i]['inspection_no_id']).values_list('des_id',flat=True))
                        print(paras)
                        if title:
                            listsearch[i]['observation']=listsearch[i]['inspection_no_id__inspection_title']
                            if len(paras):
                                paras.append('Title')
                            else:
                                paras=['Title']
                                

                        print(paras)
                        listsearch[i].update({'paras':paras})
                        if listsearch[i]['inspection_no_id__inspected_on']!=None:
                            x=listsearch[i]['inspection_no_id__inspected_on'].strftime('%d'+'/'+'%m'+'/'+'%Y')
                            listsearch[i].update({'inspection_no_id__inspected_on':x})
                        locs=list(m1.Insp_multi_location.objects.filter(inspection_no=listsearch[i]['inspection_no_id']).values('item','type'))
                        rly=[]
                        div=[]
                        for l in locs:
                            if l['type']=='HQ':
                                rly.append(l['item'])
                            elif l['type']!='LOC':
                                d=l['item']+'-'+ l['type']
                                div.append(d)
                        listsearch[i].update({'rly':rly,'div':div})
                        print(listsearch[i])
            
            return JsonResponse({'ins':ins,'listsearch':listsearch,'phase2':phase2}, safe=False)
        return JsonResponse({'success':False}, status=400)
    # except Exception as e: 
    #     try:
    #         m1.error_Table.objects.create(fun_name="fetch_desig_ajax",user_id=request.user,err_details=str(e))
    #     except:
    #         print("Internal Error!!!")
    #     return render(request, "errorspage.html", {})

def search_locat_ajax(request):
    try:
        if request.method== 'GET' and request.is_ajax():
            grou=json.loads(request.GET.get("rly_data_hrms"))
            divisions=json.loads(request.GET.get("div_data_hrms"))
            
            newdiv = []
            for x in divisions:
                x1=x.split('-')
                newdiv.append(x1[0])
            div_unit_code =list( models.railwayLocationMaster.objects.filter(location_code__in = newdiv).values_list('rly_unit_code', flat=True))
            rly_unit_code = list(models.railwayLocationMaster.objects.filter(location_code__in = grou).values_list('rly_unit_code', flat=True))

            if grou ==[] and divisions==[]:
                ins=models.railwayLocationMaster.objects.filter(Q(location_type_desc='DIVISION')|Q(location_type_desc='WORKSHOP')|Q(location_type_desc='INSTITUTE')|Q(location_type_desc='STORE')|Q(location_type_desc='CONSTRUCTION')).values('location_code','location_type')
                insdesig=list(models.Level_Desig.objects.exclude(delete_flag=True).filter().values_list('designation',flat=True).distinct('designation'))

            else:
                ins=list(models.railwayLocationMaster.objects.filter(Q(location_type_desc='DIVISION')|Q(location_type_desc='WORKSHOP')|Q(location_type_desc='INSTITUTE')|Q(location_type_desc='STORE')|Q(location_type_desc='CONSTRUCTION'),parent_location_code__in=grou).values('location_code', 'location_type'))
                insdesig=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(Q(rly_unit_id__in=rly_unit_code) | Q(rly_unit_id__in=div_unit_code)).values_list('designation',flat=True).distinct('designation'))
            
            l=[]
            for i in ins:
                l.append({'location_code':i['location_code'],'location_type':i['location_type']})
            
            context={
                'ins':l,
                'insdesig':insdesig,
            } 
            return JsonResponse(context, safe=False)
        return JsonResponse({'success':False}, status=400)
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="search_locat_ajax",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {}) 


def getdiv_rly_desig(request):
    try:
        if request.method == "GET" or request.is_ajax():
            rly=request.GET.get('rly_data_hrms')
            newrly = json.loads(rly)
            cuser=request.user.username
            if request.user.user_role == 'guest':
                cuser=request.user.guest_email
                request.user.email=request.user.guest_email
            desigid=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].designation_code
            pclevel=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=desigid).values().order_by())
            rly_unit_code = models.railwayLocationMaster.objects.get(location_code = newrly).rly_unit_code
            
            division=list(models.railwayLocationMaster.objects.filter(location_type_desc__in=['DIVISION','WORKSHOP'],parent_location_code=newrly).order_by('location_code').values('location_code'))
            print(rly_unit_code,'rly_unit_code')
            designation=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(~(Q(empno_id=None)|Q(designation_code=desigid))).filter(pc7_levelmin__lte=pclevel[0]['pc7_levelmin'],rly_unit_id=rly_unit_code).distinct().values('designation').order_by('-pc7_levelmin'))
            context={
                    'division':division,
                    "desig":designation
                }
            
            return JsonResponse(context,safe = False)
        return JsonResponse({"success":False}, status = 400)
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="getdiv_rly_hrms",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {}) 


def getdiv_div_desig(request):
    try:
        if request.method == "GET" or request.is_ajax():
            rly=request.GET.get('rly_data_hrms')
            newrly = json.loads(rly)
            div=request.GET.get('div_data_hrms')
            newdiv = json.loads(div)

            cuser=request.user.username
            if request.user.user_role == 'guest':
                cuser=request.user.guest_email   
                request.user.email=request.user.guest_email
            desigid=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].designation_code
            pclevel=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=desigid).values().order_by())
            rly_unit_code = models.railwayLocationMaster.objects.get(location_code = newrly).rly_unit_code

            if newdiv=='all':
                designation=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(~(Q(empno_id=None)|Q(designation_code=desigid))).filter(pc7_levelmin__lte=pclevel[0]['pc7_levelmin'],rly_unit_id=rly_unit_code).distinct().values('designation').order_by('-pc7_levelmin'))

            else:
                rly_unit_code =list( models.railwayLocationMaster.objects.filter(location_code = newdiv).values_list('rly_unit_code', flat=True))
                designation=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(~(Q(empno_id=None)|Q(designation_code=desigid))).filter(pc7_levelmin__lte=pclevel[0]['pc7_levelmin'],rly_unit_id__in=rly_unit_code).distinct().values('designation').order_by('-pc7_levelmin'))
            context={
                    "desig":designation
                }
            return JsonResponse(context,safe = False)
        return JsonResponse({"success":False}, status = 400)
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="getdiv_rly_hrms",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})



def get_panel_officers(request):
    try:
        if request.method == "GET" or request.is_ajax():
            # print("yaay")
            cuser=request.user.username
            if request.user.user_role == 'guest':
                cuser=request.user.guest_email
                request.user.email=request.user.guest_email
            desigid=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].designation_code
            # print(desigid,"helloooooo")
            rly_code=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].rly_unit.location_code
            rly_unit_code=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].rly_unit.rly_unit_code
            parent_loc=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].rly_unit.parent_location_code
            parent_loc_id=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].rly_unit.parent_rly_unit_code
            div_code=rly_code
            div_unit_code=rly_unit_code
            if parent_loc!='RB':
                div_code=rly_code
                rly_code=parent_loc
                rly_unit_code=parent_loc_id
            pclevel=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=desigid).values().order_by()) 
            designation=list(models.Level_Desig.objects.exclude(delete_flag=True).exclude(Q(empno_id=None),designation_code=desigid).filter(parent_desig_code=desigid).distinct().values('designation','empno_id','designation_code').order_by('-pc7_levelmin'))
            print(designation)
            # designation=list(models.Level_Desig.objects.exclude(delete_flag=True).exclude(Q(empno_id=None),designation_code=desigid).filter(parent_desig_code=desigid, rly_unit__in=[rly_unit_code,div_unit_code]).distinct().values('designation','empno_id').order_by('-pc7_levelmin'))
            for d in designation:
                empfname=m1.empmast.objects.filter(empno=d['empno_id'])
                if empfname:
                    empfname=m1.empmast.objects.filter(empno=d['empno_id'])[0].empname
                else:
                    empfname='NA'
                # empmname=m1.empmast.objects.filter(empno=d['empno_id'])[0].empmname
                # emplname=m1.empmast.objects.filter(empno=d['empno_id'])[0].emplname
                # print(empfname)
                d.update({'name':empfname})
            context={
                    "desig":designation
                }
            return JsonResponse(context,safe = False)
        return JsonResponse({"success":False}, status = 400)
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="getdiv_rly_hrms",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})
    
    
def forward_officer(request):
    try:
        if request.method == "GET" or request.is_ajax():
            cuser=request.user.username
            if request.user.user_role == 'guest':
                cuser=request.user.guest_email
                request.user.email=request.user.guest_email
            desigid=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].designation_code
            val=request.GET.get('val')
           
            if val == '1':
                item_no=json.loads(request.GET.get('item_no'))
                if ',' in item_no:
                    item_no=item_no.split(',')
                else:
                    item_no=int(item_no)
                    item=[item_no]
                    item_no=item
            else:
                item_no=json.loads(request.GET.get('item_no'))
            for_desigs=[]
            marked_no=list(m1.Marked_Officers.objects.filter(marked_to_id=desigid,item_no_id__in=item_no).values_list('marked_no',flat=True))
            print(marked_no)
            if marked_no:
                officers=list(m1.Marked_Officers_forward.objects.filter(marked_no_id__in=marked_no).values_list('marked_to_forward_id', flat=True))
                if officers:
                    for_desigs=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=officers).values_list('designation',flat=True))
            context={"for_desigs":for_desigs}
            return JsonResponse(context,safe = False)
        return JsonResponse({"success":False}, status = 400)
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="getdiv_rly_hrms",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
            return render(request, "errorspage.html", {})



###################################### changed on and after 27/03/2023  

def zone_get_marked_officers(request):
    if request.method == 'GET' and request.is_ajax():
        zone = request.GET.get('zone').split(',')
        div = request.GET.get('divs').split(',')
        
        c=0
        empnox = models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=request.user)| Q(official_email_ID=request.user.guest_email) | Q(official_email_ID=request.user.email), empno__isnull=False)
        empnumber=None
        if empnox:
            empnumber = empnox[0].designation_code
        data=[]
        if zone[0]=="" and div[0]=="":
            data=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation__isnull=False).exclude(designation_code=empnumber).values('designation','empno', 'designation_code').order_by('designation'))
        elif div[0]=="":
           pass
        else:
          for i in range(len(div)):
            l_id=list(models.railwayLocationMaster.objects.filter(Q(location_code=div[i])).values('rly_unit_code'))
            if len(l_id)>0:
                for x in range(len(l_id)):
                    desg_no=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation__isnull=False,rly_unit=l_id[x]['rly_unit_code']).exclude(designation_code=empnumber).values('designation','empno', 'designation_code').order_by('designation'))
                    if len(desg_no)>0:
                        if desg_no not in data:
                            data.extend(desg_no) 
        for i in range(len(zone)):
            l_id=list(models.railwayLocationMaster.objects.filter(Q(location_code=zone[i])).values('rly_unit_code'))
            if len(l_id)>0:
                desg_no=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation__isnull=False,rly_unit=l_id[0]['rly_unit_code']).exclude(designation_code=empnumber).values('designation','empno', 'designation_code').order_by('designation'))
                if len(desg_no)>0:
                    if desg_no not in data:
                        data.extend(desg_no)
        for i in range(len(zone)):
            l_id=list(models.railwayLocationMaster.objects.filter(Q(parent_location_code=zone[i])).values('rly_unit_code'))
            if len(l_id)>0:
                for x in range(len(l_id)):
                    desg_no=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation__isnull=False,rly_unit=l_id[x]['rly_unit_code']).exclude(designation_code=empnumber).values('designation','empno', 'designation_code').order_by('designation'))
                    if len(desg_no)>0:
                        if desg_no[0] not in data:
                            data.extend(desg_no) 
        for i in range(len(data)):
            if '/' in data[i]['designation']:
                r_des=data[i]['designation'].replace('/',' ')
            elif '.' in data[i]['designation']:
                r_des=data[i]['designation'].replace('.',' ')
            else:
                r_des=data[i]['designation']
            data[i].update({'empnoser':r_des})
        unofficer = list(models.Level_Desig.objects.exclude(delete_flag=True).filter(parent_desig_code=empnumber).values_list('designation_code',flat=True).order_by('designation'))
        data1 = list(filter(lambda x: x['designation_code'] in unofficer, data))
        data1 = sorted(data1, key = lambda x: x['designation'])
        data2 = list(filter(lambda x: x['designation_code'] not in unofficer, data))
        data2 = sorted(data2, key = lambda x: x['designation'])
        data = data1 + data2
        return JsonResponse(data, safe=False)
    return JsonResponse({'success': False}, status=400)

def copy_get_marked_officers(request):
    if request.method == 'POST' and request.is_ajax():
        officer_id = json.loads(request.POST.get('officer_id'))
        empnox = models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=request.user)| Q(official_email_ID=request.user.guest_email) | Q(official_email_ID=request.user.email), empno__isnull=False)
        empnumber=None
        if empnox:
            empnumber = empnox[0].designation_code
        data=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=officer_id).exclude(designation_code=empnumber).values('designation','empno', 'designation_code').order_by('designation'))
        for i in range(len(data)):
            if '/' in data[i]['designation']:
                r_des=data[i]['designation'].replace('/',' ')
            elif '.' in data[i]['designation']:
                r_des=data[i]['designation'].replace('.',' ')
            else:
                r_des=data[i]['designation']
            data[i].update({'empnoser':r_des})
        print(data)
        return JsonResponse(data, safe=False)
    return JsonResponse({'success': False}, status=400)

#21-07-2023
# def create_inspection_form(request):
#     try:
#         print(request.user)
#         empnox = models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=request.user)| Q(official_email_ID=request.user.guest_email) | Q(official_email_ID=request.user.email), empno__isnull=False)
#         empnumber=None
#         dlevel=None
#         rly_unit_id=None
#         if empnox:
#             empno = empnox[0].empno
#             empnumber = empnox[0].designation_code
#             dlevel = empnox[0].d_level
#             rly_unit_id = empnox[0].rly_unit_id
#         empdata = models.Level_Desig.objects.exclude(delete_flag=True).filter(official_email_ID=request.user).values('designation', 'station_name','empno','empno__empname','empno__empmname','empno__emplname')
#         insp_ofc_name=''
#         if empdata:
#             employee_fname =empdata[0]['empno__empname']
#             if employee_fname:
#                 insp_ofc_name = employee_fname + " "


#             employee_mname = empdata[0]['empno__empmname']
#             if employee_mname:
#                 insp_ofc_name += employee_mname + " "


#             employee_lname = empdata[0]['empno__emplname']
#             if employee_lname:
#                 insp_ofc_name += employee_lname
#         else:
#             insp_ofc_name = 'NA'


           
#         if empdata:
#             desig_longdesc = empdata[0]['designation']
#             station_name = empdata[0]['station_name']
#         else:
#             desig_longdesc ='NA'
#             station_name='NA'
#         insp_desig=desig_longdesc




#         list1=models.railwayLocationMaster.objects.filter(location_type_desc__in=['RAILWAY BOARD', 'PRODUCTION UNIT', 'HEAD QUATER','OFFICE', 'PSU', 'PRODUCTION UNIT', 'INSTITUTE']).values('location_code').order_by('location_code')
#         list2=[]
#         for i in list1:
#             list2.append(i['location_code'])
#         list3=models.railwayLocationMaster.objects.filter(location_type_desc__in=['DIVISION','WORKSHOP']).values('location_code', 'location_type').order_by('location_code')
#         list4=[]
#         list5 =[]
#         for i in list3:
#             list4.append({'location_code':i['location_code'],'location_type':i['location_type']})
#         try:
           
#             list5=list(models.Level_Desig.objects.exclude(delete_flag=True).all().values('designation','designation_code'))  
#         except Exception as e:
#             print("e==",e)  
#         list6=models.departMast.objects.all().values('department_name').order_by('department_name')
#         alldesig=models.Level_Desig.objects.exclude(delete_flag=True).values('designation').distinct().order_by('designation')
#         location_array = [{'type_code':'RRM', 'type': 'Running Room'},
#                             {'type_code': 'SEM', 'type': 'Section'},
#                             {'type_code': 'STM', 'type': 'Station'},
#                             # {'type_code':'SOP' , 'type': 'Shop'},
#                             # {'type_code':'WOS' , 'type': 'Work Shop'},
#                             {'type_code':'DLS' , 'type': 'Diesel Loco Shed'},
#                             {'type_code':'ELS' , 'type': 'Electric Loco Shed'},
#                             {'type_code':'COD' , 'type': 'Coaching Depot'},
#                             {'type_code':'WAD' , 'type': 'Wagon Depot'},
#                             { 'type_code': 'CTI', 'type': 'Training Institute'},
#                             { 'type_code': 'TRN', 'type': 'Train'},
#                             { 'type_code': 'HOS', 'type': 'Hospital'},
#                             { 'type_code': 'ORL', 'type': 'Other Rly Unit'},
#                            ]
#         location_array = sorted(location_array, key=lambda d: d['type'])

#         Zone11=models.Level_Desig.objects.exclude(delete_flag=True).exclude(rly_unit=None, official_email_ID = None).filter(Q(official_email_ID=request.user)| Q(official_email_ID=request.user.guest_email) | Q(official_email_ID=request.user.email)).values('rly_unit')
#         if Zone11:
#             Zone11 = Zone11[0]['rly_unit']
#             rly_zone = models.railwayLocationMaster.objects.filter(rly_unit_code=Zone11,location_type_desc__in=['RAILWAY BOARD', 'PRODUCTION UNIT', 'HEAD QUATER','OFFICE', 'PSU', 'PRODUCTION UNIT', 'INSTITUTE']).values('location_code').order_by('location_code')
#             if rly_zone:
#                 Zone1 = rly_zone[0]['location_code']
                
#                 setdiv = ''
#             else:
#                 rly_zone = models.railwayLocationMaster.objects.filter(rly_unit_code=Zone11,location_type_desc__in=['DIVISION','WORKSHOP']).values('location_code','parent_rly_unit_code').order_by('location_code')
               
#                 if rly_zone:
#                     setdiv = rly_zone[0]['location_code']
#                     rly_zone = models.railwayLocationMaster.objects.filter(rly_unit_code=rly_zone[0]['parent_rly_unit_code'],location_type_desc__in=['RAILWAY BOARD', 'PRODUCTION UNIT', 'HEAD QUATER','OFFICE', 'PSU', 'PRODUCTION UNIT', 'INSTITUTE']).values('location_code').order_by('location_code')
#                     if rly_zone:
#                         Zone1 = rly_zone[0]['location_code']
#                     else:
#                         Zone1 = ''
#                 else:
#                     Zone1 = ''
#                     setdiv = ''
#         else:
#             Zone1 = ''
#             setdiv = ''
   
#         desg_no=[]
#         if Zone1:
#             l_id=list(models.railwayLocationMaster.objects.filter(Q(location_code=Zone1)).values('rly_unit_code'))
#             if len(l_id)>0:
#                 datarlys=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation__isnull=False,rly_unit=l_id[0]['rly_unit_code']).exclude(designation_code=empnumber).values('designation','empno', 'designation_code').order_by('designation'))
#                 if len(datarlys)>0:
#                     if datarlys not in desg_no:
#                         desg_no.extend(datarlys)


#             l_id=list(models.railwayLocationMaster.objects.filter(Q(parent_location_code=Zone1)).values('rly_unit_code'))
#             if len(l_id)>0:
#                 for x in range(len(l_id)):
#                     datarlys=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation__isnull=False,rly_unit=l_id[x]['rly_unit_code']).exclude(designation_code=empnumber).values('designation','empno', 'designation_code').order_by('designation'))
#                     if len(datarlys)>0:
#                         if datarlys[0] not in desg_no:
#                             desg_no.extend(datarlys)
         
#             #All other officers
#             datarlys=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation__isnull=False).exclude(designation_code=empnumber).values('designation','empno', 'designation_code').order_by('designation'))
#             for x in range(len(datarlys)):
#                 # print(desg_no[x])
#                 if datarlys[x] not in desg_no:
#                     desg_no.append(datarlys[x])
         
#         else:
#             desg_no=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation__isnull=False).exclude(designation_code=empnumber).values('designation','empno', 'designation_code').order_by('designation'))


#         for i in range(len(desg_no)):
#             if '/' in desg_no[i]['designation']:
#                 r_des=desg_no[i]['designation'].replace('/',' ')
#             elif '.' in desg_no[i]['designation']:
#                 r_des=desg_no[i]['designation'].replace('.',' ')
#             else:
#                 r_des=desg_no[i]['designation']
#             desg_no[i].update({'empnoser':r_des})
#         desg_nounofficer = list(models.Level_Desig.objects.exclude(delete_flag=True).filter(parent_desig_code=empnumber).values_list('designation_code',flat=True).order_by('designation'))
#         desg_nodata1 = list(filter(lambda x: x['designation_code'] in desg_nounofficer, desg_no))
#         desg_nodata1 = sorted(desg_nodata1, key = lambda x: x['designation'])
#         desg_nodata2 = list(filter(lambda x: x['designation_code'] not in desg_nounofficer, desg_no))
#         desg_nodata2 = sorted(desg_nodata2, key = lambda x: x['designation'])
#         desg_no = desg_nodata1 + desg_nodata2
#         copy_no=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation__isnull=False).exclude(designation_code=empnumber).values('designation','empno', 'designation_code').order_by('designation'))
       
#         allDepartmentPhase2 = [{'department_name':'COMMON','department_code':0}]
#         allDepartmentPhase2.extend(list(models.departMast.objects.filter(delete_flag=False).values('department_name','department_code').order_by('department_name')))
#         for i in range(len(allDepartmentPhase2)):
#             if allDepartmentPhase2[i]['department_code'] == 0:
#                 inspTypePhase2 = list(models.inspectiontype_master.objects.filter(parent_id='-1',delete_flag=False,disable_flag=False,concerned_dept__isnull=True).values('instypeid','name'))

#             else:
#                 inspTypePhase2 = list(models.inspectiontype_master.objects.filter(parent_id='-1',delete_flag=False,disable_flag=False,concerned_dept=allDepartmentPhase2[i]['department_code']).values('instypeid','name'))
#             allDepartmentPhase2[i].update({'inspTypePhase2':inspTypePhase2})
#         allCategoryPhase2 = list(models.asset_master.objects.filter(disable_flag=False).values('asset_id','asset_category'))
#         for i in range(len(allCategoryPhase2)):
#             inspTypePhase2 = list(models.inspectiontype_master.objects.filter(parent_id='-1',delete_flag=False,disable_flag=False,asset=allCategoryPhase2[i]['asset_id']).values('instypeid','name'))
#             allCategoryPhase2[i].update({'inspTypePhase2':inspTypePhase2})
   
#         context={
#             'insp_desig':insp_desig,
#             'insp_ofc_name':insp_ofc_name,
#             'station_name':station_name,
#             'Zone':list2,
#             'division':list4,
#             'marked_to':list5,
#             'department':list6,
#             'desig': desig_longdesc,
#             'alldesig':alldesig,
#             'desg_no':desg_no,
#             'location_array': location_array,
#             'Zone1':Zone1,
#             'setdiv':setdiv,
#             'option_val':'create',
#             'copy_no':copy_no,
#             'allDepartmentPhase2':allDepartmentPhase2,
#             'allCategoryPhase2':allCategoryPhase2,
#             }
       
#         ins_id=request.GET.get('ins_id')
#         ins_flag=request.GET.get('flag')
       
#         ins_detail=[]
#         item_id=[]
#         length = 0
#         sh = []
#         ssh = []
#         if ins_id!=None:
#             personal_values = list(m1.Inspection_details.objects.filter(inspection_no=ins_id).values('officer_desig','officer_name','station_name'))
#             if personal_values:
#                 insp_desig=personal_values[0]['officer_desig'] if personal_values[0]['officer_desig'] else insp_desig
#                 insp_ofc_name=personal_values[0]['officer_name'] if personal_values[0]['officer_name'] else insp_ofc_name
#                 station_name=personal_values[0]['station_name'] if personal_values[0]['station_name'] else station_name


#             item_t = m1.Inspection_details.objects.filter(inspection_no=ins_id).values('item_type')
#             mail_detail = m6.copyto_mails.objects.filter(doc_id=ins_id, doc_table='i', area_flag=0)
#             alldesig1 =models.Level_Desig.objects.exclude(delete_flag=True).values('designation').distinct().order_by('designation')
#             Accompany = list(m1.Insp_Accompany.objects.filter(inspection_no=ins_id).values('accompany'))
#             try:
#                 Accompany =list(map(lambda x: int(x['accompany']),Accompany))
#                 acc_type = 'int'
#             except Exception as e:
#                 acc_type = 'str'
#                 Accompany =list(map(lambda x: x['accompany'],Accompany))
#             des_id = json.dumps(list(m1.Item_details.objects.filter(inspection_no_id=ins_id, inspection_no__item_type='Insp').exclude(type='SSH').values_list('des_id', flat=True).order_by('sl_no')))
#             if mail_detail:
#                 new_mail_detail= mail_detail[0].receiver_desig
#                 new_mail_desig_code= mail_detail[0].receiver_id
#             else:
#                 new_mail_detail  = 'NA'
#                 new_mail_desig_code = ''
#             item_type = item_t[0]['item_type']
#             if item_type == 'Insp':
#                 ins_detail=list(m1.Inspection_details.objects.filter(inspection_no=ins_id, item_type='Insp', status_flag=0).values())
#                 if ins_flag=='1':
#                     ins_detail=list(m1.Inspection_details.objects.filter(inspection_no=ins_id, item_type='Insp').values())
#                     # print(ins_detail)


#                 if ins_detail==[] and ins_flag=='0':
#                     return render(request,"data_not_found.html")
           
#                 item_details1= list(m1.Item_details.objects.filter(inspection_no_id=ins_id, inspection_no__item_type='Insp').values().order_by('sl_no'))
#                 item_data= m1.Item_details.objects.filter(inspection_no_id=ins_id, type="H").values()
               
#                 multi_loc = m1.Insp_multi_location.objects.filter(inspection_no_id=ins_id).values()
#                 multi_loc_zone = list(m1.Insp_multi_location.objects.filter(inspection_no_id=ins_id,type='HQ').values_list('item',flat=True))
#                 zone = multi_loc_zone
#                 empnox = models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=request.user)| Q(official_email_ID=request.user.guest_email) | Q(official_email_ID=request.user.email), empno__isnull=False)
#                 empnumber=None
#                 if empnox:
#                     empnumber = empnox[0].designation_code
#                 data=[]
#                 for i in range(len(zone)):
#                     l_id=list(models.railwayLocationMaster.objects.filter(location_code=zone[i]).values('rly_unit_code'))
#                     if len(l_id)>0:
#                         desg_no1=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation__isnull=False,rly_unit=l_id[0]['rly_unit_code']).exclude(designation_code=empnumber).values('designation','empno', 'designation_code').order_by('designation'))
#                         if len(desg_no1)>0:
#                             data.extend(desg_no1)
#                     l_id=list(models.railwayLocationMaster.objects.filter(Q(parent_location_code=zone[i])).values('rly_unit_code'))
#                     if len(l_id)>0:
#                         for x in range(len(l_id)):
#                             desg_no1=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation__isnull=False,rly_unit=l_id[x]['rly_unit_code']).exclude(designation_code=empnumber).values('designation','empno', 'designation_code').order_by('designation'))
#                             if len(desg_no1)>0:
#                                 if desg_no1[0] not in data:
#                                     data.extend(desg_no1)
#                 if len(data)==0:
#                     data_desg_no  = desg_no
#                 else:
#                     data_desg_no  = data
#                 for i in range(len(data_desg_no)):
#                     if '/' in data_desg_no[i]['designation']:
#                         r_des=data_desg_no[i]['designation'].replace('/',' ')
#                     elif '.' in data_desg_no[i]['designation']:
#                         r_des=data_desg_no[i]['designation'].replace('.',' ')
#                     else:
#                         r_des=data_desg_no[i]['designation']
#                     data_desg_no[i].update({'empnoser':r_des,'designation_code1':str(data_desg_no[i]['designation_code'])})

#                 desg_nounofficer = list(models.Level_Desig.objects.exclude(delete_flag=True).filter(parent_desig_code=empnumber).values_list('designation_code',flat=True).order_by('designation'))
#                 desg_nodata1 = list(filter(lambda x: x['designation_code'] in desg_nounofficer, data_desg_no))
#                 desg_nodata1 = sorted(desg_nodata1, key = lambda x: x['designation'])
#                 desg_nodata2 = list(filter(lambda x: x['designation_code'] not in desg_nounofficer, data_desg_no))
#                 desg_nodata2 = sorted(desg_nodata2, key = lambda x: x['designation'])
#                 data_desg_no = desg_nodata1 + desg_nodata2

#                 multi_loc_div = m1.Insp_multi_location.objects.filter(inspection_no_id=ins_id,type='DIV').values_list('item',flat=True).order_by('item')
#                 multi_loc_from = m1.Insp_multi_location.objects.filter(inspection_no_id=ins_id, type='LOC').distinct('table_from').values_list('table_from', flat=True)
#                 length += item_data.count()
#                 for zb in item_details1:
#                     item_id.append(zb['des_id'])
#                 for x in range(len(item_data)):
#                     mid= str(x+1)+'.'
#                     itmdata = m1.Item_details.objects.filter(inspection_no_id=ins_id, type="SH", des_id__startswith=mid).values()
#                     ssh.append(0)
#                     sh.append(len(itmdata))
#                     for y in range(len(itmdata)):
#                         nid= str(x+1)+'.'+ str(y+1)+'.'
#                         itmdata1 = m1.Item_details.objects.filter(inspection_no_id=ins_id, type="SSH", des_id__startswith=nid).count()
#                         ssh.append(itmdata1)
#                 para_count = 0
#                 para_marked_officer =[]
#                 div_para_no = []
#                 marked_off_details = []
#                 item_val = []
#                 table_val = []
#                 for j in item_details1:
#                     des_id = para_count
#                     typ = j['des_id'].split('.')
#                     if j['del_flag'] == 1:
                       
#                         item_val.append(des_id)
#                     if j['tbl_data'] != '[]':
#                         table_val.append(str(des_id))


#                     if len(typ) == 1:
#                         typ = 'P'
#                         para_marked_officer.append(des_id)
#                         div_para_no.append(des_id)
#                     elif len(typ) == 2:
#                         typ = 'SP'
#                         para_marked_officer.append(des_id)
#                         div_para_no.append(des_id)
#                     else:
#                         typ = 'SSP'
#                         div_para_no.append(des_id)
#                     mark=m1.Marked_Officers.objects.filter(item_no=j['item_no']).values()
#                     marked_officers1=''
#                     for x in mark:
#                         des = models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=x['marked_to_id'])
#                         if des.count()>0:
#                             marked_officers1 += str(des[0].designation_code)+','
#                     marked_officers1 = marked_officers1.split(',')
#                     marked_officers1 = marked_officers1[:len(marked_officers1)-1]
#                     off_1 = []
#                     select_officer = {}
#                     pre_status = "NO"
#                     if len(marked_officers1)>0:
#                         present_1 = list(map(lambda x: x['designation_code'],data_desg_no))
#                         off_1=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=marked_officers1).exclude(designation_code__in = present_1).values('designation','empno', 'designation_code').order_by('designation'))
#                         select_officer = desig_changecode_edit(request,marked_officers1)
#                         pre_status = "YES"
#                     if j['target_date'] is not None:
#                         target_date = j['target_date'].strftime('%d/%m/%y')
#                     else:
#                         target_date =''
#                     select_officer1 = []
#                     if len(select_officer) > 0:
#                         marked_id = json.loads(select_officer['marked_id'])
#                         marked_desig = select_officer['marked_desig']
#                         marked_key = json.loads(select_officer['marked_key'])
#                         marked_desig = marked_desig.split(',')
#                         listToStr = '@$@'.join([str(elem) for elem in marked_desig])
#                         listToStr = listToStr.replace("/","##")
#                         listToStr = listToStr.replace("'","@@")
#                         desig_1 = []


#                         for ext in range(len(marked_key)):
#                             ext_1 = marked_key[ext]['designation_code']
#                             ltr_1 = '@#@'.join([str(elem) for elem in ext_1])
#                             ltr_2 = marked_key[ext]['desig']
#                             ltr_2 = ltr_2.replace("/","##")
#                             ltr_2 = ltr_2.replace("'","@@")
#                             ltr_1 = ltr_1 + '@$$@' + ltr_2
#                             desig_1.append(ltr_1)
                       
#                         marked_off_details.append({"no":str(des_id),"marked_desig":listToStr,"marked_id":marked_id,"marked_key":desig_1,"present":pre_status})
#                     else:
#                         marked_off_details.append({"no":str(des_id),"marked_id":"","marked_desig":"","marked_key":"","present":"NO"})
#                     for i in range(len(off_1)):
#                         if '/' in off_1[i]['designation']:
#                             r_des=off_1[i]['designation'].replace('/',' ')
#                         elif '.' in off_1[i]['designation']:
#                             r_des=off_1[i]['designation'].replace('.',' ')
#                         else:
#                             r_des=off_1[i]['designation']
#                         off_1[i].update({'empnoser':r_des})
#                     j.update({'extra_off':off_1,'mrkoffi': marked_officers1,'created_on':'','target_date':target_date,'des_id_id':des_id,'typ':typ})
#                     _tbl_tbl = []
#                     if j['tbl_data'] != '[]':
#                         res = eval(j['tbl_data'])
#                         for k1 in range(len(res)):
#                             d2 = []
#                             for k2 in range(len(res[k1])):
#                                 d2.append(res[k1][k2])
#                             _tbl_tbl.append(d2)


                           
#                         # tbl_tbl = j['tbl_data'][2:]
#                         # tbl_tbl = tbl_tbl[0:len(tbl_tbl)-2]
#                         # tbl_tbl = tbl_tbl.split('], [')
                       
#                         # for xx in tbl_tbl:
#                         #     d2 = []
#                         #     d1 = xx.split(',')
#                         #     for il in d1:
#                         #         d3 = il.strip()[1:]
#                         #         d3 = d3[0:len(d3)-1]
#                         #         d2.append(d3)
#                         #     _tbl_tbl.append(d2)
#                         # print(_tbl_tbl)
#                     else:
#                         _tbl_tbl = '[]'
#                     j.update({'tbl_data':_tbl_tbl})
#                     ins_detail[0].update({'item_details1': item_details1})
#                     para_count +=1
#                 # item_val = list(m1.Item_details.objects.filter(inspection_no=ins_id,del_flag=1).values('des_id'))
#                 # item_val = list(map(lambda d: d['des_id'], item_val))
#                 # table_val = list(m1.Item_details.objects.filter(inspection_no=ins_id).exclude(tbl_data='[]').values('des_id'))
#                 # table_val = list(map(lambda d: d['des_id'], table_val))
#                 item_details_img= list(m1.Item_details.objects.filter(inspection_no_id=ins_id,link_image__isnull=False).values('link_image','des_id').order_by('sl_no'))
#                 img_path = []
#                 for i5 in range(len(item_details_img)):
#                     img = item_details_img[i5]['link_image'].split('@#@')
#                     id = item_details_img[i5]['des_id']
#                     for i6 in range(len(img)):
#                             img_path.append({'id':id,'path':img[i6]})
#                 new_mail_desig_code = new_mail_desig_code.split(',')
#                 try:
#                     prev_data = ins_detail[0]['item_details1']
#                     prev_details  = ins_detail[0]['item_details1']
#                 except Exception as e:
#                     prev_data = []
#                     prev_details  = []
#                 item_val.reverse()
#                 context={
#                     'insp_desig':insp_desig,
#                     'insp_ofc_name':insp_ofc_name,
#                     'station_name':station_name,
#                     'img_path':json.dumps(img_path),
#                     'ins_id':ins_id,
#                     'ins_detail':ins_detail,
#                     'item_id': item_id,
#                     'length_of_h': length,
#                     'sh_list': sh,
#                     'ssh_list': ssh,
#                     'multi_loc': multi_loc,
#                     'Zone':list2 ,
#                     'division':list4,
#                     'department':list6,
#                     'new_mail_detail': new_mail_detail,
#                     'new_mail_desig_code': json.dumps(new_mail_desig_code),
#                     'alldesig':alldesig1,
#                     'desg_no':data_desg_no,
#                     'desg_no11':desg_no,
#                     'des_id': des_id,
#                     'Accompany': Accompany,
#                     'location_array': location_array,
#                     'multi_loc_from': multi_loc_from,
#                     'multi_loc_zone':multi_loc_zone,
#                     'multi_loc_div':multi_loc_div,
#                     'item_val':json.dumps(item_val),
#                     'table_val':json.dumps(table_val),
#                     'option_val':'edit',
#                     'acc_type' : acc_type,
#                     'copy_no':copy_no,
#                     # 'prev_data':json.dumps(prev_data),
#                     'prev_details':prev_details,
#                     'div_para_no':json.dumps(div_para_no),
#                     'para_marked_officer':json.dumps(para_marked_officer),
#                     'para_count':para_count,
#                     'marked_off_details':json.dumps(marked_off_details),
#                     'ins_flag':ins_flag,
#                     'allDepartmentPhase2':allDepartmentPhase2,
#                     'allCategoryPhase2':allCategoryPhase2,
#                     }  
#                 # print(prev_details)
#                 return render(request,"create_inspection_form.html",context)
#             elif item_type == 'Chk':
#                 ins_detail=list(m1.Inspection_details.objects.filter(inspection_no=ins_id, item_type='Chk').values('zone','division','dept','location','inspected_on','inspection_title'))
#                 item_details1= list(m1.Item_details.objects.filter(inspection_no_id=ins_id, inspection_no__item_type='Chk').values('observation').order_by('sl_no'))
#                 empdata=m1.empmast.objects.filter(myuser_id=request.user).values('empname','empno', 'desig_longdesc')
#                 desig_longdesc = empdata[0]['desig_longdesc']
#                 list1=models.railwayLocationMaster.objects.filter(location_type='ZR').values('location_code')
#                 list2=[]
#                 for i in list1:
#                     list2.append(i['location_code'])
#                 list3=models.railwayLocationMaster.objects.filter(location_type='DIV').values('location_code')
#                 list4=[]
#                 list5 =[]
#                 for i in list3:
#                     list4.append(i['location_code'])
#                 try:
#                     list5=list(models.Level_Desig.objects.exclude(delete_flag=True).all().values('designation','designation_code'))  
#                 except Exception as e:
#                     print("e==",e)  
#                 list6=models.departMast.objects.all().values('department_name')
#                 context={
#                     'Zone':list2 ,
#                     'division':list4,
#                     'marked_to':list5,
#                     'department':list6,
#                     'desig': desig_longdesc,
#                     'ins_detail':ins_detail,
#                     'item_details1':item_details1
#                     }
#                 return render(request, 'search_checklist_template_report.html',context)
               
#             else:
#                 messages.error(request, 'oops error')
#         else:    
#             return render(request,"create_inspection_form.html", context)
#     except Exception as e:
#         try:
#             m1.error_Table.objects.create(fun_name="create_inspection_form",user_id=request.user,err_details=str(e))
#         except:
#             print("Internal Error!!!")
#         return render(request, "errorspage.html", {})


# def create_inspection_details(request):
#     # try:
#         if request.method == "POST" and request.is_ajax():
#             print("inside create_inspection_details")
#             from datetime import datetime
#             final=request.POST.get('final_partinspected')
#             final_id=request.POST.get('id_partinspected')
#             rly=json.loads(request.POST.get('zone'))
#             div=json.loads(request.POST.get('division'))
#             # dept=json.loads(request.POST.get('department'))
#             loc=json.loads(request.POST.get('location'))
#             insdt=request.POST.get('txtDate2')
#             accompany=json.loads(request.POST.get('accompany'))
#             final_img = json.loads(request.POST.get('final_img'))
#             inspection_no = request.POST.get('inspection_no')
#             insp_desig = request.POST.get('insp_desig')
#             insp_ofc_name = request.POST.get('insp_ofc_name')
#             station_name = request.POST.get('station_name')
#             ins_flag=request.POST.get('ins_flag')
#             if inspection_no =='' or ins_flag=='1':
#                 inspection_no = None
           
#             if 'to' in insdt:
#                 dt = insdt.split('to')
#                 st_date = dt[0].strip()
#                 en_date = dt[1].strip()
#                 start_date = datetime.strptime(st_date, '%d/%m/%y').strftime('%Y-%m-%d')
#                 inspected_on = datetime.strptime(en_date, '%d/%m/%y').strftime('%Y-%m-%d')
#             else:
#                 inspected_on = datetime.strptime(insdt, '%d/%m/%y').strftime('%Y-%m-%d')
#                 start_date = datetime.strptime(insdt, '%d/%m/%y').strftime('%Y-%m-%d')


#             title=request.POST.get('titleinsp')
#             send_to=request.POST.get('send_to')
#             send_desig=request.POST.get('send_desig')
           
#             finalval = json.loads(final)
#             final_allid = json.loads(final_id)
#             year = str(datetime.now().year)


#             # empno=models.Level_Desig.objects.exclude(delete_flag=True).filter(official_email_ID=request.user)
#             empnox = models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=request.user)| Q(official_email_ID=request.user.guest_email) | Q(official_email_ID=request.user.email), empno__isnull=False)
#             if empnox:
#                 empno = empnox[0].empno_id
#                 desig = empnox[0].designation
#                 ddesig = empnox[0].designation_code
#             else:
#                 messages.error(request, 'Employee id not found')
#             if m1.Inspection_details.objects.filter(inspection_no = inspection_no ).exists():
#                 note_ = year+'/'+desig+'/Insp'+'/'
#                 last_note1 = m1.Inspection_details.objects.filter(inspection_note_no__istartswith=note_).aggregate(Max('insp_last'))
#                 if last_note1['insp_last__max'] == None:
#                     last_note1 = 1
#                     note_no = year+'/'+desig+'/Insp'+'/'+ str(last_note1)
#                 else:
#                     last_note1 = int(last_note1['insp_last__max']) +1
#                     note_no = year+'/'+desig+'/Insp'+'/'+ str(last_note1)
#                 m1.Inspection_details.objects.filter(inspection_no = inspection_no ).update(inspection_title=title,station_name=station_name,officer_name=insp_ofc_name,officer_desig=insp_desig,  created_by=empno, insp_last=last_note1,inspection_note_no=note_no, inspection_officer_id=ddesig, item_type='Insp', modified_by=empno, status_flag=1, start_date=start_date, inspected_on=inspected_on,final_submit_on=datetime.now())
               
#                 # m1.Insp_Accompany.objects.filter(inspection_no_id=inspection_no).delete()
#                 # m6.copyto_mails.objects.filter( doc_id=inspection_no, doc_table='i').delete()
#                 # m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_no, type='HQ').delete()
#                 # m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_no, type='DIV').delete()
#                 # m1.Marked_Officers.objects.filter(item_no__in = m1.Item_details.objects.filter(inspection_no=inspection_no).values('item_no')).delete()
#                 # m1.Item_details.objects.filter(inspection_no=inspection_no).delete()
#                 # m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_no,type='LOC').delete()
               
#                 inspection_id = inspection_no
#             else:
#                 note_ = year+'/'+desig+'/Insp'+'/'
#                 last_note1 = m1.Inspection_details.objects.filter(inspection_note_no__istartswith=note_).aggregate(Max('insp_last'))
#                 if last_note1['insp_last__max'] == None:
#                     last_note1 = 1
#                     note_no = year+'/'+desig+'/Insp'+'/'+ str(last_note1)
#                 else:
#                     last_note1 = int(last_note1['insp_last__max']) +1
#                     note_no = year+'/'+desig+'/Insp'+'/'+ str(last_note1)
#                 m1.Inspection_details.objects.create(inspection_title=title,created_on=datetime.now(), station_name=station_name,officer_name=insp_ofc_name,officer_desig=insp_desig, created_by=empno, insp_last=last_note1,inspection_note_no=note_no, inspection_officer_id=ddesig, item_type='Insp', modified_by=empno, status_flag=1, start_date=start_date, inspected_on=inspected_on,final_submit_on=datetime.now())            
#                 inspection_id=m1.Inspection_details.objects.all().last().inspection_no
           
#             messages.info(request, f'Inspection note successfully saved with Inspection Note No: {note_no}')




#             m1.Insp_Accompany.objects.filter(inspection_no_id=inspection_id).update(update_status='F')
#             if m1.Insp_Accompany.objects.filter(inspection_no_id=inspection_id).exists():
#                 for up in accompany:
#                     if m1.Insp_Accompany.objects.filter(inspection_no_id=inspection_id, accompany=up).exists():
#                         m1.Insp_Accompany.objects.filter(inspection_no_id=inspection_id, accompany=up).update(accompany=up,update_status='T')
#                     else:
#                         m1.Insp_Accompany.objects.create(accompany=up, inspection_no_id=inspection_id)
#             else:
#                 for acc in accompany:
#                     m1.Insp_Accompany.objects.create(accompany=acc, inspection_no_id=inspection_id)
#             m1.Insp_Accompany.objects.filter(inspection_no_id=inspection_id,update_status='F').delete()
#             #======================change 21-11-22======================
#             for rl in rly:
#                 if m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_id, item=rl, type='HQ').exists():
#                     m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_id, item=rl, type='HQ').update(inspection_no_id=inspection_id, item=rl, type='HQ',update_status='T')
#                 else:
#                     m1.Insp_multi_location.objects.create(inspection_no_id=inspection_id, item=rl, type='HQ')
#             for di in div:
#                 if m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_id, item=di, type='DIV').exists():
#                     m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_id, item=di, type='DIV').update(inspection_no_id=inspection_id, item=di, type='DIV',update_status='T')
#                 else:
#                     m1.Insp_multi_location.objects.create(inspection_no_id=inspection_id, item=di, type='DIV')
           
#             for lo in loc:
#                 if lo:
#                     new_loc = lo.split('#')
#                     location = new_loc[0]
#                     location_type = new_loc[1]
#                     location_code = new_loc[2]


#                     #print(location, location_type)
#                     if m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_id, item=location,  type='LOC').exists():
#                         m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_id, item=location,  type='LOC').update(inspection_no_id=inspection_id, item=location, item_code=location_code, type='LOC', table_from=location_type,update_status='T')
#                     else:
#                         m1.Insp_multi_location.objects.create(inspection_no_id=inspection_id, item=location, item_code=location_code, type='LOC', table_from=location_type)
           
#             #========================
#             m1.Insp_multi_location.objects.filter(inspection_no=inspection_id,update_status='F').delete()
#             m1.Item_details.objects.filter(inspection_no=inspection_id).update(update_status ='F')
#             m1.Marked_Officers.objects.filter(item_no__in=m1.Item_details.objects.filter(inspection_no=inspection_id).values('item_no')).update(update_status ='F')

#             officer_email=[]
#             officer_contact=[]
#             marked_officers_sms=[]
#             counters =1
#             for f, b in zip(finalval, final_allid):
#                 #print(finalval[f], final_allid[b])
#                 for x,y in zip(finalval[f], final_allid[b]):
#                     s = y.split('.')
#                     if len(s) == 1:
#                         hed = 'heading'+y
#                         heading = finalval[f][hed]
#                         tbl_data = finalval[f][y]
                        
#                         if m1.Item_details.objects.filter(type='H',des_id=y, inspection_no=inspection_id).exists():
#                             m1.Item_details.objects.filter(type='H',des_id=y, inspection_no=inspection_id).update(sl_no=counters,link_image=None,del_flag=0,tbl_data=tbl_data,item_title=heading,status_flag=1, created_on=datetime.now(),created_by=empno, type='H',des_id=y,update_status='T')
#                             item_id=m1.Item_details.objects.filter(type='H',des_id=y, inspection_no=inspection_id).all().last().item_no
#                         else:
#                             m1.Item_details.objects.create(sl_no=counters,tbl_data=tbl_data,item_title=heading,status_flag=1, created_on=datetime.now(), type='H',des_id=y,created_by=empno, inspection_no_id=inspection_id)
#                             item_id=m1.Item_details.objects.all().last().item_no
#                         y2=str(y+'.1')
#                         if y2 in final_allid[b]:
#                             #print('if',y2)
#                             m1.Item_details.objects.filter(type='H',des_id=y, inspection_no_id=inspection_id).update(status_flag=4)
#                             pass
#                         else:
#                             #print('else',y2)
#                             trz = 'targetdate'+y
#                             officm = 'markeofficer'+y
#                             chk = 'check' + y

                            
                           
#                             targetd = finalval[f][trz]
#                             markof = finalval[f][officm]
#                             checkbox = finalval[f][chk]


                           


#                             if checkbox == '1':
#                                 checkbox = 1
#                             else:
#                                 checkbox = 0
#                             markeofficer = markof.split(',')
#                             if targetd:
#                                 targetd=targetd.split('/')
#                                 targetd='20'+targetd[2].strip()+'-'+targetd[1].strip()+'-'+targetd[0].strip()
#                                 t_date = targetd
                               
#                             else:
#                                 t_date = None

#                             # for action type
#                             act_type = 'type' + y
#                             typeofaction=finalval[f][act_type]
#                             if typeofaction=='info':
#                                 act_flag=1
#                             else:
#                                 act_flag=0

#                             rem='remarksmarkeofficer'+y
#                             remarks=finalval[f][rem]
#                             m1.Item_details.objects.filter(item_title=heading,status_flag=1, type='H',des_id=y, inspection_no_id=inspection_id).update(target_date=t_date, priority=checkbox, action_type=act_flag, markofcRemarks=remarks)
#                             # item_id=m1.Item_details.objects.all().last().item_no
#                             #mark officer
                           
#                             if markof:
#                                 for i in markeofficer:
#                                     Desig=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i)
#                                     if Desig:
#                                         Desig1=Desig[0].designation_code
#                                         if Desig[0].official_email_ID:
#                                             officer_email.append(Desig[0].official_email_ID)
#                                         if Desig[0].contactnumber:
#                                             if Desig[0].contactnumber not in officer_contact:
#                                                 marked_officers_sms.append({'contact':Desig[0].contactnumber,'designation':Desig[0].designation_code})
#                                                 officer_contact.append(Desig[0].contactnumber)


#                                         if m1.Marked_Officers.objects.all().last():
#                                             marked_no_id=(m1.Marked_Officers.objects.all().last().marked_no)+1
#                                         else:
#                                             marked_no_id = 1

#                                         if m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).exists():
#                                             m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).update(update_status='T',created_on=datetime.now(),created_by=empno,marked_emp=i,status_flag=1)
#                                         else:   
#                                             m1.Marked_Officers.objects.create(marked_emp=i,created_on=datetime.now(),created_by=empno, marked_no=marked_no_id,status_flag=1, item_no_id=item_id,marked_to_id=Desig1)
#                                     else:
#                                         print('error')
   
#                     elif len(s) == 2:
#                         ob = 'observation'+y
#                         trz = 'targetdate'+y
#                         officm = 'markeofficer'+y
#                         chk = 'check' + y


#                         observation = finalval[f][ob]
#                         targetd = finalval[f][trz]
#                         markof = finalval[f][officm]
#                         markeofficer = markof.split(',')


#                         checkbox = finalval[f][chk]


#                         if checkbox == '1':
#                             checkbox = 1
#                         else:
#                             checkbox = 0

#                         # for action type
#                         act_type = 'type' + y
#                         typeofaction=finalval[f][act_type]
#                         if typeofaction=='info':
#                             act_flag=1
#                         else:
#                             act_flag=0
                       
#                         if targetd:
#                             # targetdate = datetime.strptime(targetd, '%d/%m/%Y').strftime('%Y-%m-%d')
#                             targetd=targetd.split('/')
#                             targetd='20'+targetd[2].strip()+'-'+targetd[1].strip()+'-'+targetd[0].strip()
#                             targetdate = targetd
#                         else:
#                             targetdate = None
#                         #print(observation)
#                         tbl_data = finalval[f][y]
#                         rem='remarksmarkeofficer'+y
#                         remarks=finalval[f][rem]

#                         if m1.Item_details.objects.filter(inspection_no=inspection_id, des_id=y,  type='SH').exists():
#                             m1.Item_details.objects.filter(inspection_no=inspection_id, des_id=y,  type='SH').update(sl_no=counters,link_image=None,del_flag=0,tbl_data=tbl_data,observation=observation,priority=checkbox, status_flag=1,created_by=empno,created_on=datetime.now(), target_date=targetdate,action_type=act_flag,update_status='T',markofcRemarks=remarks)
#                             item_id=m1.Item_details.objects.filter(inspection_no=inspection_id, des_id=y,  type='SH').all().last().item_no
#                         else:
#                             m1.Item_details.objects.create(sl_no=counters,tbl_data=tbl_data,observation=observation,priority=checkbox, status_flag=1,inspection_no_id=inspection_id, des_id=y, target_date=targetdate, type='SH', action_type=act_flag,created_by=empno,created_on=datetime.now(),markofcRemarks=remarks)
#                             item_id=m1.Item_details.objects.all().last().item_no

#                         # item_id=m1.Item_details.objects.all().last().item_no
#                         #mark officer
                       
#                         if markof:
#                             for i in markeofficer:
#                                 Desig=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i)
#                                 if Desig:
#                                     Desig1=Desig[0].designation_code
#                                     if Desig[0].official_email_ID:
#                                         officer_email.append(Desig[0].official_email_ID)
#                                     if Desig[0].contactnumber:
#                                         if Desig[0].contactnumber not in officer_contact:
#                                             marked_officers_sms.append({'contact':Desig[0].contactnumber,'designation':Desig[0].designation_code})
#                                             officer_contact.append(Desig[0].contactnumber)


#                                     if m1.Marked_Officers.objects.all().last():
#                                         marked_no_id=(m1.Marked_Officers.objects.all().last().marked_no)+1
#                                     else:
#                                         marked_no_id = 1

#                                     if m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).exists():
#                                         m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).update(created_on=datetime.now(),created_by=empno,marked_emp=i, status_flag=1,update_status='T')
#                                     else:
#                                         m1.Marked_Officers.objects.create(created_on=datetime.now(),created_by=empno,marked_emp=i,marked_no=marked_no_id,status_flag=1, item_no_id=item_id,marked_to_id=Desig1)
#                                 else:
#                                     print('error')
#                                     # messages.info(request, 'Employ Desig not Match in Designation Master')
#                         else:
#                             markeofficer=""


                   
                       
#                     else:
#                         subdes = 'subdes'+y
#                         subdes1 = finalval[f][subdes]
#                         tbl_data = finalval[f][y]
#                         # for action type
#                         act_type = 'type' + y
#                         typeofaction=finalval[f][act_type]
#                         if typeofaction=='info':
#                             act_flag=1
#                         else:
#                             act_flag=0
#                         if m1.Item_details.objects.filter(type='SSH',des_id=y, inspection_no=inspection_id).exists():
#                             m1.Item_details.objects.filter(type='SSH',des_id=y, inspection_no=inspection_id).update(sl_no=counters,link_image=None,del_flag=0,tbl_data=tbl_data, item_subtitle=subdes1,status_flag=4,created_by=empno,created_on=datetime.now(),action_type=act_flag,update_status='T')
#                         else:
#                             m1.Item_details.objects.create(sl_no=counters,tbl_data=tbl_data,item_subtitle=subdes1,status_flag=4, type='SSH',des_id=y, inspection_no_id=inspection_id, action_type=act_flag)

#                     counters+=1
            
#             m1.Item_details.objects.filter(inspection_no=inspection_id,update_status ='F').delete()
#             m1.Marked_Officers.objects.filter(item_no__in=m1.Item_details.objects.filter(inspection_no=inspection_id).values('item_no'),update_status ='F').delete()
#             m1.Marked_Officers.objects.filter(item_no__in=m1.Item_details.objects.filter(inspection_no=inspection_id).values('item_no'),marked_to__isnull=True).delete()
            
#             for i in range(len(final_img)):
#                 ref = final_img[i][0]
#                 path = (final_img[i][1])[1:]
#                 data = list(m1.Item_details.objects.filter(inspection_no=inspection_id,des_id=ref).values('link_image'))
#                 if len(data) > 0:
#                     data = data[0]['link_image']
#                     if data != None:
#                         path = data +'@#@'+path
#                 m1.Item_details.objects.filter(inspection_no=inspection_id,des_id=ref).update(link_image = path)

#             m1.Item_details.objects.filter(inspection_no=inspection_id,link_image='').update(link_image=None)

           
#             try:
#                 subject="Inspection report marked to you for n/a."
#                 # To=['ecegcttarun@gmail.com',]
#                 To=officer_email
#                 context = {'title': title}
                
                
#                 # if len(officer_contact) > 0:
#                 #     for num in officer_contact:
#                 #         pass
#                         # sendsms(num)

#                 if len(marked_officers_sms) > 0:
#                     for mar in marked_officers_sms:
#                         new_pending=m1.Marked_Officers.objects.filter(item_no__inspection_no=inspection_id,marked_to_id=mar['designation']).values().count()
#                         cum_pending=m1.Marked_Officers.objects.filter(marked_to_id=mar['designation'], status_flag=1).values().count()
#                         for_pending=m1.Marked_Officers_forward.objects.filter(marked_to_forward_id=mar['designation'], status_flag=1).values().count()
#                         total_pending=cum_pending+for_pending
#                         # n=str(new_pending)+"/"+str(cum_pending)
#                         issue_date=date.today()
#                         issue_date = datetime.strftime(issue_date,"%d/%m/%Y")
#                         t=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=ddesig).values('designation')
#                         if len(t)!=0:
#                             inspection_officer=t[0]['designation']
#                             inspection_officer=inspection_officer[0:15]
#                         else:
#                             inspection_officer='NA'
#                         # msg_body=str(note_no)+" , "+str(issue_date)+", "+str(inspection_officer)
#                         note_no=note_no[0:30]
#                         # Total {#var#} Items of Insp. note no.{#var#} marked /forwarded by {#var#} marked  to you for n/a. Cumulative pending compliance:{#var#},CRIS/MU.
#                         # message="Insp. note no. "+msg_body+" marked to you for n/a. New Paras marked/Cumulative pending compliance: "+n+", CRIS/INSP"
#                         sendsms_insp(mar['contact'],new_pending,note_no,inspection_officer,total_pending)
                   
#                 InspSendMail(subject, To, context)
                



#                 # m1.Insp_mail_details.objects.create(subject=subject, body=title,area='Mark Of', inspection_no_id=inspection_id, send_to=send_to,send_desig=send_desig)
#                 m6.copyto_mails.objects.create(sender_id_id=ddesig, subject=subject,doc_id=inspection_id,  body=title, area_flag=1, doc_table='i', receiver_id=send_to, receiver_desig=send_desig)
#                 messages.success(request, 'Mark officer email has been sent')
               
#             except:
#                 print("error on sending")
#                 messages.error(
#                     request, 'Email send failed. Please Try Again.')
#             try:
#                 offic_mail =[]
#                 offic_contact =[]
#                 unique_offic_mail = list(set(offic_mail))
#                 unique_offic_contact = list(set(offic_contact))
#                 if send_to:
#                     emil = send_to.split(',')
#                     for i in emil:
#                         email = models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i)
#                         if email[0].official_email_ID:
#                             offic_mail.append(email[0].official_email_ID)
#                         if Desig[0].contactnumber:
#                             offic_contact.append(Desig[0].contactnumber)
                           
#                     # if len(unique_offic_contact) > 0:
#                     #     for num in unique_offic_contact:
#                     #         sendsms(num)


#                     subject="Inspection report"
#                     To = unique_offic_mail
#                     # To=['ecegcttarun@gmail.com',]
#                     context = {'title': title}
                       
#                     InspSendMail(subject, To, context)
#                     # m1.Insp_mail_details.objects.create(subject=subject, body=title, area='Copy To', inspection_no_id=inspection_id, send_to=send_to,send_desig=send_desig)
#                     if m6.copyto_mails.objects.filter(doc_id=inspection_id, area_flag=0, doc_table='i').exists():
#                         m6.copyto_mails.objects.filter(doc_id=inspection_id, area_flag=0, doc_table='i').update(body=title,subject=subject,sender_id_id=ddesig, receiver_id=send_to, receiver_desig=send_desig)
#                     else:
#                         m6.copyto_mails.objects.create(sender_id_id=ddesig, subject=subject,doc_id=inspection_id,  body=title, area_flag=0, doc_table='i', receiver_id=send_to, receiver_desig=send_desig)
#                     messages.success(request, 'Copy to Email has been sent')
                   
#             except:
               
#                 messages.error(request, 'Copy to Email send failed.')


#             return JsonResponse({"status": 1 })
#         return JsonResponse({"success":False}, status=400)
       
#     # except Exception as e:
#     #     print(e)
#     #     try:
#     #         m1.error_Table.objects.create(fun_name="create_inspection_details",user_id=request.user,err_details=str(e))
#     #     except:
#     #         print("Internal Error!!!")
#     #     return render(request, "errorspage.html", {})

# def save_draft_data(request):
#     try:
#         if request.method == "POST" and request.is_ajax():
#             from datetime import datetime
#             final=request.POST.get('final_partinspected')
#             final_id=request.POST.get('id_partinspected')
#             rly=json.loads(request.POST.get('zone'))
#             div=json.loads(request.POST.get('division'))
#             loc=json.loads(request.POST.get('location'))
#             final_img=json.loads(request.POST.get('final_img'))
#             accompany=json.loads(request.POST.get('accompany'))
#             inspection_no = request.POST.get('inspection_no')
#             insp_desig = request.POST.get('insp_desig')
#             insp_ofc_name = request.POST.get('insp_ofc_name')
#             station_name = request.POST.get('station_name')
#             ins_flag=request.POST.get('ins_flag')
           
#             if inspection_no =='' or ins_flag=='1':
#                 inspection_no = None


#             send_to=request.POST.get('send_to')
#             send_desig=request.POST.get('send_desig')
#             temp_para_array_marked = json.loads(request.POST.get('temp_para_array_marked'))
           
#             insdt=request.POST.get('txtDate2')
#             del_array=json.loads(request.POST.get('del_array'))


#             if 'to' in insdt:
#                 dt = insdt.split('to')
#                 st_date = dt[0].strip()
#                 en_date = dt[1].strip()


#                 start_date = datetime.strptime(st_date, '%d/%m/%y').strftime('%Y-%m-%d')
#                 inspected_on = datetime.strptime(en_date, '%d/%m/%y').strftime('%Y-%m-%d')


#             else:
               
#                 inspected_on = datetime.strptime(insdt, '%d/%m/%y').strftime('%Y-%m-%d')
#                 start_date = datetime.strptime(insdt, '%d/%m/%y').strftime('%Y-%m-%d')
#             title=request.POST.get('titleinsp')
#             finalval = json.loads(final)
#             final_allid = json.loads(final_id)
#             empnox = models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=request.user)| Q(official_email_ID=request.user.guest_email) | Q(official_email_ID=request.user.email), empno__isnull=False)
#             if empnox:
#                 empno = empnox[0].empno_id
#                 ddesig = empnox[0].designation_code
#             else:
#                 messages.error(request, 'You are not authorize to create inspection. Please contact to admin')


#             if m1.Inspection_details.objects.filter(inspection_no = inspection_no ).exists():
#                 m1.Inspection_details.objects.filter(inspection_no =inspection_no ).update(inspection_title=title,item_type='Insp',  created_on=datetime.now(), inspection_officer_id=ddesig, status_flag=0,modified_by=empno,
#                                                                                            station_name=station_name,officer_name=insp_ofc_name,officer_desig=insp_desig, created_by=empno,start_date=start_date,inspected_on=inspected_on)
                
#                 # m1.Insp_Accompany.objects.filter(inspection_no_id=inspection_no).delete()
#                 # m6.copyto_mails.objects.filter( doc_id=inspection_no, doc_table='i').delete()
#                 # m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_no, type='HQ').delete()
#                 # m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_no, type='DIV').delete()
#                 # m1.Marked_Officers.objects.filter(item_no__in = m1.Item_details.objects.filter(inspection_no=inspection_no).values('item_no')).delete()
#                 # m1.Item_details.objects.filter(inspection_no=inspection_no).delete()
#                 # m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_no,type='LOC').delete()
                
                
#                 inspection_id = inspection_no
#             else:
#                 m1.Inspection_details.objects.create(inspection_title=title,item_type='Insp', station_name=station_name,officer_name=insp_ofc_name,officer_desig=insp_desig,  created_on=datetime.now(), inspection_officer_id=ddesig, status_flag=0,modified_by=empno, created_by=empno,start_date=start_date,inspected_on=inspected_on)
#                 inspection_id=m1.Inspection_details.objects.all().last().inspection_no
#             m1.Insp_Accompany.objects.filter(inspection_no_id=inspection_id).update(update_status='F')
#             if m1.Insp_Accompany.objects.filter(inspection_no_id=inspection_id).exists():
#                 for up in accompany:
#                     if m1.Insp_Accompany.objects.filter(inspection_no_id=inspection_id, accompany=up).exists():
#                         m1.Insp_Accompany.objects.filter(inspection_no_id=inspection_id, accompany=up).update(accompany=up,update_status='T')
#                     else:
#                         m1.Insp_Accompany.objects.create(accompany=up, inspection_no_id=inspection_id)
#             else:
#                 for acc in accompany:
#                     m1.Insp_Accompany.objects.create(accompany=acc, inspection_no_id=inspection_id)
#             m1.Insp_Accompany.objects.filter(inspection_no_id=inspection_id,update_status='F').delete()
#             if send_to:
#                 if m6.copyto_mails.objects.filter(doc_id=inspection_id, area_flag=0, doc_table='i').exists():
#                     m6.copyto_mails.objects.filter(doc_id=inspection_id, area_flag=0, doc_table='i').update(sender_id_id=ddesig, receiver_id=send_to, receiver_desig=send_desig)
#                 else:
#                     m6.copyto_mails.objects.create(sender_id_id=ddesig, doc_id=inspection_id, area_flag=0, doc_table='i', receiver_id=send_to, receiver_desig=send_desig)
            

#             m1.Insp_multi_location.objects.filter(inspection_no=inspection_id).update(update_status='F')
#             for rl in rly:
#                 if m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_id, item=rl, type='HQ').exists():
#                     m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_id, item=rl, type='HQ').update(inspection_no_id=inspection_id, item=rl, type='HQ',update_status='T')
#                 else:
#                     m1.Insp_multi_location.objects.create(inspection_no_id=inspection_id, item=rl, type='HQ')
#             for di in div:
#                 if m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_id, item=di, type='DIV').exists():
#                     m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_id, item=di, type='DIV').update(inspection_no_id=inspection_id, item=di, type='DIV',update_status='T')
#                 else:
#                     m1.Insp_multi_location.objects.create(inspection_no_id=inspection_id, item=di, type='DIV')
#             for lo in loc:
#                 if lo:
#                     new_loc = lo.split('#')
#                     location = new_loc[0]
#                     location_type = new_loc[1]
#                     location_code = new_loc[2]
#                     if m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_id, item=location,  type='LOC').exists():
#                         m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_id, item=location,  type='LOC').update(inspection_no_id=inspection_id, item=location, item_code=location_code, type='LOC', table_from=location_type,update_status='T')
#                     else:
#                         m1.Insp_multi_location.objects.create(inspection_no_id=inspection_id, item=location, item_code=location_code, type='LOC', table_from=location_type)
            
            
#             m1.Insp_multi_location.objects.filter(inspection_no=inspection_id,update_status='F').delete()
#             m1.Item_details.objects.filter(inspection_no=inspection_id).update(update_status ='F')
#             m1.Marked_Officers.objects.filter(item_no__in=m1.Item_details.objects.filter(inspection_no=inspection_id).values('item_no')).update(update_status ='F')

#             counters=1
#             for f, b in zip(finalval, final_allid):
#                 for x,y in zip(finalval[f], final_allid[b]):
#                     s = y.split('.')
#                     if len(s) == 1:
#                         hed = 'heading'+y
#                         heading = finalval[f][hed]
#                         tbl_data = finalval[f][y]
#                         if m1.Item_details.objects.filter(type='H',des_id=y, inspection_no=inspection_id).exists():
#                             m1.Item_details.objects.filter(type='H',des_id=y, inspection_no=inspection_id).update(sl_no=counters,del_flag=0,tbl_data=tbl_data,item_title=heading,status_flag=0,created_by=empno, created_on=datetime.now(),update_status='T')
#                             item_id=m1.Item_details.objects.filter(type='H',des_id=y, inspection_no=inspection_id).all().last().item_no
#                         else:
#                             m1.Item_details.objects.create(sl_no=counters,tbl_data=tbl_data,item_title=heading,status_flag=0,created_by=empno, created_on=datetime.now(), type='H',des_id=y, inspection_no_id=inspection_id)
#                             item_id=m1.Item_details.objects.all().last().item_no

#                         y2=str(y+'.1')
#                         if y2 in final_allid[b]:
                       
#                             pass
#                         else:
#                             trz = 'targetdate'+y
#                             officm = 'markeofficer'+y
#                             chk = 'check'+y
#                             targetd = finalval[f][trz]
#                             markof = finalval[f][officm]
#                             markeofficer = markof.split(',')
#                             checkbox = finalval[f][chk]
#                             rem='remarksmarkeofficer'+y
#                             remarks=finalval[f][rem]
#                             print(remarks,"my name is apeksha")
#                             if checkbox == '1':
#                                 checkbox = 1
#                             elif checkbox== '0':
#                                 checkbox = 0
#                             if targetd:
#                                 targetd=targetd.split('/')
#                                 targetd='20'+targetd[2].strip()+'-'+targetd[1].strip()+'-'+targetd[0].strip()
#                                 t_date = targetd
#                             else:
#                                 t_date = None
                                
#                             act_type = 'type' + y
#                             typeofaction=finalval[f][act_type]
#                             if typeofaction=='info':
#                                 act_flag=1
#                             else:
#                                 act_flag=0
                           
#                             m1.Item_details.objects.filter(item_title=heading,status_flag=0, type='H',des_id=y, inspection_no_id=inspection_id).update(target_date=t_date, priority=checkbox, action_type=act_flag, markofcRemarks=remarks)
                            
#                             if markof:
#                                 for i in markeofficer:
#                                     Desig=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i)
#                                     if Desig:
#                                         Desig1=Desig[0].designation_code
#                                         if m1.Marked_Officers.objects.all().last():
#                                             marked_no_id=(m1.Marked_Officers.objects.all().last().marked_no)+1
#                                         else:
#                                             marked_no_id = 1

#                                         if m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).exists():
#                                             m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).update(update_status='T',created_on=datetime.now(),created_by=empno,marked_emp=i,status_flag=0)
#                                         else:
#                                             m1.Marked_Officers.objects.create(created_on=datetime.now(),created_by=empno,marked_emp=i,marked_no=marked_no_id,status_flag=0,item_no_id=item_id,marked_to_id=Desig1)
#                                     else:
#                                         messages.info(request, 'Employ Desig not Match in Designation Master')
#                             else:
#                                 if m1.Marked_Officers.objects.all().last():
#                                     marked_no_id=(m1.Marked_Officers.objects.all().last().marked_no)+1
#                                 else:
#                                     marked_no_id = 1
#                                 m1.Marked_Officers.objects.create(created_on=datetime.now(),created_by=empno,marked_no=marked_no_id,status_flag=0,item_no_id=item_id)


#                     elif len(s) == 2:
#                         ob = 'observation'+y
#                         trz = 'targetdate'+y
#                         officm = 'markeofficer'+y
#                         chk = 'check'+y
#                         observation = finalval[f][ob]
#                         targetd = finalval[f][trz]
#                         markof = finalval[f][officm]
#                         checkbox = finalval[f][chk]
#                         act_type = 'type' + y
#                         typeofaction=finalval[f][act_type]
#                         if typeofaction=='info':
#                             act_flag=1
#                         else:
#                             act_flag=0

#                         if checkbox == '1':
#                             checkbox = 1
#                         elif checkbox== '0':
#                             checkbox = 0


#                         markeofficer = markof.split(',')
                       
#                         if targetd:
#                             targetd=targetd.split('/')
#                             targetd='20'+targetd[2].strip()+'-'+targetd[1].strip()+'-'+targetd[0].strip()
#                             targetdate = targetd
#                         else:
#                             targetdate = None
#                         tbl_data = finalval[f][y]

#                         rem='remarksmarkeofficer'+y
#                         remarks=finalval[f][rem]
#                         if m1.Item_details.objects.filter(inspection_no=inspection_id, des_id=y,  type='SH').exists():
#                             m1.Item_details.objects.filter(inspection_no=inspection_id, des_id=y,  type='SH').update(sl_no=counters,del_flag=0,tbl_data=tbl_data,observation=observation,priority=checkbox, status_flag=0,created_by=empno,created_on=datetime.now(), target_date=targetdate,action_type=act_flag,update_status='T',markofcRemarks=remarks)
#                             item_id=m1.Item_details.objects.filter(inspection_no=inspection_id, des_id=y,  type='SH').all().last().item_no
#                         else:
#                             m1.Item_details.objects.create(sl_no=counters,tbl_data=tbl_data,observation=observation,priority=checkbox, status_flag=0,created_by=empno,created_on=datetime.now(), inspection_no_id=inspection_id, des_id=y, target_date=targetdate, type='SH', action_type=act_flag,markofcRemarks=remarks)
                       
#                             item_id=m1.Item_details.objects.all().last().item_no
#                         if markof:
#                             for i in markeofficer:
#                                 Desig=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i)
#                                 if Desig:
#                                     Desig1=Desig[0].designation_code


#                                     if m1.Marked_Officers.objects.all().last():
#                                         marked_no_id=(m1.Marked_Officers.objects.all().last().marked_no)+1
#                                     else:
#                                         marked_no_id = 1
#                                     if m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).exists():
#                                         m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).update(created_on=datetime.now(),created_by=empno,marked_emp=i, status_flag=0,update_status='T')

#                                     else:
#                                         m1.Marked_Officers.objects.create(created_on=datetime.now(),created_by=empno,marked_no=marked_no_id,marked_emp=i, status_flag=0,item_no_id=item_id,marked_to_id=Desig1)
#                                 else:
#                                     print('error')
#                         else:
#                             markeofficer=''
                   
#                     else:
#                         subdes = 'subdes'+y
#                         subdes1 = finalval[f][subdes]
#                         tbl_data = finalval[f][y]
#                         # for action type
#                         act_type = 'type' + y
#                         typeofaction=finalval[f][act_type]
#                         if typeofaction=='info':
#                             act_flag=1
#                         else:
#                             act_flag=0
                        
#                         if m1.Item_details.objects.filter(type='SSH',des_id=y, inspection_no=inspection_id).exists():
#                             m1.Item_details.objects.filter(type='SSH',des_id=y, inspection_no=inspection_id).update(sl_no=counters,del_flag=0,tbl_data=tbl_data, item_subtitle=subdes1,status_flag=0,created_by=empno,created_on=datetime.now(),action_type=act_flag,update_status='T')
#                         else:
#                             m1.Item_details.objects.create(sl_no=counters,tbl_data=tbl_data, item_subtitle=subdes1,status_flag=0,created_by=empno,created_on=datetime.now(), type='SSH',des_id=y, inspection_no_id=inspection_id, action_type=act_flag)
#                     counters+=1
#             m1.Item_details.objects.filter(inspection_no=inspection_id,update_status ='F').delete()
#             m1.Marked_Officers.objects.filter(item_no__in=m1.Item_details.objects.filter(inspection_no=inspection_id).values('item_no'),update_status ='F').delete()
#             m1.Marked_Officers.objects.filter(item_no__in=m1.Item_details.objects.filter(inspection_no=inspection_id).values('item_no'),marked_to__isnull=True).delete()
            
#             for i in del_array:
#                 m1.Item_details.objects.filter(inspection_no=inspection_id,des_id=i).update(del_flag=1)
#             m1.Item_details.objects.filter(inspection_no=inspection_id).update(link_image=None)
#             for i in range(len(final_img)):
#                 ref = final_img[i][0]
#                 path = (final_img[i][1])[1:]
#                 data = list(m1.Item_details.objects.filter(inspection_no=inspection_id,des_id=ref).values('link_image'))
#                 if len(data) > 0:
#                     data = data[0]['link_image']
#                     if data != None:
#                         path = data +'@#@'+path
#                 m1.Item_details.objects.filter(inspection_no=inspection_id,des_id=ref).update(link_image = path)
#             for i in range(len(temp_para_array_marked)):
#                 des_id = temp_para_array_marked[i]['id']
#                 markeofficer = temp_para_array_marked[i]['officer'].split(',')
#                 if len(markeofficer) > 0:
#                     item_id = list(m1.Item_details.objects.filter(inspection_no=inspection_id,des_id=des_id).values('item_no'))
#                     if len(item_id) >0:
#                         item_id = item_id[0]['item_no']
#                     else:
#                         continue
#                     if not m1.Marked_Officers.objects.filter(item_no = item_id).exists():
#                         for i in markeofficer:
#                             Desig=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i,)
#                             if Desig:
#                                 Desig1=Desig[0].designation_code
#                                 if m1.Marked_Officers.objects.all().last():
#                                     marked_no_id=(m1.Marked_Officers.objects.all().last().marked_no)+1
#                                 else:
#                                     marked_no_id = 1
#                                 m1.Marked_Officers.objects.create(created_on=datetime.now(),created_by=empno,marked_no=marked_no_id,marked_emp=i, status_flag=0,item_no_id=item_id,marked_to_id=Desig1)
#             m1.Item_details.objects.filter(inspection_no=inspection_id,link_image='').update(link_image=None)
#             return JsonResponse({"status": 1,'inspection_no': inspection_id})
#         return JsonResponse({"success":False}, status=400)
#     except Exception as e:
#         try:
#             m1.error_Table.objects.create(fun_name="save_draft_data",user_id=request.user,err_details=str(e))
#         except:
#             print("Internal Error!!!")
#         return render(request, "errorspage.html", {})


#New changes as asked by ED/CC deployed on 21/07/2023

###changes01092023 commented

# def officertask(request):
#     # if 
#     desigs=json.loads(request.GET.get('desigs'))
#     id=request.GET.get('id')
#     # desigs=desigs.split(',')
#     print(desigs, id)
#     designations=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=desigs).values('designation','designation_code'))
#     context={
#       'designations':designations,  
#       'id':id,
#     }
#     return JsonResponse(context,safe=False)

# def create_inspection_form(request):
#     # try:
#         print(request.user)
#         empnox = models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=request.user)| Q(official_email_ID=request.user.guest_email) | Q(official_email_ID=request.user.email), empno__isnull=False)
#         empnumber=None
#         dlevel=None
#         rly_unit_id=None
#         if empnox:
#             empno = empnox[0].empno
#             empnumber = empnox[0].designation_code
#             dlevel = empnox[0].d_level
#             rly_unit_id = empnox[0].rly_unit_id
#         empdata = models.Level_Desig.objects.exclude(delete_flag=True).filter(official_email_ID=request.user).values('designation', 'station_name','empno','empno__empname','empno__empmname','empno__emplname')
#         insp_ofc_name=''
#         if empdata:
#             employee_fname =empdata[0]['empno__empname']
#             if employee_fname:
#                 insp_ofc_name = employee_fname + " "


#             employee_mname = empdata[0]['empno__empmname']
#             if employee_mname:
#                 insp_ofc_name += employee_mname + " "


#             employee_lname = empdata[0]['empno__emplname']
#             if employee_lname:
#                 insp_ofc_name += employee_lname
#         else:
#             insp_ofc_name = 'NA'


           
#         if empdata:
#             desig_longdesc = empdata[0]['designation']
#             station_name = empdata[0]['station_name']
#         else:
#             desig_longdesc ='NA'
#             station_name='NA'
#         insp_desig=desig_longdesc

#         insp_type=[
#             {'code':'0', 'types': 'Regular Inspection'},
#             {'code':'1', 'types': 'Drive Based Inspection(issued by RB)'},
#             {'code':'2', 'types': 'Night Inspection'},
#             {'code':'3', 'types': 'Surprise Inspection'},
#         ]

#         item_typess=[
#             {'code':0, 'types': 'Others'},
#             {'code':1, 'types': 'Passenger Safety'},
#             {'code':2, 'types': 'Employee Safety '},
#         ]


#         list1=models.railwayLocationMaster.objects.filter(location_type_desc__in=['RAILWAY BOARD', 'PRODUCTION UNIT', 'HEAD QUATER','OFFICE', 'PSU', 'PRODUCTION UNIT', 'INSTITUTE']).values('location_code').order_by('location_code')
#         list2=[]
#         for i in list1:
#             list2.append(i['location_code'])
#         list3=models.railwayLocationMaster.objects.filter(location_type_desc__in=['DIVISION','WORKSHOP']).values('location_code', 'location_type').order_by('location_code')
#         list4=[]
#         list5 =[]
#         for i in list3:
#             list4.append({'location_code':i['location_code'],'location_type':i['location_type']})
#         try:
           
#             list5=list(models.Level_Desig.objects.exclude(delete_flag=True).all().values('designation','designation_code'))  
#         except Exception as e:
#             print("e==",e)  
#         list6=models.departMast.objects.all().values('department_name').order_by('department_name')
#         alldesig=models.Level_Desig.objects.exclude(delete_flag=True).values('designation').distinct().order_by('designation')
#         location_array = [{'type_code':'RRM', 'type': 'Running Room'},
#                             {'type_code': 'SEM', 'type': 'Section'},
#                             {'type_code': 'STM', 'type': 'Station'},
#                             # {'type_code':'SOP' , 'type': 'Shop'},
#                             # {'type_code':'WOS' , 'type': 'Work Shop'},
#                             {'type_code':'DLS' , 'type': 'Diesel Loco Shed'},
#                             {'type_code':'ELS' , 'type': 'Electric Loco Shed'},
#                             {'type_code':'COD' , 'type': 'Coaching Depot'},
#                             {'type_code':'WAD' , 'type': 'Wagon Depot'},
#                             { 'type_code': 'CTI', 'type': 'Training Institute'},
#                             { 'type_code': 'TRN', 'type': 'Train'},
#                             { 'type_code': 'HOS', 'type': 'Hospital'},
#                             { 'type_code': 'ORL', 'type': 'Other Rly Unit'},
#                            ]
#         location_array = sorted(location_array, key=lambda d: d['type'])

#         Zone11=models.Level_Desig.objects.exclude(delete_flag=True).exclude(rly_unit=None, official_email_ID = None).filter(Q(official_email_ID=request.user)| Q(official_email_ID=request.user.guest_email) | Q(official_email_ID=request.user.email)).values('rly_unit')
#         if Zone11:
#             Zone11 = Zone11[0]['rly_unit']
#             rly_zone = models.railwayLocationMaster.objects.filter(rly_unit_code=Zone11,location_type_desc__in=['RAILWAY BOARD', 'PRODUCTION UNIT', 'HEAD QUATER','OFFICE', 'PSU', 'PRODUCTION UNIT', 'INSTITUTE']).values('location_code').order_by('location_code')
#             if rly_zone:
#                 Zone1 = rly_zone[0]['location_code']
                
#                 setdiv = ''
#             else:
#                 rly_zone = models.railwayLocationMaster.objects.filter(rly_unit_code=Zone11,location_type_desc__in=['DIVISION','WORKSHOP']).values('location_code','parent_rly_unit_code').order_by('location_code')
               
#                 if rly_zone:
#                     setdiv = rly_zone[0]['location_code']
#                     rly_zone = models.railwayLocationMaster.objects.filter(rly_unit_code=rly_zone[0]['parent_rly_unit_code'],location_type_desc__in=['RAILWAY BOARD', 'PRODUCTION UNIT', 'HEAD QUATER','OFFICE', 'PSU', 'PRODUCTION UNIT', 'INSTITUTE']).values('location_code').order_by('location_code')
#                     if rly_zone:
#                         Zone1 = rly_zone[0]['location_code']
#                     else:
#                         Zone1 = ''
#                 else:
#                     Zone1 = ''
#                     setdiv = ''
#         else:
#             Zone1 = ''
#             setdiv = ''
   
#         desg_no=[]
#         if Zone1:
#             l_id=list(models.railwayLocationMaster.objects.filter(Q(location_code=Zone1)).values('rly_unit_code'))
#             if len(l_id)>0:
#                 datarlys=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation__isnull=False,rly_unit=l_id[0]['rly_unit_code']).exclude(designation_code=empnumber).values('designation','empno', 'designation_code').order_by('designation'))
#                 if len(datarlys)>0:
#                     if datarlys not in desg_no:
#                         desg_no.extend(datarlys)


#             l_id=list(models.railwayLocationMaster.objects.filter(Q(parent_location_code=Zone1)).values('rly_unit_code'))
#             if len(l_id)>0:
#                 for x in range(len(l_id)):
#                     datarlys=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation__isnull=False,rly_unit=l_id[x]['rly_unit_code']).exclude(designation_code=empnumber).values('designation','empno', 'designation_code').order_by('designation'))
#                     if len(datarlys)>0:
#                         if datarlys[0] not in desg_no:
#                             desg_no.extend(datarlys)
         
#             #All other officers
#             datarlys=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation__isnull=False).exclude(designation_code=empnumber).values('designation','empno', 'designation_code').order_by('designation'))
#             for x in range(len(datarlys)):
#                 # print(desg_no[x])
#                 if datarlys[x] not in desg_no:
#                     desg_no.append(datarlys[x])
         
#         else:
#             desg_no=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation__isnull=False).exclude(designation_code=empnumber).values('designation','empno', 'designation_code').order_by('designation'))


#         for i in range(len(desg_no)):
#             if '/' in desg_no[i]['designation']:
#                 r_des=desg_no[i]['designation'].replace('/',' ')
#             elif '.' in desg_no[i]['designation']:
#                 r_des=desg_no[i]['designation'].replace('.',' ')
#             else:
#                 r_des=desg_no[i]['designation']
#             desg_no[i].update({'empnoser':r_des})
#         desg_nounofficer = list(models.Level_Desig.objects.exclude(delete_flag=True).filter(parent_desig_code=empnumber).values_list('designation_code',flat=True).order_by('designation'))
#         desg_nodata1 = list(filter(lambda x: x['designation_code'] in desg_nounofficer, desg_no))
#         desg_nodata1 = sorted(desg_nodata1, key = lambda x: x['designation'])
#         desg_nodata2 = list(filter(lambda x: x['designation_code'] not in desg_nounofficer, desg_no))
#         desg_nodata2 = sorted(desg_nodata2, key = lambda x: x['designation'])
#         desg_no = desg_nodata1 + desg_nodata2
#         copy_no=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation__isnull=False).exclude(designation_code=empnumber).values('designation','empno', 'designation_code').order_by('designation'))
       
#         allDepartmentPhase2 = [{'department_name':'COMMON','department_code':0}]
#         allDepartmentPhase2.extend(list(models.departMast.objects.filter(delete_flag=False).values('department_name','department_code').order_by('department_name')))
#         for i in range(len(allDepartmentPhase2)):
#             if allDepartmentPhase2[i]['department_code'] == 0:
#                 inspTypePhase2 = list(models.inspectiontype_master.objects.filter(parent_id='-1',delete_flag=False,disable_flag=False,concerned_dept__isnull=True).values('instypeid','name'))

#             else:
#                 inspTypePhase2 = list(models.inspectiontype_master.objects.filter(parent_id='-1',delete_flag=False,disable_flag=False,concerned_dept=allDepartmentPhase2[i]['department_code']).values('instypeid','name'))
#             allDepartmentPhase2[i].update({'inspTypePhase2':inspTypePhase2})
#         allCategoryPhase2 = list(models.asset_master.objects.filter(disable_flag=False).values('asset_id','asset_category'))
#         for i in range(len(allCategoryPhase2)):
#             inspTypePhase2 = list(models.inspectiontype_master.objects.filter(parent_id='-1',delete_flag=False,disable_flag=False,asset=allCategoryPhase2[i]['asset_id']).values('instypeid','name'))
#             allCategoryPhase2[i].update({'inspTypePhase2':inspTypePhase2})
   
#         context={
#             'insp_desig':insp_desig,
#             'insp_ofc_name':insp_ofc_name,
#             'station_name':station_name,
#             'Zone':list2,
#             'division':list4,
#             'marked_to':list5,
#             'department':list6,
#             'desig': desig_longdesc,
#             'alldesig':alldesig,
#             'desg_no':desg_no,
#             'location_array': location_array,
#             'Zone1':Zone1,
#             'setdiv':setdiv,
#             'option_val':'create',
#             'copy_no':copy_no,
#             'allDepartmentPhase2':allDepartmentPhase2,
#             'allCategoryPhase2':allCategoryPhase2,
#             'insp_type':insp_type,
#             'item_typess':item_typess
#             }
       
#         ins_id=request.GET.get('ins_id')
#         ins_flag=request.GET.get('flag')
       
#         ins_detail=[]
#         item_id=[]
#         length = 0
#         sh = []
#         ssh = []
#         if ins_id!=None:
#             personal_values = list(m1.Inspection_details.objects.filter(inspection_no=ins_id).values('officer_desig','officer_name','station_name'))
#             if personal_values:
#                 insp_desig=personal_values[0]['officer_desig'] if personal_values[0]['officer_desig'] else insp_desig
#                 insp_ofc_name=personal_values[0]['officer_name'] if personal_values[0]['officer_name'] else insp_ofc_name
#                 station_name=personal_values[0]['station_name'] if personal_values[0]['station_name'] else station_name


#             item_t = m1.Inspection_details.objects.filter(inspection_no=ins_id).values('item_type')
#             mail_detail = m6.copyto_mails.objects.filter(doc_id=ins_id, doc_table='i', area_flag=0)
#             alldesig1 =models.Level_Desig.objects.exclude(delete_flag=True).values('designation').distinct().order_by('designation')
#             Accompany = list(m1.Insp_Accompany.objects.filter(inspection_no=ins_id).values('accompany'))
#             try:
#                 Accompany =list(map(lambda x: int(x['accompany']),Accompany))
#                 acc_type = 'int'
#             except Exception as e:
#                 acc_type = 'str'
#                 Accompany =list(map(lambda x: x['accompany'],Accompany))
#             des_id = json.dumps(list(m1.Item_details.objects.filter(inspection_no_id=ins_id, inspection_no__item_type='Insp').exclude(type='SSH').values_list('des_id', flat=True).order_by('sl_no')))
#             if mail_detail:
#                 new_mail_detail= mail_detail[0].receiver_desig
#                 new_mail_desig_code= mail_detail[0].receiver_id
#             else:
#                 new_mail_detail  = 'NA'
#                 new_mail_desig_code = ''
#             item_type = item_t[0]['item_type']
#             if item_type == 'Insp':
#                 ins_detail=list(m1.Inspection_details.objects.filter(inspection_no=ins_id, item_type='Insp', status_flag=0).values())
#                 print(ins_detail)
#                 if ins_flag=='1':
#                     ins_detail=list(m1.Inspection_details.objects.filter(inspection_no=ins_id, item_type='Insp').values())
#                     # print(ins_detail)


#                 if ins_detail==[] and ins_flag=='0':
#                     return render(request,"data_not_found.html")
           
#                 item_details1= list(m1.Item_details.objects.filter(inspection_no_id=ins_id, inspection_no__item_type='Insp').values().order_by('sl_no'))
#                 item_data= m1.Item_details.objects.filter(inspection_no_id=ins_id, type="H").values()

#                 multi_loc = m1.Insp_multi_location.objects.filter(inspection_no_id=ins_id).values()
#                 multi_loc_zone = list(m1.Insp_multi_location.objects.filter(inspection_no_id=ins_id,type='HQ').values_list('item',flat=True))
#                 zone = multi_loc_zone

                
#                 empnox = models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=request.user)| Q(official_email_ID=request.user.guest_email) | Q(official_email_ID=request.user.email), empno__isnull=False)
#                 empnumber=None
#                 if empnox:
#                     empnumber = empnox[0].designation_code
#                 data=[]
#                 for i in range(len(zone)):
#                     l_id=list(models.railwayLocationMaster.objects.filter(location_code=zone[i]).values('rly_unit_code'))
#                     if len(l_id)>0:
#                         desg_no1=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation__isnull=False,rly_unit=l_id[0]['rly_unit_code']).exclude(designation_code=empnumber).values('designation','empno', 'designation_code').order_by('designation'))
#                         if len(desg_no1)>0:
#                             data.extend(desg_no1)
#                     l_id=list(models.railwayLocationMaster.objects.filter(Q(parent_location_code=zone[i])).values('rly_unit_code'))
#                     if len(l_id)>0:
#                         for x in range(len(l_id)):
#                             desg_no1=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation__isnull=False,rly_unit=l_id[x]['rly_unit_code']).exclude(designation_code=empnumber).values('designation','empno', 'designation_code').order_by('designation'))
#                             if len(desg_no1)>0:
#                                 if desg_no1[0] not in data:
#                                     data.extend(desg_no1)
#                 if len(data)==0:
#                     data_desg_no  = desg_no
#                 else:
#                     data_desg_no  = data
#                 for i in range(len(data_desg_no)):
#                     if '/' in data_desg_no[i]['designation']:
#                         r_des=data_desg_no[i]['designation'].replace('/',' ')
#                     elif '.' in data_desg_no[i]['designation']:
#                         r_des=data_desg_no[i]['designation'].replace('.',' ')
#                     else:
#                         r_des=data_desg_no[i]['designation']
#                     data_desg_no[i].update({'empnoser':r_des,'designation_code1':str(data_desg_no[i]['designation_code'])})

#                 desg_nounofficer = list(models.Level_Desig.objects.exclude(delete_flag=True).filter(parent_desig_code=empnumber).values_list('designation_code',flat=True).order_by('designation'))
#                 desg_nodata1 = list(filter(lambda x: x['designation_code'] in desg_nounofficer, data_desg_no))
#                 desg_nodata1 = sorted(desg_nodata1, key = lambda x: x['designation'])
#                 desg_nodata2 = list(filter(lambda x: x['designation_code'] not in desg_nounofficer, data_desg_no))
#                 desg_nodata2 = sorted(desg_nodata2, key = lambda x: x['designation'])
#                 data_desg_no = desg_nodata1 + desg_nodata2

#                 multi_loc_div = m1.Insp_multi_location.objects.filter(inspection_no_id=ins_id,type='DIV').values_list('item',flat=True).order_by('item')
#                 multi_loc_from = m1.Insp_multi_location.objects.filter(inspection_no_id=ins_id, type='LOC').distinct('table_from').values_list('table_from', flat=True)
#                 length += item_data.count()
#                 for zb in item_details1:
#                     item_id.append(zb['des_id'])
#                 for x in range(len(item_data)):
#                     mid= str(x+1)+'.'
#                     itmdata = m1.Item_details.objects.filter(inspection_no_id=ins_id, type="SH", des_id__startswith=mid).values()
#                     ssh.append(0)
#                     sh.append(len(itmdata))
#                     for y in range(len(itmdata)):
#                         nid= str(x+1)+'.'+ str(y+1)+'.'
#                         itmdata1 = m1.Item_details.objects.filter(inspection_no_id=ins_id, type="SSH", des_id__startswith=nid).count()
#                         ssh.append(itmdata1)
#                 para_count = 0
#                 para_marked_officer =[]
#                 div_para_no = []
#                 marked_off_details = []
#                 item_val = []
#                 table_val = []
#                 for j in item_details1:
#                     des_id = para_count
#                     typ = j['des_id'].split('.')
#                     if j['del_flag'] == 1:
                       
#                         item_val.append(des_id)
#                     if j['tbl_data'] != '[]':
#                         table_val.append(str(des_id))


#                     if len(typ) == 1:
#                         if typ[0].isalpha():
#                             typ = 'S'
#                             j['item_title'] = j['item_title'][15:]
#                             div_para_no.append(des_id)
#                         else:
#                             typ = 'P'
#                             para_marked_officer.append(des_id)
#                             div_para_no.append(des_id)
                            
#                     elif len(typ) == 2:
#                         typ = 'SP'
#                         para_marked_officer.append(des_id)
#                         div_para_no.append(des_id)
#                     else:
#                         typ = 'SSP'
#                         div_para_no.append(des_id)

#                     mark=m1.Marked_Officers.objects.filter(item_no=j['item_no']).values()
#                     custom_info=[]
#                     marked_officers1=''
#                     for x in mark:
#                         if x['target_date'] is not None:
#                             tddate = x['target_date'].strftime('%d/%m/%y')
#                         else:
#                             tddate ='-1'
#                         if x['action_type'] == 1:
#                             x['action_type'] = 'info'
#                         else:
#                             x['action_type'] = 'action'
#                         xd={'DesignationCode':x['marked_to_id'],'selected_action':x['action_type'],'priority':x['priority'],'tddate':tddate}
#                         des = models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=x['marked_to_id'])
#                         if des.count()>0:
#                             marked_officers1 += str(des[0].designation_code)+','
#                             xd['Designation']=str(des[0].designation)
#                         custom_info.append(xd)
#                     marked_officers1 = marked_officers1.split(',')
#                     marked_officers1 = marked_officers1[:len(marked_officers1)-1]
#                     off_1 = []
#                     select_officer = {}
#                     pre_status = "NO"
#                     if len(marked_officers1)>0:
#                         present_1 = list(map(lambda x: x['designation_code'],data_desg_no))
#                         off_1=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=marked_officers1).exclude(designation_code__in = present_1).values('designation','empno', 'designation_code').order_by('designation'))
#                         select_officer = desig_changecode_edit(request,marked_officers1)
#                         pre_status = "YES"
                    

#                     select_officer1 = []
#                     if len(select_officer) > 0:
#                         marked_id = json.loads(select_officer['marked_id'])
#                         marked_desig = select_officer['marked_desig']
#                         marked_key = json.loads(select_officer['marked_key'])
#                         marked_desig = marked_desig.split(',')
#                         listToStr = '@$@'.join([str(elem) for elem in marked_desig])
#                         listToStr = listToStr.replace("/","##")
#                         listToStr = listToStr.replace("'","@@")
#                         desig_1 = []


#                         for ext in range(len(marked_key)):
#                             ext_1 = marked_key[ext]['designation_code']
#                             ltr_1 = '@#@'.join([str(elem) for elem in ext_1])
#                             ltr_2 = marked_key[ext]['desig']
#                             ltr_2 = ltr_2.replace("/","##")
#                             ltr_2 = ltr_2.replace("'","@@")
#                             ltr_1 = ltr_1 + '@$$@' + ltr_2
#                             desig_1.append(ltr_1)
                       
#                         marked_off_details.append({"no":str(des_id),"marked_desig":listToStr,"marked_id":marked_id,"marked_key":desig_1,"present":pre_status})
#                     else:
#                         marked_off_details.append({"no":str(des_id),"marked_id":"","marked_desig":"","marked_key":"","present":"NO"})
#                     for i in range(len(off_1)):
#                         if '/' in off_1[i]['designation']:
#                             r_des=off_1[i]['designation'].replace('/',' ')
#                         elif '.' in off_1[i]['designation']:
#                             r_des=off_1[i]['designation'].replace('.',' ')
#                         else:
#                             r_des=off_1[i]['designation']
#                         off_1[i].update({'empnoser':r_des})
#                     j.update({'extra_off':off_1,'mrkoffi': marked_officers1,'created_on':'','item_type':j['item_type'],'des_id_id':des_id,'typ':typ,'custom_info':json.dumps(custom_info, separators=(',', ':'))})
#                     _tbl_tbl = []
#                     if j['tbl_data'] != '[]':
#                         res = eval(j['tbl_data'])
#                         for k1 in range(len(res)):
#                             d2 = []
#                             for k2 in range(len(res[k1])):
#                                 d2.append(res[k1][k2])
#                             _tbl_tbl.append(d2)


                           
#                         # tbl_tbl = j['tbl_data'][2:]
#                         # tbl_tbl = tbl_tbl[0:len(tbl_tbl)-2]
#                         # tbl_tbl = tbl_tbl.split('], [')
                       
#                         # for xx in tbl_tbl:
#                         #     d2 = []
#                         #     d1 = xx.split(',')
#                         #     for il in d1:
#                         #         d3 = il.strip()[1:]
#                         #         d3 = d3[0:len(d3)-1]
#                         #         d2.append(d3)
#                         #     _tbl_tbl.append(d2)
#                         # print(_tbl_tbl)
#                     else:
#                         _tbl_tbl = '[]'
#                     j.update({'tbl_data':_tbl_tbl})
#                     ins_detail[0].update({'item_details1': item_details1})
#                     para_count +=1
#                 # item_val = list(m1.Item_details.objects.filter(inspection_no=ins_id,del_flag=1).values('des_id'))
#                 # item_val = list(map(lambda d: d['des_id'], item_val))
#                 # table_val = list(m1.Item_details.objects.filter(inspection_no=ins_id).exclude(tbl_data='[]').values('des_id'))
#                 # table_val = list(map(lambda d: d['des_id'], table_val))
#                 item_details_img= list(m1.Item_details.objects.filter(inspection_no_id=ins_id,link_image__isnull=False).values('link_image','des_id').order_by('sl_no'))
#                 img_path = []
#                 for i5 in range(len(item_details_img)):
#                     img = item_details_img[i5]['link_image'].split('@#@')
#                     id = item_details_img[i5]['des_id']
#                     for i6 in range(len(img)):
#                             img_path.append({'id':id,'path':img[i6]})
#                 new_mail_desig_code = new_mail_desig_code.split(',')
#                 try:
#                     prev_data = ins_detail[0]['item_details1']
#                     prev_details  = ins_detail[0]['item_details1']
#                 except Exception as e:
#                     prev_data = []
#                     prev_details  = []
#                 item_val.reverse()
#                 print(prev_details)
#                 print(item_type)
#                 context={
#                     'insp_desig':insp_desig,
#                     'insp_ofc_name':insp_ofc_name,
#                     'station_name':station_name,
#                     'img_path':json.dumps(img_path),
#                     'ins_id':ins_id,
#                     'ins_detail':ins_detail,
#                     'item_id': item_id,
#                     'length_of_h': length,
#                     'sh_list': sh,
#                     'ssh_list': ssh,
#                     'multi_loc': multi_loc,
#                     'Zone':list2 ,
#                     'division':list4,
#                     'department':list6,
#                     'new_mail_detail': new_mail_detail,
#                     'new_mail_desig_code': json.dumps(new_mail_desig_code),
#                     'alldesig':alldesig1,
#                     'desg_no':data_desg_no,
#                     'desg_no11':desg_no,
#                     'des_id': des_id,
#                     'Accompany': Accompany,
#                     'location_array': location_array,
#                     'multi_loc_from': multi_loc_from,
#                     'multi_loc_zone':multi_loc_zone,
#                     'multi_loc_div':multi_loc_div,
#                     'item_val':json.dumps(item_val),
#                     'table_val':json.dumps(table_val),
#                     'option_val':'edit',
#                     'acc_type' : acc_type,
#                     'copy_no':copy_no,
#                     # 'prev_data':json.dumps(prev_data),
#                     'prev_details':prev_details,
#                     'div_para_no':json.dumps(div_para_no),
#                     'para_marked_officer':json.dumps(para_marked_officer),
#                     'para_count':para_count,
#                     'marked_off_details':json.dumps(marked_off_details),
#                     'ins_flag':ins_flag,
#                     'allDepartmentPhase2':allDepartmentPhase2,
#                     'allCategoryPhase2':allCategoryPhase2,
#                     'insp_type':insp_type,
#                     'item_sections':ins_detail[0]['item_sections'],
#                     'item_typess':item_typess
#                     }  
#                 # print(prev_details)
#                 return render(request,"create_inspection_form.html",context)
#             elif item_type == 'Chk':
#                 ins_detail=list(m1.Inspection_details.objects.filter(inspection_no=ins_id, item_type='Chk').values('zone','division','dept','location','inspected_on','inspection_title'))
#                 item_details1= list(m1.Item_details.objects.filter(inspection_no_id=ins_id, inspection_no__item_type='Chk').values('observation').order_by('sl_no'))
#                 empdata=m1.empmast.objects.filter(myuser_id=request.user).values('empname','empno', 'desig_longdesc')
#                 desig_longdesc = empdata[0]['desig_longdesc']
#                 list1=models.railwayLocationMaster.objects.filter(location_type='ZR').values('location_code')
#                 list2=[]
#                 for i in list1:
#                     list2.append(i['location_code'])
#                 list3=models.railwayLocationMaster.objects.filter(location_type='DIV').values('location_code')
#                 list4=[]
#                 list5 =[]
#                 for i in list3:
#                     list4.append(i['location_code'])
#                 try:
#                     list5=list(models.Level_Desig.objects.exclude(delete_flag=True).all().values('designation','designation_code'))  
#                 except Exception as e:
#                     print("e==",e)  
#                 list6=models.departMast.objects.all().values('department_name')
#                 context={
#                     'Zone':list2 ,
#                     'division':list4,
#                     'marked_to':list5,
#                     'department':list6,
#                     'desig': desig_longdesc,
#                     'ins_detail':ins_detail,
#                     'item_details1':item_details1
#                     }
#                 return render(request, 'search_checklist_template_report.html',context)
               
#             else:
#                 messages.error(request, 'oops error')
#         else:    
#             return render(request,"create_inspection_form.html", context)
#     # except Exception as e:
#     #     try:
#     #         m1.error_Table.objects.create(fun_name="create_inspection_form",user_id=request.user,err_details=str(e))
#     #     except:
#     #         print("Internal Error!!!")
#     #     return render(request, "errorspage.html", {})

# def create_inspection_details(request):
#     # try:
#         if request.method == "POST" and request.is_ajax():
#             print("inside create_inspection_details")
#             from datetime import datetime
#             final=decryptWithAesEinspect(request.POST.get('final_partinspected'))
#             final_id=request.POST.get('id_partinspected')
#             rly=json.loads(request.POST.get('zone'))
#             div=json.loads(request.POST.get('division'))
#             # dept=json.loads(request.POST.get('department'))
#             loc=json.loads(request.POST.get('location'))
#             insdt=request.POST.get('txtDate2')
#             accompany=json.loads(request.POST.get('accompany'))
#             final_img = json.loads(request.POST.get('final_img'))
#             inspection_no = request.POST.get('inspection_no')
#             insp_desig = request.POST.get('insp_desig')
#             insp_ofc_name = request.POST.get('insp_ofc_name')
#             station_name = request.POST.get('station_name')
#             insp_type = request.POST.get('insp_type')
#             item_sections = request.POST.get('item_sections')
#             sec_ids=json.loads(request.POST.get('sec_ids'))
#             sec_details=json.loads(request.POST.get('sec_details'))
#             full_array=json.loads(request.POST.get('full_array'))
#             ins_flag=request.POST.get('ins_flag')
#             if inspection_no =='' or ins_flag=='1':
#                 inspection_no = None
           
#             if 'to' in insdt:
#                 dt = insdt.split('to')
#                 st_date = dt[0].strip()
#                 en_date = dt[1].strip()
#                 start_date = datetime.strptime(st_date, '%d/%m/%y').strftime('%Y-%m-%d')
#                 inspected_on = datetime.strptime(en_date, '%d/%m/%y').strftime('%Y-%m-%d')
#             else:
#                 inspected_on = datetime.strptime(insdt, '%d/%m/%y').strftime('%Y-%m-%d')
#                 start_date = datetime.strptime(insdt, '%d/%m/%y').strftime('%Y-%m-%d')


#             title=request.POST.get('titleinsp')
#             send_to=request.POST.get('send_to')
#             send_desig=request.POST.get('send_desig')
           
#             finalval = json.loads(final)
#             final_allid = json.loads(final_id)
#             year = str(datetime.now().year)
#             print(finalval,final_allid,sec_ids,sec_details)


#             # empno=models.Level_Desig.objects.exclude(delete_flag=True).filter(official_email_ID=request.user)
#             empnox = models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=request.user)| Q(official_email_ID=request.user.guest_email) | Q(official_email_ID=request.user.email), empno__isnull=False)
#             if empnox:
#                 empno = empnox[0].empno_id
#                 desig = empnox[0].designation
#                 ddesig = empnox[0].designation_code
#             else:
#                 messages.error(request, 'Employee id not found')
#             if m1.Inspection_details.objects.filter(inspection_no = inspection_no ).exists():
#                 note_ = year+'/'+desig+'/Insp'+'/'
#                 last_note1 = m1.Inspection_details.objects.filter(inspection_note_no__istartswith=note_).aggregate(Max('insp_last'))
#                 if last_note1['insp_last__max'] == None:
#                     last_note1 = 1
#                     note_no = year+'/'+desig+'/Insp'+'/'+ str(last_note1)
#                 else:
#                     last_note1 = int(last_note1['insp_last__max']) +1
#                     note_no = year+'/'+desig+'/Insp'+'/'+ str(last_note1)
#                 m1.Inspection_details.objects.filter(inspection_no = inspection_no ).update(inspection_title=title,station_name=station_name,officer_name=insp_ofc_name,officer_desig=insp_desig,  created_by=empno, insp_last=last_note1,inspection_note_no=note_no, inspection_officer_id=ddesig, item_type='Insp', modified_by=empno, status_flag=1, start_date=start_date, inspected_on=inspected_on,final_submit_on=datetime.now(),insp_type=insp_type,item_sections=item_sections)
               
#                 # m1.Insp_Accompany.objects.filter(inspection_no_id=inspection_no).delete()
#                 # m6.copyto_mails.objects.filter( doc_id=inspection_no, doc_table='i').delete()
#                 # m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_no, type='HQ').delete()
#                 # m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_no, type='DIV').delete()
#                 # m1.Marked_Officers.objects.filter(item_no__in = m1.Item_details.objects.filter(inspection_no=inspection_no).values('item_no')).delete()
#                 # m1.Item_details.objects.filter(inspection_no=inspection_no).delete()
#                 # m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_no,type='LOC').delete()
               
#                 inspection_id = inspection_no
#             else:
#                 note_ = year+'/'+desig+'/Insp'+'/'
#                 last_note1 = m1.Inspection_details.objects.filter(inspection_note_no__istartswith=note_).aggregate(Max('insp_last'))
#                 if last_note1['insp_last__max'] == None:
#                     last_note1 = 1
#                     note_no = year+'/'+desig+'/Insp'+'/'+ str(last_note1)
#                 else:
#                     last_note1 = int(last_note1['insp_last__max']) +1
#                     note_no = year+'/'+desig+'/Insp'+'/'+ str(last_note1)
#                 m1.Inspection_details.objects.create(inspection_title=title,created_on=datetime.now(), station_name=station_name,officer_name=insp_ofc_name,officer_desig=insp_desig, created_by=empno, insp_last=last_note1,inspection_note_no=note_no, inspection_officer_id=ddesig, item_type='Insp', modified_by=empno, status_flag=1, start_date=start_date, inspected_on=inspected_on,final_submit_on=datetime.now(),insp_type=insp_type,item_sections=item_sections)            
#                 inspection_id=m1.Inspection_details.objects.all().last().inspection_no
           
#             messages.info(request, f'Inspection note successfully saved with Inspection Note No: {note_no}')




#             m1.Insp_Accompany.objects.filter(inspection_no_id=inspection_id).update(update_status='F')
#             if m1.Insp_Accompany.objects.filter(inspection_no_id=inspection_id).exists():
#                 for up in accompany:
#                     if m1.Insp_Accompany.objects.filter(inspection_no_id=inspection_id, accompany=up).exists():
#                         m1.Insp_Accompany.objects.filter(inspection_no_id=inspection_id, accompany=up).update(accompany=up,update_status='T')
#                     else:
#                         m1.Insp_Accompany.objects.create(accompany=up, inspection_no_id=inspection_id)
#             else:
#                 for acc in accompany:
#                     m1.Insp_Accompany.objects.create(accompany=acc, inspection_no_id=inspection_id)
#             m1.Insp_Accompany.objects.filter(inspection_no_id=inspection_id,update_status='F').delete()
#             #======================change 21-11-22======================
#             for rl in rly:
#                 if m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_id, item=rl, type='HQ').exists():
#                     m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_id, item=rl, type='HQ').update(inspection_no_id=inspection_id, item=rl, type='HQ',update_status='T')
#                 else:
#                     m1.Insp_multi_location.objects.create(inspection_no_id=inspection_id, item=rl, type='HQ')
#             for di in div:
#                 if m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_id, item=di, type='DIV').exists():
#                     m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_id, item=di, type='DIV').update(inspection_no_id=inspection_id, item=di, type='DIV',update_status='T')
#                 else:
#                     m1.Insp_multi_location.objects.create(inspection_no_id=inspection_id, item=di, type='DIV')
           
#             for lo in loc:
#                 if lo:
#                     new_loc = lo.split('#')
#                     location = new_loc[0]
#                     location_type = new_loc[1]
#                     location_code = new_loc[2]


#                     #print(location, location_type)
#                     if m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_id, item=location,  type='LOC').exists():
#                         m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_id, item=location,  type='LOC').update(inspection_no_id=inspection_id, item=location, item_code=location_code, type='LOC', table_from=location_type,update_status='T')
#                     else:
#                         m1.Insp_multi_location.objects.create(inspection_no_id=inspection_id, item=location, item_code=location_code, type='LOC', table_from=location_type)

#             if len(loc) == 0:
#                 location = None
#                 location_type = None
#                 location_code = None
           
#             #========================
#             m1.Insp_multi_location.objects.filter(inspection_no=inspection_id,update_status='F').delete()
#             m1.Item_details.objects.filter(inspection_no=inspection_id).update(update_status ='F')
#             m1.Marked_Officers.objects.filter(item_no__in=m1.Item_details.objects.filter(inspection_no=inspection_id).values('item_no')).update(update_status ='F')

#             officer_email=[]
#             officer_contact=[]
#             marked_officers_sms=[]
#             counters =1
#             if len(sec_ids) == 0:
#                 # full_array=full_array.split(',')
#                 sec_ids['A']=full_array
#             for a in (sec_ids):
#                 if item_sections != '0':
#                     locid='location_at'+a
#                     locationdet=sec_details[locid]
#                     xl = locationdet.split('#')
#                     sec_name=xl[0]
#                     sec_type=xl[1]
#                     sec_id=xl[2]
#                     heading='Observation at '+ sec_name
#                     m1.Item_details.objects.create(sl_no=counters,item_title=heading,status_flag=4, created_on=datetime.now(), type='S',des_id=a,created_by=empno, inspection_no_id=inspection_id,location_table=sec_type,location_code=sec_id,location_val = sec_name)
#                     counters+=1
#                 else:
#                     sec_type=location_type
#                     sec_id=location_code
#                     sec_name=location
                    
#                 for f, b in zip(finalval, final_allid):
#                     for x,y in zip(finalval[f], final_allid[b]):
#                         s = y.split('.')
#                         if s[0] not in sec_ids[a]:
#                             continue
#                         if len(s) == 1:
#                             hed = 'heading'+y
#                             heading = finalval[f][hed]
#                             tbl_data = finalval[f][y]
                            
#                             if m1.Item_details.objects.filter(type='H',des_id=y, inspection_no=inspection_id).exists():
#                                 m1.Item_details.objects.filter(type='H',des_id=y, inspection_no=inspection_id).update(sl_no=counters,link_image=None,del_flag=0,tbl_data=tbl_data,item_title=heading,status_flag=1, created_on=datetime.now(),created_by=empno, type='H',des_id=y,update_status='T',location_table=sec_type,location_code=sec_id,location_val = sec_name)
#                                 item_id=m1.Item_details.objects.filter(type='H',des_id=y, inspection_no=inspection_id).all().last().item_no
#                             else:
#                                 m1.Item_details.objects.create(sl_no=counters,tbl_data=tbl_data,item_title=heading,status_flag=1, created_on=datetime.now(), type='H',des_id=y,created_by=empno, inspection_no_id=inspection_id,location_table=sec_type,location_code=sec_id,location_val = sec_name)
#                                 item_id=m1.Item_details.objects.all().last().item_no
#                             y2=str(y+'.1')
#                             if y2 in final_allid[b]:
#                                 #print('if',y2)
#                                 m1.Item_details.objects.filter(type='H',des_id=y, inspection_no_id=inspection_id).update(status_flag=4)
#                                 pass
#                             else:
#                                 #print('else',y2)
#                                 # trz = 'targetdate'+y
#                                 officm = 'markeofficer'+y
#                                 # chk = 'check' + y

                                
                            
#                                 # targetd = finalval[f][trz]
#                                 markof = finalval[f][officm]
#                                 # checkbox = finalval[f][chk]


                            


#                                 # if checkbox == '1':
#                                 #     checkbox = 1
#                                 # else:
#                                 #     checkbox = 0
#                                 markeofficer = markof.split(',')
#                                 # if targetd:
#                                 #     targetd=targetd.split('/')
#                                 #     targetd='20'+targetd[2].strip()+'-'+targetd[1].strip()+'-'+targetd[0].strip()
#                                 #     t_date = targetd
                                
#                                 # else:
#                                 #     t_date = None

#                                 # for action type
#                                 # act_type = 'type' + y
#                                 # typeofaction=finalval[f][act_type]
#                                 # if typeofaction=='info':
#                                 #     act_flag=1
#                                 # else:
#                                 #     act_flag=0

#                                 # rem='remarksmarkeofficer'+y
#                                 # remarks=finalval[f][rem]
#                                 ity='item_type'+y
#                                 item_type=finalval[f][ity]
#                                 # m1.Item_details.objects.filter(item_title=heading,status_flag=1, type='H',des_id=y, inspection_no_id=inspection_id).update(target_date=t_date, priority=checkbox, action_type=act_flag, markofcRemarks=remarks)
#                                 m1.Item_details.objects.filter(item_title=heading,status_flag=1, type='H',des_id=y, inspection_no_id=inspection_id).update(location_table=sec_type,location_code=sec_id,location_val = sec_name,item_type=item_type)

#                                 # item_id=m1.Item_details.objects.all().last().item_no
#                                 #mark officer
#                                 infom= 'markeofcinfo'+y
#                                 infom = finalval[f][infom]
#                                 if len(infom) >0:
#                                     officerinfo=json.loads(infom)
#                                     print(officerinfo)
#                                 else:
#                                     officerinfo=[]
#                                 # officerinfo = (infom.strip('[')).strip(']').split(',')

#                                 if len(officerinfo):
#                                     for i in range(len(officerinfo)):
#                                         DesignationCode=officerinfo[i]['DesignationCode']
#                                         selected_action=officerinfo[i]['selected_action']
#                                         priority=officerinfo[i]['priority']
#                                         tddate=officerinfo[i]['tddate']
#                                         m1.Item_details.objects.filter(item_no=item_id).update(priority=priority)
#                                         Desig=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=DesignationCode)
#                                         if Desig:
#                                             Desig1=Desig[0].designation_code
#                                             if Desig[0].official_email_ID:
#                                                 officer_email.append(Desig[0].official_email_ID)
#                                             if Desig[0].contactnumber:
#                                                 if Desig[0].contactnumber not in officer_contact:
#                                                     marked_officers_sms.append({'contact':Desig[0].contactnumber,'designation':Desig[0].designation_code})
#                                                     officer_contact.append(Desig[0].contactnumber)
#                                             if m1.Marked_Officers.objects.all().last():
#                                                 marked_no_id=(m1.Marked_Officers.objects.all().last().marked_no)+1
#                                             else:
#                                                 marked_no_id = 1

                                            
#                                             if selected_action == 'info':
#                                                 if m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).exists():
#                                                     m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).update(update_status='T',created_on=datetime.now(),created_by=empno,marked_emp=DesignationCode,status_flag=1,action_type=1)
#                                                 else:   
#                                                     m1.Marked_Officers.objects.create(marked_emp=i,created_on=datetime.now(),created_by=empno, marked_no=marked_no_id,status_flag=1, item_no_id=item_id,marked_to_id=Desig1,action_type=1)
                                            
#                                             else:
#                                                 if tddate == '-1':
#                                                     if m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).exists():
#                                                         m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).update(update_status='T',created_on=datetime.now(),created_by=empno,marked_emp=DesignationCode,status_flag=1,action_type=0,priority=priority)
#                                                     else:   
#                                                         m1.Marked_Officers.objects.create(marked_emp=i,created_on=datetime.now(),created_by=empno, marked_no=marked_no_id,status_flag=1, item_no_id=item_id,marked_to_id=Desig1,action_type=0,priority=priority)
                                                         
#                                                 else:
#                                                     targetd=tddate.split('/')
#                                                     targetd='20'+targetd[2].strip()+'-'+targetd[1].strip()+'-'+targetd[0].strip()
#                                                     tddate = targetd
#                                                     if m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).exists():
#                                                         m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).update(update_status='T',created_on=datetime.now(),created_by=empno,marked_emp=DesignationCode,status_flag=1,action_type=0,priority=priority,target_date=tddate)
#                                                     else:   
#                                                         m1.Marked_Officers.objects.create(marked_emp=i,created_on=datetime.now(),created_by=empno, marked_no=marked_no_id,status_flag=1, item_no_id=item_id,marked_to_id=Desig1,action_type=0,priority=priority,target_date=tddate)
#                                                     m1.Item_details.objects.filter(item_no=item_id).update(target_date=tddate,priority=priority)   



#                                 elif markof:
#                                     for i in markeofficer:
#                                         Desig=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i)
#                                         if Desig:
#                                             Desig1=Desig[0].designation_code
#                                             if Desig[0].official_email_ID:
#                                                 officer_email.append(Desig[0].official_email_ID)
#                                             if Desig[0].contactnumber:
#                                                 if Desig[0].contactnumber not in officer_contact:
#                                                     marked_officers_sms.append({'contact':Desig[0].contactnumber,'designation':Desig[0].designation_code})
#                                                     officer_contact.append(Desig[0].contactnumber)
#                                             if m1.Marked_Officers.objects.all().last():
#                                                 marked_no_id=(m1.Marked_Officers.objects.all().last().marked_no)+1
#                                             else:
#                                                 marked_no_id = 1
                                            

#                                             if m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).exists():
#                                                 m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).update(update_status='T',created_on=datetime.now(),created_by=empno,marked_emp=i,status_flag=1)
#                                             else:   
#                                                 m1.Marked_Officers.objects.create(marked_emp=i,created_on=datetime.now(),created_by=empno, marked_no=marked_no_id,status_flag=1, item_no_id=item_id,marked_to_id=Desig1)
                                        
#                                         else:
#                                             print('error')
    
#                         elif len(s) == 2:
#                             ob = 'observation'+y
#                             # trz = 'targetdate'+y
#                             officm = 'markeofficer'+y
#                             # chk = 'check' + y


#                             observation = finalval[f][ob]
#                             # targetd = finalval[f][trz]
#                             markof = finalval[f][officm]
#                             markeofficer = markof.split(',')


#                             # checkbox = finalval[f][chk]


#                             # if checkbox == '1':
#                             #     checkbox = 1
#                             # else:
#                             #     checkbox = 0

#                             # for action type
#                             # act_type = 'type' + y
#                             # typeofaction=finalval[f][act_type]
#                             # if typeofaction=='info':
#                             #     act_flag=1
#                             # else:
#                             #     act_flag=0
                        
#                             # if targetd:
#                             #     # targetdate = datetime.strptime(targetd, '%d/%m/%Y').strftime('%Y-%m-%d')
#                             #     targetd=targetd.split('/')
#                             #     targetd='20'+targetd[2].strip()+'-'+targetd[1].strip()+'-'+targetd[0].strip()
#                             #     targetdate = targetd
#                             # else:
#                             #     targetdate = None
#                             #print(observation)
#                             tbl_data = finalval[f][y]
#                             # rem='remarksmarkeofficer'+y
#                             # remarks=finalval[f][rem]
#                             ity='item_type'+y
#                             item_type=finalval[f][ity]
#                             if m1.Item_details.objects.filter(inspection_no=inspection_id, des_id=y,  type='SH').exists():
#                                 print("update")
#                                 # m1.Item_details.objects.filter(inspection_no=inspection_id, des_id=y,  type='SH').update(sl_no=counters,link_image=None,del_flag=0,tbl_data=tbl_data,observation=observation,priority=checkbox, status_flag=1,created_by=empno,created_on=datetime.now(), target_date=targetdate,action_type=act_flag,update_status='T',markofcRemarks=remarks)
#                                 m1.Item_details.objects.filter(inspection_no=inspection_id, des_id=y,  type='SH').update(sl_no=counters,link_image=None,del_flag=0,tbl_data=tbl_data,observation=observation, status_flag=1,created_by=empno,created_on=datetime.now(), update_status='T',location_table=sec_type,location_code=sec_id,location_val = sec_name,item_type=item_type)

#                                 item_id=m1.Item_details.objects.filter(inspection_no=inspection_id, des_id=y,  type='SH').all().last().item_no
#                             else:
#                                 # m1.Item_details.objects.create(sl_no=counters,tbl_data=tbl_data,observation=observation,priority=checkbox, status_flag=1,inspection_no_id=inspection_id, des_id=y, target_date=targetdate, type='SH', action_type=act_flag,created_by=empno,created_on=datetime.now(),markofcRemarks=remarks)
#                                 m1.Item_details.objects.create(sl_no=counters,inspection_no_id=inspection_id,link_image=None,del_flag=0,tbl_data=tbl_data,observation=observation, des_id=y, type='SH',status_flag=1,created_by=empno,created_on=datetime.now(), update_status='T',location_table=sec_type,location_code=sec_id,location_val = sec_name,item_type=item_type)
#                                 item_id=m1.Item_details.objects.all().last().item_no

#                             # item_id=m1.Item_details.objects.all().last().item_no
#                             #mark officer
#                             infom= 'markeofcinfo'+y
#                             infom = finalval[f][infom]
#                             # print(infom)
#                             if len(infom) >0:
#                                 officerinfo=json.loads(infom)
#                                 print(officerinfo)
#                             else:
#                                 officerinfo=[]
#                             # officerinfo = ((infom.strip('[')).strip(']'))
#                             # print(officerinfo)

#                             if len(officerinfo):
#                                 for i in range(len(officerinfo)):
#                                     DesignationCode=officerinfo[i]['DesignationCode']
#                                     selected_action=officerinfo[i]['selected_action']
#                                     priority=officerinfo[i]['priority']
#                                     tddate=officerinfo[i]['tddate']
#                                     m1.Item_details.objects.filter(item_no=item_id).update(priority=priority)
#                                     Desig=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=DesignationCode)
#                                     if Desig:
#                                         Desig1=Desig[0].designation_code
#                                         if Desig[0].official_email_ID:
#                                             officer_email.append(Desig[0].official_email_ID)
#                                         if Desig[0].contactnumber:
#                                             if Desig[0].contactnumber not in officer_contact:
#                                                 marked_officers_sms.append({'contact':Desig[0].contactnumber,'designation':Desig[0].designation_code})
#                                                 officer_contact.append(Desig[0].contactnumber)
#                                         if m1.Marked_Officers.objects.all().last():
#                                             marked_no_id=(m1.Marked_Officers.objects.all().last().marked_no)+1
#                                         else:
#                                             marked_no_id = 1

                                        
#                                         if selected_action == 'info':
#                                             if m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).exists():
#                                                 m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).update(update_status='T',created_on=datetime.now(),created_by=empno,marked_emp=DesignationCode,status_flag=1,action_type=1)
#                                             else:   
#                                                 m1.Marked_Officers.objects.create(marked_emp=i,created_on=datetime.now(),created_by=empno, marked_no=marked_no_id,status_flag=1, item_no_id=item_id,marked_to_id=Desig1,action_type=1)
                                        
#                                         else:
#                                             if tddate == '-1':
#                                                 if m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).exists():
#                                                     m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).update(update_status='T',created_on=datetime.now(),created_by=empno,marked_emp=DesignationCode,status_flag=1,action_type=0,priority=priority)
#                                                 else:   
#                                                     m1.Marked_Officers.objects.create(marked_emp=i,created_on=datetime.now(),created_by=empno, marked_no=marked_no_id,status_flag=1, item_no_id=item_id,marked_to_id=Desig1,action_type=0,priority=priority)
#                                             else:
#                                                 targetd=tddate.split('/')
#                                                 targetd='20'+targetd[2].strip()+'-'+targetd[1].strip()+'-'+targetd[0].strip()
#                                                 tddate = targetd
#                                                 if m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).exists():
#                                                     m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).update(update_status='T',created_on=datetime.now(),created_by=empno,marked_emp=DesignationCode,status_flag=1,action_type=0,priority=priority,target_date=tddate)
#                                                 else:   
#                                                     m1.Marked_Officers.objects.create(marked_emp=i,created_on=datetime.now(),created_by=empno, marked_no=marked_no_id,status_flag=1, item_no_id=item_id,marked_to_id=Desig1,action_type=0,priority=priority,target_date=tddate)
#                                                 m1.Item_details.objects.filter(item_no=item_id).update(target_date=tddate)
#                             elif markof:
#                                 for i in markeofficer:
#                                     Desig=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i)
#                                     if Desig:
#                                         Desig1=Desig[0].designation_code
#                                         if Desig[0].official_email_ID:
#                                             officer_email.append(Desig[0].official_email_ID)
#                                         if Desig[0].contactnumber:
#                                             if Desig[0].contactnumber not in officer_contact:
#                                                 marked_officers_sms.append({'contact':Desig[0].contactnumber,'designation':Desig[0].designation_code})
#                                                 officer_contact.append(Desig[0].contactnumber)


#                                         if m1.Marked_Officers.objects.all().last():
#                                             marked_no_id=(m1.Marked_Officers.objects.all().last().marked_no)+1
#                                         else:
#                                             marked_no_id = 1

#                                         if m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).exists():
#                                             m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).update(created_on=datetime.now(),created_by=empno,marked_emp=i, status_flag=1,update_status='T')
#                                         else:
#                                             m1.Marked_Officers.objects.create(created_on=datetime.now(),created_by=empno,marked_emp=i,marked_no=marked_no_id,status_flag=1, item_no_id=item_id,marked_to_id=Desig1)
#                                     else:
#                                         print('error')
#                                         # messages.info(request, 'Employ Desig not Match in Designation Master')
#                             else:
#                                 markeofficer=""


                    
                        
#                         else:
#                             subdes = 'subdes'+y
#                             subdes1 = finalval[f][subdes]
#                             tbl_data = finalval[f][y]
#                             # for action type
#                             # act_type = 'type' + y
#                             # typeofaction=finalval[f][act_type]
#                             # if typeofaction=='info':
#                             #     act_flag=1
#                             # else:
#                             #     act_flag=0
#                             if m1.Item_details.objects.filter(type='SSH',des_id=y, inspection_no=inspection_id).exists():
#                                 m1.Item_details.objects.filter(type='SSH',des_id=y, inspection_no=inspection_id).update(sl_no=counters,link_image=None,del_flag=0,tbl_data=tbl_data, item_subtitle=subdes1,status_flag=4,created_by=empno,created_on=datetime.now(),update_status='T')
#                             else:
#                                 m1.Item_details.objects.create(sl_no=counters,tbl_data=tbl_data,item_subtitle=subdes1,status_flag=4, type='SSH',des_id=y, inspection_no_id=inspection_id)

#                         counters+=1
                
#             m1.Item_details.objects.filter(inspection_no=inspection_id,update_status ='F').delete()
#             m1.Marked_Officers.objects.filter(item_no__in=m1.Item_details.objects.filter(inspection_no=inspection_id).values('item_no'),update_status ='F').delete()
#             m1.Marked_Officers.objects.filter(item_no__in=m1.Item_details.objects.filter(inspection_no=inspection_id).values('item_no'),marked_to__isnull=True).delete()
            
#             for i in range(len(final_img)):
#                 ref = final_img[i][0]
#                 path = (final_img[i][1])[1:]
#                 data = list(m1.Item_details.objects.filter(inspection_no=inspection_id,des_id=ref).values('link_image'))
#                 if len(data) > 0:
#                     data = data[0]['link_image']
#                     if data != None:
#                         path = data +'@#@'+path
#                 m1.Item_details.objects.filter(inspection_no=inspection_id,des_id=ref).update(link_image = path)

#             m1.Item_details.objects.filter(inspection_no=inspection_id,link_image='').update(link_image=None)

           
#             try:
#                 subject="Inspection report marked to you for n/a."
#                 # To=['ecegcttarun@gmail.com',]
#                 To=officer_email
#                 context = {'title': title}
                
                
#                 # if len(officer_contact) > 0:
#                 #     for num in officer_contact:
#                 #         pass
#                         # sendsms(num)

#                 if len(marked_officers_sms) > 0:
#                     for mar in marked_officers_sms:
#                         new_pending=m1.Marked_Officers.objects.filter(item_no__inspection_no=inspection_id,marked_to_id=mar['designation']).values().count()
#                         cum_pending=m1.Marked_Officers.objects.filter(marked_to_id=mar['designation'], status_flag=1).values().count()
#                         for_pending=m1.Marked_Officers_forward.objects.filter(marked_to_forward_id=mar['designation'], status_flag=1).values().count()
#                         total_pending=cum_pending+for_pending
#                         # n=str(new_pending)+"/"+str(cum_pending)
#                         issue_date=date.today()
#                         issue_date = datetime.strftime(issue_date,"%d/%m/%Y")
#                         t=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=ddesig).values('designation')
#                         if len(t)!=0:
#                             inspection_officer=t[0]['designation']
#                             inspection_officer=inspection_officer[0:15]
#                         else:
#                             inspection_officer='NA'
#                         # msg_body=str(note_no)+" , "+str(issue_date)+", "+str(inspection_officer)
#                         note_no=note_no[0:30]
#                         # Total {#var#} Items of Insp. note no.{#var#} marked /forwarded by {#var#} marked  to you for n/a. Cumulative pending compliance:{#var#},CRIS/MU.
#                         # message="Insp. note no. "+msg_body+" marked to you for n/a. New Paras marked/Cumulative pending compliance: "+n+", CRIS/INSP"
#                         sendsms_insp(mar['contact'],new_pending,note_no,inspection_officer,total_pending)
                   
#                 InspSendMail(subject, To, context)
                



#                 # m1.Insp_mail_details.objects.create(subject=subject, body=title,area='Mark Of', inspection_no_id=inspection_id, send_to=send_to,send_desig=send_desig)
#                 m6.copyto_mails.objects.create(sender_id_id=ddesig, subject=subject,doc_id=inspection_id,  body=title, area_flag=1, doc_table='i', receiver_id=send_to, receiver_desig=send_desig)
#                 messages.success(request, 'Mark officer email has been sent')
               
#             except:
#                 print("error on sending")
#                 messages.error(
#                     request, 'Email send failed. Please Try Again.')
#             try:
#                 offic_mail =[]
#                 offic_contact =[]
#                 unique_offic_mail = list(set(offic_mail))
#                 unique_offic_contact = list(set(offic_contact))
#                 if send_to:
#                     emil = send_to.split(',')
#                     for i in emil:
#                         email = models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i)
#                         if email[0].official_email_ID:
#                             offic_mail.append(email[0].official_email_ID)
#                         if Desig[0].contactnumber:
#                             offic_contact.append(Desig[0].contactnumber)
                           
#                     # if len(unique_offic_contact) > 0:
#                     #     for num in unique_offic_contact:
#                     #         sendsms(num)


#                     subject="Inspection report"
#                     To = unique_offic_mail
#                     # To=['ecegcttarun@gmail.com',]
#                     context = {'title': title}
                       
#                     InspSendMail(subject, To, context)
#                     # m1.Insp_mail_details.objects.create(subject=subject, body=title, area='Copy To', inspection_no_id=inspection_id, send_to=send_to,send_desig=send_desig)
#                     if m6.copyto_mails.objects.filter(doc_id=inspection_id, area_flag=0, doc_table='i').exists():
#                         m6.copyto_mails.objects.filter(doc_id=inspection_id, area_flag=0, doc_table='i').update(body=title,subject=subject,sender_id_id=ddesig, receiver_id=send_to, receiver_desig=send_desig)
#                     else:
#                         m6.copyto_mails.objects.create(sender_id_id=ddesig, subject=subject,doc_id=inspection_id,  body=title, area_flag=0, doc_table='i', receiver_id=send_to, receiver_desig=send_desig)
#                     messages.success(request, 'Copy to Email has been sent')
                   
#             except:
               
#                 messages.error(request, 'Copy to Email send failed.')


#             return JsonResponse({"status": 1 })
#         return JsonResponse({"success":False}, status=400)
       
#     # except Exception as e:
#     #     print(e)
#     #     try:
#     #         m1.error_Table.objects.create(fun_name="create_inspection_details",user_id=request.user,err_details=str(e))
#     #     except:
#     #         print("Internal Error!!!")
#     #     return render(request, "errorspage.html", {})

# def save_draft_data(request):
#     # try:
#         if request.method == "POST" and request.is_ajax():
#             from datetime import datetime
#             final=decryptWithAesEinspect(request.POST.get('final_partinspected'))
#             final_id=request.POST.get('id_partinspected')
#             rly=json.loads(request.POST.get('zone'))
#             div=json.loads(request.POST.get('division'))
#             loc=json.loads(request.POST.get('location'))
#             final_img=json.loads(request.POST.get('final_img'))
#             accompany=json.loads(request.POST.get('accompany'))
#             inspection_no = request.POST.get('inspection_no')
#             insp_desig = request.POST.get('insp_desig')
#             insp_ofc_name = request.POST.get('insp_ofc_name')
#             station_name = request.POST.get('station_name')
#             ins_flag=request.POST.get('ins_flag')
#             insp_type = request.POST.get('insp_type')
#             item_sections = request.POST.get('item_sections')
#             sec_ids=json.loads(request.POST.get('sec_ids'))
#             sec_details=json.loads(request.POST.get('sec_details'))
#             full_array=json.loads(request.POST.get('full_array'))
#             print(insp_type)
           
#             if inspection_no =='' or ins_flag=='1':
#                 inspection_no = None


#             send_to=request.POST.get('send_to')
#             send_desig=request.POST.get('send_desig')
#             temp_para_array_marked = json.loads(request.POST.get('temp_para_array_marked'))
           
#             insdt=request.POST.get('txtDate2')
#             del_array=json.loads(request.POST.get('del_array'))


#             if 'to' in insdt:
#                 dt = insdt.split('to')
#                 st_date = dt[0].strip()
#                 en_date = dt[1].strip()


#                 start_date = datetime.strptime(st_date, '%d/%m/%y').strftime('%Y-%m-%d')
#                 inspected_on = datetime.strptime(en_date, '%d/%m/%y').strftime('%Y-%m-%d')


#             else:
               
#                 inspected_on = datetime.strptime(insdt, '%d/%m/%y').strftime('%Y-%m-%d')
#                 start_date = datetime.strptime(insdt, '%d/%m/%y').strftime('%Y-%m-%d')
#             title=request.POST.get('titleinsp')
#             finalval = json.loads(final)
#             final_allid = json.loads(final_id)
#             empnox = models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=request.user)| Q(official_email_ID=request.user.guest_email) | Q(official_email_ID=request.user.email), empno__isnull=False)
#             if empnox:
#                 empno = empnox[0].empno_id
#                 ddesig = empnox[0].designation_code
#             else:
#                 messages.error(request, 'You are not authorize to create inspection. Please contact to admin')


#             if m1.Inspection_details.objects.filter(inspection_no = inspection_no ).exists():
#                 m1.Inspection_details.objects.filter(inspection_no =inspection_no ).update(inspection_title=title,item_type='Insp', created_on=datetime.now(), inspection_officer_id=ddesig, status_flag=0,modified_by=empno, station_name=station_name,officer_name=insp_ofc_name,officer_desig=insp_desig, created_by=empno,start_date=start_date,inspected_on=inspected_on,insp_type=insp_type,item_sections=item_sections)
                
#                 # m1.Insp_Accompany.objects.filter(inspection_no_id=inspection_no).delete()
#                 # m6.copyto_mails.objects.filter( doc_id=inspection_no, doc_table='i').delete()
#                 # m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_no, type='HQ').delete()
#                 # m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_no, type='DIV').delete()
#                 # m1.Marked_Officers.objects.filter(item_no__in = m1.Item_details.objects.filter(inspection_no=inspection_no).values('item_no')).delete()
#                 # m1.Item_details.objects.filter(inspection_no=inspection_no).delete()
#                 # m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_no,type='LOC').delete()
                
                
#                 inspection_id = inspection_no
#             else:
#                 m1.Inspection_details.objects.create(inspection_title=title,item_type='Insp', station_name=station_name,officer_name=insp_ofc_name,officer_desig=insp_desig,  created_on=datetime.now(), inspection_officer_id=ddesig, status_flag=0,modified_by=empno, created_by=empno,start_date=start_date,inspected_on=inspected_on,insp_type=insp_type,item_sections=item_sections)
#                 inspection_id=m1.Inspection_details.objects.all().last().inspection_no
#             m1.Insp_Accompany.objects.filter(inspection_no_id=inspection_id).update(update_status='F')
#             if m1.Insp_Accompany.objects.filter(inspection_no_id=inspection_id).exists():
#                 for up in accompany:
#                     if m1.Insp_Accompany.objects.filter(inspection_no_id=inspection_id, accompany=up).exists():
#                         m1.Insp_Accompany.objects.filter(inspection_no_id=inspection_id, accompany=up).update(accompany=up,update_status='T')
#                     else:
#                         m1.Insp_Accompany.objects.create(accompany=up, inspection_no_id=inspection_id)
#             else:
#                 for acc in accompany:
#                     m1.Insp_Accompany.objects.create(accompany=acc, inspection_no_id=inspection_id)
#             m1.Insp_Accompany.objects.filter(inspection_no_id=inspection_id,update_status='F').delete()
#             if send_to:
#                 if m6.copyto_mails.objects.filter(doc_id=inspection_id, area_flag=0, doc_table='i').exists():
#                     m6.copyto_mails.objects.filter(doc_id=inspection_id, area_flag=0, doc_table='i').update(sender_id_id=ddesig, receiver_id=send_to, receiver_desig=send_desig)
#                 else:
#                     m6.copyto_mails.objects.create(sender_id_id=ddesig, doc_id=inspection_id, area_flag=0, doc_table='i', receiver_id=send_to, receiver_desig=send_desig)
            

#             m1.Insp_multi_location.objects.filter(inspection_no=inspection_id).update(update_status='F')
#             for rl in rly:
#                 if m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_id, item=rl, type='HQ').exists():
#                     m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_id, item=rl, type='HQ').update(inspection_no_id=inspection_id, item=rl, type='HQ',update_status='T')
#                 else:
#                     m1.Insp_multi_location.objects.create(inspection_no_id=inspection_id, item=rl, type='HQ')
#             for di in div:
#                 if m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_id, item=di, type='DIV').exists():
#                     m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_id, item=di, type='DIV').update(inspection_no_id=inspection_id, item=di, type='DIV',update_status='T')
#                 else:
#                     m1.Insp_multi_location.objects.create(inspection_no_id=inspection_id, item=di, type='DIV')
#             for lo in loc:
#                 if lo:
#                     new_loc = lo.split('#')
#                     location = new_loc[0]
#                     location_type = new_loc[1]
#                     location_code = new_loc[2]
#                     if m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_id, item=location,  type='LOC').exists():
#                         m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_id, item=location,  type='LOC').update(inspection_no_id=inspection_id, item=location, item_code=location_code, type='LOC', table_from=location_type,update_status='T')
#                     else:
#                         m1.Insp_multi_location.objects.create(inspection_no_id=inspection_id, item=location, item_code=location_code, type='LOC', table_from=location_type)
#             if len(loc) == 0:
#                 location=None
#                 location_type=None
#                 location_code=None
            
            
#             m1.Insp_multi_location.objects.filter(inspection_no=inspection_id,update_status='F').delete()
#             m1.Item_details.objects.filter(inspection_no=inspection_id).update(update_status ='F')
#             m1.Marked_Officers.objects.filter(item_no__in=m1.Item_details.objects.filter(inspection_no=inspection_id).values('item_no')).update(update_status ='F')

#             counters=1
#             if len(sec_ids) == 0:
#                 # full_array=full_array.split(',')
#                 sec_ids['A']=full_array
#             for a in (sec_ids):
#                 if item_sections != '0':
#                     locid='location_at'+a
#                     locationdet=sec_details[locid]
#                     xl = locationdet.split('#')
#                     sec_name=xl[0]
#                     sec_type=xl[1]
#                     sec_id=xl[2]
#                     heading='Observation at '+ sec_name
#                     m1.Item_details.objects.create(sl_no=counters,item_title=heading,status_flag=4, created_on=datetime.now(), type='S',des_id=a,created_by=empno, inspection_no_id=inspection_id,location_table=sec_type,location_code=sec_id,location_val = sec_name)
#                     counters+=1
#                 else:
#                     sec_name=location
#                     sec_type=location_type
#                     sec_id=location_code
#                 for f, b in zip(finalval, final_allid):
#                     for x,y in zip(finalval[f], final_allid[b]):
#                         s = y.split('.')
#                         if s[0] not in sec_ids[a]:
#                             continue
#                         if len(s) == 1:
#                             hed = 'heading'+y
#                             heading = finalval[f][hed]
#                             tbl_data = finalval[f][y]
#                             if m1.Item_details.objects.filter(type='H',des_id=y, inspection_no=inspection_id).exists():
#                                 m1.Item_details.objects.filter(type='H',des_id=y, inspection_no=inspection_id).update(sl_no=counters,del_flag=0,tbl_data=tbl_data,item_title=heading,status_flag=0,created_by=empno, created_on=datetime.now(),update_status='T',location_table=sec_type,location_code=sec_id,location_val = sec_name)
#                                 item_id=m1.Item_details.objects.filter(type='H',des_id=y, inspection_no=inspection_id).all().last().item_no
#                             else:
#                                 m1.Item_details.objects.create(sl_no=counters,tbl_data=tbl_data,item_title=heading,status_flag=0,created_by=empno, created_on=datetime.now(), type='H',des_id=y, inspection_no_id=inspection_id,location_table=sec_type,location_code=sec_id,location_val = sec_name)
#                                 item_id=m1.Item_details.objects.all().last().item_no

#                             y2=str(y+'.1')
#                             if y2 in final_allid[b]:
                        
#                                 pass
#                             else:
#                                 # trz = 'targetdate'+y
#                                 officm = 'markeofficer'+y
#                                 # chk = 'check'+y
#                                 # targetd = finalval[f][trz]
#                                 print(finalval[f])
#                                 markof = finalval[f][officm]
#                                 markeofficer = markof.split(',')
#                                 # checkbox = finalval[f][chk]
#                                 # rem='remarksmarkeofficer'+y
#                                 # remarks=finalval[f][rem]
#                                 # print(remarks,"my name is apeksha")
#                                 # if checkbox == '1':
#                                 #     checkbox = 1
#                                 # elif checkbox== '0':
#                                 #     checkbox = 0
#                                 # if targetd:
#                                 #     targetd=targetd.split('/')
#                                 #     targetd='20'+targetd[2].strip()+'-'+targetd[1].strip()+'-'+targetd[0].strip()
#                                 #     t_date = targetd
#                                 # else:
#                                 #     t_date = None
                                    
#                                 # act_type = 'type' + y
#                                 # typeofaction=finalval[f][act_type]
#                                 # if typeofaction=='info':
#                                 #     act_flag=1
#                                 # else:
#                                 #     act_flag=0
#                                 ity='item_type'+y
#                                 item_type=finalval[f][ity]
#                                 # m1.Item_details.objects.filter(item_title=heading,status_flag=0, type='H',des_id=y, inspection_no_id=inspection_id).update(target_date=t_date, priority=checkbox, action_type=act_flag, markofcRemarks=remarks)
                                
#                                 m1.Item_details.objects.filter(item_title=heading,status_flag=0, type='H',des_id=y, inspection_no_id=inspection_id).update(item_type=item_type)

#                                 infom= 'markeofcinfo'+y
#                                 infom = finalval[f][infom]
#                                 if len(infom) >0:
#                                     officerinfo=json.loads(infom)
#                                 else:
#                                     officerinfo=[]

#                                 if len(officerinfo):
#                                     for i in range(len(officerinfo)):
#                                         DesignationCode=officerinfo[i]['DesignationCode']
#                                         selected_action=officerinfo[i]['selected_action']
#                                         priority=officerinfo[i]['priority']
#                                         tddate=officerinfo[i]['tddate']
#                                         m1.Item_details.objects.filter(item_no=item_id).update(priority=priority)
#                                         Desig=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=DesignationCode)
#                                         if Desig:
#                                             Desig1=Desig[0].designation_code
#                                             if m1.Marked_Officers.objects.all().last():
#                                                 marked_no_id=(m1.Marked_Officers.objects.all().last().marked_no)+1
#                                             else:
#                                                 marked_no_id = 1

                                            
#                                             if selected_action == 'info':
#                                                 if m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).exists():
#                                                     m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).update(update_status='T',created_on=datetime.now(),created_by=empno,marked_emp=DesignationCode,status_flag=0,action_type=1)
#                                                 else:   
#                                                     m1.Marked_Officers.objects.create(marked_emp=i,created_on=datetime.now(),created_by=empno, marked_no=marked_no_id,status_flag=0, item_no_id=item_id,marked_to_id=Desig1,action_type=1)
                                            
#                                             else:
#                                                 if tddate == '-1':
#                                                     if m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).exists():
#                                                         m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).update(update_status='T',created_on=datetime.now(),created_by=empno,marked_emp=DesignationCode,status_flag=0,action_type=0,priority=priority)
#                                                     else:   
#                                                         m1.Marked_Officers.objects.create(marked_emp=i,created_on=datetime.now(),created_by=empno, marked_no=marked_no_id,status_flag=0, item_no_id=item_id,marked_to_id=Desig1,action_type=0,priority=priority)
#                                                 else:
#                                                     targetd=tddate.split('/')
#                                                     targetd='20'+targetd[2].strip()+'-'+targetd[1].strip()+'-'+targetd[0].strip()
#                                                     tddate = targetd
#                                                     if m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).exists():
#                                                         m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).update(update_status='T',created_on=datetime.now(),created_by=empno,marked_emp=DesignationCode,status_flag=0,action_type=0,priority=priority,target_date=tddate)
#                                                     else:   
#                                                         m1.Marked_Officers.objects.create(marked_emp=i,created_on=datetime.now(),created_by=empno, marked_no=marked_no_id,status_flag=0, item_no_id=item_id,marked_to_id=Desig1,action_type=0,priority=priority,target_date=tddate)
#                                                     m1.Item_details.objects.filter(item_no=item_id).update(target_date=tddate)
                                                
#                                 elif markof:
#                                     for i in markeofficer:
#                                         Desig=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i)
#                                         if Desig:
#                                             Desig1=Desig[0].designation_code
#                                             if m1.Marked_Officers.objects.all().last():
#                                                 marked_no_id=(m1.Marked_Officers.objects.all().last().marked_no)+1
#                                             else:
#                                                 marked_no_id = 1

#                                             if m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).exists():
#                                                 m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).update(update_status='T',created_on=datetime.now(),created_by=empno,marked_emp=i,status_flag=0)
#                                             else:
#                                                 m1.Marked_Officers.objects.create(created_on=datetime.now(),created_by=empno,marked_emp=i,marked_no=marked_no_id,status_flag=0,item_no_id=item_id,marked_to_id=Desig1)
#                                         else:
#                                             messages.info(request, 'Employ Desig not Match in Designation Master')
#                                 else:
#                                     if m1.Marked_Officers.objects.all().last():
#                                         marked_no_id=(m1.Marked_Officers.objects.all().last().marked_no)+1
#                                     else:
#                                         marked_no_id = 1
#                                     m1.Marked_Officers.objects.create(created_on=datetime.now(),created_by=empno,marked_no=marked_no_id,status_flag=0,item_no_id=item_id)


#                         elif len(s) == 2:
#                             ob = 'observation'+y
#                             # trz = 'targetdate'+y
#                             officm = 'markeofficer'+y
#                             # chk = 'check'+y
#                             observation = finalval[f][ob]
#                             # targetd = finalval[f][trz]
#                             markof = finalval[f][officm]
#                             # checkbox = finalval[f][chk]
#                             # act_type = 'type' + y
#                             # typeofaction=finalval[f][act_type]
#                             # if typeofaction=='info':
#                             #     act_flag=1
#                             # else:
#                             #     act_flag=0

#                             # if checkbox == '1':
#                             #     checkbox = 1
#                             # elif checkbox== '0':
#                             #     checkbox = 0


#                             markeofficer = markof.split(',')
                        
#                             # if targetd:
#                             #     targetd=targetd.split('/')
#                             #     targetd='20'+targetd[2].strip()+'-'+targetd[1].strip()+'-'+targetd[0].strip()
#                             #     targetdate = targetd
#                             # else:
#                             #     targetdate = None
#                             tbl_data = finalval[f][y]

#                             # rem='remarksmarkeofficer'+y
#                             # remarks=finalval[f][rem]
#                             # if m1.Item_details.objects.filter(inspection_no=inspection_id, des_id=y,  type='SH').exists():
#                             #     m1.Item_details.objects.filter(inspection_no=inspection_id, des_id=y,  type='SH').update(sl_no=counters,del_flag=0,tbl_data=tbl_data,observation=observation,priority=checkbox, status_flag=0,created_by=empno,created_on=datetime.now(), target_date=targetdate,action_type=act_flag,update_status='T',markofcRemarks=remarks)
#                             #     item_id=m1.Item_details.objects.filter(inspection_no=inspection_id, des_id=y,  type='SH').all().last().item_no
#                             # else:
#                             #     m1.Item_details.objects.create(sl_no=counters,tbl_data=tbl_data,observation=observation,priority=checkbox, status_flag=0,created_by=empno,created_on=datetime.now(), inspection_no_id=inspection_id, des_id=y, target_date=targetdate, type='SH', action_type=act_flag,markofcRemarks=remarks)
                        
#                             #     item_id=m1.Item_details.objects.all().last().item_no
#                             ity='item_type'+y
#                             item_type=finalval[f][ity]
#                             if m1.Item_details.objects.filter(inspection_no=inspection_id, des_id=y,  type='SH').exists():
#                                 print("update")
#                                 # m1.Item_details.objects.filter(inspection_no=inspection_id, des_id=y,  type='SH').update(sl_no=counters,link_image=None,del_flag=0,tbl_data=tbl_data,observation=observation,priority=checkbox, status_flag=1,created_by=empno,created_on=datetime.now(), target_date=targetdate,action_type=act_flag,update_status='T',markofcRemarks=remarks)
#                                 m1.Item_details.objects.filter(inspection_no=inspection_id, des_id=y,  type='SH').update(sl_no=counters,link_image=None,del_flag=0,tbl_data=tbl_data,observation=observation, status_flag=0,created_by=empno,created_on=datetime.now(), update_status='T',location_table=sec_type,location_code=sec_id,location_val = sec_name,item_type=item_type)

#                                 item_id=m1.Item_details.objects.filter(inspection_no=inspection_id, des_id=y,  type='SH').all().last().item_no
#                             else:
#                                 # m1.Item_details.objects.create(sl_no=counters,tbl_data=tbl_data,observation=observation,priority=checkbox, status_flag=1,inspection_no_id=inspection_id, des_id=y, target_date=targetdate, type='SH', action_type=act_flag,created_by=empno,created_on=datetime.now(),markofcRemarks=remarks)
#                                 m1.Item_details.objects.create(sl_no=counters,inspection_no_id=inspection_id,link_image=None,del_flag=0,tbl_data=tbl_data,observation=observation, des_id=y, type='SH',status_flag=0,created_by=empno,created_on=datetime.now(), update_status='T',location_table=sec_type,location_code=sec_id,location_val = sec_name,item_type=item_type)
#                                 item_id=m1.Item_details.objects.all().last().item_no

#                             infom= 'markeofcinfo'+y
#                             infom = finalval[f][infom]
#                             print(infom)
#                             if len(infom) >0:
#                                 officerinfo=json.loads(infom)
#                                 print(officerinfo)
#                             else:
#                                 officerinfo=[]
#                             # officerinfo = ((infom.strip('[')).strip(']'))
#                             print(officerinfo)
#                             if len(officerinfo):
#                                 for i in range(len(officerinfo)):
#                                     DesignationCode=officerinfo[i]['DesignationCode']
#                                     selected_action=officerinfo[i]['selected_action']
#                                     priority=officerinfo[i]['priority']
#                                     tddate=officerinfo[i]['tddate']
#                                     m1.Item_details.objects.filter(item_no=item_id).update(priority=priority)
#                                     Desig=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=DesignationCode)
#                                     if Desig:
#                                         Desig1=Desig[0].designation_code
#                                         if m1.Marked_Officers.objects.all().last():
#                                             marked_no_id=(m1.Marked_Officers.objects.all().last().marked_no)+1
#                                         else:
#                                             marked_no_id = 1

                                        
#                                         if selected_action == 'info':
#                                             if m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).exists():
#                                                 m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).update(update_status='T',created_on=datetime.now(),created_by=empno,marked_emp=DesignationCode,status_flag=0,action_type=1)
#                                             else:   
#                                                 m1.Marked_Officers.objects.create(marked_emp=i,created_on=datetime.now(),created_by=empno, marked_no=marked_no_id,status_flag=0, item_no_id=item_id,marked_to_id=Desig1,action_type=1)
                                        
#                                         else:
#                                             if tddate == '-1':
#                                                 if m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).exists():
#                                                     m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).update(update_status='T',created_on=datetime.now(),created_by=empno,marked_emp=DesignationCode,status_flag=0,action_type=0,priority=priority)
#                                                 else:   
#                                                     m1.Marked_Officers.objects.create(marked_emp=i,created_on=datetime.now(),created_by=empno, marked_no=marked_no_id,status_flag=0, item_no_id=item_id,marked_to_id=Desig1,action_type=0,priority=priority)
#                                             else:
#                                                 targetd=tddate.split('/')
#                                                 targetd='20'+targetd[2].strip()+'-'+targetd[1].strip()+'-'+targetd[0].strip()
#                                                 tddate = targetd
#                                                 if m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).exists():
#                                                     m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).update(update_status='T',created_on=datetime.now(),created_by=empno,marked_emp=DesignationCode,status_flag=0,action_type=0,priority=priority,target_date=tddate)
#                                                 else:   
#                                                     m1.Marked_Officers.objects.create(marked_emp=i,created_on=datetime.now(),created_by=empno, marked_no=marked_no_id,status_flag=0, item_no_id=item_id,marked_to_id=Desig1,action_type=0,priority=priority,target_date=tddate)
#                                                 m1.Item_details.objects.filter(item_no=item_id).update(target_date=tddate)
                                            
#                             elif markof:
#                                 for i in markeofficer:
#                                     Desig=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i)
#                                     if Desig:
#                                         Desig1=Desig[0].designation_code


#                                         if m1.Marked_Officers.objects.all().last():
#                                             marked_no_id=(m1.Marked_Officers.objects.all().last().marked_no)+1
#                                         else:
#                                             marked_no_id = 1
#                                         if m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).exists():
#                                             m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).update(created_on=datetime.now(),created_by=empno,marked_emp=i, status_flag=0,update_status='T')

#                                         else:
#                                             m1.Marked_Officers.objects.create(created_on=datetime.now(),created_by=empno,marked_no=marked_no_id,marked_emp=i, status_flag=0,item_no_id=item_id,marked_to_id=Desig1)
#                                     else:
#                                         print('error')
#                             else:
#                                 markeofficer=''
                    
#                         else:
#                             subdes = 'subdes'+y
#                             subdes1 = finalval[f][subdes]
#                             tbl_data = finalval[f][y]
#                             # for action type
#                             # act_type = 'type' + y
#                             # typeofaction=finalval[f][act_type]
#                             # if typeofaction=='info':
#                             #     act_flag=1
#                             # else:
#                             #     act_flag=0
                            
#                             if m1.Item_details.objects.filter(type='SSH',des_id=y, inspection_no=inspection_id).exists():
#                                 m1.Item_details.objects.filter(type='SSH',des_id=y, inspection_no=inspection_id).update(sl_no=counters,del_flag=0,tbl_data=tbl_data, item_subtitle=subdes1,status_flag=0,created_by=empno,created_on=datetime.now(),update_status='T')
#                             else:
#                                 m1.Item_details.objects.create(sl_no=counters,tbl_data=tbl_data, item_subtitle=subdes1,status_flag=0,created_by=empno,created_on=datetime.now(), type='SSH',des_id=y, inspection_no_id=inspection_id)
#                         counters+=1
                
#             m1.Item_details.objects.filter(inspection_no=inspection_id,update_status ='F').delete()
#             m1.Marked_Officers.objects.filter(item_no__in=m1.Item_details.objects.filter(inspection_no=inspection_id).values('item_no'),update_status ='F').delete()
#             m1.Marked_Officers.objects.filter(item_no__in=m1.Item_details.objects.filter(inspection_no=inspection_id).values('item_no'),marked_to__isnull=True).delete()
            
#             for i in del_array:
#                 m1.Item_details.objects.filter(inspection_no=inspection_id,des_id=i).update(del_flag=1)
#             m1.Item_details.objects.filter(inspection_no=inspection_id).update(link_image=None)
#             for i in range(len(final_img)):
#                 ref = final_img[i][0]
#                 path = (final_img[i][1])[1:]
#                 data = list(m1.Item_details.objects.filter(inspection_no=inspection_id,des_id=ref).values('link_image'))
#                 if len(data) > 0:
#                     data = data[0]['link_image']
#                     if data != None:
#                         path = data +'@#@'+path
#                 m1.Item_details.objects.filter(inspection_no=inspection_id,des_id=ref).update(link_image = path)
#             for i in range(len(temp_para_array_marked)):
#                 des_id = temp_para_array_marked[i]['id']
#                 markeofficer = temp_para_array_marked[i]['officer'].split(',')
#                 if len(markeofficer) > 0:
#                     item_id = list(m1.Item_details.objects.filter(inspection_no=inspection_id,des_id=des_id).values('item_no'))
#                     if len(item_id) >0:
#                         item_id = item_id[0]['item_no']
#                     else:
#                         continue
#                     if not m1.Marked_Officers.objects.filter(item_no = item_id).exists():
#                         for i in markeofficer:
#                             Desig=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i,)
#                             if Desig:
#                                 Desig1=Desig[0].designation_code
#                                 if m1.Marked_Officers.objects.all().last():
#                                     marked_no_id=(m1.Marked_Officers.objects.all().last().marked_no)+1
#                                 else:
#                                     marked_no_id = 1
#                                 m1.Marked_Officers.objects.create(created_on=datetime.now(),created_by=empno,marked_no=marked_no_id,marked_emp=i, status_flag=0,item_no_id=item_id,marked_to_id=Desig1)
#             m1.Item_details.objects.filter(inspection_no=inspection_id,link_image='').update(link_image=None)
#             return JsonResponse({"status": 1,'inspection_no': inspection_id})
#         return JsonResponse({"success":False}, status=400)
#     # except Exception as e:
#     #     try:
#     #         m1.error_Table.objects.create(fun_name="save_draft_data",user_id=request.user,err_details=str(e))
#     #     except:
#     #         print("Internal Error!!!")
#     #     return render(request, "errorspage.html", {})

# def generateTitle(request):
#     if request.method == 'GET' and request.is_ajax():
#         zone = json.loads(request.GET.get('zone'))
#         division = json.loads(request.GET.get('division'))
#         loca = json.loads(request.GET.get('loca'))
#         locations=[]
#         div=[]


#         if len(loca):
#             for l in loca:
#                 temp={}
#                 loc_name=l.split('#')
#                 i=loc_name[1]
#                 place=loc_name[0].strip()
#                 temp['place']=place          
#                 if i == 'RRM':
#                     obj = models.station_master.objects.filter(station_name__icontains=place).values('div_id_id__location_code','rly_id_id__location_code')
#                     temp['type']='Running Room'
#                     loc_div = obj[0]['div_id_id__location_code']
#                     loc_zone = obj[0]['rly_id_id__location_code']


#                 if i == 'SEM':
#                     obj = models.section_master.objects.filter(section_name=place).values('div_id_id__location_code','rly_id_id__location_code')
#                     temp['type']='Section'
#                     if len(obj):
#                         loc_div = obj[0]['div_id_id__location_code']
#                         loc_zone = obj[0]['rly_id_id__location_code']  
#                     else:
#                         loc_div='NA'
#                         loc_zone='NA'


#                 if i == 'STM':
#                     obj = models.station_master.objects.filter(station_name__icontains=place).values('div_id_id__location_code','rly_id_id__location_code')
#                     temp['type']='Station'
#                     loc_div = obj[0]['div_id_id__location_code']
#                     loc_zone = obj[0]['rly_id_id__location_code']
                   
#                 if i == 'ORL':
#                     obj = models.railwayLocationMaster.objects.filter(location_description__icontains=place).values('parent_location_code')
#                     temp['type']='Other Location'
#                     loc_div = obj[0]['parent_location_code']
#                     loc_zone = obj[0]['parent_location_code']
                   
#                 # if i == 'SOP':              
#                 #     obj = models.Shop_section.objects.filter(stnshortcode=place).values('div_id_id__location_code','rly_id_id__location_code')
#                 #     temp['type']='Shop Section'
#                 #     loc_div = obj[0]['iavhccdvsncode']
#                 #     loc_zone = obj[0]['iavhcczonecode']
                   
#                 if i == 'WOS':
#                     obj = models.railwayLocationMaster.objects.filter(location_description__icontains=place,location_type='WS').values('parent_location_code')
#                     temp['type']='WorkShop'
#                     loc_div = obj[0]['parent_location_code']
#                     loc_zone = obj[0]['parent_location_code']


#                 if i == 'DLS':
#                     plac=place.split('SHED')[0]
#                     obj = models.railwayLocationMaster.objects.filter(location_description__icontains=plac,location_type='DS').values('parent_location_code')
#                     temp['type']='Deisel Loco Shed'
#                     # print(obj)
#                     loc_div = obj[0]['parent_location_code']
#                     loc_zone = obj[0]['parent_location_code']  


#                 if i == 'ELS':
#                     plac=place.split('SHED')[0]
#                     obj = models.railwayLocationMaster.objects.filter(location_description__icontains=plac,location_type='ES').values('parent_location_code')
#                     temp['type']='Electric Loco Shed'
#                     loc_div = obj[0]['parent_location_code']
#                     loc_zone = obj[0]['parent_location_code']


#                 if i == 'COD':
#                     plac=place.split('-')[1]
#                     obj = models.railwayLocationMaster.objects.filter(location_description__icontains=plac,location_type='CD').values('parent_location_code')
#                     temp['type']='Coaching Depot'
#                     loc_div = obj[0]['parent_location_code']
#                     loc_zone = obj[0]['parent_location_code']  


#                 if i == 'WAD':
#                     obj = models.railwayLocationMaster.objects.filter(location_description__icontains=place,location_type='WD').values('parent_location_code')
#                     temp['type']='Wagon Depot'
#                     loc_div = obj[0]['parent_location_code']
#                     loc_zone = obj[0]['parent_location_code']  


#                 if i == 'CTI':
#                     obj = models.railwayLocationMaster.objects.filter(location_description__icontains=place,location_type='RI').values('parent_location_code')
#                     temp['type']='Training Institute'
#                     loc_div = obj[0]['parent_location_code']
#                     loc_zone = obj[0]['parent_location_code']                    
                   
#                 if i == 'HOS':
#                     obj = models.iem_hospmstr.objects.filter(iavhccfullname=place).values('iavhccdvsncode','iavhcczonecode')
#                     temp['type']='Hospital'
#                     loc_div = obj[0]['iavhccdvsncode']
#                     loc_zone = obj[0]['iavhcczonecode']
                
#                 if i == 'TRN':
#                     plac=(place.split('-')[0]).strip()
#                     obj = models.trainMaster.objects.filter(train_no=plac).values('train_name','train_no','org_rly_id','tnid','org_railway_code').distinct('tnid').order_by('-tnid')
#                     temp['type']='Train'
#                     loc_div=None
#                     loc_zone=obj[0]['org_rly_id']
                    


#                 temp['loc_div']=loc_div
#                 temp['loc_zone']=loc_zone
#                 locations.append(temp)


#         if len(division):
#             for d in division:
#                 obj = models.railwayLocationMaster.objects.filter(location_code=d).values('parent_location_code')
#                 div.append({'place':d,'zone':obj[0]['parent_location_code']})
               
#         # print(loca,zone,division)
#         # print(locations,div)


#         title={}
#         already_added_locs=[]
#         locs_mapped_div={}


#         for d in div:
#             locs_div=[]
#             for l in locations:
#                 if l['loc_div']==d['place']:
#                     locs_div.append(l['place'])
#                     already_added_locs.append(l['place'])
#             locs_mapped_div[d['place']]=locs_div


#         divs_mapped_zone={}
#         # print("already done locs",already_added_locs)
#         for z in zone:
#             div_done=[]
#             other_locs=[]
#             for d in div:
#                 if d['zone']==z:
#                     div_done.append({d['place']:locs_mapped_div[d['place']]})
#             for l in locations:
#                 if l['loc_zone']==z and l['place'] not in already_added_locs:
#                     other_locs.append(l['place'])
#                     already_added_locs.append(l['place'])
#             title[z]=[{'divs':div_done,'others':other_locs}]


       
               


#         # for z in zone:
#         #     zone_div={}
#         #     other_locs=[]


#         #     for d in div:
#         #         locs_div=[]
#         #         if d['zone']==z:
#         #             for l in locations:
#         #                 if l['loc_div']==d['place']:
#         #                     locs_div.append(l)
#         #                     already_added_locs.append(l)


#         #         if len(locs_div):  
#         #             zone_div[d['place']]:locs_div
#         #         else:
#         #             zone_div[d['place']]:[]
#         #         print(zone_div)


#         #     for l in locations:
#         #         if l['loc_zone']==z and l not in already_added_locs:
#         #             other_locs.append(l['place'])
#         #             already_added_locs.append(l)


#         #     title[z]=[zone_div,other_locs]
       
       
#         print(title,"title yay")
#         Title=''
#         done_divs=[]
#         for z in zone:
#             print(Title)
#             for d in div:
#                 if d['zone']==z:
#                     count=1
#                     for x in title[z][0]['divs']:
#                         if count:
#                             if len(x[d['place']]):
#                                 # print(x[d['place']])
#                                 placess=''
#                                 for plc in x[d['place']]:
#                                     placess+=plc+', '
#                                 Title+=(str(placess)).strip(', ')+" in "+d['place']+", "
#                             else:
#                                 Title=Title.strip(', ')
#                                 Title+=d['place']+", "
#                             del title[z][0]['divs'][0]
#                             count=0
#             if len(title[z][0]['others']):
#                 placess=''
#                 for plc in title[z][0]['others']:
#                     placess+=plc+', '
#                 Title+=(str(placess)).strip(', ')+"/"+z+","
#             else:
#                 Title=Title.strip(', ')
#                 Title+="/"+z+","
#         print(Title)


       


               

#         Title=Title.strip(', ')
#         context={'Title':Title}
#         return JsonResponse(context, safe=False)
#     return JsonResponse({'success': False})

# def getdiv_rly(request):
#     try:
#         if request.method == "GET" or request.is_ajax():
#             rly=request.GET.get('rly_data')
#             newrly = json.loads(rly)

#             #print(rly,'rly=======')
            
#             division=list(models.railwayLocationMaster.objects.filter(location_type_desc__in=['DIVISION','WORKSHOP'],parent_location_code__in=newrly).order_by('location_code').values('location_code', 'location_type').distinct('location_code'))
#             l=[]
#             for i in division:
#                 l.append({'location_code': i['location_code'], 'location_type':i['location_type']})
#             #print(l)    
#             context={
#                 'division':l,
#             } 
#             return JsonResponse(context,safe = False)
#         return JsonResponse({"success":False}, status = 400)
#     except Exception as e: 
#         try:
#             m1.error_Table.objects.create(fun_name="getdiv_rly",user_id=request.user,err_details=str(e))
#         except:
#             print("Internal Error!!!")
#         return render(request, "errorspage.html", {}) 

# def autoFetchAccompany(request):
#     if request.method == 'GET' and request.is_ajax():
#         empnox = models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=request.user)| Q(official_email_ID=request.user.guest_email) | Q(official_email_ID=request.user.email), empno__isnull=False)
#         desig=None
#         if empnox:
#             empnumber = empnox[0].designation_code
#             desig = empnox[0].designation
            
#         rly_zone = json.loads(request.GET.get('rly_zone'))
#         division_id = json.loads(request.GET.get('division_id'))
 
#         list1 = []
#         if len(division_id):
#             div_list = models.railwayLocationMaster.objects.filter(Q(location_code__in=division_id)).values_list('rly_unit_code', flat=True)
#         if len(rly_zone):
#             rly_list = models.railwayLocationMaster.objects.filter(Q(location_code__in=rly_zone)|Q(location_code__in=division_id)).values_list('rly_unit_code', flat=True)

            
#         last_val = request.GET.get('last_val')
#         if last_val is None:
#             last_val = ''
#             list1=list(models.Level_Desig.objects.exclude(Q(designation=desig)| Q(designation=None),delete_flag=True).values('designation').distinct().order_by('designation'))
#         else:
#             list1=list(models.Level_Desig.objects.exclude(Q(designation=desig)| Q(designation=None),delete_flag=True).filter(designation__istartswith=last_val).values('designation').distinct().order_by('designation'))

 
#         if last_val == '':
#             list1 = list1[:20]
#         return JsonResponse(list1, safe=False)
#     return JsonResponse({'success': False})

# def autoFetchLocation(request):
#     if request.method == 'GET' and request.is_ajax():
#         last_val = request.GET.get('last_val')
#         if last_val is None:
#             last_val = ''


#         stype = json.loads(request.GET.get('stype'))
#         rly_zone = json.loads(request.GET.get('rly_zone'))
#         division_id = json.loads(request.GET.get('division_id'))
 
#         print('last_val', last_val,'div', division_id,'rly', rly_zone,"helloooo", stype)
#         list1 = []
#         # list_obj = models.station_master.objects.filter(station_name__istartswith=last_val).values('station_name').order_by('station_name').distinct('station_name')
#         if len(division_id):
#             rly_list = models.railwayLocationMaster.objects.filter(Q(location_code__in=division_id)).values_list('rly_unit_code', flat=True)
#         else:
#             rly_list = models.railwayLocationMaster.objects.filter(Q(location_code__in=rly_zone)|Q(location_code__in=division_id)).values_list('rly_unit_code', flat=True)
       
#         print('rly_list', rly_list)
 
#         # for i in stype:
           
#         #     if i == 'RRM':
#         #         obj = models.runningroom_master.objects.filter(rr_name__istartswith=last_val, rly_id_id_id__in=rly_list,  rr_name__isnull=False).values('rr_name', 'rrid').distinct('rr_name').order_by('-rr_name')
#         #         for j in obj:
#         #             list1.append({'city': j['rr_name'], 'table_from':'RRM', 'loc_code': j['rrid']})
#         #     if i == 'SEM':
#         #         obj = models.section_master.objects.filter(Q(section_name__istartswith=last_val)|Q(section_code__istartswith=last_val),rly_id_id_id__in=rly_list, section_name__isnull=False).values('section_name', 'secid').distinct('section_name').order_by('-section_name')
#         #         for j in obj:
#         #             # loc_sem = y['section_name'].strip() + '-' + y['']
#         #             list1.append({'city': j['section_name'], 'table_from':'SEM', 'loc_code': j['secid']})
#         #     if i == 'STM':
#         #         obj = models.station_master.objects.filter(Q(station_name__istartswith=last_val)|Q(stnshortcode__istartswith=last_val),rly_id_id_id__in=rly_list, station_name__isnull=False).values('station_name', 'stnshortcode').distinct('station_name').order_by('-station_name')
#         #         # print('Station', obj)
#         #         for y in obj:
#         #             loc_stm = y['station_name'].strip()
#         #             list1.append({'city': loc_stm, 'table_from':'STM', 'loc_code': y['stnshortcode']})
#         #     if i == 'ORL':
#         #         obj = models.railwayLocationMaster.objects.filter(Q(location_description__istartswith=last_val) | Q(location_code__istartswith=last_val), rly_unit_code__in=rly_list , location_type_desc__in=['Coach Depot','Wagon Depot']).values('location_description','location_code','rly_unit_code').distinct('location_description').order_by('-location_description')
#         #         for j in obj:
#         #             loc_orl = j['location_description'].strip()
#         #             list1.append({'city': loc_orl, 'table_from':'ORL', 'loc_code': j['rly_unit_code']})
#         #     if i == 'SOP':
#         #         rly_list1 = [str(s) for s in rly_list]
               
#         #         obj = models.Shop_section.objects.filter(Q(section_desc__istartswith=last_val)|Q(shop_code__istartswith=last_val), rly_unit_code__in=rly_list1, section_desc__isnull=False).values('section_desc', 'section_code', 'shop_code').distinct('section_desc').order_by('-section_desc')
#         #         for j in obj:
#         #             loc_sop = j['section_desc'].strip()
#         #             list1.append({'city': loc_sop, 'table_from':'SOP', 'loc_code': j['section_code']})
#         #Pratibha 070223
#         for i in stype:
           
#             if i == 'RRM':
#                 obj = models.station_master.objects.filter(Q(station_name__istartswith=last_val)|Q(stnshortcode__istartswith=last_val),(Q(rly_id_id_id__in=rly_list)| Q(div_id_id_id__in=rly_list)), station_name__isnull=False).values('station_name', 'stnshortcode').distinct('station_name').order_by('station_name')


#                 # obj = models.runningroom_master.objects.filter(rr_name__istartswith=last_val, rly_id_id_id__in=rly_list,  rr_name__isnull=False).values('rr_name', 'rrid').distinct('rr_name').order_by('rr_name')
#                 for j in obj:
#                     loc_stm = j['station_name'].strip()
#                     list1.append({'city': loc_stm, 'table_from':'RRM', 'loc_code': j['stnshortcode']})
#             if i == 'SEM':
#                 obj = models.section_master.objects.filter(Q(section_name__istartswith=last_val)|Q(section_code__istartswith=last_val),(Q(rly_id_id_id__in=rly_list)| Q(div_id_id_id__in=rly_list)), section_name__isnull=False).values('section_name', 'secid').distinct('section_name').order_by('section_name')
#                 for j in obj:
#                     # loc_sem = y['section_name'].strip() + '-' + y['']
#                     list1.append({'city': j['section_name'], 'table_from':'SEM', 'loc_code': j['secid']})
#             if i == 'STM':
#                 obj = models.station_master.objects.filter(Q(station_name__istartswith=last_val)|Q(stnshortcode__istartswith=last_val),(Q(rly_id_id_id__in=rly_list)| Q(div_id_id_id__in=rly_list)), station_name__isnull=False).values('station_name', 'stnshortcode').distinct('station_name').order_by('station_name')
#                 # print('Station', obj)
#                 for y in obj:
#                     loc_stm = y['station_name'].strip()
#                     list1.append({'city': loc_stm, 'table_from':'STM', 'loc_code': y['stnshortcode']})
#             if i == 'ORL':
#                 obj = models.railwayLocationMaster.objects.filter(Q(location_description__istartswith=last_val) | Q(location_code__istartswith=last_val), rly_unit_code__in=rly_list , location_type_desc__in=['Coach Depot','Wagon Depot']).values('location_description','location_code','rly_unit_code').distinct('location_description').order_by('-location_description')
#                 for j in obj:
#                     loc_orl = j['location_description'].strip()
#                     list1.append({'city': loc_orl, 'table_from':'ORL', 'loc_code': j['rly_unit_code']})
           
#             if i == 'SOP':
#                 rly_list1 = [str(s) for s in rly_list]
               
#                 obj = models.Shop_section.objects.filter(Q(section_desc__istartswith=last_val)|Q(shop_code__istartswith=last_val), rly_unit_code__in=rly_list1, section_desc__isnull=False).values('section_desc', 'section_code', 'shop_code').distinct('section_desc').order_by('-section_desc')
#                 for j in obj:
#                     loc_sop = j['section_desc'].strip()
#                     list1.append({'city': loc_sop, 'table_from':'SOP', 'loc_code': j['section_code']})
           
#             if i == 'WOS':
#                 rly_list1 = [str(s) for s in rly_list]
#                 obj = models.railwayLocationMaster.objects.filter(Q(location_description__istartswith=last_val) | Q(location_code__istartswith=last_val), parent_rly_unit_code__in=rly_list1 , location_type='WS').values('location_description','location_code','rly_unit_code').distinct('location_code').order_by('-location_code')
#                 for j in obj:
#                     loc_orl = j['location_description'].strip()+j['location_code']
#                     list1.append({'city': loc_orl, 'table_from':'WOS', 'loc_code': j['rly_unit_code']})


#             if i == 'DLS':
#                 if len(division_id)==0:
#                     rly_list1 = [str(s) for s in rly_list]
#                     rly_list = models.railwayLocationMaster.objects.filter(parent_rly_unit_code__in=rly_list1, location_type ='DIV').values_list('rly_unit_code', flat=True)
#                 rly_list1 = [str(s) for s in rly_list]


#                 obj = models.railwayLocationMaster.objects.filter(Q(location_description__istartswith=last_val) | Q(location_code__istartswith=last_val), parent_rly_unit_code__in=rly_list1 , location_type='DS').values('location_description','location_code','rly_unit_code').distinct('location_code').order_by('-location_code')
#                 for j in obj:
#                     loc_orl = j['location_description'].strip()+'-'+j['location_code']
#                     list1.append({'city': loc_orl, 'table_from':'DLS', 'loc_code': j['rly_unit_code']})
           
#             if i == 'ELS':
#                 if len(division_id)==0:
#                     rly_list1 = [str(s) for s in rly_list]
#                     rly_list = models.railwayLocationMaster.objects.filter(parent_rly_unit_code__in=rly_list1, location_type ='DIV').values_list('rly_unit_code', flat=True)
#                 rly_list1 = [str(s) for s in rly_list]


#                 obj = models.railwayLocationMaster.objects.filter(Q(location_description__istartswith=last_val) | Q(location_code__istartswith=last_val), parent_rly_unit_code__in=rly_list1 , location_type='ES').values('location_description','location_code','rly_unit_code').distinct('location_code').order_by('-location_code')
#                 for j in obj:
#                     loc_orl = j['location_description'].strip()+'-'+j['location_code']
#                     list1.append({'city': loc_orl, 'table_from':'ELS', 'loc_code': j['rly_unit_code']})
           
#             if i == 'COD':
#                 rly_list1 = [str(s) for s in rly_list]
#                 obj = models.railwayLocationMaster.objects.filter((Q(location_description__istartswith=last_val) | Q(location_code__istartswith=last_val)), parent_rly_unit_code__in=rly_list1 , location_type='CD').values('location_description','location_code','rly_unit_code').distinct('location_description').order_by('-location_description')
#                 for j in obj:
#                     loc_orl ='CD-'+ j['location_description'].strip()
#                     list1.append({'city': loc_orl, 'table_from':'COD', 'loc_code': j['rly_unit_code']})
           
#             if i == 'WAD':
#                 rly_list1 = [str(s) for s in rly_list]
#                 obj = models.railwayLocationMaster.objects.filter(Q(location_description__istartswith=last_val) | Q(location_code__istartswith=last_val), parent_rly_unit_code__in=rly_list1 , location_type='WD').values('location_description','location_code','rly_unit_code').distinct('location_description').order_by('-location_description')
#                 for j in obj:
#                     loc_orl = j['location_description'].strip()
#                     list1.append({'city': loc_orl, 'table_from':'WAD', 'loc_code': j['rly_unit_code']})
#             if i == 'CTI':
#                 rly_list1 = [str(s) for s in rly_list]
#                 obj = models.railwayLocationMaster.objects.filter(Q(location_description__istartswith=last_val) | Q(location_code__istartswith=last_val), parent_rly_unit_code__in=rly_list1 , location_type='RI').values('location_description','location_code','rly_unit_code').distinct('location_description').order_by('-location_description')
#                 for j in obj:
#                     loc_orl = j['location_description'].strip()
#                     list1.append({'city': loc_orl, 'table_from':'CTI', 'loc_code': j['rly_unit_code']})
           
#             if i == 'TRN':
#                 rly_list1=[]
#                 for rs in rly_zone:
#                     rly_list1.append(rs)
#                 for rs in division_id:
#                     rly_list1.append(rs)
               
#                 for r in rly_list1:
#                     obj = models.trainMaster.objects.filter((Q(train_name__istartswith=last_val) | Q(train_no__istartswith=last_val)), (Q(passing_rly__icontains=r) | Q(passing_division__icontains=r)) ).values('train_name','train_no','org_rly_id','tnid').distinct('tnid').order_by('-tnid')
#                     for j in obj:
#                         loc_orl = j['train_no'].strip()+' - '+j['train_name'].strip()
#                         list1.append({'city': loc_orl, 'table_from':'TRN', 'loc_code': j['tnid']})
           
#             if i == 'HOS':
#                 rly_list1=[]
#                 for rs in rly_zone:
#                     rly_list1.append(rs)
#                 for rs in division_id:
#                     rly_list1.append(rs)
#                 print(rly_list1)
#                 for r in rly_list1:
#                     obj = models.iem_hospmstr.objects.filter((Q(iavhccfullname__istartswith=last_val) | Q(iavhccfullname__istartswith=last_val)), (Q(iavhcczonecode=r) | Q(iavhccdvsncode=r))).values('iavhccfullname','iavhcccode','iairlyunitcode').distinct('iavhccfullname').order_by('-iavhccfullname')
#                     for j in obj:
#                         loc_orl = j['iavhccfullname'].strip()
#                         list1.append({'city': loc_orl, 'table_from':'HOS', 'loc_code': j['iairlyunitcode']})
           
#         if last_val == '':
#             list1 = list1[:20]
#         return JsonResponse(list1, safe=False)
#     return JsonResponse({'success': False})

###changes01092023 added









#060623
# def create_inspection_details(request):
#     try:
#         if request.method == "POST" and request.is_ajax():
#             print("inside create_inspection_details")
#             from datetime import datetime
#             final=request.POST.get('final_partinspected')
#             final_id=request.POST.get('id_partinspected')
#             rly=json.loads(request.POST.get('zone'))
#             div=json.loads(request.POST.get('division'))
#             # dept=json.loads(request.POST.get('department'))
#             loc=json.loads(request.POST.get('location'))
#             insdt=request.POST.get('txtDate2')
#             accompany=json.loads(request.POST.get('accompany'))
#             final_img = json.loads(request.POST.get('final_img'))
#             inspection_no = request.POST.get('inspection_no')
#             insp_desig = request.POST.get('insp_desig')
#             insp_ofc_name = request.POST.get('insp_ofc_name')
#             station_name = request.POST.get('station_name')
#             ins_flag=request.POST.get('ins_flag')
#             if inspection_no =='' or ins_flag=='1':
#                 inspection_no = None
           
#             if 'to' in insdt:
#                 dt = insdt.split('to')
#                 st_date = dt[0].strip()
#                 en_date = dt[1].strip()
#                 start_date = datetime.strptime(st_date, '%d/%m/%y').strftime('%Y-%m-%d')
#                 inspected_on = datetime.strptime(en_date, '%d/%m/%y').strftime('%Y-%m-%d')
#             else:
#                 inspected_on = datetime.strptime(insdt, '%d/%m/%y').strftime('%Y-%m-%d')
#                 start_date = datetime.strptime(insdt, '%d/%m/%y').strftime('%Y-%m-%d')


#             title=request.POST.get('titleinsp')
#             send_to=request.POST.get('send_to')
#             send_desig=request.POST.get('send_desig')
           
#             finalval = json.loads(final)
#             final_allid = json.loads(final_id)
#             year = str(datetime.now().year)


#             # empno=models.Level_Desig.objects.exclude(delete_flag=True).filter(official_email_ID=request.user)
#             empnox = models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=request.user)| Q(official_email_ID=request.user.guest_email) | Q(official_email_ID=request.user.email), empno__isnull=False)
#             if empnox:
#                 empno = empnox[0].empno_id
#                 desig = empnox[0].designation
#                 ddesig = empnox[0].designation_code
#             else:
#                 messages.error(request, 'Employee id not found')
#             if m1.Inspection_details.objects.filter(inspection_no = inspection_no ).exists():
#                 note_ = year+'/'+desig+'/Insp'+'/'
#                 last_note1 = m1.Inspection_details.objects.filter(inspection_note_no__istartswith=note_).aggregate(Max('insp_last'))
#                 if last_note1['insp_last__max'] == None:
#                     last_note1 = 1
#                     note_no = year+'/'+desig+'/Insp'+'/'+ str(last_note1)
#                 else:
#                     last_note1 = int(last_note1['insp_last__max']) +1
#                     note_no = year+'/'+desig+'/Insp'+'/'+ str(last_note1)
#                 m1.Inspection_details.objects.filter(inspection_no = inspection_no ).update(inspection_title=title,station_name=station_name,officer_name=insp_ofc_name,officer_desig=insp_desig,  created_by=empno, insp_last=last_note1,inspection_note_no=note_no, inspection_officer_id=ddesig, item_type='Insp', modified_by=empno, status_flag=1, start_date=start_date, inspected_on=inspected_on,final_submit_on=datetime.now())
#                 m1.Insp_Accompany.objects.filter(inspection_no_id=inspection_no).delete()
#                 m6.copyto_mails.objects.filter( doc_id=inspection_no, doc_table='i').delete()
#                 m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_no, type='HQ').delete()
#                 m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_no, type='DIV').delete()
#                 m1.Marked_Officers.objects.filter(item_no__in = m1.Item_details.objects.filter(inspection_no=inspection_no).values('item_no')).delete()
#                 m1.Item_details.objects.filter(inspection_no=inspection_no).delete()
#                 m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_no,type='LOC').delete()
#                 inspection_id = inspection_no
#             else:
#                 note_ = year+'/'+desig+'/Insp'+'/'
#                 last_note1 = m1.Inspection_details.objects.filter(inspection_note_no__istartswith=note_).aggregate(Max('insp_last'))
#                 if last_note1['insp_last__max'] == None:
#                     last_note1 = 1
#                     note_no = year+'/'+desig+'/Insp'+'/'+ str(last_note1)
#                 else:
#                     last_note1 = int(last_note1['insp_last__max']) +1
#                     note_no = year+'/'+desig+'/Insp'+'/'+ str(last_note1)
#                 m1.Inspection_details.objects.create(inspection_title=title,created_on=datetime.now(), station_name=station_name,officer_name=insp_ofc_name,officer_desig=insp_desig, created_by=empno, insp_last=last_note1,inspection_note_no=note_no, inspection_officer_id=ddesig, item_type='Insp', modified_by=empno, status_flag=1, start_date=start_date, inspected_on=inspected_on,final_submit_on=datetime.now())            
#                 inspection_id=m1.Inspection_details.objects.all().last().inspection_no
           
#             messages.info(request, f'Inspection note successfully saved with Inspection Note No: {note_no}')




#             if m1.Insp_Accompany.objects.filter(inspection_no=inspection_id).exists():
#                 for up in accompany:
#                     m1.Insp_Accompany.objects.filter(inspection_no_id=inspection_id, accompany=up).update(accompany=up)
                           
#             else:
#                 for acc in accompany:
#                     m1.Insp_Accompany.objects.create(accompany=acc, inspection_no_id=inspection_id)
#             #======================change 21-11-22======================
#             for rl in rly:
#                 m1.Insp_multi_location.objects.create(inspection_no_id=inspection_id, item=rl, type='HQ')
#             for di in div:
#                 m1.Insp_multi_location.objects.create(inspection_no_id=inspection_id, item=di, type='DIV')
           
#             for lo in loc:
#                 if lo:
#                     new_loc = lo.split('#')
#                     location = new_loc[0]
#                     location_type = new_loc[1]
#                     location_code = new_loc[2]


#                     #print(location, location_type)
#                     m1.Insp_multi_location.objects.create(inspection_no_id=inspection_id, item=location, item_code=location_code, type='LOC', table_from=location_type)
           
#             #========================
           
#             officer_email=[]
#             officer_contact=[]
#             marked_officers_sms=[]
#             for f, b in zip(finalval, final_allid):
#                 #print(finalval[f], final_allid[b])
#                 for x,y in zip(finalval[f], final_allid[b]):
#                     s = y.split('.')
#                     if len(s) == 1:
#                         hed = 'heading'+y
#                         heading = finalval[f][hed]
#                         tbl_data = finalval[f][y]
#                         m1.Item_details.objects.create(tbl_data=tbl_data,item_title=heading,status_flag=1, created_on=datetime.now(), type='H',des_id=y, inspection_no_id=inspection_id)
#                         y2=str(y+'.1')
#                         if y2 in final_allid[b]:
#                             #print('if',y2)
#                             m1.Item_details.objects.filter(type='H',des_id=y, inspection_no_id=inspection_id).update(status_flag=4)
#                             pass
#                         else:
#                             #print('else',y2)
#                             trz = 'targetdate'+y
#                             officm = 'markeofficer'+y
#                             chk = 'check' + y

                            
                           
#                             targetd = finalval[f][trz]
#                             markof = finalval[f][officm]
#                             checkbox = finalval[f][chk]


                           


#                             if checkbox == '1':
#                                 checkbox = 1
#                             else:
#                                 checkbox = 0
#                             markeofficer = markof.split(',')
#                             if targetd:
#                                 targetd=targetd.split('/')
#                                 targetd='20'+targetd[2].strip()+'-'+targetd[1].strip()+'-'+targetd[0].strip()
#                                 t_date = targetd
                               
#                             else:
#                                 t_date = None

#                             # for action type
#                             act_type = 'type' + y
#                             typeofaction=finalval[f][act_type]
#                             if typeofaction=='info':
#                                 act_flag=1
#                             else:
#                                 act_flag=0
#                             m1.Item_details.objects.filter(item_title=heading,status_flag=1, type='H',des_id=y, inspection_no_id=inspection_id).update(target_date=t_date, priority=checkbox, action_type=act_flag)
#                             item_id=m1.Item_details.objects.all().last().item_no
#                             #mark officer
                           
#                             if markof:
#                                 for i in markeofficer:
#                                     Desig=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i)
#                                     if Desig:
#                                         Desig1=Desig[0].designation_code
#                                         if Desig[0].official_email_ID:
#                                             officer_email.append(Desig[0].official_email_ID)
#                                         if Desig[0].contactnumber:
#                                             if Desig[0].contactnumber not in officer_contact:
#                                                 marked_officers_sms.append({'contact':Desig[0].contactnumber,'designation':Desig[0].designation_code})
#                                                 officer_contact.append(Desig[0].contactnumber)


#                                         if m1.Marked_Officers.objects.all().last():
#                                             marked_no_id=(m1.Marked_Officers.objects.all().last().marked_no)+1
#                                         else:
#                                             marked_no_id = 1
#                                         m1.Marked_Officers.objects.create(marked_emp=i,created_on=datetime.now(),created_by=empno, marked_no=marked_no_id,status_flag=1, item_no_id=item_id,marked_to_id=Desig1)
#                                     else:
#                                         print('error')
   
#                     elif len(s) == 2:
#                         ob = 'observation'+y
#                         trz = 'targetdate'+y
#                         officm = 'markeofficer'+y
#                         chk = 'check' + y


#                         observation = finalval[f][ob]
#                         targetd = finalval[f][trz]
#                         markof = finalval[f][officm]
#                         markeofficer = markof.split(',')


#                         checkbox = finalval[f][chk]


#                         if checkbox == '1':
#                             checkbox = 1
#                         else:
#                             checkbox = 0

#                         # for action type
#                         act_type = 'type' + y
#                         typeofaction=finalval[f][act_type]
#                         if typeofaction=='info':
#                             act_flag=1
#                         else:
#                             act_flag=0
                       
#                         if targetd:
#                             # targetdate = datetime.strptime(targetd, '%d/%m/%Y').strftime('%Y-%m-%d')
#                             targetd=targetd.split('/')
#                             targetd='20'+targetd[2].strip()+'-'+targetd[1].strip()+'-'+targetd[0].strip()
#                             targetdate = targetd
#                         else:
#                             targetdate = None
#                         #print(observation)
#                         tbl_data = finalval[f][y]
#                         m1.Item_details.objects.create(tbl_data=tbl_data,observation=observation,priority=checkbox, status_flag=1,inspection_no_id=inspection_id, des_id=y, target_date=targetdate, type='SH', action_type=act_flag)
                       
#                         item_id=m1.Item_details.objects.all().last().item_no
#                         #mark officer
                       
#                         if markof:
#                             for i in markeofficer:
#                                 Desig=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i)
#                                 if Desig:
#                                     Desig1=Desig[0].designation_code
#                                     if Desig[0].official_email_ID:
#                                         officer_email.append(Desig[0].official_email_ID)
#                                     if Desig[0].contactnumber:
#                                         if Desig[0].contactnumber not in officer_contact:
#                                             marked_officers_sms.append({'contact':Desig[0].contactnumber,'designation':Desig[0].designation_code})
#                                             officer_contact.append(Desig[0].contactnumber)


#                                     if m1.Marked_Officers.objects.all().last():
#                                         marked_no_id=(m1.Marked_Officers.objects.all().last().marked_no)+1
#                                     else:
#                                         marked_no_id = 1
#                                     m1.Marked_Officers.objects.create(created_on=datetime.now(),created_by=empno,marked_emp=i,marked_no=marked_no_id,status_flag=1, item_no_id=item_id,marked_to_id=Desig1)
#                                 else:
#                                     print('error')
#                                     # messages.info(request, 'Employ Desig not Match in Designation Master')
#                         else:
#                             markeofficer=""


                   
                       
#                     else:
#                         subdes = 'subdes'+y
#                         subdes1 = finalval[f][subdes]
#                         tbl_data = finalval[f][y]
#                         # for action type
#                         act_type = 'type' + y
#                         typeofaction=finalval[f][act_type]
#                         if typeofaction=='info':
#                             act_flag=1
#                         else:
#                             act_flag=0
#                         m1.Item_details.objects.create(tbl_data=tbl_data,item_subtitle=subdes1,status_flag=4, type='SSH',des_id=y, inspection_no_id=inspection_id, action_type=act_flag)
#             for i in range(len(final_img)):
#                 ref = final_img[i][0]
#                 path = (final_img[i][1])[1:]
#                 data = list(m1.Item_details.objects.filter(inspection_no=inspection_id,des_id=ref).values('link_image'))
#                 if len(data) > 0:
#                     data = data[0]['link_image']
#                     if data != None:
#                         path = data +'@#@'+path
#                 m1.Item_details.objects.filter(inspection_no=inspection_id,des_id=ref).update(link_image = path)


           
#             try:
#                 subject="Inspection report"
#                 To=['ecegcttarun@gmail.com',]
#                 context = {'title': title}
                
                
#                 if len(officer_contact) > 0:
#                     for num in officer_contact:
#                         sendsms(num)

#                 if len(marked_officers_sms) > 0:
#                     for mar in marked_officers_sms:
#                         new_pending=m1.Marked_Officers.objects.filter(item_no__inspection_no=inspection_id,marked_to_id=mar['designation']).values().count()
#                         cum_pending=m1.Marked_Officers.objects.filter(marked_to_id=mar['designation'], status_flag=1).values().count()
#                         n=str(new_pending)+"/"+str(cum_pending)
#                         issue_date=date.today()
#                         issue_date = datetime.strftime(issue_date,"%d/%m/%Y")
#                         t=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=ddesig).values('designation')
#                         if len(t)!=0:
#                             inspection_officer=t[0]['designation']
#                         else:
#                             inspection_officer='NA'
#                         msg_body=str(note_no)+" , "+str(issue_date)+", "+str(inspection_officer)
#                         message="Insp. note no. "+msg_body+" marked to you for n/a. New Paras marked/Cumulative pending compliance: "+n+", CRIS/INSP"
#                         sms(mar['contact'],message)
                   
#                 InspSendMail(subject, To, context)
#                 #flag values:
#                 # 0 - copy to
#                 # 1 - mark officer
#                 # 2 - dealt by


#                 # doc_table:
#                 # i - Inspection_details
#                 # m - Insp_details (minutes)
#                 # d - do_upload
#                 # b - budget




#                 # m1.Insp_mail_details.objects.create(subject=subject, body=title,area='Mark Of', inspection_no_id=inspection_id, send_to=send_to,send_desig=send_desig)
#                 m6.copyto_mails.objects.create(sender_id_id=ddesig, subject=subject,doc_id=inspection_id,  body=title, area_flag=1, doc_table='i', receiver_id=send_to, receiver_desig=send_desig)
#                 messages.success(request, 'Mark officer email has been sent')
               
#             except:
#                 print("error on sending")
#                 messages.error(
#                     request, 'Email send failed. Please Try Again.')
#             try:
#                 offic_mail =[]
#                 offic_contact =[]
#                 unique_offic_mail = list(set(offic_mail))
#                 unique_offic_contact = list(set(offic_contact))
#                 if send_to:
#                     emil = send_to.split(',')
#                     for i in emil:
#                         email = models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i)
#                         if email[0].official_email_ID:
#                             offic_mail.append(email[0].official_email_ID)
#                         if Desig[0].contactnumber:
#                             offic_contact.append(Desig[0].contactnumber)
                           
#                     if len(unique_offic_contact) > 0:
#                         for num in unique_offic_contact:
#                             sendsms(num)


#                     subject="Inspection report"
#                     # To = unique_offic_mail
#                     To=['ecegcttarun@gmail.com',]
#                     context = {'title': title}
                       
#                     InspSendMail(subject, To, context)
#                     # m1.Insp_mail_details.objects.create(subject=subject, body=title, area='Copy To', inspection_no_id=inspection_id, send_to=send_to,send_desig=send_desig)
#                     m6.copyto_mails.objects.create(sender_id_id=ddesig, subject=subject,doc_id=inspection_id,  body=title, area_flag=0, doc_table='i', receiver_id=send_to, receiver_desig=send_desig)
#                     messages.success(request, 'Copy to Email has been sent')
                   
#             except:
               
#                 messages.error(request, 'Copy to Email send failed.')


#             return JsonResponse({"status": 1 })
#         return JsonResponse({"success":False}, status=400)
       
#     except Exception as e:
#         print(e)
#         try:
#             m1.error_Table.objects.create(fun_name="create_inspection_details",user_id=request.user,err_details=str(e))
#         except:
#             print("Internal Error!!!")
#         return render(request, "errorspage.html", {})

##060623
# def save_draft_data(request):
#     try:
#         if request.method == "POST" and request.is_ajax():
#             from datetime import datetime
#             final=request.POST.get('final_partinspected')
#             final_id=request.POST.get('id_partinspected')
#             rly=json.loads(request.POST.get('zone'))
#             div=json.loads(request.POST.get('division'))
#             loc=json.loads(request.POST.get('location'))
#             final_img=json.loads(request.POST.get('final_img'))
#             accompany=json.loads(request.POST.get('accompany'))
#             inspection_no = request.POST.get('inspection_no')
#             insp_desig = request.POST.get('insp_desig')
#             insp_ofc_name = request.POST.get('insp_ofc_name')
#             station_name = request.POST.get('station_name')
#             ins_flag=request.POST.get('ins_flag')
           
#             if inspection_no =='' or ins_flag=='1':
#                 inspection_no = None


#             send_to=request.POST.get('send_to')
#             send_desig=request.POST.get('send_desig')
#             temp_para_array_marked = json.loads(request.POST.get('temp_para_array_marked'))
           
#             insdt=request.POST.get('txtDate2')
#             del_array=json.loads(request.POST.get('del_array'))


#             if 'to' in insdt:
#                 dt = insdt.split('to')
#                 st_date = dt[0].strip()
#                 en_date = dt[1].strip()


#                 start_date = datetime.strptime(st_date, '%d/%m/%y').strftime('%Y-%m-%d')
#                 inspected_on = datetime.strptime(en_date, '%d/%m/%y').strftime('%Y-%m-%d')


#             else:
               
#                 inspected_on = datetime.strptime(insdt, '%d/%m/%y').strftime('%Y-%m-%d')
#                 start_date = datetime.strptime(insdt, '%d/%m/%y').strftime('%Y-%m-%d')
#             title=request.POST.get('titleinsp')
#             finalval = json.loads(final)
#             final_allid = json.loads(final_id)
#             empnox = models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=request.user)| Q(official_email_ID=request.user.guest_email) | Q(official_email_ID=request.user.email), empno__isnull=False)
#             if empnox:
#                 empno = empnox[0].empno_id
#                 ddesig = empnox[0].designation_code
#             else:
#                 messages.error(request, 'You are not authorize to create inspection. Please contact to admin')


#             if m1.Inspection_details.objects.filter(inspection_no = inspection_no ).exists():
#                 m1.Inspection_details.objects.filter(inspection_no =inspection_no ).update(inspection_title=title,item_type='Insp',  created_on=datetime.now(), inspection_officer_id=ddesig, status_flag=0,modified_by=empno,
#                                                                                            station_name=station_name,officer_name=insp_ofc_name,officer_desig=insp_desig, created_by=empno,start_date=start_date,inspected_on=inspected_on)
#                 m1.Insp_Accompany.objects.filter(inspection_no_id=inspection_no).delete()
#                 m6.copyto_mails.objects.filter( doc_id=inspection_no, doc_table='i').delete()
#                 m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_no, type='HQ').delete()
#                 m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_no, type='DIV').delete()
#                 m1.Marked_Officers.objects.filter(item_no__in = m1.Item_details.objects.filter(inspection_no=inspection_no).values('item_no')).delete()
#                 m1.Item_details.objects.filter(inspection_no=inspection_no).delete()
#                 m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_no,type='LOC').delete()
#                 inspection_id = inspection_no
#             else:
#                 m1.Inspection_details.objects.create(inspection_title=title,item_type='Insp', station_name=station_name,officer_name=insp_ofc_name,officer_desig=insp_desig,  created_on=datetime.now(), inspection_officer_id=ddesig, status_flag=0,modified_by=empno, created_by=empno,start_date=start_date,inspected_on=inspected_on)
#                 inspection_id=m1.Inspection_details.objects.all().last().inspection_no
#             if m1.Insp_Accompany.objects.filter(inspection_no_id=inspection_id).exists():
#                 for up in accompany:
#                     m1.Insp_Accompany.objects.filter(inspection_no_id=inspection_id, accompany=up).update(accompany=up)
#             else:
#                 for acc in accompany:
#                     m1.Insp_Accompany.objects.create(accompany=acc, inspection_no_id=inspection_id)
#             if send_to:
#                 m6.copyto_mails.objects.create(sender_id_id=ddesig, doc_id=inspection_id, area_flag=0, doc_table='i', receiver_id=send_to, receiver_desig=send_desig)
#             for rl in rly:
#                 m1.Insp_multi_location.objects.create(inspection_no_id=inspection_id, item=rl, type='HQ')
#             for di in div:
#                 m1.Insp_multi_location.objects.create(inspection_no_id=inspection_id, item=di, type='DIV')
         
#             for lo in loc:
#                 if lo:
#                     new_loc = lo.split('#')
#                     location = new_loc[0]
#                     location_type = new_loc[1]
#                     location_code = new_loc[2]


#                     m1.Insp_multi_location.objects.create(inspection_no_id=inspection_id, item=location, item_code=location_code, type='LOC', table_from=location_type)
#             for f, b in zip(finalval, final_allid):
#                 for x,y in zip(finalval[f], final_allid[b]):
#                     s = y.split('.')
#                     if len(s) == 1:
#                         hed = 'heading'+y
#                         heading = finalval[f][hed]
#                         tbl_data = finalval[f][y]
#                         print(type(tbl_data))
#                         m1.Item_details.objects.create(tbl_data=tbl_data,item_title=heading,status_flag=0,created_by=empno, created_on=datetime.now(), type='H',des_id=y, inspection_no_id=inspection_id)


#                         y2=str(y+'.1')
#                         if y2 in final_allid[b]:
                       
#                             pass
#                         else:
#                             trz = 'targetdate'+y
#                             officm = 'markeofficer'+y
#                             chk = 'check'+y
#                             targetd = finalval[f][trz]
#                             markof = finalval[f][officm]
#                             markeofficer = markof.split(',')
#                             checkbox = finalval[f][chk]
#                             if checkbox == '1':
#                                 checkbox = 1
#                             elif checkbox== '0':
#                                 checkbox = 0
#                             if targetd:
#                                 targetd=targetd.split('/')
#                                 targetd='20'+targetd[2].strip()+'-'+targetd[1].strip()+'-'+targetd[0].strip()
#                                 t_date = targetd
#                             else:
#                                 t_date = None

#                             # for action type
#                             act_type = 'type' + y
#                             typeofaction=finalval[f][act_type]
#                             if typeofaction=='info':
#                                 act_flag=1
#                             else:
#                                 act_flag=0
                           
#                             m1.Item_details.objects.filter(item_title=heading,status_flag=0, type='H',des_id=y, inspection_no_id=inspection_id).update(target_date=t_date, priority=checkbox, action_type=act_flag)
#                             item_id=m1.Item_details.objects.all().last().item_no
                           
#                             if markof:
#                                 for i in markeofficer:
#                                     # myuser_id=m1.empmast.objects.filter(empno=i)[0].myuser_id_id
#                                     # desig_longdesc=m1.empmast.objects.filter(empno=i)[0].desig_longdesc
#                                     # print('uuuuuuuuuuuuuuuuuu', desig_longdesc)
#                                     Desig=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i)
                                   
                                   
                                   
#                                     # email = m1.empmast.objects.filter(empno=i)[0].email
#                                     # officer_email.append(email)


                                   


#                                     if Desig:
#                                         Desig1=Desig[0].designation_code
#                                         # if Desig[0].official_email_ID:
#                                         #     officer_email.append(Desig[0].official_email_ID)


#                                         if m1.Marked_Officers.objects.all().last():
#                                             marked_no_id=(m1.Marked_Officers.objects.all().last().marked_no)+1
#                                         else:
#                                             marked_no_id = 1
#                                         m1.Marked_Officers.objects.create(created_on=datetime.now(),created_by=empno,marked_emp=i,marked_no=marked_no_id,status_flag=0,item_no_id=item_id,marked_to_id=Desig1)
#                                     else:
#                                         messages.info(request, 'Employ Desig not Match in Designation Master')
#                             else:
#                                 if m1.Marked_Officers.objects.all().last():
#                                     marked_no_id=(m1.Marked_Officers.objects.all().last().marked_no)+1
#                                 else:
#                                     marked_no_id = 1
#                                 m1.Marked_Officers.objects.create(created_on=datetime.now(),created_by=empno,marked_no=marked_no_id,status_flag=0,item_no_id=item_id)


#                     elif len(s) == 2:
#                         ob = 'observation'+y
#                         trz = 'targetdate'+y
#                         officm = 'markeofficer'+y
#                         chk = 'check'+y


#                         observation = finalval[f][ob]
#                         targetd = finalval[f][trz]
#                         markof = finalval[f][officm]
                       
#                         checkbox = finalval[f][chk]

#                         # for action type
#                         act_type = 'type' + y
#                         typeofaction=finalval[f][act_type]
#                         if typeofaction=='info':
#                             act_flag=1
#                         else:
#                             act_flag=0

#                         if checkbox == '1':
#                             checkbox = 1
#                         elif checkbox== '0':
#                             checkbox = 0


#                         markeofficer = markof.split(',')
                       
#                         if targetd:
#                             targetd=targetd.split('/')
#                             targetd='20'+targetd[2].strip()+'-'+targetd[1].strip()+'-'+targetd[0].strip()
#                             targetdate = targetd
#                         else:
#                             targetdate = None
#                         tbl_data = finalval[f][y]
#                         m1.Item_details.objects.create(tbl_data=tbl_data,observation=observation,priority=checkbox, status_flag=0,created_by=empno,created_on=datetime.now(), inspection_no_id=inspection_id, des_id=y, target_date=targetdate, type='SH', action_type=act_flag)
                       
#                         item_id=m1.Item_details.objects.all().last().item_no
#                         if markof:
#                             for i in markeofficer:
#                                 Desig=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i)
#                                 if Desig:
#                                     Desig1=Desig[0].designation_code


#                                     if m1.Marked_Officers.objects.all().last():
#                                         marked_no_id=(m1.Marked_Officers.objects.all().last().marked_no)+1
#                                     else:
#                                         marked_no_id = 1
#                                     m1.Marked_Officers.objects.create(created_on=datetime.now(),created_by=empno,marked_no=marked_no_id,marked_emp=i, status_flag=0,item_no_id=item_id,marked_to_id=Desig1)
#                                 else:
#                                     print('error')
#                         else:
#                             markeofficer=''
                   
#                     else:
#                         subdes = 'subdes'+y
#                         subdes1 = finalval[f][subdes]
#                         tbl_data = finalval[f][y]
#                         # for action type
#                         act_type = 'type' + y
#                         typeofaction=finalval[f][act_type]
#                         if typeofaction=='info':
#                             act_flag=1
#                         else:
#                             act_flag=0
#                         m1.Item_details.objects.create(tbl_data=tbl_data, item_subtitle=subdes1,status_flag=0,created_by=empno,created_on=datetime.now(), type='SSH',des_id=y, inspection_no_id=inspection_id, action_type=act_flag)
#             for i in del_array:
#                 m1.Item_details.objects.filter(inspection_no=inspection_id,des_id=i).update(del_flag=1)
#             for i in range(len(final_img)):
#                 ref = final_img[i][0]
#                 path = (final_img[i][1])[1:]
#                 data = list(m1.Item_details.objects.filter(inspection_no=inspection_id,des_id=ref).values('link_image'))
#                 if len(data) > 0:
#                     data = data[0]['link_image']
#                     if data != None:
#                         path = data +'@#@'+path
#                 m1.Item_details.objects.filter(inspection_no=inspection_id,des_id=ref).update(link_image = path)
#             for i in range(len(temp_para_array_marked)):
#                 des_id = temp_para_array_marked[i]['id']
#                 print(des_id,len(des_id),inspection_id)
#                 markeofficer = temp_para_array_marked[i]['officer'].split(',')
#                 if len(markeofficer) > 0:
#                     item_id = list(m1.Item_details.objects.filter(inspection_no=inspection_id,des_id=des_id).values('item_no'))
#                     if len(item_id) >0:
#                         item_id = item_id[0]['item_no']
#                     else:
#                         continue
#                     # item_id=m1.Item_details.objects.filter(inspection_no=inspection_id,des_id=des_id).all()
#                     # print(item_id)
#                     if not m1.Marked_Officers.objects.filter(item_no = item_id).exists():
#                         for i in markeofficer:
#                             Desig=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i,)
#                             if Desig:
#                                 Desig1=Desig[0].designation_code


#                                 if m1.Marked_Officers.objects.all().last():
#                                     marked_no_id=(m1.Marked_Officers.objects.all().last().marked_no)+1
#                                 else:
#                                     marked_no_id = 1
#                                 m1.Marked_Officers.objects.create(created_on=datetime.now(),created_by=empno,marked_no=marked_no_id,marked_emp=i, status_flag=0,item_no_id=item_id,marked_to_id=Desig1)
         
#             return JsonResponse({"status": 1 })
#         return JsonResponse({"success":False}, status=400)
#     except Exception as e:
#         try:
#             m1.error_Table.objects.create(fun_name="save_draft_data",user_id=request.user,err_details=str(e))
#         except:
#             print("Internal Error!!!")
#         return render(request, "errorspage.html", {})



def desig_changecode_edit(request,testempno):
    desig=[]
    for i in range(len(testempno)):
        xx=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=testempno[i]).values('designation', ).distinct('designation')
        if len(xx)>0:
            desig.append(xx[0]['designation'])
    testdesig = desig
    officer_id=testempno
    testmarkofficer=''
    lstdict=[]
    alldesig = models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).values('d_level').distinct('d_level')
    for i in alldesig:
        if i['d_level'] == 'GM':
            lst1=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level']).exclude(designation_code__in=testempno).count()
            if lst1 == 0:
                lst2=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).exclude(d_level=i['d_level']).values('designation_code','designation').order_by('designation'))
                if testmarkofficer != '':
                    testmarkofficer+=','
                testmarkofficer=testmarkofficer+"All GM's/ZR"
                interkey=set(testempno)-set(map(lambda d: d['designation_code'], lst2))
                testempno=list(map(lambda d: d['designation_code'], lst2))
                testdesig=list(map(lambda d: d['designation'], lst2))
                lstdict.append({"desig":"All GM's/ZR","designation_code":list(interkey)})

        elif i['d_level'] == 'BM':
            lst1=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level']).exclude(designation_code__in=testempno).count()
            if lst1 == 0:
                lst2=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).exclude(d_level=i['d_level']).values('designation_code','designation').order_by('designation'))
                if testmarkofficer != '':
                    testmarkofficer+=','
                testmarkofficer=testmarkofficer+"All Board Member's"
                interkey=set(testempno)-set(map(lambda d: d['designation_code'], lst2))
                testempno=list(map(lambda d: d['designation_code'], lst2))
                testdesig=list(map(lambda d: d['designation'], lst2))
                lstdict.append({"desig":"All Board Member's","designation_code":list(interkey)})


        elif i['d_level'] == 'PHOD':
            lst1=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level']).exclude(designation_code__in=testempno).count()
            if lst1 == 0:
                lst2=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).exclude(d_level=i['d_level']).values('designation_code','designation').order_by('designation'))
                if testmarkofficer != '':
                    testmarkofficer+=','
                testmarkofficer=testmarkofficer+"All PHOD's"
                interkey=set(testempno)-set(map(lambda d: d['designation_code'], lst2))
                testempno=list(map(lambda d: d['designation_code'], lst2))
                testdesig=list(map(lambda d: d['designation'], lst2))
                lstdict.append({"desig":"All PHOD's","designation_code":list(interkey)})
            else:
                hq=models.railwayLocationMaster.objects.filter(parent_location_code__isnull=False).values('parent_location_code').distinct()
                for ii in hq:
                    rlyunit=models.railwayLocationMaster.objects.filter(location_code=ii['parent_location_code']).values('rly_unit_code')
                    if models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level'],rly_unit__in=rlyunit).exists():
                        lst3=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level'],rly_unit__in=rlyunit).exclude(designation_code__in=testempno).count()
                        if lst3 == 0:
                            lst2=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).exclude(d_level=i['d_level'],rly_unit__in=rlyunit).values('designation_code','designation').order_by('designation'))
                            if testmarkofficer != '':
                                testmarkofficer+=','
                            testmarkofficer=testmarkofficer+"All PHOD's"+ii['parent_location_code']
                            interkey=set(testempno)-set(map(lambda d: d['designation_code'], lst2))
                            testempno=list(map(lambda d: d['designation_code'], lst2))
                            testdesig=list(map(lambda d: d['designation'], lst2))
                            lstdict.append({"desig":"All PHOD's/"+ii['parent_location_code'],"designation_code":list(interkey)})



        elif i['d_level'] == 'DRM':
            lst1=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level']).exclude(designation_code__in=testempno).count()
            if lst1 == 0:
                lst2=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).exclude(d_level=i['d_level']).values('designation_code','designation').order_by('designation'))
                if testmarkofficer != '':
                    testmarkofficer+=','
                testmarkofficer=testmarkofficer+"All DRM's"
                interkey=set(testempno)-set(map(lambda d: d['designation_code'], lst2))
                testempno=list(map(lambda d: d['designation_code'], lst2))
                testdesig=list(map(lambda d: d['designation'], lst2))
                lstdict.append({"desig":"All DRM's","designation_code":list(interkey)})
            else:
                hq=models.railwayLocationMaster.objects.filter(parent_location_code__isnull=False).values('parent_location_code').distinct()
                for ii in hq:
                    rlyunit=models.railwayLocationMaster.objects.filter(parent_location_code=ii['parent_location_code']).values('rly_unit_code')
                    if models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level'],rly_unit__in=rlyunit).exists():
                        lst3=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level'],rly_unit__in=rlyunit).exclude(designation_code__in=testempno).count()
                        if lst3 == 0:
                            lst2=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).exclude(d_level=i['d_level'],rly_unit__in=rlyunit).values('designation_code','designation').order_by('designation'))
                            if testmarkofficer != '':
                                testmarkofficer+=','
                            testmarkofficer=testmarkofficer+"All DRM's/"+ii['parent_location_code']
                            interkey=set(testempno)-set(map(lambda d: d['designation_code'], lst2))
                            testempno=list(map(lambda d: d['designation_code'], lst2))
                            testdesig=list(map(lambda d: d['designation'], lst2))
                            lstdict.append({"desig":"All DRM's/"+ii['parent_location_code'],"designation_code":list(interkey)})

    for i in range(len(testdesig)):
        if testmarkofficer != '':
            testmarkofficer+=','
        testmarkofficer=testmarkofficer+testdesig[i]
        lstdict.append({"desig":testdesig[i],"designation_code":[testempno[i]]})
    context={'marked_id': json.dumps(officer_id), 'marked_desig': testmarkofficer,'marked_key':json.dumps(lstdict)}
    return context
   

def validate_zone_division(request):
    try:
        if request.method == "GET" or request.is_ajax():
            rly=request.GET.get('rly_data_hrms')
            newrly = json.loads(rly)
            divisions=json.loads(request.GET.get("div_data_hrms"))
            newdiv = []
            for x in divisions:
                x1=x.split('-')
                newdiv.append(x1[0])

            div_parents =list( models.railwayLocationMaster.objects.filter(location_code__in = newdiv).values_list('parent_location_code', flat=True))
            all_zones=list(models.railwayLocationMaster.objects.filter(location_type_desc__in=['RAILWAY BOARD', 'PRODUCTION UNIT', 'HEAD QUATER','OFFICE', 'PSU', 'PRODUCTION UNIT', 'INSTITUTE']).values_list('location_code', flat=True).order_by('location_code'))

            zones=[]
            for i in newrly:
                if i in div_parents:
                    zones.append(i)
            
            context={
                    'zones':zones,
                    'all_zones':all_zones
                    
                }
            return JsonResponse(context,safe = False)
        return JsonResponse({"success":False}, status = 400)
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="getdiv_rly_hrms",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {}) 


def guest_login(request):
    try:
        cuser=request.user
        if request.user.user_role == 'guest':
            messages.error(request, 'You are not authorize to create Guest Logins. Please contact admin')
        
        guest_id=list(models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user)).values('my_guest'))
        context={}
        if len(guest_id) and guest_id[0]['my_guest']:
            guest_details=list(m1.MyUser.objects.filter(id=guest_id[0]['my_guest']).values())
            print(guest_details)
            if len(guest_details) and guest_details[0]['is_active']:
                active_date=guest_details[0]['last_update'].strftime("%d/%m/%Y")
                context={'guest_present':1,'guest_email':guest_details[0]['username'],'active_date':active_date}
            else:
                context={'guest_present':0}
            
        
        return render(request,"guest_login.html",context)
    except Exception as e:
        try:
            m1.error_Table.objects.create(fun_name="compliance_forward",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        #messages.error(request, 'Error : '+str(e))
        return render(request, "errorspage.html", {})

def guest_func(request):
    try:
        if request.method == "GET" or request.is_ajax():
            cuser=request.user
            if request.user.user_role == 'guest':
                messages.error(request, 'You are not authorize to create Guest Logins. Please contact admin')

            flagsss=request.GET.get('flag')
            details=list(models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user)).values())
            passw='pbkdf2_sha256$260000$SRMWL9kGaFiu7CaieecHBF$RzSy9GHCgyv7PCRWfmAk9FGk3MokOlU2OMfes4GaCH8='
            if details:
                if details[0]['my_guest_id']:
                    guest_details=list(m1.MyUser.objects.filter(id=details[0]['my_guest_id']).values())
                    active_flag=guest_details[0]['is_active']

                    if active_flag is False and flagsss=='1':
                        m1.MyUser.objects.filter(id=details[0]['my_guest_id']).update(is_active=True,password=passw)
                    elif flagsss == '0'  and active_flag:
                        m1.MyUser.objects.filter(id=details[0]['my_guest_id']).update(is_active=False)
                else:
                    myuserid=list(m1.MyUser.objects.filter(email=cuser).values('id','phase_type','is_admin','email','password'))
                    myuser=m1.MyUser.objects.get(email=cuser)
                    maxid=m1.MyUser.objects.filter().values('id').aggregate(Max('id'))['id__max']+1
                    mail_id='guest'+str(maxid)+myuserid[0]['email']
                    if m1.MyUser.objects.filter(Q(email=mail_id) | Q(username=mail_id)).exists():
                        m1.MyUser.objects.filter(Q(email=mail_id) | Q(username=mail_id)).update(password=passw,username=mail_id,email=mail_id,guest_email=myuserid[0]['email'],guest_to_id=myuserid[0]['id'],user_role='guest',is_active=True,
                                             is_admin=myuserid[0]['is_admin'],last_update=datetime.now(),date_joined=datetime.now(),
                                             phase_type=myuserid[0]['phase_type'])
                        new_guest=m1.MyUser.objects.get(Q(username=mail_id))
                    else:
                        new_guest=m1.MyUser.objects.create(id=maxid,password=passw,username=mail_id,email=mail_id,guest_email=myuserid[0]['email'],guest_to_id=myuserid[0]['id'],user_role='guest',is_active=True,
                                             is_admin=myuserid[0]['is_admin'],last_update=datetime.now(),date_joined=datetime.now(),
                                             phase_type=myuserid[0]['phase_type'])
                    models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user)).update(my_guest_id=new_guest)
            return JsonResponse({},safe = False)
        return JsonResponse({"success":False}, status = 400)
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="getdiv_rly_hrms",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {}) 

def get_station_names(request):
    if request.method == 'GET' and request.is_ajax():
        last_val = request.GET.get('last_val')
        if last_val is None:
            last_val = ''
        rly_zone = json.loads(request.GET.get('rly_zone'))
        division_id = json.loads(request.GET.get('division_id'))
        if len(division_id):
            rly_list = models.railwayLocationMaster.objects.filter(Q(location_code__in=division_id)).values_list('rly_unit_code', flat=True)
        else:
            rly_list = models.railwayLocationMaster.objects.filter(Q(location_code__in=rly_zone)|Q(location_code__in=division_id)).values_list('rly_unit_code', flat=True)
        list1=[]
        obj = models.station_master.objects.filter(Q(station_name__istartswith=last_val)|Q(stnshortcode__istartswith=last_val),(Q(rly_id_id_id__in=rly_list)| Q(div_id_id_id__in=rly_list)), station_name__isnull=False).values('station_name', 'stnshortcode').distinct('station_name').order_by('station_name')
        for y in obj:
            loc_stm = y['station_name'].strip()
            list1.append({'city': loc_stm, 'table_from':'SEM', 'loc_code': y['stnshortcode']})
        if last_val == '':
            list1 = list1[:20]
        return JsonResponse(list1, safe=False)
    return JsonResponse({'success': False})
      
def checkstationdetail(request):
    try:
        station=request.GET.get('station_des')
        if(models.Level_Desig.objects.exclude(delete_flag=True).filter(station_des=station).exists()):
            bono=[]
        else:
            bono=[1]
        return JsonResponse(bono,safe = False)
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="checkstationdetail",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "editDetail.html", {})


def pending_task_module(request):
    # try:  
        daterangeselect=request.GET.get('data3')
        if daterangeselect not in ['0-3','0-6','0-12','tofrom']:
            inspect_details1=m1.Inspection_details.objects.filter().values().order_by('-inspection_no')
            # inspect_details1=list(m1.Inspection_details.objects.filter().values_list('inspection_no',flat=True))
        else:
            from dateutil.relativedelta import relativedelta
            if daterangeselect=='0-3':
                now = datetime.today()
                six = now
                prev = now - relativedelta(months=3)
                prev = prev.date()
            elif daterangeselect=='0-6':
                now = datetime.today()
                six = now
                prev = now - relativedelta(months=6)
                prev = prev.date()
            elif daterangeselect=='0-12':
                now = datetime.today()
                six = now
                prev = now - relativedelta(months=12)
                prev = prev.date()
            elif daterangeselect=='tofrom':
                daterange=request.GET.get('daterange')
                daterange1=daterange.split('-')
                date1=daterange1[0].split('/')
                date2=daterange1[1].split('/')
                prev='20'+date1[2].strip()+'-'+date1[1].strip()+'-'+date1[0].strip()
                six='20'+date2[2].strip()+'-'+date2[1].strip()+'-'+date2[0].strip()
            # inspect_details1=m1.Inspection_details.objects.filter(inspected_on__gte=prev,inspected_on__lte=six).values().order_by('-inspection_no')
            # inspect_details1=list(m1.Inspection_details.objects.filter(inspected_on__gte=prev,inspected_on__lte=six).values_list('inspection_no',flat=True))




        cuser=request.user.username
        if request.user.user_role == 'guest':
            cuser=request.user.guest_email
            request.user.email=request.user.guest_email
        desigid=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].designation_code
       
        rly_code=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].rly_unit.location_code
        rly_unit_code=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].rly_unit.rly_unit_code
        parent_loc=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].rly_unit.parent_location_code
        parent_loc_id=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].rly_unit.parent_rly_unit_code
        div_code=rly_code
        if parent_loc!='RB':
            div_code=rly_code
            rly_code=parent_loc
            rly_unit_code=parent_loc_id




        pending=m1.Marked_Officers.objects.filter(target_flag=1,marked_to_id=desigid, status_flag=3).values().order_by('-marked_no')
        completed_list=[]
        listgrid=[]
        count=1
        for p in pending:
            temp={}
            if m1.target_compliance.objects.filter(marked_no_id=p['marked_no']):
                temp['sr_no']=count
                item_desc=m1.Item_details.objects.filter(item_no=p['item_no_id']).values()
                temp['marked_no']=p['marked_no']
                if item_desc[0]['type']=='H':
                    temp['item_desc']=item_desc[0]['item_title']
                elif item_desc[0]['type']=='SH':
                    temp['item_desc']=item_desc[0]['observation']
                insp_det=m1.Inspection_details.objects.filter(inspection_no=item_desc[0]['inspection_no_id']).values()
                temp['inspection_no']=insp_det[0]['inspection_no']
                temp['inspection_note_no']=insp_det[0]['inspection_note_no']
                t=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=insp_det[0]['inspection_officer_id']).values('designation')
                if len(t)!=0:
                    temp['inspection_officer']=t[0]['designation']
                    temp['inspection_officer_id']=insp_det[0]['inspection_officer_id']
                else:
                    temp['inspection_officer']='NA'
                temp['inspected_on']=insp_det[0]['inspected_on'].strftime("%d/%m/%y") if insp_det[0]['inspected_on']!=None else 'NA'




                t1=m1.target_compliance.objects.filter(marked_no_id=p['marked_no']).values('target_date', 'status_flag','target_id','task_flag')
                temp['target_id']=t1[0]['target_id']
                temp['task_flag']=t1[0]['task_flag']
                temp['status_flag']=t1[0]['status_flag']
                today=datetime.today().strftime("%d/%m/%y")
                temp['target_date']=t1[0]['target_date'].strftime("%d/%m/%y") if t1[0]['target_date']!=None else 'NA'
                if temp['target_date']>today:
                    temp['time_left']=True
                else:
                    temp['time_left']=False




                status=m1.target_status.objects.filter(target_no_id=t1[0]['target_id']).values('reply_on', 'status_flag').order_by('-reply_on')
                status_flags={1: 'Started', 2: 'On Track', 3: 'Partially Completed', 4: 'Delayed', 5: 'Completed',0:'Not Yet Started'}
                status_flags_comply={0: 'Pending', 1: 'Saved as Draft', 2: 'Rejected'}
                if temp['status_flag'] in [0,1]:
                    if len(status):
                        temp['reply_on']=status[0]['reply_on'].strftime("%d/%m/%y") if status[0]['reply_on']!=None else 'NA'
                        temp['status']=status_flags[status[0]['status_flag']]
                    else:
                        temp['reply_on']='NA'
                        temp['status']='Pending'




                elif temp['status_flag']==2:
                    if len(status):
                        temp['reply_on']=status[0]['reply_on'].strftime("%d/%m/%y") if status[0]['reply_on']!=None else 'NA'
                        temp['status']=status_flags[status[0]['status_flag']]
                    else:
                        temp['reply_on']='NA'
                        temp['status']='Rejected'
                elif temp['status_flag']==3:
                    if len(status):
                        temp['reply_on']=status[0]['reply_on'].strftime("%d/%m/%y") if status[0]['reply_on']!=None else 'NA'
                        temp['status']='Completed'
                elif temp['status_flag']==4:
                    if len(status):
                        temp['reply_on']=status[0]['reply_on'].strftime("%d/%m/%y") if status[0]['reply_on']!=None else 'NA'
                        temp['status']=status_flags[status[0]['status_flag']]
                       
                    else:
                        temp['reply_on']='NA'
                        temp['status']='Pending'
               






               
                if temp['status_flag']==3:
                    completed_list.append(temp)
                else:
                    listgrid.append(temp)
                count=count+1
       
        pending=m1.target_compliance.objects.filter(task_flag=2,pending_with_id=desigid).values()
        for p in pending:
                temp={}
                temp['sr_no']=count
                temp['item_desc']=p['task_descp']
                temp['task_flag']=p['task_flag']
                t=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=p['assigned_by_id']).values('designation')
                if len(t)!=0:
                    temp['inspection_officer']=t[0]['designation']
                    temp['inspection_officer_id']=p['assigned_by_id']
                else:
                    temp['inspection_officer']='NA'
                temp['inspected_on']=p['init_date'].strftime("%d/%m/%y") if p['init_date']!=None else 'NA'


                temp['target_id']=p['target_id']
                temp['status_flag']=p['status_flag']
                today=datetime.today().strftime("%d/%m/%y")
                temp['target_date']=p['target_date'].strftime("%d/%m/%y") if p['target_date']!=None else 'NA'
                if temp['target_date']>today:
                    temp['time_left']=True
                else:
                    temp['time_left']=False




                status=m1.target_status.objects.filter(target_no_id=p['target_id']).values('reply_on', 'status_flag').order_by('-reply_on')
                status_flags={1: 'Started', 2: 'On Track', 3: 'Partially Completed', 4: 'Delayed', 5: 'Completed', 0:'Not Yet Started'}
                status_flags_comply={0: 'Pending', 1: 'Saved as Draft', 2: 'Rejected'}
                if temp['status_flag'] in [0,1]:
                    if len(status):
                        temp['reply_on']=status[0]['reply_on'].strftime("%d/%m/%y") if status[0]['reply_on']!=None else 'NA'
                        temp['status']=status_flags[status[0]['status_flag']]
                    else:
                        temp['reply_on']='NA'
                        temp['status']='Pending'




                elif temp['status_flag']==2:
                    if len(status):
                        temp['reply_on']=status[0]['reply_on'].strftime("%d/%m/%y") if status[0]['reply_on']!=None else 'NA'
                        temp['status']=status_flags[status[0]['status_flag']]
                    else:
                        temp['reply_on']='NA'
                        temp['status']='Rejected'
                elif temp['status_flag']==3:
                    if len(status):
                        temp['reply_on']=status[0]['reply_on'].strftime("%d/%m/%y") if status[0]['reply_on']!=None else 'NA'
                        temp['status']='Completed'
                elif temp['status_flag']==4:
                    if len(status):
                        temp['reply_on']=status[0]['reply_on'].strftime("%d/%m/%y") if status[0]['reply_on']!=None else 'NA'
                        temp['status']=status_flags[status[0]['status_flag']]
                       
                    else:
                        temp['reply_on']='NA'
                        temp['status']='Pending'
               






               
                if temp['status_flag']==3:
                    completed_list.append(temp)
                else:
                    listgrid.append(temp)
                count=count+1
       


        listgrid = sorted(listgrid, key=lambda k: k['target_date'])
       


        list1=models.railwayLocationMaster.objects.filter(location_type_desc__in=['RAILWAY BOARD', 'PRODUCTION UNIT', 'HEAD QUATER', 'PSU', 'INSTITUTE']).values('location_code').distinct().order_by('location_code')
        list2=[]
        for i in list1:
            list2.append(i['location_code'])
        list3=models.railwayLocationMaster.objects.filter(location_type_desc__in=['DIVISION','WORKSHOP', 'STORE', 'CONSTRUCTION', 'OFFICE']).distinct().values('location_code', 'location_type').order_by('location_code')
        list4=[]
        for i in list3:
            list4.append({'location_code': i['location_code'], 'location_type': i['location_type']})  
        list5=models.departMast.objects.all().values('department_name').distinct().order_by('department_name')
        list6=[]
        for i in list5:
            list6.append(i['department_name'])
        pclevel=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=desigid).values().order_by())




        designation=models.Level_Desig.objects.exclude(delete_flag=True).exclude(Q(empno_id=None),designation_code=desigid).filter(pc7_levelmin__lte=pclevel[0]['pc7_levelmin'],rly_unit=rly_unit_code).distinct().values('designation').order_by('-pc7_levelmin')
        officr=[]
        for l in listgrid:
            if l['inspection_officer'] not in officr:
                officr.append(l['inspection_officer'])




        context={
            'zone':list2 ,
            'division':list4,
            'dept':list6,
            'listgrid':listgrid,
            'completed_list':completed_list,
            'desig':designation,
            'designation':designation,
            'officr':officr,
            'rly_code':rly_code,
            'div_code':div_code,
        }
        return render(request,"pending_task_module.html",context)
    # except Exception as e:
    #     try:
    #         m1.error_Table.objects.create(fun_name="pending_task_module",user_id=request.user,err_details=str(e))
    #     except:
    #         print("Internal Error!!!")
    #     return render(request, "errorspage.html", {})

def pendingtasks_filterdata_ajax(request):
    if request.method == 'GET' and request.is_ajax():
        target_id = request.GET.get('target_id')
        str_type = request.GET.get('str')
        print(target_id)
        list1=[]
        status_flags={1: 'Started', 2: 'On Track', 3: 'Partially Completed', 4: 'Delayed', 5: 'Completed',0:'Not Yet Started'}
        if str_type == 'reply':
            comp=m1.target_compliance.objects.filter(target_id=target_id).values()
            temp={}
            # pending=m1.Marked_Officers.objects.filter(target_flag=1,marked_no=marked_no).values().order_by('-marked_no')
            # print(pending)
            # item_desc=m1.Item_details.objects.filter(item_no=pending[0]['item_no_id']).values()
            # if item_desc[0]['type']=='H':
            #     temp['item_desc']=item_desc[0]['item_title']
            # elif item_desc[0]['type']=='SH':
            #     temp['item_desc']=item_desc[0]['observation']
            # temp['reply_sent']=pending[0]['compliance']
            # comp=m1.target_compliance.objects.filter(marked_no_id=marked_no).values()


            temp['target_id']=comp[0]['target_id']
            today=datetime.today().strftime("%d/%m/%y")
            temp['target_date']=comp[0]['target_date'].strftime("%d/%m/%y") if comp[0]['target_date']!=None else 'NA'
            if temp['target_date']>today:
                temp['time_left']=True
            else:
                temp['time_left']=False


            temp['status_flag']=comp[0]['status_flag']
            temp['new_reply']=comp[0]['reply_sent']
            temp['rejected_remarks']=comp[0]['remark'] if comp[0]['remark']!=None else 'NA'
            temp['rejected_on']=comp[0]['rejected_on'].strftime("%d/%m/%y") if comp[0]['rejected_on']!=None else 'NA'
            temp['reply_on']=comp[0]['reply_on'].strftime("%d/%m/%y") if comp[0]['reply_on']!=None else 'NA'




            status=m1.target_status.objects.filter(target_no_id=temp['target_id']).values('reply_on', 'status_flag').order_by('-reply_on')
            status_flags={1: 'Started', 2: 'On Track', 3: 'Partially Completed', 4: 'Delayed', 5: 'Completed',0:'Not Yet Started'}
            status_flags_comply={1: 'Pending', 2: 'Rejected'}
            print(temp['status_flag'])
            if temp['status_flag'] in [1,2]:
                    if len(status):
                        temp['reply_on']=status[0]['reply_on'].strftime("%d/%m/%y") if status[0]['reply_on']!=None else 'NA'
                        temp['status']=status_flags[status[0]['status_flag']]
                    else:
                        temp['reply_on']='NA'
                        temp['status']='Pending'




            elif temp['status_flag']==0:
                    temp['reply_on']='NA'
                    temp['status']='Pending'




            elif temp['status_flag']==4:
                    if len(status):
                        temp['reply_on']=status[0]['reply_on'].strftime("%d/%m/%y") if status[0]['reply_on']!=None else 'NA'
                        temp['status']=status_flags[status[0]['status_flag']]
                    else:
                        temp['reply_on']='NA'
                        temp['status']='Pending'
            list1.append(temp)
           
            statuses=list(m1.target_status.objects.filter(target_no=comp[0]['target_id']).values().order_by('-reply_on'))
            status_table=[]
            for s in statuses:
                stat={}
                stat['status']=status_flags[s['status_flag']]
                stat['reply_sent']=s['reply_sent']
                stat['reply_on']=s['reply_on'].strftime("%d/%m/%y") if s['reply_on']!=None else 'NA'
                stat['remark']=s['remark'] if s['remark']!=None else 'NA'
                stat['rejected_on']=s['rejected_on'].strftime("%d/%m/%y") if s['rejected_on']!=None else 'NA'
                status_table.append(stat)
               
        context={'itemdetails':list1,'status_table':status_table}  
        print(list1)
        return JsonResponse(context, safe=False)
    return JsonResponse({'success': False})
       
def assigned_task_module(request):
    # try:  
        daterangeselect=request.GET.get('data3')
       
        cuser=request.user.username
        if request.user.user_role == 'guest':
            cuser=request.user.guest_email
            request.user.email=request.user.guest_email
        desigid=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].designation_code
       
        rly_code=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].rly_unit.location_code
        rly_unit_code=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].rly_unit.rly_unit_code
        parent_loc=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].rly_unit.parent_location_code
        parent_loc_id=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].rly_unit.parent_rly_unit_code
        div_code=rly_code
        if parent_loc!='RB':
            div_code=rly_code
            rly_code=parent_loc
            rly_unit_code=parent_loc_id








        if daterangeselect not in ['0-3','0-6','0-12','tofrom']:
            inspect_details1=m1.Inspection_details.objects.filter().values().order_by('-inspection_no')
            inspect_assgnd=list(m1.Inspection_details.objects.filter(inspection_officer=desigid).values_list('inspection_no',flat=True))
        else:
            from dateutil.relativedelta import relativedelta
            if daterangeselect=='0-3':
                now = datetime.today()
                six = now
                prev = now - relativedelta(months=3)
                prev = prev.date()
            elif daterangeselect=='0-6':
                now = datetime.today()
                six = now
                prev = now - relativedelta(months=6)
                prev = prev.date()
            elif daterangeselect=='0-12':
                now = datetime.today()
                six = now
                prev = now - relativedelta(months=12)
                prev = prev.date()
            elif daterangeselect=='tofrom':
                daterange=request.GET.get('daterange')
                daterange1=daterange.split('-')
                date1=daterange1[0].split('/')
                date2=daterange1[1].split('/')
                prev='20'+date1[2].strip()+'-'+date1[1].strip()+'-'+date1[0].strip()
                six='20'+date2[2].strip()+'-'+date2[1].strip()+'-'+date2[0].strip()
            # inspect_details1=m1.Inspection_details.objects.filter(inspected_on__gte=prev,inspected_on__lte=six).values().order_by('-inspection_no')
            # inspect_details1=list(m1.Inspection_details.objects.filter(inspected_on__gte=prev,inspected_on__lte=six).values_list('inspection_no',flat=True))




       




        listgrid=[]
        count=1
        completed_list=[]
        items_pending=list(m1.Item_details.objects.filter(inspection_no__in=inspect_assgnd).values_list('item_no', flat=True))
        pending=m1.target_compliance.objects.filter(task_flag=2,assigned_by_id=desigid).values()
        for p in pending:
                temp={}
                temp['sr_no']=count
                temp['item_desc']=p['task_descp']
                temp['task_flag']=p['task_flag']
                t=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=p['pending_with_id']).values('designation')
                if len(t)!=0:
                    temp['assgnd_officer']=t[0]['designation']
                    temp['assgnd_officer_id']=p['pending_with_id']
                else:
                    temp['assgnd_officer']='NA'
               
                temp['inspected_on']=p['init_date'].strftime("%d/%m/%y") if p['init_date']!=None else 'NA'


                temp['status_flag']=p['status_flag']
                today=datetime.today().strftime("%d/%m/%y")
                temp['target_date']=p['target_date'].strftime("%d/%m/%y") if p['target_date']!=None else 'NA'
                if temp['target_date']>today:
                    temp['time_left']=True
                else:
                    temp['time_left']=False
                temp['reply_on']=p['reply_on'].strftime("%d/%m/%y") if p['reply_on']!=None else 'NA'


                temp['target_id']=p['target_id']
                status=m1.target_status.objects.filter(target_no_id=p['target_id']).values('reply_on', 'status_flag').order_by('-reply_on')
                status_flags={1: 'Started', 2: 'On Track', 3: 'Partially Completed', 4: 'Delayed', 5: 'Completed',0:'Not Yet Started'}
                status_flags_comply={1: 'Pending', 2: 'Rejected', 4:'Pending'}




                if temp['status_flag'] ==0:
                    temp['reply_on']='NA'
                    temp['status']='Pending'








                # elif temp['status_flag'] == 2:
                #     if len(status):
                #         temp['reply_on']=status[0]['reply_on'].strftime("%d/%m/%y") if status[0]['reply_on']!=None else 'NA'
                #         temp['status']='Rejected'




                elif temp['status_flag'] in [1,2,4]:
                    if len(status):
                        temp['reply_on']=status[0]['reply_on'].strftime("%d/%m/%y") if status[0]['reply_on']!=None else 'NA'
                        temp['status']=status_flags[status[0]['status_flag']]
                    else:
                        temp['reply_on']='NA'
                        temp['status']=status_flags_comply[temp['status_flag']]




                if temp['status_flag']==3:
                    completed_list.append(temp)
                else:
                    listgrid.append(temp)
                count=count+1
       
        pending=m1.Marked_Officers.objects.filter(target_flag=1,item_no__in=items_pending, status_flag=3).values().order_by('-marked_no')
        for p in pending:
            # print(p)
            temp={}
            if m1.target_compliance.objects.filter(marked_no_id=p['marked_no']):
                temp['sr_no']=count
                item_desc=m1.Item_details.objects.filter(item_no=p['item_no_id']).values()
                temp['marked_no']=p['marked_no']
                if item_desc[0]['type']=='H':
                    temp['item_desc']=item_desc[0]['item_title']
                elif item_desc[0]['type']=='SH':
                    temp['item_desc']=item_desc[0]['observation']
                insp_det=m1.Inspection_details.objects.filter(inspection_no=item_desc[0]['inspection_no_id']).values()
                temp['inspection_no']=insp_det[0]['inspection_no']
                temp['inspection_note_no']=insp_det[0]['inspection_note_no']




                t=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=p['marked_to_id']).values('designation')
                if len(t)!=0:
                    temp['assgnd_officer']=t[0]['designation']
                    temp['assgnd_officer_id']=p['marked_to_id']
                else:
                    temp['assgnd_officer']='NA'
                temp['inspected_on']=insp_det[0]['inspected_on'].strftime("%d/%m/%y") if insp_det[0]['inspected_on']!=None else 'NA'




                t1=m1.target_compliance.objects.filter(marked_no_id=p['marked_no']).values('target_date','status_flag','target_id','task_flag')
                temp['task_flag']=t1[0]['task_flag']
                temp['target_id']=t1[0]['target_id']
                temp['status_flag']=t1[0]['status_flag']
                today=datetime.today().strftime("%d/%m/%y")
                temp['target_date']=t1[0]['target_date'].strftime("%d/%m/%y") if t1[0]['target_date']!=None else 'NA'
                if temp['target_date']>today:
                    temp['time_left']=True
                else:
                    temp['time_left']=False
                temp['reply_on']=p['reply_on'].strftime("%d/%m/%y") if p['reply_on']!=None else 'NA'




                status=m1.target_status.objects.filter(target_no_id=t1[0]['target_id']).values('reply_on', 'status_flag').order_by('-reply_on')
                status_flags={1: 'Started', 2: 'On Track', 3: 'Partially Completed', 4: 'Delayed', 5: 'Completed',0:'Not Yet Started'}
                status_flags_comply={1: 'Pending', 2: 'Rejected', 4:'Pending'}




                if temp['status_flag'] ==0:
                    temp['reply_on']='NA'
                    temp['status']='Pending'








                # elif temp['status_flag'] == 2:
                #     if len(status):
                #         temp['reply_on']=status[0]['reply_on'].strftime("%d/%m/%y") if status[0]['reply_on']!=None else 'NA'
                #         temp['status']='Rejected'




                elif temp['status_flag'] in [1,2,4]:
                    if len(status):
                        temp['reply_on']=status[0]['reply_on'].strftime("%d/%m/%y") if status[0]['reply_on']!=None else 'NA'
                        temp['status']=status_flags[status[0]['status_flag']]
                    else:
                        temp['reply_on']='NA'
                        temp['status']=status_flags_comply[temp['status_flag']]




                if temp['status_flag']==3:
                    completed_list.append(temp)
                else:
                    listgrid.append(temp)
                count=count+1
       
        listgrid = sorted(listgrid, key=lambda k: k['target_date'])
           
       
        list1=models.railwayLocationMaster.objects.filter(location_type_desc__in=['RAILWAY BOARD', 'PRODUCTION UNIT', 'HEAD QUATER', 'PSU', 'INSTITUTE']).values('location_code').distinct().order_by('location_code')
        list2=[]
        for i in list1:
            list2.append(i['location_code'])
        list3=models.railwayLocationMaster.objects.filter(location_type_desc__in=['DIVISION','WORKSHOP', 'STORE', 'CONSTRUCTION', 'OFFICE']).distinct().values('location_code', 'location_type').order_by('location_code')
        list4=[]
        for i in list3:
            list4.append({'location_code': i['location_code'], 'location_type': i['location_type']})  
        list5=models.departMast.objects.all().values('department_name').distinct().order_by('department_name')
        list6=[]
        for i in list5:
            list6.append(i['department_name'])
        pclevel=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=desigid).values().order_by())




        designation=models.Level_Desig.objects.exclude(delete_flag=True).exclude(Q(empno_id=None),designation_code=desigid).filter(pc7_levelmin__lte=pclevel[0]['pc7_levelmin'],rly_unit=rly_unit_code).distinct().values('designation').order_by('-pc7_levelmin')
        officr=[]
        for l in listgrid:
            if l['assgnd_officer'] not in officr and l['assgnd_officer']!='NA':
                officr.append(l['assgnd_officer'])
        print()


        context={
            'zone':list2 ,
            'division':list4,
            'dept':list6,
            'listgrid':listgrid,
            'completed_list':completed_list,
            'desig':designation,
            'designation':designation,
            'officr':officr,
            'rly_code':rly_code,
            'div_code':div_code,
        }
        return render(request,"assigned_task_module.html",context)
    # except Exception as e:
    #     try:
    #         m1.error_Table.objects.create(fun_name="assigned_task_module",user_id=request.user,err_details=str(e))
    #     except:
    #         print("Internal Error!!!")
    #     return render(request, "errorspage.html", {})


def pending_reply_ajax(request):
    if request.method == 'GET' and request.is_ajax():
        target_id = request.GET.get('item_no')
        str_type = request.GET.get('str')
        compliance = request.GET.get('compliance')
        status = request.GET.get('status')
        print(compliance,status, "hello")
        list1=[]
        if str_type == 'save':
            comp=m1.target_compliance.objects.filter(target_id=target_id).update(status_flag=1,reply_sent=compliance,reply_on=datetime.now())
        elif str_type == 'submit':
            if status=='5':
                comp=m1.target_compliance.objects.filter(target_id=target_id).update(status_flag=3,reply_sent=compliance,reply_on=datetime.now())
            else:
                comp=m1.target_compliance.objects.filter(target_id=target_id).update(status_flag=4,reply_sent=compliance,reply_on=datetime.now())          
           
            # target_stat= m1.target_status.objects.filter(target_no_id=target_id).values()
            m1.target_status.objects.create(status_flag=status,reply_sent=compliance,reply_on=datetime.now(),target_no_id=target_id)
        elif str_type == 'reject':
            m1.target_compliance.objects.filter(target_id=target_id).update(status_flag=2,remark=compliance,rejected_on=datetime.now())
            comp=m1.target_status.objects.filter(target_no_id=target_id).values('status_id').order_by('-reply_on')[0]['status_id']
            # print(comp)
            m1.target_status.objects.filter(target_no_id=target_id, status_id=comp).update(rejected_on=datetime.now(),remark=compliance)

       
       




        context={}  
        return JsonResponse(context, safe=False)
    return JsonResponse({'success': False})


def add_new_task(request):
    # try:
        empnox = models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID=None).filter(Q(official_email_ID=request.user)| Q(official_email_ID=request.user.guest_email) | Q(official_email_ID=request.user.email), empno__isnull=False)
        if empnox:
            empno = empnox[0].empno_id
            desig = empnox[0].designation_code
        else:
            messages.error(request, 'You are not authorize to create DO letters. Please contact to admin')

        rly_code=models.Level_Desig.objects.filter(designation_code=desig)[0].rly_unit.location_code
        rly_unit_code=models.Level_Desig.objects.filter(designation_code=desig)[0].rly_unit.rly_unit_code
        parent_loc=models.Level_Desig.objects.filter(designation_code=desig)[0].rly_unit.parent_location_code
        parent_loc_id=models.Level_Desig.objects.filter(designation_code=desig)[0].rly_unit.parent_rly_unit_code
        div_code=rly_code
        div_unit_code=rly_unit_code
        HQ=True
        if parent_loc!='RB':
            div_code=rly_code
            div_unit_code=rly_unit_code
            rly_code=parent_loc
            rly_unit_code=parent_loc_id
            HQ=False

        if HQ:
            officers=list(models.Level_Desig.objects.exclude(delete_flag=True,designation_code=desig).filter(Q(rly_unit_id=div_unit_code) 
            | Q(rly_unit__parent_location_code=rly_code)).values('designation', 'designation_code').order_by('designation'))
        else:
            officers=list(models.Level_Desig.objects.exclude(delete_flag=True,designation_code=desig).filter(rly_unit_id=div_unit_code).values('designation', 'designation_code').order_by('designation'))
        print(len(officers),"hello cris",div_unit_code,rly_unit_code)
        if request.method == 'POST':  
            subject=request.POST.get('subject')
            action_by= request.POST.get('action_by')
            init_date=request.POST.get('init_date')
            if init_date:
                init_date = datetime.strptime(init_date, '%d/%m/%y').strftime('%Y-%m-%d')
            deadline=request.POST.get('deadline')
            if deadline:
                deadline = datetime.strptime(deadline, '%d/%m/%y').strftime('%Y-%m-%d')
            status=request.POST.get('status')
            print(subject,action_by,init_date,deadline,status)
           
            values=m1.target_compliance.objects.create(
                target_date=deadline,
                status_flag=0,
                pending_with_id=action_by,
                assigned_by_id=desig,
                init_date=init_date,
                task_flag=2,
                task_descp=subject
            )
            m1.target_status.objects.create(
                target_no=values,
                status_flag=status,
            )
            if values:
                messages.info(request, 'Task added successfully')
                return redirect('/assigned_task_module/')
        context = {'officers':officers}
        return render(request,'create_task.html',context)






# def NewInspectionReport(request):
#     if request.method == 'GET':
#         list1=models.railwayLocationMaster.objects.filter(Q(location_type_desc='RAILWAY BOARD')|Q(location_type_desc='HEAD QUATER')|Q(location_type_desc='PRODUCTION UNIT')|Q(location_type_desc='PSU')|Q(location_type_desc='INSTITUTE')).values('location_code').order_by('location_code')
#         list2=[]
#         for i in list1:
#             # print(i['location_code'],'_________')
#             list2.append(i['location_code'])
        
        
#         list3=models.railwayLocationMaster.objects.filter(Q(location_type_desc='DIVISION')|Q(location_type_desc='WORKSHOP')|Q(location_type_desc='OFFICE')|Q(location_type_desc='STORE')|Q(location_type_desc='CONSTRUCTION')).values('location_code','location_type').order_by('location_code')
#         list4=[]
#         for i in list3:
#             # print(i['location_code'],'_________')
#             list4.append({'location_code':i['location_code'],'location_type':i['location_type']})  

#         # print("list4",list4)
            
            
#         list5=models.departMast.objects.all().values('department_name').order_by('department_name')
#         list6=[]
#         for i in list5:
#             # print(i['department_name'],'_________')
#             list6.append(i['department_name'])
        
#         list7=models.Level_Desig.objects.exclude(delete_flag=True).all().values('designation').order_by('designation')
#         list8=[]
#         for i in list7:
#             # print(i['designation'],'_________')
#             list8.append(i['designation'])
        
#         # saud faisal changes
#         puproduction_type = models.railwayLocationMaster.objects.filter(location_type__in = ['ZR','PU']).values('location_code').order_by('location_code')
#         print("list2222222222222",list2)
#         app_date = date(2022,9,11)
#         app_date = app_date.strftime('%d/%m/%y')

#         curr_date = date.today()
#         curr_date = curr_date.strftime('%d/%m/%y')
#         print(app_date,curr_date)
#         new_date = app_date+' to '+curr_date
#         context={'zone':list2, 'division':list4, 'desi':list8, 'puproduction_type':puproduction_type, "new_date":new_date}

#         return render(request, 'new_inspection_report.html' ,context)
#     return render(request,'new_inspection_report.html')


# def NewInspectionReport(request):
#     if request.method == 'GET':
#         list1=models.railwayLocationMaster.objects.filter(Q(location_type_desc='RAILWAY BOARD')|Q(location_type_desc='HEAD QUATER')|Q(location_type_desc='PRODUCTION UNIT')|Q(location_type_desc='PSU')|Q(location_type_desc='INSTITUTE')).values('location_code').order_by('location_code')
#         list2=[]
#         for i in list1:
#             # print(i['location_code'],'_________')
#             list2.append(i['location_code'])
        
        
#         list3=models.railwayLocationMaster.objects.filter(Q(location_type_desc='DIVISION')|Q(location_type_desc='WORKSHOP')|Q(location_type_desc='OFFICE')|Q(location_type_desc='STORE')|Q(location_type_desc='CONSTRUCTION')).values('location_code','location_type').order_by('location_code')
#         list4=[]
#         for i in list3:
#             # print(i['location_code'],'_________')
#             list4.append({'location_code':i['location_code'],'location_type':i['location_type']})  

#         # print("list4",list4)
            
            
#         list5=models.departMast.objects.all().values('department_name').order_by('department_name')
#         list6=[]
#         for i in list5:
#             # print(i['department_name'],'_________')
#             list6.append(i['department_name'])
        
#         list7=models.Level_Desig.objects.exclude(delete_flag=True).all().values('designation').order_by('designation')
#         list8=[]
#         for i in list7:
#             # print(i['designation'],'_________')
#             list8.append(i['designation'])
        
#         # saud faisal changes
#         puproduction_type = models.railwayLocationMaster.objects.filter(location_type__in = ['ZR','PU']).values('location_code').order_by('location_code')
#         print("list2222222222222",list2)
#         app_date = date(2022,9,11)
#         app_date = app_date.strftime('%d/%m/%y')

#         curr_date = date.today()
#         curr_date = curr_date.strftime('%d/%m/%y')
#         print(app_date,curr_date)
#         new_date = app_date+' to '+curr_date
#         context={'zone':list2, 'division':list4, 'desi':list8, 'puproduction_type':puproduction_type, "new_date":new_date}

#         return render(request, 'new_inspection_report.html' ,context)
#     return render(request,'new_inspection_report.html')

def NewInspectionReport(request):
    if request.method == 'GET':
        list1=models.railwayLocationMaster.objects.filter(Q(location_type_desc='RAILWAY BOARD')|Q(location_type_desc='HEAD QUATER')|Q(location_type_desc='PRODUCTION UNIT')|Q(location_type_desc='PSU')|Q(location_type_desc='INSTITUTE')).values('rly_unit_code','location_code').order_by('location_code')
        list2=[]
        for i in list1:
            # print(i['location_code'],'_________')
            list2.append({'rly_unit_code': i['rly_unit_code'],'location_code': i['location_code']})
        # print("rail ", list2)
        
        list3=models.railwayLocationMaster.objects.filter(Q(location_type_desc='DIVISION')|Q(location_type_desc='WORKSHOP')|Q(location_type_desc='OFFICE')|Q(location_type_desc='STORE')|Q(location_type_desc='CONSTRUCTION')).values('rly_unit_code','location_code','location_type').order_by('location_code')
        list4=[]
        for i in list3:
            # print(i['location_code'],'_________')
            list4.append({'rly_unit_code':i['rly_unit_code'],'location_code':i['location_code'],'location_type':i['location_type']})  

        # print("list4",list4)
            
            
        # list5=models.departMast.objects.all().values('department_code','department_name').order_by('department_name')
        # list6=[]
        # for i in list5:
        #     # print(i['department_name'],'_________')
        #     list6.append({i['department_code'],i['department_name']})
        
        list7=models.Level_Desig.objects.exclude(delete_flag=True).all().values('designation_code','designation').order_by('designation')
        list8=[]
        for i in list7:
            # print(i['designation'],'_________')
            list8.append({'designation_code': i['designation_code'],'designation': i['designation']})
        
        # saud faisal changes
        # puproduction_type = models.railwayLocationMaster.objects.filter(location_type__in = ['ZR','PU']).values('location_code').order_by('location_code')
        # print("list2222222222222",list2)
        app_date = date(2022,5,6)
        app_date = app_date.strftime('%d/%m/%y')

        curr_date = date.today()
        curr_date = curr_date.strftime('%d/%m/%y')
        # print(app_date,curr_date)
        new_date = app_date+' to '+curr_date
        context={'zone':list2, 'division':list4, 'desi':list8, "new_date":new_date}
        # context={'zone':list2, 'division':list4, 'desi':list8, 'puproduction_type':puproduction_type, "new_date":new_date}

        return render(request, 'new_inspection_report.html' ,context)
    return render(request,'new_inspection_report.html')


from django.db import connection
# def fetch_desig_ajax_officerwise_all(request):
#     # try:
#         if request.method == 'GET' and request.is_ajax():

#             location_code = json.loads(request.GET.get("location_code"))
#             location_type = json.loads(request.GET.get("location_type"))
#             designation = json.loads(request.GET.get("designation"))
#             created_on = request.GET.get("created_on")
#             # print('mydatas4444444',location_code,location_type,designation,created_on)
#             l=[]
#             if designation:
#                 l = designation
#                 # print("mydesigs",l)
#             elif location_type:
#                 # DIVISION WISE
                
#                 for x in location_type:
#                     x1=x.split('-')
#                     ins=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation__icontains=x1[0]).values('designation').distinct('designation'))
#                     #print(ins,'==============================================')
#                     for i in ins:
#                         l.append(i['designation'])
#                 # END DIVISION WISE
#             elif location_code:
#                 # RAILWAYS WISE
#                 # grou=json.loads(request.GET.get("group"))
                
#                 # ins=list(models.railwayLocationMaster.objects.filter(location_type='DIV',parent_location_code=grou).values('location_code', 'rly_unit_code'))
        
#                 ins=list(models.railwayLocationMaster.objects.filter(Q(location_type_desc='DIVISION')|Q(location_type_desc='WORKSHOP')|Q(location_type_desc='STORE')|Q(location_type_desc='CONSTRUCTION'),parent_location_code__in=location_code).values('location_code', 'location_type'))
    
#                 l=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(rly_unit_id__in=(models.railwayLocationMaster.objects.filter(parent_location_code__in=location_code).values('rly_unit_code'))).values_list('designation',flat=True).distinct('designation'))
#                 print("insdesig",l)

#                 # END RAILWAY WISE
#             else:
#                 list7=models.Level_Desig.objects.exclude(delete_flag=True).all().values('designation').order_by('designation')
#                 list8=[]
#                 for i in list7:
#                     # print(i['designation'],'_________')
#                     list8.append(i['designation'])
#                     l = list8
#             print("mylist5555",l)


#             ''' inspection report '''
#             total_total_inspection = 0
#             total_total_closed = 0
#             total_total_open = 0
#             total_total_item = 0
#             total_total_item_pending = 0
#             total_total_item_overdue = 0
#             total_total_per_complied = 0

#             ''' inspection report mom '''
#             mom_total_total_inspection = 0
#             mom_total_total_closed = 0
#             mom_total_total_open = 0
#             mom_total_total_item = 0
#             mom_total_total_item_pending = 0
#             mom_total_total_item_overdue = 0
#             mom_total_total_per_complied = 0


#             ''' Do letter data '''
#             do_total_total_open = 0
#             do_total_total_pending = 0
#             do_total_total_closed = 0 
#             do_total_total_per_complied = 0

#             ''' TASK TRACKER '''
#             task_total_total_open = 0
#             total_total_task_assign = 0
#             total_total_task_completed = 0 
#             task_total_total_per_complied = 0

#             my_data = []
#             ajaxname = request.GET.get('ajaxname')

#             if ajaxname == 'MarkedByOfficer':
#                 print("inside MarkedByOfficer")
#                 # DATA FROM AJAX MarkedByOfficer
#                 if created_on:
#                     print("inside else")
#                     for i in l:
#                         print(i)
                        
#                         desig_code = models.Level_Desig.objects.exclude(delete_flag=True).filter(designation = i)[0].designation_code

#                         ###############################3 INSPECTION REPORT ##################################
#                         # total complaince
#                         cursor = connection.cursor()
#                         cursor.execute(''' SELECT count(distinct(A.inspection_no)) total_comp
#                         FROM public.inspects_inspection_details A,
#                         public.inspects_marked_officers B,
#                         public.inspects_item_details D, 
#                         public.myadmin_level_desig E
#                         where B.item_no_id=D.item_no and B.marked_to_id = E.designation_code and B.marked_to_id = %s
#                         and B.status_flag != 0 and A.inspection_no = D.inspection_no_id ''',[desig_code])
#                         total_inspection = cursor.fetchall()
#                         total_total_inspection +=total_inspection[0][0]
#                         cursor.close()

#                         # total_closed
#                         cursor = connection.cursor()
#                         cursor.execute(''' SELECT count(distinct(A.inspection_no)) total_closed
#                         FROM public.inspects_inspection_details A,
#                         public.inspects_marked_officers B,
#                         public.inspects_item_details D, 
#                         public.myadmin_level_desig E
#                         where B.item_no_id=D.item_no and B.marked_to_id = E.designation_code and B.marked_to_id =%s
#                         and B.status_flag = 4 and A.inspection_no = D.inspection_no_id ''',[desig_code])
#                         total_closed = cursor.fetchall()
#                         total_total_closed +=total_closed[0][0]

#                         # pending
#                         cursor = connection.cursor()
#                         cursor.execute(''' SELECT count(distinct(A.inspection_no)) pending
#                         FROM public.inspects_inspection_details A,
#                         public.inspects_marked_officers B,
#                         public.inspects_item_details D, 
#                         public.myadmin_level_desig E
#                         where B.item_no_id=D.item_no and B.marked_to_id = E.designation_code and B.marked_to_id = %s
#                         and B.status_flag in (1,2,3) and A.inspection_no = D.inspection_no_id ''',[desig_code])
#                         total_open = cursor.fetchall()
#                         total_total_open +=total_open[0][0]
#                         # print("total_inspection7777777777total_open",total_open)

#                         # total_item
#                         cursor = connection.cursor()
#                         cursor.execute(''' SELECT count(D.item_no)
#                         FROM public.inspects_inspection_details A,
#                         public.inspects_marked_officers B,
#                         public.inspects_item_details D, 
#                         public.myadmin_level_desig E
#                         where B.item_no_id=D.item_no and B.marked_to_id = E.designation_code and B.marked_to_id = %s
#                         and A.inspection_no = D.inspection_no_id and
#                         D.status_flag >0 ''',[desig_code])
#                         total_item = cursor.fetchall()
#                         total_total_item +=total_item[0][0]
       

#                         # total_item_pending
#                         cursor = connection.cursor()
#                         cursor.execute(''' SELECT count(D.item_no)
#                         FROM public.inspects_inspection_details A,
#                         public.inspects_marked_officers B,
#                         public.inspects_item_details D, 
#                         public.myadmin_level_desig E
#                         where B.item_no_id=D.item_no and B.marked_to_id = E.designation_code and B.marked_to_id = %s
#                         and A.inspection_no = D.inspection_no_id and
#                         D.status_flag  in (1,2,3)  ''',[desig_code])
#                         total_item_pending = cursor.fetchall()
#                         total_total_item_pending +=total_item_pending[0][0]
                     
#                         # total_item_overdue
#                         cursor = connection.cursor()
#                         cursor.execute(''' SELECT count(*)
#                         FROM public.inspects_inspection_details A,
#                         public.inspects_marked_officers B,
#                         public.inspects_item_details D, 
#                         public.myadmin_level_desig E
#                         where B.item_no_id=D.item_no and B.marked_to_id = E.designation_code and B.marked_to_id = %s
#                         and A.inspection_no = D.inspection_no_id and
#                         A.status_flag between 1 and 4 and D.status_flag between 1 and 3 and
#                         D.target_date < now() ''',[desig_code])
#                         total_item_overdue = cursor.fetchall()
#                         total_total_item_overdue +=total_item_overdue[0][0]

#                         # %complied 
#                         try:
#                             per_complied = ((total_item-total_item_pending)/total_item)*100
                            
#                         except:
#                             per_complied = 0
                        
#                         # ####################### MOM INSPECTION REPORT #########################################
#                         # total complaince
#                         cursor = connection.cursor()
#                         cursor.execute(''' SELECT count(distinct(A.insp_no)) total_comp
#                         FROM public.mom_insp_details A,
#                         public.mom_marked_members B,
#                         public.mom_item_details D, 
#                         public.myadmin_level_desig E
#                         where B.item_no_id=D.item_no and B.marked_to_id = E.designation_code and B.marked_to_id = %s
#                         and B.status_flag != 0 and A.insp_no = D.insp_no_id ''',[desig_code])
#                         mom_total_inspection = cursor.fetchall()
#                         mom_total_total_inspection +=mom_total_inspection[0][0]
#                         cursor.close()

#                         # total_closed
#                         cursor = connection.cursor()
#                         cursor.execute(''' SELECT count(distinct(A.insp_no)) total_closed
#                         FROM public.mom_insp_details A,
#                         public.mom_marked_members B,
#                         public.mom_item_details D, 
#                         public.myadmin_level_desig E
#                         where B.item_no_id=D.item_no and B.marked_to_id = E.designation_code and B.marked_to_id = %s
#                         and B.status_flag = 4 and A.insp_no = D.insp_no_id''',[desig_code])
#                         mom_total_closed = cursor.fetchall()
#                         mom_total_total_closed +=mom_total_closed[0][0]

#                         # pending
#                         cursor = connection.cursor()
#                         cursor.execute(''' SELECT count(distinct(A.insp_no)) pending
#                         FROM public.mom_insp_details A,
#                         public.mom_marked_members B,
#                         public.mom_item_details D, 
#                         public.myadmin_level_desig E
#                         where B.item_no_id=D.item_no and B.marked_to_id = E.designation_code and B.marked_to_id = %s
#                         and B.status_flag in (1,2) and A.insp_no = D.insp_no_id ''',[desig_code])
#                         mom_total_open = cursor.fetchall()
#                         mom_total_total_open +=mom_total_open[0][0]
#                         # print("total_inspection7777777777total_open",mom_total_open)

#                         # total_item
#                         cursor = connection.cursor()
#                         cursor.execute(''' SELECT count(*) FROM public.mom_insp_details A,
#                         public.mom_marked_members B,
#                         public.mom_item_details D, 
#                         public.myadmin_level_desig E
#                         where B.item_no_id=D.item_no and B.marked_to_id = E.designation_code and B.marked_to_id = %s
#                         and A.insp_no = D.insp_no_id and
#                         D.status_flag >0''',[desig_code])
#                         mom_total_item = cursor.fetchall()
#                         mom_total_total_item +=mom_total_item[0][0]
       

#                         # total_item_pending
#                         cursor = connection.cursor()
#                         cursor.execute(''' SELECT count(*) FROM public.mom_insp_details A,
#                         public.mom_marked_members B,
#                         public.mom_item_details D, 
#                         public.myadmin_level_desig E
#                         where B.item_no_id=D.item_no and B.marked_to_id = E.designation_code and B.marked_to_id = %s
#                         and A.insp_no = D.insp_no_id and
#                         D.status_flag  in (1,2,3)    ''',[desig_code])
#                         mom_total_item_pending = cursor.fetchall()
#                         mom_total_total_item_pending +=mom_total_item_pending[0][0]
                     
#                         # total_item_overdue
#                         cursor = connection.cursor()
#                         cursor.execute(''' SELECT count(*) FROM public.mom_insp_details A,
#                         public.mom_marked_members B,
#                         public.mom_item_details D, 
#                         public.myadmin_level_desig E
#                         where B.item_no_id=D.item_no and B.marked_to_id = E.designation_code and B.marked_to_id = %s
#                         and A.insp_no = D.insp_no_id and
#                         D.status_flag  in (1,2,3)   ''',[desig_code])
#                         mom_total_item_overdue = cursor.fetchall()
#                         mom_total_total_item_overdue +=mom_total_item_overdue[0][0]

#                         # %complied 
#                         try:
#                             mom_per_complied = ((mom_total_item-mom_total_item_pending)/mom_total_item)*100
                            
#                         except:
#                             mom_per_complied = 0


#                         # DO LETTER 
                        
#                         # TOTAL OPEN
#                         do_total_open=m4.do_act.objects.filter(desig_id_id = desig_code).count()
#                         do_total_total_open += do_total_open

#                         # TOTAL PENDING
#                         do_total_pending=m4.do_act.objects.filter(desig_id_id = desig_code,status_flag=False).count()
#                         do_total_total_pending += do_total_pending

#                         # TOTAL CLOSED
#                         do_total_closed=m4.do_act.objects.filter(desig_id_id = desig_code,status_flag=True).count()
#                         do_total_total_closed += do_total_closed
#                         # per complied
#                         try:
#                             do_per_complied = (do_total_closed / do_total_open) * 100
#                         except:
#                             do_per_complied = 0

                        
#                         ''' TASK TRACKER '''
#                         # total task tracker assign data
#                         # task_assigned_insp = m1.target_compliance.objects.filter(marked_no__item_no__inspection_no__inspection_officer__rly_unit__location_code = i, task_flag=1).exclude(status_flag = 3).count()
#                         # task_assigned_tracker = m1.target_compliance.objects.filter(assigned_by__rly_unit__location_code = i, task_flag=2).exclude(status_flag = 3).count()
#                         task_assigned = m1.target_compliance.objects.filter(pending_with__designation_code = desig_code).exclude(status_flag = 3).count()
#                         total_total_task_assign += task_assigned

#                         # total task tracker completed data apeksha:7005
#                         # task_completed_insp = m1.target_compliance.objects.filter(marked_no__item_no__inspection_no__inspection_officer__rly_unit__location_code = i, task_flag=1,status_flag = 3).count()
#                         task_completed = m1.target_compliance.objects.filter(pending_with__designation_code = desig_code, status_flag = 3).count()
#                         # task_completed = task_completed_insp + task_completed_tracker
#                         total_total_task_completed += task_completed
                        
#                         # total task tracker open data
#                         totol_open = task_assigned+task_completed
#                         task_total_total_open += totol_open

#                         try:
#                             task_per_complied = (task_completed / totol_open) * 100
#                         except:
#                             task_per_complied = 0



#                         my_data.append({'rly':i,"total_inspection":total_inspection,"total_closed":total_closed,
#                         "total_open":total_open,"total_item":total_item,"total_item_pending":total_item_pending,
#                         'total_item_overdue':total_item_overdue,"per_complied":per_complied,"mom_total_inspection":mom_total_inspection,"mom_total_closed":mom_total_closed,
#                         "mom_total_open":mom_total_open,"mom_total_item":mom_total_item,"mom_total_item_pending":mom_total_item_pending,
#                         'mom_total_item_overdue':mom_total_item_overdue,"mom_per_complied":mom_per_complied,'do_total_open':do_total_open,
#                         'do_total_pending':do_total_pending,'do_total_closed':do_total_closed,
#                         'do_per_complied':do_per_complied,'task_assigned':task_assigned,"task_completed":task_completed,
#                         'totol_open':totol_open,'task_per_complied':task_per_complied})
                
#                 try:
                
#                     total_total_per_complied = ((total_total_item-total_total_item_pending)/total_total_item)*100
#                 except:
                
#                     total_total_per_complied = 0
#                 try:
                
#                     mom_total_total_per_complied = ((mom_total_total_item-mom_total_total_item_pending)/mom_total_total_item)*100
#                 except:
                
#                     mom_total_total_per_complied = 0
                
#                 try:
                
#                     do_total_total_per_complied = ((do_total_total_closed)/do_total_total_open)*100
#                 except:
                
#                     do_total_total_per_complied = 0
#                 try:
                
#                     task_total_total_per_complied = ((total_total_task_completed)/task_total_total_open)*100
#                 except:
                
#                     task_total_total_per_complied = 0

#                 # print("mydata",total_total_item_overdue)
#                 return JsonResponse({'rly_list':my_data,'total_total_inspection':total_total_inspection,"total_total_closed":total_total_closed,
#                 "total_total_open":total_total_open,"total_total_item":total_total_item,"total_total_item_pending":total_total_item_pending,
#                 "total_total_item_overdue":total_total_item_overdue,"total_total_per_complied":total_total_per_complied,'mom_total_total_inspection':mom_total_total_inspection,"mom_total_total_closed":mom_total_total_closed,
#                 "mom_total_total_open":mom_total_total_open,"mom_total_total_item":mom_total_total_item,"mom_total_total_item_pending":mom_total_total_item_pending,
#                 "mom_total_total_item_overdue":mom_total_total_item_overdue,"mom_total_total_per_complied":mom_total_total_per_complied,'do_total_total_open':do_total_total_open,
#                 'do_total_total_pending':do_total_total_pending,'do_total_total_closed':do_total_total_closed,
#                 'do_total_total_per_complied':do_total_total_per_complied,"task_total_total_open":task_total_total_open,
#                 'total_total_task_assign':total_total_task_assign,'total_total_task_completed':total_total_task_completed,
#                 'task_total_total_per_complied':task_total_total_per_complied}, safe=False)
            
#             else:
#                 # DATA FROM AJAX issues By Officer
#                 if created_on:
#                     datefrom = datetime.strptime(created_on.split('to')[0].strip(),'%d/%m/%y')
#                     dateto = datetime.strptime(created_on.split('to')[1].strip(),'%d/%m/%y')
#                     for i in l:
#                         desig_code = models.Level_Desig.objects.exclude(delete_flag=True).filter(designation = i)[0].designation_code

#                         # total inspection notes (passed)
#                         cursor = connection.cursor()
#                         cursor.execute(''' SELECT count( DISTINCT A.inspection_no) total_inspection
#                         FROM public.inspects_inspection_details A,
#                         public.myadmin_level_desig B
#                         where A.inspection_officer_id = B.designation_code and A.status_flag!=0 and
#                                 A.inspection_officer_id = %s and
#                                 (A.inspected_on >= %s and A.inspected_on <= %s) ''',[desig_code,datefrom,dateto])
#                         total_inspection = cursor.fetchall()
#                         total_total_inspection +=total_inspection[0][0]
#                         cursor.close()
#                         # print("total_inspection45",total_inspection[0][0])

#                         # total_closed (passed)
#                         cursor = connection.cursor()
#                         cursor.execute(''' SELECT count( DISTINCT A.inspection_no) total_closed
#                         FROM public.inspects_inspection_details A,
#                         public.myadmin_level_desig B
                    
#                         where A.inspection_officer_id = B.designation_code and A.status_flag=4 and
#                                 A.inspection_officer_id = %s and
#                                 (A.inspected_on >= %s and A.inspected_on <= %s) ''',[desig_code,datefrom,dateto])
#                         total_closed = cursor.fetchall()
#                         total_total_closed +=total_closed[0][0]
#                         cursor.close()

#                         # pending inspection report (passed)
#                         cursor = connection.cursor()
#                         cursor.execute(''' SELECT count( DISTINCT A.inspection_no) total_open
#                         FROM public.inspects_inspection_details A,
#                         public.myadmin_level_desig B
                    
#                         where A.inspection_officer_id = B.designation_code and A.status_flag between 1 and 3 and
#                                 A.inspection_officer_id = %s and
#                                 (A.inspected_on >= %s and A.inspected_on <= %s) ''',[desig_code,datefrom,dateto])
#                         total_open = cursor.fetchall()
#                         total_total_open +=total_open[0][0]
#                         cursor.close()

#                         # total_item
#                         cursor = connection.cursor()
                        
#                         cursor.execute(''' SELECT count( distinct B.item_no_id) total_item
#                         FROM public.inspects_inspection_details A,
#                         public.inspects_marked_officers B,
                    
#                         public.inspects_item_details D
#                         where  A.status_flag>0 and
#                             B.item_no_id=D.item_no and
                                
#                         A.inspection_no = D.inspection_no_id and D.status_flag >0 and A.inspection_officer_id = %s and
#                                 (A.inspected_on >= %s and A.inspected_on <= %s) ''',[desig_code,datefrom,dateto])

                        
#                         total_item = cursor.fetchall()
#                         total_total_item +=total_item[0][0]
#                         cursor.close()

#                         # total_item_pending
#                         cursor = connection.cursor()
#                         cursor.execute(''' SELECT count( distinct B.item_no_id) total_item
#                         FROM public.inspects_inspection_details A,
#                         public.inspects_marked_officers B,
                    
#                         public.inspects_item_details D
#                         where  A.status_flag between 1 and 3 and
#                             B.item_no_id=D.item_no and
                            
#                         A.inspection_no = D.inspection_no_id and D.status_flag between 1 and 3 and A.inspection_officer_id = %s and
#                                 (A.inspected_on >= %s and A.inspected_on <= %s) ''',[desig_code,datefrom,dateto])
#                         total_item_pending = cursor.fetchall()
#                         total_total_item_pending +=total_item_pending[0][0]
#                         cursor.close()


#                         # total_item_overdue
#                         cursor = connection.cursor()
#                         cursor.execute(''' SELECT count( distinct B.item_no_id) total_item
#                         FROM public.inspects_inspection_details A,
#                         public.inspects_marked_officers B,
                    
#                         public.inspects_item_details D
#                         where B.item_no_id=D.item_no and A.status_flag between 1 and 4 and
                                
#                         A.inspection_no = D.inspection_no_id and D.status_flag between 1 and 3 and
#                                 D.target_date < now() and A.inspection_officer_id = %s and
#                                 (A.inspected_on >= %s and A.inspected_on <= %s) ''',[desig_code,datefrom,dateto])
                        
#                         total_item_overdue = cursor.fetchall()
#                         total_total_item_overdue +=total_item_overdue[0][0]
#                         cursor.close()

#                         # %complied 
#                         try:
#                             per_complied = ((total_item[0][0]-total_item_pending[0][0])/total_item[0][0])*100
                            
#                         except:
#                             per_complied = 0


#                         # ####################### MOM INSPECTION REPORT #########################################
#                         # total complaince
#                         cursor = connection.cursor()
#                         cursor.execute(''' SELECT count( DISTINCT A.insp_no) total_inspection
#                         FROM public.mom_insp_details A,
#                         public.myadmin_level_desig B
#                         where A.mom_officer_id = B.designation_code and A.status_flag!=0 and
#                         A.mom_officer_id = %s and (A.mom_date >= %s and A.mom_date <= %s) ''',[desig_code,datefrom,dateto])
#                         mom_total_inspection = cursor.fetchall()
#                         mom_total_total_inspection +=mom_total_inspection[0][0]
#                         cursor.close()

#                         # total_closed
#                         cursor = connection.cursor()
#                         cursor.execute(''' SELECT count( DISTINCT A.insp_no) total_closed
#                         FROM public.mom_insp_details A,
#                         public.myadmin_level_desig B
#                         where A.mom_officer_id = B.designation_code and A.status_flag=4 and
#                         A.mom_officer_id = %s and (A.mom_date >= %s and A.mom_date <= %s)  ''',[desig_code,datefrom,dateto])
#                         mom_total_closed = cursor.fetchall()
#                         mom_total_total_closed +=mom_total_closed[0][0]

#                         # pending
#                         cursor = connection.cursor()
#                         cursor.execute('''  SELECT count( DISTINCT A.insp_no) total_open
#                         FROM public.mom_insp_details A,
#                         public.myadmin_level_desig B
                    
#                         where A.mom_officer_id = B.designation_code and A.status_flag between 1 and 3 and
#                         A.mom_officer_id = %s and (A.mom_date >= %s and A.mom_date <= %s) ''',[desig_code,datefrom,dateto])
#                         mom_total_open = cursor.fetchall()
#                         mom_total_total_open +=mom_total_open[0][0]
#                         # print("total_inspection7777777777total_open",mom_total_open)

#                         # total_item
#                         cursor = connection.cursor()
#                         cursor.execute(''' SELECT count( distinct B.item_no_id) total_item
#                         FROM public.mom_insp_details A,
#                         public.mom_marked_members B,
                    
#                         public.mom_item_details D
#                         where  A.status_flag>0 and
#                             B.item_no_id=D.item_no and
                                
#                         A.insp_no = D.insp_no_id and D.status_flag >0 and A.mom_officer_id = %s and (A.mom_date >= %s and A.mom_date <= %s) ''',[desig_code,datefrom,dateto])
#                         mom_total_item = cursor.fetchall()
#                         mom_total_total_item +=mom_total_item[0][0]
       

#                         # total_item_pending
#                         cursor = connection.cursor()
#                         cursor.execute(''' SELECT count( distinct B.item_no_id) total_item
#                         FROM public.mom_insp_details A,
#                             public.mom_marked_members B,
                        
#                         public.mom_item_details D
#                         where  A.status_flag between 1 and 3 and
#                             B.item_no_id=D.item_no and
                                
#                         A.insp_no = D.insp_no_id and D.status_flag between 1 and 3 and A.mom_officer_id = %s and (A.mom_date >= %s and A.mom_date <= %s)''',[desig_code,datefrom,dateto])
#                         mom_total_item_pending = cursor.fetchall()
#                         mom_total_total_item_pending +=mom_total_item_pending[0][0]
                     
#                         # total_item_overdue
#                         cursor = connection.cursor()
#                         cursor.execute(''' SELECT count( distinct B.item_no_id) total_item
#                         FROM public.mom_insp_details A,
#                             public.mom_marked_members B,
                        
#                         public.mom_item_details D
#                         where B.item_no_id=D.item_no and A.status_flag between 1 and 4 and
                                
#                         A.insp_no = D.insp_no_id and D.status_flag between 1 and 3 and
#                                 D.target_date < now() and A.mom_officer_id = %s and (A.mom_date >= %s and A.mom_date <= %s) ''',[desig_code,datefrom,dateto])
#                         mom_total_item_overdue = cursor.fetchall()
#                         mom_total_total_item_overdue +=mom_total_item_overdue[0][0]

#                         # %complied 
#                         try:
#                             mom_per_complied = ((mom_total_item-mom_total_item_pending)/mom_total_item)*100
                            
#                         except:
#                             mom_per_complied = 0
                        

                        
#                         # DO LETTER OFFICER WISE -----------------------------------------------------------
#                         # user = request.user
#                         dol=list(m4.do_upload.objects.filter(desig_id_id=desig_code).values_list('id',flat = True))
                        
#                         # TOTAL OPEN
#                         do_total_open=m4.do_act.objects.filter(id_upload__in = dol).count()
#                         do_total_total_open += do_total_open

#                         # TOTAL PENDING
#                         do_total_pending=m4.do_act.objects.filter(id_upload__in = dol,status_flag=False).count()
#                         do_total_total_pending += do_total_pending

#                         # TOTAL CLOSED
#                         do_total_closed=m4.do_act.objects.filter(id_upload__in = dol,status_flag=True).count()
#                         do_total_total_closed += do_total_closed
#                         # per complied
#                         try:
#                             do_per_complied = (do_total_closed / do_total_open) * 100
#                         except:
#                             do_per_complied = 0
#                         # do_total_total_per_complied +=do_per_complied
                        

#                         ''' TASK TRACKER '''
#                         # total task tracker assign data
#                         # task_assigned_insp = m1.target_compliance.objects.filter(marked_no__item_no__inspection_no__inspection_officer__rly_unit__location_code = i, task_flag=1).exclude(status_flag = 3).count()
#                         task_assigned = m1.target_compliance.objects.filter(assigned_by__designation_code = desig_code).exclude(status_flag = 3).count()
#                         # task_assigned = task_assigned_insp+task_assigned_tracker
#                         total_total_task_assign += task_assigned

#                         # total task tracker completed data
#                         # task_completed_insp = m1.target_compliance.objects.filter(marked_no__item_no__inspection_no__inspection_officer__rly_unit__location_code = i, task_flag=1,status_flag = 3).count()
#                         task_completed = m1.target_compliance.objects.filter(assigned_by__designation_code = desig_code, status_flag = 3).count()
#                         # task_completed = task_completed_insp + task_completed_tracker
#                         total_total_task_completed += task_completed
                        
#                         # total task tracker open data
#                         totol_open = task_assigned+task_completed
#                         task_total_total_open += totol_open

#                         try:
#                             task_per_complied = (task_completed / totol_open) * 100
#                         except:
#                             task_per_complied = 0

#                         my_data.append({'rly':i,"total_inspection":total_inspection[0][0],"total_closed":total_closed[0][0],
#                         "total_open":total_open[0][0],"total_item":total_item[0][0],"total_item_pending":total_item_pending[0][0],
#                         'total_item_overdue':total_item_overdue[0][0],"per_complied":per_complied,"mom_total_inspection":mom_total_inspection,"mom_total_closed":mom_total_closed,
#                         "mom_total_open":mom_total_open,"mom_total_item":mom_total_item,"mom_total_item_pending":mom_total_item_pending,
#                         'mom_total_item_overdue':mom_total_item_overdue,"mom_per_complied":mom_per_complied,'do_total_open':do_total_open,
#                         'do_total_pending':do_total_pending,'do_total_closed':do_total_closed,
#                         'do_per_complied':do_per_complied,'task_assigned':task_assigned,"task_completed":task_completed,
#                         'totol_open':totol_open,'task_per_complied':task_per_complied})
    
#                 try:
                
#                     total_total_per_complied = ((total_total_item-total_total_item_pending)/total_total_item)*100
#                 except:
                
#                     total_total_per_complied = 0
                
#                 try:
                
#                     mom_total_total_per_complied = ((mom_total_total_item-mom_total_total_item_pending)/mom_total_total_item)*100
#                 except:
                
#                     mom_total_total_per_complied = 0
                
#                 try:
                
#                     do_total_total_per_complied = ((do_total_total_closed)/do_total_total_open)*100
#                 except:
                
#                     do_total_total_per_complied = 0
#                 try:
                
#                     task_total_total_per_complied = ((total_total_task_completed)/task_total_total_open)*100
#                 except:
                
#                     task_total_total_per_complied = 0

#                 return JsonResponse({'rly_list':my_data,'total_total_inspection':total_total_inspection,"total_total_closed":total_total_closed,
#                 "total_total_open":total_total_open,"total_total_item":total_total_item,"total_total_item_pending":total_total_item_pending,
#                 "total_total_item_overdue":total_total_item_overdue,"total_total_per_complied":total_total_per_complied,
#                 'mom_total_total_inspection':mom_total_total_inspection,"mom_total_total_closed":mom_total_total_closed,
#                 "mom_total_total_open":mom_total_total_open,"mom_total_total_item":mom_total_total_item,"mom_total_total_item_pending":mom_total_total_item_pending,
#                 "mom_total_total_item_overdue":mom_total_total_item_overdue,"mom_total_total_per_complied":mom_total_total_per_complied,'do_total_total_open':do_total_total_open,
#                 'do_total_total_pending':do_total_total_pending,'do_total_total_closed':do_total_total_closed,
#                 'do_total_total_per_complied':do_total_total_per_complied,"task_total_total_open":task_total_total_open,
#                 'total_total_task_assign':total_total_task_assign,'total_total_task_completed':total_total_task_completed,
#                 'task_total_total_per_complied':task_total_total_per_complied}, safe=False)
       
        
#         return JsonResponse({'success':False}, status=400)
     
#     # except Exception as e: 
#     #     try:
#     #         m1.error_Table.objects.create(fun_name="fetch_desig_ajax",user_id=request.user,err_details=str(e))
#     #     except:
#     #         print("Internal Error!!!")
#     #     return render(request, "errorspage.html", {})



# def fetch_desig_ajax_officerwise_all(request):
#     # try:
#         if request.method == 'GET' and request.is_ajax():

#             location_code = json.loads(request.GET.get("location_code"))
#             location_type = json.loads(request.GET.get("location_type"))
#             designation = json.loads(request.GET.get("designation"))
#             created_on = request.GET.get("created_on")
#             # print('mydatas4444444',location_code,location_type,designation,created_on)
#             l=[]
#             if designation:
#                 l = designation
#                 # print("mydesigs",l)
#             elif location_type:
#                 # DIVISION WISE
                
#                 for x in location_type:
#                     x1=x.split('-')
#                     ins=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation__icontains=x1[0]).values('designation').distinct('designation'))
#                     #print(ins,'==============================================')
#                     for i in ins:
#                         l.append(i['designation'])
#                 # END DIVISION WISE
#             elif location_code:
#                 # RAILWAYS WISE
#                 # grou=json.loads(request.GET.get("group"))
                
#                 # ins=list(models.railwayLocationMaster.objects.filter(location_type='DIV',parent_location_code=grou).values('location_code', 'rly_unit_code'))
        
#                 ins=list(models.railwayLocationMaster.objects.filter(Q(location_type_desc='DIVISION')|Q(location_type_desc='WORKSHOP')|Q(location_type_desc='STORE')|Q(location_type_desc='CONSTRUCTION'),parent_location_code__in=location_code).values('location_code', 'location_type'))
    
#                 l=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(rly_unit_id__in=(models.railwayLocationMaster.objects.filter(parent_location_code__in=location_code).values('rly_unit_code'))).values_list('designation',flat=True).distinct('designation'))
#                 print("insdesig",l)

#                 # END RAILWAY WISE
#             else:
#                 list7=models.Level_Desig.objects.exclude(delete_flag=True).all().values('designation').order_by('designation')
#                 list8=[]
#                 for i in list7:
#                     # print(i['designation'],'_________')
#                     list8.append(i['designation'])
#                     l = list8
#             print("mylist5555",l)


#             ''' inspection report '''
#             total_total_inspection = 0
#             total_total_closed = 0
#             total_total_open = 0
#             total_total_item = 0
#             total_total_item_pending = 0
#             total_total_item_overdue = 0
#             total_total_per_complied = 0

#             ''' inspection report mom '''
#             mom_total_total_inspection = 0
#             mom_total_total_closed = 0
#             mom_total_total_open = 0
#             mom_total_total_item = 0
#             mom_total_total_item_pending = 0
#             mom_total_total_item_overdue = 0
#             mom_total_total_per_complied = 0


#             ''' Do letter data '''
#             do_total_total_open = 0
#             do_total_total_pending = 0
#             do_total_total_closed = 0 
#             do_total_total_per_complied = 0

#             ''' TASK TRACKER '''
#             task_total_total_open = 0
#             total_total_task_assign = 0
#             total_total_task_completed = 0 
#             task_total_total_per_complied = 0

#             my_data = []
#             ajaxname = request.GET.get('ajaxname')

#             if ajaxname == 'MarkedByOfficer':
#                 print("inside MarkedByOfficer")
#                 # DATA FROM AJAX MarkedByOfficer
#                 if created_on:
#                     print("inside else")
#                     for i in l:
#                         print(i)
#                         datefrom = datetime.strptime(created_on.split('to')[0].strip(),'%d/%m/%y')
#                         dateto = datetime.strptime(created_on.split('to')[1].strip(),'%d/%m/%y')
#                         desig_code = models.Level_Desig.objects.exclude(delete_flag=True).filter(designation = i)[0].designation_code

#                         ###############################3 INSPECTION REPORT ##################################
#                         # total complaince
#                         cursor = connection.cursor()
#                         cursor.execute(''' SELECT count(distinct(A.inspection_no)) total_comp
#                         FROM public.inspects_inspection_details A,
#                         public.inspects_marked_officers B,
#                         public.inspects_item_details D, 
#                         public.myadmin_level_desig E
#                         where B.item_no_id=D.item_no and B.marked_to_id = E.designation_code and B.marked_to_id = %s
#                         and B.status_flag != 0 and A.inspection_no = D.inspection_no_id  and
#                         (A.inspected_on >= %s and A.inspected_on <= %s)''',[desig_code,datefrom,dateto])
#                         total_inspection = cursor.fetchall()
#                         total_total_inspection +=total_inspection[0][0]
#                         cursor.close()

#                         # total_closed
#                         # cursor = connection.cursor()
#                         # cursor.execute(''' SELECT count(distinct(A.inspection_no)) total_closed
#                         # FROM public.inspects_inspection_details A,
#                         # public.inspects_marked_officers B,
#                         # public.inspects_item_details D, 
#                         # public.myadmin_level_desig E
#                         # where B.item_no_id=D.item_no and B.marked_to_id = E.designation_code and B.marked_to_id =%s
#                         # and B.status_flag in (3,4)  and A.inspection_no = D.inspection_no_id and
#                         # (A.inspected_on >= %s and A.inspected_on <= %s)''',[desig_code,datefrom,dateto])
#                         # total_closed = cursor.fetchall()
#                         # total_total_closed +=total_closed[0][0]
                        
#                         # pending
#                         cursor = connection.cursor()
#                         cursor.execute(''' SELECT count(distinct(A.inspection_no)) pending
#                         FROM public.inspects_inspection_details A,
#                         public.inspects_marked_officers B,
#                         public.inspects_item_details D, 
#                         public.myadmin_level_desig E
#                         where B.item_no_id=D.item_no and B.marked_to_id = E.designation_code and B.marked_to_id = %s
#                         and B.status_flag in (1,2) and A.inspection_no = D.inspection_no_id and
#                         (A.inspected_on >= %s and A.inspected_on <= %s)''',[desig_code,datefrom,dateto])
#                         total_open = cursor.fetchall()
#                         total_total_open +=total_open[0][0]
#                         # print("total_inspection7777777777total_open",total_open)
#                         total_closed =total_inspection[0][0]-total_open[0][0]
#                         total_total_closed+=total_closed
#                         # total_item
#                         cursor = connection.cursor()
#                         cursor.execute(''' SELECT count(D.item_no)
#                         FROM public.inspects_inspection_details A,
#                         public.inspects_marked_officers B,
#                         public.inspects_item_details D, 
#                         public.myadmin_level_desig E
#                         where B.item_no_id=D.item_no and B.marked_to_id = E.designation_code and B.marked_to_id = %s
#                         and A.inspection_no = D.inspection_no_id and
#                         B.status_flag >0 and (A.inspected_on >= %s and A.inspected_on <= %s)''',[desig_code,datefrom,dateto])
#                         total_item = cursor.fetchall()
#                         total_total_item +=total_item[0][0]
       

#                         # total_item_pending
#                         cursor = connection.cursor()
#                         cursor.execute(''' SELECT count(D.item_no)
#                         FROM public.inspects_inspection_details A,
#                         public.inspects_marked_officers B,
#                         public.inspects_item_details D, 
#                         public.myadmin_level_desig E
#                         where B.item_no_id=D.item_no and B.marked_to_id = E.designation_code and B.marked_to_id = %s
#                         and A.inspection_no = D.inspection_no_id and
#                         B.status_flag  in (1,2)   and (A.inspected_on >= %s and A.inspected_on <= %s)''',[desig_code,datefrom,dateto])
#                         total_item_pending = cursor.fetchall()
#                         total_total_item_pending +=total_item_pending[0][0]
                     
#                         # total_item_overdue
#                         cursor = connection.cursor()
#                         cursor.execute(''' SELECT count(*)
#                         FROM public.inspects_inspection_details A,
#                         public.inspects_marked_officers B,
#                         public.inspects_item_details D, 
#                         public.myadmin_level_desig E
#                         where B.item_no_id=D.item_no and B.marked_to_id = E.designation_code and B.marked_to_id = %s
#                         and A.inspection_no = D.inspection_no_id and
#                         B.status_flag in (1,2) and
#                         D.target_date < now() and (A.inspected_on >= %s and A.inspected_on <= %s)''',[desig_code,datefrom,dateto])
#                         total_item_overdue = cursor.fetchall()
#                         total_total_item_overdue +=total_item_overdue[0][0]

#                         # %complied 
#                         try:
#                             per_complied = ((total_item[0][0]-total_item_pending[0][0])/total_item[0][0])*100
                            
#                         except:
#                             per_complied = 0
                        
#                         # ####################### MOM INSPECTION REPORT #########################################
#                         # total complaince
#                         cursor = connection.cursor()
#                         cursor.execute(''' SELECT count(distinct(A.insp_no)) total_comp
#                         FROM public.mom_insp_details A,
#                         public.mom_marked_members B,
#                         public.mom_item_details D, 
#                         public.myadmin_level_desig E
#                         where B.item_no_id=D.item_no and B.marked_to_id = E.designation_code and B.marked_to_id = %s
#                         and B.status_flag != 0 and A.insp_no = D.insp_no_id ''',[desig_code])
#                         mom_total_inspection = cursor.fetchall()
#                         mom_total_total_inspection +=mom_total_inspection[0][0]
#                         cursor.close()

#                         # total_closed
#                         cursor = connection.cursor()
#                         cursor.execute(''' SELECT count(distinct(A.insp_no)) total_closed
#                         FROM public.mom_insp_details A,
#                         public.mom_marked_members B,
#                         public.mom_item_details D, 
#                         public.myadmin_level_desig E
#                         where B.item_no_id=D.item_no and B.marked_to_id = E.designation_code and B.marked_to_id = %s
#                         and B.status_flag = 4 and A.insp_no = D.insp_no_id''',[desig_code])
#                         mom_total_closed = cursor.fetchall()
#                         mom_total_total_closed +=mom_total_closed[0][0]

#                         # pending
#                         cursor = connection.cursor()
#                         cursor.execute(''' SELECT count(distinct(A.insp_no)) pending
#                         FROM public.mom_insp_details A,
#                         public.mom_marked_members B,
#                         public.mom_item_details D, 
#                         public.myadmin_level_desig E
#                         where B.item_no_id=D.item_no and B.marked_to_id = E.designation_code and B.marked_to_id = %s
#                         and B.status_flag in (1,2) and A.insp_no = D.insp_no_id ''',[desig_code])
#                         mom_total_open = cursor.fetchall()
#                         mom_total_total_open +=mom_total_open[0][0]
#                         # print("total_inspection7777777777total_open",mom_total_open)

#                         # total_item
#                         cursor = connection.cursor()
#                         cursor.execute(''' SELECT count(*) FROM public.mom_insp_details A,
#                         public.mom_marked_members B,
#                         public.mom_item_details D, 
#                         public.myadmin_level_desig E
#                         where B.item_no_id=D.item_no and B.marked_to_id = E.designation_code and B.marked_to_id = %s
#                         and A.insp_no = D.insp_no_id and
#                         D.status_flag >0''',[desig_code])
#                         mom_total_item = cursor.fetchall()
#                         mom_total_total_item +=mom_total_item[0][0]
       

#                         # total_item_pending
#                         cursor = connection.cursor()
#                         cursor.execute(''' SELECT count(*) FROM public.mom_insp_details A,
#                         public.mom_marked_members B,
#                         public.mom_item_details D, 
#                         public.myadmin_level_desig E
#                         where B.item_no_id=D.item_no and B.marked_to_id = E.designation_code and B.marked_to_id = %s
#                         and A.insp_no = D.insp_no_id and
#                         D.status_flag  in (1,2,3)    ''',[desig_code])
#                         mom_total_item_pending = cursor.fetchall()
#                         mom_total_total_item_pending +=mom_total_item_pending[0][0]
                     
#                         # total_item_overdue
#                         cursor = connection.cursor()
#                         cursor.execute(''' SELECT count(*) FROM public.mom_insp_details A,
#                         public.mom_marked_members B,
#                         public.mom_item_details D, 
#                         public.myadmin_level_desig E
#                         where B.item_no_id=D.item_no and B.marked_to_id = E.designation_code and B.marked_to_id = %s
#                         and A.insp_no = D.insp_no_id and
#                         D.status_flag  in (1,2,3)   ''',[desig_code])
#                         mom_total_item_overdue = cursor.fetchall()
#                         mom_total_total_item_overdue +=mom_total_item_overdue[0][0]

#                         # %complied 
#                         try:
#                             mom_per_complied = ((mom_total_item-mom_total_item_pending)/mom_total_item)*100
                            
#                         except:
#                             mom_per_complied = 0


#                         # DO LETTER 
                        
#                         # TOTAL OPEN
#                         do_total_open=m4.do_act.objects.filter(desig_id_id = desig_code).count()
#                         do_total_total_open += do_total_open

#                         # TOTAL PENDING
#                         do_total_pending=m4.do_act.objects.filter(desig_id_id = desig_code,status_flag=False).count()
#                         do_total_total_pending += do_total_pending

#                         # TOTAL CLOSED
#                         do_total_closed=m4.do_act.objects.filter(desig_id_id = desig_code,status_flag=True).count()
#                         do_total_total_closed += do_total_closed
#                         # per complied
#                         try:
#                             do_per_complied = (do_total_closed / do_total_open) * 100
#                         except:
#                             do_per_complied = 0

                        
#                         ''' TASK TRACKER '''
#                         # total task tracker assign data
#                         # task_assigned_insp = m1.target_compliance.objects.filter(marked_no__item_no__inspection_no__inspection_officer__rly_unit__location_code = i, task_flag=1).exclude(status_flag = 3).count()
#                         # task_assigned_tracker = m1.target_compliance.objects.filter(assigned_by__rly_unit__location_code = i, task_flag=2).exclude(status_flag = 3).count()
#                         task_assigned = m1.target_compliance.objects.filter(pending_with__designation_code = desig_code).exclude(status_flag = 3).count()
#                         total_total_task_assign += task_assigned

#                         # total task tracker completed data apeksha:7005
#                         # task_completed_insp = m1.target_compliance.objects.filter(marked_no__item_no__inspection_no__inspection_officer__rly_unit__location_code = i, task_flag=1,status_flag = 3).count()
#                         task_completed = m1.target_compliance.objects.filter(pending_with__designation_code = desig_code, status_flag = 3).count()
#                         # task_completed = task_completed_insp + task_completed_tracker
#                         total_total_task_completed += task_completed
                        
#                         # total task tracker open data
#                         totol_open = task_assigned+task_completed
#                         task_total_total_open += totol_open

#                         try:
#                             task_per_complied = (task_completed / totol_open) * 100
#                         except:
#                             task_per_complied = 0



#                         my_data.append({'rly':i,"total_inspection":total_inspection,"total_closed":total_closed,
#                         "total_open":total_open,"total_item":total_item,"total_item_pending":total_item_pending,
#                         'total_item_overdue':total_item_overdue,"per_complied":per_complied,"mom_total_inspection":mom_total_inspection,"mom_total_closed":mom_total_closed,
#                         "mom_total_open":mom_total_open,"mom_total_item":mom_total_item,"mom_total_item_pending":mom_total_item_pending,
#                         'mom_total_item_overdue':mom_total_item_overdue,"mom_per_complied":mom_per_complied,'do_total_open':do_total_open,
#                         'do_total_pending':do_total_pending,'do_total_closed':do_total_closed,
#                         'do_per_complied':do_per_complied,'task_assigned':task_assigned,"task_completed":task_completed,
#                         'totol_open':totol_open,'task_per_complied':task_per_complied})
                
#                 try:
                
#                     total_total_per_complied = ((total_total_item-total_total_item_pending)/total_total_item)*100
#                 except:
                
#                     total_total_per_complied = 0
#                 try:
                
#                     mom_total_total_per_complied = ((mom_total_total_item-mom_total_total_item_pending)/mom_total_total_item)*100
#                 except:
                
#                     mom_total_total_per_complied = 0
                
#                 try:
                
#                     do_total_total_per_complied = ((do_total_total_closed)/do_total_total_open)*100
#                 except:
                
#                     do_total_total_per_complied = 0
#                 try:
                
#                     task_total_total_per_complied = ((total_total_task_completed)/task_total_total_open)*100
#                 except:
                
#                     task_total_total_per_complied = 0

#                 # print("mydata",total_total_item_overdue)
#                 return JsonResponse({'rly_list':my_data,'total_total_inspection':total_total_inspection,"total_total_closed":total_total_closed,
#                 "total_total_open":total_total_open,"total_total_item":total_total_item,"total_total_item_pending":total_total_item_pending,
#                 "total_total_item_overdue":total_total_item_overdue,"total_total_per_complied":total_total_per_complied,'mom_total_total_inspection':mom_total_total_inspection,"mom_total_total_closed":mom_total_total_closed,
#                 "mom_total_total_open":mom_total_total_open,"mom_total_total_item":mom_total_total_item,"mom_total_total_item_pending":mom_total_total_item_pending,
#                 "mom_total_total_item_overdue":mom_total_total_item_overdue,"mom_total_total_per_complied":mom_total_total_per_complied,'do_total_total_open':do_total_total_open,
#                 'do_total_total_pending':do_total_total_pending,'do_total_total_closed':do_total_total_closed,
#                 'do_total_total_per_complied':do_total_total_per_complied,"task_total_total_open":task_total_total_open,
#                 'total_total_task_assign':total_total_task_assign,'total_total_task_completed':total_total_task_completed,
#                 'task_total_total_per_complied':task_total_total_per_complied}, safe=False)
            
#             else:
#                 # DATA FROM AJAX issues By Officer
#                 if created_on:
#                     datefrom = datetime.strptime(created_on.split('to')[0].strip(),'%d/%m/%y')
#                     dateto = datetime.strptime(created_on.split('to')[1].strip(),'%d/%m/%y')
#                     for i in l:
#                         desig_code = models.Level_Desig.objects.exclude(delete_flag=True).filter(designation = i)[0].designation_code
#                         # print("desig_codedesig_codedesig_codedesig_codedesig_code",desig_code)
#                         # total_inspection=m1.Inspection_details.objects.filter(~Q(status_flag=0),inspection_officer=desig_code).count()
#                         # total inspection notes (passed)
#                         cursor = connection.cursor()
#                         cursor.execute(''' SELECT count( DISTINCT A.inspection_no) total_inspection
#                         FROM public.inspects_inspection_details A,
#                         public.myadmin_level_desig B
#                         where A.inspection_officer_id = B.designation_code and A.status_flag!=0 and
#                                 A.inspection_officer_id = %s and
#                                 (A.inspected_on >= %s and A.inspected_on <= %s) ''',[desig_code,datefrom,dateto])
#                         total_inspection = cursor.fetchall()
#                         total_total_inspection +=total_inspection[0][0]
#                         cursor.close()
#                         # print("total_inspection45",total_inspection)

#                         # total_closed (passed)
#                         cursor = connection.cursor()
#                         cursor.execute(''' SELECT count( DISTINCT A.inspection_no) total_closed
#                         FROM public.inspects_inspection_details A,
#                         public.myadmin_level_desig B
                    
#                         where A.inspection_officer_id = B.designation_code and A.status_flag=4 and
#                                 A.inspection_officer_id = %s and
#                                 (A.inspected_on >= %s and A.inspected_on <= %s) ''',[desig_code,datefrom,dateto])
#                         total_closed = cursor.fetchall()
#                         total_total_closed +=total_closed[0][0]
#                         cursor.close()

#                         # pending inspection report (passed)
#                         cursor = connection.cursor()
#                         cursor.execute(''' SELECT count( DISTINCT A.inspection_no) total_open
#                         FROM public.inspects_inspection_details A,
#                         public.myadmin_level_desig B
                    
#                         where A.inspection_officer_id = B.designation_code and A.status_flag between 1 and 3 and
#                                 A.inspection_officer_id = %s and
#                                 (A.inspected_on >= %s and A.inspected_on <= %s) ''',[desig_code,datefrom,dateto])
#                         total_open = cursor.fetchall()
#                         total_total_open +=total_open[0][0]
#                         cursor.close()

#                         # total_item
#                         cursor = connection.cursor()
                        
#                         cursor.execute(''' SELECT count( distinct B.item_no_id) total_item
#                         FROM public.inspects_inspection_details A,
#                         public.inspects_marked_officers B,
                    
#                         public.inspects_item_details D
#                         where  A.status_flag>0 and
#                             B.item_no_id=D.item_no and
                                
#                         A.inspection_no = D.inspection_no_id and D.status_flag >0 and A.inspection_officer_id = %s and
#                                 (A.inspected_on >= %s and A.inspected_on <= %s) ''',[desig_code,datefrom,dateto])

                        
#                         total_item = cursor.fetchall()
#                         total_total_item +=total_item[0][0]
#                         cursor.close()

#                         # total_item_pending
#                         cursor = connection.cursor()
#                         cursor.execute(''' SELECT count( distinct B.item_no_id) total_item
#                         FROM public.inspects_inspection_details A,
#                         public.inspects_marked_officers B,
                    
#                         public.inspects_item_details D
#                         where  A.status_flag between 1 and 3 and
#                             B.item_no_id=D.item_no and
                            
#                         A.inspection_no = D.inspection_no_id and D.status_flag between 1 and 3 and A.inspection_officer_id = %s and
#                                 (A.inspected_on >= %s and A.inspected_on <= %s) ''',[desig_code,datefrom,dateto])
#                         total_item_pending = cursor.fetchall()
#                         total_total_item_pending +=total_item_pending[0][0]
#                         cursor.close()


#                         # total_item_overdue
#                         cursor = connection.cursor()
#                         cursor.execute(''' SELECT count( distinct B.item_no_id) total_item
#                         FROM public.inspects_inspection_details A,
#                         public.inspects_marked_officers B,
                    
#                         public.inspects_item_details D
#                         where B.item_no_id=D.item_no and A.status_flag between 1 and 4 and
                                
#                         A.inspection_no = D.inspection_no_id and D.status_flag between 1 and 3 and
#                                 D.target_date < now() and A.inspection_officer_id = %s and
#                                 (A.inspected_on >= %s and A.inspected_on <= %s) ''',[desig_code,datefrom,dateto])
                        
#                         total_item_overdue = cursor.fetchall()
#                         total_total_item_overdue +=total_item_overdue[0][0]
#                         cursor.close()

#                         # %complied 
#                         try:
#                             per_complied = ((total_item[0][0]-total_item_pending[0][0])/total_item[0][0])*100
                            
#                         except:
#                             per_complied = 0


#                         # ####################### MOM INSPECTION REPORT #########################################
#                         # total complaince
#                         cursor = connection.cursor()
#                         cursor.execute(''' SELECT count( DISTINCT A.insp_no) total_inspection
#                         FROM public.mom_insp_details A,
#                         public.myadmin_level_desig B
#                         where A.mom_officer_id = B.designation_code and A.status_flag!=0 and
#                         A.mom_officer_id = %s and (A.mom_date >= %s and A.mom_date <= %s) ''',[desig_code,datefrom,dateto])
#                         mom_total_inspection = cursor.fetchall()
#                         mom_total_total_inspection +=mom_total_inspection[0][0]
#                         cursor.close()

#                         # total_closed
#                         cursor = connection.cursor()
#                         cursor.execute(''' SELECT count( DISTINCT A.insp_no) total_closed
#                         FROM public.mom_insp_details A,
#                         public.myadmin_level_desig B
#                         where A.mom_officer_id = B.designation_code and A.status_flag=4 and
#                         A.mom_officer_id = %s and (A.mom_date >= %s and A.mom_date <= %s)  ''',[desig_code,datefrom,dateto])
#                         mom_total_closed = cursor.fetchall()
#                         mom_total_total_closed +=mom_total_closed[0][0]

#                         # pending
#                         cursor = connection.cursor()
#                         cursor.execute('''  SELECT count( DISTINCT A.insp_no) total_open
#                         FROM public.mom_insp_details A,
#                         public.myadmin_level_desig B
                    
#                         where A.mom_officer_id = B.designation_code and A.status_flag between 1 and 3 and
#                         A.mom_officer_id = %s and (A.mom_date >= %s and A.mom_date <= %s) ''',[desig_code,datefrom,dateto])
#                         mom_total_open = cursor.fetchall()
#                         mom_total_total_open +=mom_total_open[0][0]
#                         # print("total_inspection7777777777total_open",mom_total_open)

#                         # total_item
#                         cursor = connection.cursor()
#                         cursor.execute(''' SELECT count( distinct D.item_no) total_item
#                         FROM public.mom_insp_details A,
                        
                    
#                         public.mom_item_details D
#                         where  A.status_flag>0 and  D.item_heading is not null  and
                            
                                
#                         A.insp_no = D.insp_no_id and D.status_flag >0 and A.mom_officer_id = %s and (A.mom_date >= %s and A.mom_date <= %s) ''',[desig_code,datefrom,dateto])
#                         mom_total_item = cursor.fetchall()
#                         mom_total_total_item +=mom_total_item[0][0]
       

#                         # total_item_pending
#                         cursor = connection.cursor()
#                         cursor.execute(''' SELECT count( distinct B.item_no_id) total_item
#                         FROM public.mom_insp_details A,
#                             public.mom_marked_members B,
                        
#                         public.mom_item_details D
#                         where  A.status_flag between 1 and 3 and
#                             B.item_no_id=D.item_no and
                                
#                         A.insp_no = D.insp_no_id and D.status_flag between 1 and 3 and A.mom_officer_id = %s and (A.mom_date >= %s and A.mom_date <= %s)''',[desig_code,datefrom,dateto])
#                         mom_total_item_pending = cursor.fetchall()
#                         mom_total_total_item_pending +=mom_total_item_pending[0][0]
                     
#                         # total_item_overdue
#                         cursor = connection.cursor()
#                         cursor.execute(''' SELECT count( distinct B.item_no_id) total_item
#                         FROM public.mom_insp_details A,
#                             public.mom_marked_members B,
                        
#                         public.mom_item_details D
#                         where B.item_no_id=D.item_no and A.status_flag between 1 and 4 and
                                
#                         A.insp_no = D.insp_no_id and D.status_flag between 1 and 3 and
#                                 D.target_date < now() and A.mom_officer_id = %s and (A.mom_date >= %s and A.mom_date <= %s) ''',[desig_code,datefrom,dateto])
#                         mom_total_item_overdue = cursor.fetchall()
#                         mom_total_total_item_overdue +=mom_total_item_overdue[0][0]

#                         # %complied 
#                         try:
#                             mom_per_complied = ((mom_total_item-mom_total_item_pending)/mom_total_item)*100
                            
#                         except:
#                             mom_per_complied = 0
                        

                        
#                         # DO LETTER OFFICER WISE -----------------------------------------------------------
#                         # user = request.user
#                         dol=list(m4.do_upload.objects.filter(desig_id_id=desig_code).values_list('id',flat = True))
                        
#                         # TOTAL OPEN
#                         do_total_open=m4.do_act.objects.filter(id_upload__in = dol).count()
#                         do_total_total_open += do_total_open

#                         # TOTAL PENDING
#                         do_total_pending=m4.do_act.objects.filter(id_upload__in = dol,status_flag=False).count()
#                         do_total_total_pending += do_total_pending

#                         # TOTAL CLOSED
#                         do_total_closed=m4.do_act.objects.filter(id_upload__in = dol,status_flag=True).count()
#                         do_total_total_closed += do_total_closed
#                         # per complied
#                         try:
#                             do_per_complied = (do_total_closed / do_total_open) * 100
#                         except:
#                             do_per_complied = 0
#                         # do_total_total_per_complied +=do_per_complied
                        

#                         ''' TASK TRACKER '''
#                         # total task tracker assign data
#                         # task_assigned_insp = m1.target_compliance.objects.filter(marked_no__item_no__inspection_no__inspection_officer__rly_unit__location_code = i, task_flag=1).exclude(status_flag = 3).count()
#                         task_assigned = m1.target_compliance.objects.filter(assigned_by__designation_code = desig_code).exclude(status_flag = 3).count()
#                         # task_assigned = task_assigned_insp+task_assigned_tracker
#                         total_total_task_assign += task_assigned

#                         # total task tracker completed data
#                         # task_completed_insp = m1.target_compliance.objects.filter(marked_no__item_no__inspection_no__inspection_officer__rly_unit__location_code = i, task_flag=1,status_flag = 3).count()
#                         task_completed = m1.target_compliance.objects.filter(assigned_by__designation_code = desig_code, status_flag = 3).count()
#                         # task_completed = task_completed_insp + task_completed_tracker
#                         total_total_task_completed += task_completed
                        
#                         # total task tracker open data
#                         totol_open = task_assigned+task_completed
#                         task_total_total_open += totol_open

#                         try:
#                             task_per_complied = (task_completed / totol_open) * 100
#                         except:
#                             task_per_complied = 0

#                         my_data.append({'rly':i,"total_inspection":total_inspection[0][0],"total_closed":total_closed,
#                         "total_open":total_open[0][0],"total_item":total_item[0][0],"total_item_pending":total_item_pending[0][0],
#                         'total_item_overdue':total_item_overdue[0][0],"per_complied":per_complied,"mom_total_inspection":mom_total_inspection,"mom_total_closed":mom_total_closed,
#                         "mom_total_open":mom_total_open,"mom_total_item":mom_total_item,"mom_total_item_pending":mom_total_item_pending,
#                         'mom_total_item_overdue':mom_total_item_overdue,"mom_per_complied":mom_per_complied,'do_total_open':do_total_open,
#                         'do_total_pending':do_total_pending,'do_total_closed':do_total_closed,
#                         'do_per_complied':do_per_complied,'task_assigned':task_assigned,"task_completed":task_completed,
#                         'totol_open':totol_open,'task_per_complied':task_per_complied})
    
#                 try:
                
#                     total_total_per_complied = ((total_total_item-total_total_item_pending)/total_total_item)*100
#                 except:
                
#                     total_total_per_complied = 0
                
#                 try:
                
#                     mom_total_total_per_complied = ((mom_total_total_item-mom_total_total_item_pending)/mom_total_total_item)*100
#                 except:
                
#                     mom_total_total_per_complied = 0
                
#                 try:
                
#                     do_total_total_per_complied = ((do_total_total_closed)/do_total_total_open)*100
#                 except:
                
#                     do_total_total_per_complied = 0
#                 try:
                
#                     task_total_total_per_complied = ((total_total_task_completed)/task_total_total_open)*100
#                 except:
                
#                     task_total_total_per_complied = 0

#                 return JsonResponse({'rly_list':my_data,'total_total_inspection':total_total_inspection,"total_total_closed":total_total_closed,
#                 "total_total_open":total_total_open,"total_total_item":total_total_item,"total_total_item_pending":total_total_item_pending,
#                 "total_total_item_overdue":total_total_item_overdue,"total_total_per_complied":total_total_per_complied,
#                 'mom_total_total_inspection':mom_total_total_inspection,"mom_total_total_closed":mom_total_total_closed,
#                 "mom_total_total_open":mom_total_total_open,"mom_total_total_item":mom_total_total_item,"mom_total_total_item_pending":mom_total_total_item_pending,
#                 "mom_total_total_item_overdue":mom_total_total_item_overdue,"mom_total_total_per_complied":mom_total_total_per_complied,'do_total_total_open':do_total_total_open,
#                 'do_total_total_pending':do_total_total_pending,'do_total_total_closed':do_total_total_closed,
#                 'do_total_total_per_complied':do_total_total_per_complied,"task_total_total_open":task_total_total_open,
#                 'total_total_task_assign':total_total_task_assign,'total_total_task_completed':total_total_task_completed,
#                 'task_total_total_per_complied':task_total_total_per_complied}, safe=False)
       
        
#         return JsonResponse({'success':False}, status=400)
     
#     # except Exception as e: 
#     #     try:
#     #         m1.error_Table.objects.create(fun_name="fetch_desig_ajax",user_id=request.user,err_details=str(e))
#     #     except:
#     #         print("Internal Error!!!")
#     #     return render(request, "errorspage.html", {})

def fetch_desig_ajax_officerwise_all(request):
    try:
        if request.method == 'GET' and request.is_ajax():

            location_code = json.loads(request.GET.get("location_code"))
            location_type = json.loads(request.GET.get("location_type"))
            designation = json.loads(request.GET.get("designation"))
            created_on = request.GET.get("created_on")
            # print('mydatas4444444',location_code,location_type,designation,created_on)
            l=[]
            if designation:
                l = designation
                # print("mydesigs",l)
            elif location_type:
                # DIVISION WISE
                
                list7=models.Level_Desig.objects.exclude(delete_flag=True).filter(rly_unit_id__in=location_type).values('designation_code')
                l=[]
                for i in list7:
                    # print(i['designation'],'_________')
                    l.append(i['designation_code'])

                # for x in location_type:
                #     x1=x.split('-')
                #     ins=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation__icontains=x1[0]).values('designation').distinct('designation'))
                #     #print(ins,'==============================================')
                #     for i in ins:
                #         l.append(i['designation'])
                # END DIVISION WISE
            elif location_code:
                # RAILWAYS WISE
                # grou=json.loads(request.GET.get("group"))
                
                # ins=list(models.railwayLocationMaster.objects.filter(location_type='DIV',parent_location_code=grou).values('location_code', 'rly_unit_code'))
                # ins=list(models.railwayLocationMaster.objects.filter(Q(location_type_desc='DIVISION')|Q(location_type_desc='WORKSHOP')|Q(location_type_desc='STORE')|Q(location_type_desc='CONSTRUCTION'),parent_rly_unit_code__in=location_code).values('rly_unit_code','location_code', 'location_type').order_by('location_code'))
                
                # ins=list(models.railwayLocationMaster.objects.filter(Q(location_type_desc='DIVISION')|Q(location_type_desc='WORKSHOP')|Q(location_type_desc='STORE')|Q(location_type_desc='CONSTRUCTION'),parent_location_code__in=location_code).values('location_code', 'location_type'))
                list7=models.Level_Desig.objects.exclude(delete_flag=True).filter(rly_unit_id__in=location_code).values('designation_code')

                l=[]
                for i in list7:
                    # print(i['designation'],'_________')
                    l.append(i['designation_code'])
    
                # l=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(rly_unit_id__in=(models.railwayLocationMaster.objects.filter(parent_location_code__in=location_code).values('rly_unit_code'))).values_list('designation',flat=True).distinct('designation'))
                # print("insdesig",l)

                # END RAILWAY WISE
            else:
                list7=models.Level_Desig.objects.exclude(delete_flag=True).all().values('designation_code')
                list8=[]
                for i in list7:
                    # print(i['designation'],'_________')
                    list8.append(i['designation_code'])
                    l = list8
            # print("mylist5555",l)


            ''' inspection report '''
            total_total_inspection = 0
            total_total_closed = 0
            total_total_open = 0
            total_total_item = 0
            total_total_item_pending = 0
            total_total_item_overdue = 0
            total_total_per_complied = 0

            ''' inspection report mom '''
            mom_total_total_inspection = 0
            mom_total_total_closed = 0
            mom_total_total_open = 0
            mom_total_total_item = 0
            mom_total_total_item_pending = 0
            mom_total_total_item_overdue = 0
            mom_total_total_per_complied = 0


            ''' Do letter data '''
            do_total_total_open = 0
            do_total_total_pending = 0
            do_total_total_closed = 0 
            do_total_total_per_complied = 0

            ''' TASK TRACKER '''
            task_total_total_open = 0
            total_total_task_assign = 0
            total_total_task_completed = 0 
            task_total_total_per_complied = 0

            my_data = []
            ajaxname = request.GET.get('ajaxname')

            if ajaxname == 'MarkedByOfficer':
                # print("inside MarkedByOfficer")
                # DATA FROM AJAX MarkedByOfficer
                if created_on:
                    # print("inside else")
                    for i in l:
                        # print(i)
                        datefrom = datetime.strptime(created_on.split('to')[0].strip(),'%d/%m/%y')
                        dateto = datetime.strptime(created_on.split('to')[1].strip(),'%d/%m/%y')
                        desig_code =i

                        ###############################3 INSPECTION REPORT ##################################
                        # total complaince
                        cursor = connection.cursor()
                        cursor.execute(''' SELECT count(distinct(A.inspection_no)) total_comp
                        FROM public.inspects_inspection_details A,
                        public.inspects_marked_officers B,
                        public.inspects_item_details D, 
                        public.myadmin_level_desig E
                        where B.item_no_id=D.item_no and B.marked_to_id = E.designation_code and B.marked_to_id = %s
                        and B.status_flag != 0 and A.inspection_no = D.inspection_no_id  and
                        (A.inspected_on >= %s and A.inspected_on <= %s)''',[desig_code,datefrom,dateto])
                        total_inspection = cursor.fetchall()
                        total_total_inspection +=total_inspection[0][0]
                        cursor.close()

                        # total_closed
                        # cursor = connection.cursor()
                        # cursor.execute(''' SELECT count(distinct(A.inspection_no)) total_closed
                        # FROM public.inspects_inspection_details A,
                        # public.inspects_marked_officers B,
                        # public.inspects_item_details D, 
                        # public.myadmin_level_desig E
                        # where B.item_no_id=D.item_no and B.marked_to_id = E.designation_code and B.marked_to_id =%s
                        # and B.status_flag in (3,4)  and A.inspection_no = D.inspection_no_id and
                        # (A.inspected_on >= %s and A.inspected_on <= %s)''',[desig_code,datefrom,dateto])
                        # total_closed = cursor.fetchall()
                        # total_total_closed +=total_closed[0][0]
                        
                        # pending
                        cursor = connection.cursor()
                        cursor.execute(''' SELECT count(distinct(A.inspection_no)) pending
                        FROM public.inspects_inspection_details A,
                        public.inspects_marked_officers B,
                        public.inspects_item_details D, 
                        public.myadmin_level_desig E
                        where B.item_no_id=D.item_no and B.marked_to_id = E.designation_code and B.marked_to_id = %s
                        and B.status_flag in (1,2) and A.inspection_no = D.inspection_no_id and
                        (A.inspected_on >= %s and A.inspected_on <= %s)''',[desig_code,datefrom,dateto])
                        total_open = cursor.fetchall()
                        total_total_open +=total_open[0][0]
                        # print("total_inspection7777777777total_open",total_open)
                        total_closed =total_inspection[0][0]-total_open[0][0]
                        total_total_closed+=total_closed
                        # total_item
                        cursor = connection.cursor()
                        cursor.execute(''' SELECT count(D.item_no)
                        FROM public.inspects_inspection_details A,
                        public.inspects_marked_officers B,
                        public.inspects_item_details D, 
                        public.myadmin_level_desig E
                        where B.item_no_id=D.item_no and B.marked_to_id = E.designation_code and B.marked_to_id = %s
                        and A.inspection_no = D.inspection_no_id and
                        B.status_flag >0 and (A.inspected_on >= %s and A.inspected_on <= %s)''',[desig_code,datefrom,dateto])
                        total_item = cursor.fetchall()
                        total_total_item +=total_item[0][0]
       

                        # total_item_pending
                        cursor = connection.cursor()
                        cursor.execute(''' SELECT count(D.item_no)
                        FROM public.inspects_inspection_details A,
                        public.inspects_marked_officers B,
                        public.inspects_item_details D, 
                        public.myadmin_level_desig E
                        where B.item_no_id=D.item_no and B.marked_to_id = E.designation_code and B.marked_to_id = %s
                        and A.inspection_no = D.inspection_no_id and
                        B.status_flag  in (1,2)   and (A.inspected_on >= %s and A.inspected_on <= %s)''',[desig_code,datefrom,dateto])
                        total_item_pending = cursor.fetchall()
                        total_total_item_pending +=total_item_pending[0][0]
                     
                        # total_item_overdue
                        cursor = connection.cursor()
                        cursor.execute(''' SELECT count(*)
                        FROM public.inspects_inspection_details A,
                        public.inspects_marked_officers B,
                        public.inspects_item_details D, 
                        public.myadmin_level_desig E
                        where B.item_no_id=D.item_no and B.marked_to_id = E.designation_code and B.marked_to_id = %s
                        and A.inspection_no = D.inspection_no_id and
                        B.status_flag in (1,2) and
                        D.target_date < now() and (A.inspected_on >= %s and A.inspected_on <= %s)''',[desig_code,datefrom,dateto])
                        total_item_overdue = cursor.fetchall()
                        total_total_item_overdue +=total_item_overdue[0][0]

                        # %complied 
                        try:
                            per_complied = ((total_item[0][0]-total_item_pending[0][0])/total_item[0][0])*100
                            
                        except:
                            per_complied = 0
                        
                        # ####################### MOM INSPECTION REPORT #########################################
                        # total complaince
                        cursor = connection.cursor()
                        cursor.execute(''' SELECT count(distinct(A.insp_no)) total_comp
                        FROM public.mom_insp_details A,
                        public.mom_marked_members B,
                        public.mom_item_details D, 
                        public.myadmin_level_desig E
                        where B.item_no_id=D.item_no and B.marked_to_id = E.designation_code and B.marked_to_id = %s
                        and B.status_flag != 0 and A.insp_no = D.insp_no_id ''',[desig_code])
                        mom_total_inspection = cursor.fetchall()
                        mom_total_total_inspection +=mom_total_inspection[0][0]
                        cursor.close()

                        # total_closed
                        cursor = connection.cursor()
                        cursor.execute(''' SELECT count(distinct(A.insp_no)) total_closed
                        FROM public.mom_insp_details A,
                        public.mom_marked_members B,
                        public.mom_item_details D, 
                        public.myadmin_level_desig E
                        where B.item_no_id=D.item_no and B.marked_to_id = E.designation_code and B.marked_to_id = %s
                        and B.status_flag = 4 and A.insp_no = D.insp_no_id''',[desig_code])
                        mom_total_closed = cursor.fetchall()
                        mom_total_total_closed +=mom_total_closed[0][0]

                        # pending
                        cursor = connection.cursor()
                        cursor.execute(''' SELECT count(distinct(A.insp_no)) pending
                        FROM public.mom_insp_details A,
                        public.mom_marked_members B,
                        public.mom_item_details D, 
                        public.myadmin_level_desig E
                        where B.item_no_id=D.item_no and B.marked_to_id = E.designation_code and B.marked_to_id = %s
                        and B.status_flag in (1,2) and A.insp_no = D.insp_no_id ''',[desig_code])
                        mom_total_open = cursor.fetchall()
                        mom_total_total_open +=mom_total_open[0][0]
                        # print("total_inspection7777777777total_open",mom_total_open)

                        # total_item
                        cursor = connection.cursor()
                        cursor.execute(''' SELECT count(*) FROM public.mom_insp_details A,
                        public.mom_marked_members B,
                        public.mom_item_details D, 
                        public.myadmin_level_desig E
                        where B.item_no_id=D.item_no and B.marked_to_id = E.designation_code and B.marked_to_id = %s
                        and A.insp_no = D.insp_no_id and
                        D.status_flag >0''',[desig_code])
                        mom_total_item = cursor.fetchall()
                        mom_total_total_item +=mom_total_item[0][0]
       

                        # total_item_pending
                        cursor = connection.cursor()
                        cursor.execute(''' SELECT count(*) FROM public.mom_insp_details A,
                        public.mom_marked_members B,
                        public.mom_item_details D, 
                        public.myadmin_level_desig E
                        where B.item_no_id=D.item_no and B.marked_to_id = E.designation_code and B.marked_to_id = %s
                        and A.insp_no = D.insp_no_id and
                        D.status_flag  in (1,2,3)    ''',[desig_code])
                        mom_total_item_pending = cursor.fetchall()
                        mom_total_total_item_pending +=mom_total_item_pending[0][0]
                     
                        # total_item_overdue
                        cursor = connection.cursor()
                        cursor.execute(''' SELECT count(*) FROM public.mom_insp_details A,
                        public.mom_marked_members B,
                        public.mom_item_details D, 
                        public.myadmin_level_desig E
                        where B.item_no_id=D.item_no and B.marked_to_id = E.designation_code and B.marked_to_id = %s
                        and A.insp_no = D.insp_no_id and
                        D.status_flag  in (1,2,3)   ''',[desig_code])
                        mom_total_item_overdue = cursor.fetchall()
                        mom_total_total_item_overdue +=mom_total_item_overdue[0][0]

                        # %complied 
                        try:
                            mom_per_complied = ((mom_total_item-mom_total_item_pending)/mom_total_item)*100
                            
                        except:
                            mom_per_complied = 0


                        # DO LETTER 
                        
                        # TOTAL OPEN
                        do_total_open=m4.do_act.objects.filter(desig_id_id = desig_code).count()
                        do_total_total_open += do_total_open

                        # TOTAL PENDING
                        do_total_pending=m4.do_act.objects.filter(desig_id_id = desig_code,status_flag=False).count()
                        do_total_total_pending += do_total_pending

                        # TOTAL CLOSED
                        do_total_closed=m4.do_act.objects.filter(desig_id_id = desig_code,status_flag=True).count()
                        do_total_total_closed += do_total_closed
                        # per complied
                        try:
                            do_per_complied = (do_total_closed / do_total_open) * 100
                        except:
                            do_per_complied = 0

                        
                        ''' TASK TRACKER '''
                        # total task tracker assign data
                        # task_assigned_insp = m1.target_compliance.objects.filter(marked_no__item_no__inspection_no__inspection_officer__rly_unit__location_code = i, task_flag=1).exclude(status_flag = 3).count()
                        # task_assigned_tracker = m1.target_compliance.objects.filter(assigned_by__rly_unit__location_code = i, task_flag=2).exclude(status_flag = 3).count()
                        task_assigned = m1.target_compliance.objects.filter(pending_with__designation_code = desig_code).exclude(status_flag = 3).count()
                        total_total_task_assign += task_assigned

                        # total task tracker completed data apeksha:7005
                        # task_completed_insp = m1.target_compliance.objects.filter(marked_no__item_no__inspection_no__inspection_officer__rly_unit__location_code = i, task_flag=1,status_flag = 3).count()
                        task_completed = m1.target_compliance.objects.filter(pending_with__designation_code = desig_code, status_flag = 3).count()
                        # task_completed = task_completed_insp + task_completed_tracker
                        total_total_task_completed += task_completed
                        
                        # total task tracker open data
                        totol_open = task_assigned+task_completed
                        task_total_total_open += totol_open

                        try:
                            task_per_complied = (task_completed / totol_open) * 100
                        except:
                            task_per_complied = 0


                        j=models.Level_Desig.objects.filter(designation_code=i).values('designation')[0]['designation']
                        # print("designation",j)
                        my_data.append({'rly':j,"total_inspection":total_inspection,"total_closed":total_closed,
                        "total_open":total_open,"total_item":total_item,"total_item_pending":total_item_pending,
                        'total_item_overdue':total_item_overdue,"per_complied":per_complied,"mom_total_inspection":mom_total_inspection,"mom_total_closed":mom_total_closed,
                        "mom_total_open":mom_total_open,"mom_total_item":mom_total_item,"mom_total_item_pending":mom_total_item_pending,
                        'mom_total_item_overdue':mom_total_item_overdue,"mom_per_complied":mom_per_complied,'do_total_open':do_total_open,
                        'do_total_pending':do_total_pending,'do_total_closed':do_total_closed,
                        'do_per_complied':do_per_complied,'task_assigned':task_assigned,"task_completed":task_completed,
                        'totol_open':totol_open,'task_per_complied':task_per_complied})
                
                try:
                
                    total_total_per_complied = ((total_total_item-total_total_item_pending)/total_total_item)*100
                except:
                
                    total_total_per_complied = 0
                try:
                
                    mom_total_total_per_complied = ((mom_total_total_item-mom_total_total_item_pending)/mom_total_total_item)*100
                except:
                
                    mom_total_total_per_complied = 0
                
                try:
                
                    do_total_total_per_complied = ((do_total_total_closed)/do_total_total_open)*100
                except:
                
                    do_total_total_per_complied = 0
                try:
                
                    task_total_total_per_complied = ((total_total_task_completed)/task_total_total_open)*100
                except:
                
                    task_total_total_per_complied = 0

                # print("mydata",total_total_item_overdue)
                return JsonResponse({'rly_list':my_data,'total_total_inspection':total_total_inspection,"total_total_closed":total_total_closed,
                "total_total_open":total_total_open,"total_total_item":total_total_item,"total_total_item_pending":total_total_item_pending,
                "total_total_item_overdue":total_total_item_overdue,"total_total_per_complied":total_total_per_complied,'mom_total_total_inspection':mom_total_total_inspection,"mom_total_total_closed":mom_total_total_closed,
                "mom_total_total_open":mom_total_total_open,"mom_total_total_item":mom_total_total_item,"mom_total_total_item_pending":mom_total_total_item_pending,
                "mom_total_total_item_overdue":mom_total_total_item_overdue,"mom_total_total_per_complied":mom_total_total_per_complied,'do_total_total_open':do_total_total_open,
                'do_total_total_pending':do_total_total_pending,'do_total_total_closed':do_total_total_closed,
                'do_total_total_per_complied':do_total_total_per_complied,"task_total_total_open":task_total_total_open,
                'total_total_task_assign':total_total_task_assign,'total_total_task_completed':total_total_task_completed,
                'task_total_total_per_complied':task_total_total_per_complied}, safe=False)
            
            else:
                # DATA FROM AJAX issues By Officer
                if created_on:
                    datefrom = datetime.strptime(created_on.split('to')[0].strip(),'%d/%m/%y')
                    dateto = datetime.strptime(created_on.split('to')[1].strip(),'%d/%m/%y')
                    # print('LLLLLLLL',l)
                    for i in l:
                        
                        desig_code = i
                        # print("desig_codedesig_codedesig_codedesig_codedesig_code",desig_code)
                        # total_inspection=m1.Inspection_details.objects.filter(~Q(status_flag=0),inspection_officer=desig_code).count()
                        # total inspection notes (passed)
                        cursor = connection.cursor()
                        cursor.execute(''' SELECT count( DISTINCT A.inspection_no) total_inspection
                        FROM public.inspects_inspection_details A,
                        public.myadmin_level_desig B
                        where A.inspection_officer_id = B.designation_code and A.status_flag!=0 and
                                A.inspection_officer_id = %s and
                                (A.inspected_on >= %s and A.inspected_on <= %s) ''',[desig_code,datefrom,dateto])
                        total_inspection = cursor.fetchall()
                        total_total_inspection +=total_inspection[0][0]
                        cursor.close()
                        # print("total_inspection45",total_inspection)

                        # total_closed (passed)
                        cursor = connection.cursor()
                        cursor.execute(''' SELECT count( DISTINCT A.inspection_no) total_closed
                        FROM public.inspects_inspection_details A,
                        public.myadmin_level_desig B
                    
                        where A.inspection_officer_id = B.designation_code and A.status_flag=4 and
                                A.inspection_officer_id = %s and
                                (A.inspected_on >= %s and A.inspected_on <= %s) ''',[desig_code,datefrom,dateto])
                        total_closed = cursor.fetchall()
                        total_total_closed +=total_closed[0][0]
                        cursor.close()

                        # pending inspection report (passed)
                        cursor = connection.cursor()
                        cursor.execute(''' SELECT count( DISTINCT A.inspection_no) total_open
                        FROM public.inspects_inspection_details A,
                        public.myadmin_level_desig B
                    
                        where A.inspection_officer_id = B.designation_code and A.status_flag between 1 and 3 and
                                A.inspection_officer_id = %s and
                                (A.inspected_on >= %s and A.inspected_on <= %s) ''',[desig_code,datefrom,dateto])
                        total_open = cursor.fetchall()
                        total_total_open +=total_open[0][0]
                        cursor.close()

                        # total_item
                        cursor = connection.cursor()
                        
                        cursor.execute(''' SELECT count( distinct B.item_no_id) total_item
                        FROM public.inspects_inspection_details A,
                        public.inspects_marked_officers B,
                    
                        public.inspects_item_details D
                        where  A.status_flag>0 and
                            B.item_no_id=D.item_no and
                                
                        A.inspection_no = D.inspection_no_id and D.status_flag >0 and A.inspection_officer_id = %s and
                                (A.inspected_on >= %s and A.inspected_on <= %s) ''',[desig_code,datefrom,dateto])

                        
                        total_item = cursor.fetchall()
                        total_total_item +=total_item[0][0]
                        cursor.close()

                        # total_item_pending
                        cursor = connection.cursor()
                        cursor.execute(''' SELECT count( distinct B.item_no_id) total_item
                        FROM public.inspects_inspection_details A,
                        public.inspects_marked_officers B,
                    
                        public.inspects_item_details D
                        where  A.status_flag between 1 and 3 and
                            B.item_no_id=D.item_no and
                            
                        A.inspection_no = D.inspection_no_id and D.status_flag between 1 and 3 and A.inspection_officer_id = %s and
                                (A.inspected_on >= %s and A.inspected_on <= %s) ''',[desig_code,datefrom,dateto])
                        total_item_pending = cursor.fetchall()
                        total_total_item_pending +=total_item_pending[0][0]
                        cursor.close()


                        # total_item_overdue
                        cursor = connection.cursor()
                        cursor.execute(''' SELECT count( distinct B.item_no_id) total_item
                        FROM public.inspects_inspection_details A,
                        public.inspects_marked_officers B,
                    
                        public.inspects_item_details D
                        where B.item_no_id=D.item_no and A.status_flag between 1 and 4 and
                                
                        A.inspection_no = D.inspection_no_id and D.status_flag between 1 and 3 and
                                D.target_date < now() and A.inspection_officer_id = %s and
                                (A.inspected_on >= %s and A.inspected_on <= %s) ''',[desig_code,datefrom,dateto])
                        
                        total_item_overdue = cursor.fetchall()
                        total_total_item_overdue +=total_item_overdue[0][0]
                        cursor.close()

                        # %complied 
                        try:
                            per_complied = ((total_item[0][0]-total_item_pending[0][0])/total_item[0][0])*100
                            
                        except:
                            per_complied = 0


                        # ####################### MOM INSPECTION REPORT #########################################
                        # total complaince
                        cursor = connection.cursor()
                        cursor.execute(''' SELECT count( DISTINCT A.insp_no) total_inspection
                        FROM public.mom_insp_details A,
                        public.myadmin_level_desig B
                        where A.mom_officer_id = B.designation_code and A.status_flag!=0 and
                        A.mom_officer_id = %s and (A.mom_date >= %s and A.mom_date <= %s) ''',[desig_code,datefrom,dateto])
                        mom_total_inspection = cursor.fetchall()
                        mom_total_total_inspection +=mom_total_inspection[0][0]
                        cursor.close()

                        # total_closed
                        cursor = connection.cursor()
                        cursor.execute(''' SELECT count( DISTINCT A.insp_no) total_closed
                        FROM public.mom_insp_details A,
                        public.myadmin_level_desig B
                        where A.mom_officer_id = B.designation_code and A.status_flag=4 and
                        A.mom_officer_id = %s and (A.mom_date >= %s and A.mom_date <= %s)  ''',[desig_code,datefrom,dateto])
                        mom_total_closed = cursor.fetchall()
                        mom_total_total_closed +=mom_total_closed[0][0]

                        # pending
                        cursor = connection.cursor()
                        cursor.execute('''  SELECT count( DISTINCT A.insp_no) total_open
                        FROM public.mom_insp_details A,
                        public.myadmin_level_desig B
                    
                        where A.mom_officer_id = B.designation_code and A.status_flag between 1 and 3 and
                        A.mom_officer_id = %s and (A.mom_date >= %s and A.mom_date <= %s) ''',[desig_code,datefrom,dateto])
                        mom_total_open = cursor.fetchall()
                        mom_total_total_open +=mom_total_open[0][0]
                        # print("total_inspection7777777777total_open",mom_total_open)

                        # total_item
                        cursor = connection.cursor()
                        cursor.execute(''' SELECT count( distinct D.item_no) total_item
                        FROM public.mom_insp_details A,
                        
                    
                        public.mom_item_details D
                        where  A.status_flag>0 and  D.item_heading is not null  and
                            
                                
                        A.insp_no = D.insp_no_id and D.status_flag >0 and A.mom_officer_id = %s and (A.mom_date >= %s and A.mom_date <= %s) ''',[desig_code,datefrom,dateto])
                        mom_total_item = cursor.fetchall()
                        mom_total_total_item +=mom_total_item[0][0]
       

                        # total_item_pending
                        cursor = connection.cursor()
                        cursor.execute(''' SELECT count( distinct B.item_no_id) total_item
                        FROM public.mom_insp_details A,
                            public.mom_marked_members B,
                        
                        public.mom_item_details D
                        where  A.status_flag between 1 and 3 and
                            B.item_no_id=D.item_no and
                                
                        A.insp_no = D.insp_no_id and D.status_flag between 1 and 3 and A.mom_officer_id = %s and (A.mom_date >= %s and A.mom_date <= %s)''',[desig_code,datefrom,dateto])
                        mom_total_item_pending = cursor.fetchall()
                        mom_total_total_item_pending +=mom_total_item_pending[0][0]
                     
                        # total_item_overdue
                        cursor = connection.cursor()
                        cursor.execute(''' SELECT count( distinct B.item_no_id) total_item
                        FROM public.mom_insp_details A,
                            public.mom_marked_members B,
                        
                        public.mom_item_details D
                        where B.item_no_id=D.item_no and A.status_flag between 1 and 4 and
                                
                        A.insp_no = D.insp_no_id and D.status_flag between 1 and 3 and
                                D.target_date < now() and A.mom_officer_id = %s and (A.mom_date >= %s and A.mom_date <= %s) ''',[desig_code,datefrom,dateto])
                        mom_total_item_overdue = cursor.fetchall()
                        mom_total_total_item_overdue +=mom_total_item_overdue[0][0]

                        # %complied 
                        try:
                            mom_per_complied = ((mom_total_item-mom_total_item_pending)/mom_total_item)*100
                            
                        except:
                            mom_per_complied = 0
                        

                        
                        # DO LETTER OFFICER WISE -----------------------------------------------------------
                        # user = request.user
                        dol=list(m4.do_upload.objects.filter(desig_id_id=desig_code).values_list('id',flat = True))
                        
                        # TOTAL OPEN
                        do_total_open=m4.do_act.objects.filter(id_upload__in = dol).count()
                        do_total_total_open += do_total_open

                        # TOTAL PENDING
                        do_total_pending=m4.do_act.objects.filter(id_upload__in = dol,status_flag=False).count()
                        do_total_total_pending += do_total_pending

                        # TOTAL CLOSED
                        do_total_closed=m4.do_act.objects.filter(id_upload__in = dol,status_flag=True).count()
                        do_total_total_closed += do_total_closed
                        # per complied
                        try:
                            do_per_complied = (do_total_closed / do_total_open) * 100
                        except:
                            do_per_complied = 0
                        # do_total_total_per_complied +=do_per_complied
                        

                        ''' TASK TRACKER '''
                        # total task tracker assign data
                        # task_assigned_insp = m1.target_compliance.objects.filter(marked_no__item_no__inspection_no__inspection_officer__rly_unit__location_code = i, task_flag=1).exclude(status_flag = 3).count()
                        task_assigned = m1.target_compliance.objects.filter(assigned_by__designation_code = desig_code).exclude(status_flag = 3).count()
                        # task_assigned = task_assigned_insp+task_assigned_tracker
                        total_total_task_assign += task_assigned

                        # total task tracker completed data
                        # task_completed_insp = m1.target_compliance.objects.filter(marked_no__item_no__inspection_no__inspection_officer__rly_unit__location_code = i, task_flag=1,status_flag = 3).count()
                        task_completed = m1.target_compliance.objects.filter(assigned_by__designation_code = desig_code, status_flag = 3).count()
                        # task_completed = task_completed_insp + task_completed_tracker
                        total_total_task_completed += task_completed
                        
                        # total task tracker open data
                        totol_open = task_assigned+task_completed
                        task_total_total_open += totol_open

                        try:
                            task_per_complied = (task_completed / totol_open) * 100
                        except:
                            task_per_complied = 0
                        
                        j=models.Level_Desig.objects.filter(designation_code=i).values('designation')[0]['designation']
                        # print("designation",j)
                        my_data.append({'rly':j,"total_inspection":total_inspection[0][0],"total_closed":total_closed,
                        "total_open":total_open[0][0],"total_item":total_item[0][0],"total_item_pending":total_item_pending[0][0],
                        'total_item_overdue':total_item_overdue[0][0],"per_complied":per_complied,"mom_total_inspection":mom_total_inspection,"mom_total_closed":mom_total_closed,
                        "mom_total_open":mom_total_open,"mom_total_item":mom_total_item,"mom_total_item_pending":mom_total_item_pending,
                        'mom_total_item_overdue':mom_total_item_overdue,"mom_per_complied":mom_per_complied,'do_total_open':do_total_open,
                        'do_total_pending':do_total_pending,'do_total_closed':do_total_closed,
                        'do_per_complied':do_per_complied,'task_assigned':task_assigned,"task_completed":task_completed,
                        'totol_open':totol_open,'task_per_complied':task_per_complied})
    
                try:
                
                    total_total_per_complied = ((total_total_item-total_total_item_pending)/total_total_item)*100
                except:
                
                    total_total_per_complied = 0
                
                try:
                
                    mom_total_total_per_complied = ((mom_total_total_item-mom_total_total_item_pending)/mom_total_total_item)*100
                except:
                
                    mom_total_total_per_complied = 0
                
                try:
                
                    do_total_total_per_complied = ((do_total_total_closed)/do_total_total_open)*100
                except:
                
                    do_total_total_per_complied = 0
                try:
                
                    task_total_total_per_complied = ((total_total_task_completed)/task_total_total_open)*100
                except:
                
                    task_total_total_per_complied = 0

                return JsonResponse({'rly_list':my_data,'total_total_inspection':total_total_inspection,"total_total_closed":total_total_closed,
                "total_total_open":total_total_open,"total_total_item":total_total_item,"total_total_item_pending":total_total_item_pending,
                "total_total_item_overdue":total_total_item_overdue,"total_total_per_complied":total_total_per_complied,
                'mom_total_total_inspection':mom_total_total_inspection,"mom_total_total_closed":mom_total_total_closed,
                "mom_total_total_open":mom_total_total_open,"mom_total_total_item":mom_total_total_item,"mom_total_total_item_pending":mom_total_total_item_pending,
                "mom_total_total_item_overdue":mom_total_total_item_overdue,"mom_total_total_per_complied":mom_total_total_per_complied,'do_total_total_open':do_total_total_open,
                'do_total_total_pending':do_total_total_pending,'do_total_total_closed':do_total_total_closed,
                'do_total_total_per_complied':do_total_total_per_complied,"task_total_total_open":task_total_total_open,
                'total_total_task_assign':total_total_task_assign,'total_total_task_completed':total_total_task_completed,
                'task_total_total_per_complied':task_total_total_per_complied}, safe=False)
       
        
        return JsonResponse({'success':False}, status=400)
     
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="fetch_desig_ajax",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})




from django.test import Client
import csv
def logintesting():
    obj = m1.MyUser.objects.filter(username__isnull = False).order_by('id')

    c = Client()
    for i in range(obj.count()):
        try:
            r = c.post('',{'email':obj[i].username,'password':obj[i].password})
            # print(r.status_code)
            # print("id",obj[i].id)
            # print(obj[i].email)
         
            with open('successlog1.csv','a',encoding='UTF8') as f:
                try:
                    desig = models.Level_Desig.objects.exclude(delete_flag=True).get(official_email_ID=obj[i].email).designation
                except:
                    desig = 'Designation Not Found'
                writer = csv.writer(f)
                # writer.writerow(['id','email','password','error'])
                writer.writerow([obj[i].id,str(obj[i].email),str(desig)])
            print('-------------------------------------------------')
        except Exception as e:
            # print(e)
            # print("id",obj[i].id)
            # print(obj[i].email)
            # print(obj[i].password)
            with open('errorlog1.csv','a',encoding='UTF8') as f:
                try:
                    desig = models.Level_Desig.objects.exclude(delete_flag=True).get(official_email_ID=obj[i].email).designation
                except:
                    desig = 'Designation Not Found'
                writer = csv.writer(f)
                # writer.writerow(['id','email','password','error'])
                writer.writerow([obj[i].id,str(obj[i].email),desig,e])
               
scheduler = BackgroundScheduler()
scheduler.start()
ob = scheduler.add_job(logintesting, 'cron', year='*', month='*', day='*', hour=12, minute=40, second=10)



''' PDF VIEW OF INSPECTION REPORT '''
def ByPDFtorender(request):
            rly_list=request.POST.getlist("chk[]")
            datefrom=request.POST.get("datefrom")
            dateto=request.POST.get("dateto")
            print("mydates22222222",datefrom,dateto)
            
            print("rly_listrly_list2222222222222",rly_list,type(rly_list))
            puproduction_type = list(models.railwayLocationMaster.objects.filter(location_type__in = rly_list).values_list('location_code',flat = True).order_by('location_code'))
            # print(puproduction_type)
            total_total_inspection = 0
            total_total_closed = 0
            total_total_open = 0
            total_total_item = 0
            total_total_item_pending = 0
            total_total_item_overdue = 0
            total_total_do = 0
            total_total_mom = 0
            total_total_task_assign = 0
            total_total_task_completed = 0

            total_total_per_complied = 0
            total_total_per_complied = 0
            my_data = []
            if datefrom and dateto:
                # print("inside if")
                datefrom = datetime.strptime(datefrom,'%d-%m-%Y')
                dateto = datetime.strptime(dateto,'%d-%m-%Y')
                for i in puproduction_type:
                    
                    # total inspection 
                    cursor = connection.cursor()
                    cursor.execute(''' SELECT count( DISTINCT A.inspection_no) total_inspection
                    FROM public.inspects_inspection_details A,
                    public.myadmin_level_desig B,
                    public.inspects_insp_multi_location C
                    where A.inspection_officer_id = B.designation_code and A.status_flag!=0 and
                            A.inspection_no = C.inspection_no_id  and C.type ='HQ' and C.item = %s and
                            (A.inspected_on >= %s and A.inspected_on <= %s) ''',[str(i),datefrom,dateto])
                    total_inspection = cursor.fetchall()
                    total_total_inspection +=total_inspection[0][0]
                    cursor.close()
                    # print("total_inspection45",total_inspection[0][0])

                    # total_closed
                    cursor = connection.cursor()
                    cursor.execute(''' SELECT count( DISTINCT A.inspection_no) total_closed
                    FROM public.inspects_inspection_details A,
                    public.myadmin_level_desig B,
                    public.inspects_insp_multi_location C
                    where A.inspection_officer_id = B.designation_code and A.status_flag=4 and
                            A.inspection_no = C.inspection_no_id  and C.type ='HQ' and C.item = %s and
                            A.inspected_on >= %s and A.inspected_on <= %s ''',[str(i),datefrom,dateto])
                    total_closed = cursor.fetchall()
                    total_total_closed +=total_closed[0][0]
                    cursor.close()

                    # pending
                    cursor = connection.cursor()
                    cursor.execute(''' SELECT count( DISTINCT A.inspection_no) total_open
                    FROM public.inspects_inspection_details A,
                    public.myadmin_level_desig B,
                    public.inspects_insp_multi_location C
                    where A.inspection_officer_id = B.designation_code and A.status_flag between 1 and 3 and
                            A.inspection_no = C.inspection_no_id  and C.type ='HQ' and C.item = %s and
                            A.inspected_on >= %s and A.inspected_on <= %s ''',[str(i),datefrom,dateto])
                    total_open = cursor.fetchall()
                    total_total_open +=total_open[0][0]
                    cursor.close()

                    # total_item
                    cursor = connection.cursor()
                    
                    cursor.execute(''' SELECT count( distinct B.item_no_id) total_item
                    FROM public.inspects_inspection_details A,
                     public.inspects_marked_officers B,
                    public.inspects_insp_multi_location C,
                    public.inspects_item_details D
                    where  A.status_flag>0 and
                        B.item_no_id=D.item_no and
                            A.inspection_no = C.inspection_no_id  and C.type ='HQ' and
                    A.inspection_no = D.inspection_no_id and D.status_flag >0 and C.item = %s and
                       A.inspected_on >= %s and A.inspected_on <= %s''',[str(i),datefrom,dateto])

                    
                    total_item = cursor.fetchall()
                    total_total_item +=total_item[0][0]
                    cursor.close()

                    # total_item_pending
                    cursor = connection.cursor()
                    cursor.execute(''' SELECT count( distinct B.item_no_id) total_item
                    FROM public.inspects_inspection_details A,
                     public.inspects_marked_officers B,
                    public.inspects_insp_multi_location C,
                    public.inspects_item_details D
                    where  A.status_flag between 1 and 3 and
                        B.item_no_id=D.item_no and
                            A.inspection_no = C.inspection_no_id  and C.type ='HQ' and
                    A.inspection_no = D.inspection_no_id and D.status_flag between 1 and 3 and C.item =  %s and
                            A.inspected_on >= %s and A.inspected_on <= %s ''',[str(i),datefrom,dateto])
                    total_item_pending = cursor.fetchall()
                    total_total_item_pending +=total_item_pending[0][0]
                    cursor.close()

                    
                    # total mom inspection
                    total_mom_inspection =m3.Insp_details.objects.filter(mom_officer__rly_unit__location_code = i).count()
                    total_total_mom += total_mom_inspection

                    # total do inspection
                    total_do_inspection =m4.do_upload.objects.filter(desig_id__rly_unit__location_code = i).count()
                    total_total_do += total_do_inspection

                    # total task tracker assign data
                    task_assigned_insp = m1.target_compliance.objects.filter(marked_no__item_no__inspection_no__inspection_officer__rly_unit__location_code = i, task_flag=1).exclude(status_flag = 3).count()
                    task_assigned_tracker = m1.target_compliance.objects.filter(assigned_by__rly_unit__location_code = i, task_flag=2).exclude(status_flag = 3).count()
                    task_assigned = task_assigned_insp+task_assigned_tracker
                    total_total_task_assign += task_assigned


                    # total task tracker completed data

                    task_completed_insp = m1.target_compliance.objects.filter(marked_no__item_no__inspection_no__inspection_officer__rly_unit__location_code = i, task_flag=1,status_flag = 3).count()
                    task_completed_tracker = m1.target_compliance.objects.filter(assigned_by__rly_unit__location_code = i, task_flag=2,status_flag = 3).count()
                    task_completed = task_completed_insp + task_completed_tracker
                    total_total_task_completed += task_completed

                    # total_item_overdue
                    cursor = connection.cursor()
                    cursor.execute(''' SELECT count( distinct B.item_no_id) total_item
                    FROM public.inspects_inspection_details A,
                     public.inspects_marked_officers B,
                    public.inspects_insp_multi_location C,
                    public.inspects_item_details D
                    where B.item_no_id=D.item_no and A.status_flag between 1 and 4 and
                            A.inspection_no = C.inspection_no_id  and C.type ='HQ' and
                    A.inspection_no = D.inspection_no_id and D.status_flag between 1 and 3 and
                            D.target_date < now() and C.item = %s and
                            A.inspected_on >= %s and A.inspected_on <= %s  ''',[str(i),datefrom,dateto])
                    total_item_overdue = cursor.fetchall()
                    total_total_item_overdue +=total_item_overdue[0][0]
                    cursor.close()

                    # % complied
                    try:
                        per_complied = ((total_item[0][0]-total_item_pending[0][0])/total_item[0][0])*100
                   
                    except:
                        per_complied = 0
                

                    my_data.append({'rly':i,"total_inspection":total_inspection[0][0],"total_closed":total_closed[0][0],
                    "total_open":total_open[0][0],"total_item":total_item[0][0],"total_item_pending":total_item_pending[0][0],
                    'total_item_overdue':total_item_overdue[0][0],"per_complied":per_complied,'total_mom_inspection':total_mom_inspection,
                    'total_do_inspection':total_do_inspection,"task_assigned":task_assigned,'task_completed':task_completed})
            try:
                total_total_per_complied = ((total_total_item - total_total_item_pending)/total_total_item)*100
            except:
                total_total_per_complied = 0
            # print("mydata",total_total_item_overdue)
            rly_list = ', '.join(rly_list)
            context = {'rly_list':my_data,'total_total_inspection':total_total_inspection,"total_total_closed":total_total_closed,
            "total_total_open":total_total_open,"total_total_item":total_total_item,"total_total_item_pending":total_total_item_pending,
            "total_total_item_overdue":total_total_item_overdue,"total_total_per_complied":total_total_per_complied,'total_total_mom':total_total_mom,'total_total_do':total_total_do,
            'total_total_task_assign':total_total_task_assign,"total_total_task_completed":total_total_task_completed,'datefrom':datefrom,
            'dateto':dateto,'rly_list2':rly_list}
            # return render(request,'pdfview.html',context)
            pdf=render_to_pdf('pdfview.html',context) 
            return HttpResponse(pdf, content_type='application/pdf')


'''pdf view of division wise'''
def ByPDFtorenderDivisionwise(request):
        rly_list=request.POST.getlist("chk[]")
        datefrom=request.POST.get("datefrom")
        dateto=request.POST.get("dateto")
        print("mydates",datefrom,dateto)
        
        print("rly_listrly_list44444444",rly_list,type(rly_list))
        # puproduction_type = list(models.railwayLocationMaster.objects.filter(location_type__in = rly_list).values_list('location_code',flat = True).order_by('location_code'))
        # print('puproduction_type,',puproduction_type)
        total_total_inspection = 0
        total_total_closed = 0
        total_total_open = 0
        total_total_item = 0
        total_total_item_pending = 0
        total_total_item_overdue = 0
        total_total_per_complied = 0
        my_data = []
        if datefrom and dateto:
            # print("inside if")
            datefrom = datetime.strptime(datefrom,'%d-%m-%Y')
            dateto = datetime.strptime(dateto,'%d-%m-%Y')
            for i in rly_list:
                
                # total inspection
                cursor = connection.cursor()
                cursor.execute(''' SELECT count( DISTINCT A.inspection_no) total_inspection
                FROM public.inspects_inspection_details A,
                public.myadmin_level_desig B,
                public.inspects_insp_multi_location C
                where A.inspection_officer_id = B.designation_code and A.status_flag!=0 and
                        A.inspection_no = C.inspection_no_id  and C.type =%s and C.item = %s and
                        (A.inspected_on >= %s and A.inspected_on <= %s) ''',[str(i.split('-')[1]),str(i.split('-')[0]),datefrom,dateto])
                total_inspection = cursor.fetchall()
                total_total_inspection +=total_inspection[0][0]
                cursor.close()
                # print("total_inspection45",total_inspection[0][0])

                # total_closed
                cursor = connection.cursor()
                cursor.execute(''' SELECT count( DISTINCT A.inspection_no) total_closed
                FROM public.inspects_inspection_details A,
                public.myadmin_level_desig B,
                public.inspects_insp_multi_location C
                where A.inspection_officer_id = B.designation_code and A.status_flag=4 and
                        A.inspection_no = C.inspection_no_id  and C.type =%s and C.item = %s and
                        (A.inspected_on >= %s and A.inspected_on <= %s) ''',[str(i.split('-')[1]),str(i.split('-')[0]),datefrom,dateto])
                total_closed = cursor.fetchall()
                total_total_closed +=total_closed[0][0]
                cursor.close()

                # pending
                cursor = connection.cursor()
                cursor.execute(''' SELECT count( DISTINCT A.inspection_no) total_open
                FROM public.inspects_inspection_details A,
                public.myadmin_level_desig B,
                public.inspects_insp_multi_location C
                where A.inspection_officer_id = B.designation_code and A.status_flag between 1 and 3 and
                        A.inspection_no = C.inspection_no_id  and C.type =%s and C.item = %s and
                        (A.inspected_on >= %s and A.inspected_on <= %s) ''',[str(i.split('-')[1]),str(i.split('-')[0]),datefrom,dateto])
                total_open = cursor.fetchall()
                total_total_open +=total_open[0][0]
                cursor.close()

                # total_item
                cursor = connection.cursor()
                
                cursor.execute(''' SELECT count( distinct B.item_no_id) total_item
                FROM public.inspects_inspection_details A,
                    public.inspects_marked_officers B,
                public.inspects_insp_multi_location C,
                public.inspects_item_details D
                where  A.status_flag>0 and
                    B.item_no_id=D.item_no and
                        A.inspection_no = C.inspection_no_id  and C.type =%s and
                A.inspection_no = D.inspection_no_id and D.status_flag >0 and C.item = %s and
                        (A.inspected_on >= %s and A.inspected_on <= %s) ''',[str(i.split('-')[1]),str(i.split('-')[0]),datefrom,dateto])

                
                total_item = cursor.fetchall()
                total_total_item +=total_item[0][0]
                cursor.close()

                # total_item_pending
                cursor = connection.cursor()
                cursor.execute(''' SELECT count( distinct B.item_no_id) total_item
                FROM public.inspects_inspection_details A,
                    public.inspects_marked_officers B,
                public.inspects_insp_multi_location C,
                public.inspects_item_details D
                where  A.status_flag between 1 and 3 and
                    B.item_no_id=D.item_no and
                        A.inspection_no = C.inspection_no_id  and C.type =%s and
                A.inspection_no = D.inspection_no_id and D.status_flag between 1 and 3 and C.item = %s and
                        (A.inspected_on >= %s and A.inspected_on <= %s) ''',[str(i.split('-')[1]),str(i.split('-')[0]),datefrom,dateto])
                total_item_pending = cursor.fetchall()
                total_total_item_pending +=total_item_pending[0][0]
                cursor.close()


                # total_item_overdue
                cursor = connection.cursor()
                cursor.execute(''' SELECT count( distinct B.item_no_id) total_item
                FROM public.inspects_inspection_details A,
                    public.inspects_marked_officers B,
                public.inspects_insp_multi_location C,
                public.inspects_item_details D
                where B.item_no_id=D.item_no and A.status_flag between 1 and 4 and
                        A.inspection_no = C.inspection_no_id  and C.type =%s and
                A.inspection_no = D.inspection_no_id and D.status_flag between 1 and 3 and
                        D.target_date < now() and C.item = %s and
                        (A.inspected_on >= %s and A.inspected_on <= %s) ''',[str(i.split('-')[1]),str(i.split('-')[0]),datefrom,dateto])
                total_item_overdue = cursor.fetchall()
                total_total_item_overdue +=total_item_overdue[0][0]
                cursor.close()

                # %complied 
                try:
                    per_complied = ((total_item[0][0]-total_item_pending[0][0])/total_item[0][0])*100
                    
                except:
                    per_complied = 0
                    
                location_desc = models.railwayLocationMaster.objects.filter(location_code = str(i.split('-')[0]),location_type = str(i.split('-')[1]))
                print(location_desc)
                my_data.append({'rly':location_desc[0].location_description+'-'+str(i.split('-')[1]),"total_inspection":total_inspection[0][0],"total_closed":total_closed[0][0],
                "total_open":total_open[0][0],"total_item":total_item[0][0],"total_item_pending":total_item_pending[0][0],
                'total_item_overdue':total_item_overdue[0][0],"per_complied":per_complied})

        try:
            
            total_total_per_complied = ((total_total_item-total_total_item_pending)/total_total_item)*100
        except:
            
            total_total_per_complied = 0


        # railways list
        rly_list = ', '.join(rly_list)
        context = {'rly_list':my_data,'total_total_inspection':total_total_inspection,"total_total_closed":total_total_closed,
        "total_total_open":total_total_open,"total_total_item":total_total_item,"total_total_item_pending":total_total_item_pending,
        "total_total_item_overdue":total_total_item_overdue,"total_total_per_complied":total_total_per_complied,"rly_list2":rly_list,
        'datefrom':datefrom,"dateto":dateto}
        pdf=render_to_pdf('pdfviewDivisionwise.html',context)
        return HttpResponse(pdf, content_type='application/pdf') 

def openForwardGraph(request,for_no):
    print(for_no)
    forward_ids=list(m1.Marked_Officers_forward.objects.filter(marked_no=for_no).values_list('marked_no_forward',flat=True).order_by('marked_no_forward'))
    insp_officer=m1.Marked_Officers.objects.filter(marked_no=for_no).values('item_no__inspection_no__inspection_officer__designation')[0]['item_no__inspection_no__inspection_officer__designation']
    item_no=m1.Marked_Officers.objects.filter(marked_no=for_no).values('item_no')[0]['item_no']
    marked_ofcs=list(m1.Marked_Officers.objects.filter(item_no=item_no).values_list('marked_to__designation',flat=True))
    # marked_ofcs=list(m1.Marked_Officers.objects.filter(item_no=item_no).values('marked_no','marked_to__designation'))
    node_ofc=m1.Marked_Officers_forward.objects.filter(marked_no=for_no, level=0).values('created_by_forward')[0]['created_by_forward']
    node_ofc=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=node_ofc).values('designation')[0]['designation']

    forwards_graph=[]
    for_graphs=[]
    final_list=[]
    for_graphs=for_below(forward_ids,final_list)
    # for f in forward_ids:
    #     lst=for_below(request,f)
    #     for_graphs.append({f:lst})
    #     if len(lst):
    #         for l in lst:
    #             sub_lst=for_below(request,l)
    #             for_graphs.append({f:lst})
    print(for_graphs)
    for f in forward_ids:
        temp={}
        forwarded_by=m1.Marked_Officers_forward.objects.filter(marked_no_forward=f).values('created_by_forward')[0]['created_by_forward']
        temp['forwarded_by']=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=forwarded_by).values('designation')[0]['designation'] 
        temp['forwarded_to']=m1.Marked_Officers_forward.objects.filter(marked_no_forward=f).values('marked_to_forward__designation')[0]['marked_to_forward__designation']
        child=m1.Marked_Officers_forward.objects.filter(marked_no_forward=f).values('further_forward')
        temp['child']=child[0]['further_forward'] if child!=None else 'NA'
        temp['parent']=f if forward_ids[0]!=f else '-1'
        forwards_graph.append(temp)
    forward_graph={}
    for_graph_all={}
    for g in for_graphs:
        for f in g:
            for_graph_all[f]=g[f]
            temp={}
            forwarded_by=m1.Marked_Officers_forward.objects.filter(marked_no_forward=f).values('created_by_forward')[0]['created_by_forward']
            temp['forwarded_by']=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=forwarded_by).values('designation')[0]['designation'] 
            temp['forwarded_to']=m1.Marked_Officers_forward.objects.filter(marked_no_forward=f).values('marked_to_forward__designation')[0]['marked_to_forward__designation']
            temp['status_flag']=m1.Marked_Officers_forward.objects.filter(marked_no_forward=f).values('status_flag')[0]['status_flag']
            temp['pending_since']=(datetime.today()-(m1.Marked_Officers_forward.objects.filter(marked_no_forward=f).values('created_on_forward')[0]['created_on_forward'])).days
            child=m1.Marked_Officers_forward.objects.filter(marked_no_forward=f).values('further_forward')
            temp['child']=child[0]['further_forward'] if child[0]['further_forward'] else 0
            parent=m1.Marked_Officers_forward.objects.filter(marked_no_forward=f).values('further_forward__marked_no_forward')
            temp['parent']=parent[0]['further_forward__marked_no_forward'] if parent[0]['further_forward__marked_no_forward'] else -1
            forward_graph[f]=temp
    print(forward_graph)
    print(for_graph_all)

    context={
        'forwards_graph':forwards_graph,
        'insp_officer':insp_officer,
        'marked_ofcs':marked_ofcs,
        'node_ofc':node_ofc,
        'for_graphs':for_graphs,
        'forward_graph':forward_graph,
        'forward_ids':forward_ids,
        'for_graph_all':for_graph_all
    }
    return render(request, 'forwardGraph.html' ,context)
    
def for_below(forward_ids,final_list):
    for f in forward_ids:
        lst=list(m1.Marked_Officers_forward.objects.filter(further_forward=f).values_list('marked_no_forward', flat=True))
        if any(f in keys for keys in final_list):   
            pass
        else:
            final_list.append({f:lst})
        if len(lst):
            for_below(lst,final_list)
        
    return final_list

# saud faisal


''' FOR DETAILS VIEW OF INSPECTION REPORT '''
def inspection_report_details_view(request,rly,datefrom,dateto,type):
    
    datefrom = datetime.strptime(datefrom,'%d-%m-%Y')
    dateto = datetime.strptime(dateto,'%d-%m-%Y')
    print(datefrom,dateto,type,'datetodatetodateto')
    if type == 'CINOTE':
        ''' TOTAL INSPECTION CREATED BY RLY '''
        cursor = connection.cursor()
        cursor.execute(''' SELECT  DISTINCT A.inspected_on,A.inspection_note_no,A.inspection_title,D.location_code,D.location_type
                    FROM public.inspects_inspection_details A,
                    public.myadmin_level_desig B,
                    public.inspects_insp_multi_location C,
					public.myadmin_railwaylocationmaster D
                    where A.inspection_officer_id = B.designation_code and A.status_flag!=0 and
                    B.rly_unit_id = D.rly_unit_code and A.inspection_no = C.inspection_no_id  and C.type ='HQ' and C.item = %s and
                    (A.inspected_on >= %s and A.inspected_on <= %s) order by A.inspected_on desc
                     ''',[rly,datefrom,dateto])
        insp_data = cursor.fetchall()
        print(insp_data)
        return render(request,'inspection_report_details_view.html',{'insp_data':insp_data,'rly':rly,'type':type})
    
    elif type == 'FCINOTE':
        ''' TOTAL INSPECTION CREATED BY RLY '''
        cursor = connection.cursor()
        cursor.execute(''' SELECT DISTINCT A.inspected_on,A.inspection_note_no,A.inspection_title
                    FROM public.inspects_inspection_details A,
                    public.myadmin_level_desig B,
                    public.inspects_insp_multi_location C
                    where A.inspection_officer_id = B.designation_code and A.status_flag=4 and
                            A.inspection_no = C.inspection_no_id  and C.type ='HQ' and C.item = %s and
                            (A.inspected_on >= %s and A.inspected_on <= %s) order by A.inspected_on desc ''',[rly,datefrom,dateto])
        insp_data = cursor.fetchall()
        print(insp_data)
        return render(request,'inspection_report_details_view.html',{'insp_data':insp_data,'rly':rly,'type':type})
    
    elif type == 'PCINOTE':
        ''' TOTAL INSPECTION CREATED BY RLY '''
        cursor = connection.cursor()
        cursor.execute(''' SELECT DISTINCT A.inspected_on,A.inspection_note_no,A.inspection_title
                    FROM public.inspects_inspection_details A,
                    public.myadmin_level_desig B,
                    public.inspects_insp_multi_location C
                    where A.inspection_officer_id = B.designation_code and A.status_flag between 1 and 3 and
                            A.inspection_no = C.inspection_no_id  and C.type ='HQ' and C.item = %s and
                            (A.inspected_on >= %s and A.inspected_on <= %s) order by A.inspected_on desc ''',[rly,datefrom,dateto])
        insp_data = cursor.fetchall()
        print(insp_data)
        return render(request,'inspection_report_details_view.html',{'insp_data':insp_data,'rly':rly,'type':type})
    
    elif type == 'TIPOINT':
        ''' TOTAL INSPECTION POINTS OF ITEMS'''
        cursor = connection.cursor()
        cursor.execute('''
            SELECT distinct A.inspection_note_no,D.des_id,A.inspected_on,D.observation
                    FROM public.inspects_inspection_details A,
                     public.inspects_marked_officers B,
                    public.inspects_insp_multi_location C,
                    public.inspects_item_details D
                    where  A.status_flag>0 and
                    B.item_no_id=D.item_no and
                    A.inspection_no = C.inspection_no_id  and C.type ='HQ' and
                    A.inspection_no = D.inspection_no_id and D.status_flag >0 and C.item =%s and
                    (A.inspected_on >= %s and A.inspected_on <= %s) order by A.inspected_on desc ''',[rly,datefrom,dateto])
        insp_data = cursor.fetchall()
        print(insp_data)
        return render(request,'inspection_report_details_view.html',{'insp_data':insp_data,'rly':rly,'type':type})
    
    elif type == 'PIPOINT':
        ''' TOTAL INSPECTION POINTS OF ITEMS'''
        cursor = connection.cursor()
        cursor.execute('''
            SELECT distinct A.inspection_note_no,D.des_id,A.inspected_on,D.observation
                    FROM public.inspects_inspection_details A,
                    public.inspects_marked_officers B,
                    public.inspects_insp_multi_location C,
                    public.inspects_item_details D
                    where  A.status_flag>0 and
                    B.item_no_id=D.item_no and
                    A.inspection_no = C.inspection_no_id  and C.type ='HQ' and
                    A.inspection_no = D.inspection_no_id and D.status_flag >0 and C.item =%s and
                    (A.inspected_on >= %s and A.inspected_on <= %s) order by A.inspected_on desc ''',[rly,datefrom,dateto])
        insp_data = cursor.fetchall()
        print(insp_data)
        return render(request,'inspection_report_details_view.html',{'insp_data':insp_data,'rly':rly,'type':type})
    
    elif type == 'OIPOINT':
        ''' TOTAL INSPECTION POINTS OF ITEMS'''
        cursor = connection.cursor()
        cursor.execute('''
            SELECT distinct A.inspection_note_no,D.des_id,A.inspected_on,D.observation
                    FROM public.inspects_inspection_details A,
                     public.inspects_marked_officers B,
                    public.inspects_insp_multi_location C,
                    public.inspects_item_details D
                    where B.item_no_id=D.item_no and A.status_flag between 1 and 4 and
                            A.inspection_no = C.inspection_no_id  and C.type ='HQ' and
                    A.inspection_no = D.inspection_no_id and D.status_flag between 1 and 3 and
                            D.target_date < now() and C.item =%s and
                            (A.inspected_on >= %s and A.inspected_on <= %s) order by A.inspected_on desc ''',[rly,datefrom,dateto])
        
        insp_data = cursor.fetchall()
        print(insp_data)
        return render(request,'inspection_report_details_view.html',{'insp_data':insp_data,'rly':rly,'type':type})
    
    elif type == 'MOMISSUED':
        ''' MOM ISSUED '''
        insp_data =m3.Insp_details.objects.filter(mom_officer__rly_unit__location_code = rly,mom_date__range = [datefrom,dateto]).values('created_on',
            'mom_note_no','mom_title','mom_date','meeting_type').order_by('-mom_date')
                                                                                                    
        print(insp_data)
        return render(request,'inspection_report_details_view.html',{'insp_data':insp_data,'rly':rly,'type':type})
    
    elif type == 'DOISSUED':
        ''' DO ISSUED '''
        insp_data = m4.do_upload.objects.filter(desig_id__rly_unit__location_code = rly,do_letter_date__range = [datefrom,dateto]).values('do_letter_date','do_letter_no','subject','desig_id__designation').order_by('-do_letter_date')
    
        print(insp_data)
        return render(request,'inspection_report_details_view.html',{'insp_data':insp_data,'rly':rly,'type':type})
    
    elif type == 'TTASSIGNED':
        ''' TASK TRACKER ASSIGNED '''
        insp_data = m1.target_compliance.objects.filter(assigned_by__rly_unit__location_code = rly,target_date__range = [datefrom,dateto]).exclude(status_flag = 3).values('task_descp',
                            'assigned_by__rly_unit__location_code','init_date','target_date','task_type').order_by('-target_date')
    
        print(insp_data)
        return render(request,'inspection_report_details_view.html',{'insp_data':insp_data,'rly':rly,'type':type})

    elif type == 'TTCOMPLETED':
        ''' TASK TRACKER COMPLETED '''
        insp_data = m1.target_compliance.objects.filter(assigned_by__rly_unit__location_code = rly,status_flag = 3,target_date__range = [datefrom,dateto]).values('task_descp',
                            'assigned_by__rly_unit__location_code','init_date','target_date','task_type').order_by('-target_date')
    
        print(insp_data)
        return render(request,'inspection_report_details_view.html',{'insp_data':insp_data,'rly':rly,'type':type})
    
    return render(request,'inspection_report_details_view.html')



# Hierarchy
# Hierarchy by Gourav
def build_tree(data):
    tree = {}
   
    for node in data:
        node_id = str(node['id'])
        parent_id = node['parent_id']

        if node_id not in tree:
            tree[node_id] = {'children': []}

        if parent_id not in tree:
            tree[parent_id] = {'children': []}

        tree[parent_id]['children'].append(tree[node_id])

    for node in data:
        node_id = str(node['id'])

        if node_id not in tree:
            tree[node_id] = {'children': []}

        tree[node_id]['data'] = node

    root_nodes = []
    for node_id, node in tree.items():
        if 'data' not in node:
            root_nodes.append(node)

    root_nodes = [node for node in root_nodes if node_id != 'None']
    return root_nodes

def print_tree(tree, level=0):
    if not tree:
        return
    indent = '           ' * level
    for node in tree:
        if 'data' in node:
            node_data = node['data']
            print(f"{indent} {node_data['name']} {node_data['id']}")

        children = node.get('children', [])
        print_tree(children, level + 1)


def func():
#TOTAL DRAFT CREATED BY ME
    draft_general=m1.Inspection_details.objects.filter(status_flag=0,inspection_officer=das_desig,inspected_on__gte=startDate,inspected_on__lte=endDate).values_list('inspection_no', flat=True)
    draft_field=m2.einspection_details.objects.filter(status=0,designation_id=das_desig,inspected_on__gte=startDate,inspected_on__lte=endDate).values_list('einspno', flat=True)
    total_drafts=len(draft_general)+len(draft_field)
    
    marked_items_draft_general = m1.Marked_Officers.objects.filter(item_no__inspection_no__in=draft_general).values_list('item_no', flat=True)
    marked_items_draft_field = m2.einsp_marked.objects.exclude(revert=2).filter(eitemid__einspno__in=draft_field).values_list('eitemid', flat=True)
    
    items_draft_general=m1.Item_details.objects.filter(item_no__in=marked_items_draft_general,inspection_no__in=draft_general).exclude(type='SSH').values_list('inspection_no',flat=True)
    items_draft_field=m2.einspection_item_detail.objects.filter(eitemid__in=marked_items_draft_field,einspno__in=draft_field).values_list('einspno', flat=True)
    total_drafts_items=len(items_draft_general)+len(items_draft_field)

    #TOTAL COMPLIED INSPECTIONS CREATED BY ME
    complied_general=m1.Inspection_details.objects.filter(status_flag=4,inspection_officer=das_desig,inspected_on__gte=startDate,inspected_on__lte=endDate).values_list('inspection_no', flat=True)
    complied_field=m2.einspection_details.objects.filter(status=4,designation_id=das_desig,inspected_on__gte=startDate,inspected_on__lte=endDate).values_list('einspno', flat=True)
    total_complied=len(complied_general)+len(complied_field)
    
    marked_items_complied_general = m1.Marked_Officers.objects.filter(item_no__inspection_no__in=complied_general).values_list('item_no', flat=True)
    marked_items_complied_field = m2.einsp_marked.objects.exclude(revert=2).filter(eitemid__einspno__in=complied_field).values_list('eitemid', flat=True)
    
    items_complied_general=m1.Item_details.objects.filter(item_no__in=marked_items_complied_general,inspection_no__in=complied_general).exclude(type='SSH').values_list('inspection_no',flat=True)
    items_complied_field=m2.einspection_item_detail.objects.filter(eitemid__in=marked_items_complied_field,einspno__in=complied_field).values_list('einspno', flat=True)
    total_complied_items=len(items_complied_general)+len(items_complied_field)

    #TOTAL PENDING INSPECTIONS CREATED BY ME
    pending_general=m1.Inspection_details.objects.filter(status_flag__in=[1,2],inspection_officer=das_desig,inspected_on__gte=startDate,inspected_on__lte=endDate).values_list('inspection_no', flat=True)
    pending_field=m2.einspection_details.objects.filter(status=1,designation_id=das_desig,inspected_on__gte=startDate,inspected_on__lte=endDate).values_list('einspno', flat=True)
    total_pending=len(pending_general)+len(pending_field)
    
    marked_items_pending_general = m1.Marked_Officers.objects.filter(item_no__inspection_no__in=pending_general).values_list('item_no', flat=True)
    marked_items_pending_field = m2.einsp_marked.objects.exclude(revert=2).filter(eitemid__einspno__in=pending_field).values_list('eitemid', flat=True)
    
    items_pending_general=m1.Item_details.objects.filter(item_no__in=marked_items_pending_general,inspection_no__in=pending_general).exclude(type='SSH').values_list('inspection_no',flat=True)
    items_pending_field=m2.einspection_item_detail.objects.filter(eitemid__in=marked_items_pending_field,einspno__in=pending_field).values_list('einspno', flat=True)
    total_pending_items=len(items_pending_general)+len(items_pending_field)

    #TOTAL INSPECTIONS CREATED BY ME
    total_issued=total_pending+total_complied
    total_issued_items=total_pending_items+total_complied_items

    #TOTAL FORWARDED INSPECTIONS BY ME 
    forwarded_items__pending_general = m1.Marked_Officers_forward.objects.filter(created_by_forward=das_desig, status_flag__in=[1,3]).values_list('marked_no', flat=True)
    forwarded_items_pending_field = m2.einsp_forward_marked.objects.filter(forwardBy_id=das_desig, status_flag__in=[1,3]).values_list('marked_no', flat=True)
    total_forwarded_items_pending = len(forwarded_items__pending_general)+len(forwarded_items_pending_field)

    forwarded_items__complied_general = m1.Marked_Officers_forward.objects.filter(created_by_forward=das_desig, status_flag__in=[2]).values_list('marked_no', flat=True)
    forwarded_items_complied_field = m2.einsp_forward_marked.objects.filter(forwardBy_id=das_desig, status_flag__in=[2]).values_list('marked_no', flat=True)
    total_forwarded_items_complied = len(forwarded_items__complied_general)+len(forwarded_items_complied_field)

    #TOTAL COMPLIED INSPECTIONS MARKED TO ME
    m2m_items_complied_general = m1.Marked_Officers.objects.filter(marked_to_id=das_desig, status_flag__in=[3,4]).values_list('item_no', flat=True)
    m2m_items_complied_field = m2.einsp_marked.objects.exclude(revert=2).filter(marked_to_id=das_desig,status_flag__in=[4]).values_list('eitemid', flat=True)
    items_m2m_complied_general=m1.Item_details.objects.filter(item_no__in=m2m_items_complied_general).exclude(type='SSH').values_list('inspection_no',flat=True)
    items_m2m_complied_field=m2.einspection_item_detail.objects.filter(eitemid__in=m2m_items_complied_general).values_list('einspno', flat=True)
    
    total_m2m_complied=len(items_m2m_complied_general)+len(items_m2m_complied_field)
    total_m2m_items_complied=len(m2m_items_complied_general) + len(m2m_items_complied_field)
    
    #TOTAL PENDING INSPECTIONS MARKED TO ME
    m2m_items_pending_general = m1.Marked_Officers.objects.filter(marked_to_id=das_desig, status_flag__in=[1,2]).values_list('item_no', flat=True)
    m2m_items_pending_field = m2.einsp_marked.objects.exclude(revert=2).filter(marked_to_id=das_desig,status_flag__in=[1,2,3]).values_list('eitemid', flat=True)
    items_m2m_pending_general=m1.Item_details.objects.filter(item_no__in=m2m_items_pending_general).exclude(type='SSH').values_list('inspection_no',flat=True)
    items_m2m_pending_field=m2.einspection_item_detail.objects.filter(eitemid__in=m2m_items_pending_general).values_list('einspno', flat=True)
    
    total_m2m_pending=len(items_m2m_pending_general)+len(items_m2m_pending_field)
    total_m2m_items_pending=len(m2m_items_pending_general) + len(m2m_items_pending_field)
    

    #TOTAL FORWARDED INSPECTIONS MARKED TO ME
    forwarded_items_m2m__pending_general = m1.Marked_Officers_forward.objects.filter(marked_to_forward_id=das_desig, status_flag__in=[1,3]).values_list('marked_no', flat=True)
    forwarded_items_m2m_pending_field = m2.einsp_forward_marked.objects.filter(forwardTo_id=das_desig, status_flag__in=[1,3]).values_list('marked_no', flat=True)
    total_forwarded_items_m2m_pending = len(forwarded_items_m2m__pending_general)+len(forwarded_items_m2m_pending_field)

    forwarded_items_m2m__complied_general = m1.Marked_Officers_forward.objects.filter(marked_to_forward_id=das_desig, status_flag__in=[2]).values_list('marked_no', flat=True)
    forwarded_items_m2m_complied_field = m2.einsp_forward_marked.objects.filter(forwardTo_id=das_desig, status_flag__in=[2]).values_list('marked_no', flat=True)
    total_forwarded_items_m2m_complied = len(forwarded_items_m2m__complied_general)+len(forwarded_items_m2m_complied_field)
    return 0


def hierarchyFormA(request):
     
    if request.method=='GET' or request.is_ajax():
        user = request.session.get('designation')
        #obj=models.Level_Desig.objects.filter(=request.user.username).values("designation","parent_desig_code","department","contactnumber","official_email_ID","empno_id__empno","empno_id__empname","empno_id__empmname","empno_id__emplname","empno_id__gender","empno_id__email","contactnumber","empno_id__currentzone", "empno_id__currentunitdivision","empno_id__appointmentdate","empno_id__superannuation_date","empno_id__pc7_level","empno_id__billunit","empno_id__service_status","empno_id__station_des")[0]

        print(user)
        # #obj= models.Level_Desig.objects.filter(currentUser=request.session.get('designation')).values('')

        # if(selDivision == ['']):
                
        #     zoneName = list(models.railwayLocationMaster.objects.filter(rly_unit_code__in = selZone).values_list('location_code',flat=True).distinct())
                
        #     obj6 = list(models.railwayLocationMaster.objects.filter(parent_rly_unit_code__in = selZone).values_list('rly_unit_code',flat=True).distinct())
        #     rlyidddd = selZone + obj6
        #     obj18 = list(models.Level_Desig.objects.filter(rly_unit__in = rlyidddd,parent_desig_code__isnull=False).exclude(parent_desig_code='').values(id = F('designation_code'), parent_id = F('parent_desig_code'), name = F('designation'), empfname = F('empno__empname'), empmname = F('empno__empmname'), emplname = F('empno__emplname')).distinct())                 
               
        #     tree = build_tree(obj18)
        #     tree_dict = {
        #     'tree': tree
        #     }
        #     datascource1 = convert_data1(tree_dict) 
        #     add_level_to_nodes(datascource1, 0)
        #     add_hybrid_to_level_2(datascource1, 0)
        #     datascource1= {'name': zoneName, 'children': datascource1['children']}
        #     obj19 =  list(models.Level_Desig.objects.filter(~Q(parent_desig_code__in = list(models.Level_Desig.objects.values_list('designation_code',flat = True).distinct()))).distinct().values_list('parent_desig_code',flat = True))
            
    #return JsonResponse(datascource1, safe=False)
    return JsonResponse()


from django.db import connection


def Submitfn(request):
     
    if request.method=='GET' or request.is_ajax():
        selZone = [request.GET.get('selZone')]
        selDivision = [request.GET.get('selDivision')]
        selDepartment= [request.GET.get('selDepartment')]#[None]
        print('zone', selZone)
        print('Div', selDivision)
        print('Dept', selDepartment)

       

        if(selZone == ['153'] and selDepartment == [''] ): #special condition for RB
            treeData = list(models.Level_Desig.objects.filter(rly_unit__in = selZone).values(id = F('designation_code'), parent_id = F('parent_desig_code'), name = F('designation'), empfname = F('empno__empname'), empmname = F('empno__empmname'), emplname = F('empno__emplname')).distinct())                        
        elif(selZone == ['153'] and selDepartment != [''] ): #special condition for RB
            treeData = list(models.Level_Desig.objects.filter(department_code_id__in = selDepartment, rly_unit__in = selZone).values(id = F('designation_code'), parent_id = F('parent_desig_code'), name = F('designation'), empfname = F('empno__empname'), empmname = F('empno__empmname'), emplname = F('empno__emplname')).distinct())                        
        
        elif(selZone == [''] and selDepartment != [''] ):
            treeData = list(models.Level_Desig.objects.filter(department_code_id__in = selDepartment).values(id = F('designation_code'), parent_id = F('parent_desig_code'), name = F('designation'), empfname = F('empno__empname'), empmname = F('empno__empmname'), emplname = F('empno__emplname')).distinct()) 

        elif(selZone == [''] and selDepartment == [''] ):
            #list includes undefined, null & empty nodes. Also exclude delete_flag = True
            obj19 =  list(models.Level_Desig.objects.filter(~Q(parent_desig_code__in = list(models.Level_Desig.objects.values_list('designation_code',flat = True).distinct()))).distinct().values_list('parent_desig_code',flat = True))      
            treeData = list(models.Level_Desig.objects.filter(designation = 'CRB&CEO').values('empno__empname',id = F('designation_code'), parent_id = F('parent_desig_code'), name = F('designation'), empfname = F('empno__empname'), empmname = F('empno__empmname'), emplname = F('empno__emplname')).distinct()) + list(models.Level_Desig.objects.exclude(parent_desig_code__in = obj19[1:]).filter(~Q(parent_desig_code=''),parent_desig_code__isnull=False).values(id = F('designation_code'), parent_id = F('parent_desig_code'), name = F('designation'), empfname = F('empno__empname'), empmname = F('empno__empmname'), emplname = F('empno__emplname')).distinct().order_by('d_level'))
                    
        else:
            
            locationtype = list(models.railwayLocationMaster.objects.filter(rly_unit_code__in = selZone).values_list('location_type',flat=True).distinct())
                
            headlevel = list(models.rlyhead.objects.filter(rlshortcode__in = locationtype).values_list('head_dlevel', flat=True).distinct()) 
                
            Rootdesig = list(models.Level_Desig.objects.filter(rly_unit__in = selZone, d_level__in = headlevel).values_list('designation',flat=True).distinct())

            RootHead = list(models.Level_Desig.objects.filter(rly_unit__in = selZone, d_level__in = headlevel).values_list('designation_code',flat=True).distinct())

            obj19 =  list(models.Level_Desig.objects.filter(Q(designation_code__in = list(models.Level_Desig.objects.filter(parent_desig_code__in = RootHead).values_list('designation_code',flat = True).distinct()))).distinct().values_list('designation_code',flat = True))      
                
            obj20 =  list(models.Level_Desig.objects.filter(Q(designation_code__in = list(models.Level_Desig.objects.filter(parent_desig_code__in = obj19).values_list('designation_code',flat = True).distinct()))).distinct().values_list('designation_code',flat = True)) 

            obj22 =  list(models.Level_Desig.objects.filter(Q(designation_code__in = list(models.Level_Desig.objects.filter(parent_desig_code__in = obj20).values_list('designation_code',flat = True).distinct()))).distinct().values_list('designation_code',flat = True))        
            
            obj23 =  list(models.Level_Desig.objects.filter(Q(designation_code__in = list(models.Level_Desig.objects.filter(parent_desig_code__in = obj22).values_list('designation_code',flat = True).distinct()))).distinct().values_list('designation_code',flat = True)) 
            obj24 =  list(models.Level_Desig.objects.filter(Q(designation_code__in = list(models.Level_Desig.objects.filter(parent_desig_code__in = obj23).values_list('designation_code',flat = True).distinct()))).distinct().values_list('designation_code',flat = True)) 
            obj21 = obj19 + obj20 + obj22 + obj23 +obj24
            print (len(obj21))


            if(selDivision == [''] and selDepartment == ['']):
                
                treeData = list(models.Level_Desig.objects.filter(designation__in = Rootdesig).values(id = F('designation_code'), parent_id = F('parent_desig_code'), name = F('designation'), empfname = F('empno__empname'), empmname = F('empno__empmname'), emplname = F('empno__emplname')).distinct().exclude(Q(parent_desig_code=None) or Q(parent_desig_code=''))) + list(models.Level_Desig.objects.filter(designation_code__in = obj21).values(id = F('designation_code'), parent_id = F('parent_desig_code'), name = F('designation'), empfname = F('empno__empname'), empmname = F('empno__empmname'), emplname = F('empno__emplname')).distinct().exclude(Q(parent_desig_code=None) or Q(parent_desig_code='')))


                # #Older logic
                zoneName = list(models.railwayLocationMaster.objects.filter(rly_unit_code__in = selZone).values_list('location_code',flat=True).distinct())
                obj6 = list(models.railwayLocationMaster.objects.filter(parent_rly_unit_code__in = selZone).values_list('rly_unit_code',flat=True).distinct())
                rlyidddd = selZone + obj6
                # treeData = list(models.Level_Desig.objects.filter(rly_unit__in = rlyidddd,parent_desig_code__isnull=False).exclude(Q(parent_desig_code='') or Q(delete_flag=True)).values(id = F('designation_code'), parent_id = F('parent_desig_code'), name = F('designation'), empfname = F('empno__empname'), empmname = F('empno__empmname'), emplname = F('empno__emplname')).distinct())            
                #NULL DATA for debugging
                testData = list(models.Level_Desig.objects.filter(rly_unit__in = rlyidddd,parent_desig_code__isnull=True).values_list('designation_code', flat=True))                 

                #print(zoneName, 'NullData|',testData)
                #Dept Condition Division
            elif(selDivision == [''] and selDepartment != ['']):
                obj6 = list(models.railwayLocationMaster.objects.filter(parent_rly_unit_code__in = selZone).values_list('rly_unit_code',flat=True).distinct())
                rlyidddd = selZone + obj6
                # obj18 = list(models.Level_Desig.objects.filter(rly_unit__in = rlyidddd,parent_desig_code__isnull=False).exclude(Q(parent_desig_code='') or Q(delete_flag=True)).values(id = F('designation_code'), parent_id = F('parent_desig_code'), name = F('designation'), empfname = F('empno__empname'), empmname = F('empno__empmname'), emplname = F('empno__emplname')).distinct())                 
                treeData = list(models.Level_Desig.objects.filter(department_code_id__in = selDepartment, rly_unit__in = rlyidddd,parent_desig_code__isnull=False).values(id = F('designation_code'), parent_id = F('parent_desig_code'), name = F('designation'), empfname = F('empno__empname'), empmname = F('empno__empmname'), emplname = F('empno__emplname')).distinct())             
                
                
            else:
                
                locationtype = list(models.railwayLocationMaster.objects.filter(rly_unit_code__in = selDivision).values_list('location_type',flat=True).distinct())
                
                headlevel = list(models.rlyhead.objects.filter(rlshortcode__in = locationtype).values_list('head_dlevel', flat=True).distinct()) 
                
                Rootdesig = list(models.Level_Desig.objects.filter(rly_unit__in = selDivision, d_level__in = headlevel).values_list('designation',flat=True).distinct())

                RootHead = list(models.Level_Desig.objects.filter(rly_unit__in = selDivision, d_level__in = headlevel).values_list('designation_code',flat=True).distinct())

                obj19 =  list(models.Level_Desig.objects.filter(Q(designation_code__in = list(models.Level_Desig.objects.filter(parent_desig_code__in = RootHead).values_list('designation_code',flat = True).distinct()))).distinct().values_list('designation_code',flat = True))      
                
                obj20 =  list(models.Level_Desig.objects.filter(Q(designation_code__in = list(models.Level_Desig.objects.filter(parent_desig_code__in = obj19).values_list('designation_code',flat = True).distinct()))).distinct().values_list('designation_code',flat = True)) 

                obj22 =  list(models.Level_Desig.objects.filter(Q(designation_code__in = list(models.Level_Desig.objects.filter(parent_desig_code__in = obj20).values_list('designation_code',flat = True).distinct()))).distinct().values_list('designation_code',flat = True))        
                obj23 =  list(models.Level_Desig.objects.filter(Q(designation_code__in = list(models.Level_Desig.objects.filter(parent_desig_code__in = obj22).values_list('designation_code',flat = True).distinct()))).distinct().values_list('designation_code',flat = True)) 
                obj21 = obj19 + obj20 + obj22  + obj23

                # parents doesn't exist in hierarchy
                # obj19 =  list(models.Level_Desig.objects.filter(~Q(parent_desig_code__in = list(models.Level_Desig.objects.filter(rly_unit__in = selDivision).values_list('designation_code',flat = True).distinct())),rly_unit__in = selDivision).distinct().values_list('designation_code',flat = True))      

                if (selDivision != [''] and selDepartment == [''] ):
                                       

                    treeData = list(models.Level_Desig.objects.filter(designation__in = Rootdesig).values(id = F('designation_code'), parent_id = F('parent_desig_code'), name = F('designation'), empfname = F('empno__empname'), empmname = F('empno__empmname'), emplname = F('empno__emplname')).distinct().exclude(Q(parent_desig_code=None) or Q(parent_desig_code=''))) + list(models.Level_Desig.objects.filter(designation_code__in = obj21).values(id = F('designation_code'), parent_id = F('parent_desig_code'), name = F('designation'), empfname = F('empno__empname'), empmname = F('empno__empmname'), emplname = F('empno__emplname')).distinct().exclude(Q(parent_desig_code=None) or Q(parent_desig_code=''))) 
                   
                elif (selDivision != [''] and selDepartment != [''] ):
                    
                    treeData = list(models.Level_Desig.objects.filter(department_code_id__in = selDepartment, rly_unit__in = selDivision).values(id = F('designation_code'), parent_id = F('parent_desig_code'), name = F('designation'), empfname = F('empno__empname'), empmname = F('empno__empmname'), emplname = F('empno__emplname')).distinct().exclude(Q(parent_desig_code=None) or Q(parent_desig_code=''))) 
     
             
                
        for i in treeData:
            if (i['empfname']) == None:
                (i['empfname']) = 'Name Not Found'
            if (i['empmname']) == None:
                (i['empmname']) = ''
            if (i['emplname']) == None:
                (i['emplname']) = ''

            

            

                # Add Desired values like mom, do, created, marked #
        #Stored Procedure Use Stored Procedure Table also
        # mom_issuedby = list(m3.sp_table_mom_issuedby.objects.filter(mom_officer_id = i[id]).values())
        # doletters_issuedby = list(m4.sp_table_doletters_issuedby.objects.filter(designation_code = nodeId).values())#great                
        # inspection_issuedby = list(m1.sp_table_inspection_issuedby.objects.filter(inspection_officer_id = nodeId).values())
        # task_tracker_assigned = list(m1.sp_table_task_tracker_assigned.objects.filter(assigned_by_id = nodeId).values())
                

        #print('inspection_issuedby',inspection_issuedby)
        #print('mom_issuedby',mom_issuedby)
        #print('doletters_issuedby',doletters_issuedby)
        #print('task_tracker_assigned',task_tracker_assigned)

        

        #print('inspection_markedto',inspection_markedto)
        #print('mom_markedto',mom_markedto)
        #print('doletters_markedto',doletters_markedto)
        #print('task_tracker_assigned',task_tracker_assigned)
 

        for i in treeData:

     #####       
            # total_mom_created = list(m3.sp_table_mom_markedto.objects.filter(markedto_officer_id = i['id']).values_list('total_insp_count'))#markedto_officer_id
            # total_mom_marked = list(m3.sp_table_mom_markedto.objects.filter(markedto_officer_id = i['id']).values_list('completed_insp_count'))#markedto_officer_id
            # total_mom_pending = list(m3.sp_table_mom_markedto.objects.filter(markedto_officer_id = i['id']).values_list('pending_insp_count'))#markedto_officer_id
            
            # total_do_created = list(m4.sp_table_doletters_markedto.objects.filter(designation_code = i['id']).values_list('completed_do_letters'))  #designation_code
            # total_do_marked = list(m4.sp_table_doletters_markedto.objects.filter(designation_code = i['id']).values_list('marked_do_letters'))  #designation_code
            # total_do_pending = list(m4.sp_table_doletters_markedto.objects.filter(designation_code = i['id']).values_list('pending_do_letters'))  #designation_code
                
            # total_insp_created = list(m1.sp_table_inspection_markedto.objects.filter(markedto_officer_id = i['id']).values_list('total_insp_count'))#markedto_officer_id
            # total_insp_marked_fwd = list(m1.sp_table_inspection_markedto.objects.filter(markedto_officer_id = i['id']).values_list('pending_insp_count'))#markedto_officer_id
            # total_forwarded_items_m2m = list(m1.sp_table_inspection_markedto.objects.filter(markedto_officer_id = i['id']).values_list('completed_insp_count'))#markedto_officer_id
                        
#####


            total_task_created=m1.target_compliance.objects.filter(assigned_by_id=i['id']).count()
            pending_task=m1.target_compliance.objects.filter(pending_with_id=i['id'], status_flag__in=[0,1,2,4]).count()
            task_marked=m1.target_compliance.objects.filter(pending_with_id=i['id']).count()
#####
            total_mom_created=m3.Insp_details.objects.filter(mom_officer_id=i['id']).count()
            cursor = connection.cursor()

            cursor.execute("""
                SELECT count(*)
                FROM public.mom_insp_details
                WHERE insp_no IN (
                    SELECT insp_no_id
                    FROM public.mom_item_details
                    WHERE item_no IN (
                        SELECT item_no_id
                        FROM public.mom_marked_members
                        WHERE marked_to_id = %s
                    )
                );
                """,[i['id']])
                    #total_mom_marked=m3.Marked_Members.objects.filter(marked_to_id=i['id']).distinct('marked_no').count()
            total_mom_marked = cursor.fetchall()

            cursor.execute("""
                SELECT count(*)
                FROM public.mom_insp_details
                WHERE insp_no IN (
                    SELECT insp_no_id
                    FROM public.mom_item_details
                    WHERE item_no IN (
                        SELECT item_no_id
                        FROM public.mom_marked_members
                        WHERE marked_to_id = %s and status_flag in (0,1)
                    )
                );
                """,[i['id']])
                    #total_mom_pending=m3.Marked_Members.objects.filter(marked_to_id=i['id'], status_flag__in=[0,1]).distinct('marked_no').count()
            total_mom_pending = cursor.fetchall()


            total_do_created=m4.do_upload.objects.filter(desig_id_id=i['id']).count()
            total_do_marked=m4.do_act.objects.filter(desig_id_id=i['id']).count()
            total_do_pending=m4.do_act.objects.filter(desig_id_id=i['id'], status_flag=False).count()

            i['pending_task'] = pending_task
            i['total_mom_pending'] = total_mom_pending
            i['total_do_pending'] = total_do_pending

            i['total_task_created'] = total_task_created
            i['total_mom_created'] = total_mom_created
            i['total_do_created'] = total_do_created
                    
            i['task_marked'] = task_marked
            i['total_mom_marked'] = total_mom_marked
            i['total_do_marked'] = total_do_marked
                    
            created_general=m1.Inspection_details.objects.filter(inspection_officer=i['id']).values_list('inspection_no', flat=True)
            created_field=m2.einspection_details.objects.filter(designation_id=i['id']).values_list('einspno', flat=True)
            total_insp_created=len(created_general)+len(created_field)
                        
            m2m_items_pending_general = m1.Marked_Officers.objects.filter(marked_to_id=i['id'], status_flag__in=[1,2]).values_list('item_no', flat=True)
            m2m_items_pending_field = m2.einsp_marked.objects.filter(marked_to_id=i['id'],status_flag__in=[1,2,3]).values_list('eitemid', flat=True)
            items_m2m_pending_general=m1.Item_details.objects.filter(item_no__in=m2m_items_pending_general).exclude(type='SSH').values_list('inspection_no',flat=True)
            items_m2m_pending_field=m2.einspection_item_detail.objects.filter(eitemid__in=m2m_items_pending_general).values_list('einspno', flat=True)
            total_m2m_pending=len(items_m2m_pending_general)+len(items_m2m_pending_field)

            forwarded_items_m2m_general = m1.Marked_Officers_forward.objects.filter(marked_to_forward_id=i['id']).distinct('marked_no__item_no__inspection_no').values_list('marked_no', flat=True)
            forwarded_items_m2m_field = m2.einsp_forward_marked.objects.filter(forwardTo_id=i['id']).distinct('marked_no__eitemid__einspno').values_list('marked_no', flat=True)
            total_forwarded_items_m2m = len(forwarded_items_m2m_general)+len(forwarded_items_m2m_field)
                        
            m2m_items_complied_general = m1.Marked_Officers.objects.filter(marked_to_id=i['id'], status_flag__in=[3,4]).values_list('item_no', flat=True)
            m2m_items_complied_field = m2.einsp_marked.objects.filter(marked_to_id=i['id'],status_flag__in=[4]).values_list('eitemid', flat=True)
            items_m2m_complied_general=m1.Item_details.objects.filter(item_no__in=m2m_items_complied_general).exclude(type='SSH').values_list('inspection_no',flat=True)
            items_m2m_complied_field=m2.einspection_item_detail.objects.filter(eitemid__in=m2m_items_complied_general).values_list('einspno', flat=True)

            total_m2m_complied=len(items_m2m_complied_general)+len(items_m2m_complied_field)
            total_insp_marked_fwd=total_m2m_complied + total_m2m_pending

            i['total_insp_created'] = total_insp_created
            i['total_insp_marked_fwd'] = total_insp_marked_fwd
            i['total_forwarded_items_m2m'] = total_forwarded_items_m2m



        for i in treeData:
            if (i['total_task_created']) == None:
                    (i['total_task_created']) = 0
            if (i['pending_task']) == None:
                    (i['pending_task']) = 0
            if (i['task_marked']) == None:
                    (i['task_marked']) = 0

            if (i['total_mom_created']) == None:
                    (i['total_mom_created']) = 0
            if (i['total_mom_marked']) == None:
                    (i['total_mom_marked']) = 0
            if (i['total_mom_pending']) == None:
                    (i['total_mom_pending']) = 0

            if (i['total_do_created']) == None:
                    (i['total_do_created']) = 0
            if (i['total_do_marked']) == None:
                    (i['total_do_marked']) = 0
            if (i['total_do_pending']) == None:
                    (i['total_do_pending']) = 0



        tree = build_tree(treeData)
        tree_dict = {
        'tree': tree
        }
                #print(tree_dict)
        datascource1 = convert_data1(tree_dict) 
                #print('datascource1',datascource1)
        add_level_to_nodes(datascource1, 0)
        add_classname_to_levels(datascource1, 0)
        add_hybrid_to_level_2(datascource1, 0)
        datascource1= {'name': 'Name', 'children': datascource1['children']}  
       # print_tree(tree)
        #print('datascource1',datascource1)

    return JsonResponse(datascource1, safe=False)



def changefunc(request):

    if request.method == "GET" or request.is_ajax():

            rly=[request.GET.get('rly_data')]
            division=list(models.railwayLocationMaster.objects.filter(location_type_desc__in=['DIVISION','WORKSHOP', 'HEAD QUATER'],parent_rly_unit_code__in=rly).order_by('location_code').values('location_code', 'location_type', 'rly_unit_code').distinct('location_code'))
    #HEAD QUATER
            context={
                'division':division,
            }        
            return JsonResponse(context,safe = False)

############ Hierarchy Form ###########
def hierarchy_form(request):
    
    try:
        current_user = request.user
        emp=m1.empmast.objects.all() 
        employees=m1.empmast.objects.all().order_by('empname') 
        #print('employees', employees)
        rail=models.railwayLocationMaster.objects.filter(location_type='ZR').values('location_code')
        division=list(models.railwayLocationMaster.objects.filter(location_type='DIV').values('location_code').distinct('location_code'))
        
        # category = m1.empmast.objects.filter(decode_paycategory__isnull=False).values('decode_paycategory').distinct()
        department=models.departMast.objects.filter(delete_flag=False).values('department_name').order_by('department_name').distinct()
        designation=models.Level_Desig.objects.exclude(delete_flag=True).values('designation').order_by('designation').distinct()
        #print(request.user.username)
        obj=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=request.user.username) | Q(official_email_ID=request.user.email)).values("designation","parent_desig_code","department","contactnumber","official_email_ID","empno_id__empno","empno_id__empname","empno_id__empmname","empno_id__emplname","empno_id__gender","empno_id__email","contactnumber","empno_id__currentzone", "empno_id__currentunitdivision","empno_id__appointmentdate","empno_id__superannuation_date","empno_id__pc7_level","empno_id__billunit","empno_id__service_status","empno_id__station_des", "designation_code")[0]
        
        #subordinates 
        designation_code1 = models.Level_Desig.objects.exclude(delete_flag=True).filter(parent_desig_code = obj['designation_code']).values('designation_code','empno__empname', 'empno__empmname', 'empno__emplname')
        print('designation_code1',designation_code1)

        #designation_code

######################
        reporting_ofc=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=obj['parent_desig_code']).values('designation')
        
        if reporting_ofc:
            reporting_ofc=reporting_ofc[0]['designation']
        else:
            reporting_ofc='NA'
        #"empno_id__birthdate",
        # a=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=)
        # if obj['empno_id__birthdate'] == None:
        #     obj['empno_id__birthdate'] = ''
        if obj['empno_id__empmname'] == None:
            obj['empno_id__empmname'] = ''
        if obj['empno_id__emplname'] == None:
            obj['empno_id__emplname'] = ''
        # else:
            # obj['empno_id__birthdate']=(obj['empno_id__birthdate']).strftime('%d/%m/%Y')
            # obj['empno_id__birthdate']=''
        if obj['empno_id__appointmentdate'] == None:
            obj['empno_id__appointmentdate'] = ''
        else:
            obj['empno_id__appointmentdate']=(obj['empno_id__appointmentdate']).strftime('%d/%m/%Y')
            
        if obj['empno_id__superannuation_date'] == None:
            obj['empno_id__superannuation_date'] = ''
        else:
            obj['empno_id__superannuation_date']=(obj['empno_id__superannuation_date']).strftime('%d/%m/%Y')

        if obj['empno_id__gender']:
            obj['empno_id__gender']=(obj['empno_id__gender']).replace('M' , 'Male').replace('F' , 'Female')
        # else:
        #     obj['empno_id__gender']= 'Not Updated'
        #print("mydata",obj)
        context={
            'emp':emp,
            'department':department,
            'employees':employees,
            'designation_code1':designation_code1,
            'sub':0,
            # 'category':category,
            #'subordinates':subordinates,
            'rail':rail,
            'user':user,
            'division':division,
            'designation':designation,
            'obj':obj,
            'reporting_ofc':reporting_ofc,
        }

        return render(request, "hierarchy_form.html", context)
    except Exception as e:
        try:
            m1.error_Table.objects.create(fun_name="viewDetail",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        #messages.error(request, 'Error : '+str(e))
        return render(request, "errorspage.html", {})



def hierarchy(request):
        cuser=request.user
        if request.user.user_role == 'guest':
            cuser=request.user.guest_email
            request.user.email=request.user.guest_email

        desigid=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user)).values()
        rly_code=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].rly_unit.location_code
        rly_unit_code=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].rly_unit.rly_unit_code
        parent_loc=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].rly_unit.parent_location_code
        parent_loc_id=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].rly_unit.parent_rly_unit_code
        div_code=rly_code
        if parent_loc!='RB':
            div_code=rly_code
            rly_code=parent_loc
            rly_unit_code=parent_loc_id

        print(div_code,rly_code,rly_unit_code)

        rly=request.POST.getlist('zone')
        div=request.POST.getlist('division')
        dept=request.POST.getlist('department')
        loc=request.POST.getlist('location')

        list3=models.railwayLocationMaster.objects.filter(location_type_desc__in=['DIVISION','WORKSHOP']).values('location_code', 'location_type', 'rly_unit_code').order_by('location_code')
        print(list3)
        list4=list(list3)
        
        list1=models.railwayLocationMaster.objects.filter(location_type_desc__in=['RAILWAY BOARD', 'PRODUCTION UNIT', 'HEAD QUATER','OFFICE', 'PSU', 'PRODUCTION UNIT', 'INSTITUTE']).values('location_code','rly_unit_code').order_by('location_code')
        list2=[]
        for i in list1:
            list2.append({'location_code': i['location_code'], 'rly_unit_code': i['rly_unit_code']})
                
        list5=list(models.departMast.objects.all().values('department_name','department_code')) 
        item=[] 
        obj6 = models.railwayLocationMaster.objects.filter(location_type_desc__in=['DIVISION','WORKSHOP'], parent_rly_unit_code = rly_unit_code).values('location_code','location_type', 'rly_unit_code').order_by('location_code')
        obj7 = list(obj6)
        #print(list2)
                        
        context={
            'Zone':list2 ,
            'division':obj7,
            'department':list5,
            'rly_unit_code':rly_unit_code,
            'rly_code':rly_code,
            'div_code':div_code

        }           
        return render(request,"hierarchy.html",context)

# def convert_data1(source):
#     if 'tree' in source:
#         tree = source['tree']
#         if len(tree) > 0:
#             root = tree[0]
#             return convert_node1(root, 0)
#     return None
# ##
# def convert_node1(node, level=0):
#     converted_node = {}
#     if level == 2:
#         converted_node['hybrid'] = True
#     if 'data' in node and 'name' in node['data']:
#         converted_node['name'] = node['data']['name']
#     if 'children' in node and len(node['children']) > 0:
#         converted_node['children'] = []
#         for child in node['children']:
#             converted_child = convert_node1(child, level + 1)
#             converted_node['children'].append(converted_child)
#     return converted_node

# def convert_node1(node, level=2):
#     converted_node = {}
#     if 'data' in node and 'name' in node['data']:
#         converted_node['name'] = node['data']['name']
#     if 'data' in node and 'total_notes' in node['data']:
#         converted_node['total_notes'] = node['data']['total_notes']
#     if 'children' in node and len(node['children']) > 0:
#         converted_node['children'] = []
#         for child in node['children']:
#             converted_child = convert_node1(child, level + 1)
#             converted_node['children'].append(converted_child)
#         if len(converted_node['children']) < 10:
#             converted_node['isHybrid'] = True
#         if level > 0:
#             converted_node['level'] = level
#     return converted_node

def convert_data1(source):
    if 'tree' in source:
        tree = source['tree']
        if len(tree) > 0:
            root = tree[0]
            return convert_node1(root)
    return None
def convert_node1(node):
    converted_node = {}
    if 'data' in node and 'name' in node['data']:
        converted_node['name'] = node['data']['name']
    # if 'data' in node and 'total_notes' in node['data']:
    #    converted_node['total_notes'] = node['data']['total_notes']

    if 'data' in node and 'total_insp_created' in node['data']:
        converted_node['total_insp_created'] = node['data']['total_insp_created']
    if 'data' in node and 'total_insp_marked_fwd' in node['data']:
        converted_node['total_insp_marked_fwd'] = node['data']['total_insp_marked_fwd']
    if 'data' in node and 'total_forwarded_items_m2m' in node['data']:
        converted_node['total_forwarded_items_m2m'] = node['data']['total_forwarded_items_m2m']

    if 'data' in node and 'empfname' in node['data']:
        converted_node['empfname'] = node['data']['empfname']
    if 'data' in node and 'empmname' in node['data']:
        converted_node['empmname'] = node['data']['empmname']
    if 'data' in node and 'emplname' in node['data']:
        converted_node['emplname'] = node['data']['emplname']

    if 'data' in node and 'pending_task' in node['data']:
        converted_node['pending_task'] = node['data']['pending_task']
    if 'data' in node and 'total_mom_pending' in node['data']:
        converted_node['total_mom_pending'] = node['data']['total_mom_pending']
    if 'data' in node and 'total_do_pending' in node['data']:
        converted_node['total_do_pending'] = node['data']['total_do_pending']

    if 'data' in node and 'total_task_created' in node['data']:
        converted_node['total_task_created'] = node['data']['total_task_created']
    if 'data' in node and 'total_mom_created' in node['data']:
        converted_node['total_mom_created'] = node['data']['total_mom_created']
    if 'data' in node and 'total_do_created' in node['data']:
        converted_node['total_do_created'] = node['data']['total_do_created']

    if 'data' in node and 'task_marked' in node['data']:
        converted_node['task_marked'] = node['data']['task_marked']
    if 'data' in node and 'total_mom_marked' in node['data']:
        converted_node['total_mom_marked'] = node['data']['total_mom_marked']
    if 'data' in node and 'total_do_marked' in node['data']:
        converted_node['total_do_marked'] = node['data']['total_do_marked']


    if 'children' in node and len(node['children']) > 0:
        converted_node['children'] = []
        for child in node['children']:
            converted_child = convert_node1(child)
            converted_node['children'].append(converted_child)
    return converted_node

def add_level_to_nodes(node, level):
    node['level'] = level
    if 'children' in node:
        for child in node['children']:
            add_level_to_nodes(child, level + 1)


def add_hybrid_to_level_2(node, level):
    if level == 2:
        node['isHybrid'] = True
    if 'children' in node:
        for child in node['children']:
            add_hybrid_to_level_2(child, level + 1)

def add_classname_to_levels(node, level):
    if level == 0:
        node['className'] = 'level0'
    elif level == 1:
        node['className'] = 'level1'
    elif level == 2:
        node['className'] = 'level2'
    elif level == 3:
        node['className'] = 'level3'
    elif level == 4:
        node['className'] = 'level4'
    elif level == 5:
        node['className'] = 'level5'
    elif level == 6:
        node['className'] = 'level6'
    if 'children' in node:
        for child in node['children']:
            add_classname_to_levels(child, level + 1)


def dashboard_assigned_by_me(request):
    pass

def dashboard_pending_on_me(request):
    pass


#APEKSHA NEW COMBINED DASHBOARD
def combined_dashboard(request):
    cuser=request.user
    if request.user.user_role == 'guest':
        cuser=request.user.guest_email
        request.user.email=request.user.guest_email

    empnox = models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=request.user)| Q(official_email_ID=request.user.guest_email) | Q(official_email_ID=request.user.email))
    if empnox:
        das_desig = empnox[0].designation_code
        desig = empnox[0].designation


    color='all'
    # daterange= '15/08/22 - '+str(datetime.today().strftime('%d/%m/%y'))
    daterange='All'
    setvalue='1'
    startDate='2022-08-15'
    endDate=datetime.today()


    #TOTAL DRAFT CREATED BY ME
    draft_general=m1.Inspection_details.objects.filter(status_flag=0,inspection_officer=das_desig,inspected_on__gte=startDate,inspected_on__lte=endDate).values_list('inspection_no', flat=True)
    draft_field=m2.einspection_details.objects.filter(status=0,designation_id=das_desig,inspected_on__gte=startDate,inspected_on__lte=endDate).values_list('einspno', flat=True)
    total_drafts=len(draft_general)+len(draft_field)
    
    marked_items_draft_general = m1.Marked_Officers.objects.filter(item_no__inspection_no__in=draft_general).values_list('item_no', flat=True)
    marked_items_draft_field = m2.einsp_marked.objects.exclude(revert=2).filter(eitemid__einspno__in=draft_field).values_list('eitemid', flat=True)
    
    items_draft_general=m1.Item_details.objects.filter(item_no__in=marked_items_draft_general,inspection_no__in=draft_general).exclude(type='SSH').values_list('inspection_no',flat=True)
    items_draft_field=m2.einspection_item_detail.objects.filter(eitemid__in=marked_items_draft_field,einspno__in=draft_field).values_list('einspno', flat=True)
    total_drafts_items=len(items_draft_general)+len(items_draft_field)

    #TOTAL COMPLIED INSPECTIONS CREATED BY ME
    complied_general=m1.Inspection_details.objects.filter(status_flag=4,inspection_officer=das_desig,inspected_on__gte=startDate,inspected_on__lte=endDate).values_list('inspection_no', flat=True)
    complied_field=m2.einspection_details.objects.filter(status=4,designation_id=das_desig,inspected_on__gte=startDate,inspected_on__lte=endDate).values_list('einspno', flat=True)
    total_complied=len(complied_general)+len(complied_field)
    
    marked_items_complied_general = m1.Marked_Officers.objects.filter(item_no__inspection_no__in=complied_general).values_list('item_no', flat=True)
    marked_items_complied_field = m2.einsp_marked.objects.exclude(revert=2).filter(eitemid__einspno__in=complied_field).values_list('eitemid', flat=True)
    
    items_complied_general=m1.Item_details.objects.filter(item_no__in=marked_items_complied_general,inspection_no__in=complied_general).exclude(type='SSH').values_list('inspection_no',flat=True)
    items_complied_field=m2.einspection_item_detail.objects.filter(eitemid__in=marked_items_complied_field,einspno__in=complied_field).values_list('einspno', flat=True)
    total_complied_items=len(items_complied_general)+len(items_complied_field)

    #TOTAL PENDING INSPECTIONS CREATED BY ME
    pending_general=m1.Inspection_details.objects.filter(status_flag__in=[1,2],inspection_officer=das_desig,inspected_on__gte=startDate,inspected_on__lte=endDate).values_list('inspection_no', flat=True)
    pending_field=m2.einspection_details.objects.filter(status=1,designation_id=das_desig,inspected_on__gte=startDate,inspected_on__lte=endDate).values_list('einspno', flat=True)
    total_pending=len(pending_general)+len(pending_field)
    
    marked_items_pending_general = m1.Marked_Officers.objects.filter(item_no__inspection_no__in=pending_general).values_list('item_no', flat=True)
    marked_items_pending_field = m2.einsp_marked.objects.exclude(revert=2).filter(eitemid__einspno__in=pending_field).values_list('eitemid', flat=True)
    
    items_pending_general=m1.Item_details.objects.filter(item_no__in=marked_items_pending_general,inspection_no__in=pending_general).exclude(type='SSH').values_list('inspection_no',flat=True)
    items_pending_field=m2.einspection_item_detail.objects.filter(eitemid__in=marked_items_pending_field,einspno__in=pending_field).values_list('einspno', flat=True)
    total_pending_items=len(items_pending_general)+len(items_pending_field)

    #TOTAL INSPECTIONS CREATED BY ME
    total_issued=total_pending+total_complied
    total_issued_items=total_pending_items+total_complied_items

    #TOTAL FORWARDED INSPECTIONS BY ME
    forwarded_items__pending_general = m1.Marked_Officers_forward.objects.filter(created_by_forward=das_desig, status_flag__in=[1,3]).values_list('marked_no', flat=True)
    forwarded_items_pending_field = m2.einsp_forward_marked.objects.filter(forwardBy_id=das_desig, status_flag__in=[1,3]).values_list('marked_no', flat=True)
    total_forwarded_items_pending = len(forwarded_items__pending_general)+len(forwarded_items_pending_field)

    forwarded_items__complied_general = m1.Marked_Officers_forward.objects.filter(created_by_forward=das_desig, status_flag__in=[2]).values_list('marked_no', flat=True)
    forwarded_items_complied_field = m2.einsp_forward_marked.objects.filter(forwardBy_id=das_desig, status_flag__in=[2]).values_list('marked_no', flat=True)
    total_forwarded_items_complied = len(forwarded_items__complied_general)+len(forwarded_items_complied_field)

    #TOTAL COMPLIED INSPECTIONS MARKED TO ME
    m2m_items_complied_general = m1.Marked_Officers.objects.filter(marked_to_id=das_desig, status_flag__in=[3,4]).values_list('item_no', flat=True)
    m2m_items_complied_field = m2.einsp_marked.objects.exclude(revert=2).filter(marked_to_id=das_desig,status_flag__in=[4]).values_list('eitemid', flat=True)
    items_m2m_complied_general=m1.Item_details.objects.filter(item_no__in=m2m_items_complied_general).exclude(type='SSH').values_list('inspection_no',flat=True)
    items_m2m_complied_field=m2.einspection_item_detail.objects.filter(eitemid__in=m2m_items_complied_general).values_list('einspno', flat=True)
    
    total_m2m_complied=len(items_m2m_complied_general)+len(items_m2m_complied_field)
    total_m2m_items_complied=len(m2m_items_complied_general) + len(m2m_items_complied_field)
    
    #TOTAL PENDING INSPECTIONS MARKED TO ME
    m2m_items_pending_general = m1.Marked_Officers.objects.filter(marked_to_id=das_desig, status_flag__in=[1,2]).values_list('item_no', flat=True)
    m2m_items_pending_field = m2.einsp_marked.objects.exclude(revert=2).filter(marked_to_id=das_desig,status_flag__in=[1,2,3]).values_list('eitemid', flat=True)
    items_m2m_pending_general=m1.Item_details.objects.filter(item_no__in=m2m_items_pending_general).exclude(type='SSH').values_list('inspection_no',flat=True)
    items_m2m_pending_field=m2.einspection_item_detail.objects.filter(eitemid__in=m2m_items_pending_general).values_list('einspno', flat=True)
    
    total_m2m_pending=len(items_m2m_pending_general)+len(items_m2m_pending_field)
    total_m2m_items_pending=len(m2m_items_pending_general) + len(m2m_items_pending_field)
    

    #TOTAL FORWARDED INSPECTIONS MARKED TO ME
    forwarded_items_m2m__pending_general = m1.Marked_Officers_forward.objects.filter(marked_to_forward_id=das_desig, status_flag__in=[1,3]).values_list('marked_no', flat=True)
    forwarded_items_m2m_pending_field = m2.einsp_forward_marked.objects.filter(forwardTo_id=das_desig, status_flag__in=[1,3]).values_list('marked_no', flat=True)
    total_forwarded_items_m2m_pending = len(forwarded_items_m2m__pending_general)+len(forwarded_items_m2m_pending_field)

    forwarded_items_m2m__complied_general = m1.Marked_Officers_forward.objects.filter(marked_to_forward_id=das_desig, status_flag__in=[2]).values_list('marked_no', flat=True)
    forwarded_items_m2m_complied_field = m2.einsp_forward_marked.objects.filter(forwardTo_id=das_desig, status_flag__in=[2]).values_list('marked_no', flat=True)
    total_forwarded_items_m2m_complied = len(forwarded_items_m2m__complied_general)+len(forwarded_items_m2m_complied_field)



    

    context={
        'setvalue':setvalue,
        'daterange':daterange,
        'color':color,

        #values for green card
        'total_drafts':total_drafts,
        'total_drafts_items':total_drafts_items,
        'total_issued':total_issued,
        'total_issued_items':total_issued_items,

        #values for pink card
        'total_complied':total_complied,
        'total_complied_items':total_complied_items,
        'total_pending':total_pending,
        'total_pending_items':total_pending_items,
        'total_forwarded_items_pending':total_forwarded_items_pending,
        'total_forwarded_items_complied':total_forwarded_items_complied,

        #values for yellow card
        'total_m2m_complied':total_m2m_complied,
        'total_m2m_items_complied':total_m2m_items_complied,
        'total_m2m_pending':total_m2m_pending,
        'total_m2m_items_pending':total_m2m_items_pending,
        'total_forwarded_items_m2m_pending':total_forwarded_items_m2m_pending,
        'total_forwarded_items_m2m_complied':total_forwarded_items_m2m_complied,
        
    }
    return render(request,'combined_dashboard.html',context)



# from django.views.decorators.csrf import csrf_exempt
# @csrf_exempt
# def einspectionhrmslogin(request):   
#     if request.method=='POST':
#         SessionId = request.POST.get('SessionId')
#         token =request.POST.get('token')  
#         hrmsId =request.POST.get('hrmsId')  
#         SSOUid =request.POST.get('SSOUid') 
#         # SessionId='Pankaj123'
#         # token='eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJNSUNNS0wiLCJpc3MiOiJocm1zU2luZ2xlU2lnbk9uIiwiZXhwIjoxNjc2ODgzNDcxfQ.NxZC2jQZMOHxHY10_FS9j8Nn8giBpdrShbN7AHGu2mg'
#         # hrmsId='ASOQZN'
#         # SSOUid='kUMAR123'
#         wa = m1.empmast.objects.get(hrms_id=hrmsId)
#         erpuserno=wa.empno
#         print(hrmsId,token)
        
#         wa = models.Level_Desig.objects.filter(empno=erpuserno).first()
#         print(wa)
#         erpuserno=wa.official_email_ID
#         _email=wa.official_email_ID
#         user_role=wa.user_role
#         print(user_role,_email,erpuserno)
#         try:
#             wa = m1.MyUser.objects.get(username=erpuserno)
#         except:
#             wa = m1.MyUser.objects.get(email=erpuserno)
#         is_admin=wa.is_admin
#         phase_type=wa.phase_type
#         # m1.MyUser.objects.filter(username=erpuserno).update(password='pbkdf2_sha256$100000$5Rb4BKH9oQgJ$FsEsWNqy55jBVvLtOcRTI/5k+xqWZYzPgHXOqO2mgvo=')
#         print(is_admin,phase_type)
       
        
        
#         url='http://10.77.48.16:8080/hrmssinglesignon/tokencheck'
#         data1 = {
#                 "hrmsid":hrmsId,
#                 "token":token,
#                 }
#         import requests
#         username = 'ssohrms'
#         password = 'ssohrms@2022'
#         # print(data1)
#         l_main = requests.post(url, auth=(username, password), json=data1)

#         print(l_main.json())
#         if l_main:
#             l_main = l_main.json()
#             if l_main['status']=='1':
#                 m1.empmast.objects.filter(hrms_id=hrmsId).update(SessionId=SessionId,SSOUid=SSOUid)
            
#                 try:
#                     user = m1.MyUser.objects.get(username=erpuserno)
#                 except:
#                     user = m1.MyUser.objects.get(email=erpuserno)   
#                 if user:
                    
#                     # user = authenticate(username=erpuserno, password='itpi@123') 
#                     # try:
#                     #     user = m1.MyUser.objects.get(username=erpuserno)
#                     # except:
#                     #     user = m1.MyUser.objects.get(email=erpuserno)
#                     print('user-------------',user)  
#                     global f_name
#                     global l_name
#                     global role_list 

#                     if user is not None:
#                         print(user,is_admin,user_role,phase_type)
#                         login(request, user) 
#                         request.session["userrole"]=request.user.user_role
                        
#                         if user_role=="guest": 
#                             desig=models.Level_Desig.objects.filter(official_email_ID=request.user).values('designation','d_level')
#                             request.session["designation"] = desig[0]['designation']
#                             request.session["d_level"]=desig[0]['d_level']

#                         elif user_role=="admin_rly" or user_role=="admin_super" or user_role=="admin_div" or user_role=="admin_roster":
#                             rlyid=models.AdminMaster.objects.filter(user_id=_email).values('rly_id')
#                         else:     
#                             print('xxxxx')               
#                             desig=models.Level_Desig.objects.filter(official_email_ID=_email).values('designation','d_level')
                            
#                             request.session["designation"] = desig[0]['designation']
#                             request.session["d_level"]=desig[0]['d_level']
                        
                        
#                         if (is_admin==True) and (user_role=="admin_super"):
#                             if (phase_type=='1') or (phase_type==None) or (phase_type=='3'):
#                                 role_list = str(user_role)
#                                 request.session["nav"] = custommenu_admin(request)
#                                 # return HttpResponseRedirect('/adminuserHome')
#                                 return HttpResponseRedirect('/employeeList')
#                             elif phase_type=='2':
#                                 role_list = str(user_role)
#                                 request.session["nav"] = custommenu2(phase_type,d_level)
#                                 return HttpResponseRedirect('/masterTable')
                        
#                         elif (is_admin==True) and (user_role=="admin_rly"):
#                             if phase_type=='1' or (phase_type==None) or (phase_type=='3'): 
#                                 role_list = str(user_role)
#                                 request.session["nav"] = custommenu_admin(request)
#                                 return HttpResponseRedirect('/DivisonMaster')
#                             elif phase_type=='2':
#                                 role_list = str(user_role)
#                                 request.session["nav "] = custommenu2(phase_type,d_level)
#                                 return HttpResponseRedirect('/masterTable')  

#                         elif (is_admin==True) and (user_role=="admin_div"):
#                             if (phase_type=='1') or (phase_type==None) or (phase_type=='3'):
#                                 role_list = str(user_role)
#                                 request.session["nav"] = custommenu_admin(request)
#                                 return HttpResponseRedirect('/requests111')
#                             elif phase_type=='2':
#                                 role_list = str(user_role)
#                                 request.session["nav"] = custommenu2(phase_type,d_level)
#                                 return HttpResponseRedirect('/masterTable')

#                         elif (is_admin==True) and (user_role=="admin_roster"):
#                             if phase_type=='1' or (phase_type==None) or (phase_type=='3'): 
#                                 role_list = str(user_role)
#                                 request.session["nav"] = custommenu_admin(request)
#                                 return HttpResponseRedirect('/roster_list')
#                             elif phase_type=='2':
#                                 role_list = str(user_role)
#                                 request.session["nav "] = custommenu2(phase_type,d_level)
#                                 return HttpResponseRedirect('/masterTable')

#                         ##################################### USER LOGIN ###########################################
#                         else:
#                             username =erpuserno
#                             try:
                                
#                                 desig=models.Level_Desig.objects.filter(official_email_ID=request.user).values('designation','d_level')
#                                 request.session["designation"] = desig[0]['designation']
#                                 request.session["d_level"]=desig[0]['d_level']
#                                 d_level=desig[0]['d_level']
#                                 print(d_level)
#                             except:
#                                 d_level=''
                            
#                         # role_list = "user"
#                             # Phase type 1
#                             if phase_type=='1':
#                                 role_list = str(user_role)
#                                 print('ssss',user_role,phase_type,d_level)
#                                 request.session["nav"] = custommenu(request,phase_type,d_level)
#                                 request.session['phase']='1'
#                                 if request.session['designation']=='CRB & CEO':
#                                     return HttpResponseRedirect('/home_page')
#                                 else:
#                                     print('sqsss',user_role,phase_type,d_level)
#                                     return HttpResponseRedirect('/dash_home')

#                             # Phase Type 2
#                             elif phase_type=='2':
#                                 role_list = str(user_role)
#                                 request.session["nav"] = custommenu2(phase_type,d_level)
#                                 request.session['phase']='2'
#                                 # request.session['phase']='1'
#                                 # return HttpResponseRedirect('/dash_home')
#                                 return HttpResponseRedirect('/frontpage')
                            
#                             # Phase Type 3
#                             elif phase_type=='3':
#                                 role_list = str(user_role)
#                                 request.session['nav1']=custommenu2(phase_type,d_level)
#                                 storeNav = custommenu(request,phase_type,d_level)
#                                 request.session['nav']=storeNav
#                                 request.session['phase']='3'
#                                 # request.session['phase']='1'
#                                 # return HttpResponseRedirect('/dash_home')
#                                 return HttpResponseRedirect('/frontpage')

#                             else:
#                                 role_list = str(user_role)
#                                 request.session["nav"] = custommenu(request,phase_type,d_level)
#                                 request.session['phase']='1'
#                                 return HttpResponseRedirect('/dash_home')

#                 else:
#                     #change 21-10
#                     if m1.MyUser.objects.filter(email=_email,is_active=False).exists():
#                         messages.error(request, 'Request is not accepted yet.')
#                     else:
#                         messages.error(request, 'Invalid Credentials')#till here 21-10
#                     #return HttpResponseRedirect('/rkvy_login')
#                     return render(request, "login.html")
#                 # else:
#                 #     messages.error(request,"Invalid username or password")
                    
#     return render(request, "login.html")





def view_compliance_phase2(request,insp_no):
    insp_no=insp_no
    cuser=request.user
    if request.user.user_role == 'guest':
        cuser=request.user.guest_email
        request.user.email=request.user.guest_email

    empnox = models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=request.user)| Q(official_email_ID=request.user.guest_email) | Q(official_email_ID=request.user.email))
    if empnox:
        das_desig = empnox[0].designation_code
        desig = empnox[0].designation


    insp_details=list(m2.einspection_details.objects.filter(einspno=insp_no).values('einspno','instypeid_id','inspected_on','inspection_title','designation_id__designation','designation_id','created_by','inspection_note_no'))
    insp_details[0]['inspected_on']=insp_details[0]['inspected_on'].strftime("%d/%m/%Y")
    names=m1.empmast.objects.filter(empno=insp_details[0]['created_by']).values('empname','empmname','emplname')
    insp_details[0]['insp_name']=''
    if names:
        insp_details[0]['insp_name']+=names[0]['empname']+' ' if names[0]['empname']!=None else ' '
        insp_details[0]['insp_name']+=names[0]['empmname']+' ' if names[0]['empmname']!=None else ' '
        insp_details[0]['insp_name']+=names[0]['emplname']+' ' if names[0]['emplname']!=None else ' '
    
    marked_nos = list(m2.einsp_marked.objects.exclude(revert=2).filter(eitemid__einspno=insp_no).values())
    count=0
    # print(marked_nos)
    listgrid=[]
    for m in marked_nos:
        temp={}
        count+=1
        item_det=m2.einspection_item_detail.objects.filter(eitemid=m['eitemid_id']).values()
        question=m2.questionare_master.objects.filter(qid=item_det[0]['qid_id']).values()
        temp['sr_no']=count
        temp['item_no']=m['eitemid_id']
        temp['marked_no']=m['id']
        temp['marked_to']=m['designation']
        temp['question']=question[0]['activity']
        temp['compliance']=m['compliance'] if m['compliance'] else '-'
        temp['status_flag']=m['status_flag']
        temp['revert']=m['revert']
        temp['reject']=m['reject']
        temp['report_act']=question[0]['report_act']
        temp['value']=item_det[0]['value']
        temp['tgt_date']=m['target_date'].strftime("%d/%m/%Y") if m['target_date'] else 'NA'
        temp['compliance_recieved_on']=m['compliance_recieved_on'].strftime("%d/%m/%Y") if m['compliance_recieved_on'] else 'NA'
        if temp['compliance_recieved_on'] !='NA':
            temp['days']=( m['compliance_recieved_on'] - m['created_on']).days
        else:
            temp['days']='-'
        listgrid.append(temp)

    context={
        'insp_details':insp_details,
        'listgrid':listgrid,
        'insp_no':insp_no,
    }
    # print(context)
    return render(request,'view_compliance_phase2.html',context)


def corrigendumReportReply_phase2(request,insp_no):
    cuser=request.user
    if request.user.user_role == 'guest':
        cuser=request.user.guest_email
        request.user.email=request.user.guest_email

    empnox = models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=request.user)| Q(official_email_ID=request.user.guest_email) | Q(official_email_ID=request.user.email))
    if empnox:
        das_desig = empnox[0].designation_code
        desig = empnox[0].designation


    insp_details=list(m2.einspection_details.objects.filter(einspno=insp_no).values('einspno','instypeid_id','inspected_on','inspection_title','designation_id__designation','designation_id','created_by','inspection_note_no'))
    insp_details[0]['inspected_on']=insp_details[0]['inspected_on'].strftime("%d/%m/%Y")
    names=m1.empmast.objects.filter(empno=insp_details[0]['created_by']).values('empname','empmname','emplname')
    insp_details[0]['insp_name']=''
    if names:
        insp_details[0]['insp_name']+=names[0]['empname']+' ' if names[0]['empname']!=None else ' '
        insp_details[0]['insp_name']+=names[0]['empmname']+' ' if names[0]['empmname']!=None else ' '
        insp_details[0]['insp_name']+=names[0]['emplname']+' ' if names[0]['emplname']!=None else ' '
    
    marked_nos = list(m2.einsp_marked.objects.exclude(revert=2).filter(eitemid__einspno=insp_no).values())
    count=0
    # print(marked_nos)
    listgrid=[]
    for m in marked_nos:
        temp={}
        count+=1
        item_det=m2.einspection_item_detail.objects.filter(eitemid=m['eitemid_id']).values()
        question=m2.questionare_master.objects.filter(qid=item_det[0]['qid_id']).values()
        temp['sr_no']=count
        temp['item_no']=m['eitemid_id']
        temp['marked_no']=m['id']
        temp['marked_to']=m['designation']
        temp['question']=question[0]['activity']
        temp['compliance']=m['compliance'] if m['compliance'] else '-'
        temp['status_flag']=m['status_flag']
        temp['revert']=m['revert']
        temp['reject']=m['reject']
        temp['report_act']=question[0]['report_act']
        temp['value']=item_det[0]['value']
        temp['tgt_date']=m['target_date'].strftime("%d/%m/%Y") if m['target_date'] else 'NA'
        temp['reverted_on']=m['reverted_on'].strftime("%d/%m/%Y") if m['reverted_on'] else '-'
        temp['compliance_recieved_on']=m['compliance_recieved_on'].strftime("%d/%m/%Y") if m['compliance_recieved_on'] else 'NA'
        if temp['compliance_recieved_on'] !='NA':
            temp['days']=( m['compliance_recieved_on'] - m['created_on']).days
        else:
            temp['days']='-'
        listgrid.append(temp)
    
    all_desig = models.Level_Desig.objects.exclude(delete_flag=True).values().order_by('designation')

    context={
        'insp_details':insp_details,
        'listgrid':listgrid,
        'all_desig':all_desig
    }
    # print(context)
    return render(request,'corrigendumReportReply_phase2.html',context)


# saud faisal 26-06-23

# def NewInspectionReportMarked(request):
#     if request.method == 'GET':
#         list1=models.railwayLocationMaster.objects.filter(Q(location_type_desc='RAILWAY BOARD')|Q(location_type_desc='HEAD QUATER')|Q(location_type_desc='PRODUCTION UNIT')|Q(location_type_desc='PSU')|Q(location_type_desc='INSTITUTE')).values('location_code').order_by('location_code')
#         list2=[]
#         for i in list1:
#             # print(i['location_code'],'_________')
#             list2.append(i['location_code'])
        
        
#         list3=models.railwayLocationMaster.objects.filter(Q(location_type_desc='DIVISION')|Q(location_type_desc='WORKSHOP')|Q(location_type_desc='OFFICE')|Q(location_type_desc='STORE')|Q(location_type_desc='CONSTRUCTION')).values('location_code','location_type').order_by('location_code')
#         list4=[]
#         for i in list3:
#             # print(i['location_code'],'_________')
#             list4.append({'location_code':i['location_code'],'location_type':i['location_type']})  

#         # print("list4",list4)
            
            
#         list5=models.departMast.objects.all().values('department_name').order_by('department_name')
#         list6=[]
#         for i in list5:
#             # print(i['department_name'],'_________')
#             list6.append(i['department_name'])
        
#         list7=models.Level_Desig.objects.all().values('designation').order_by('designation')
#         list8=[]
#         for i in list7:
#             # print(i['designation'],'_________')
#             list8.append(i['designation'])
        
#         # saud faisal changes
#         puproduction_type = models.railwayLocationMaster.objects.filter(location_type__in = ['ZR','PU']).values('location_code').order_by('location_code')
#         print("list2222222222222",list2)
#         app_date = date(2022,9,11)
#         app_date = app_date.strftime('%d/%m/%y')

#         curr_date = date.today()
#         curr_date = curr_date.strftime('%d/%m/%y')
#         print(app_date,curr_date)
#         new_date = app_date+' to '+curr_date
#         context={'zone':list2, 'division':list4, 'desi':list8, 'puproduction_type':puproduction_type, "new_date":new_date}

#         return render(request, 'new_inspection_report_marked.html' ,context)
#     return render(request,'new_inspection_report_marked.html')

# def fetch_desig_ajax_officerwise_all_marked(request):
#     # try:
#         if request.method == 'GET' and request.is_ajax():

#             location_code = json.loads(request.GET.get("location_code"))
#             location_type = json.loads(request.GET.get("location_type"))
#             designation = json.loads(request.GET.get("designation"))
#             created_on = request.GET.get("created_on")
#             # print('mydatas4444444',location_code,location_type,designation,created_on)
#             l=[]
#             if designation:
#                 l = designation
#                 # print("mydesigs",l)
#             elif location_type:
#                 # DIVISION WISE
                
#                 for x in location_type:
#                     x1=x.split('-')
#                     ins=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation__icontains=x1[0]).values('designation').distinct('designation'))
#                     #print(ins,'==============================================')
#                     for i in ins:
#                         l.append(i['designation'])
#                 # END DIVISION WISE
#             elif location_code:
#                 # RAILWAYS WISE
#                 # grou=json.loads(request.GET.get("group"))
                
#                 # ins=list(models.railwayLocationMaster.objects.filter(location_type='DIV',parent_location_code=grou).values('location_code', 'rly_unit_code'))
        
#                 ins=list(models.railwayLocationMaster.objects.filter(Q(location_type_desc='DIVISION')|Q(location_type_desc='WORKSHOP')|Q(location_type_desc='STORE')|Q(location_type_desc='CONSTRUCTION'),parent_location_code__in=location_code).values('location_code', 'location_type'))
    
#                 l=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(rly_unit_id__in=(models.railwayLocationMaster.objects.filter(parent_location_code__in=location_code).values('rly_unit_code'))).values_list('designation',flat=True).distinct('designation'))
#                 print("insdesig",l)

#                 # END RAILWAY WISE
#             else:
#                 list7=models.Level_Desig.objects.exclude(delete_flag=True).all().values('designation').order_by('designation')
#                 list8=[]
#                 for i in list7:
#                     # print(i['designation'],'_________')
#                     list8.append(i['designation'])
#                     l = list8

#             ''' inspection report '''
#             total_insp = 0
#             total_marked_insp = 0

#             total_total_closed = 0
#             total_total_open = 0
#             total_total_item = 0
#             total_total_item_pending = 0
#             total_total_item_overdue = 0
#             total_total_per_complied = 0

#             ''' inspection report mom '''
#             mom_total_total_inspection = 0
#             mom_total_total_closed = 0
#             mom_total_total_open = 0
#             mom_total_total_item = 0
#             mom_total_total_item_pending = 0
#             mom_total_total_item_overdue = 0
#             mom_total_total_per_complied = 0


#             ''' Do letter data '''
#             do_total_total_open = 0
#             do_total_total_pending = 0
#             do_total_total_closed = 0 
#             do_total_total_per_complied = 0
#             mark_do_total_total_open = 0
#             mark_do_total_total_pending = 0
#             mark_do_total_total_closed = 0 
#             mark_do_total_total_per_complied = 0

#             ''' TASK TRACKER '''
#             task_total_total_open = 0
#             total_total_task_assign = 0
#             total_total_task_completed = 0 
#             task_total_total_per_complied = 0
#             mark_task_total_total_open = 0
#             mark_total_total_task_assign = 0
#             mark_total_total_task_completed = 0 
#             mark_task_total_total_per_complied = 0

#             my_data = []

#             if created_on:
#                 datefrom = datetime.strptime(created_on.split('to')[0].strip(),'%d/%m/%y')
#                 dateto = datetime.strptime(created_on.split('to')[1].strip(),'%d/%m/%y')
#                 for i in l:
#                     desig_code = models.Level_Desig.objects.exclude(delete_flag=True).filter(designation = i)[0].designation_code

#                     # CREATED NOTES
#                     data = m1.Inspection_details.objects.filter(~Q(status_flag = 0),inspection_officer = desig_code,inspected_on__range = [datefrom,dateto]).aggregate(insp = Count('inspection_no',distinct = True),para = Count('item_details'))
#                     created_insp_notes = data['insp']
#                     created_insp_para = data['para']

#                     # Pending Compliance Created Notes
#                     data = m1.Inspection_details.objects.filter(status_flag__in = [1,2,3],inspection_officer = desig_code,inspected_on__range = [datefrom,dateto]).aggregate(insp = Count('inspection_no',distinct = True),para = Count('item_details'))
#                     pending_insp_notes = data['insp']
#                     pending_insp_para = data['para']
                    
#                     # % compliance created Notes
#                     data = m1.Inspection_details.objects.filter(status_flag = 4,inspection_officer = desig_code,inspected_on__range = [datefrom,dateto]).aggregate(insp = Count('inspection_no',distinct = True),para = Count('item_details'))
#                     try:
#                         per_created_insp_notes = (data['insp']/created_insp_notes)*100 
#                     except:
#                         per_created_insp_notes = 0
#                     try:
#                         per_created_insp_para = (data['para']/created_insp_para)*100
#                     except:
#                         per_created_insp_para = 0

#                     # Marked Notes
#                     data = m1.Marked_Officers.objects.filter(~Q(status_flag = 0),marked_to = desig_code,item_no__inspection_no__inspected_on__range = [datefrom,dateto]).aggregate(insp = Count('item_no__inspection_no',distinct = True),para = Count('item_no'))
#                     marked_created_insp_notes = data['insp']
#                     marked_created_insp_para = data['para']

#                     # Marked Pending compliance
#                     data = m1.Marked_Officers.objects.filter(status_flag__in = [1,2],marked_to = desig_code,item_no__inspection_no__inspected_on__range = [datefrom,dateto]).aggregate(insp = Count('item_no__inspection_no',distinct = True),para = Count('item_no'))
#                     marked_pending_insp_notes = data['insp']
#                     marked_pending_insp_para = data['para']
                    
#                     # % Compliance Marked Notes
#                     data = m1.Marked_Officers.objects.filter(status_flag__in = [3,4],marked_to = desig_code,item_no__inspection_no__inspected_on__range = [datefrom,dateto]).aggregate(insp = Count('item_no__inspection_no',distinct = True),para = Count('item_no'))
#                     try:
#                         per_marked_created_insp_notes = (data['insp']/marked_created_insp_notes)*100 
#                     except:
#                         per_marked_created_insp_notes = 0
#                     try:
#                         per_marked_created_insp_para = (data['para']/marked_created_insp_para)*100
#                     except:
#                         per_marked_created_insp_para = 0

#                     # MOM created
#                     data = m3.Insp_details.objects.filter(~Q(status_flag = 0),mom_officer = desig_code,mom_date__range = [datefrom,dateto]).aggregate(insp = Count('insp_no',distinct = True),para = Count('item_details'))
#                     mom_created_insp_notes = data['insp']
#                     mom_created_insp_para = data['para']

#                     # MOM Pending compliance
#                     data = m3.Insp_details.objects.filter(status_flag__in = [1,2,3],mom_officer = desig_code,mom_date__range = [datefrom,dateto]).aggregate(insp = Count('insp_no',distinct = True),para = Count('item_details'))
#                     mom_pending_insp_notes = data['insp']
#                     mom_pending_insp_para = data['para']

#                     # % compliance MOM Notes
#                     data = m3.Insp_details.objects.filter(status_flag=4,mom_officer = desig_code,mom_date__range = [datefrom,dateto]).aggregate(insp = Count('insp_no',distinct = True),para = Count('item_details'))
#                     try:
#                         per_mom_created_insp_notes = (data['insp']/mom_created_insp_notes)*100 
#                     except:
#                         per_mom_created_insp_notes = 0
#                     try:
#                         per_mom_pending_insp_notes  = (data['para']/mom_created_insp_para)*100
#                     except:
#                         per_mom_pending_insp_notes = 0
                    
#                     # MOM Marked
#                     data = m3.Marked_Members.objects.filter(~Q(status_flag = 0),marked_to = desig_code,item_no__insp_no__mom_date__range = [datefrom,dateto]).aggregate(insp = Count('item_no__insp_no',distinct = True),para = Count('item_no'))
#                     marked_mom_created_insp_notes = data['insp']
#                     marked_mom_created_insp_para = data['para']

#                     # MOM Marked Pending compliance
#                     data = m3.Marked_Members.objects.filter(status_flag__in = [1,2],marked_to = desig_code,item_no__insp_no__mom_date__range = [datefrom,dateto]).aggregate(insp = Count('item_no__insp_no',distinct = True),para = Count('item_no'))
#                     marked_mom_pending_insp_notes = data['insp']
#                     marked_mom_pending_insp_para = data['para']

#                     # % Compliance MOM Marked Notes
#                     data = m3.Marked_Members.objects.filter(status_flag = 4,marked_to = desig_code,item_no__insp_no__mom_date__range = [datefrom,dateto]).aggregate(insp = Count('item_no__insp_no',distinct = True),para = Count('item_no'))
#                     try:
#                         per_marked_mom_created = (data['insp']/marked_mom_created_insp_notes)*100 
#                     except:
#                         per_marked_mom_created = 0
#                     try:
#                         per_marked_mom_pending  = (data['para']/marked_mom_created_insp_para)*100
#                     except:
#                         per_marked_mom_pending = 0


#                     # DO LETTER OFFICER WISE -----------------------------------------------------------
#                     dol=list(m4.do_upload.objects.filter(desig_id_id=desig_code).values_list('id',flat = True))
                    
#                     # TOTAL OPEN
#                     do_total_open=m4.do_act.objects.filter(id_upload__in = dol).count()
#                     do_total_total_open += do_total_open

#                     # TOTAL PENDING
#                     do_total_pending=m4.do_act.objects.filter(id_upload__in = dol,status_flag=False).count()
#                     do_total_total_pending += do_total_pending

#                     # TOTAL CLOSED
#                     do_total_closed=m4.do_act.objects.filter(id_upload__in = dol,status_flag=True).count()
#                     do_total_total_closed += do_total_closed
#                     # per complied
#                     try:
#                         do_per_complied = (do_total_closed / do_total_open) * 100
#                     except:
#                         do_per_complied = 0
#                     # do_total_total_per_complied +=do_per_complied
                    
#                     #  DO MARKDED 
#                     # TOTAL OPEN 
#                     mark_do_total_open=m4.do_act.objects.filter(desig_id_id = desig_code).count()
#                     mark_do_total_total_open += mark_do_total_open

#                     # TOTAL PENDING
#                     mark_do_total_pending=m4.do_act.objects.filter(desig_id_id = desig_code,status_flag=False).count()
#                     mark_do_total_total_pending += mark_do_total_pending

#                     # TOTAL CLOSED
#                     mark_do_total_closed=m4.do_act.objects.filter(desig_id_id = desig_code,status_flag=True).count()
#                     mark_do_total_total_closed += mark_do_total_closed
#                     # per complied
#                     try:
#                         mark_do_per_complied = (mark_do_total_closed / mark_do_total_open) * 100
#                     except:
#                         mark_do_per_complied = 0

#                     ''' TASK TRACKER '''
#                     # total task tracker assign data
#                     task_assigned = m1.target_compliance.objects.filter(assigned_by__designation_code = desig_code).exclude(status_flag = 3).count()
#                     total_total_task_assign += task_assigned

#                     # total task tracker completed data
#                     task_completed = m1.target_compliance.objects.filter(assigned_by__designation_code = desig_code, status_flag = 3).count()
#                     total_total_task_completed += task_completed
                    
#                     # total task tracker open data
#                     # totol_open = task_assigned+task_completed
#                     # task_total_total_open += totol_open

                    
#                     ''' TASK TRACKER '''
#                     # total task tracker assign data

#                     mark_task_assigned = m1.target_compliance.objects.filter(pending_with__designation_code = desig_code).exclude(status_flag = 3).count()
#                     # mark_total_task_assign += mark_task_assigned

#                     mark_task_completed = m1.target_compliance.objects.filter(pending_with__designation_code = desig_code, status_flag = 3).count()
#                     # mark_total_task_completed += mark_task_completed


#                     my_data.append({'rly' : i, "created_insp_notes" : created_insp_notes, "created_insp_para" : created_insp_para, 
#                     "pending_insp_notes" : pending_insp_notes, "pending_insp_para" : pending_insp_para, "marked_created_insp_notes":marked_created_insp_notes,'marked_pending_insp_para':marked_pending_insp_para,
#                     'marked_created_insp_para':marked_created_insp_para,"marked_pending_insp_notes":marked_pending_insp_notes,"mom_pending_insp_para":mom_pending_insp_para,"marked_mom_created_insp_notes":marked_mom_created_insp_notes,
#                     "mom_created_insp_para":mom_created_insp_para,"mom_pending_insp_notes":mom_pending_insp_notes,'mom_created_insp_notes':mom_created_insp_notes,''
#                     'marked_mom_created_insp_para':marked_mom_created_insp_para,"marked_mom_pending_insp_notes":marked_mom_pending_insp_notes,'marked_mom_pending_insp_para':marked_mom_pending_insp_para,
#                     'do_total_pending':do_total_pending,'do_total_closed':do_total_closed,'mark_do_total_pending':mark_do_total_pending,'mark_do_total_closed':mark_do_total_closed,'mark_do_total_open':mark_do_total_open,
#                     'do_per_complied':do_per_complied,'mark_do_per_complied':mark_do_per_complied,'task_assigned':task_assigned,"task_completed":task_completed,'do_total_open':do_total_open,
#                     'mark_task_assigned':mark_task_assigned,"mark_task_completed":mark_task_completed,'per_created_insp_notes':per_created_insp_notes,"per_created_insp_para":per_created_insp_para,
#                     'per_marked_created_insp_notes':per_marked_created_insp_notes,"per_marked_created_insp_para":per_marked_created_insp_para,'per_mom_created_insp_notes':per_mom_created_insp_notes,
#                     'per_mom_pending_insp_notes':per_mom_pending_insp_notes,'per_marked_mom_created':per_marked_mom_created,'per_marked_mom_pending':per_marked_mom_pending
#                     })


#             return JsonResponse({'rly_list':my_data,"mom_total_total_per_complied":mom_total_total_per_complied,'do_total_total_open':do_total_total_open,
#             'do_total_total_pending':do_total_total_pending,'do_total_total_closed':do_total_total_closed,
#             'do_total_total_per_complied':do_total_total_per_complied,"task_total_total_open":task_total_total_open,
#             'total_total_task_assign':total_total_task_assign,'total_total_task_completed':total_total_task_completed,
#             'task_total_total_per_complied':task_total_total_per_complied}, safe=False)

        
#         return JsonResponse({'success':False}, status=400)
     
#     # except Exception as e: 
#     #     try:
#     #         m1.error_Table.objects.create(fun_name="fetch_desig_ajax",user_id=request.user,err_details=str(e))
#     #     except:
#     #         print("Internal Error!!!")
#     #     return render(request, "errorspage.html", {})


def NewInspectionReportMarked(request):
    if request.method == 'GET':
        list1=models.railwayLocationMaster.objects.filter(Q(location_type_desc='RAILWAY BOARD')|Q(location_type_desc='HEAD QUATER')|Q(location_type_desc='PRODUCTION UNIT')|Q(location_type_desc='PSU')|Q(location_type_desc='INSTITUTE')).values('location_code').order_by('location_code')
        list2=[]
        for i in list1:
            # print(i['location_code'],'_________')
            list2.append(i['location_code'])
        
        
        list3=models.railwayLocationMaster.objects.filter(Q(location_type_desc='DIVISION')|Q(location_type_desc='WORKSHOP')|Q(location_type_desc='OFFICE')|Q(location_type_desc='STORE')|Q(location_type_desc='CONSTRUCTION')).values('location_code','location_type').order_by('location_code')
        list4=[]
        for i in list3:
            # print(i['location_code'],'_________')
            list4.append({'location_code':i['location_code'],'location_type':i['location_type']})  

        # print("list4",list4)
            
            
        list5=models.departMast.objects.all().values('department_name').order_by('department_name')
        list6=[]
        for i in list5:
            # print(i['department_name'],'_________')
            list6.append(i['department_name'])
        
        list7=models.Level_Desig.objects.all().values('designation').order_by('designation')
        list8=[]
        for i in list7:
            # print(i['designation'],'_________')
            list8.append(i['designation'])
        
        # saud faisal changes
        puproduction_type = models.railwayLocationMaster.objects.filter(location_type__in = ['ZR','PU']).values('location_code').order_by('location_code')
        print("list2222222222222",list2)
        app_date = date(2022,9,11)
        app_date = app_date.strftime('%d/%m/%y')

        curr_date = date.today()
        curr_date = curr_date.strftime('%d/%m/%y')
        print(app_date,curr_date)
        new_date = app_date+' to '+curr_date
        context={'zone':list2, 'division':list4, 'desi':list8, 'puproduction_type':puproduction_type, "new_date":new_date}

        return render(request, 'new_inspection_report_marked.html' ,context)
    return render(request,'new_inspection_report_marked.html')

def fetch_desig_ajax_officerwise_all_marked(request):
    # try:
        if request.method == 'GET' and request.is_ajax():

            location_code = json.loads(request.GET.get("location_code"))
            location_type = json.loads(request.GET.get("location_type"))
            designation = json.loads(request.GET.get("designation"))
            created_on = request.GET.get("created_on")
            # print('mydatas4444444',location_code,location_type,designation,created_on)
            l=[]
            if designation:
                l = designation
                # print("mydesigs",l)
            elif location_type:
                # DIVISION WISE
                
                for x in location_type:
                    x1=x.split('-')
                    ins=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation__icontains=x1[0]).values('designation').distinct('designation'))
                    #print(ins,'==============================================')
                    for i in ins:
                        l.append(i['designation'])
                # END DIVISION WISE
            elif location_code:
                # RAILWAYS WISE
                # grou=json.loads(request.GET.get("group"))
                
                # ins=list(models.railwayLocationMaster.objects.filter(location_type='DIV',parent_location_code=grou).values('location_code', 'rly_unit_code'))
        
                ins=list(models.railwayLocationMaster.objects.filter(Q(location_type_desc='DIVISION')|Q(location_type_desc='WORKSHOP')|Q(location_type_desc='STORE')|Q(location_type_desc='CONSTRUCTION'),parent_location_code__in=location_code).values('location_code', 'location_type'))
    
                l=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(rly_unit_id__in=(models.railwayLocationMaster.objects.filter(parent_location_code__in=location_code).values('rly_unit_code'))).values_list('designation',flat=True).distinct('designation'))
                print("insdesig",l)

                # END RAILWAY WISE
            else:
                list7=models.Level_Desig.objects.exclude(delete_flag=True).all().values('designation').order_by('designation')
                list8=[]
                for i in list7:
                    # print(i['designation'],'_________')
                    list8.append(i['designation'])
                    l = list8

            ''' inspection report '''
            total_insp = 0
            total_marked_insp = 0

            total_total_closed = 0
            total_total_open = 0
            total_total_item = 0
            total_total_item_pending = 0
            total_total_item_overdue = 0
            total_total_per_complied = 0

            ''' inspection report mom '''
            mom_total_total_inspection = 0
            mom_total_total_closed = 0
            mom_total_total_open = 0
            mom_total_total_item = 0
            mom_total_total_item_pending = 0
            mom_total_total_item_overdue = 0
            mom_total_total_per_complied = 0


            ''' Do letter data '''
            do_total_total_open = 0
            do_total_total_pending = 0
            do_total_total_closed = 0 
            do_total_total_per_complied = 0
            mark_do_total_total_open = 0
            mark_do_total_total_pending = 0
            mark_do_total_total_closed = 0 
            mark_do_total_total_per_complied = 0

            ''' TASK TRACKER '''
            task_total_total_open = 0
            total_total_task_assign = 0
            total_total_task_completed = 0 
            task_total_total_per_complied = 0
            mark_task_total_total_open = 0
            mark_total_total_task_assign = 0
            mark_total_total_task_completed = 0 
            mark_task_total_total_per_complied = 0

            my_data = []

            if created_on:
                datefrom = datetime.strptime(created_on.split('to')[0].strip(),'%d/%m/%y')
                dateto = datetime.strptime(created_on.split('to')[1].strip(),'%d/%m/%y')
                for i in l:
                    desig_code = models.Level_Desig.objects.exclude(delete_flag=True).filter(designation = i)[0].designation_code

                    # CREATED NOTES
                    data = m1.Inspection_details.objects.filter(~Q(status_flag = 0),inspection_officer = desig_code,inspected_on__range = [datefrom,dateto]).aggregate(insp = Count('inspection_no',distinct = True),para = Count('item_details'))
                    created_insp_notes = data['insp']
                    created_insp_para = data['para']

                    # Pending Compliance Created Notes
                    data = m1.Inspection_details.objects.filter(status_flag__in = [1,2,3],inspection_officer = desig_code,inspected_on__range = [datefrom,dateto]).aggregate(insp = Count('inspection_no',distinct = True),para = Count('item_details'))
                    pending_insp_notes = data['insp']
                    pending_insp_para = data['para']
                    
                    # % compliance created Notes
                    data = m1.Inspection_details.objects.filter(status_flag = 4,inspection_officer = desig_code,inspected_on__range = [datefrom,dateto]).aggregate(insp = Count('inspection_no',distinct = True),para = Count('item_details'))
                    try:
                        per_created_insp_notes = (data['insp']/created_insp_notes)*100 
                    except:
                        per_created_insp_notes = 0
                    try:
                        per_created_insp_para = (data['para']/created_insp_para)*100
                    except:
                        per_created_insp_para = 0

                    # Marked Notes
                    data = m1.Marked_Officers.objects.filter(~Q(status_flag = 0),marked_to = desig_code,item_no__inspection_no__inspected_on__range = [datefrom,dateto]).aggregate(insp = Count('item_no__inspection_no',distinct = True),para = Count('item_no'))
                    marked_created_insp_notes = data['insp']
                    marked_created_insp_para = data['para']

                    # Marked Pending compliance
                    data = m1.Marked_Officers.objects.filter(status_flag__in = [1,2],marked_to = desig_code,item_no__inspection_no__inspected_on__range = [datefrom,dateto]).aggregate(insp = Count('item_no__inspection_no',distinct = True),para = Count('item_no'))
                    marked_pending_insp_notes = data['insp']
                    marked_pending_insp_para = data['para']
                    
                    # % Compliance Marked Notes
                    data = m1.Marked_Officers.objects.filter(status_flag__in = [3,4],marked_to = desig_code,item_no__inspection_no__inspected_on__range = [datefrom,dateto]).aggregate(insp = Count('item_no__inspection_no',distinct = True),para = Count('item_no'))
                    try:
                        per_marked_created_insp_notes = (data['insp']/marked_created_insp_notes)*100 
                    except:
                        per_marked_created_insp_notes = 0
                    try:
                        per_marked_created_insp_para = (data['para']/marked_created_insp_para)*100
                    except:
                        per_marked_created_insp_para = 0

                    # MOM created
                    data = m3.Insp_details.objects.filter(~Q(status_flag = 0),mom_officer = desig_code,mom_date__range = [datefrom,dateto]).aggregate(insp = Count('insp_no',distinct = True),para = Count('item_details'))
                    mom_created_insp_notes = data['insp']
                    mom_created_insp_para = data['para']

                    # MOM Pending compliance
                    data = m3.Insp_details.objects.filter(status_flag__in = [1,2,3],mom_officer = desig_code,mom_date__range = [datefrom,dateto]).aggregate(insp = Count('insp_no',distinct = True),para = Count('item_details'))
                    mom_pending_insp_notes = data['insp']
                    mom_pending_insp_para = data['para']

                    # % compliance MOM Notes
                    data = m3.Insp_details.objects.filter(status_flag=4,mom_officer = desig_code,mom_date__range = [datefrom,dateto]).aggregate(insp = Count('insp_no',distinct = True),para = Count('item_details'))
                    try:
                        per_mom_created_insp_notes = (data['insp']/mom_created_insp_notes)*100 
                    except:
                        per_mom_created_insp_notes = 0
                    try:
                        per_mom_pending_insp_notes  = (data['para']/mom_created_insp_para)*100
                    except:
                        per_mom_pending_insp_notes = 0
                    
                    # MOM Marked
                    data = m3.Marked_Members.objects.filter(~Q(status_flag = 0),marked_to = desig_code,item_no__insp_no__mom_date__range = [datefrom,dateto]).aggregate(insp = Count('item_no__insp_no',distinct = True),para = Count('item_no'))
                    marked_mom_created_insp_notes = data['insp']
                    marked_mom_created_insp_para = data['para']

                    # MOM Marked Pending compliance
                    data = m3.Marked_Members.objects.filter(status_flag__in = [1,2],marked_to = desig_code,item_no__insp_no__mom_date__range = [datefrom,dateto]).aggregate(insp = Count('item_no__insp_no',distinct = True),para = Count('item_no'))
                    marked_mom_pending_insp_notes = data['insp']
                    marked_mom_pending_insp_para = data['para']

                    # % Compliance MOM Marked Notes
                    data = m3.Marked_Members.objects.filter(status_flag = 4,marked_to = desig_code,item_no__insp_no__mom_date__range = [datefrom,dateto]).aggregate(insp = Count('item_no__insp_no',distinct = True),para = Count('item_no'))
                    try:
                        per_marked_mom_created = (data['insp']/marked_mom_created_insp_notes)*100 
                    except:
                        per_marked_mom_created = 0
                    try:
                        per_marked_mom_pending  = (data['para']/marked_mom_created_insp_para)*100
                    except:
                        per_marked_mom_pending = 0


                    # DO LETTER OFFICER WISE -----------------------------------------------------------
                    dol=list(m4.do_upload.objects.filter(desig_id_id=desig_code,do_letter_date__range = [datefrom,dateto] ).values_list('id',flat = True))
                    
                    # TOTAL OPEN
                    do_total_open=m4.do_act.objects.filter(id_upload__in = dol).count()
                    do_total_total_open += do_total_open

                    # TOTAL PENDING
                    do_total_pending=m4.do_act.objects.filter(id_upload__in = dol,status_flag=False).count()
                    do_total_total_pending += do_total_pending

                    # TOTAL CLOSED
                    do_total_closed=m4.do_act.objects.filter(id_upload__in = dol,status_flag=True).count()
                    do_total_total_closed += do_total_closed
                    # per complied
                    try:
                        do_per_complied = (do_total_closed / do_total_open) * 100
                    except:
                        do_per_complied = 0
                    # do_total_total_per_complied +=do_per_complied
                    
                    #  DO MARKDED 
                    # TOTAL OPEN 
                    mark_do_total_open=m4.do_act.objects.filter(desig_id_id = desig_code,id_upload__do_letter_date__range = [datefrom,dateto]).count()
                    mark_do_total_total_open += mark_do_total_open

                    # TOTAL PENDING
                    mark_do_total_pending=m4.do_act.objects.filter(desig_id_id = desig_code,status_flag=False,id_upload__do_letter_date__range = [datefrom,dateto]).count()
                    mark_do_total_total_pending += mark_do_total_pending

                    # TOTAL CLOSED
                    mark_do_total_closed=m4.do_act.objects.filter(desig_id_id = desig_code,status_flag=True,id_upload__do_letter_date__range = [datefrom,dateto]).count()
                    mark_do_total_total_closed += mark_do_total_closed
                    # per complied
                    try:
                        mark_do_per_complied = (mark_do_total_closed / mark_do_total_open) * 100
                    except:
                        mark_do_per_complied = 0

                    ''' TASK TRACKER '''
                    # total task tracker assign data
                    task_assigned = m1.target_compliance.objects.filter(assigned_by__designation_code = desig_code,target_date__range = [datefrom,dateto]).exclude(status_flag = 1).count()
                    total_total_task_assign += task_assigned

                    # total task tracker completed data
                    task_completed = m1.target_compliance.objects.filter(assigned_by__designation_code = desig_code, status_flag = 1,target_date__range = [datefrom,dateto]).count()
                    total_total_task_completed += task_completed
                    
                    # total task tracker open data
                    # totol_open = task_assigned+task_completed
                    # task_total_total_open += totol_open

                    
                    ''' TASK TRACKER '''
                    # total task tracker assign data

                    mark_task_assigned = m1.target_compliance.objects.filter(pending_with__designation_code = desig_code,target_date__range = [datefrom,dateto]).exclude(status_flag = 1).count()
                    # mark_total_task_assign += mark_task_assigned

                    mark_task_completed = m1.target_compliance.objects.filter(pending_with__designation_code = desig_code, status_flag = 0,target_date__range = [datefrom,dateto]).count()
                    # mark_total_task_completed += mark_task_completed


                    my_data.append({'rly' : i, "created_insp_notes" : created_insp_notes, "created_insp_para" : created_insp_para, 
                    "pending_insp_notes" : pending_insp_notes, "pending_insp_para" : pending_insp_para, "marked_created_insp_notes":marked_created_insp_notes,'marked_pending_insp_para':marked_pending_insp_para,
                    'marked_created_insp_para':marked_created_insp_para,"marked_pending_insp_notes":marked_pending_insp_notes,"mom_pending_insp_para":mom_pending_insp_para,"marked_mom_created_insp_notes":marked_mom_created_insp_notes,
                    "mom_created_insp_para":mom_created_insp_para,"mom_pending_insp_notes":mom_pending_insp_notes,'mom_created_insp_notes':mom_created_insp_notes,''
                    'marked_mom_created_insp_para':marked_mom_created_insp_para,"marked_mom_pending_insp_notes":marked_mom_pending_insp_notes,'marked_mom_pending_insp_para':marked_mom_pending_insp_para,
                    'do_total_pending':do_total_pending,'do_total_closed':do_total_closed,'mark_do_total_pending':mark_do_total_pending,'mark_do_total_closed':mark_do_total_closed,'mark_do_total_open':mark_do_total_open,
                    'do_per_complied':do_per_complied,'mark_do_per_complied':mark_do_per_complied,'task_assigned':task_assigned,"task_completed":task_completed,'do_total_open':do_total_open,
                    'mark_task_assigned':mark_task_assigned,"mark_task_completed":mark_task_completed,'per_created_insp_notes':per_created_insp_notes,"per_created_insp_para":per_created_insp_para,
                    'per_marked_created_insp_notes':per_marked_created_insp_notes,"per_marked_created_insp_para":per_marked_created_insp_para,'per_mom_created_insp_notes':per_mom_created_insp_notes,
                    'per_mom_pending_insp_notes':per_mom_pending_insp_notes,'per_marked_mom_created':per_marked_mom_created,'per_marked_mom_pending':per_marked_mom_pending
                    })


            return JsonResponse({'rly_list':my_data,"mom_total_total_per_complied":mom_total_total_per_complied,'do_total_total_open':do_total_total_open,
            'do_total_total_pending':do_total_total_pending,'do_total_total_closed':do_total_total_closed,
            'do_total_total_per_complied':do_total_total_per_complied,"task_total_total_open":task_total_total_open,
            'total_total_task_assign':total_total_task_assign,'total_total_task_completed':total_total_task_completed,
            'task_total_total_per_complied':task_total_total_per_complied}, safe=False)

        
        return JsonResponse({'success':False}, status=400)
     
    # except Exception as e: 
    #     try:
    #         m1.error_Table.objects.create(fun_name="fetch_desig_ajax",user_id=request.user,err_details=str(e))
    #     except:
    #         print("Internal Error!!!")
    #     return render(request, "errorspage.html", {})





# def inspectionDetailsMap(request):
#     if request.method == "GET" and request.is_ajax():
#         typ = request.GET.get('typ')  
#         if typ == 'ZoneDetails':
#             zone = request.GET.get('zone')
#             data = list(models.railwayLocationMaster.objects.filter(parent_location_code=zone,location_type = 'DIV').values('location_code','location_description').order_by('location_code'))
#             return JsonResponse(data, safe = False)
#         elif typ == 'WsDetails':
#             zone = request.GET.get('zone')
#             data = list(models.railwayLocationMaster.objects.filter(parent_location_code=zone,location_type = 'WS').values('location_code','location_description').order_by('location_code'))
#             return JsonResponse(data, safe = False)
#         elif typ == 'DesignationDetails':
#             zone = request.GET.get('zone')
#             location = request.GET.get('location')
#             if zone != '':
#                 data = list(models.Level_Desig.objects.filter(rly_unit__in = models.railwayLocationMaster.objects.filter(Q(location_code=zone) | Q(parent_location_code=zone),location_type=location).values('rly_unit_code')).values('designation_code','designation').order_by('designation'))
#             else:
#                 data = list(models.Level_Desig.objects.filter(rly_unit__in = models.railwayLocationMaster.objects.filter(location_type=location).values('rly_unit_code')).values('designation_code','designation').order_by('designation'))
#             return JsonResponse(data, safe = False)
#     allDepartment = list(models.departMast.objects.values('department_name','department_code').distinct().order_by('department_name'))
#     allDesignation = list(models.Level_Desig.objects.filter(rly_unit__in = models.railwayLocationMaster.objects.filter(location_type__in=['DIV','RB','ZR']).values('rly_unit_code')).values('designation_code','designation').order_by('designation'))
#     context = {
#         'allDepartment':allDepartment,
#         'allDesignation':allDesignation,
#     }
#     return render(request,'svgtemplate.html',context)

def finYear():
    tod = date.today()
    y = int(tod.strftime("%Y"))
    m = int(tod.strftime("%m"))
    if m >= 1 and m <= 3:
        y1 = y - 1
        ctp = str(y1) + '-' + str(y)
    else:
        y1 = y + 1
        ctp = str(y) + '-' + str(y1)
    return ctp

# def inspectionDetailsMap(request):
#     N_DAYS_AGO = 5
#     today = datetime.now()    
#     n_days_ago = today - timedelta(days=N_DAYS_AGO)
#     daysArray=[]
#     for i in range(5):
#         daysArray.append((n_days_ago + timedelta(days=i)).strftime('%d/%m'))
#     daysArray = list(reversed(daysArray))
#     finYearCombined = finYear().split('-')
#     curFinYear = finYearCombined[0]+'-'+(finYearCombined[1])[2:]
#     prevFinYear = str(int(finYearCombined[0])-1)+'-'+(finYearCombined[0])[2:]
    

#     if request.method == "GET" and request.is_ajax():
#         typ = request.GET.get('typ')  
#         if typ == 'ZoneDetails':
#             zone = request.GET.get('zone')
#             data = list(models.railwayLocationMaster.objects.filter(parent_location_code=zone,location_type = 'DIV').values('location_code','location_description').order_by('location_code'))
#             return JsonResponse(data, safe = False)
#         elif typ == 'WsDetails':
#             zone = request.GET.get('zone')
#             data = list(models.railwayLocationMaster.objects.filter(parent_location_code=zone,location_type = 'WS').values('location_code','location_description').order_by('location_code'))
#             return JsonResponse(data, safe = False)
#         elif typ == 'DesignationDetails':
#             zone = request.GET.get('zone')
#             location = request.GET.get('location')
#             if zone != '':
#                 data = list(models.Level_Desig.objects.filter(rly_unit__in = models.railwayLocationMaster.objects.filter(Q(location_code=zone) | Q(parent_location_code=zone),location_type=location).values('rly_unit_code')).values('designation_code','designation').order_by('designation'))
#             else:
#                 data = list(models.Level_Desig.objects.filter(rly_unit__in = models.railwayLocationMaster.objects.filter(location_type=location).values('rly_unit_code')).values('designation_code','designation').order_by('designation'))
#             return JsonResponse(data, safe = False)
    
#     cursor = connection.cursor()
#     cursor.execute('''select sum(total_count_others)::int,sum(pending_count_others)::int,sum(pending_overdue_count_others)::int,
# 		sum(total_count_passenger_safety)::int,sum(pending_count_passenger_safety)::int,sum(pending_overdue_count_passenger_safety)::int,
# 		sum(total_count_employee_safety)::int,sum(pending_count_employee_safety)::int,sum(pending_overdue_count_employee_safety)::int
# 		from inspection_analysis_table1 where fin_year=%s;''',[prevFinYear])
#     firstPrevFinYear = cursor.fetchall()
#     count_list1 =[]
#     count_list2 =[]
#     count_list3 =[]
#     if len(firstPrevFinYear)>0:
#         count_list3.append([firstPrevFinYear[0][0],firstPrevFinYear[0][1],firstPrevFinYear[0][2]])
#         count_list1.append([firstPrevFinYear[0][3],firstPrevFinYear[0][4],firstPrevFinYear[0][5]])
#         count_list2.append([firstPrevFinYear[0][6],firstPrevFinYear[0][7],firstPrevFinYear[0][8]])
#     else:
#         count_list1.append([0,0,0])
#         count_list2.append([0,0,0])
#         count_list3.append([0,0,0])
#     cursor.execute('''select sum(total_count_others)::int,sum(pending_count_others)::int,sum(pending_overdue_count_others)::int,
# 		sum(total_count_passenger_safety)::int,sum(pending_count_passenger_safety)::int,sum(pending_overdue_count_passenger_safety)::int,
# 		sum(total_count_employee_safety)::int,sum(pending_count_employee_safety)::int,sum(pending_overdue_count_employee_safety)::int
# 		from inspection_analysis_table1 where fin_year=%s;''',[curFinYear])
#     firstCurFinYear = cursor.fetchall()
    
#     if len(firstCurFinYear)>0:
#         count_list3.append([firstCurFinYear[0][0],firstCurFinYear[0][1],firstCurFinYear[0][2]])
#         count_list1.append([firstCurFinYear[0][3],firstCurFinYear[0][4],firstCurFinYear[0][5]])
#         count_list2.append([firstCurFinYear[0][6],firstCurFinYear[0][7],firstCurFinYear[0][8]])
#     else:
#         count_list1.append([0,0,0])
#         count_list2.append([0,0,0])
#         count_list3.append([0,0,0])

#     cursor.execute('''select sum(total_count_others)::int,sum(pending_count_others)::int,sum(pending_overdue_count_others)::int,
#             round((case when sum(total_count_others) != 0 then sum(pending_count_others) / sum(total_count_others) else 0 end) *100,2),
#             round((case when sum(total_count_others) != 0 then sum(pending_overdue_count_others) / sum(total_count_others) else 0 end) *100,2),
#             sum(last_one_days_count_others)::int,sum(last_two_days_count_others)::int,sum(last_three_days_count_others)::int,
#             sum(last_four_days_count_others)::int,sum(last_five_days_count_others)::int,			
#             sum(total_count_passenger_safety)::int,sum(pending_count_passenger_safety)::int,sum(pending_overdue_count_passenger_safety)::int,
#             round((case when sum(total_count_passenger_safety) != 0 then sum(pending_count_passenger_safety) / sum(total_count_passenger_safety) else 0 end) *100,2),
#             round((case when sum(total_count_passenger_safety) != 0 then sum(pending_overdue_count_passenger_safety) / sum(total_count_passenger_safety) else 0 end) *100,2),
#             sum(last_one_days_count_passenger_safety)::int,sum(last_two_days_count_passenger_safety)::int,sum(last_three_days_count_passenger_safety)::int,
#             sum(last_four_days_count_passenger_safety)::int,sum(last_five_days_count_passenger_safety)::int,
#             sum(total_count_employee_safety)::int,sum(pending_count_employee_safety)::int,sum(pending_overdue_count_employee_safety)::int,
#             round((case when sum(total_count_employee_safety) != 0 then sum(pending_count_employee_safety) / sum(total_count_employee_safety) else 0 end) *100,2),
#             round((case when sum(total_count_employee_safety) != 0 then sum(pending_overdue_count_employee_safety) / sum(total_count_employee_safety) else 0 end) *100,2),
#             sum(last_one_days_count_employee_safety)::int,sum(last_two_days_count_employee_safety)::int,sum(last_three_days_count_employee_safety)::int,
#             sum(last_four_days_count_employee_safety)::int,sum(last_five_days_count_employee_safety)::int
#             from inspection_analysis_table1;''')
#     firstRowAllData = cursor.fetchall()


#     cursor.execute('''select sum(total_count_night_inspection)::int,sum(pending_count_night_inspection)::int,sum(pending_overdue_count_night_inspection)::int,
# 		sum(total_count_surprise_inspection)::int,sum(pending_count_surprise_inspection)::int,sum(pending_overdue_count_surprise_inspection)::int,
# 		sum(total_count_drive_based_inspection)::int,sum(pending_count_drive_based_inspection)::int,sum(pending_overdue_percentage_drive_based_inspection)::int
# 		from inspection_analysis_table2 where fin_year=%s;''',[prevFinYear])
#     secondPrevFinYear = cursor.fetchall()
#     count_list4 =[]
#     count_list5 =[]
#     count_list6 =[]
#     if len(secondPrevFinYear)>0:
#         count_list4.append([secondPrevFinYear[0][0],secondPrevFinYear[0][1],secondPrevFinYear[0][2]])
#         count_list5.append([secondPrevFinYear[0][3],secondPrevFinYear[0][4],secondPrevFinYear[0][5]])
#         count_list6.append([secondPrevFinYear[0][6],secondPrevFinYear[0][7],secondPrevFinYear[0][8]])
#     else:
#         count_list4.append([0,0,0])
#         count_list5.append([0,0,0])
#         count_list6.append([0,0,0])
#     cursor.execute('''select sum(total_count_night_inspection)::int,sum(pending_count_night_inspection)::int,sum(pending_overdue_count_night_inspection)::int,
# 		sum(total_count_surprise_inspection)::int,sum(pending_count_surprise_inspection)::int,sum(pending_overdue_count_surprise_inspection)::int,
# 		sum(total_count_drive_based_inspection)::int,sum(pending_count_drive_based_inspection)::int,sum(pending_overdue_percentage_drive_based_inspection)::int
# 		from inspection_analysis_table2 where fin_year=%s;''',[curFinYear])
#     secondCurFinYear = cursor.fetchall()
    
#     if len(firstCurFinYear)>0:
#         count_list4.append([secondCurFinYear[0][0],secondCurFinYear[0][1],secondCurFinYear[0][2]])
#         count_list5.append([secondCurFinYear[0][3],secondCurFinYear[0][4],secondCurFinYear[0][5]])
#         count_list6.append([secondCurFinYear[0][6],secondCurFinYear[0][7],secondCurFinYear[0][8]])
#     else:
#         count_list4.append([0,0,0])
#         count_list5.append([0,0,0])
#         count_list6.append([0,0,0])

#     cursor.execute('''select sum(total_count_night_inspection)::int,sum(pending_count_night_inspection)::int,sum(pending_overdue_count_night_inspection)::int,
#         round((case when sum(total_count_night_inspection) != 0 then sum(pending_count_night_inspection) / sum(total_count_night_inspection) else 0 end) *100,2),
#         round((case when sum(total_count_night_inspection) != 0 then sum(pending_count_night_inspection) / sum(total_count_night_inspection) else 0 end) *100,2),
#         sum(last_one_days_count_night_inspection)::int,sum(last_two_days_count_night_inspection)::int,sum(last_three_days_count_night_inspection)::int,
#         sum(last_four_days_count_night_inspection)::int,sum(last_five_days_count_night_inspection)::int,	
#         sum(total_count_surprise_inspection)::int,sum(pending_count_surprise_inspection)::int,sum(pending_overdue_count_surprise_inspection)::int,
#         round((case when sum(total_count_surprise_inspection) != 0 then sum(pending_count_surprise_inspection) / sum(total_count_surprise_inspection) else 0 end) *100,2),
#         round((case when sum(total_count_surprise_inspection) != 0 then sum(pending_overdue_count_surprise_inspection) / sum(total_count_surprise_inspection) else 0 end) *100,2),
#         sum(last_one_days_count_surprise_inspection)::int,sum(last_two_days_count_surprise_inspection)::int,sum(last_three_days_count_surprise_inspection)::int,
#         sum(last_four_days_count_surprise_inspection)::int,sum(last_five_days_count_surprise_inspection)::int,
#         sum(total_count_drive_based_inspection)::int,sum(pending_count_drive_based_inspection)::int,sum(pending_overdue_percentage_drive_based_inspection)::int,
#         round((case when sum(total_count_drive_based_inspection) != 0 then sum(pending_overdue_percentage_drive_based_inspection) / sum(total_count_drive_based_inspection) else 0 end) *100,2),
#         round((case when sum(total_count_drive_based_inspection) != 0 then sum(pending_overdue_percentage_drive_based_inspection) / sum(total_count_drive_based_inspection) else 0 end) *100,2),
#         sum(last_one_days_count_drive_based_inspection)::int,sum(last_two_days_count_drive_based_inspection)::int,sum(last_three_days_count_drive_based_inspection)::int,
#         sum(last_four_days_count_drive_based_inspection)::int,sum(last_five_days_count_drive_based_inspection)::int
#         from inspection_analysis_table2;''')
#     secondRowAllData = cursor.fetchall()



#     allDepartment = list(models.departMast.objects.values('department_name','department_code').distinct().order_by('department_name'))
#     allDesignation = list(models.Level_Desig.objects.filter(rly_unit__in = models.railwayLocationMaster.objects.filter(location_type__in=['DIV','RB','ZR']).values('rly_unit_code')).values('designation_code','designation').order_by('designation'))
   
#     context = {
#         'allDepartment':allDepartment,
#         'allDesignation':allDesignation,
#         'allFinYear':json.dumps([prevFinYear,curFinYear]),
#         'daysArray':daysArray,
#         'count_list1':json.dumps(count_list1),
#         'count_list2':json.dumps(count_list2),
#         'count_list3':json.dumps(count_list3),
#         'count_list4':json.dumps(count_list4),
#         'count_list5':json.dumps(count_list5),
#         'count_list6':json.dumps(count_list6),
#         'firstRowAllData':firstRowAllData,
#         'secondRowAllData':secondRowAllData,

#     }
#     return render(request,'svgtemplate.html',context)

# def inspectionDetailsMap(request):
#     N_DAYS_AGO = 5
#     today = datetime.now()    
#     n_days_ago = today - timedelta(days=N_DAYS_AGO)
#     daysArray=[]
#     for i in range(5):
#         daysArray.append((n_days_ago + timedelta(days=i)).strftime('%d/%m'))
#     daysArray = list(reversed(daysArray))
#     finYearCombined = finYear().split('-')
#     curFinYear = finYearCombined[0]+'-'+(finYearCombined[1])[2:]
#     prevFinYear = str(int(finYearCombined[0])-1)+'-'+(finYearCombined[0])[2:]
    

#     if request.method == "GET" and request.is_ajax():
#         typ = request.GET.get('typ')  
#         if typ == 'ZoneDetails':
#             zone = request.GET.get('zone')
#             data = list(models.railwayLocationMaster.objects.filter(parent_location_code=zone,location_type = 'DIV').values('location_code','location_description').order_by('location_code'))
#             return JsonResponse(data, safe = False)
#         elif typ == 'WsDetails':
#             zone = request.GET.get('zone')
#             data = list(models.railwayLocationMaster.objects.filter(parent_location_code=zone,location_type = 'WS').values('location_code','location_description').order_by('location_code'))
#             return JsonResponse(data, safe = False)
#         elif typ == 'DesignationDetails':
#             zone = request.GET.get('zone')
#             location = request.GET.get('location')
#             if zone != '':
#                 data = list(models.Level_Desig.objects.filter(rly_unit__in = models.railwayLocationMaster.objects.filter(Q(location_code=zone) | Q(parent_location_code=zone),location_type=location).values('rly_unit_code')).values('designation_code','designation').order_by('designation'))
#             else:
#                 data = list(models.Level_Desig.objects.filter(rly_unit__in = models.railwayLocationMaster.objects.filter(location_type=location).values('rly_unit_code')).values('designation_code','designation').order_by('designation'))
#             return JsonResponse(data, safe = False)
    
#     if request.method == "GET":
#         cursor = connection.cursor()
#         cursor.execute('''select sum(total_count_others)::int,sum(pending_count_others)::int,sum(pending_overdue_count_others)::int,
#             sum(total_count_passenger_safety)::int,sum(pending_count_passenger_safety)::int,sum(pending_overdue_count_passenger_safety)::int,
#             sum(total_count_employee_safety)::int,sum(pending_count_employee_safety)::int,sum(pending_overdue_count_employee_safety)::int
#             from inspection_analysis_table1 where fin_year=%s;''',[prevFinYear])
#         firstPrevFinYear = cursor.fetchall()
#         count_list1 =[]
#         count_list2 =[]
#         count_list3 =[]
#         if len(firstPrevFinYear)>0:
#             count_list3.append([firstPrevFinYear[0][0],firstPrevFinYear[0][1],firstPrevFinYear[0][2]])
#             count_list1.append([firstPrevFinYear[0][3],firstPrevFinYear[0][4],firstPrevFinYear[0][5]])
#             count_list2.append([firstPrevFinYear[0][6],firstPrevFinYear[0][7],firstPrevFinYear[0][8]])
#         else:
#             count_list1.append([0,0,0])
#             count_list2.append([0,0,0])
#             count_list3.append([0,0,0])
#         cursor.execute('''select sum(total_count_others)::int,sum(pending_count_others)::int,sum(pending_overdue_count_others)::int,
#             sum(total_count_passenger_safety)::int,sum(pending_count_passenger_safety)::int,sum(pending_overdue_count_passenger_safety)::int,
#             sum(total_count_employee_safety)::int,sum(pending_count_employee_safety)::int,sum(pending_overdue_count_employee_safety)::int
#             from inspection_analysis_table1 where fin_year=%s;''',[curFinYear])
#         firstCurFinYear = cursor.fetchall()
        
#         if len(firstCurFinYear)>0:
#             count_list3.append([firstCurFinYear[0][0],firstCurFinYear[0][1],firstCurFinYear[0][2]])
#             count_list1.append([firstCurFinYear[0][3],firstCurFinYear[0][4],firstCurFinYear[0][5]])
#             count_list2.append([firstCurFinYear[0][6],firstCurFinYear[0][7],firstCurFinYear[0][8]])
#         else:
#             count_list1.append([0,0,0])
#             count_list2.append([0,0,0])
#             count_list3.append([0,0,0])

#         cursor.execute('''select sum(total_count_others)::int,sum(pending_count_others)::int,sum(pending_overdue_count_others)::int,
#                 round((case when sum(total_count_others) != 0 then sum(pending_count_others) / sum(total_count_others) else 0 end) *100,2),
#                 round((case when sum(total_count_others) != 0 then sum(pending_overdue_count_others) / sum(total_count_others) else 0 end) *100,2),
#                 sum(last_one_days_count_others)::int,sum(last_two_days_count_others)::int,sum(last_three_days_count_others)::int,
#                 sum(last_four_days_count_others)::int,sum(last_five_days_count_others)::int,			
#                 sum(total_count_passenger_safety)::int,sum(pending_count_passenger_safety)::int,sum(pending_overdue_count_passenger_safety)::int,
#                 round((case when sum(total_count_passenger_safety) != 0 then sum(pending_count_passenger_safety) / sum(total_count_passenger_safety) else 0 end) *100,2),
#                 round((case when sum(total_count_passenger_safety) != 0 then sum(pending_overdue_count_passenger_safety) / sum(total_count_passenger_safety) else 0 end) *100,2),
#                 sum(last_one_days_count_passenger_safety)::int,sum(last_two_days_count_passenger_safety)::int,sum(last_three_days_count_passenger_safety)::int,
#                 sum(last_four_days_count_passenger_safety)::int,sum(last_five_days_count_passenger_safety)::int,
#                 sum(total_count_employee_safety)::int,sum(pending_count_employee_safety)::int,sum(pending_overdue_count_employee_safety)::int,
#                 round((case when sum(total_count_employee_safety) != 0 then sum(pending_count_employee_safety) / sum(total_count_employee_safety) else 0 end) *100,2),
#                 round((case when sum(total_count_employee_safety) != 0 then sum(pending_overdue_count_employee_safety) / sum(total_count_employee_safety) else 0 end) *100,2),
#                 sum(last_one_days_count_employee_safety)::int,sum(last_two_days_count_employee_safety)::int,sum(last_three_days_count_employee_safety)::int,
#                 sum(last_four_days_count_employee_safety)::int,sum(last_five_days_count_employee_safety)::int
#                 from inspection_analysis_table1;''')
#         firstRowAllData = cursor.fetchall()


#         cursor.execute('''select sum(total_count_night_inspection)::int,sum(pending_count_night_inspection)::int,sum(pending_overdue_count_night_inspection)::int,
#             sum(total_count_surprise_inspection)::int,sum(pending_count_surprise_inspection)::int,sum(pending_overdue_count_surprise_inspection)::int,
#             sum(total_count_drive_based_inspection)::int,sum(pending_count_drive_based_inspection)::int,sum(pending_overdue_percentage_drive_based_inspection)::int
#             from inspection_analysis_table2 where fin_year=%s;''',[prevFinYear])
#         secondPrevFinYear = cursor.fetchall()
#         count_list4 =[]
#         count_list5 =[]
#         count_list6 =[]
#         if len(secondPrevFinYear)>0:
#             count_list4.append([secondPrevFinYear[0][0],secondPrevFinYear[0][1],secondPrevFinYear[0][2]])
#             count_list5.append([secondPrevFinYear[0][3],secondPrevFinYear[0][4],secondPrevFinYear[0][5]])
#             count_list6.append([secondPrevFinYear[0][6],secondPrevFinYear[0][7],secondPrevFinYear[0][8]])
#         else:
#             count_list4.append([0,0,0])
#             count_list5.append([0,0,0])
#             count_list6.append([0,0,0])
#         cursor.execute('''select sum(total_count_night_inspection)::int,sum(pending_count_night_inspection)::int,sum(pending_overdue_count_night_inspection)::int,
#             sum(total_count_surprise_inspection)::int,sum(pending_count_surprise_inspection)::int,sum(pending_overdue_count_surprise_inspection)::int,
#             sum(total_count_drive_based_inspection)::int,sum(pending_count_drive_based_inspection)::int,sum(pending_overdue_percentage_drive_based_inspection)::int
#             from inspection_analysis_table2 where fin_year=%s;''',[curFinYear])
#         secondCurFinYear = cursor.fetchall()
        
#         if len(firstCurFinYear)>0:
#             count_list4.append([secondCurFinYear[0][0],secondCurFinYear[0][1],secondCurFinYear[0][2]])
#             count_list5.append([secondCurFinYear[0][3],secondCurFinYear[0][4],secondCurFinYear[0][5]])
#             count_list6.append([secondCurFinYear[0][6],secondCurFinYear[0][7],secondCurFinYear[0][8]])
#         else:
#             count_list4.append([0,0,0])
#             count_list5.append([0,0,0])
#             count_list6.append([0,0,0])

#         cursor.execute('''select sum(total_count_night_inspection)::int,sum(pending_count_night_inspection)::int,sum(pending_overdue_count_night_inspection)::int,
#             round((case when sum(total_count_night_inspection) != 0 then sum(pending_count_night_inspection) / sum(total_count_night_inspection) else 0 end) *100,2),
#             round((case when sum(total_count_night_inspection) != 0 then sum(pending_count_night_inspection) / sum(total_count_night_inspection) else 0 end) *100,2),
#             sum(last_one_days_count_night_inspection)::int,sum(last_two_days_count_night_inspection)::int,sum(last_three_days_count_night_inspection)::int,
#             sum(last_four_days_count_night_inspection)::int,sum(last_five_days_count_night_inspection)::int,	
#             sum(total_count_surprise_inspection)::int,sum(pending_count_surprise_inspection)::int,sum(pending_overdue_count_surprise_inspection)::int,
#             round((case when sum(total_count_surprise_inspection) != 0 then sum(pending_count_surprise_inspection) / sum(total_count_surprise_inspection) else 0 end) *100,2),
#             round((case when sum(total_count_surprise_inspection) != 0 then sum(pending_overdue_count_surprise_inspection) / sum(total_count_surprise_inspection) else 0 end) *100,2),
#             sum(last_one_days_count_surprise_inspection)::int,sum(last_two_days_count_surprise_inspection)::int,sum(last_three_days_count_surprise_inspection)::int,
#             sum(last_four_days_count_surprise_inspection)::int,sum(last_five_days_count_surprise_inspection)::int,
#             sum(total_count_drive_based_inspection)::int,sum(pending_count_drive_based_inspection)::int,sum(pending_overdue_percentage_drive_based_inspection)::int,
#             round((case when sum(total_count_drive_based_inspection) != 0 then sum(pending_overdue_percentage_drive_based_inspection) / sum(total_count_drive_based_inspection) else 0 end) *100,2),
#             round((case when sum(total_count_drive_based_inspection) != 0 then sum(pending_overdue_percentage_drive_based_inspection) / sum(total_count_drive_based_inspection) else 0 end) *100,2),
#             sum(last_one_days_count_drive_based_inspection)::int,sum(last_two_days_count_drive_based_inspection)::int,sum(last_three_days_count_drive_based_inspection)::int,
#             sum(last_four_days_count_drive_based_inspection)::int,sum(last_five_days_count_drive_based_inspection)::int
#             from inspection_analysis_table2;''')
#         secondRowAllData = cursor.fetchall()

#         #########   forth row card(pendency)

#         cursor.execute('''select sum(count_7_days_passenger_safety),sum(count_30_days_passenger_safety),sum(count_90_days_passenger_safety),
#             sum(count_180_days_passenger_safety),sum(count_365_days_passenger_safety),
#             sum(count_7_days_employee_safety),sum(count_30_days_employee_safety),sum(count_90_days_employee_safety),
#             sum(count_180_days_employee_safety),sum(count_365_days_employee_safety),
#             sum(count_7_days_others),sum(count_30_days_others),sum(count_90_days_others),
#             sum(count_180_days_others),sum(count_365_days_others)
#             from inspection_pendency_analysis_table1;''')
#         pendencyDataCard1 = cursor.fetchall()

#         cursor.execute('''select sum(count_7_days_night_inspection),sum(count_30_days_night_inspection),sum(count_90_days_night_inspection),
#             sum(count_180_days_night_inspection),sum(count_365_days_night_inspection),
#             sum(count_7_days_surprise_inspection),sum(count_30_days_surprise_inspection),sum(count_90_days_surprise_inspection),
#             sum(count_180_days_surprise_inspection),sum(count_365_days_surprise_inspection),
#             sum(count_7_days_drive_based_inspection),sum(count_30_days_drive_based_inspection),sum(count_90_days_drive_based_inspection),
#             sum(count_180_days_drive_based_inspection),sum(count_365_days_drive_based_inspection),
#             sum(count_7_days_regular_inspection),sum(count_30_days_regular_inspection),sum(count_90_days_regular_inspection),
#             sum(count_180_days_regular_inspection),sum(count_365_days_regular_inspection)
#             from inspection_pendency_analysis_table2;''')
#         pendencyDataCard2 = cursor.fetchall()


#         cursor.execute('''select  sum(total_count_station_passenger_safety),sum(total_count_station_employee_safety),sum(total_count_station_others),
#             sum(total_count_station_night_inspection),sum(total_count_station_surprise_inspection),sum(total_count_station_drive_inspection),
#             sum(total_count_section_passenger_safety),sum(total_count_section_employee_safety),sum(total_count_section_others),
#             sum(total_count_section_night_inspection),sum(total_count_section_surprise_inspection),sum(total_count_section_drive_inspection),
#             sum(total_count_train_passenger_safety),sum(total_count_train_employee_safety),sum(total_count_train_others),
#             sum(total_count_train_night_inspection),sum(total_count_train_surprise_inspection),sum(total_count_train_drive_inspection),
#             sum(total_count_others_passenger_safety),sum(total_count_others_employee_safety),sum(total_count_others_others),
#             sum(total_count_others_night_inspection),sum(total_count_others_surprise_inspection),sum(total_count_others_drive_inspection),
#             round((case when sum(total_count_station_passenger_safety) != 0 then sum(pending_count_station_passenger_safety) / sum(total_count_station_passenger_safety) else 0 end) *100,2),
#             round((case when sum(total_count_station_employee_safety) != 0 then sum(pending_count_station_employee_safety) / sum(total_count_station_employee_safety) else 0 end) *100,2),
#             round((case when sum(total_count_station_others) != 0 then sum(pending_count_station_others) / sum(total_count_station_others) else 0 end) *100,2),
#             round((case when sum(total_count_station_night_inspection) != 0 then sum(pending_count_station_night_inspection) / sum(total_count_station_night_inspection) else 0 end) *100,2),
#             round((case when sum(total_count_station_surprise_inspection) != 0 then sum(pending_count_station_surprise_inspection) / sum(total_count_station_surprise_inspection) else 0 end) *100,2),
#             round((case when sum(total_count_station_drive_inspection) != 0 then sum(pending_count_station_drive_inspection) / sum(total_count_station_drive_inspection) else 0 end) *100,2),
#             round((case when sum(total_count_section_passenger_safety) != 0 then sum(pending_count_section_passenger_safety) / sum(total_count_section_passenger_safety) else 0 end) *100,2),
#             round((case when sum(total_count_section_employee_safety) != 0 then sum(pending_count_section_employee_safety) / sum(total_count_section_employee_safety) else 0 end) *100,2),
#             round((case when sum(total_count_section_others) != 0 then sum(pending_count_section_others) / sum(total_count_section_others) else 0 end) *100,2),
#             round((case when sum(total_count_section_night_inspection) != 0 then sum(pending_count_section_night_inspection) / sum(total_count_section_night_inspection) else 0 end) *100,2),
#             round((case when sum(total_count_section_surprise_inspection) != 0 then sum(pending_count_section_surprise_inspection) / sum(total_count_section_surprise_inspection) else 0 end) *100,2),
#             round((case when sum(total_count_section_drive_inspection) != 0 then sum(pending_count_section_drive_inspection) / sum(total_count_section_drive_inspection) else 0 end) *100,2),
#             round((case when sum(total_count_train_passenger_safety) != 0 then sum(pending_count_train_passenger_safety) / sum(total_count_train_passenger_safety) else 0 end) *100,2),
#             round((case when sum(total_count_train_employee_safety) != 0 then sum(pending_count_train_employee_safety) / sum(total_count_train_employee_safety) else 0 end) *100,2),
#             round((case when sum(total_count_train_others) != 0 then sum(pending_count_train_others) / sum(total_count_train_others) else 0 end) *100,2),
#             round((case when sum(total_count_train_night_inspection) != 0 then sum(pending_count_train_night_inspection) / sum(total_count_train_night_inspection) else 0 end) *100,2),
#             round((case when sum(total_count_train_surprise_inspection) != 0 then sum(pending_count_train_surprise_inspection) / sum(total_count_train_surprise_inspection) else 0 end) *100,2),
#             round((case when sum(total_count_train_drive_inspection) != 0 then sum(pending_count_train_drive_inspection) / sum(total_count_train_drive_inspection) else 0 end) *100,2),
#             round((case when sum(total_count_others_passenger_safety) != 0 then sum(pending_count_others_passenger_safety) / sum(total_count_others_passenger_safety) else 0 end) *100,2),
#             round((case when sum(total_count_others_employee_safety) != 0 then sum(pending_count_others_employee_safety) / sum(total_count_others_employee_safety) else 0 end) *100,2),
#             round((case when sum(total_count_others_others) != 0 then sum(pending_count_others_others) / sum(total_count_others_others) else 0 end) *100,2),
#             round((case when sum(total_count_others_night_inspection) != 0 then sum(total_count_others_night_inspection) / sum(total_count_others_night_inspection) else 0 end) *100,2),
#             round((case when sum(total_count_others_surprise_inspection) != 0 then sum(total_count_others_surprise_inspection) / sum(total_count_others_surprise_inspection) else 0 end) *100,2),
#             round((case when sum(total_count_others_drive_inspection) != 0 then sum(total_count_others_drive_inspection) / sum(total_count_others_drive_inspection) else 0 end) *100,2)
#             from inspection_analysis_table3;''')
#         thirdRowData = cursor.fetchall()


#         allDepartment = list(models.departMast.objects.values('department_name','department_code').distinct().order_by('department_name'))
#         allDesignation = list(models.Level_Desig.objects.filter(rly_unit__in = models.railwayLocationMaster.objects.filter(location_type__in=['DIV','RB','ZR']).values('rly_unit_code')).values('designation_code','designation').order_by('designation'))
#         cursor.close()
#         irTypeVal = 'ZR'
#         irDetailsVal = 'All'
#     if request.method == "POST":
#         submitvalue = request.POST.get('submit')
#         if submitvalue == 'irSubmitButton':
#             cursor = connection.cursor()
#             irTypeVal = request.POST.get('irType')
#             irDetailsVal = request.POST.get('irDetails')
#             print(irTypeVal,irDetailsVal)
#             if irDetailsVal == 'All':
#                 allLocationCodeData = tuple(models.railwayLocationMaster.objects.filter(location_type = irTypeVal).values_list('location_code',flat=True).distinct())
#             else:
#                 allLocationCodeData=(irDetailsVal)
#             print(allLocationCodeData)

#             cursor.execute('''select sum(total_count_others)::int,sum(pending_count_others)::int,sum(pending_overdue_count_others)::int,
#                 sum(total_count_passenger_safety)::int,sum(pending_count_passenger_safety)::int,sum(pending_overdue_count_passenger_safety)::int,
#                 sum(total_count_employee_safety)::int,sum(pending_count_employee_safety)::int,sum(pending_overdue_count_employee_safety)::int
#                 from inspection_analysis_table1 where fin_year=%s and location_type=%s  and location_code in %s;''',[prevFinYear,irTypeVal,allLocationCodeData])
#             firstPrevFinYear = cursor.fetchall()
#             count_list1 =[]
#             count_list2 =[]
#             count_list3 =[]
#             if len(firstPrevFinYear)>0:
#                 count_list3.append([firstPrevFinYear[0][0],firstPrevFinYear[0][1],firstPrevFinYear[0][2]])
#                 count_list1.append([firstPrevFinYear[0][3],firstPrevFinYear[0][4],firstPrevFinYear[0][5]])
#                 count_list2.append([firstPrevFinYear[0][6],firstPrevFinYear[0][7],firstPrevFinYear[0][8]])
#             else:
#                 count_list1.append([0,0,0])
#                 count_list2.append([0,0,0])
#                 count_list3.append([0,0,0])
#             cursor.execute('''select sum(total_count_others)::int,sum(pending_count_others)::int,sum(pending_overdue_count_others)::int,
#                 sum(total_count_passenger_safety)::int,sum(pending_count_passenger_safety)::int,sum(pending_overdue_count_passenger_safety)::int,
#                 sum(total_count_employee_safety)::int,sum(pending_count_employee_safety)::int,sum(pending_overdue_count_employee_safety)::int
#                 from inspection_analysis_table1 where fin_year=%s and location_type=%s  and location_code in %s;''',[curFinYear,irTypeVal,allLocationCodeData])
#             firstCurFinYear = cursor.fetchall()
            
#             if len(firstCurFinYear)>0:
#                 count_list3.append([firstCurFinYear[0][0],firstCurFinYear[0][1],firstCurFinYear[0][2]])
#                 count_list1.append([firstCurFinYear[0][3],firstCurFinYear[0][4],firstCurFinYear[0][5]])
#                 count_list2.append([firstCurFinYear[0][6],firstCurFinYear[0][7],firstCurFinYear[0][8]])
#             else:
#                 count_list1.append([0,0,0])
#                 count_list2.append([0,0,0])
#                 count_list3.append([0,0,0])

#             cursor.execute('''select sum(total_count_others)::int,sum(pending_count_others)::int,sum(pending_overdue_count_others)::int,
#                     round((case when sum(total_count_others) != 0 then sum(pending_count_others) / sum(total_count_others) else 0 end) *100,2),
#                     round((case when sum(total_count_others) != 0 then sum(pending_overdue_count_others) / sum(total_count_others) else 0 end) *100,2),
#                     sum(last_one_days_count_others)::int,sum(last_two_days_count_others)::int,sum(last_three_days_count_others)::int,
#                     sum(last_four_days_count_others)::int,sum(last_five_days_count_others)::int,			
#                     sum(total_count_passenger_safety)::int,sum(pending_count_passenger_safety)::int,sum(pending_overdue_count_passenger_safety)::int,
#                     round((case when sum(total_count_passenger_safety) != 0 then sum(pending_count_passenger_safety) / sum(total_count_passenger_safety) else 0 end) *100,2),
#                     round((case when sum(total_count_passenger_safety) != 0 then sum(pending_overdue_count_passenger_safety) / sum(total_count_passenger_safety) else 0 end) *100,2),
#                     sum(last_one_days_count_passenger_safety)::int,sum(last_two_days_count_passenger_safety)::int,sum(last_three_days_count_passenger_safety)::int,
#                     sum(last_four_days_count_passenger_safety)::int,sum(last_five_days_count_passenger_safety)::int,
#                     sum(total_count_employee_safety)::int,sum(pending_count_employee_safety)::int,sum(pending_overdue_count_employee_safety)::int,
#                     round((case when sum(total_count_employee_safety) != 0 then sum(pending_count_employee_safety) / sum(total_count_employee_safety) else 0 end) *100,2),
#                     round((case when sum(total_count_employee_safety) != 0 then sum(pending_overdue_count_employee_safety) / sum(total_count_employee_safety) else 0 end) *100,2),
#                     sum(last_one_days_count_employee_safety)::int,sum(last_two_days_count_employee_safety)::int,sum(last_three_days_count_employee_safety)::int,
#                     sum(last_four_days_count_employee_safety)::int,sum(last_five_days_count_employee_safety)::int
#                     from inspection_analysis_table1 where location_type=%s  and location_code in %s;''',[irTypeVal,allLocationCodeData])
#             firstRowAllData = cursor.fetchall()


#             cursor.execute('''select sum(total_count_night_inspection)::int,sum(pending_count_night_inspection)::int,sum(pending_overdue_count_night_inspection)::int,
#                 sum(total_count_surprise_inspection)::int,sum(pending_count_surprise_inspection)::int,sum(pending_overdue_count_surprise_inspection)::int,
#                 sum(total_count_drive_based_inspection)::int,sum(pending_count_drive_based_inspection)::int,sum(pending_overdue_percentage_drive_based_inspection)::int
#                 from inspection_analysis_table2 where fin_year=%s and location_type=%s  and location_code in %s;''',[prevFinYear,irTypeVal,allLocationCodeData])
#             secondPrevFinYear = cursor.fetchall()
#             count_list4 =[]
#             count_list5 =[]
#             count_list6 =[]
#             if len(secondPrevFinYear)>0:
#                 count_list4.append([secondPrevFinYear[0][0],secondPrevFinYear[0][1],secondPrevFinYear[0][2]])
#                 count_list5.append([secondPrevFinYear[0][3],secondPrevFinYear[0][4],secondPrevFinYear[0][5]])
#                 count_list6.append([secondPrevFinYear[0][6],secondPrevFinYear[0][7],secondPrevFinYear[0][8]])
#             else:
#                 count_list4.append([0,0,0])
#                 count_list5.append([0,0,0])
#                 count_list6.append([0,0,0])
#             cursor.execute('''select sum(total_count_night_inspection)::int,sum(pending_count_night_inspection)::int,sum(pending_overdue_count_night_inspection)::int,
#                 sum(total_count_surprise_inspection)::int,sum(pending_count_surprise_inspection)::int,sum(pending_overdue_count_surprise_inspection)::int,
#                 sum(total_count_drive_based_inspection)::int,sum(pending_count_drive_based_inspection)::int,sum(pending_overdue_percentage_drive_based_inspection)::int
#                 from inspection_analysis_table2 where fin_year=%s and location_type=%s  and location_code in %s;''',[curFinYear,irTypeVal,allLocationCodeData])
#             secondCurFinYear = cursor.fetchall()
            
#             if len(firstCurFinYear)>0:
#                 count_list4.append([secondCurFinYear[0][0],secondCurFinYear[0][1],secondCurFinYear[0][2]])
#                 count_list5.append([secondCurFinYear[0][3],secondCurFinYear[0][4],secondCurFinYear[0][5]])
#                 count_list6.append([secondCurFinYear[0][6],secondCurFinYear[0][7],secondCurFinYear[0][8]])
#             else:
#                 count_list4.append([0,0,0])
#                 count_list5.append([0,0,0])
#                 count_list6.append([0,0,0])

#             cursor.execute('''select sum(total_count_night_inspection)::int,sum(pending_count_night_inspection)::int,sum(pending_overdue_count_night_inspection)::int,
#                 round((case when sum(total_count_night_inspection) != 0 then sum(pending_count_night_inspection) / sum(total_count_night_inspection) else 0 end) *100,2),
#                 round((case when sum(total_count_night_inspection) != 0 then sum(pending_count_night_inspection) / sum(total_count_night_inspection) else 0 end) *100,2),
#                 sum(last_one_days_count_night_inspection)::int,sum(last_two_days_count_night_inspection)::int,sum(last_three_days_count_night_inspection)::int,
#                 sum(last_four_days_count_night_inspection)::int,sum(last_five_days_count_night_inspection)::int,	
#                 sum(total_count_surprise_inspection)::int,sum(pending_count_surprise_inspection)::int,sum(pending_overdue_count_surprise_inspection)::int,
#                 round((case when sum(total_count_surprise_inspection) != 0 then sum(pending_count_surprise_inspection) / sum(total_count_surprise_inspection) else 0 end) *100,2),
#                 round((case when sum(total_count_surprise_inspection) != 0 then sum(pending_overdue_count_surprise_inspection) / sum(total_count_surprise_inspection) else 0 end) *100,2),
#                 sum(last_one_days_count_surprise_inspection)::int,sum(last_two_days_count_surprise_inspection)::int,sum(last_three_days_count_surprise_inspection)::int,
#                 sum(last_four_days_count_surprise_inspection)::int,sum(last_five_days_count_surprise_inspection)::int,
#                 sum(total_count_drive_based_inspection)::int,sum(pending_count_drive_based_inspection)::int,sum(pending_overdue_percentage_drive_based_inspection)::int,
#                 round((case when sum(total_count_drive_based_inspection) != 0 then sum(pending_overdue_percentage_drive_based_inspection) / sum(total_count_drive_based_inspection) else 0 end) *100,2),
#                 round((case when sum(total_count_drive_based_inspection) != 0 then sum(pending_overdue_percentage_drive_based_inspection) / sum(total_count_drive_based_inspection) else 0 end) *100,2),
#                 sum(last_one_days_count_drive_based_inspection)::int,sum(last_two_days_count_drive_based_inspection)::int,sum(last_three_days_count_drive_based_inspection)::int,
#                 sum(last_four_days_count_drive_based_inspection)::int,sum(last_five_days_count_drive_based_inspection)::int
#                 from inspection_analysis_table2 where location_type=%s  and location_code in %s;''',[irTypeVal,allLocationCodeData])
#             secondRowAllData = cursor.fetchall()

#             #########   forth row card(pendency)

#             cursor.execute('''select sum(count_7_days_passenger_safety),sum(count_30_days_passenger_safety),sum(count_90_days_passenger_safety),
#                 sum(count_180_days_passenger_safety),sum(count_365_days_passenger_safety),
#                 sum(count_7_days_employee_safety),sum(count_30_days_employee_safety),sum(count_90_days_employee_safety),
#                 sum(count_180_days_employee_safety),sum(count_365_days_employee_safety),
#                 sum(count_7_days_others),sum(count_30_days_others),sum(count_90_days_others),
#                 sum(count_180_days_others),sum(count_365_days_others)
#                 from inspection_pendency_analysis_table1 where location_type=%s  and location_code in %s;''',[irTypeVal,allLocationCodeData])
#             pendencyDataCard1 = cursor.fetchall()

#             cursor.execute('''select sum(count_7_days_night_inspection),sum(count_30_days_night_inspection),sum(count_90_days_night_inspection),
#                 sum(count_180_days_night_inspection),sum(count_365_days_night_inspection),
#                 sum(count_7_days_surprise_inspection),sum(count_30_days_surprise_inspection),sum(count_90_days_surprise_inspection),
#                 sum(count_180_days_surprise_inspection),sum(count_365_days_surprise_inspection),
#                 sum(count_7_days_drive_based_inspection),sum(count_30_days_drive_based_inspection),sum(count_90_days_drive_based_inspection),
#                 sum(count_180_days_drive_based_inspection),sum(count_365_days_drive_based_inspection),
#                 sum(count_7_days_regular_inspection),sum(count_30_days_regular_inspection),sum(count_90_days_regular_inspection),
#                 sum(count_180_days_regular_inspection),sum(count_365_days_regular_inspection)
#                 from inspection_pendency_analysis_table2 where location_type=%s  and location_code in %s;''',[irTypeVal,allLocationCodeData])
#             pendencyDataCard2 = cursor.fetchall()


#             cursor.execute('''select  sum(total_count_station_passenger_safety),sum(total_count_station_employee_safety),sum(total_count_station_others),
#                 sum(total_count_station_night_inspection),sum(total_count_station_surprise_inspection),sum(total_count_station_drive_inspection),
#                 sum(total_count_section_passenger_safety),sum(total_count_section_employee_safety),sum(total_count_section_others),
#                 sum(total_count_section_night_inspection),sum(total_count_section_surprise_inspection),sum(total_count_section_drive_inspection),
#                 sum(total_count_train_passenger_safety),sum(total_count_train_employee_safety),sum(total_count_train_others),
#                 sum(total_count_train_night_inspection),sum(total_count_train_surprise_inspection),sum(total_count_train_drive_inspection),
#                 sum(total_count_others_passenger_safety),sum(total_count_others_employee_safety),sum(total_count_others_others),
#                 sum(total_count_others_night_inspection),sum(total_count_others_surprise_inspection),sum(total_count_others_drive_inspection),
#                 round((case when sum(total_count_station_passenger_safety) != 0 then sum(pending_count_station_passenger_safety) / sum(total_count_station_passenger_safety) else 0 end) *100,2),
#                 round((case when sum(total_count_station_employee_safety) != 0 then sum(pending_count_station_employee_safety) / sum(total_count_station_employee_safety) else 0 end) *100,2),
#                 round((case when sum(total_count_station_others) != 0 then sum(pending_count_station_others) / sum(total_count_station_others) else 0 end) *100,2),
#                 round((case when sum(total_count_station_night_inspection) != 0 then sum(pending_count_station_night_inspection) / sum(total_count_station_night_inspection) else 0 end) *100,2),
#                 round((case when sum(total_count_station_surprise_inspection) != 0 then sum(pending_count_station_surprise_inspection) / sum(total_count_station_surprise_inspection) else 0 end) *100,2),
#                 round((case when sum(total_count_station_drive_inspection) != 0 then sum(pending_count_station_drive_inspection) / sum(total_count_station_drive_inspection) else 0 end) *100,2),
#                 round((case when sum(total_count_section_passenger_safety) != 0 then sum(pending_count_section_passenger_safety) / sum(total_count_section_passenger_safety) else 0 end) *100,2),
#                 round((case when sum(total_count_section_employee_safety) != 0 then sum(pending_count_section_employee_safety) / sum(total_count_section_employee_safety) else 0 end) *100,2),
#                 round((case when sum(total_count_section_others) != 0 then sum(pending_count_section_others) / sum(total_count_section_others) else 0 end) *100,2),
#                 round((case when sum(total_count_section_night_inspection) != 0 then sum(pending_count_section_night_inspection) / sum(total_count_section_night_inspection) else 0 end) *100,2),
#                 round((case when sum(total_count_section_surprise_inspection) != 0 then sum(pending_count_section_surprise_inspection) / sum(total_count_section_surprise_inspection) else 0 end) *100,2),
#                 round((case when sum(total_count_section_drive_inspection) != 0 then sum(pending_count_section_drive_inspection) / sum(total_count_section_drive_inspection) else 0 end) *100,2),
#                 round((case when sum(total_count_train_passenger_safety) != 0 then sum(pending_count_train_passenger_safety) / sum(total_count_train_passenger_safety) else 0 end) *100,2),
#                 round((case when sum(total_count_train_employee_safety) != 0 then sum(pending_count_train_employee_safety) / sum(total_count_train_employee_safety) else 0 end) *100,2),
#                 round((case when sum(total_count_train_others) != 0 then sum(pending_count_train_others) / sum(total_count_train_others) else 0 end) *100,2),
#                 round((case when sum(total_count_train_night_inspection) != 0 then sum(pending_count_train_night_inspection) / sum(total_count_train_night_inspection) else 0 end) *100,2),
#                 round((case when sum(total_count_train_surprise_inspection) != 0 then sum(pending_count_train_surprise_inspection) / sum(total_count_train_surprise_inspection) else 0 end) *100,2),
#                 round((case when sum(total_count_train_drive_inspection) != 0 then sum(pending_count_train_drive_inspection) / sum(total_count_train_drive_inspection) else 0 end) *100,2),
#                 round((case when sum(total_count_others_passenger_safety) != 0 then sum(pending_count_others_passenger_safety) / sum(total_count_others_passenger_safety) else 0 end) *100,2),
#                 round((case when sum(total_count_others_employee_safety) != 0 then sum(pending_count_others_employee_safety) / sum(total_count_others_employee_safety) else 0 end) *100,2),
#                 round((case when sum(total_count_others_others) != 0 then sum(pending_count_others_others) / sum(total_count_others_others) else 0 end) *100,2),
#                 round((case when sum(total_count_others_night_inspection) != 0 then sum(total_count_others_night_inspection) / sum(total_count_others_night_inspection) else 0 end) *100,2),
#                 round((case when sum(total_count_others_surprise_inspection) != 0 then sum(total_count_others_surprise_inspection) / sum(total_count_others_surprise_inspection) else 0 end) *100,2),
#                 round((case when sum(total_count_others_drive_inspection) != 0 then sum(total_count_others_drive_inspection) / sum(total_count_others_drive_inspection) else 0 end) *100,2)
#                 from inspection_analysis_table3 where location_type=%s  and location_code in %s;''',[irTypeVal,allLocationCodeData])
#             thirdRowData = cursor.fetchall()


#             allDepartment = list(models.departMast.objects.values('department_name','department_code').distinct().order_by('department_name'))
#             allDesignation = list(models.Level_Desig.objects.filter(rly_unit__in = models.railwayLocationMaster.objects.filter(location_type__in=['DIV','RB','ZR']).values('rly_unit_code')).values('designation_code','designation').order_by('designation'))
#             cursor.close()
#     context = {
#         'allDepartment':allDepartment,
#         'allDesignation':allDesignation,
#         'allFinYear':json.dumps([prevFinYear,curFinYear]),
#         'daysArray':daysArray,
#         'count_list1':json.dumps(count_list1),
#         'count_list2':json.dumps(count_list2),
#         'count_list3':json.dumps(count_list3),
#         'count_list4':json.dumps(count_list4),
#         'count_list5':json.dumps(count_list5),
#         'count_list6':json.dumps(count_list6),
#         'firstRowAllData':firstRowAllData,
#         'secondRowAllData':secondRowAllData,
#         'pendencyDataCard1':pendencyDataCard1,
#         'pendencyDataCard2':pendencyDataCard2,
#         'thirdRowData':thirdRowData,
#         'irTypeVal':irTypeVal,
#         'irDetailsVal':irDetailsVal,

#     }
#     return render(request,'svgtemplate.html',context)

# def inspectionDetailsMap(request):
#     N_DAYS_AGO = 5
#     today = datetime.now()    
#     n_days_ago = today - timedelta(days=N_DAYS_AGO)
#     daysArray=[]
#     for i in range(5):
#         daysArray.append((n_days_ago + timedelta(days=i)).strftime('%d/%m'))
#     daysArray = list(reversed(daysArray))
#     finYearCombined = finYear().split('-')
#     curFinYear = finYearCombined[0]+'-'+(finYearCombined[1])[2:]
#     prevFinYear = str(int(finYearCombined[0])-1)+'-'+(finYearCombined[0])[2:]
    

#     if request.method == "GET" and request.is_ajax():
#         typ = request.GET.get('typ')  
        
#         if typ == 'DesignationDetails':
#             zone = request.GET.get('zone')
#             location = request.GET.get('location')
#             if zone != '':
#                 data = list(models.Level_Desig.objects.filter(rly_unit__in = models.railwayLocationMaster.objects.filter(Q(location_code=zone) | Q(parent_location_code=zone),location_type=location).values('rly_unit_code')).values('designation_code','designation').order_by('designation'))
#             else:
#                 data = list(models.Level_Desig.objects.filter(rly_unit__in = models.railwayLocationMaster.objects.filter(location_type=location).values('rly_unit_code')).values('designation_code','designation').order_by('designation'))
#             return JsonResponse(data, safe = False)
    
#     if request.method == "GET":
#         cursor = connection.cursor()
#         cursor.execute('''select sum(total_count_others)::int,sum(pending_count_others)::int,sum(pending_overdue_count_others)::int,
#             sum(total_count_passenger_safety)::int,sum(pending_count_passenger_safety)::int,sum(pending_overdue_count_passenger_safety)::int,
#             sum(total_count_employee_safety)::int,sum(pending_count_employee_safety)::int,sum(pending_overdue_count_employee_safety)::int
#             from inspection_analysis_table1 where fin_year=%s;''',[prevFinYear])
#         firstPrevFinYear = cursor.fetchall()
#         count_list1 =[]
#         count_list2 =[]
#         count_list3 =[]
#         if len(firstPrevFinYear)>0:
#             count_list3.append([firstPrevFinYear[0][0],firstPrevFinYear[0][1],firstPrevFinYear[0][2]])
#             count_list1.append([firstPrevFinYear[0][3],firstPrevFinYear[0][4],firstPrevFinYear[0][5]])
#             count_list2.append([firstPrevFinYear[0][6],firstPrevFinYear[0][7],firstPrevFinYear[0][8]])
#         else:
#             count_list1.append([0,0,0])
#             count_list2.append([0,0,0])
#             count_list3.append([0,0,0])
#         cursor.execute('''select sum(total_count_others)::int,sum(pending_count_others)::int,sum(pending_overdue_count_others)::int,
#             sum(total_count_passenger_safety)::int,sum(pending_count_passenger_safety)::int,sum(pending_overdue_count_passenger_safety)::int,
#             sum(total_count_employee_safety)::int,sum(pending_count_employee_safety)::int,sum(pending_overdue_count_employee_safety)::int
#             from inspection_analysis_table1 where fin_year=%s;''',[curFinYear])
#         firstCurFinYear = cursor.fetchall()
        
#         if len(firstCurFinYear)>0:
#             count_list3.append([firstCurFinYear[0][0],firstCurFinYear[0][1],firstCurFinYear[0][2]])
#             count_list1.append([firstCurFinYear[0][3],firstCurFinYear[0][4],firstCurFinYear[0][5]])
#             count_list2.append([firstCurFinYear[0][6],firstCurFinYear[0][7],firstCurFinYear[0][8]])
#         else:
#             count_list1.append([0,0,0])
#             count_list2.append([0,0,0])
#             count_list3.append([0,0,0])

#         cursor.execute('''select sum(total_count_others)::int,sum(pending_count_others)::int,sum(pending_overdue_count_others)::int,
#                 round((case when sum(total_count_others) != 0 then sum(pending_count_others) / sum(total_count_others) else 0 end) *100,2),
#                 round((case when sum(total_count_others) != 0 then sum(pending_overdue_count_others) / sum(total_count_others) else 0 end) *100,2),
#                 sum(last_one_days_count_others)::int,sum(last_two_days_count_others)::int,sum(last_three_days_count_others)::int,
#                 sum(last_four_days_count_others)::int,sum(last_five_days_count_others)::int,			
#                 sum(total_count_passenger_safety)::int,sum(pending_count_passenger_safety)::int,sum(pending_overdue_count_passenger_safety)::int,
#                 round((case when sum(total_count_passenger_safety) != 0 then sum(pending_count_passenger_safety) / sum(total_count_passenger_safety) else 0 end) *100,2),
#                 round((case when sum(total_count_passenger_safety) != 0 then sum(pending_overdue_count_passenger_safety) / sum(total_count_passenger_safety) else 0 end) *100,2),
#                 sum(last_one_days_count_passenger_safety)::int,sum(last_two_days_count_passenger_safety)::int,sum(last_three_days_count_passenger_safety)::int,
#                 sum(last_four_days_count_passenger_safety)::int,sum(last_five_days_count_passenger_safety)::int,
#                 sum(total_count_employee_safety)::int,sum(pending_count_employee_safety)::int,sum(pending_overdue_count_employee_safety)::int,
#                 round((case when sum(total_count_employee_safety) != 0 then sum(pending_count_employee_safety) / sum(total_count_employee_safety) else 0 end) *100,2),
#                 round((case when sum(total_count_employee_safety) != 0 then sum(pending_overdue_count_employee_safety) / sum(total_count_employee_safety) else 0 end) *100,2),
#                 sum(last_one_days_count_employee_safety)::int,sum(last_two_days_count_employee_safety)::int,sum(last_three_days_count_employee_safety)::int,
#                 sum(last_four_days_count_employee_safety)::int,sum(last_five_days_count_employee_safety)::int
#                 from inspection_analysis_table1;''')
#         firstRowAllData = cursor.fetchall()


#         cursor.execute('''select sum(total_count_night_inspection)::int,sum(pending_count_night_inspection)::int,sum(pending_overdue_count_night_inspection)::int,
#             sum(total_count_surprise_inspection)::int,sum(pending_count_surprise_inspection)::int,sum(pending_overdue_count_surprise_inspection)::int,
#             sum(total_count_drive_based_inspection)::int,sum(pending_count_drive_based_inspection)::int,sum(pending_overdue_percentage_drive_based_inspection)::int
#             from inspection_analysis_table2 where fin_year=%s;''',[prevFinYear])
#         secondPrevFinYear = cursor.fetchall()
#         count_list4 =[]
#         count_list5 =[]
#         count_list6 =[]
#         if len(secondPrevFinYear)>0:
#             count_list4.append([secondPrevFinYear[0][0],secondPrevFinYear[0][1],secondPrevFinYear[0][2]])
#             count_list5.append([secondPrevFinYear[0][3],secondPrevFinYear[0][4],secondPrevFinYear[0][5]])
#             count_list6.append([secondPrevFinYear[0][6],secondPrevFinYear[0][7],secondPrevFinYear[0][8]])
#         else:
#             count_list4.append([0,0,0])
#             count_list5.append([0,0,0])
#             count_list6.append([0,0,0])
#         cursor.execute('''select sum(total_count_night_inspection)::int,sum(pending_count_night_inspection)::int,sum(pending_overdue_count_night_inspection)::int,
#             sum(total_count_surprise_inspection)::int,sum(pending_count_surprise_inspection)::int,sum(pending_overdue_count_surprise_inspection)::int,
#             sum(total_count_drive_based_inspection)::int,sum(pending_count_drive_based_inspection)::int,sum(pending_overdue_percentage_drive_based_inspection)::int
#             from inspection_analysis_table2 where fin_year=%s;''',[curFinYear])
#         secondCurFinYear = cursor.fetchall()
        
#         if len(firstCurFinYear)>0:
#             count_list4.append([secondCurFinYear[0][0],secondCurFinYear[0][1],secondCurFinYear[0][2]])
#             count_list5.append([secondCurFinYear[0][3],secondCurFinYear[0][4],secondCurFinYear[0][5]])
#             count_list6.append([secondCurFinYear[0][6],secondCurFinYear[0][7],secondCurFinYear[0][8]])
#         else:
#             count_list4.append([0,0,0])
#             count_list5.append([0,0,0])
#             count_list6.append([0,0,0])

#         cursor.execute('''select sum(total_count_night_inspection)::int,sum(pending_count_night_inspection)::int,sum(pending_overdue_count_night_inspection)::int,
#             round((case when sum(total_count_night_inspection) != 0 then sum(pending_count_night_inspection) / sum(total_count_night_inspection) else 0 end) *100,2),
#             round((case when sum(total_count_night_inspection) != 0 then sum(pending_count_night_inspection) / sum(total_count_night_inspection) else 0 end) *100,2),
#             sum(last_one_days_count_night_inspection)::int,sum(last_two_days_count_night_inspection)::int,sum(last_three_days_count_night_inspection)::int,
#             sum(last_four_days_count_night_inspection)::int,sum(last_five_days_count_night_inspection)::int,	
#             sum(total_count_surprise_inspection)::int,sum(pending_count_surprise_inspection)::int,sum(pending_overdue_count_surprise_inspection)::int,
#             round((case when sum(total_count_surprise_inspection) != 0 then sum(pending_count_surprise_inspection) / sum(total_count_surprise_inspection) else 0 end) *100,2),
#             round((case when sum(total_count_surprise_inspection) != 0 then sum(pending_overdue_count_surprise_inspection) / sum(total_count_surprise_inspection) else 0 end) *100,2),
#             sum(last_one_days_count_surprise_inspection)::int,sum(last_two_days_count_surprise_inspection)::int,sum(last_three_days_count_surprise_inspection)::int,
#             sum(last_four_days_count_surprise_inspection)::int,sum(last_five_days_count_surprise_inspection)::int,
#             sum(total_count_drive_based_inspection)::int,sum(pending_count_drive_based_inspection)::int,sum(pending_overdue_percentage_drive_based_inspection)::int,
#             round((case when sum(total_count_drive_based_inspection) != 0 then sum(pending_overdue_percentage_drive_based_inspection) / sum(total_count_drive_based_inspection) else 0 end) *100,2),
#             round((case when sum(total_count_drive_based_inspection) != 0 then sum(pending_overdue_percentage_drive_based_inspection) / sum(total_count_drive_based_inspection) else 0 end) *100,2),
#             sum(last_one_days_count_drive_based_inspection)::int,sum(last_two_days_count_drive_based_inspection)::int,sum(last_three_days_count_drive_based_inspection)::int,
#             sum(last_four_days_count_drive_based_inspection)::int,sum(last_five_days_count_drive_based_inspection)::int
#             from inspection_analysis_table2;''')
#         secondRowAllData = cursor.fetchall()

#         #########   forth row card(pendency)

#         cursor.execute('''select sum(count_7_days_passenger_safety),sum(count_30_days_passenger_safety),sum(count_90_days_passenger_safety),
#             sum(count_180_days_passenger_safety),sum(count_365_days_passenger_safety),
#             sum(count_7_days_employee_safety),sum(count_30_days_employee_safety),sum(count_90_days_employee_safety),
#             sum(count_180_days_employee_safety),sum(count_365_days_employee_safety),
#             sum(count_7_days_others),sum(count_30_days_others),sum(count_90_days_others),
#             sum(count_180_days_others),sum(count_365_days_others)
#             from inspection_pendency_analysis_table1;''')
#         pendencyDataCard1 = cursor.fetchall()

#         cursor.execute('''select sum(count_7_days_night_inspection),sum(count_30_days_night_inspection),sum(count_90_days_night_inspection),
#             sum(count_180_days_night_inspection),sum(count_365_days_night_inspection),
#             sum(count_7_days_surprise_inspection),sum(count_30_days_surprise_inspection),sum(count_90_days_surprise_inspection),
#             sum(count_180_days_surprise_inspection),sum(count_365_days_surprise_inspection),
#             sum(count_7_days_drive_based_inspection),sum(count_30_days_drive_based_inspection),sum(count_90_days_drive_based_inspection),
#             sum(count_180_days_drive_based_inspection),sum(count_365_days_drive_based_inspection),
#             sum(count_7_days_regular_inspection),sum(count_30_days_regular_inspection),sum(count_90_days_regular_inspection),
#             sum(count_180_days_regular_inspection),sum(count_365_days_regular_inspection)
#             from inspection_pendency_analysis_table2;''')
#         pendencyDataCard2 = cursor.fetchall()


#         cursor.execute('''select  sum(total_count_station_passenger_safety),sum(total_count_station_employee_safety),sum(total_count_station_others),
#             sum(total_count_station_night_inspection),sum(total_count_station_surprise_inspection),sum(total_count_station_drive_inspection),
#             sum(total_count_section_passenger_safety),sum(total_count_section_employee_safety),sum(total_count_section_others),
#             sum(total_count_section_night_inspection),sum(total_count_section_surprise_inspection),sum(total_count_section_drive_inspection),
#             sum(total_count_train_passenger_safety),sum(total_count_train_employee_safety),sum(total_count_train_others),
#             sum(total_count_train_night_inspection),sum(total_count_train_surprise_inspection),sum(total_count_train_drive_inspection),
#             sum(total_count_others_passenger_safety),sum(total_count_others_employee_safety),sum(total_count_others_others),
#             sum(total_count_others_night_inspection),sum(total_count_others_surprise_inspection),sum(total_count_others_drive_inspection),
#             round((case when sum(total_count_station_passenger_safety) != 0 then sum(pending_count_station_passenger_safety) / sum(total_count_station_passenger_safety) else 0 end) *100,2),
#             round((case when sum(total_count_station_employee_safety) != 0 then sum(pending_count_station_employee_safety) / sum(total_count_station_employee_safety) else 0 end) *100,2),
#             round((case when sum(total_count_station_others) != 0 then sum(pending_count_station_others) / sum(total_count_station_others) else 0 end) *100,2),
#             round((case when sum(total_count_station_night_inspection) != 0 then sum(pending_count_station_night_inspection) / sum(total_count_station_night_inspection) else 0 end) *100,2),
#             round((case when sum(total_count_station_surprise_inspection) != 0 then sum(pending_count_station_surprise_inspection) / sum(total_count_station_surprise_inspection) else 0 end) *100,2),
#             round((case when sum(total_count_station_drive_inspection) != 0 then sum(pending_count_station_drive_inspection) / sum(total_count_station_drive_inspection) else 0 end) *100,2),
#             round((case when sum(total_count_section_passenger_safety) != 0 then sum(pending_count_section_passenger_safety) / sum(total_count_section_passenger_safety) else 0 end) *100,2),
#             round((case when sum(total_count_section_employee_safety) != 0 then sum(pending_count_section_employee_safety) / sum(total_count_section_employee_safety) else 0 end) *100,2),
#             round((case when sum(total_count_section_others) != 0 then sum(pending_count_section_others) / sum(total_count_section_others) else 0 end) *100,2),
#             round((case when sum(total_count_section_night_inspection) != 0 then sum(pending_count_section_night_inspection) / sum(total_count_section_night_inspection) else 0 end) *100,2),
#             round((case when sum(total_count_section_surprise_inspection) != 0 then sum(pending_count_section_surprise_inspection) / sum(total_count_section_surprise_inspection) else 0 end) *100,2),
#             round((case when sum(total_count_section_drive_inspection) != 0 then sum(pending_count_section_drive_inspection) / sum(total_count_section_drive_inspection) else 0 end) *100,2),
#             round((case when sum(total_count_train_passenger_safety) != 0 then sum(pending_count_train_passenger_safety) / sum(total_count_train_passenger_safety) else 0 end) *100,2),
#             round((case when sum(total_count_train_employee_safety) != 0 then sum(pending_count_train_employee_safety) / sum(total_count_train_employee_safety) else 0 end) *100,2),
#             round((case when sum(total_count_train_others) != 0 then sum(pending_count_train_others) / sum(total_count_train_others) else 0 end) *100,2),
#             round((case when sum(total_count_train_night_inspection) != 0 then sum(pending_count_train_night_inspection) / sum(total_count_train_night_inspection) else 0 end) *100,2),
#             round((case when sum(total_count_train_surprise_inspection) != 0 then sum(pending_count_train_surprise_inspection) / sum(total_count_train_surprise_inspection) else 0 end) *100,2),
#             round((case when sum(total_count_train_drive_inspection) != 0 then sum(pending_count_train_drive_inspection) / sum(total_count_train_drive_inspection) else 0 end) *100,2),
#             round((case when sum(total_count_others_passenger_safety) != 0 then sum(pending_count_others_passenger_safety) / sum(total_count_others_passenger_safety) else 0 end) *100,2),
#             round((case when sum(total_count_others_employee_safety) != 0 then sum(pending_count_others_employee_safety) / sum(total_count_others_employee_safety) else 0 end) *100,2),
#             round((case when sum(total_count_others_others) != 0 then sum(pending_count_others_others) / sum(total_count_others_others) else 0 end) *100,2),
#             round((case when sum(total_count_others_night_inspection) != 0 then sum(total_count_others_night_inspection) / sum(total_count_others_night_inspection) else 0 end) *100,2),
#             round((case when sum(total_count_others_surprise_inspection) != 0 then sum(total_count_others_surprise_inspection) / sum(total_count_others_surprise_inspection) else 0 end) *100,2),
#             round((case when sum(total_count_others_drive_inspection) != 0 then sum(total_count_others_drive_inspection) / sum(total_count_others_drive_inspection) else 0 end) *100,2)
#             from inspection_analysis_table3;''')
#         thirdRowData = cursor.fetchall()


#         allDepartment = list(models.departMast.objects.values('department_name','department_code').distinct().order_by('department_name'))
#         allDesignation = list(models.Level_Desig.objects.filter(rly_unit__in = models.railwayLocationMaster.objects.filter(location_type__in=['DIV','RB','ZR']).values('rly_unit_code')).values('designation_code','designation').order_by('designation'))
#         cursor.close()
#         irTypeVal = 'ZR'
#         irDetailsVal = 'All'
#         irMapVal = '1'
#         irPathVal1 = None
#         irPathVal2 = ''
#         dataZoneWs = []
#         irPath2 = None
#     if request.method == "POST":
#         submitvalue = request.POST.get('submit')
#         irPathVal1 = None
#         irPathVal2 = ''
#         dataZoneWs = []
#         if submitvalue == 'irSubmitButton':
#             cursor = connection.cursor()
#             irTypeVal = request.POST.get('irType')  
#             irPath2 = request.POST.get('irPath2')
            
#             if irTypeVal == 'PU':
#                 irMapVal = '2'
#             else:
#                 irMapVal = '1'
#             irDetailsVal = request.POST.get('irDetails')

           

#             if irTypeVal == 'DIV':
#                 zone = irDetailsVal
#                 dataZoneWs = list(models.railwayLocationMaster.objects.filter(parent_location_code=zone,location_type = 'DIV').values('location_code','location_description').order_by('location_code'))
                
#             elif irTypeVal == 'WS':
#                 zone = irDetailsVal
#                 dataZoneWs = list(models.railwayLocationMaster.objects.filter(parent_location_code=zone,location_type = 'WS').values('location_code','location_description').order_by('location_code'))
            
#             if irTypeVal == 'ZR':   
#                 irTypeValData = ['ZR','DIV','WS']
            
#             elif irTypeVal == 'HQ':
#                 irTypeValData = ['ZR']
#             else:
#                 irTypeValData = [irTypeVal]
            

#             if irDetailsVal == 'All':
#                 allLocationCodeData = tuple(models.railwayLocationMaster.objects.filter(location_type__in = irTypeValData).values_list('location_code',flat=True).distinct())
#             else:
#                 irPathVal1 = irDetailsVal
#                 allLocationCodeData = list(models.railwayLocationMaster.objects.filter(Q(parent_location_code=irDetailsVal)).values_list('location_code',flat=True).distinct())
#                 allLocationCodeData.append(irDetailsVal)
#                 allLocationCodeData = tuple(allLocationCodeData)
            
#             if irPath2 != '':
#                 irPathVal2 = irPath2
#                 allLocationCodeData = tuple([irPath2])
#                 irTypeValData = [irTypeVal]
           
#             cursor.execute('''select sum(total_count_others)::int,sum(pending_count_others)::int,sum(pending_overdue_count_others)::int,
#                 sum(total_count_passenger_safety)::int,sum(pending_count_passenger_safety)::int,sum(pending_overdue_count_passenger_safety)::int,
#                 sum(total_count_employee_safety)::int,sum(pending_count_employee_safety)::int,sum(pending_overdue_count_employee_safety)::int
#                 from inspection_analysis_table1 where fin_year=%s and location_type in %s  and location_code in %s;''',[prevFinYear,tuple(irTypeValData),allLocationCodeData])
#             firstPrevFinYear = cursor.fetchall()
#             count_list1 =[]
#             count_list2 =[]
#             count_list3 =[]
#             if len(firstPrevFinYear)>0:
#                 count_list3.append([firstPrevFinYear[0][0],firstPrevFinYear[0][1],firstPrevFinYear[0][2]])
#                 count_list1.append([firstPrevFinYear[0][3],firstPrevFinYear[0][4],firstPrevFinYear[0][5]])
#                 count_list2.append([firstPrevFinYear[0][6],firstPrevFinYear[0][7],firstPrevFinYear[0][8]])
#             else:
#                 count_list1.append([0,0,0])
#                 count_list2.append([0,0,0])
#                 count_list3.append([0,0,0])
#             cursor.execute('''select sum(total_count_others)::int,sum(pending_count_others)::int,sum(pending_overdue_count_others)::int,
#                 sum(total_count_passenger_safety)::int,sum(pending_count_passenger_safety)::int,sum(pending_overdue_count_passenger_safety)::int,
#                 sum(total_count_employee_safety)::int,sum(pending_count_employee_safety)::int,sum(pending_overdue_count_employee_safety)::int
#                 from inspection_analysis_table1 where fin_year=%s and location_type in %s  and location_code in %s;''',[curFinYear,tuple(irTypeValData),allLocationCodeData])
#             firstCurFinYear = cursor.fetchall()
            
#             if len(firstCurFinYear)>0:
#                 count_list3.append([firstCurFinYear[0][0],firstCurFinYear[0][1],firstCurFinYear[0][2]])
#                 count_list1.append([firstCurFinYear[0][3],firstCurFinYear[0][4],firstCurFinYear[0][5]])
#                 count_list2.append([firstCurFinYear[0][6],firstCurFinYear[0][7],firstCurFinYear[0][8]])
#             else:
#                 count_list1.append([0,0,0])
#                 count_list2.append([0,0,0])
#                 count_list3.append([0,0,0])

#             cursor.execute('''select sum(total_count_others)::int,sum(pending_count_others)::int,sum(pending_overdue_count_others)::int,
#                     round((case when sum(total_count_others) != 0 then sum(pending_count_others) / sum(total_count_others) else 0 end) *100,2),
#                     round((case when sum(total_count_others) != 0 then sum(pending_overdue_count_others) / sum(total_count_others) else 0 end) *100,2),
#                     sum(last_one_days_count_others)::int,sum(last_two_days_count_others)::int,sum(last_three_days_count_others)::int,
#                     sum(last_four_days_count_others)::int,sum(last_five_days_count_others)::int,			
#                     sum(total_count_passenger_safety)::int,sum(pending_count_passenger_safety)::int,sum(pending_overdue_count_passenger_safety)::int,
#                     round((case when sum(total_count_passenger_safety) != 0 then sum(pending_count_passenger_safety) / sum(total_count_passenger_safety) else 0 end) *100,2),
#                     round((case when sum(total_count_passenger_safety) != 0 then sum(pending_overdue_count_passenger_safety) / sum(total_count_passenger_safety) else 0 end) *100,2),
#                     sum(last_one_days_count_passenger_safety)::int,sum(last_two_days_count_passenger_safety)::int,sum(last_three_days_count_passenger_safety)::int,
#                     sum(last_four_days_count_passenger_safety)::int,sum(last_five_days_count_passenger_safety)::int,
#                     sum(total_count_employee_safety)::int,sum(pending_count_employee_safety)::int,sum(pending_overdue_count_employee_safety)::int,
#                     round((case when sum(total_count_employee_safety) != 0 then sum(pending_count_employee_safety) / sum(total_count_employee_safety) else 0 end) *100,2),
#                     round((case when sum(total_count_employee_safety) != 0 then sum(pending_overdue_count_employee_safety) / sum(total_count_employee_safety) else 0 end) *100,2),
#                     sum(last_one_days_count_employee_safety)::int,sum(last_two_days_count_employee_safety)::int,sum(last_three_days_count_employee_safety)::int,
#                     sum(last_four_days_count_employee_safety)::int,sum(last_five_days_count_employee_safety)::int
#                     from inspection_analysis_table1 where location_type in %s  and location_code in %s;''',[tuple(irTypeValData),allLocationCodeData])
#             firstRowAllData = cursor.fetchall()
            
#             firstRowAllData = [list([x if x != None else 0 for x in firstRowAllData[0] ])]
            



#             cursor.execute('''select sum(total_count_night_inspection)::int,sum(pending_count_night_inspection)::int,sum(pending_overdue_count_night_inspection)::int,
#                 sum(total_count_surprise_inspection)::int,sum(pending_count_surprise_inspection)::int,sum(pending_overdue_count_surprise_inspection)::int,
#                 sum(total_count_drive_based_inspection)::int,sum(pending_count_drive_based_inspection)::int,sum(pending_overdue_percentage_drive_based_inspection)::int
#                 from inspection_analysis_table2 where fin_year=%s and location_type in %s  and location_code in %s;''',[prevFinYear,tuple(irTypeValData),allLocationCodeData])
#             secondPrevFinYear = cursor.fetchall()
#             count_list4 =[]
#             count_list5 =[]
#             count_list6 =[]
#             if len(secondPrevFinYear)>0:
#                 count_list4.append([secondPrevFinYear[0][0],secondPrevFinYear[0][1],secondPrevFinYear[0][2]])
#                 count_list5.append([secondPrevFinYear[0][3],secondPrevFinYear[0][4],secondPrevFinYear[0][5]])
#                 count_list6.append([secondPrevFinYear[0][6],secondPrevFinYear[0][7],secondPrevFinYear[0][8]])
#             else:
#                 count_list4.append([0,0,0])
#                 count_list5.append([0,0,0])
#                 count_list6.append([0,0,0])
#             cursor.execute('''select sum(total_count_night_inspection)::int,sum(pending_count_night_inspection)::int,sum(pending_overdue_count_night_inspection)::int,
#                 sum(total_count_surprise_inspection)::int,sum(pending_count_surprise_inspection)::int,sum(pending_overdue_count_surprise_inspection)::int,
#                 sum(total_count_drive_based_inspection)::int,sum(pending_count_drive_based_inspection)::int,sum(pending_overdue_percentage_drive_based_inspection)::int
#                 from inspection_analysis_table2 where fin_year=%s and location_type in %s  and location_code in %s;''',[curFinYear,tuple(irTypeValData),allLocationCodeData])
#             secondCurFinYear = cursor.fetchall()
            
#             if len(firstCurFinYear)>0:
#                 count_list4.append([secondCurFinYear[0][0],secondCurFinYear[0][1],secondCurFinYear[0][2]])
#                 count_list5.append([secondCurFinYear[0][3],secondCurFinYear[0][4],secondCurFinYear[0][5]])
#                 count_list6.append([secondCurFinYear[0][6],secondCurFinYear[0][7],secondCurFinYear[0][8]])
#             else:
#                 count_list4.append([0,0,0])
#                 count_list5.append([0,0,0])
#                 count_list6.append([0,0,0])

#             cursor.execute('''select sum(total_count_night_inspection)::int,sum(pending_count_night_inspection)::int,sum(pending_overdue_count_night_inspection)::int,
#                 round((case when sum(total_count_night_inspection) != 0 then sum(pending_count_night_inspection) / sum(total_count_night_inspection) else 0 end) *100,2),
#                 round((case when sum(total_count_night_inspection) != 0 then sum(pending_count_night_inspection) / sum(total_count_night_inspection) else 0 end) *100,2),
#                 sum(last_one_days_count_night_inspection)::int,sum(last_two_days_count_night_inspection)::int,sum(last_three_days_count_night_inspection)::int,
#                 sum(last_four_days_count_night_inspection)::int,sum(last_five_days_count_night_inspection)::int,	
#                 sum(total_count_surprise_inspection)::int,sum(pending_count_surprise_inspection)::int,sum(pending_overdue_count_surprise_inspection)::int,
#                 round((case when sum(total_count_surprise_inspection) != 0 then sum(pending_count_surprise_inspection) / sum(total_count_surprise_inspection) else 0 end) *100,2),
#                 round((case when sum(total_count_surprise_inspection) != 0 then sum(pending_overdue_count_surprise_inspection) / sum(total_count_surprise_inspection) else 0 end) *100,2),
#                 sum(last_one_days_count_surprise_inspection)::int,sum(last_two_days_count_surprise_inspection)::int,sum(last_three_days_count_surprise_inspection)::int,
#                 sum(last_four_days_count_surprise_inspection)::int,sum(last_five_days_count_surprise_inspection)::int,
#                 sum(total_count_drive_based_inspection)::int,sum(pending_count_drive_based_inspection)::int,sum(pending_overdue_percentage_drive_based_inspection)::int,
#                 round((case when sum(total_count_drive_based_inspection) != 0 then sum(pending_overdue_percentage_drive_based_inspection) / sum(total_count_drive_based_inspection) else 0 end) *100,2),
#                 round((case when sum(total_count_drive_based_inspection) != 0 then sum(pending_overdue_percentage_drive_based_inspection) / sum(total_count_drive_based_inspection) else 0 end) *100,2),
#                 sum(last_one_days_count_drive_based_inspection)::int,sum(last_two_days_count_drive_based_inspection)::int,sum(last_three_days_count_drive_based_inspection)::int,
#                 sum(last_four_days_count_drive_based_inspection)::int,sum(last_five_days_count_drive_based_inspection)::int
#                 from inspection_analysis_table2 where location_type in %s  and location_code in %s;''',[tuple(irTypeValData),allLocationCodeData])
#             secondRowAllData = cursor.fetchall()
#             secondRowAllData = [list([x if x != None else 0 for x in secondRowAllData[0] ])]
#             #########   forth row card(pendency)

#             cursor.execute('''select sum(count_7_days_passenger_safety),sum(count_30_days_passenger_safety),sum(count_90_days_passenger_safety),
#                 sum(count_180_days_passenger_safety),sum(count_365_days_passenger_safety),
#                 sum(count_7_days_employee_safety),sum(count_30_days_employee_safety),sum(count_90_days_employee_safety),
#                 sum(count_180_days_employee_safety),sum(count_365_days_employee_safety),
#                 sum(count_7_days_others),sum(count_30_days_others),sum(count_90_days_others),
#                 sum(count_180_days_others),sum(count_365_days_others)
#                 from inspection_pendency_analysis_table1 where location_type in %s  and location_code in %s;''',[tuple(irTypeValData),allLocationCodeData])
#             pendencyDataCard1 = cursor.fetchall()
#             pendencyDataCard1 = [list([x if x != None else 0 for x in pendencyDataCard1[0] ])]

#             cursor.execute('''select sum(count_7_days_night_inspection),sum(count_30_days_night_inspection),sum(count_90_days_night_inspection),
#                 sum(count_180_days_night_inspection),sum(count_365_days_night_inspection),
#                 sum(count_7_days_surprise_inspection),sum(count_30_days_surprise_inspection),sum(count_90_days_surprise_inspection),
#                 sum(count_180_days_surprise_inspection),sum(count_365_days_surprise_inspection),
#                 sum(count_7_days_drive_based_inspection),sum(count_30_days_drive_based_inspection),sum(count_90_days_drive_based_inspection),
#                 sum(count_180_days_drive_based_inspection),sum(count_365_days_drive_based_inspection),
#                 sum(count_7_days_regular_inspection),sum(count_30_days_regular_inspection),sum(count_90_days_regular_inspection),
#                 sum(count_180_days_regular_inspection),sum(count_365_days_regular_inspection)
#                 from inspection_pendency_analysis_table2 where location_type in %s  and location_code in %s;''',[tuple(irTypeValData),allLocationCodeData])
#             pendencyDataCard2 = cursor.fetchall()
#             pendencyDataCard2 = [list([x if x != None else 0 for x in pendencyDataCard2[0] ])]


#             cursor.execute('''select  sum(total_count_station_passenger_safety),sum(total_count_station_employee_safety),sum(total_count_station_others),
#                 sum(total_count_station_night_inspection),sum(total_count_station_surprise_inspection),sum(total_count_station_drive_inspection),
#                 sum(total_count_section_passenger_safety),sum(total_count_section_employee_safety),sum(total_count_section_others),
#                 sum(total_count_section_night_inspection),sum(total_count_section_surprise_inspection),sum(total_count_section_drive_inspection),
#                 sum(total_count_train_passenger_safety),sum(total_count_train_employee_safety),sum(total_count_train_others),
#                 sum(total_count_train_night_inspection),sum(total_count_train_surprise_inspection),sum(total_count_train_drive_inspection),
#                 sum(total_count_others_passenger_safety),sum(total_count_others_employee_safety),sum(total_count_others_others),
#                 sum(total_count_others_night_inspection),sum(total_count_others_surprise_inspection),sum(total_count_others_drive_inspection),
#                 round((case when sum(total_count_station_passenger_safety) != 0 then sum(pending_count_station_passenger_safety) / sum(total_count_station_passenger_safety) else 0 end) *100,2),
#                 round((case when sum(total_count_station_employee_safety) != 0 then sum(pending_count_station_employee_safety) / sum(total_count_station_employee_safety) else 0 end) *100,2),
#                 round((case when sum(total_count_station_others) != 0 then sum(pending_count_station_others) / sum(total_count_station_others) else 0 end) *100,2),
#                 round((case when sum(total_count_station_night_inspection) != 0 then sum(pending_count_station_night_inspection) / sum(total_count_station_night_inspection) else 0 end) *100,2),
#                 round((case when sum(total_count_station_surprise_inspection) != 0 then sum(pending_count_station_surprise_inspection) / sum(total_count_station_surprise_inspection) else 0 end) *100,2),
#                 round((case when sum(total_count_station_drive_inspection) != 0 then sum(pending_count_station_drive_inspection) / sum(total_count_station_drive_inspection) else 0 end) *100,2),
#                 round((case when sum(total_count_section_passenger_safety) != 0 then sum(pending_count_section_passenger_safety) / sum(total_count_section_passenger_safety) else 0 end) *100,2),
#                 round((case when sum(total_count_section_employee_safety) != 0 then sum(pending_count_section_employee_safety) / sum(total_count_section_employee_safety) else 0 end) *100,2),
#                 round((case when sum(total_count_section_others) != 0 then sum(pending_count_section_others) / sum(total_count_section_others) else 0 end) *100,2),
#                 round((case when sum(total_count_section_night_inspection) != 0 then sum(pending_count_section_night_inspection) / sum(total_count_section_night_inspection) else 0 end) *100,2),
#                 round((case when sum(total_count_section_surprise_inspection) != 0 then sum(pending_count_section_surprise_inspection) / sum(total_count_section_surprise_inspection) else 0 end) *100,2),
#                 round((case when sum(total_count_section_drive_inspection) != 0 then sum(pending_count_section_drive_inspection) / sum(total_count_section_drive_inspection) else 0 end) *100,2),
#                 round((case when sum(total_count_train_passenger_safety) != 0 then sum(pending_count_train_passenger_safety) / sum(total_count_train_passenger_safety) else 0 end) *100,2),
#                 round((case when sum(total_count_train_employee_safety) != 0 then sum(pending_count_train_employee_safety) / sum(total_count_train_employee_safety) else 0 end) *100,2),
#                 round((case when sum(total_count_train_others) != 0 then sum(pending_count_train_others) / sum(total_count_train_others) else 0 end) *100,2),
#                 round((case when sum(total_count_train_night_inspection) != 0 then sum(pending_count_train_night_inspection) / sum(total_count_train_night_inspection) else 0 end) *100,2),
#                 round((case when sum(total_count_train_surprise_inspection) != 0 then sum(pending_count_train_surprise_inspection) / sum(total_count_train_surprise_inspection) else 0 end) *100,2),
#                 round((case when sum(total_count_train_drive_inspection) != 0 then sum(pending_count_train_drive_inspection) / sum(total_count_train_drive_inspection) else 0 end) *100,2),
#                 round((case when sum(total_count_others_passenger_safety) != 0 then sum(pending_count_others_passenger_safety) / sum(total_count_others_passenger_safety) else 0 end) *100,2),
#                 round((case when sum(total_count_others_employee_safety) != 0 then sum(pending_count_others_employee_safety) / sum(total_count_others_employee_safety) else 0 end) *100,2),
#                 round((case when sum(total_count_others_others) != 0 then sum(pending_count_others_others) / sum(total_count_others_others) else 0 end) *100,2),
#                 round((case when sum(total_count_others_night_inspection) != 0 then sum(total_count_others_night_inspection) / sum(total_count_others_night_inspection) else 0 end) *100,2),
#                 round((case when sum(total_count_others_surprise_inspection) != 0 then sum(total_count_others_surprise_inspection) / sum(total_count_others_surprise_inspection) else 0 end) *100,2),
#                 round((case when sum(total_count_others_drive_inspection) != 0 then sum(total_count_others_drive_inspection) / sum(total_count_others_drive_inspection) else 0 end) *100,2)
#                 from inspection_analysis_table3 where location_type in %s  and location_code in %s;''',[tuple(irTypeValData),allLocationCodeData])
#             thirdRowData = cursor.fetchall()
#             thirdRowData = [list([x if x != None else 0 for x in thirdRowData[0] ])]

#             allDepartment = list(models.departMast.objects.values('department_name','department_code').distinct().order_by('department_name'))
#             allDesignation = list(models.Level_Desig.objects.filter(rly_unit__in = models.railwayLocationMaster.objects.filter(location_type__in=['DIV','RB','ZR']).values('rly_unit_code')).values('designation_code','designation').order_by('designation'))
#             cursor.close()

#     context = {
#         'allDepartment':allDepartment,
#         'allDesignation':allDesignation,
#         'allFinYear':json.dumps([prevFinYear,curFinYear]),
#         'daysArray':daysArray,
#         'count_list1':json.dumps(count_list1),
#         'count_list2':json.dumps(count_list2),
#         'count_list3':json.dumps(count_list3),
#         'count_list4':json.dumps(count_list4),
#         'count_list5':json.dumps(count_list5),
#         'count_list6':json.dumps(count_list6),
#         'firstRowAllData':firstRowAllData,
#         'secondRowAllData':secondRowAllData,
#         'pendencyDataCard1':pendencyDataCard1,
#         'pendencyDataCard2':pendencyDataCard2,
#         'thirdRowData':thirdRowData,
#         'irTypeVal':irTypeVal,
#         'irDetailsVal':irDetailsVal,
#         'irMapVal':irMapVal,
#         'irPathVal1':irPathVal1,
#         'irPathVal2':irPathVal2,
#         'dataZoneWs':dataZoneWs,

#     }
#     return render(request,'svgtemplate.html',context)


# def inspectionDetailsMap(request):
#     N_DAYS_AGO = 5
#     today = datetime.now()    
#     n_days_ago = today - timedelta(days=N_DAYS_AGO)
#     daysArray=[]
#     for i in range(5):
#         daysArray.append((n_days_ago + timedelta(days=i)).strftime('%d/%m'))
#     daysArray = list(reversed(daysArray))
#     finYearCombined = finYear().split('-')
#     curFinYear = finYearCombined[0]+'-'+(finYearCombined[1])[2:]
#     prevFinYear = str(int(finYearCombined[0])-1)+'-'+(finYearCombined[0])[2:]

#     if request.method == "POST" and request.is_ajax():
#         typ = request.POST.get('typ')  
        
#         if typ == 'DesignationDetails':

#             dept = request.POST.get('dept')
#             if(dept == 'All'):
#                 irTypeVal = request.POST.get('irType')   
#                 irPath2 = request.POST.get('irPath2')
#                 irDetailsVal = request.POST.get('irDetails')
               
#                 if irTypeVal == 'ZR':   
#                     irTypeValData = ['ZR','DIV','WS']
                
#                 elif irTypeVal == 'HQ':
#                     irTypeValData = ['ZR']
#                 else:
#                     irTypeValData = [irTypeVal]
#                 if irDetailsVal == 'All':
#                     allDesignation = list(models.Level_Desig.objects.filter(rly_unit__in = models.railwayLocationMaster.objects.filter(location_type__in = irTypeValData).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('designation'))
#                 else:
#                     allDesignation = list(models.Level_Desig.objects.filter(rly_unit__in = models.railwayLocationMaster.objects.filter(Q(location_code=irDetailsVal) | Q(parent_location_code=irDetailsVal),location_type__in = irTypeValData).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('designation'))
#                 if irPath2 != '':
#                     allDesignation = list(models.Level_Desig.objects.filter(rly_unit__in = models.railwayLocationMaster.objects.filter(Q(location_code=irPath2),location_type__in = irTypeValData).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('designation'))

#             else:
#                 irTypeVal = request.POST.get('irType')   
#                 irPath2 = request.POST.get('irPath2')
#                 irDetailsVal = request.POST.get('irDetails')
                
#                 if irTypeVal == 'ZR':   
#                     irTypeValData = ['ZR','DIV','WS']
                
#                 elif irTypeVal == 'HQ':
#                     irTypeValData = ['ZR']
#                 else:
#                     irTypeValData = [irTypeVal]
#                 if irDetailsVal == 'All':
#                     allDesignation = list(models.Level_Desig.objects.filter(department_code=dept,rly_unit__in = models.railwayLocationMaster.objects.filter(location_type__in = irTypeValData).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('designation'))
#                 else:
#                     allDesignation = list(models.Level_Desig.objects.filter(department_code=dept,rly_unit__in = models.railwayLocationMaster.objects.filter(Q(location_code=irDetailsVal) | Q(parent_location_code=irDetailsVal),location_type__in = irTypeValData).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('designation'))
#                 if irPath2 != '':
#                     allDesignation = list(models.Level_Desig.objects.filter(department_code=dept,rly_unit__in = models.railwayLocationMaster.objects.filter(Q(location_code=irPath2),location_type__in = irTypeValData).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('designation'))




#             for i in range(len(allDesignation)):
#                 d_level = allDesignation[i]['d_level']
#                 if d_level != None:
#                     catData = list(models.category.objects.filter(category=d_level).values('hierarchy_level'))
#                     if len(catData)>0:
#                         if catData[0]['hierarchy_level'] != None:
#                             allDesignation[i].update({'level':int(catData[0]['hierarchy_level'])})
#                         else:
#                             allDesignation[i].update({'level':1000})
#                     else:
#                         allDesignation[i].update({'level':1000})
#                 else:
#                     allDesignation[i].update({'level':1000})
#             allDesignation = sorted(allDesignation, key = lambda x: (x['level'],x['designation']))    
            
            
            
            
#             return JsonResponse(allDesignation, safe = False)
        
#     allDesignation = list(models.Level_Desig.objects.filter(rly_unit__in = models.railwayLocationMaster.objects.filter(location_type__in=['DIV','RB','ZR','PU','WS']).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('designation'))
#     allDepartment = list(models.departMast.objects.values('department_name','department_code').distinct().order_by('department_name'))


    
#     if request.method == "GET":
#         cursor = connection.cursor()
#         cursor.execute('''select sum(total_count_others)::int,sum(pending_count_others)::int,sum(pending_overdue_count_others)::int,
#             sum(total_count_passenger_safety)::int,sum(pending_count_passenger_safety)::int,sum(pending_overdue_count_passenger_safety)::int,
#             sum(total_count_employee_safety)::int,sum(pending_count_employee_safety)::int,sum(pending_overdue_count_employee_safety)::int
#             from inspection_analysis_table1 where fin_year=%s;''',[prevFinYear])
#         firstPrevFinYear = cursor.fetchall()
#         count_list1 =[]
#         count_list2 =[]
#         count_list3 =[]
#         if len(firstPrevFinYear)>0:
#             count_list3.append([firstPrevFinYear[0][0],firstPrevFinYear[0][1],firstPrevFinYear[0][2]])
#             count_list1.append([firstPrevFinYear[0][3],firstPrevFinYear[0][4],firstPrevFinYear[0][5]])
#             count_list2.append([firstPrevFinYear[0][6],firstPrevFinYear[0][7],firstPrevFinYear[0][8]])
#         else:
#             count_list1.append([0,0,0])
#             count_list2.append([0,0,0])
#             count_list3.append([0,0,0])
#         cursor.execute('''select sum(total_count_others)::int,sum(pending_count_others)::int,sum(pending_overdue_count_others)::int,
#             sum(total_count_passenger_safety)::int,sum(pending_count_passenger_safety)::int,sum(pending_overdue_count_passenger_safety)::int,
#             sum(total_count_employee_safety)::int,sum(pending_count_employee_safety)::int,sum(pending_overdue_count_employee_safety)::int
#             from inspection_analysis_table1 where fin_year=%s;''',[curFinYear])
#         firstCurFinYear = cursor.fetchall()
        
#         if len(firstCurFinYear)>0:
#             count_list3.append([firstCurFinYear[0][0],firstCurFinYear[0][1],firstCurFinYear[0][2]])
#             count_list1.append([firstCurFinYear[0][3],firstCurFinYear[0][4],firstCurFinYear[0][5]])
#             count_list2.append([firstCurFinYear[0][6],firstCurFinYear[0][7],firstCurFinYear[0][8]])
#         else:
#             count_list1.append([0,0,0])
#             count_list2.append([0,0,0])
#             count_list3.append([0,0,0])

#         cursor.execute('''select sum(total_count_others)::int,sum(pending_count_others)::int,sum(pending_overdue_count_others)::int,
#                 round((case when sum(total_count_others) != 0 then sum(pending_count_others) / sum(total_count_others) else 0 end) *100,2),
#                 round((case when sum(total_count_others) != 0 then sum(pending_overdue_count_others) / sum(total_count_others) else 0 end) *100,2),
#                 sum(last_one_days_count_others)::int,sum(last_two_days_count_others)::int,sum(last_three_days_count_others)::int,
#                 sum(last_four_days_count_others)::int,sum(last_five_days_count_others)::int,			
#                 sum(total_count_passenger_safety)::int,sum(pending_count_passenger_safety)::int,sum(pending_overdue_count_passenger_safety)::int,
#                 round((case when sum(total_count_passenger_safety) != 0 then sum(pending_count_passenger_safety) / sum(total_count_passenger_safety) else 0 end) *100,2),
#                 round((case when sum(total_count_passenger_safety) != 0 then sum(pending_overdue_count_passenger_safety) / sum(total_count_passenger_safety) else 0 end) *100,2),
#                 sum(last_one_days_count_passenger_safety)::int,sum(last_two_days_count_passenger_safety)::int,sum(last_three_days_count_passenger_safety)::int,
#                 sum(last_four_days_count_passenger_safety)::int,sum(last_five_days_count_passenger_safety)::int,
#                 sum(total_count_employee_safety)::int,sum(pending_count_employee_safety)::int,sum(pending_overdue_count_employee_safety)::int,
#                 round((case when sum(total_count_employee_safety) != 0 then sum(pending_count_employee_safety) / sum(total_count_employee_safety) else 0 end) *100,2),
#                 round((case when sum(total_count_employee_safety) != 0 then sum(pending_overdue_count_employee_safety) / sum(total_count_employee_safety) else 0 end) *100,2),
#                 sum(last_one_days_count_employee_safety)::int,sum(last_two_days_count_employee_safety)::int,sum(last_three_days_count_employee_safety)::int,
#                 sum(last_four_days_count_employee_safety)::int,sum(last_five_days_count_employee_safety)::int
#                 from inspection_analysis_table1;''')
#         firstRowAllData = cursor.fetchall()


#         cursor.execute('''select sum(total_count_night_inspection)::int,sum(pending_count_night_inspection)::int,sum(pending_overdue_count_night_inspection)::int,
#             sum(total_count_surprise_inspection)::int,sum(pending_count_surprise_inspection)::int,sum(pending_overdue_count_surprise_inspection)::int,
#             sum(total_count_drive_based_inspection)::int,sum(pending_count_drive_based_inspection)::int,sum(pending_overdue_percentage_drive_based_inspection)::int
#             from inspection_analysis_table2 where fin_year=%s;''',[prevFinYear])
#         secondPrevFinYear = cursor.fetchall()
#         count_list4 =[]
#         count_list5 =[]
#         count_list6 =[]
#         if len(secondPrevFinYear)>0:
#             count_list4.append([secondPrevFinYear[0][0],secondPrevFinYear[0][1],secondPrevFinYear[0][2]])
#             count_list5.append([secondPrevFinYear[0][3],secondPrevFinYear[0][4],secondPrevFinYear[0][5]])
#             count_list6.append([secondPrevFinYear[0][6],secondPrevFinYear[0][7],secondPrevFinYear[0][8]])
#         else:
#             count_list4.append([0,0,0])
#             count_list5.append([0,0,0])
#             count_list6.append([0,0,0])
#         cursor.execute('''select sum(total_count_night_inspection)::int,sum(pending_count_night_inspection)::int,sum(pending_overdue_count_night_inspection)::int,
#             sum(total_count_surprise_inspection)::int,sum(pending_count_surprise_inspection)::int,sum(pending_overdue_count_surprise_inspection)::int,
#             sum(total_count_drive_based_inspection)::int,sum(pending_count_drive_based_inspection)::int,sum(pending_overdue_percentage_drive_based_inspection)::int
#             from inspection_analysis_table2 where fin_year=%s;''',[curFinYear])
#         secondCurFinYear = cursor.fetchall()
        
#         if len(firstCurFinYear)>0:
#             count_list4.append([secondCurFinYear[0][0],secondCurFinYear[0][1],secondCurFinYear[0][2]])
#             count_list5.append([secondCurFinYear[0][3],secondCurFinYear[0][4],secondCurFinYear[0][5]])
#             count_list6.append([secondCurFinYear[0][6],secondCurFinYear[0][7],secondCurFinYear[0][8]])
#         else:
#             count_list4.append([0,0,0])
#             count_list5.append([0,0,0])
#             count_list6.append([0,0,0])

#         cursor.execute('''select sum(total_count_night_inspection)::int,sum(pending_count_night_inspection)::int,sum(pending_overdue_count_night_inspection)::int,
#             round((case when sum(total_count_night_inspection) != 0 then sum(pending_count_night_inspection) / sum(total_count_night_inspection) else 0 end) *100,2),
#             round((case when sum(total_count_night_inspection) != 0 then sum(pending_count_night_inspection) / sum(total_count_night_inspection) else 0 end) *100,2),
#             sum(last_one_days_count_night_inspection)::int,sum(last_two_days_count_night_inspection)::int,sum(last_three_days_count_night_inspection)::int,
#             sum(last_four_days_count_night_inspection)::int,sum(last_five_days_count_night_inspection)::int,	
#             sum(total_count_surprise_inspection)::int,sum(pending_count_surprise_inspection)::int,sum(pending_overdue_count_surprise_inspection)::int,
#             round((case when sum(total_count_surprise_inspection) != 0 then sum(pending_count_surprise_inspection) / sum(total_count_surprise_inspection) else 0 end) *100,2),
#             round((case when sum(total_count_surprise_inspection) != 0 then sum(pending_overdue_count_surprise_inspection) / sum(total_count_surprise_inspection) else 0 end) *100,2),
#             sum(last_one_days_count_surprise_inspection)::int,sum(last_two_days_count_surprise_inspection)::int,sum(last_three_days_count_surprise_inspection)::int,
#             sum(last_four_days_count_surprise_inspection)::int,sum(last_five_days_count_surprise_inspection)::int,
#             sum(total_count_drive_based_inspection)::int,sum(pending_count_drive_based_inspection)::int,sum(pending_overdue_percentage_drive_based_inspection)::int,
#             round((case when sum(total_count_drive_based_inspection) != 0 then sum(pending_overdue_percentage_drive_based_inspection) / sum(total_count_drive_based_inspection) else 0 end) *100,2),
#             round((case when sum(total_count_drive_based_inspection) != 0 then sum(pending_overdue_percentage_drive_based_inspection) / sum(total_count_drive_based_inspection) else 0 end) *100,2),
#             sum(last_one_days_count_drive_based_inspection)::int,sum(last_two_days_count_drive_based_inspection)::int,sum(last_three_days_count_drive_based_inspection)::int,
#             sum(last_four_days_count_drive_based_inspection)::int,sum(last_five_days_count_drive_based_inspection)::int
#             from inspection_analysis_table2;''')
#         secondRowAllData = cursor.fetchall()

#         #########   forth row card(pendency)

#         cursor.execute('''select sum(count_7_days_passenger_safety),sum(count_30_days_passenger_safety),sum(count_90_days_passenger_safety),
#             sum(count_180_days_passenger_safety),sum(count_365_days_passenger_safety),
#             sum(count_7_days_employee_safety),sum(count_30_days_employee_safety),sum(count_90_days_employee_safety),
#             sum(count_180_days_employee_safety),sum(count_365_days_employee_safety),
#             sum(count_7_days_others),sum(count_30_days_others),sum(count_90_days_others),
#             sum(count_180_days_others),sum(count_365_days_others)
#             from inspection_pendency_analysis_table1;''')
#         pendencyDataCard1 = cursor.fetchall()

#         cursor.execute('''select sum(count_7_days_night_inspection),sum(count_30_days_night_inspection),sum(count_90_days_night_inspection),
#             sum(count_180_days_night_inspection),sum(count_365_days_night_inspection),
#             sum(count_7_days_surprise_inspection),sum(count_30_days_surprise_inspection),sum(count_90_days_surprise_inspection),
#             sum(count_180_days_surprise_inspection),sum(count_365_days_surprise_inspection),
#             sum(count_7_days_drive_based_inspection),sum(count_30_days_drive_based_inspection),sum(count_90_days_drive_based_inspection),
#             sum(count_180_days_drive_based_inspection),sum(count_365_days_drive_based_inspection),
#             sum(count_7_days_regular_inspection),sum(count_30_days_regular_inspection),sum(count_90_days_regular_inspection),
#             sum(count_180_days_regular_inspection),sum(count_365_days_regular_inspection)
#             from inspection_pendency_analysis_table2;''')
#         pendencyDataCard2 = cursor.fetchall()


#         cursor.execute('''select  sum(total_count_station_passenger_safety),sum(total_count_station_employee_safety),sum(total_count_station_others),
#             sum(total_count_station_night_inspection),sum(total_count_station_surprise_inspection),sum(total_count_station_drive_inspection),
#             sum(total_count_section_passenger_safety),sum(total_count_section_employee_safety),sum(total_count_section_others),
#             sum(total_count_section_night_inspection),sum(total_count_section_surprise_inspection),sum(total_count_section_drive_inspection),
#             sum(total_count_train_passenger_safety),sum(total_count_train_employee_safety),sum(total_count_train_others),
#             sum(total_count_train_night_inspection),sum(total_count_train_surprise_inspection),sum(total_count_train_drive_inspection),
#             sum(total_count_others_passenger_safety),sum(total_count_others_employee_safety),sum(total_count_others_others),
#             sum(total_count_others_night_inspection),sum(total_count_others_surprise_inspection),sum(total_count_others_drive_inspection),
#             round((case when sum(total_count_station_passenger_safety) != 0 then sum(pending_count_station_passenger_safety) / sum(total_count_station_passenger_safety) else 0 end) *100,2),
#             round((case when sum(total_count_station_employee_safety) != 0 then sum(pending_count_station_employee_safety) / sum(total_count_station_employee_safety) else 0 end) *100,2),
#             round((case when sum(total_count_station_others) != 0 then sum(pending_count_station_others) / sum(total_count_station_others) else 0 end) *100,2),
#             round((case when sum(total_count_station_night_inspection) != 0 then sum(pending_count_station_night_inspection) / sum(total_count_station_night_inspection) else 0 end) *100,2),
#             round((case when sum(total_count_station_surprise_inspection) != 0 then sum(pending_count_station_surprise_inspection) / sum(total_count_station_surprise_inspection) else 0 end) *100,2),
#             round((case when sum(total_count_station_drive_inspection) != 0 then sum(pending_count_station_drive_inspection) / sum(total_count_station_drive_inspection) else 0 end) *100,2),
#             round((case when sum(total_count_section_passenger_safety) != 0 then sum(pending_count_section_passenger_safety) / sum(total_count_section_passenger_safety) else 0 end) *100,2),
#             round((case when sum(total_count_section_employee_safety) != 0 then sum(pending_count_section_employee_safety) / sum(total_count_section_employee_safety) else 0 end) *100,2),
#             round((case when sum(total_count_section_others) != 0 then sum(pending_count_section_others) / sum(total_count_section_others) else 0 end) *100,2),
#             round((case when sum(total_count_section_night_inspection) != 0 then sum(pending_count_section_night_inspection) / sum(total_count_section_night_inspection) else 0 end) *100,2),
#             round((case when sum(total_count_section_surprise_inspection) != 0 then sum(pending_count_section_surprise_inspection) / sum(total_count_section_surprise_inspection) else 0 end) *100,2),
#             round((case when sum(total_count_section_drive_inspection) != 0 then sum(pending_count_section_drive_inspection) / sum(total_count_section_drive_inspection) else 0 end) *100,2),
#             round((case when sum(total_count_train_passenger_safety) != 0 then sum(pending_count_train_passenger_safety) / sum(total_count_train_passenger_safety) else 0 end) *100,2),
#             round((case when sum(total_count_train_employee_safety) != 0 then sum(pending_count_train_employee_safety) / sum(total_count_train_employee_safety) else 0 end) *100,2),
#             round((case when sum(total_count_train_others) != 0 then sum(pending_count_train_others) / sum(total_count_train_others) else 0 end) *100,2),
#             round((case when sum(total_count_train_night_inspection) != 0 then sum(pending_count_train_night_inspection) / sum(total_count_train_night_inspection) else 0 end) *100,2),
#             round((case when sum(total_count_train_surprise_inspection) != 0 then sum(pending_count_train_surprise_inspection) / sum(total_count_train_surprise_inspection) else 0 end) *100,2),
#             round((case when sum(total_count_train_drive_inspection) != 0 then sum(pending_count_train_drive_inspection) / sum(total_count_train_drive_inspection) else 0 end) *100,2),
#             round((case when sum(total_count_others_passenger_safety) != 0 then sum(pending_count_others_passenger_safety) / sum(total_count_others_passenger_safety) else 0 end) *100,2),
#             round((case when sum(total_count_others_employee_safety) != 0 then sum(pending_count_others_employee_safety) / sum(total_count_others_employee_safety) else 0 end) *100,2),
#             round((case when sum(total_count_others_others) != 0 then sum(pending_count_others_others) / sum(total_count_others_others) else 0 end) *100,2),
#             round((case when sum(total_count_others_night_inspection) != 0 then sum(total_count_others_night_inspection) / sum(total_count_others_night_inspection) else 0 end) *100,2),
#             round((case when sum(total_count_others_surprise_inspection) != 0 then sum(total_count_others_surprise_inspection) / sum(total_count_others_surprise_inspection) else 0 end) *100,2),
#             round((case when sum(total_count_others_drive_inspection) != 0 then sum(total_count_others_drive_inspection) / sum(total_count_others_drive_inspection) else 0 end) *100,2)
#             from inspection_analysis_table3;''')
#         thirdRowData = cursor.fetchall()


#         cursor.close()
#         irTypeVal = 'ZR'
#         irDetailsVal = 'All'
#         irMapVal = '1'
#         irPathVal1 = None
#         irPathVal2 = ''
#         dataZoneWs = []
#         irPath2 = None
#         irSearchDept = ""
#         irSearchDate = ""
#         irSearchDesig = ""

    
#     if request.method == "POST":
#         submitvalue = request.POST.get('submit')
#         irPathVal1 = None
#         irPathVal2 = ''
#         dataZoneWs = []
#         irSearchDept = ""
#         irSearchDate = ""
#         irSearchDesig = ""
#         if submitvalue == 'irSubmitButton':
#             cursor = connection.cursor()
#             irTypeVal = request.POST.get('irType')  
#             irPath2 = request.POST.get('irPath2')
#             if irTypeVal == 'PU':
#                 irMapVal = '2'
#             else:
#                 irMapVal = '1'
#             irDetailsVal = request.POST.get('irDetails')
#             if irTypeVal == 'DIV':
#                 zone = irDetailsVal
#                 dataZoneWs = list(models.railwayLocationMaster.objects.filter(parent_location_code=zone,location_type = 'DIV').values('location_code','location_description').order_by('location_code'))
                
#             elif irTypeVal == 'WS':
#                 zone = irDetailsVal
#                 dataZoneWs = list(models.railwayLocationMaster.objects.filter(parent_location_code=zone,location_type = 'WS').values('location_code','location_description').order_by('location_code'))
            
#             if irTypeVal == 'ZR':   
#                 irTypeValData = ['ZR','DIV','WS']
            
#             elif irTypeVal == 'HQ':
#                 irTypeValData = ['ZR']
#             else:
#                 irTypeValData = [irTypeVal]
            

#             if irDetailsVal == 'All':
#                 allLocationCodeData = tuple(models.railwayLocationMaster.objects.filter(location_type__in = irTypeValData).values_list('location_code',flat=True).distinct())
#                 allDesignation = list(models.Level_Desig.objects.filter(rly_unit__in = models.railwayLocationMaster.objects.filter(location_type__in = irTypeValData).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('designation'))

#             else:
#                 irPathVal1 = irDetailsVal
#                 allLocationCodeData = list(models.railwayLocationMaster.objects.filter(Q(parent_location_code=irDetailsVal)).values_list('location_code',flat=True).distinct())
#                 allDesignation = list(models.Level_Desig.objects.filter(rly_unit__in = models.railwayLocationMaster.objects.filter(Q(location_code=irDetailsVal) | Q(parent_location_code=irDetailsVal),location_type__in = irTypeValData).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('designation'))

#                 allLocationCodeData.append(irDetailsVal)
#                 allLocationCodeData = tuple(allLocationCodeData)
            
#             if irPath2 != '':
#                 irPathVal2 = irPath2
#                 allDesignation = list(models.Level_Desig.objects.filter(rly_unit__in = models.railwayLocationMaster.objects.filter(Q(location_code=irPath2),location_type__in = irTypeValData).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('designation'))

#                 allLocationCodeData = tuple([irPath2])
#                 irTypeValData = [irTypeVal]




#             irSearchType = request.POST.get('irSearchType')
#             if irSearchType == 'Yes':
#                 irSearchDept = request.POST.get('irSearchDept')
#                 if irSearchDept == 'All':
#                     irSearchDept = ""
#                     allDepartmentData = tuple(models.departMast.objects.values_list('department_name',flat=True).distinct())
#                 else:
#                     allDepartmentData = tuple(models.departMast.objects.filter(department_code=irSearchDept).values_list('department_name',flat=True).distinct())
                
#                 irSearchDesig = request.POST.get('irSearchDesig')
#                 if  irSearchDesig == 'All':
#                     irSearchDesig = ""
#                     allDesignationData = tuple(models.Level_Desig.objects.filter(rly_unit__in = models.railwayLocationMaster.objects.filter(location_type__in=['DIV','RB','ZR','WS','PU']).values('rly_unit_code')).values_list('designation_code',flat=True).distinct())
#                 else:
#                     irSearchDesig = int(irSearchDesig)
#                     allDesignationData = tuple([irSearchDesig])
                    

                
#                 irSearchDate = request.POST.get('irSearchDate')
#                 if irSearchDate == "":
#                     startDate = '2020-04-01'
#                     endDate = datetime.now().strftime('%Y-%m-%d')
#                 else:
#                     irSearchDate11 = irSearchDate.split('-')
#                     start1 = irSearchDate11[0].split('/')
#                     end1 = irSearchDate11[1].split('/')
#                     startDate = '20'+start1[2]+'-'+start1[1]+'-'+start1[0]
#                     endDate = '20'+end1[2]+'-'+end1[1]+'-'+end1[0]
#                 cursor.execute('''select sum(total_count_others)::int,sum(pending_count_others)::int,sum(pending_overdue_count_others)::int,
#                     sum(total_count_passenger_safety)::int,sum(pending_count_passenger_safety)::int,sum(pending_overdue_count_passenger_safety)::int,
#                     sum(total_count_employee_safety)::int,sum(pending_count_employee_safety)::int,sum(pending_overdue_count_employee_safety)::int
#                     from view_inspection_analysis_table1 where fin_year=%s and location_type in %s  and location_code in %s and inspected_on between %s and %s
#                     and designation_code in %s and department in %s;''',[prevFinYear,tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData])
#                 firstPrevFinYear = cursor.fetchall()
                
#                 count_list1 =[]
#                 count_list2 =[]
#                 count_list3 =[]
#                 if len(firstPrevFinYear)>0:
#                     firstPrevFinYear = [list([x if x != None else 0 for x in firstPrevFinYear[0] ])]
#                     count_list3.append([firstPrevFinYear[0][0],firstPrevFinYear[0][1],firstPrevFinYear[0][2]])
#                     count_list1.append([firstPrevFinYear[0][3],firstPrevFinYear[0][4],firstPrevFinYear[0][5]])
#                     count_list2.append([firstPrevFinYear[0][6],firstPrevFinYear[0][7],firstPrevFinYear[0][8]])
#                 else:
#                     count_list1.append([0,0,0])
#                     count_list2.append([0,0,0])
#                     count_list3.append([0,0,0])
#                 cursor.execute('''select sum(total_count_others)::int,sum(pending_count_others)::int,sum(pending_overdue_count_others)::int,
#                     sum(total_count_passenger_safety)::int,sum(pending_count_passenger_safety)::int,sum(pending_overdue_count_passenger_safety)::int,
#                     sum(total_count_employee_safety)::int,sum(pending_count_employee_safety)::int,sum(pending_overdue_count_employee_safety)::int
#                     from view_inspection_analysis_table1 where fin_year=%s and location_type in %s  and location_code in %s and inspected_on between %s and %s
#                     and designation_code in %s and department in %s;''',[curFinYear,tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData])
#                 firstCurFinYear = cursor.fetchall()
                
#                 if len(firstCurFinYear)>0:
#                     firstCurFinYear = [list([x if x != None else 0 for x in firstCurFinYear[0] ])]
#                     count_list3.append([firstCurFinYear[0][0],firstCurFinYear[0][1],firstCurFinYear[0][2]])
#                     count_list1.append([firstCurFinYear[0][3],firstCurFinYear[0][4],firstCurFinYear[0][5]])
#                     count_list2.append([firstCurFinYear[0][6],firstCurFinYear[0][7],firstCurFinYear[0][8]])
#                 else:
#                     count_list1.append([0,0,0])
#                     count_list2.append([0,0,0])
#                     count_list3.append([0,0,0])

#                 cursor.execute('''select sum(total_count_others)::int,sum(pending_count_others)::int,sum(pending_overdue_count_others)::int,
#                         round((case when sum(total_count_others) != 0 then sum(pending_count_others) / sum(total_count_others) else 0 end) *100,2),
#                         round((case when sum(total_count_others) != 0 then sum(pending_overdue_count_others) / sum(total_count_others) else 0 end) *100,2),
#                         sum(last_one_days_count_others)::int,sum(last_two_days_count_others)::int,sum(last_three_days_count_others)::int,
#                         sum(last_four_days_count_others)::int,sum(last_five_days_count_others)::int,			
#                         sum(total_count_passenger_safety)::int,sum(pending_count_passenger_safety)::int,sum(pending_overdue_count_passenger_safety)::int,
#                         round((case when sum(total_count_passenger_safety) != 0 then sum(pending_count_passenger_safety) / sum(total_count_passenger_safety) else 0 end) *100,2),
#                         round((case when sum(total_count_passenger_safety) != 0 then sum(pending_overdue_count_passenger_safety) / sum(total_count_passenger_safety) else 0 end) *100,2),
#                         sum(last_one_days_count_passenger_safety)::int,sum(last_two_days_count_passenger_safety)::int,sum(last_three_days_count_passenger_safety)::int,
#                         sum(last_four_days_count_passenger_safety)::int,sum(last_five_days_count_passenger_safety)::int,
#                         sum(total_count_employee_safety)::int,sum(pending_count_employee_safety)::int,sum(pending_overdue_count_employee_safety)::int,
#                         round((case when sum(total_count_employee_safety) != 0 then sum(pending_count_employee_safety) / sum(total_count_employee_safety) else 0 end) *100,2),
#                         round((case when sum(total_count_employee_safety) != 0 then sum(pending_overdue_count_employee_safety) / sum(total_count_employee_safety) else 0 end) *100,2),
#                         sum(last_one_days_count_employee_safety)::int,sum(last_two_days_count_employee_safety)::int,sum(last_three_days_count_employee_safety)::int,
#                         sum(last_four_days_count_employee_safety)::int,sum(last_five_days_count_employee_safety)::int
#                         from view_inspection_analysis_table1 where location_type in %s  and location_code in %s and inspected_on between %s and %s
#                         and designation_code in %s and department in %s;''',[tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData])
#                 firstRowAllData = cursor.fetchall()
                
#                 firstRowAllData = [list([x if x != None else 0 for x in firstRowAllData[0] ])]
                



#                 cursor.execute('''select sum(total_count_night_inspection)::int,sum(pending_count_night_inspection)::int,sum(pending_overdue_count_night_inspection)::int,
#                     sum(total_count_surprise_inspection)::int,sum(pending_count_surprise_inspection)::int,sum(pending_overdue_count_surprise_inspection)::int,
#                     sum(total_count_drive_based_inspection)::int,sum(pending_count_drive_based_inspection)::int,sum(pending_overdue_percentage_drive_based_inspection)::int
#                     from view_inspection_analysis_table2 where fin_year=%s and location_type in %s  and location_code in %s and inspected_on between %s and %s
#                     and designation_code in %s and department in %s;''',[prevFinYear,tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData])
#                 secondPrevFinYear = cursor.fetchall()
                
#                 count_list4 =[]
#                 count_list5 =[]
#                 count_list6 =[]
#                 if len(secondPrevFinYear)>0:
#                     secondPrevFinYear = [list([x if x != None else 0 for x in secondPrevFinYear[0] ])]
#                     count_list4.append([secondPrevFinYear[0][0],secondPrevFinYear[0][1],secondPrevFinYear[0][2]])
#                     count_list5.append([secondPrevFinYear[0][3],secondPrevFinYear[0][4],secondPrevFinYear[0][5]])
#                     count_list6.append([secondPrevFinYear[0][6],secondPrevFinYear[0][7],secondPrevFinYear[0][8]])
#                 else:
#                     count_list4.append([0,0,0])
#                     count_list5.append([0,0,0])
#                     count_list6.append([0,0,0])
#                 cursor.execute('''select sum(total_count_night_inspection)::int,sum(pending_count_night_inspection)::int,sum(pending_overdue_count_night_inspection)::int,
#                     sum(total_count_surprise_inspection)::int,sum(pending_count_surprise_inspection)::int,sum(pending_overdue_count_surprise_inspection)::int,
#                     sum(total_count_drive_based_inspection)::int,sum(pending_count_drive_based_inspection)::int,sum(pending_overdue_percentage_drive_based_inspection)::int
#                     from view_inspection_analysis_table2 where fin_year=%s and location_type in %s  and location_code in %s  and inspected_on between %s and %s
#                     and designation_code in %s and department in %s;''',[curFinYear,tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData])
#                 secondCurFinYear = cursor.fetchall()
                
#                 if len(secondCurFinYear)>0:
#                     secondCurFinYear = [list([x if x != None else 0 for x in secondCurFinYear[0] ])]
#                     count_list4.append([secondCurFinYear[0][0],secondCurFinYear[0][1],secondCurFinYear[0][2]])
#                     count_list5.append([secondCurFinYear[0][3],secondCurFinYear[0][4],secondCurFinYear[0][5]])
#                     count_list6.append([secondCurFinYear[0][6],secondCurFinYear[0][7],secondCurFinYear[0][8]])
#                 else:
#                     count_list4.append([0,0,0])
#                     count_list5.append([0,0,0])
#                     count_list6.append([0,0,0])

#                 cursor.execute('''select sum(total_count_night_inspection)::int,sum(pending_count_night_inspection)::int,sum(pending_overdue_count_night_inspection)::int,
#                     round((case when sum(total_count_night_inspection) != 0 then sum(pending_count_night_inspection) / sum(total_count_night_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_night_inspection) != 0 then sum(pending_count_night_inspection) / sum(total_count_night_inspection) else 0 end) *100,2),
#                     sum(last_one_days_count_night_inspection)::int,sum(last_two_days_count_night_inspection)::int,sum(last_three_days_count_night_inspection)::int,
#                     sum(last_four_days_count_night_inspection)::int,sum(last_five_days_count_night_inspection)::int,	
#                     sum(total_count_surprise_inspection)::int,sum(pending_count_surprise_inspection)::int,sum(pending_overdue_count_surprise_inspection)::int,
#                     round((case when sum(total_count_surprise_inspection) != 0 then sum(pending_count_surprise_inspection) / sum(total_count_surprise_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_surprise_inspection) != 0 then sum(pending_overdue_count_surprise_inspection) / sum(total_count_surprise_inspection) else 0 end) *100,2),
#                     sum(last_one_days_count_surprise_inspection)::int,sum(last_two_days_count_surprise_inspection)::int,sum(last_three_days_count_surprise_inspection)::int,
#                     sum(last_four_days_count_surprise_inspection)::int,sum(last_five_days_count_surprise_inspection)::int,
#                     sum(total_count_drive_based_inspection)::int,sum(pending_count_drive_based_inspection)::int,sum(pending_overdue_percentage_drive_based_inspection)::int,
#                     round((case when sum(total_count_drive_based_inspection) != 0 then sum(pending_overdue_percentage_drive_based_inspection) / sum(total_count_drive_based_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_drive_based_inspection) != 0 then sum(pending_overdue_percentage_drive_based_inspection) / sum(total_count_drive_based_inspection) else 0 end) *100,2),
#                     sum(last_one_days_count_drive_based_inspection)::int,sum(last_two_days_count_drive_based_inspection)::int,sum(last_three_days_count_drive_based_inspection)::int,
#                     sum(last_four_days_count_drive_based_inspection)::int,sum(last_five_days_count_drive_based_inspection)::int
#                     from view_inspection_analysis_table2 where location_type in %s  and location_code in %s and inspected_on between %s and %s
#                     and designation_code in %s and department in %s;''',[tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData])
#                 secondRowAllData = cursor.fetchall()
#                 secondRowAllData = [list([x if x != None else 0 for x in secondRowAllData[0] ])]

#                 #########   forth row card(pendency)

#                 cursor.execute('''select sum(count_7_days_passenger_safety),sum(count_30_days_passenger_safety),sum(count_90_days_passenger_safety),
#                     sum(count_180_days_passenger_safety),sum(count_365_days_passenger_safety),
#                     sum(count_7_days_employee_safety),sum(count_30_days_employee_safety),sum(count_90_days_employee_safety),
#                     sum(count_180_days_employee_safety),sum(count_365_days_employee_safety),
#                     sum(count_7_days_others),sum(count_30_days_others),sum(count_90_days_others),
#                     sum(count_180_days_others),sum(count_365_days_others)
#                     from view_inspection_pendency_analysis_table1 where location_type in %s  and location_code in %s and inspected_on between %s and %s
#                     and designation_code in %s and department in %s;''',[tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData])
#                 pendencyDataCard1 = cursor.fetchall()
#                 pendencyDataCard1 = [list([x if x != None else 0 for x in pendencyDataCard1[0] ])]

#                 cursor.execute('''select sum(count_7_days_night_inspection),sum(count_30_days_night_inspection),sum(count_90_days_night_inspection),
#                     sum(count_180_days_night_inspection),sum(count_365_days_night_inspection),
#                     sum(count_7_days_surprise_inspection),sum(count_30_days_surprise_inspection),sum(count_90_days_surprise_inspection),
#                     sum(count_180_days_surprise_inspection),sum(count_365_days_surprise_inspection),
#                     sum(count_7_days_drive_based_inspection),sum(count_30_days_drive_based_inspection),sum(count_90_days_drive_based_inspection),
#                     sum(count_180_days_drive_based_inspection),sum(count_365_days_drive_based_inspection),
#                     sum(count_7_days_regular_inspection),sum(count_30_days_regular_inspection),sum(count_90_days_regular_inspection),
#                     sum(count_180_days_regular_inspection),sum(count_365_days_regular_inspection)
#                     from view_inspection_pendency_analysis_table2 where location_type in %s  and location_code in %s and inspected_on between %s and %s
#                     and designation_code in %s and department in %s;''',[tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData])
#                 pendencyDataCard2 = cursor.fetchall()
#                 pendencyDataCard2 = [list([x if x != None else 0 for x in pendencyDataCard2[0] ])]


#                 cursor.execute('''select  sum(total_count_station_passenger_safety),sum(total_count_station_employee_safety),sum(total_count_station_others),
#                     sum(total_count_station_night_inspection),sum(total_count_station_surprise_inspection),sum(total_count_station_drive_inspection),
#                     sum(total_count_section_passenger_safety),sum(total_count_section_employee_safety),sum(total_count_section_others),
#                     sum(total_count_section_night_inspection),sum(total_count_section_surprise_inspection),sum(total_count_section_drive_inspection),
#                     sum(total_count_train_passenger_safety),sum(total_count_train_employee_safety),sum(total_count_train_others),
#                     sum(total_count_train_night_inspection),sum(total_count_train_surprise_inspection),sum(total_count_train_drive_inspection),
#                     sum(total_count_others_passenger_safety),sum(total_count_others_employee_safety),sum(total_count_others_others),
#                     sum(total_count_others_night_inspection),sum(total_count_others_surprise_inspection),sum(total_count_others_drive_inspection),
#                     round((case when sum(total_count_station_passenger_safety) != 0 then sum(pending_count_station_passenger_safety) / sum(total_count_station_passenger_safety) else 0 end) *100,2),
#                     round((case when sum(total_count_station_employee_safety) != 0 then sum(pending_count_station_employee_safety) / sum(total_count_station_employee_safety) else 0 end) *100,2),
#                     round((case when sum(total_count_station_others) != 0 then sum(pending_count_station_others) / sum(total_count_station_others) else 0 end) *100,2),
#                     round((case when sum(total_count_station_night_inspection) != 0 then sum(pending_count_station_night_inspection) / sum(total_count_station_night_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_station_surprise_inspection) != 0 then sum(pending_count_station_surprise_inspection) / sum(total_count_station_surprise_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_station_drive_inspection) != 0 then sum(pending_count_station_drive_inspection) / sum(total_count_station_drive_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_section_passenger_safety) != 0 then sum(pending_count_section_passenger_safety) / sum(total_count_section_passenger_safety) else 0 end) *100,2),
#                     round((case when sum(total_count_section_employee_safety) != 0 then sum(pending_count_section_employee_safety) / sum(total_count_section_employee_safety) else 0 end) *100,2),
#                     round((case when sum(total_count_section_others) != 0 then sum(pending_count_section_others) / sum(total_count_section_others) else 0 end) *100,2),
#                     round((case when sum(total_count_section_night_inspection) != 0 then sum(pending_count_section_night_inspection) / sum(total_count_section_night_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_section_surprise_inspection) != 0 then sum(pending_count_section_surprise_inspection) / sum(total_count_section_surprise_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_section_drive_inspection) != 0 then sum(pending_count_section_drive_inspection) / sum(total_count_section_drive_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_train_passenger_safety) != 0 then sum(pending_count_train_passenger_safety) / sum(total_count_train_passenger_safety) else 0 end) *100,2),
#                     round((case when sum(total_count_train_employee_safety) != 0 then sum(pending_count_train_employee_safety) / sum(total_count_train_employee_safety) else 0 end) *100,2),
#                     round((case when sum(total_count_train_others) != 0 then sum(pending_count_train_others) / sum(total_count_train_others) else 0 end) *100,2),
#                     round((case when sum(total_count_train_night_inspection) != 0 then sum(pending_count_train_night_inspection) / sum(total_count_train_night_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_train_surprise_inspection) != 0 then sum(pending_count_train_surprise_inspection) / sum(total_count_train_surprise_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_train_drive_inspection) != 0 then sum(pending_count_train_drive_inspection) / sum(total_count_train_drive_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_others_passenger_safety) != 0 then sum(pending_count_others_passenger_safety) / sum(total_count_others_passenger_safety) else 0 end) *100,2),
#                     round((case when sum(total_count_others_employee_safety) != 0 then sum(pending_count_others_employee_safety) / sum(total_count_others_employee_safety) else 0 end) *100,2),
#                     round((case when sum(total_count_others_others) != 0 then sum(pending_count_others_others) / sum(total_count_others_others) else 0 end) *100,2),
#                     round((case when sum(total_count_others_night_inspection) != 0 then sum(total_count_others_night_inspection) / sum(total_count_others_night_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_others_surprise_inspection) != 0 then sum(total_count_others_surprise_inspection) / sum(total_count_others_surprise_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_others_drive_inspection) != 0 then sum(total_count_others_drive_inspection) / sum(total_count_others_drive_inspection) else 0 end) *100,2)
#                     from view_inspection_analysis_table3 where location_type in %s  and location_code in %s and inspected_on between %s and %s
#                     and designation_code in %s and department in %s;''',[tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData])
#                 thirdRowData = cursor.fetchall()
#                 thirdRowData = [list([x if x != None else 0 for x in thirdRowData[0] ])]


#             else:
#                 cursor.execute('''select sum(total_count_others)::int,sum(pending_count_others)::int,sum(pending_overdue_count_others)::int,
#                     sum(total_count_passenger_safety)::int,sum(pending_count_passenger_safety)::int,sum(pending_overdue_count_passenger_safety)::int,
#                     sum(total_count_employee_safety)::int,sum(pending_count_employee_safety)::int,sum(pending_overdue_count_employee_safety)::int
#                     from inspection_analysis_table1 where fin_year=%s and location_type in %s  and location_code in %s;''',[prevFinYear,tuple(irTypeValData),allLocationCodeData])
#                 firstPrevFinYear = cursor.fetchall()
#                 count_list1 =[]
#                 count_list2 =[]
#                 count_list3 =[]
#                 if len(firstPrevFinYear)>0:
#                     firstPrevFinYear = [list([x if x != None else 0 for x in firstPrevFinYear[0] ])]
#                     count_list3.append([firstPrevFinYear[0][0],firstPrevFinYear[0][1],firstPrevFinYear[0][2]])
#                     count_list1.append([firstPrevFinYear[0][3],firstPrevFinYear[0][4],firstPrevFinYear[0][5]])
#                     count_list2.append([firstPrevFinYear[0][6],firstPrevFinYear[0][7],firstPrevFinYear[0][8]])
#                 else:
#                     count_list1.append([0,0,0])
#                     count_list2.append([0,0,0])
#                     count_list3.append([0,0,0])
#                 cursor.execute('''select sum(total_count_others)::int,sum(pending_count_others)::int,sum(pending_overdue_count_others)::int,
#                     sum(total_count_passenger_safety)::int,sum(pending_count_passenger_safety)::int,sum(pending_overdue_count_passenger_safety)::int,
#                     sum(total_count_employee_safety)::int,sum(pending_count_employee_safety)::int,sum(pending_overdue_count_employee_safety)::int
#                     from inspection_analysis_table1 where fin_year=%s and location_type in %s  and location_code in %s;''',[curFinYear,tuple(irTypeValData),allLocationCodeData])
#                 firstCurFinYear = cursor.fetchall()
                
#                 if len(firstCurFinYear)>0:
#                     firstCurFinYear = [list([x if x != None else 0 for x in firstCurFinYear[0] ])]
#                     count_list3.append([firstCurFinYear[0][0],firstCurFinYear[0][1],firstCurFinYear[0][2]])
#                     count_list1.append([firstCurFinYear[0][3],firstCurFinYear[0][4],firstCurFinYear[0][5]])
#                     count_list2.append([firstCurFinYear[0][6],firstCurFinYear[0][7],firstCurFinYear[0][8]])
#                 else:
#                     count_list1.append([0,0,0])
#                     count_list2.append([0,0,0])
#                     count_list3.append([0,0,0])

#                 cursor.execute('''select sum(total_count_others)::int,sum(pending_count_others)::int,sum(pending_overdue_count_others)::int,
#                         round((case when sum(total_count_others) != 0 then sum(pending_count_others) / sum(total_count_others) else 0 end) *100,2),
#                         round((case when sum(total_count_others) != 0 then sum(pending_overdue_count_others) / sum(total_count_others) else 0 end) *100,2),
#                         sum(last_one_days_count_others)::int,sum(last_two_days_count_others)::int,sum(last_three_days_count_others)::int,
#                         sum(last_four_days_count_others)::int,sum(last_five_days_count_others)::int,			
#                         sum(total_count_passenger_safety)::int,sum(pending_count_passenger_safety)::int,sum(pending_overdue_count_passenger_safety)::int,
#                         round((case when sum(total_count_passenger_safety) != 0 then sum(pending_count_passenger_safety) / sum(total_count_passenger_safety) else 0 end) *100,2),
#                         round((case when sum(total_count_passenger_safety) != 0 then sum(pending_overdue_count_passenger_safety) / sum(total_count_passenger_safety) else 0 end) *100,2),
#                         sum(last_one_days_count_passenger_safety)::int,sum(last_two_days_count_passenger_safety)::int,sum(last_three_days_count_passenger_safety)::int,
#                         sum(last_four_days_count_passenger_safety)::int,sum(last_five_days_count_passenger_safety)::int,
#                         sum(total_count_employee_safety)::int,sum(pending_count_employee_safety)::int,sum(pending_overdue_count_employee_safety)::int,
#                         round((case when sum(total_count_employee_safety) != 0 then sum(pending_count_employee_safety) / sum(total_count_employee_safety) else 0 end) *100,2),
#                         round((case when sum(total_count_employee_safety) != 0 then sum(pending_overdue_count_employee_safety) / sum(total_count_employee_safety) else 0 end) *100,2),
#                         sum(last_one_days_count_employee_safety)::int,sum(last_two_days_count_employee_safety)::int,sum(last_three_days_count_employee_safety)::int,
#                         sum(last_four_days_count_employee_safety)::int,sum(last_five_days_count_employee_safety)::int
#                         from inspection_analysis_table1 where location_type in %s  and location_code in %s;''',[tuple(irTypeValData),allLocationCodeData])
#                 firstRowAllData = cursor.fetchall()
                
#                 firstRowAllData = [list([x if x != None else 0 for x in firstRowAllData[0] ])]
                



#                 cursor.execute('''select sum(total_count_night_inspection)::int,sum(pending_count_night_inspection)::int,sum(pending_overdue_count_night_inspection)::int,
#                     sum(total_count_surprise_inspection)::int,sum(pending_count_surprise_inspection)::int,sum(pending_overdue_count_surprise_inspection)::int,
#                     sum(total_count_drive_based_inspection)::int,sum(pending_count_drive_based_inspection)::int,sum(pending_overdue_percentage_drive_based_inspection)::int
#                     from inspection_analysis_table2 where fin_year=%s and location_type in %s  and location_code in %s;''',[prevFinYear,tuple(irTypeValData),allLocationCodeData])
#                 secondPrevFinYear = cursor.fetchall()
#                 count_list4 =[]
#                 count_list5 =[]
#                 count_list6 =[]
#                 if len(secondPrevFinYear)>0:
#                     secondPrevFinYear = [list([x if x != None else 0 for x in secondPrevFinYear[0] ])]
#                     count_list4.append([secondPrevFinYear[0][0],secondPrevFinYear[0][1],secondPrevFinYear[0][2]])
#                     count_list5.append([secondPrevFinYear[0][3],secondPrevFinYear[0][4],secondPrevFinYear[0][5]])
#                     count_list6.append([secondPrevFinYear[0][6],secondPrevFinYear[0][7],secondPrevFinYear[0][8]])
#                 else:
#                     count_list4.append([0,0,0])
#                     count_list5.append([0,0,0])
#                     count_list6.append([0,0,0])
#                 cursor.execute('''select sum(total_count_night_inspection)::int,sum(pending_count_night_inspection)::int,sum(pending_overdue_count_night_inspection)::int,
#                     sum(total_count_surprise_inspection)::int,sum(pending_count_surprise_inspection)::int,sum(pending_overdue_count_surprise_inspection)::int,
#                     sum(total_count_drive_based_inspection)::int,sum(pending_count_drive_based_inspection)::int,sum(pending_overdue_percentage_drive_based_inspection)::int
#                     from inspection_analysis_table2 where fin_year=%s and location_type in %s  and location_code in %s;''',[curFinYear,tuple(irTypeValData),allLocationCodeData])
#                 secondCurFinYear = cursor.fetchall()
                
#                 if len(secondCurFinYear)>0:
#                     secondCurFinYear = [list([x if x != None else 0 for x in secondCurFinYear[0] ])]
#                     count_list4.append([secondCurFinYear[0][0],secondCurFinYear[0][1],secondCurFinYear[0][2]])
#                     count_list5.append([secondCurFinYear[0][3],secondCurFinYear[0][4],secondCurFinYear[0][5]])
#                     count_list6.append([secondCurFinYear[0][6],secondCurFinYear[0][7],secondCurFinYear[0][8]])
#                 else:
#                     count_list4.append([0,0,0])
#                     count_list5.append([0,0,0])
#                     count_list6.append([0,0,0])

#                 cursor.execute('''select sum(total_count_night_inspection)::int,sum(pending_count_night_inspection)::int,sum(pending_overdue_count_night_inspection)::int,
#                     round((case when sum(total_count_night_inspection) != 0 then sum(pending_count_night_inspection) / sum(total_count_night_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_night_inspection) != 0 then sum(pending_count_night_inspection) / sum(total_count_night_inspection) else 0 end) *100,2),
#                     sum(last_one_days_count_night_inspection)::int,sum(last_two_days_count_night_inspection)::int,sum(last_three_days_count_night_inspection)::int,
#                     sum(last_four_days_count_night_inspection)::int,sum(last_five_days_count_night_inspection)::int,	
#                     sum(total_count_surprise_inspection)::int,sum(pending_count_surprise_inspection)::int,sum(pending_overdue_count_surprise_inspection)::int,
#                     round((case when sum(total_count_surprise_inspection) != 0 then sum(pending_count_surprise_inspection) / sum(total_count_surprise_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_surprise_inspection) != 0 then sum(pending_overdue_count_surprise_inspection) / sum(total_count_surprise_inspection) else 0 end) *100,2),
#                     sum(last_one_days_count_surprise_inspection)::int,sum(last_two_days_count_surprise_inspection)::int,sum(last_three_days_count_surprise_inspection)::int,
#                     sum(last_four_days_count_surprise_inspection)::int,sum(last_five_days_count_surprise_inspection)::int,
#                     sum(total_count_drive_based_inspection)::int,sum(pending_count_drive_based_inspection)::int,sum(pending_overdue_percentage_drive_based_inspection)::int,
#                     round((case when sum(total_count_drive_based_inspection) != 0 then sum(pending_overdue_percentage_drive_based_inspection) / sum(total_count_drive_based_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_drive_based_inspection) != 0 then sum(pending_overdue_percentage_drive_based_inspection) / sum(total_count_drive_based_inspection) else 0 end) *100,2),
#                     sum(last_one_days_count_drive_based_inspection)::int,sum(last_two_days_count_drive_based_inspection)::int,sum(last_three_days_count_drive_based_inspection)::int,
#                     sum(last_four_days_count_drive_based_inspection)::int,sum(last_five_days_count_drive_based_inspection)::int
#                     from inspection_analysis_table2 where location_type in %s  and location_code in %s;''',[tuple(irTypeValData),allLocationCodeData])
#                 secondRowAllData = cursor.fetchall()
#                 secondRowAllData = [list([x if x != None else 0 for x in secondRowAllData[0] ])]
#                 #########   forth row card(pendency)

#                 cursor.execute('''select sum(count_7_days_passenger_safety),sum(count_30_days_passenger_safety),sum(count_90_days_passenger_safety),
#                     sum(count_180_days_passenger_safety),sum(count_365_days_passenger_safety),
#                     sum(count_7_days_employee_safety),sum(count_30_days_employee_safety),sum(count_90_days_employee_safety),
#                     sum(count_180_days_employee_safety),sum(count_365_days_employee_safety),
#                     sum(count_7_days_others),sum(count_30_days_others),sum(count_90_days_others),
#                     sum(count_180_days_others),sum(count_365_days_others)
#                     from inspection_pendency_analysis_table1 where location_type in %s  and location_code in %s;''',[tuple(irTypeValData),allLocationCodeData])
#                 pendencyDataCard1 = cursor.fetchall()
#                 pendencyDataCard1 = [list([x if x != None else 0 for x in pendencyDataCard1[0] ])]

#                 cursor.execute('''select sum(count_7_days_night_inspection),sum(count_30_days_night_inspection),sum(count_90_days_night_inspection),
#                     sum(count_180_days_night_inspection),sum(count_365_days_night_inspection),
#                     sum(count_7_days_surprise_inspection),sum(count_30_days_surprise_inspection),sum(count_90_days_surprise_inspection),
#                     sum(count_180_days_surprise_inspection),sum(count_365_days_surprise_inspection),
#                     sum(count_7_days_drive_based_inspection),sum(count_30_days_drive_based_inspection),sum(count_90_days_drive_based_inspection),
#                     sum(count_180_days_drive_based_inspection),sum(count_365_days_drive_based_inspection),
#                     sum(count_7_days_regular_inspection),sum(count_30_days_regular_inspection),sum(count_90_days_regular_inspection),
#                     sum(count_180_days_regular_inspection),sum(count_365_days_regular_inspection)
#                     from inspection_pendency_analysis_table2 where location_type in %s  and location_code in %s;''',[tuple(irTypeValData),allLocationCodeData])
#                 pendencyDataCard2 = cursor.fetchall()
#                 pendencyDataCard2 = [list([x if x != None else 0 for x in pendencyDataCard2[0] ])]


#                 cursor.execute('''select  sum(total_count_station_passenger_safety),sum(total_count_station_employee_safety),sum(total_count_station_others),
#                     sum(total_count_station_night_inspection),sum(total_count_station_surprise_inspection),sum(total_count_station_drive_inspection),
#                     sum(total_count_section_passenger_safety),sum(total_count_section_employee_safety),sum(total_count_section_others),
#                     sum(total_count_section_night_inspection),sum(total_count_section_surprise_inspection),sum(total_count_section_drive_inspection),
#                     sum(total_count_train_passenger_safety),sum(total_count_train_employee_safety),sum(total_count_train_others),
#                     sum(total_count_train_night_inspection),sum(total_count_train_surprise_inspection),sum(total_count_train_drive_inspection),
#                     sum(total_count_others_passenger_safety),sum(total_count_others_employee_safety),sum(total_count_others_others),
#                     sum(total_count_others_night_inspection),sum(total_count_others_surprise_inspection),sum(total_count_others_drive_inspection),
#                     round((case when sum(total_count_station_passenger_safety) != 0 then sum(pending_count_station_passenger_safety) / sum(total_count_station_passenger_safety) else 0 end) *100,2),
#                     round((case when sum(total_count_station_employee_safety) != 0 then sum(pending_count_station_employee_safety) / sum(total_count_station_employee_safety) else 0 end) *100,2),
#                     round((case when sum(total_count_station_others) != 0 then sum(pending_count_station_others) / sum(total_count_station_others) else 0 end) *100,2),
#                     round((case when sum(total_count_station_night_inspection) != 0 then sum(pending_count_station_night_inspection) / sum(total_count_station_night_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_station_surprise_inspection) != 0 then sum(pending_count_station_surprise_inspection) / sum(total_count_station_surprise_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_station_drive_inspection) != 0 then sum(pending_count_station_drive_inspection) / sum(total_count_station_drive_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_section_passenger_safety) != 0 then sum(pending_count_section_passenger_safety) / sum(total_count_section_passenger_safety) else 0 end) *100,2),
#                     round((case when sum(total_count_section_employee_safety) != 0 then sum(pending_count_section_employee_safety) / sum(total_count_section_employee_safety) else 0 end) *100,2),
#                     round((case when sum(total_count_section_others) != 0 then sum(pending_count_section_others) / sum(total_count_section_others) else 0 end) *100,2),
#                     round((case when sum(total_count_section_night_inspection) != 0 then sum(pending_count_section_night_inspection) / sum(total_count_section_night_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_section_surprise_inspection) != 0 then sum(pending_count_section_surprise_inspection) / sum(total_count_section_surprise_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_section_drive_inspection) != 0 then sum(pending_count_section_drive_inspection) / sum(total_count_section_drive_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_train_passenger_safety) != 0 then sum(pending_count_train_passenger_safety) / sum(total_count_train_passenger_safety) else 0 end) *100,2),
#                     round((case when sum(total_count_train_employee_safety) != 0 then sum(pending_count_train_employee_safety) / sum(total_count_train_employee_safety) else 0 end) *100,2),
#                     round((case when sum(total_count_train_others) != 0 then sum(pending_count_train_others) / sum(total_count_train_others) else 0 end) *100,2),
#                     round((case when sum(total_count_train_night_inspection) != 0 then sum(pending_count_train_night_inspection) / sum(total_count_train_night_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_train_surprise_inspection) != 0 then sum(pending_count_train_surprise_inspection) / sum(total_count_train_surprise_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_train_drive_inspection) != 0 then sum(pending_count_train_drive_inspection) / sum(total_count_train_drive_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_others_passenger_safety) != 0 then sum(pending_count_others_passenger_safety) / sum(total_count_others_passenger_safety) else 0 end) *100,2),
#                     round((case when sum(total_count_others_employee_safety) != 0 then sum(pending_count_others_employee_safety) / sum(total_count_others_employee_safety) else 0 end) *100,2),
#                     round((case when sum(total_count_others_others) != 0 then sum(pending_count_others_others) / sum(total_count_others_others) else 0 end) *100,2),
#                     round((case when sum(total_count_others_night_inspection) != 0 then sum(total_count_others_night_inspection) / sum(total_count_others_night_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_others_surprise_inspection) != 0 then sum(total_count_others_surprise_inspection) / sum(total_count_others_surprise_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_others_drive_inspection) != 0 then sum(total_count_others_drive_inspection) / sum(total_count_others_drive_inspection) else 0 end) *100,2)
#                     from inspection_analysis_table3 where location_type in %s  and location_code in %s;''',[tuple(irTypeValData),allLocationCodeData])
#                 thirdRowData = cursor.fetchall()
#                 thirdRowData = [list([x if x != None else 0 for x in thirdRowData[0] ])]
#             cursor.close()
        
            
#     for i in range(len(allDesignation)):
#         d_level = allDesignation[i]['d_level']
#         if d_level != None:
#             catData = list(models.category.objects.filter(category=d_level).values('hierarchy_level'))
#             if len(catData)>0:
#                 if catData[0]['hierarchy_level'] != None:
#                     allDesignation[i].update({'level':int(catData[0]['hierarchy_level'])})
#                 else:
#                     allDesignation[i].update({'level':1000})
#             else:
#                 allDesignation[i].update({'level':1000})
#         else:
#             allDesignation[i].update({'level':1000})
#     allDesignation = sorted(allDesignation, key = lambda x: (x['level'],x['designation']))           


#     context = {
#         'allDepartment':allDepartment,
#         'allDesignation':allDesignation,
#         'allFinYear':json.dumps([prevFinYear,curFinYear]),
#         'daysArray':daysArray,
#         'count_list1':json.dumps(count_list1),
#         'count_list2':json.dumps(count_list2),
#         'count_list3':json.dumps(count_list3),
#         'count_list4':json.dumps(count_list4),
#         'count_list5':json.dumps(count_list5),
#         'count_list6':json.dumps(count_list6),
#         'firstRowAllData':firstRowAllData,
#         'secondRowAllData':secondRowAllData,
#         'pendencyDataCard1':pendencyDataCard1,
#         'pendencyDataCard2':pendencyDataCard2,
#         'thirdRowData':thirdRowData,
#         'irTypeVal':irTypeVal,
#         'irDetailsVal':irDetailsVal,
#         'irMapVal':irMapVal,
#         'irPathVal1':irPathVal1,
#         'irPathVal2':irPathVal2,
#         'dataZoneWs':dataZoneWs,

#         'irSearchDept':irSearchDept,
#         'irSearchDate':irSearchDate,
#         'irSearchDesig':irSearchDesig,

#     }
#     return render(request,'svgtemplate.html',context)

# def inspectionDetailsMap(request):
#     N_DAYS_AGO = 5
#     today = datetime.now()    
#     n_days_ago = today - timedelta(days=N_DAYS_AGO)
#     daysArray=[]
#     for i in range(5):
#         daysArray.append((n_days_ago + timedelta(days=i)).strftime('%d/%m'))
#     daysArray = list(reversed(daysArray))
#     finYearCombined = finYear().split('-')
#     curFinYear = finYearCombined[0]+'-'+(finYearCombined[1])[2:]
#     prevFinYear = str(int(finYearCombined[0])-1)+'-'+(finYearCombined[0])[2:]

#     if request.method == "POST" and request.is_ajax():
#         typ = request.POST.get('typ')  
        
#         if typ == 'DesignationDetails':

#             dept = request.POST.get('dept')
#             if(dept == 'All'):
#                 irTypeVal = request.POST.get('irType')   
#                 irPath2 = request.POST.get('irPath2')
#                 irDetailsVal = request.POST.get('irDetails')
               
#                 if irTypeVal == 'ZR':   
#                     irTypeValData = ['ZR','DIV','WS']
                
#                 elif irTypeVal == 'HQ':
#                     irTypeValData = ['ZR']
#                 else:
#                     irTypeValData = [irTypeVal]
#                 if irDetailsVal == 'All':
#                     allDesignation = list(models.Level_Desig.objects.filter(rly_unit__in = models.railwayLocationMaster.objects.filter(location_type__in = irTypeValData).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('designation'))
#                 else:
#                     allDesignation = list(models.Level_Desig.objects.filter(rly_unit__in = models.railwayLocationMaster.objects.filter(Q(location_code=irDetailsVal) | Q(parent_location_code=irDetailsVal),location_type__in = irTypeValData).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('designation'))
#                 if irPath2 != '':
#                     allDesignation = list(models.Level_Desig.objects.filter(rly_unit__in = models.railwayLocationMaster.objects.filter(Q(location_code=irPath2),location_type__in = irTypeValData).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('designation'))

#             else:
#                 irTypeVal = request.POST.get('irType')   
#                 irPath2 = request.POST.get('irPath2')
#                 irDetailsVal = request.POST.get('irDetails')
                
#                 if irTypeVal == 'ZR':   
#                     irTypeValData = ['ZR','DIV','WS']
                
#                 elif irTypeVal == 'HQ':
#                     irTypeValData = ['ZR']
#                 else:
#                     irTypeValData = [irTypeVal]
#                 if irDetailsVal == 'All':
#                     allDesignation = list(models.Level_Desig.objects.filter(department_code=dept,rly_unit__in = models.railwayLocationMaster.objects.filter(location_type__in = irTypeValData).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('designation'))
#                 else:
#                     allDesignation = list(models.Level_Desig.objects.filter(department_code=dept,rly_unit__in = models.railwayLocationMaster.objects.filter(Q(location_code=irDetailsVal) | Q(parent_location_code=irDetailsVal),location_type__in = irTypeValData).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('designation'))
#                 if irPath2 != '':
#                     allDesignation = list(models.Level_Desig.objects.filter(department_code=dept,rly_unit__in = models.railwayLocationMaster.objects.filter(Q(location_code=irPath2),location_type__in = irTypeValData).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('designation'))




#             for i in range(len(allDesignation)):
#                 d_level = allDesignation[i]['d_level']
#                 if d_level != None:
#                     catData = list(models.category.objects.filter(category=d_level).values('hierarchy_level'))
#                     if len(catData)>0:
#                         if catData[0]['hierarchy_level'] != None:
#                             allDesignation[i].update({'level':int(catData[0]['hierarchy_level'])})
#                         else:
#                             allDesignation[i].update({'level':1000})
#                     else:
#                         allDesignation[i].update({'level':1000})
#                 else:
#                     allDesignation[i].update({'level':1000})
#             allDesignation = sorted(allDesignation, key = lambda x: (x['level'],x['designation']))    
            
            
            
            
#             return JsonResponse(allDesignation, safe = False)
        
#     allDesignation = list(models.Level_Desig.objects.filter(rly_unit__in = models.railwayLocationMaster.objects.filter(location_type__in=['DIV','RB','ZR','PU','WS']).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('designation'))
#     allDepartment = list(models.departMast.objects.values('department_name','department_code').distinct().order_by('department_name'))


    
#     if request.method == "GET":
#         cursor = connection.cursor()
#         cursor.execute('''select sum(total_count_others)::int,sum(pending_count_others)::int,sum(pending_overdue_count_others)::int,
#             sum(total_count_passenger_safety)::int,sum(pending_count_passenger_safety)::int,sum(pending_overdue_count_passenger_safety)::int,
#             sum(total_count_employee_safety)::int,sum(pending_count_employee_safety)::int,sum(pending_overdue_count_employee_safety)::int
#             from inspection_analysis_table1 where fin_year=%s;''',[prevFinYear])
#         firstPrevFinYear = cursor.fetchall()
#         count_list1 =[]
#         count_list2 =[]
#         count_list3 =[]
#         if len(firstPrevFinYear)>0:
#             count_list3.append([firstPrevFinYear[0][0],firstPrevFinYear[0][1],firstPrevFinYear[0][2]])
#             count_list1.append([firstPrevFinYear[0][3],firstPrevFinYear[0][4],firstPrevFinYear[0][5]])
#             count_list2.append([firstPrevFinYear[0][6],firstPrevFinYear[0][7],firstPrevFinYear[0][8]])
#         else:
#             count_list1.append([0,0,0])
#             count_list2.append([0,0,0])
#             count_list3.append([0,0,0])
#         cursor.execute('''select sum(total_count_others)::int,sum(pending_count_others)::int,sum(pending_overdue_count_others)::int,
#             sum(total_count_passenger_safety)::int,sum(pending_count_passenger_safety)::int,sum(pending_overdue_count_passenger_safety)::int,
#             sum(total_count_employee_safety)::int,sum(pending_count_employee_safety)::int,sum(pending_overdue_count_employee_safety)::int
#             from inspection_analysis_table1 where fin_year=%s;''',[curFinYear])
#         firstCurFinYear = cursor.fetchall()
        
#         if len(firstCurFinYear)>0:
#             count_list3.append([firstCurFinYear[0][0],firstCurFinYear[0][1],firstCurFinYear[0][2]])
#             count_list1.append([firstCurFinYear[0][3],firstCurFinYear[0][4],firstCurFinYear[0][5]])
#             count_list2.append([firstCurFinYear[0][6],firstCurFinYear[0][7],firstCurFinYear[0][8]])
#         else:
#             count_list1.append([0,0,0])
#             count_list2.append([0,0,0])
#             count_list3.append([0,0,0])

#         cursor.execute('''select sum(total_count_others)::int,sum(pending_count_others)::int,sum(pending_overdue_count_others)::int,
#                 round((case when sum(total_count_others) != 0 then sum(pending_count_others) / sum(total_count_others) else 0 end) *100,2),
#                 round((case when sum(total_count_others) != 0 then sum(pending_overdue_count_others) / sum(total_count_others) else 0 end) *100,2),
#                 sum(last_one_days_count_others)::int,sum(last_two_days_count_others)::int,sum(last_three_days_count_others)::int,
#                 sum(last_four_days_count_others)::int,sum(last_five_days_count_others)::int,			
#                 sum(total_count_passenger_safety)::int,sum(pending_count_passenger_safety)::int,sum(pending_overdue_count_passenger_safety)::int,
#                 round((case when sum(total_count_passenger_safety) != 0 then sum(pending_count_passenger_safety) / sum(total_count_passenger_safety) else 0 end) *100,2),
#                 round((case when sum(total_count_passenger_safety) != 0 then sum(pending_overdue_count_passenger_safety) / sum(total_count_passenger_safety) else 0 end) *100,2),
#                 sum(last_one_days_count_passenger_safety)::int,sum(last_two_days_count_passenger_safety)::int,sum(last_three_days_count_passenger_safety)::int,
#                 sum(last_four_days_count_passenger_safety)::int,sum(last_five_days_count_passenger_safety)::int,
#                 sum(total_count_employee_safety)::int,sum(pending_count_employee_safety)::int,sum(pending_overdue_count_employee_safety)::int,
#                 round((case when sum(total_count_employee_safety) != 0 then sum(pending_count_employee_safety) / sum(total_count_employee_safety) else 0 end) *100,2),
#                 round((case when sum(total_count_employee_safety) != 0 then sum(pending_overdue_count_employee_safety) / sum(total_count_employee_safety) else 0 end) *100,2),
#                 sum(last_one_days_count_employee_safety)::int,sum(last_two_days_count_employee_safety)::int,sum(last_three_days_count_employee_safety)::int,
#                 sum(last_four_days_count_employee_safety)::int,sum(last_five_days_count_employee_safety)::int
#                 from inspection_analysis_table1;''')
#         firstRowAllData = cursor.fetchall()


#         cursor.execute('''select sum(total_count_night_inspection)::int,sum(pending_count_night_inspection)::int,sum(pending_overdue_count_night_inspection)::int,
#             sum(total_count_surprise_inspection)::int,sum(pending_count_surprise_inspection)::int,sum(pending_overdue_count_surprise_inspection)::int,
#             sum(total_count_drive_based_inspection)::int,sum(pending_count_drive_based_inspection)::int,sum(pending_overdue_percentage_drive_based_inspection)::int
#             from inspection_analysis_table2 where fin_year=%s;''',[prevFinYear])
#         secondPrevFinYear = cursor.fetchall()
#         count_list4 =[]
#         count_list5 =[]
#         count_list6 =[]
#         if len(secondPrevFinYear)>0:
#             count_list4.append([secondPrevFinYear[0][0],secondPrevFinYear[0][1],secondPrevFinYear[0][2]])
#             count_list5.append([secondPrevFinYear[0][3],secondPrevFinYear[0][4],secondPrevFinYear[0][5]])
#             count_list6.append([secondPrevFinYear[0][6],secondPrevFinYear[0][7],secondPrevFinYear[0][8]])
#         else:
#             count_list4.append([0,0,0])
#             count_list5.append([0,0,0])
#             count_list6.append([0,0,0])
#         cursor.execute('''select sum(total_count_night_inspection)::int,sum(pending_count_night_inspection)::int,sum(pending_overdue_count_night_inspection)::int,
#             sum(total_count_surprise_inspection)::int,sum(pending_count_surprise_inspection)::int,sum(pending_overdue_count_surprise_inspection)::int,
#             sum(total_count_drive_based_inspection)::int,sum(pending_count_drive_based_inspection)::int,sum(pending_overdue_percentage_drive_based_inspection)::int
#             from inspection_analysis_table2 where fin_year=%s;''',[curFinYear])
#         secondCurFinYear = cursor.fetchall()
        
#         if len(firstCurFinYear)>0:
#             count_list4.append([secondCurFinYear[0][0],secondCurFinYear[0][1],secondCurFinYear[0][2]])
#             count_list5.append([secondCurFinYear[0][3],secondCurFinYear[0][4],secondCurFinYear[0][5]])
#             count_list6.append([secondCurFinYear[0][6],secondCurFinYear[0][7],secondCurFinYear[0][8]])
#         else:
#             count_list4.append([0,0,0])
#             count_list5.append([0,0,0])
#             count_list6.append([0,0,0])

#         cursor.execute('''select sum(total_count_night_inspection)::int,sum(pending_count_night_inspection)::int,sum(pending_overdue_count_night_inspection)::int,
#             round((case when sum(total_count_night_inspection) != 0 then sum(pending_count_night_inspection) / sum(total_count_night_inspection) else 0 end) *100,2),
#             round((case when sum(total_count_night_inspection) != 0 then sum(pending_count_night_inspection) / sum(total_count_night_inspection) else 0 end) *100,2),
#             sum(last_one_days_count_night_inspection)::int,sum(last_two_days_count_night_inspection)::int,sum(last_three_days_count_night_inspection)::int,
#             sum(last_four_days_count_night_inspection)::int,sum(last_five_days_count_night_inspection)::int,	
#             sum(total_count_surprise_inspection)::int,sum(pending_count_surprise_inspection)::int,sum(pending_overdue_count_surprise_inspection)::int,
#             round((case when sum(total_count_surprise_inspection) != 0 then sum(pending_count_surprise_inspection) / sum(total_count_surprise_inspection) else 0 end) *100,2),
#             round((case when sum(total_count_surprise_inspection) != 0 then sum(pending_overdue_count_surprise_inspection) / sum(total_count_surprise_inspection) else 0 end) *100,2),
#             sum(last_one_days_count_surprise_inspection)::int,sum(last_two_days_count_surprise_inspection)::int,sum(last_three_days_count_surprise_inspection)::int,
#             sum(last_four_days_count_surprise_inspection)::int,sum(last_five_days_count_surprise_inspection)::int,
#             sum(total_count_drive_based_inspection)::int,sum(pending_count_drive_based_inspection)::int,sum(pending_overdue_percentage_drive_based_inspection)::int,
#             round((case when sum(total_count_drive_based_inspection) != 0 then sum(pending_overdue_percentage_drive_based_inspection) / sum(total_count_drive_based_inspection) else 0 end) *100,2),
#             round((case when sum(total_count_drive_based_inspection) != 0 then sum(pending_overdue_percentage_drive_based_inspection) / sum(total_count_drive_based_inspection) else 0 end) *100,2),
#             sum(last_one_days_count_drive_based_inspection)::int,sum(last_two_days_count_drive_based_inspection)::int,sum(last_three_days_count_drive_based_inspection)::int,
#             sum(last_four_days_count_drive_based_inspection)::int,sum(last_five_days_count_drive_based_inspection)::int
#             from inspection_analysis_table2;''')
#         secondRowAllData = cursor.fetchall()

#         #########   forth row card(pendency)

#         cursor.execute('''select sum(count_7_days_passenger_safety),sum(count_30_days_passenger_safety),sum(count_90_days_passenger_safety),
#             sum(count_180_days_passenger_safety),sum(count_365_days_passenger_safety),
#             sum(count_7_days_employee_safety),sum(count_30_days_employee_safety),sum(count_90_days_employee_safety),
#             sum(count_180_days_employee_safety),sum(count_365_days_employee_safety),
#             sum(count_7_days_others),sum(count_30_days_others),sum(count_90_days_others),
#             sum(count_180_days_others),sum(count_365_days_others)
#             from inspection_pendency_analysis_table1;''')
#         pendencyDataCard1 = cursor.fetchall()

#         cursor.execute('''select sum(count_7_days_night_inspection),sum(count_30_days_night_inspection),sum(count_90_days_night_inspection),
#             sum(count_180_days_night_inspection),sum(count_365_days_night_inspection),
#             sum(count_7_days_surprise_inspection),sum(count_30_days_surprise_inspection),sum(count_90_days_surprise_inspection),
#             sum(count_180_days_surprise_inspection),sum(count_365_days_surprise_inspection),
#             sum(count_7_days_drive_based_inspection),sum(count_30_days_drive_based_inspection),sum(count_90_days_drive_based_inspection),
#             sum(count_180_days_drive_based_inspection),sum(count_365_days_drive_based_inspection),
#             sum(count_7_days_regular_inspection),sum(count_30_days_regular_inspection),sum(count_90_days_regular_inspection),
#             sum(count_180_days_regular_inspection),sum(count_365_days_regular_inspection)
#             from inspection_pendency_analysis_table2;''')
#         pendencyDataCard2 = cursor.fetchall()


#         cursor.execute('''select  sum(total_count_station_passenger_safety),sum(total_count_station_employee_safety),sum(total_count_station_others),
#             sum(total_count_station_night_inspection),sum(total_count_station_surprise_inspection),sum(total_count_station_drive_inspection),
#             sum(total_count_section_passenger_safety),sum(total_count_section_employee_safety),sum(total_count_section_others),
#             sum(total_count_section_night_inspection),sum(total_count_section_surprise_inspection),sum(total_count_section_drive_inspection),
#             sum(total_count_train_passenger_safety),sum(total_count_train_employee_safety),sum(total_count_train_others),
#             sum(total_count_train_night_inspection),sum(total_count_train_surprise_inspection),sum(total_count_train_drive_inspection),
#             sum(total_count_others_passenger_safety),sum(total_count_others_employee_safety),sum(total_count_others_others),
#             sum(total_count_others_night_inspection),sum(total_count_others_surprise_inspection),sum(total_count_others_drive_inspection),
#             round((case when sum(total_count_station_passenger_safety) != 0 then sum(pending_count_station_passenger_safety) / sum(total_count_station_passenger_safety) else 0 end) *100,2),
#             round((case when sum(total_count_station_employee_safety) != 0 then sum(pending_count_station_employee_safety) / sum(total_count_station_employee_safety) else 0 end) *100,2),
#             round((case when sum(total_count_station_others) != 0 then sum(pending_count_station_others) / sum(total_count_station_others) else 0 end) *100,2),
#             round((case when sum(total_count_station_night_inspection) != 0 then sum(pending_count_station_night_inspection) / sum(total_count_station_night_inspection) else 0 end) *100,2),
#             round((case when sum(total_count_station_surprise_inspection) != 0 then sum(pending_count_station_surprise_inspection) / sum(total_count_station_surprise_inspection) else 0 end) *100,2),
#             round((case when sum(total_count_station_drive_inspection) != 0 then sum(pending_count_station_drive_inspection) / sum(total_count_station_drive_inspection) else 0 end) *100,2),
#             round((case when sum(total_count_section_passenger_safety) != 0 then sum(pending_count_section_passenger_safety) / sum(total_count_section_passenger_safety) else 0 end) *100,2),
#             round((case when sum(total_count_section_employee_safety) != 0 then sum(pending_count_section_employee_safety) / sum(total_count_section_employee_safety) else 0 end) *100,2),
#             round((case when sum(total_count_section_others) != 0 then sum(pending_count_section_others) / sum(total_count_section_others) else 0 end) *100,2),
#             round((case when sum(total_count_section_night_inspection) != 0 then sum(pending_count_section_night_inspection) / sum(total_count_section_night_inspection) else 0 end) *100,2),
#             round((case when sum(total_count_section_surprise_inspection) != 0 then sum(pending_count_section_surprise_inspection) / sum(total_count_section_surprise_inspection) else 0 end) *100,2),
#             round((case when sum(total_count_section_drive_inspection) != 0 then sum(pending_count_section_drive_inspection) / sum(total_count_section_drive_inspection) else 0 end) *100,2),
#             round((case when sum(total_count_train_passenger_safety) != 0 then sum(pending_count_train_passenger_safety) / sum(total_count_train_passenger_safety) else 0 end) *100,2),
#             round((case when sum(total_count_train_employee_safety) != 0 then sum(pending_count_train_employee_safety) / sum(total_count_train_employee_safety) else 0 end) *100,2),
#             round((case when sum(total_count_train_others) != 0 then sum(pending_count_train_others) / sum(total_count_train_others) else 0 end) *100,2),
#             round((case when sum(total_count_train_night_inspection) != 0 then sum(pending_count_train_night_inspection) / sum(total_count_train_night_inspection) else 0 end) *100,2),
#             round((case when sum(total_count_train_surprise_inspection) != 0 then sum(pending_count_train_surprise_inspection) / sum(total_count_train_surprise_inspection) else 0 end) *100,2),
#             round((case when sum(total_count_train_drive_inspection) != 0 then sum(pending_count_train_drive_inspection) / sum(total_count_train_drive_inspection) else 0 end) *100,2),
#             round((case when sum(total_count_others_passenger_safety) != 0 then sum(pending_count_others_passenger_safety) / sum(total_count_others_passenger_safety) else 0 end) *100,2),
#             round((case when sum(total_count_others_employee_safety) != 0 then sum(pending_count_others_employee_safety) / sum(total_count_others_employee_safety) else 0 end) *100,2),
#             round((case when sum(total_count_others_others) != 0 then sum(pending_count_others_others) / sum(total_count_others_others) else 0 end) *100,2),
#             round((case when sum(total_count_others_night_inspection) != 0 then sum(total_count_others_night_inspection) / sum(total_count_others_night_inspection) else 0 end) *100,2),
#             round((case when sum(total_count_others_surprise_inspection) != 0 then sum(total_count_others_surprise_inspection) / sum(total_count_others_surprise_inspection) else 0 end) *100,2),
#             round((case when sum(total_count_others_drive_inspection) != 0 then sum(total_count_others_drive_inspection) / sum(total_count_others_drive_inspection) else 0 end) *100,2)
#             from inspection_analysis_table3;''')
#         thirdRowData = cursor.fetchall()


#         cursor.close()
#         irTypeVal = 'ZR'
#         irDetailsVal = 'All'
#         irMapVal = '1'
#         irPathVal1 = None
#         irPathVal2 = ''
#         dataZoneWs = []
#         irPath2 = None
#         irSearchDept = ""
#         irSearchDate = ""
#         irSearchDesig = ""

    
#     if request.method == "POST":
#         submitvalue = request.POST.get('submit')
#         irPathVal1 = None
#         irPathVal2 = ''
#         dataZoneWs = []
#         irSearchDept = ""
#         irSearchDate = ""
#         irSearchDesig = ""
#         if submitvalue == 'irSubmitButton':
#             cursor = connection.cursor()
#             irTypeVal = request.POST.get('irType')  
#             irPath2 = request.POST.get('irPath2')
#             if irTypeVal == 'PU':
#                 irMapVal = '2'
#             else:
#                 irMapVal = '1'
#             irDetailsVal = request.POST.get('irDetails')
#             if irTypeVal == 'DIV':
#                 zone = irDetailsVal
#                 dataZoneWs = list(models.railwayLocationMaster.objects.filter(parent_location_code=zone,location_type = 'DIV').values('location_code','location_description').order_by('location_code'))
                
#             elif irTypeVal == 'WS':
#                 zone = irDetailsVal
#                 dataZoneWs = list(models.railwayLocationMaster.objects.filter(parent_location_code=zone,location_type = 'WS').values('location_code','location_description').order_by('location_code'))
            
#             if irTypeVal == 'ZR':   
#                 irTypeValData = ['ZR','DIV','WS']
            
#             elif irTypeVal == 'HQ':
#                 irTypeValData = ['ZR']
#             else:
#                 irTypeValData = [irTypeVal]
            

#             if irDetailsVal == 'All':
#                 allLocationCodeData = tuple(models.railwayLocationMaster.objects.filter(location_type__in = irTypeValData).values_list('location_code',flat=True).distinct())
#                 allDesignation = list(models.Level_Desig.objects.filter(rly_unit__in = models.railwayLocationMaster.objects.filter(location_type__in = irTypeValData).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('designation'))

#             else:
#                 irPathVal1 = irDetailsVal
#                 allLocationCodeData = list(models.railwayLocationMaster.objects.filter(Q(parent_location_code=irDetailsVal)).values_list('location_code',flat=True).distinct())
#                 allDesignation = list(models.Level_Desig.objects.filter(rly_unit__in = models.railwayLocationMaster.objects.filter(Q(location_code=irDetailsVal) | Q(parent_location_code=irDetailsVal),location_type__in = irTypeValData).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('designation'))

#                 allLocationCodeData.append(irDetailsVal)
#                 allLocationCodeData = tuple(allLocationCodeData)
            
#             if irPath2 != '':
#                 irPathVal2 = irPath2
#                 allDesignation = list(models.Level_Desig.objects.filter(rly_unit__in = models.railwayLocationMaster.objects.filter(Q(location_code=irPath2),location_type__in = irTypeValData).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('designation'))

#                 allLocationCodeData = tuple([irPath2])
#                 irTypeValData = [irTypeVal]




#             irSearchType = request.POST.get('irSearchType')
#             if irSearchType == 'Yes':
#                 irSearchDept = request.POST.get('irSearchDept')
#                 if irSearchDept == 'All':
#                     irSearchDept = ""
#                     allDepartmentData = tuple(models.departMast.objects.values_list('department_name',flat=True).distinct())
#                 else:
#                     allDepartmentData = tuple(models.departMast.objects.filter(department_code=irSearchDept).values_list('department_name',flat=True).distinct())
                
#                 irSearchDesig = request.POST.get('irSearchDesig')
#                 if  irSearchDesig == 'All':
#                     irSearchDesig = ""
#                     allDesignationData = tuple(models.Level_Desig.objects.filter(rly_unit__in = models.railwayLocationMaster.objects.filter(location_type__in=['DIV','RB','ZR','WS','PU']).values('rly_unit_code')).values_list('designation_code',flat=True).distinct())
#                 else:
#                     irSearchDesig = int(irSearchDesig)
#                     allDesignationData = tuple([irSearchDesig])
                    

                
#                 irSearchDate = request.POST.get('irSearchDate')
#                 if irSearchDate == "":
#                     startDate = '2020-04-01'
#                     endDate = datetime.now().strftime('%Y-%m-%d')
#                 else:
#                     irSearchDate11 = irSearchDate.split('-')
#                     start1 = irSearchDate11[0].split('/')
#                     end1 = irSearchDate11[1].split('/')
#                     startDate = '20'+start1[2]+'-'+start1[1]+'-'+start1[0]
#                     endDate = '20'+end1[2]+'-'+end1[1]+'-'+end1[0]
#                 cursor.execute('''select sum(total_count_others)::int,sum(pending_count_others)::int,sum(pending_overdue_count_others)::int,
#                     sum(total_count_passenger_safety)::int,sum(pending_count_passenger_safety)::int,sum(pending_overdue_count_passenger_safety)::int,
#                     sum(total_count_employee_safety)::int,sum(pending_count_employee_safety)::int,sum(pending_overdue_count_employee_safety)::int
#                     from view_inspection_analysis_table1 where fin_year=%s and location_type in %s  and location_code in %s and inspected_on between %s and %s
#                     and designation_code in %s and department in %s;''',[prevFinYear,tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData])
#                 firstPrevFinYear = cursor.fetchall()
                
#                 count_list1 =[]
#                 count_list2 =[]
#                 count_list3 =[]
#                 if len(firstPrevFinYear)>0:
#                     firstPrevFinYear = [list([x if x != None else 0 for x in firstPrevFinYear[0] ])]
#                     count_list3.append([firstPrevFinYear[0][0],firstPrevFinYear[0][1],firstPrevFinYear[0][2]])
#                     count_list1.append([firstPrevFinYear[0][3],firstPrevFinYear[0][4],firstPrevFinYear[0][5]])
#                     count_list2.append([firstPrevFinYear[0][6],firstPrevFinYear[0][7],firstPrevFinYear[0][8]])
#                 else:
#                     count_list1.append([0,0,0])
#                     count_list2.append([0,0,0])
#                     count_list3.append([0,0,0])
#                 cursor.execute('''select sum(total_count_others)::int,sum(pending_count_others)::int,sum(pending_overdue_count_others)::int,
#                     sum(total_count_passenger_safety)::int,sum(pending_count_passenger_safety)::int,sum(pending_overdue_count_passenger_safety)::int,
#                     sum(total_count_employee_safety)::int,sum(pending_count_employee_safety)::int,sum(pending_overdue_count_employee_safety)::int
#                     from view_inspection_analysis_table1 where fin_year=%s and location_type in %s  and location_code in %s and inspected_on between %s and %s
#                     and designation_code in %s and department in %s;''',[curFinYear,tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData])
#                 firstCurFinYear = cursor.fetchall()
                
#                 if len(firstCurFinYear)>0:
#                     firstCurFinYear = [list([x if x != None else 0 for x in firstCurFinYear[0] ])]
#                     count_list3.append([firstCurFinYear[0][0],firstCurFinYear[0][1],firstCurFinYear[0][2]])
#                     count_list1.append([firstCurFinYear[0][3],firstCurFinYear[0][4],firstCurFinYear[0][5]])
#                     count_list2.append([firstCurFinYear[0][6],firstCurFinYear[0][7],firstCurFinYear[0][8]])
#                 else:
#                     count_list1.append([0,0,0])
#                     count_list2.append([0,0,0])
#                     count_list3.append([0,0,0])

#                 cursor.execute('''select sum(total_count_others)::int,sum(pending_count_others)::int,sum(pending_overdue_count_others)::int,
#                         round((case when sum(total_count_others) != 0 then sum(pending_count_others) / sum(total_count_others) else 0 end) *100,2),
#                         round((case when sum(total_count_others) != 0 then sum(pending_overdue_count_others) / sum(total_count_others) else 0 end) *100,2),
#                         sum(last_one_days_count_others)::int,sum(last_two_days_count_others)::int,sum(last_three_days_count_others)::int,
#                         sum(last_four_days_count_others)::int,sum(last_five_days_count_others)::int,			
#                         sum(total_count_passenger_safety)::int,sum(pending_count_passenger_safety)::int,sum(pending_overdue_count_passenger_safety)::int,
#                         round((case when sum(total_count_passenger_safety) != 0 then sum(pending_count_passenger_safety) / sum(total_count_passenger_safety) else 0 end) *100,2),
#                         round((case when sum(total_count_passenger_safety) != 0 then sum(pending_overdue_count_passenger_safety) / sum(total_count_passenger_safety) else 0 end) *100,2),
#                         sum(last_one_days_count_passenger_safety)::int,sum(last_two_days_count_passenger_safety)::int,sum(last_three_days_count_passenger_safety)::int,
#                         sum(last_four_days_count_passenger_safety)::int,sum(last_five_days_count_passenger_safety)::int,
#                         sum(total_count_employee_safety)::int,sum(pending_count_employee_safety)::int,sum(pending_overdue_count_employee_safety)::int,
#                         round((case when sum(total_count_employee_safety) != 0 then sum(pending_count_employee_safety) / sum(total_count_employee_safety) else 0 end) *100,2),
#                         round((case when sum(total_count_employee_safety) != 0 then sum(pending_overdue_count_employee_safety) / sum(total_count_employee_safety) else 0 end) *100,2),
#                         sum(last_one_days_count_employee_safety)::int,sum(last_two_days_count_employee_safety)::int,sum(last_three_days_count_employee_safety)::int,
#                         sum(last_four_days_count_employee_safety)::int,sum(last_five_days_count_employee_safety)::int
#                         from view_inspection_analysis_table1 where location_type in %s  and location_code in %s and inspected_on between %s and %s
#                         and designation_code in %s and department in %s;''',[tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData])
#                 firstRowAllData = cursor.fetchall()
                
#                 firstRowAllData = [list([x if x != None else 0 for x in firstRowAllData[0] ])]
                



#                 cursor.execute('''select sum(total_count_night_inspection)::int,sum(pending_count_night_inspection)::int,sum(pending_overdue_count_night_inspection)::int,
#                     sum(total_count_surprise_inspection)::int,sum(pending_count_surprise_inspection)::int,sum(pending_overdue_count_surprise_inspection)::int,
#                     sum(total_count_drive_based_inspection)::int,sum(pending_count_drive_based_inspection)::int,sum(pending_overdue_percentage_drive_based_inspection)::int
#                     from view_inspection_analysis_table2 where fin_year=%s and location_type in %s  and location_code in %s and inspected_on between %s and %s
#                     and designation_code in %s and department in %s;''',[prevFinYear,tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData])
#                 secondPrevFinYear = cursor.fetchall()
                
#                 count_list4 =[]
#                 count_list5 =[]
#                 count_list6 =[]
#                 if len(secondPrevFinYear)>0:
#                     secondPrevFinYear = [list([x if x != None else 0 for x in secondPrevFinYear[0] ])]
#                     count_list4.append([secondPrevFinYear[0][0],secondPrevFinYear[0][1],secondPrevFinYear[0][2]])
#                     count_list5.append([secondPrevFinYear[0][3],secondPrevFinYear[0][4],secondPrevFinYear[0][5]])
#                     count_list6.append([secondPrevFinYear[0][6],secondPrevFinYear[0][7],secondPrevFinYear[0][8]])
#                 else:
#                     count_list4.append([0,0,0])
#                     count_list5.append([0,0,0])
#                     count_list6.append([0,0,0])
#                 cursor.execute('''select sum(total_count_night_inspection)::int,sum(pending_count_night_inspection)::int,sum(pending_overdue_count_night_inspection)::int,
#                     sum(total_count_surprise_inspection)::int,sum(pending_count_surprise_inspection)::int,sum(pending_overdue_count_surprise_inspection)::int,
#                     sum(total_count_drive_based_inspection)::int,sum(pending_count_drive_based_inspection)::int,sum(pending_overdue_percentage_drive_based_inspection)::int
#                     from view_inspection_analysis_table2 where fin_year=%s and location_type in %s  and location_code in %s  and inspected_on between %s and %s
#                     and designation_code in %s and department in %s;''',[curFinYear,tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData])
#                 secondCurFinYear = cursor.fetchall()
                
#                 if len(secondCurFinYear)>0:
#                     secondCurFinYear = [list([x if x != None else 0 for x in secondCurFinYear[0] ])]
#                     count_list4.append([secondCurFinYear[0][0],secondCurFinYear[0][1],secondCurFinYear[0][2]])
#                     count_list5.append([secondCurFinYear[0][3],secondCurFinYear[0][4],secondCurFinYear[0][5]])
#                     count_list6.append([secondCurFinYear[0][6],secondCurFinYear[0][7],secondCurFinYear[0][8]])
#                 else:
#                     count_list4.append([0,0,0])
#                     count_list5.append([0,0,0])
#                     count_list6.append([0,0,0])

#                 cursor.execute('''select sum(total_count_night_inspection)::int,sum(pending_count_night_inspection)::int,sum(pending_overdue_count_night_inspection)::int,
#                     round((case when sum(total_count_night_inspection) != 0 then sum(pending_count_night_inspection) / sum(total_count_night_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_night_inspection) != 0 then sum(pending_count_night_inspection) / sum(total_count_night_inspection) else 0 end) *100,2),
#                     sum(last_one_days_count_night_inspection)::int,sum(last_two_days_count_night_inspection)::int,sum(last_three_days_count_night_inspection)::int,
#                     sum(last_four_days_count_night_inspection)::int,sum(last_five_days_count_night_inspection)::int,	
#                     sum(total_count_surprise_inspection)::int,sum(pending_count_surprise_inspection)::int,sum(pending_overdue_count_surprise_inspection)::int,
#                     round((case when sum(total_count_surprise_inspection) != 0 then sum(pending_count_surprise_inspection) / sum(total_count_surprise_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_surprise_inspection) != 0 then sum(pending_overdue_count_surprise_inspection) / sum(total_count_surprise_inspection) else 0 end) *100,2),
#                     sum(last_one_days_count_surprise_inspection)::int,sum(last_two_days_count_surprise_inspection)::int,sum(last_three_days_count_surprise_inspection)::int,
#                     sum(last_four_days_count_surprise_inspection)::int,sum(last_five_days_count_surprise_inspection)::int,
#                     sum(total_count_drive_based_inspection)::int,sum(pending_count_drive_based_inspection)::int,sum(pending_overdue_percentage_drive_based_inspection)::int,
#                     round((case when sum(total_count_drive_based_inspection) != 0 then sum(pending_overdue_percentage_drive_based_inspection) / sum(total_count_drive_based_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_drive_based_inspection) != 0 then sum(pending_overdue_percentage_drive_based_inspection) / sum(total_count_drive_based_inspection) else 0 end) *100,2),
#                     sum(last_one_days_count_drive_based_inspection)::int,sum(last_two_days_count_drive_based_inspection)::int,sum(last_three_days_count_drive_based_inspection)::int,
#                     sum(last_four_days_count_drive_based_inspection)::int,sum(last_five_days_count_drive_based_inspection)::int
#                     from view_inspection_analysis_table2 where location_type in %s  and location_code in %s and inspected_on between %s and %s
#                     and designation_code in %s and department in %s;''',[tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData])
#                 secondRowAllData = cursor.fetchall()
#                 secondRowAllData = [list([x if x != None else 0 for x in secondRowAllData[0] ])]

#                 #########   forth row card(pendency)

#                 cursor.execute('''select sum(count_7_days_passenger_safety),sum(count_30_days_passenger_safety),sum(count_90_days_passenger_safety),
#                     sum(count_180_days_passenger_safety),sum(count_365_days_passenger_safety),
#                     sum(count_7_days_employee_safety),sum(count_30_days_employee_safety),sum(count_90_days_employee_safety),
#                     sum(count_180_days_employee_safety),sum(count_365_days_employee_safety),
#                     sum(count_7_days_others),sum(count_30_days_others),sum(count_90_days_others),
#                     sum(count_180_days_others),sum(count_365_days_others)
#                     from view_inspection_pendency_analysis_table1 where location_type in %s  and location_code in %s and inspected_on between %s and %s
#                     and designation_code in %s and department in %s;''',[tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData])
#                 pendencyDataCard1 = cursor.fetchall()
#                 pendencyDataCard1 = [list([x if x != None else 0 for x in pendencyDataCard1[0] ])]

#                 cursor.execute('''select sum(count_7_days_night_inspection),sum(count_30_days_night_inspection),sum(count_90_days_night_inspection),
#                     sum(count_180_days_night_inspection),sum(count_365_days_night_inspection),
#                     sum(count_7_days_surprise_inspection),sum(count_30_days_surprise_inspection),sum(count_90_days_surprise_inspection),
#                     sum(count_180_days_surprise_inspection),sum(count_365_days_surprise_inspection),
#                     sum(count_7_days_drive_based_inspection),sum(count_30_days_drive_based_inspection),sum(count_90_days_drive_based_inspection),
#                     sum(count_180_days_drive_based_inspection),sum(count_365_days_drive_based_inspection),
#                     sum(count_7_days_regular_inspection),sum(count_30_days_regular_inspection),sum(count_90_days_regular_inspection),
#                     sum(count_180_days_regular_inspection),sum(count_365_days_regular_inspection)
#                     from view_inspection_pendency_analysis_table2 where location_type in %s  and location_code in %s and inspected_on between %s and %s
#                     and designation_code in %s and department in %s;''',[tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData])
#                 pendencyDataCard2 = cursor.fetchall()
#                 pendencyDataCard2 = [list([x if x != None else 0 for x in pendencyDataCard2[0] ])]


#                 cursor.execute('''select  sum(total_count_station_passenger_safety),sum(total_count_station_employee_safety),sum(total_count_station_others),
#                     sum(total_count_station_night_inspection),sum(total_count_station_surprise_inspection),sum(total_count_station_drive_inspection),
#                     sum(total_count_section_passenger_safety),sum(total_count_section_employee_safety),sum(total_count_section_others),
#                     sum(total_count_section_night_inspection),sum(total_count_section_surprise_inspection),sum(total_count_section_drive_inspection),
#                     sum(total_count_train_passenger_safety),sum(total_count_train_employee_safety),sum(total_count_train_others),
#                     sum(total_count_train_night_inspection),sum(total_count_train_surprise_inspection),sum(total_count_train_drive_inspection),
#                     sum(total_count_others_passenger_safety),sum(total_count_others_employee_safety),sum(total_count_others_others),
#                     sum(total_count_others_night_inspection),sum(total_count_others_surprise_inspection),sum(total_count_others_drive_inspection),
#                     round((case when sum(total_count_station_passenger_safety) != 0 then sum(pending_count_station_passenger_safety) / sum(total_count_station_passenger_safety) else 0 end) *100,2),
#                     round((case when sum(total_count_station_employee_safety) != 0 then sum(pending_count_station_employee_safety) / sum(total_count_station_employee_safety) else 0 end) *100,2),
#                     round((case when sum(total_count_station_others) != 0 then sum(pending_count_station_others) / sum(total_count_station_others) else 0 end) *100,2),
#                     round((case when sum(total_count_station_night_inspection) != 0 then sum(pending_count_station_night_inspection) / sum(total_count_station_night_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_station_surprise_inspection) != 0 then sum(pending_count_station_surprise_inspection) / sum(total_count_station_surprise_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_station_drive_inspection) != 0 then sum(pending_count_station_drive_inspection) / sum(total_count_station_drive_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_section_passenger_safety) != 0 then sum(pending_count_section_passenger_safety) / sum(total_count_section_passenger_safety) else 0 end) *100,2),
#                     round((case when sum(total_count_section_employee_safety) != 0 then sum(pending_count_section_employee_safety) / sum(total_count_section_employee_safety) else 0 end) *100,2),
#                     round((case when sum(total_count_section_others) != 0 then sum(pending_count_section_others) / sum(total_count_section_others) else 0 end) *100,2),
#                     round((case when sum(total_count_section_night_inspection) != 0 then sum(pending_count_section_night_inspection) / sum(total_count_section_night_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_section_surprise_inspection) != 0 then sum(pending_count_section_surprise_inspection) / sum(total_count_section_surprise_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_section_drive_inspection) != 0 then sum(pending_count_section_drive_inspection) / sum(total_count_section_drive_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_train_passenger_safety) != 0 then sum(pending_count_train_passenger_safety) / sum(total_count_train_passenger_safety) else 0 end) *100,2),
#                     round((case when sum(total_count_train_employee_safety) != 0 then sum(pending_count_train_employee_safety) / sum(total_count_train_employee_safety) else 0 end) *100,2),
#                     round((case when sum(total_count_train_others) != 0 then sum(pending_count_train_others) / sum(total_count_train_others) else 0 end) *100,2),
#                     round((case when sum(total_count_train_night_inspection) != 0 then sum(pending_count_train_night_inspection) / sum(total_count_train_night_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_train_surprise_inspection) != 0 then sum(pending_count_train_surprise_inspection) / sum(total_count_train_surprise_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_train_drive_inspection) != 0 then sum(pending_count_train_drive_inspection) / sum(total_count_train_drive_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_others_passenger_safety) != 0 then sum(pending_count_others_passenger_safety) / sum(total_count_others_passenger_safety) else 0 end) *100,2),
#                     round((case when sum(total_count_others_employee_safety) != 0 then sum(pending_count_others_employee_safety) / sum(total_count_others_employee_safety) else 0 end) *100,2),
#                     round((case when sum(total_count_others_others) != 0 then sum(pending_count_others_others) / sum(total_count_others_others) else 0 end) *100,2),
#                     round((case when sum(total_count_others_night_inspection) != 0 then sum(total_count_others_night_inspection) / sum(total_count_others_night_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_others_surprise_inspection) != 0 then sum(total_count_others_surprise_inspection) / sum(total_count_others_surprise_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_others_drive_inspection) != 0 then sum(total_count_others_drive_inspection) / sum(total_count_others_drive_inspection) else 0 end) *100,2)
#                     from view_inspection_analysis_table3 where location_type in %s  and location_code in %s and inspected_on between %s and %s
#                     and designation_code in %s and department in %s;''',[tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData])
#                 thirdRowData = cursor.fetchall()
#                 thirdRowData = [list([x if x != None else 0 for x in thirdRowData[0] ])]


#             else:
#                 cursor.execute('''select sum(total_count_others)::int,sum(pending_count_others)::int,sum(pending_overdue_count_others)::int,
#                     sum(total_count_passenger_safety)::int,sum(pending_count_passenger_safety)::int,sum(pending_overdue_count_passenger_safety)::int,
#                     sum(total_count_employee_safety)::int,sum(pending_count_employee_safety)::int,sum(pending_overdue_count_employee_safety)::int
#                     from inspection_analysis_table1 where fin_year=%s and location_type in %s  and location_code in %s;''',[prevFinYear,tuple(irTypeValData),allLocationCodeData])
#                 firstPrevFinYear = cursor.fetchall()
#                 count_list1 =[]
#                 count_list2 =[]
#                 count_list3 =[]
#                 if len(firstPrevFinYear)>0:
#                     firstPrevFinYear = [list([x if x != None else 0 for x in firstPrevFinYear[0] ])]
#                     count_list3.append([firstPrevFinYear[0][0],firstPrevFinYear[0][1],firstPrevFinYear[0][2]])
#                     count_list1.append([firstPrevFinYear[0][3],firstPrevFinYear[0][4],firstPrevFinYear[0][5]])
#                     count_list2.append([firstPrevFinYear[0][6],firstPrevFinYear[0][7],firstPrevFinYear[0][8]])
#                 else:
#                     count_list1.append([0,0,0])
#                     count_list2.append([0,0,0])
#                     count_list3.append([0,0,0])
#                 cursor.execute('''select sum(total_count_others)::int,sum(pending_count_others)::int,sum(pending_overdue_count_others)::int,
#                     sum(total_count_passenger_safety)::int,sum(pending_count_passenger_safety)::int,sum(pending_overdue_count_passenger_safety)::int,
#                     sum(total_count_employee_safety)::int,sum(pending_count_employee_safety)::int,sum(pending_overdue_count_employee_safety)::int
#                     from inspection_analysis_table1 where fin_year=%s and location_type in %s  and location_code in %s;''',[curFinYear,tuple(irTypeValData),allLocationCodeData])
#                 firstCurFinYear = cursor.fetchall()
                
#                 if len(firstCurFinYear)>0:
#                     firstCurFinYear = [list([x if x != None else 0 for x in firstCurFinYear[0] ])]
#                     count_list3.append([firstCurFinYear[0][0],firstCurFinYear[0][1],firstCurFinYear[0][2]])
#                     count_list1.append([firstCurFinYear[0][3],firstCurFinYear[0][4],firstCurFinYear[0][5]])
#                     count_list2.append([firstCurFinYear[0][6],firstCurFinYear[0][7],firstCurFinYear[0][8]])
#                 else:
#                     count_list1.append([0,0,0])
#                     count_list2.append([0,0,0])
#                     count_list3.append([0,0,0])

#                 cursor.execute('''select sum(total_count_others)::int,sum(pending_count_others)::int,sum(pending_overdue_count_others)::int,
#                         round((case when sum(total_count_others) != 0 then sum(pending_count_others) / sum(total_count_others) else 0 end) *100,2),
#                         round((case when sum(total_count_others) != 0 then sum(pending_overdue_count_others) / sum(total_count_others) else 0 end) *100,2),
#                         sum(last_one_days_count_others)::int,sum(last_two_days_count_others)::int,sum(last_three_days_count_others)::int,
#                         sum(last_four_days_count_others)::int,sum(last_five_days_count_others)::int,			
#                         sum(total_count_passenger_safety)::int,sum(pending_count_passenger_safety)::int,sum(pending_overdue_count_passenger_safety)::int,
#                         round((case when sum(total_count_passenger_safety) != 0 then sum(pending_count_passenger_safety) / sum(total_count_passenger_safety) else 0 end) *100,2),
#                         round((case when sum(total_count_passenger_safety) != 0 then sum(pending_overdue_count_passenger_safety) / sum(total_count_passenger_safety) else 0 end) *100,2),
#                         sum(last_one_days_count_passenger_safety)::int,sum(last_two_days_count_passenger_safety)::int,sum(last_three_days_count_passenger_safety)::int,
#                         sum(last_four_days_count_passenger_safety)::int,sum(last_five_days_count_passenger_safety)::int,
#                         sum(total_count_employee_safety)::int,sum(pending_count_employee_safety)::int,sum(pending_overdue_count_employee_safety)::int,
#                         round((case when sum(total_count_employee_safety) != 0 then sum(pending_count_employee_safety) / sum(total_count_employee_safety) else 0 end) *100,2),
#                         round((case when sum(total_count_employee_safety) != 0 then sum(pending_overdue_count_employee_safety) / sum(total_count_employee_safety) else 0 end) *100,2),
#                         sum(last_one_days_count_employee_safety)::int,sum(last_two_days_count_employee_safety)::int,sum(last_three_days_count_employee_safety)::int,
#                         sum(last_four_days_count_employee_safety)::int,sum(last_five_days_count_employee_safety)::int
#                         from inspection_analysis_table1 where location_type in %s  and location_code in %s;''',[tuple(irTypeValData),allLocationCodeData])
#                 firstRowAllData = cursor.fetchall()
                
#                 firstRowAllData = [list([x if x != None else 0 for x in firstRowAllData[0] ])]
                



#                 cursor.execute('''select sum(total_count_night_inspection)::int,sum(pending_count_night_inspection)::int,sum(pending_overdue_count_night_inspection)::int,
#                     sum(total_count_surprise_inspection)::int,sum(pending_count_surprise_inspection)::int,sum(pending_overdue_count_surprise_inspection)::int,
#                     sum(total_count_drive_based_inspection)::int,sum(pending_count_drive_based_inspection)::int,sum(pending_overdue_percentage_drive_based_inspection)::int
#                     from inspection_analysis_table2 where fin_year=%s and location_type in %s  and location_code in %s;''',[prevFinYear,tuple(irTypeValData),allLocationCodeData])
#                 secondPrevFinYear = cursor.fetchall()
#                 count_list4 =[]
#                 count_list5 =[]
#                 count_list6 =[]
#                 if len(secondPrevFinYear)>0:
#                     secondPrevFinYear = [list([x if x != None else 0 for x in secondPrevFinYear[0] ])]
#                     count_list4.append([secondPrevFinYear[0][0],secondPrevFinYear[0][1],secondPrevFinYear[0][2]])
#                     count_list5.append([secondPrevFinYear[0][3],secondPrevFinYear[0][4],secondPrevFinYear[0][5]])
#                     count_list6.append([secondPrevFinYear[0][6],secondPrevFinYear[0][7],secondPrevFinYear[0][8]])
#                 else:
#                     count_list4.append([0,0,0])
#                     count_list5.append([0,0,0])
#                     count_list6.append([0,0,0])
#                 cursor.execute('''select sum(total_count_night_inspection)::int,sum(pending_count_night_inspection)::int,sum(pending_overdue_count_night_inspection)::int,
#                     sum(total_count_surprise_inspection)::int,sum(pending_count_surprise_inspection)::int,sum(pending_overdue_count_surprise_inspection)::int,
#                     sum(total_count_drive_based_inspection)::int,sum(pending_count_drive_based_inspection)::int,sum(pending_overdue_percentage_drive_based_inspection)::int
#                     from inspection_analysis_table2 where fin_year=%s and location_type in %s  and location_code in %s;''',[curFinYear,tuple(irTypeValData),allLocationCodeData])
#                 secondCurFinYear = cursor.fetchall()
                
#                 if len(secondCurFinYear)>0:
#                     secondCurFinYear = [list([x if x != None else 0 for x in secondCurFinYear[0] ])]
#                     count_list4.append([secondCurFinYear[0][0],secondCurFinYear[0][1],secondCurFinYear[0][2]])
#                     count_list5.append([secondCurFinYear[0][3],secondCurFinYear[0][4],secondCurFinYear[0][5]])
#                     count_list6.append([secondCurFinYear[0][6],secondCurFinYear[0][7],secondCurFinYear[0][8]])
#                 else:
#                     count_list4.append([0,0,0])
#                     count_list5.append([0,0,0])
#                     count_list6.append([0,0,0])

#                 cursor.execute('''select sum(total_count_night_inspection)::int,sum(pending_count_night_inspection)::int,sum(pending_overdue_count_night_inspection)::int,
#                     round((case when sum(total_count_night_inspection) != 0 then sum(pending_count_night_inspection) / sum(total_count_night_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_night_inspection) != 0 then sum(pending_count_night_inspection) / sum(total_count_night_inspection) else 0 end) *100,2),
#                     sum(last_one_days_count_night_inspection)::int,sum(last_two_days_count_night_inspection)::int,sum(last_three_days_count_night_inspection)::int,
#                     sum(last_four_days_count_night_inspection)::int,sum(last_five_days_count_night_inspection)::int,	
#                     sum(total_count_surprise_inspection)::int,sum(pending_count_surprise_inspection)::int,sum(pending_overdue_count_surprise_inspection)::int,
#                     round((case when sum(total_count_surprise_inspection) != 0 then sum(pending_count_surprise_inspection) / sum(total_count_surprise_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_surprise_inspection) != 0 then sum(pending_overdue_count_surprise_inspection) / sum(total_count_surprise_inspection) else 0 end) *100,2),
#                     sum(last_one_days_count_surprise_inspection)::int,sum(last_two_days_count_surprise_inspection)::int,sum(last_three_days_count_surprise_inspection)::int,
#                     sum(last_four_days_count_surprise_inspection)::int,sum(last_five_days_count_surprise_inspection)::int,
#                     sum(total_count_drive_based_inspection)::int,sum(pending_count_drive_based_inspection)::int,sum(pending_overdue_percentage_drive_based_inspection)::int,
#                     round((case when sum(total_count_drive_based_inspection) != 0 then sum(pending_overdue_percentage_drive_based_inspection) / sum(total_count_drive_based_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_drive_based_inspection) != 0 then sum(pending_overdue_percentage_drive_based_inspection) / sum(total_count_drive_based_inspection) else 0 end) *100,2),
#                     sum(last_one_days_count_drive_based_inspection)::int,sum(last_two_days_count_drive_based_inspection)::int,sum(last_three_days_count_drive_based_inspection)::int,
#                     sum(last_four_days_count_drive_based_inspection)::int,sum(last_five_days_count_drive_based_inspection)::int
#                     from inspection_analysis_table2 where location_type in %s  and location_code in %s;''',[tuple(irTypeValData),allLocationCodeData])
#                 secondRowAllData = cursor.fetchall()
#                 secondRowAllData = [list([x if x != None else 0 for x in secondRowAllData[0] ])]
#                 #########   forth row card(pendency)

#                 cursor.execute('''select sum(count_7_days_passenger_safety),sum(count_30_days_passenger_safety),sum(count_90_days_passenger_safety),
#                     sum(count_180_days_passenger_safety),sum(count_365_days_passenger_safety),
#                     sum(count_7_days_employee_safety),sum(count_30_days_employee_safety),sum(count_90_days_employee_safety),
#                     sum(count_180_days_employee_safety),sum(count_365_days_employee_safety),
#                     sum(count_7_days_others),sum(count_30_days_others),sum(count_90_days_others),
#                     sum(count_180_days_others),sum(count_365_days_others)
#                     from inspection_pendency_analysis_table1 where location_type in %s  and location_code in %s;''',[tuple(irTypeValData),allLocationCodeData])
#                 pendencyDataCard1 = cursor.fetchall()
#                 pendencyDataCard1 = [list([x if x != None else 0 for x in pendencyDataCard1[0] ])]

#                 cursor.execute('''select sum(count_7_days_night_inspection),sum(count_30_days_night_inspection),sum(count_90_days_night_inspection),
#                     sum(count_180_days_night_inspection),sum(count_365_days_night_inspection),
#                     sum(count_7_days_surprise_inspection),sum(count_30_days_surprise_inspection),sum(count_90_days_surprise_inspection),
#                     sum(count_180_days_surprise_inspection),sum(count_365_days_surprise_inspection),
#                     sum(count_7_days_drive_based_inspection),sum(count_30_days_drive_based_inspection),sum(count_90_days_drive_based_inspection),
#                     sum(count_180_days_drive_based_inspection),sum(count_365_days_drive_based_inspection),
#                     sum(count_7_days_regular_inspection),sum(count_30_days_regular_inspection),sum(count_90_days_regular_inspection),
#                     sum(count_180_days_regular_inspection),sum(count_365_days_regular_inspection)
#                     from inspection_pendency_analysis_table2 where location_type in %s  and location_code in %s;''',[tuple(irTypeValData),allLocationCodeData])
#                 pendencyDataCard2 = cursor.fetchall()
#                 pendencyDataCard2 = [list([x if x != None else 0 for x in pendencyDataCard2[0] ])]


#                 cursor.execute('''select  sum(total_count_station_passenger_safety),sum(total_count_station_employee_safety),sum(total_count_station_others),
#                     sum(total_count_station_night_inspection),sum(total_count_station_surprise_inspection),sum(total_count_station_drive_inspection),
#                     sum(total_count_section_passenger_safety),sum(total_count_section_employee_safety),sum(total_count_section_others),
#                     sum(total_count_section_night_inspection),sum(total_count_section_surprise_inspection),sum(total_count_section_drive_inspection),
#                     sum(total_count_train_passenger_safety),sum(total_count_train_employee_safety),sum(total_count_train_others),
#                     sum(total_count_train_night_inspection),sum(total_count_train_surprise_inspection),sum(total_count_train_drive_inspection),
#                     sum(total_count_others_passenger_safety),sum(total_count_others_employee_safety),sum(total_count_others_others),
#                     sum(total_count_others_night_inspection),sum(total_count_others_surprise_inspection),sum(total_count_others_drive_inspection),
#                     round((case when sum(total_count_station_passenger_safety) != 0 then sum(pending_count_station_passenger_safety) / sum(total_count_station_passenger_safety) else 0 end) *100,2),
#                     round((case when sum(total_count_station_employee_safety) != 0 then sum(pending_count_station_employee_safety) / sum(total_count_station_employee_safety) else 0 end) *100,2),
#                     round((case when sum(total_count_station_others) != 0 then sum(pending_count_station_others) / sum(total_count_station_others) else 0 end) *100,2),
#                     round((case when sum(total_count_station_night_inspection) != 0 then sum(pending_count_station_night_inspection) / sum(total_count_station_night_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_station_surprise_inspection) != 0 then sum(pending_count_station_surprise_inspection) / sum(total_count_station_surprise_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_station_drive_inspection) != 0 then sum(pending_count_station_drive_inspection) / sum(total_count_station_drive_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_section_passenger_safety) != 0 then sum(pending_count_section_passenger_safety) / sum(total_count_section_passenger_safety) else 0 end) *100,2),
#                     round((case when sum(total_count_section_employee_safety) != 0 then sum(pending_count_section_employee_safety) / sum(total_count_section_employee_safety) else 0 end) *100,2),
#                     round((case when sum(total_count_section_others) != 0 then sum(pending_count_section_others) / sum(total_count_section_others) else 0 end) *100,2),
#                     round((case when sum(total_count_section_night_inspection) != 0 then sum(pending_count_section_night_inspection) / sum(total_count_section_night_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_section_surprise_inspection) != 0 then sum(pending_count_section_surprise_inspection) / sum(total_count_section_surprise_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_section_drive_inspection) != 0 then sum(pending_count_section_drive_inspection) / sum(total_count_section_drive_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_train_passenger_safety) != 0 then sum(pending_count_train_passenger_safety) / sum(total_count_train_passenger_safety) else 0 end) *100,2),
#                     round((case when sum(total_count_train_employee_safety) != 0 then sum(pending_count_train_employee_safety) / sum(total_count_train_employee_safety) else 0 end) *100,2),
#                     round((case when sum(total_count_train_others) != 0 then sum(pending_count_train_others) / sum(total_count_train_others) else 0 end) *100,2),
#                     round((case when sum(total_count_train_night_inspection) != 0 then sum(pending_count_train_night_inspection) / sum(total_count_train_night_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_train_surprise_inspection) != 0 then sum(pending_count_train_surprise_inspection) / sum(total_count_train_surprise_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_train_drive_inspection) != 0 then sum(pending_count_train_drive_inspection) / sum(total_count_train_drive_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_others_passenger_safety) != 0 then sum(pending_count_others_passenger_safety) / sum(total_count_others_passenger_safety) else 0 end) *100,2),
#                     round((case when sum(total_count_others_employee_safety) != 0 then sum(pending_count_others_employee_safety) / sum(total_count_others_employee_safety) else 0 end) *100,2),
#                     round((case when sum(total_count_others_others) != 0 then sum(pending_count_others_others) / sum(total_count_others_others) else 0 end) *100,2),
#                     round((case when sum(total_count_others_night_inspection) != 0 then sum(total_count_others_night_inspection) / sum(total_count_others_night_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_others_surprise_inspection) != 0 then sum(total_count_others_surprise_inspection) / sum(total_count_others_surprise_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_others_drive_inspection) != 0 then sum(total_count_others_drive_inspection) / sum(total_count_others_drive_inspection) else 0 end) *100,2)
#                     from inspection_analysis_table3 where location_type in %s  and location_code in %s;''',[tuple(irTypeValData),allLocationCodeData])
#                 thirdRowData = cursor.fetchall()
#                 thirdRowData = [list([x if x != None else 0 for x in thirdRowData[0] ])]
#             cursor.close()
        
            
#     for i in range(len(allDesignation)):
#         d_level = allDesignation[i]['d_level']
#         if d_level != None:
#             catData = list(models.category.objects.filter(category=d_level).values('hierarchy_level'))
#             if len(catData)>0:
#                 if catData[0]['hierarchy_level'] != None:
#                     allDesignation[i].update({'level':int(catData[0]['hierarchy_level'])})
#                 else:
#                     allDesignation[i].update({'level':1000})
#             else:
#                 allDesignation[i].update({'level':1000})
#         else:
#             allDesignation[i].update({'level':1000})
#     allDesignation = sorted(allDesignation, key = lambda x: (x['level'],x['designation']))           


#     query = "SELECT fin_year, SUM(pending_count_passenger_safety) AS total_pending_count FROM public.inspection_analysis_table1 WHERE fin_year = '2023-24' GROUP BY fin_year;"
#     with connection.cursor() as cursor:
#         cursor.execute(query)
#         final_p = cursor.fetchall()
#         after_p = final_p[0][1]
#         print(after_p,'after_p')
   
#     query = "SELECT fin_year, SUM(pending_count_passenger_safety) AS total_pending_count FROM public.inspection_analysis_table1 WHERE fin_year = '2022-23' GROUP BY fin_year;"
#     with connection.cursor() as cursor:
#         cursor.execute(query)
#         initial_p = cursor.fetchall()
#         prev_p = initial_p[0][1]
#         print(prev_p,'prev_p')

#     query = "SELECT fin_year, SUM(pending_count_employee_safety) AS total_pending_count FROM public.inspection_analysis_table1 WHERE fin_year = '2023-24' GROUP BY fin_year;"
#     with connection.cursor() as cursor:
#         cursor.execute(query)
#         final_e = cursor.fetchall()
#         after_e = final_e[0][1]
#         print(after_e,'after_e')
   
#     query = "SELECT fin_year, SUM(pending_count_employee_safety) AS total_pending_count FROM public.inspection_analysis_table1 WHERE fin_year = '2022-23' GROUP BY fin_year;"
#     with connection.cursor() as cursor:
#         cursor.execute(query)
#         initial_e = cursor.fetchall()
#         prev_e = initial_e[0][1]
#         print(prev_e,'prev_e')


#     query = "SELECT fin_year, SUM(pending_count_others) AS total_pending_count FROM public.inspection_analysis_table1 WHERE fin_year = '2023-24' GROUP BY fin_year;"
#     with connection.cursor() as cursor:
#         cursor.execute(query)
#         final_o = cursor.fetchall()
#         after_o = final_o[0][1]
#         print(after_o,'after_o')
   
#     query = "SELECT fin_year, SUM(pending_count_others) AS total_pending_count FROM public.inspection_analysis_table1 WHERE fin_year = '2022-23' GROUP BY fin_year;"
#     with connection.cursor() as cursor:
#         cursor.execute(query)
#         initial_o = cursor.fetchall()
#         prev_o = initial_e[0][1]
#         print(prev_o,'prev_o')



#     query = "SELECT fin_year, SUM(pending_count_night_inspection) AS total_pending_count FROM public.inspection_analysis_table2 WHERE fin_year = '2023-24' GROUP BY fin_year;"
#     with connection.cursor() as cursor:
#         cursor.execute(query)
#         final = cursor.fetchall()
#         after = final[0][1]
#         print(after,'after')
   
#     query = "SELECT fin_year, SUM(pending_count_night_inspection) AS total_pending_count FROM public.inspection_analysis_table2 WHERE fin_year = '2022-23' GROUP BY fin_year;"
#     with connection.cursor() as cursor:
#         cursor.execute(query)
#         initial = cursor.fetchall()
#         prev = initial[0][1]
#         print(prev,'prev')


#     query = "SELECT fin_year, SUM(pending_count_surprise_inspection) AS total_pending_count FROM public.inspection_analysis_table2 WHERE fin_year = '2023-24' GROUP BY fin_year;"
#     with connection.cursor() as cursor:
#         cursor.execute(query)
#         final_s = cursor.fetchall()
#         after_s = final_s[0][1]
#         print(after_s,'after_s')
   
#     query = "SELECT fin_year, SUM(pending_count_surprise_inspection) AS total_pending_count FROM public.inspection_analysis_table2 WHERE fin_year = '2022-23' GROUP BY fin_year;"
#     with connection.cursor() as cursor:
#         cursor.execute(query)
#         initial_s = cursor.fetchall()
#         prev_s = initial_s[0][1]
#         print(prev_s,'prev_s')
   
#         query = "SELECT fin_year, SUM(pending_count_drive_based_inspection) AS total_pending_count FROM public.inspection_analysis_table2 WHERE fin_year = '2023-24' GROUP BY fin_year;"
#     with connection.cursor() as cursor:
#         cursor.execute(query)
#         final_d = cursor.fetchall()
#         after_d = final_d[0][1]
#         print(after_d,'after_d')
   
#     query = "SELECT fin_year, SUM(pending_count_drive_based_inspection) AS total_pending_count FROM public.inspection_analysis_table2 WHERE fin_year = '2022-23' GROUP BY fin_year;"
#     with connection.cursor() as cursor:
#         cursor.execute(query)
#         initial_d = cursor.fetchall()
#         prev_d = initial_d[0][1]
#         print(prev_d,'prev_d')

#     query2 = "SELECT SUM(total_count_passenger_safety + total_count_employee_safety + total_count_others) AS total_sum FROM public.inspection_analysis_table1;"
#     with connection.cursor() as cursor:
#         cursor.execute(query2)
#         total_overall1 = cursor.fetchall()
#         total_overall1 = int(total_overall1[0][0])
#         print(total_overall1)

#     query2 = "SELECT SUM(pending_count_passenger_safety + pending_count_employee_safety + pending_count_others) AS total_pending FROM public.inspection_analysis_table1;"
#     with connection.cursor() as cursor:
#         cursor.execute(query2)
#         pending_overall1 = cursor.fetchall()
#         pending_overall1 = int(pending_overall1[0][0])
#         print(pending_overall1)

#     query2 = "SELECT SUM(pending_overdue_count_passenger_safety + pending_overdue_count_employee_safety + pending_overdue_count_others) AS total_overdue FROM public.inspection_analysis_table1;"
#     with connection.cursor() as cursor:
#         cursor.execute(query2)
#         overdue_overall1 = cursor.fetchall()
#         overdue_overall1 = int(overdue_overall1[0][0])
#         print(overdue_overall1)

#     context = {
#         'allDepartment':allDepartment,
#         'allDesignation':allDesignation,
#         'allFinYear':json.dumps([prevFinYear,curFinYear]),
#         'daysArray':daysArray,
#         'count_list1':json.dumps(count_list1),
#         'count_list2':json.dumps(count_list2),
#         'count_list3':json.dumps(count_list3),
#         'count_list4':json.dumps(count_list4),
#         'count_list5':json.dumps(count_list5),
#         'count_list6':json.dumps(count_list6),
#         'firstRowAllData':firstRowAllData,
#         'secondRowAllData':secondRowAllData,
#         'pendencyDataCard1':pendencyDataCard1,
#         'pendencyDataCard2':pendencyDataCard2,
#         'thirdRowData':thirdRowData,
#         'irTypeVal':irTypeVal,
#         'irDetailsVal':irDetailsVal,
#         'irMapVal':irMapVal,
#         'irPathVal1':irPathVal1,
#         'irPathVal2':irPathVal2,
#         'dataZoneWs':dataZoneWs,

#         'irSearchDept':irSearchDept,
#         'irSearchDate':irSearchDate,
#         'irSearchDesig':irSearchDesig,

#         'final':final,'after':after,'initial':initial,'prev':prev,
#         'final_s':final_s,'after_s':after_s,'initial_s':initial_s,'prev_s':prev_s,
#         'final_d':final_d,'after_d':after_d,'initial_d':initial_d,'prev_d':prev_d,
#         'final_p':final_p,'after_p':after_p,'initial_p':initial_p,'prev_p':prev_p,
#         'final_e':final_e,'after_e':after_e,'initial_e':initial_e,'prev_e':prev_e,
#         'final_o':final_o,'after_o':after_o,'initial_o':initial_o,'prev_o':prev_o,
#         'total_overall1':total_overall1,
#         'pending_overall1':pending_overall1,
#         'overdue_overall1':overdue_overall1,

#     }
#     return render(request,'svgtemplate.html',context)
      
# def inspectionDetailsMap(request):
#     N_DAYS_AGO = 5
#     today = datetime.now()    
#     n_days_ago = today - timedelta(days=N_DAYS_AGO)
#     daysArray=[]
#     for i in range(5):
#         daysArray.append((n_days_ago + timedelta(days=i)).strftime('%d/%m'))
#     daysArray = list(reversed(daysArray))
#     finYearCombined = finYear().split('-')
#     curFinYear = finYearCombined[0]+'-'+(finYearCombined[1])[2:]
#     prevFinYear = str(int(finYearCombined[0])-1)+'-'+(finYearCombined[0])[2:]

#     if request.method == "POST" and request.is_ajax():
#         typ = request.POST.get('typ')  
        
#         if typ == 'DesignationDetails':

#             dept = request.POST.get('dept')
#             if(dept == 'All'):
#                 irTypeVal = request.POST.get('irType')   
#                 irPath2 = request.POST.get('irPath2')
#                 irDetailsVal = request.POST.get('irDetails')
               
#                 if irTypeVal == 'ZR':   
#                     irTypeValData = ['ZR','DIV','WS']
                
#                 elif irTypeVal == 'HQ':
#                     irTypeValData = ['ZR']
#                 else:
#                     irTypeValData = [irTypeVal]
#                 if irDetailsVal == 'All':
#                     allDesignation = list(models.Level_Desig.objects.filter(rly_unit__in = models.railwayLocationMaster.objects.filter(location_type__in = irTypeValData).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('designation'))
#                 else:
#                     allDesignation = list(models.Level_Desig.objects.filter(rly_unit__in = models.railwayLocationMaster.objects.filter(Q(location_code=irDetailsVal) | Q(parent_location_code=irDetailsVal),location_type__in = irTypeValData).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('designation'))
#                 if irPath2 != '':
#                     allDesignation = list(models.Level_Desig.objects.filter(rly_unit__in = models.railwayLocationMaster.objects.filter(Q(location_code=irPath2),location_type__in = irTypeValData).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('designation'))

#             else:
#                 irTypeVal = request.POST.get('irType')   
#                 irPath2 = request.POST.get('irPath2')
#                 irDetailsVal = request.POST.get('irDetails')
                
#                 if irTypeVal == 'ZR':   
#                     irTypeValData = ['ZR','DIV','WS']
                
#                 elif irTypeVal == 'HQ':
#                     irTypeValData = ['ZR']
#                 else:
#                     irTypeValData = [irTypeVal]
#                 if irDetailsVal == 'All':
#                     allDesignation = list(models.Level_Desig.objects.filter(department_code=dept,rly_unit__in = models.railwayLocationMaster.objects.filter(location_type__in = irTypeValData).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('designation'))
#                 else:
#                     allDesignation = list(models.Level_Desig.objects.filter(department_code=dept,rly_unit__in = models.railwayLocationMaster.objects.filter(Q(location_code=irDetailsVal) | Q(parent_location_code=irDetailsVal),location_type__in = irTypeValData).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('designation'))
#                 if irPath2 != '':
#                     allDesignation = list(models.Level_Desig.objects.filter(department_code=dept,rly_unit__in = models.railwayLocationMaster.objects.filter(Q(location_code=irPath2),location_type__in = irTypeValData).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('designation'))




#             for i in range(len(allDesignation)):
#                 d_level = allDesignation[i]['d_level']
#                 if d_level != None:
#                     catData = list(models.category.objects.filter(category=d_level).values('hierarchy_level'))
#                     if len(catData)>0:
#                         if catData[0]['hierarchy_level'] != None:
#                             allDesignation[i].update({'level':int(catData[0]['hierarchy_level'])})
#                         else:
#                             allDesignation[i].update({'level':1000})
#                     else:
#                         allDesignation[i].update({'level':1000})
#                 else:
#                     allDesignation[i].update({'level':1000})
#             allDesignation = sorted(allDesignation, key = lambda x: (x['level'],x['designation']))    
            
            
            
            
#             return JsonResponse(allDesignation, safe = False)
        
#     allDesignation = list(models.Level_Desig.objects.filter(rly_unit__in = models.railwayLocationMaster.objects.filter(location_type__in=['DIV','RB','ZR','PU','WS']).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('designation'))
#     allDepartment = list(models.departMast.objects.values('department_name','department_code').distinct().order_by('department_name'))


    
#     if request.method == "GET":
#         cursor = connection.cursor()
#         cursor.execute('''select sum(total_count_others)::int,sum(pending_count_others)::int,sum(pending_overdue_count_others)::int,
#             sum(total_count_passenger_safety)::int,sum(pending_count_passenger_safety)::int,sum(pending_overdue_count_passenger_safety)::int,
#             sum(total_count_employee_safety)::int,sum(pending_count_employee_safety)::int,sum(pending_overdue_count_employee_safety)::int
#             from inspection_analysis_table1 where fin_year=%s;''',[prevFinYear])
#         firstPrevFinYear = cursor.fetchall()
#         count_list1 =[]
#         count_list2 =[]
#         count_list3 =[]
#         if len(firstPrevFinYear)>0:
#             firstPrevFinYear = [list([x if x != None else 0 for x in firstPrevFinYear[0]])]
#             count_list3.append([firstPrevFinYear[0][0]-firstPrevFinYear[0][1],firstPrevFinYear[0][1],firstPrevFinYear[0][2]])
#             count_list1.append([firstPrevFinYear[0][3]-firstPrevFinYear[0][4],firstPrevFinYear[0][4],firstPrevFinYear[0][5]])
#             count_list2.append([firstPrevFinYear[0][6]-firstPrevFinYear[0][7],firstPrevFinYear[0][7],firstPrevFinYear[0][8]])
#         else:
#             count_list1.append([0,0,0])
#             count_list2.append([0,0,0])
#             count_list3.append([0,0,0])
        
#         cursor.execute('''select sum(total_count_others)::int,sum(pending_count_others)::int,sum(pending_overdue_count_others)::int,
#             sum(total_count_passenger_safety)::int,sum(pending_count_passenger_safety)::int,sum(pending_overdue_count_passenger_safety)::int,
#             sum(total_count_employee_safety)::int,sum(pending_count_employee_safety)::int,sum(pending_overdue_count_employee_safety)::int
#             from inspection_analysis_table1 where fin_year=%s;''',[curFinYear])
#         firstCurFinYear = cursor.fetchall()
        
#         if len(firstCurFinYear)>0:
#             firstCurFinYear = [list([x if x != None else 0 for x in firstCurFinYear[0]])]
#             count_list3.append([firstCurFinYear[0][0]-firstCurFinYear[0][1],firstCurFinYear[0][1],firstCurFinYear[0][2]])
#             count_list1.append([firstCurFinYear[0][3]-firstCurFinYear[0][4],firstCurFinYear[0][4],firstCurFinYear[0][5]])
#             count_list2.append([firstCurFinYear[0][6]-firstCurFinYear[0][7],firstCurFinYear[0][7],firstCurFinYear[0][8]])
#         else:
#             count_list1.append([0,0,0])
#             count_list2.append([0,0,0])
#             count_list3.append([0,0,0])

        

#         cursor.execute('''select sum(total_count_others)::int,sum(pending_count_others)::int,sum(pending_overdue_count_others)::int,
#                 round((case when sum(total_count_others) != 0 then sum(pending_count_others) / sum(total_count_others) else 0 end) *100,2),
#                 round((case when sum(total_count_others) != 0 then sum(pending_overdue_count_others) / sum(total_count_others) else 0 end) *100,2),
#                 sum(last_one_days_count_others)::int,sum(last_two_days_count_others)::int,sum(last_three_days_count_others)::int,
#                 sum(last_four_days_count_others)::int,sum(last_five_days_count_others)::int,			
#                 sum(total_count_passenger_safety)::int,sum(pending_count_passenger_safety)::int,sum(pending_overdue_count_passenger_safety)::int,
#                 round((case when sum(total_count_passenger_safety) != 0 then sum(pending_count_passenger_safety) / sum(total_count_passenger_safety) else 0 end) *100,2),
#                 round((case when sum(total_count_passenger_safety) != 0 then sum(pending_overdue_count_passenger_safety) / sum(total_count_passenger_safety) else 0 end) *100,2),
#                 sum(last_one_days_count_passenger_safety)::int,sum(last_two_days_count_passenger_safety)::int,sum(last_three_days_count_passenger_safety)::int,
#                 sum(last_four_days_count_passenger_safety)::int,sum(last_five_days_count_passenger_safety)::int,
#                 sum(total_count_employee_safety)::int,sum(pending_count_employee_safety)::int,sum(pending_overdue_count_employee_safety)::int,
#                 round((case when sum(total_count_employee_safety) != 0 then sum(pending_count_employee_safety) / sum(total_count_employee_safety) else 0 end) *100,2),
#                 round((case when sum(total_count_employee_safety) != 0 then sum(pending_overdue_count_employee_safety) / sum(total_count_employee_safety) else 0 end) *100,2),
#                 sum(last_one_days_count_employee_safety)::int,sum(last_two_days_count_employee_safety)::int,sum(last_three_days_count_employee_safety)::int,
#                 sum(last_four_days_count_employee_safety)::int,sum(last_five_days_count_employee_safety)::int
#                 from inspection_analysis_table1;''')
#         firstRowAllData = cursor.fetchall()


#         cursor.execute('''select sum(total_count_night_inspection)::int,sum(pending_count_night_inspection)::int,sum(pending_overdue_count_night_inspection)::int,
#             sum(total_count_surprise_inspection)::int,sum(pending_count_surprise_inspection)::int,sum(pending_overdue_count_surprise_inspection)::int,
#             sum(total_count_drive_based_inspection)::int,sum(pending_count_drive_based_inspection)::int,sum(pending_overdue_percentage_drive_based_inspection)::int
#             from inspection_analysis_table2 where fin_year=%s;''',[prevFinYear])
#         secondPrevFinYear = cursor.fetchall()
#         count_list4 =[]
#         count_list5 =[]
#         count_list6 =[]
#         if len(secondPrevFinYear)>0:
#             secondPrevFinYear = [list([x if x != None else 0 for x in secondPrevFinYear[0]])]
#             count_list4.append([secondPrevFinYear[0][0]-secondPrevFinYear[0][1],secondPrevFinYear[0][1],secondPrevFinYear[0][2]])
#             count_list5.append([secondPrevFinYear[0][3]-secondPrevFinYear[0][4],secondPrevFinYear[0][4],secondPrevFinYear[0][5]])
#             count_list6.append([secondPrevFinYear[0][6]-secondPrevFinYear[0][7],secondPrevFinYear[0][7],secondPrevFinYear[0][8]])
#         else:
#             count_list4.append([0,0,0])
#             count_list5.append([0,0,0])
#             count_list6.append([0,0,0])
#         cursor.execute('''select sum(total_count_night_inspection)::int,sum(pending_count_night_inspection)::int,sum(pending_overdue_count_night_inspection)::int,
#             sum(total_count_surprise_inspection)::int,sum(pending_count_surprise_inspection)::int,sum(pending_overdue_count_surprise_inspection)::int,
#             sum(total_count_drive_based_inspection)::int,sum(pending_count_drive_based_inspection)::int,sum(pending_overdue_percentage_drive_based_inspection)::int
#             from inspection_analysis_table2 where fin_year=%s;''',[curFinYear])
#         secondCurFinYear = cursor.fetchall()
        
#         if len(secondCurFinYear)>0:
#             secondCurFinYear = [list([x if x != None else 0 for x in secondCurFinYear[0]])]
#             count_list4.append([secondCurFinYear[0][0]-secondCurFinYear[0][1],secondCurFinYear[0][1],secondCurFinYear[0][2]])
#             count_list5.append([secondCurFinYear[0][3]-secondCurFinYear[0][4],secondCurFinYear[0][4],secondCurFinYear[0][5]])
#             count_list6.append([secondCurFinYear[0][6]-secondCurFinYear[0][7],secondCurFinYear[0][7],secondCurFinYear[0][8]])
#         else:
#             count_list4.append([0,0,0])
#             count_list5.append([0,0,0])
#             count_list6.append([0,0,0])

        

#         cursor.execute('''select sum(total_count_night_inspection)::int,sum(pending_count_night_inspection)::int,sum(pending_overdue_count_night_inspection)::int,
#             round((case when sum(total_count_night_inspection) != 0 then sum(pending_count_night_inspection) / sum(total_count_night_inspection) else 0 end) *100,2),
#             round((case when sum(total_count_night_inspection) != 0 then sum(pending_count_night_inspection) / sum(total_count_night_inspection) else 0 end) *100,2),
#             sum(last_one_days_count_night_inspection)::int,sum(last_two_days_count_night_inspection)::int,sum(last_three_days_count_night_inspection)::int,
#             sum(last_four_days_count_night_inspection)::int,sum(last_five_days_count_night_inspection)::int,	
#             sum(total_count_surprise_inspection)::int,sum(pending_count_surprise_inspection)::int,sum(pending_overdue_count_surprise_inspection)::int,
#             round((case when sum(total_count_surprise_inspection) != 0 then sum(pending_count_surprise_inspection) / sum(total_count_surprise_inspection) else 0 end) *100,2),
#             round((case when sum(total_count_surprise_inspection) != 0 then sum(pending_overdue_count_surprise_inspection) / sum(total_count_surprise_inspection) else 0 end) *100,2),
#             sum(last_one_days_count_surprise_inspection)::int,sum(last_two_days_count_surprise_inspection)::int,sum(last_three_days_count_surprise_inspection)::int,
#             sum(last_four_days_count_surprise_inspection)::int,sum(last_five_days_count_surprise_inspection)::int,
#             sum(total_count_drive_based_inspection)::int,sum(pending_count_drive_based_inspection)::int,sum(pending_overdue_percentage_drive_based_inspection)::int,
#             round((case when sum(total_count_drive_based_inspection) != 0 then sum(pending_overdue_percentage_drive_based_inspection) / sum(total_count_drive_based_inspection) else 0 end) *100,2),
#             round((case when sum(total_count_drive_based_inspection) != 0 then sum(pending_overdue_percentage_drive_based_inspection) / sum(total_count_drive_based_inspection) else 0 end) *100,2),
#             sum(last_one_days_count_drive_based_inspection)::int,sum(last_two_days_count_drive_based_inspection)::int,sum(last_three_days_count_drive_based_inspection)::int,
#             sum(last_four_days_count_drive_based_inspection)::int,sum(last_five_days_count_drive_based_inspection)::int
#             from inspection_analysis_table2;''')
#         secondRowAllData = cursor.fetchall()

#         #########   forth row card(pendency)

#         cursor.execute('''select sum(count_7_days_passenger_safety),sum(count_30_days_passenger_safety),sum(count_90_days_passenger_safety),
#             sum(count_180_days_passenger_safety),sum(count_365_days_passenger_safety),
#             sum(count_7_days_employee_safety),sum(count_30_days_employee_safety),sum(count_90_days_employee_safety),
#             sum(count_180_days_employee_safety),sum(count_365_days_employee_safety),
#             sum(count_7_days_others),sum(count_30_days_others),sum(count_90_days_others),
#             sum(count_180_days_others),sum(count_365_days_others)
#             from inspection_pendency_analysis_table1;''')
#         pendencyDataCard1 = cursor.fetchall()

#         cursor.execute('''select sum(count_7_days_night_inspection),sum(count_30_days_night_inspection),sum(count_90_days_night_inspection),
#             sum(count_180_days_night_inspection),sum(count_365_days_night_inspection),
#             sum(count_7_days_surprise_inspection),sum(count_30_days_surprise_inspection),sum(count_90_days_surprise_inspection),
#             sum(count_180_days_surprise_inspection),sum(count_365_days_surprise_inspection),
#             sum(count_7_days_drive_based_inspection),sum(count_30_days_drive_based_inspection),sum(count_90_days_drive_based_inspection),
#             sum(count_180_days_drive_based_inspection),sum(count_365_days_drive_based_inspection),
#             sum(count_7_days_regular_inspection),sum(count_30_days_regular_inspection),sum(count_90_days_regular_inspection),
#             sum(count_180_days_regular_inspection),sum(count_365_days_regular_inspection)
#             from inspection_pendency_analysis_table2;''')
#         pendencyDataCard2 = cursor.fetchall()


#         cursor.execute('''select  sum(total_count_station_passenger_safety),sum(total_count_station_employee_safety),sum(total_count_station_others),
#             sum(total_count_station_night_inspection),sum(total_count_station_surprise_inspection),sum(total_count_station_drive_inspection),
#             sum(total_count_section_passenger_safety),sum(total_count_section_employee_safety),sum(total_count_section_others),
#             sum(total_count_section_night_inspection),sum(total_count_section_surprise_inspection),sum(total_count_section_drive_inspection),
#             sum(total_count_train_passenger_safety),sum(total_count_train_employee_safety),sum(total_count_train_others),
#             sum(total_count_train_night_inspection),sum(total_count_train_surprise_inspection),sum(total_count_train_drive_inspection),
#             sum(total_count_others_passenger_safety),sum(total_count_others_employee_safety),sum(total_count_others_others),
#             sum(total_count_others_night_inspection),sum(total_count_others_surprise_inspection),sum(total_count_others_drive_inspection),
#             round((case when sum(total_count_station_passenger_safety) != 0 then sum(pending_count_station_passenger_safety) / sum(total_count_station_passenger_safety) else 0 end) *100,2),
#             round((case when sum(total_count_station_employee_safety) != 0 then sum(pending_count_station_employee_safety) / sum(total_count_station_employee_safety) else 0 end) *100,2),
#             round((case when sum(total_count_station_others) != 0 then sum(pending_count_station_others) / sum(total_count_station_others) else 0 end) *100,2),
#             round((case when sum(total_count_station_night_inspection) != 0 then sum(pending_count_station_night_inspection) / sum(total_count_station_night_inspection) else 0 end) *100,2),
#             round((case when sum(total_count_station_surprise_inspection) != 0 then sum(pending_count_station_surprise_inspection) / sum(total_count_station_surprise_inspection) else 0 end) *100,2),
#             round((case when sum(total_count_station_drive_inspection) != 0 then sum(pending_count_station_drive_inspection) / sum(total_count_station_drive_inspection) else 0 end) *100,2),
#             round((case when sum(total_count_section_passenger_safety) != 0 then sum(pending_count_section_passenger_safety) / sum(total_count_section_passenger_safety) else 0 end) *100,2),
#             round((case when sum(total_count_section_employee_safety) != 0 then sum(pending_count_section_employee_safety) / sum(total_count_section_employee_safety) else 0 end) *100,2),
#             round((case when sum(total_count_section_others) != 0 then sum(pending_count_section_others) / sum(total_count_section_others) else 0 end) *100,2),
#             round((case when sum(total_count_section_night_inspection) != 0 then sum(pending_count_section_night_inspection) / sum(total_count_section_night_inspection) else 0 end) *100,2),
#             round((case when sum(total_count_section_surprise_inspection) != 0 then sum(pending_count_section_surprise_inspection) / sum(total_count_section_surprise_inspection) else 0 end) *100,2),
#             round((case when sum(total_count_section_drive_inspection) != 0 then sum(pending_count_section_drive_inspection) / sum(total_count_section_drive_inspection) else 0 end) *100,2),
#             round((case when sum(total_count_train_passenger_safety) != 0 then sum(pending_count_train_passenger_safety) / sum(total_count_train_passenger_safety) else 0 end) *100,2),
#             round((case when sum(total_count_train_employee_safety) != 0 then sum(pending_count_train_employee_safety) / sum(total_count_train_employee_safety) else 0 end) *100,2),
#             round((case when sum(total_count_train_others) != 0 then sum(pending_count_train_others) / sum(total_count_train_others) else 0 end) *100,2),
#             round((case when sum(total_count_train_night_inspection) != 0 then sum(pending_count_train_night_inspection) / sum(total_count_train_night_inspection) else 0 end) *100,2),
#             round((case when sum(total_count_train_surprise_inspection) != 0 then sum(pending_count_train_surprise_inspection) / sum(total_count_train_surprise_inspection) else 0 end) *100,2),
#             round((case when sum(total_count_train_drive_inspection) != 0 then sum(pending_count_train_drive_inspection) / sum(total_count_train_drive_inspection) else 0 end) *100,2),
#             round((case when sum(total_count_others_passenger_safety) != 0 then sum(pending_count_others_passenger_safety) / sum(total_count_others_passenger_safety) else 0 end) *100,2),
#             round((case when sum(total_count_others_employee_safety) != 0 then sum(pending_count_others_employee_safety) / sum(total_count_others_employee_safety) else 0 end) *100,2),
#             round((case when sum(total_count_others_others) != 0 then sum(pending_count_others_others) / sum(total_count_others_others) else 0 end) *100,2),
#             round((case when sum(total_count_others_night_inspection) != 0 then sum(total_count_others_night_inspection) / sum(total_count_others_night_inspection) else 0 end) *100,2),
#             round((case when sum(total_count_others_surprise_inspection) != 0 then sum(total_count_others_surprise_inspection) / sum(total_count_others_surprise_inspection) else 0 end) *100,2),
#             round((case when sum(total_count_others_drive_inspection) != 0 then sum(total_count_others_drive_inspection) / sum(total_count_others_drive_inspection) else 0 end) *100,2)
#             from inspection_analysis_table3;''')
#         thirdRowData = cursor.fetchall()


        


#         cursor.close()
#         irTypeVal = 'ZR'
#         irDetailsVal = 'All'
#         irMapVal = '1'
#         irPathVal1 = None
#         irPathVal2 = ''
#         dataZoneWs = []
#         irPath2 = None
#         irSearchDept = ""
#         irSearchDate = ""
#         irSearchDesig = ""

    
#     if request.method == "POST":
#         submitvalue = request.POST.get('submit')
#         irPathVal1 = None
#         irPathVal2 = ''
#         dataZoneWs = []
#         irSearchDept = ""
#         irSearchDate = ""
#         irSearchDesig = ""
#         if submitvalue == 'irSubmitButton':
#             cursor = connection.cursor()
#             irTypeVal = request.POST.get('irType')  
#             irPath2 = request.POST.get('irPath2')
#             if irTypeVal == 'PU':
#                 irMapVal = '2'
#             else:
#                 irMapVal = '1'
#             irDetailsVal = request.POST.get('irDetails')
#             if irTypeVal == 'DIV':
#                 zone = irDetailsVal
#                 dataZoneWs = list(models.railwayLocationMaster.objects.filter(parent_location_code=zone,location_type = 'DIV').values('location_code','location_description').order_by('location_code'))
                
#             elif irTypeVal == 'WS':
#                 zone = irDetailsVal
#                 dataZoneWs = list(models.railwayLocationMaster.objects.filter(parent_location_code=zone,location_type = 'WS').values('location_code','location_description').order_by('location_code'))
            
#             if irTypeVal == 'ZR':   
#                 irTypeValData = ['ZR','DIV','WS']
            
#             elif irTypeVal == 'HQ':
#                 irTypeValData = ['ZR']
#             else:
#                 irTypeValData = [irTypeVal]
            

#             if irDetailsVal == 'All':
#                 allLocationCodeData = tuple(models.railwayLocationMaster.objects.filter(location_type__in = irTypeValData).values_list('location_code',flat=True).distinct())
#                 allDesignation = list(models.Level_Desig.objects.filter(rly_unit__in = models.railwayLocationMaster.objects.filter(location_type__in = irTypeValData).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('designation'))

#             else:
#                 irPathVal1 = irDetailsVal
#                 allLocationCodeData = list(models.railwayLocationMaster.objects.filter(Q(parent_location_code=irDetailsVal)).values_list('location_code',flat=True).distinct())
#                 allDesignation = list(models.Level_Desig.objects.filter(rly_unit__in = models.railwayLocationMaster.objects.filter(Q(location_code=irDetailsVal) | Q(parent_location_code=irDetailsVal),location_type__in = irTypeValData).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('designation'))

#                 allLocationCodeData.append(irDetailsVal)
#                 allLocationCodeData = tuple(allLocationCodeData)
            
#             if irPath2 != '':
#                 irPathVal2 = irPath2
#                 allDesignation = list(models.Level_Desig.objects.filter(rly_unit__in = models.railwayLocationMaster.objects.filter(Q(location_code=irPath2),location_type__in = irTypeValData).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('designation'))

#                 allLocationCodeData = tuple([irPath2])
#                 irTypeValData = [irTypeVal]




#             irSearchType = request.POST.get('irSearchType')
#             if irSearchType == 'Yes':
#                 irSearchDept = request.POST.get('irSearchDept')
#                 if irSearchDept == 'All':
#                     irSearchDept = ""
#                     allDepartmentData = tuple(models.departMast.objects.values_list('department_name',flat=True).distinct())
#                 else:
#                     allDepartmentData = tuple(models.departMast.objects.filter(department_code=irSearchDept).values_list('department_name',flat=True).distinct())
                
#                 irSearchDesig = request.POST.get('irSearchDesig')
#                 if  irSearchDesig == 'All':
#                     irSearchDesig = ""
#                     allDesignationData = tuple(models.Level_Desig.objects.filter(rly_unit__in = models.railwayLocationMaster.objects.filter(location_type__in=['DIV','RB','ZR','WS','PU']).values('rly_unit_code')).values_list('designation_code',flat=True).distinct())
#                 else:
#                     irSearchDesig = int(irSearchDesig)
#                     allDesignationData = tuple([irSearchDesig])
                    

                
#                 irSearchDate = request.POST.get('irSearchDate')
#                 if irSearchDate == "":
#                     startDate = '2020-04-01'
#                     endDate = datetime.now().strftime('%Y-%m-%d')
#                 else:
#                     irSearchDate11 = irSearchDate.split('-')
#                     start1 = irSearchDate11[0].split('/')
#                     end1 = irSearchDate11[1].split('/')
#                     startDate = '20'+start1[2]+'-'+start1[1]+'-'+start1[0]
#                     endDate = '20'+end1[2]+'-'+end1[1]+'-'+end1[0]
#                 cursor.execute('''select sum(total_count_others)::int,sum(pending_count_others)::int,sum(pending_overdue_count_others)::int,
#                     sum(total_count_passenger_safety)::int,sum(pending_count_passenger_safety)::int,sum(pending_overdue_count_passenger_safety)::int,
#                     sum(total_count_employee_safety)::int,sum(pending_count_employee_safety)::int,sum(pending_overdue_count_employee_safety)::int
#                     from view_inspection_analysis_table1 where fin_year=%s and location_type in %s  and location_code in %s and inspected_on between %s and %s
#                     and designation_code in %s and department in %s;''',[prevFinYear,tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData])
#                 firstPrevFinYear = cursor.fetchall()
                
#                 count_list1 =[]
#                 count_list2 =[]
#                 count_list3 =[]
#                 if len(firstPrevFinYear)>0:
#                     firstPrevFinYear = [list([x if x != None else 0 for x in firstPrevFinYear[0] ])]
#                     count_list3.append([firstPrevFinYear[0][0]-firstPrevFinYear[0][1],firstPrevFinYear[0][1],firstPrevFinYear[0][2]])
#                     count_list1.append([firstPrevFinYear[0][3]-firstPrevFinYear[0][4],firstPrevFinYear[0][4],firstPrevFinYear[0][5]])
#                     count_list2.append([firstPrevFinYear[0][6]-firstPrevFinYear[0][7],firstPrevFinYear[0][7],firstPrevFinYear[0][8]])
#                 else:
#                     count_list1.append([0,0,0])
#                     count_list2.append([0,0,0])
#                     count_list3.append([0,0,0])
#                 cursor.execute('''select sum(total_count_others)::int,sum(pending_count_others)::int,sum(pending_overdue_count_others)::int,
#                     sum(total_count_passenger_safety)::int,sum(pending_count_passenger_safety)::int,sum(pending_overdue_count_passenger_safety)::int,
#                     sum(total_count_employee_safety)::int,sum(pending_count_employee_safety)::int,sum(pending_overdue_count_employee_safety)::int
#                     from view_inspection_analysis_table1 where fin_year=%s and location_type in %s  and location_code in %s and inspected_on between %s and %s
#                     and designation_code in %s and department in %s;''',[curFinYear,tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData])
#                 firstCurFinYear = cursor.fetchall()
                
#                 if len(firstCurFinYear)>0:
#                     firstCurFinYear = [list([x if x != None else 0 for x in firstCurFinYear[0] ])]
#                     count_list3.append([firstCurFinYear[0][0]-firstCurFinYear[0][1],firstCurFinYear[0][1],firstCurFinYear[0][2]])
#                     count_list1.append([firstCurFinYear[0][3]-firstCurFinYear[0][4],firstCurFinYear[0][4],firstCurFinYear[0][5]])
#                     count_list2.append([firstCurFinYear[0][6]-firstCurFinYear[0][7],firstCurFinYear[0][7],firstCurFinYear[0][8]])
#                 else:
#                     count_list1.append([0,0,0])
#                     count_list2.append([0,0,0])
#                     count_list3.append([0,0,0])

#                 cursor.execute('''select sum(total_count_others)::int,sum(pending_count_others)::int,sum(pending_overdue_count_others)::int,
#                         round((case when sum(total_count_others) != 0 then sum(pending_count_others) / sum(total_count_others) else 0 end) *100,2),
#                         round((case when sum(total_count_others) != 0 then sum(pending_overdue_count_others) / sum(total_count_others) else 0 end) *100,2),
#                         sum(last_one_days_count_others)::int,sum(last_two_days_count_others)::int,sum(last_three_days_count_others)::int,
#                         sum(last_four_days_count_others)::int,sum(last_five_days_count_others)::int,			
#                         sum(total_count_passenger_safety)::int,sum(pending_count_passenger_safety)::int,sum(pending_overdue_count_passenger_safety)::int,
#                         round((case when sum(total_count_passenger_safety) != 0 then sum(pending_count_passenger_safety) / sum(total_count_passenger_safety) else 0 end) *100,2),
#                         round((case when sum(total_count_passenger_safety) != 0 then sum(pending_overdue_count_passenger_safety) / sum(total_count_passenger_safety) else 0 end) *100,2),
#                         sum(last_one_days_count_passenger_safety)::int,sum(last_two_days_count_passenger_safety)::int,sum(last_three_days_count_passenger_safety)::int,
#                         sum(last_four_days_count_passenger_safety)::int,sum(last_five_days_count_passenger_safety)::int,
#                         sum(total_count_employee_safety)::int,sum(pending_count_employee_safety)::int,sum(pending_overdue_count_employee_safety)::int,
#                         round((case when sum(total_count_employee_safety) != 0 then sum(pending_count_employee_safety) / sum(total_count_employee_safety) else 0 end) *100,2),
#                         round((case when sum(total_count_employee_safety) != 0 then sum(pending_overdue_count_employee_safety) / sum(total_count_employee_safety) else 0 end) *100,2),
#                         sum(last_one_days_count_employee_safety)::int,sum(last_two_days_count_employee_safety)::int,sum(last_three_days_count_employee_safety)::int,
#                         sum(last_four_days_count_employee_safety)::int,sum(last_five_days_count_employee_safety)::int
#                         from view_inspection_analysis_table1 where location_type in %s  and location_code in %s and inspected_on between %s and %s
#                         and designation_code in %s and department in %s;''',[tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData])
#                 firstRowAllData = cursor.fetchall()
                
#                 firstRowAllData = [list([x if x != None else 0 for x in firstRowAllData[0] ])]
                



#                 cursor.execute('''select sum(total_count_night_inspection)::int,sum(pending_count_night_inspection)::int,sum(pending_overdue_count_night_inspection)::int,
#                     sum(total_count_surprise_inspection)::int,sum(pending_count_surprise_inspection)::int,sum(pending_overdue_count_surprise_inspection)::int,
#                     sum(total_count_drive_based_inspection)::int,sum(pending_count_drive_based_inspection)::int,sum(pending_overdue_percentage_drive_based_inspection)::int
#                     from view_inspection_analysis_table2 where fin_year=%s and location_type in %s  and location_code in %s and inspected_on between %s and %s
#                     and designation_code in %s and department in %s;''',[prevFinYear,tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData])
#                 secondPrevFinYear = cursor.fetchall()
                
#                 count_list4 =[]
#                 count_list5 =[]
#                 count_list6 =[]
#                 if len(secondPrevFinYear)>0:
#                     secondPrevFinYear = [list([x if x != None else 0 for x in secondPrevFinYear[0] ])]
#                     count_list4.append([secondPrevFinYear[0][0]-secondPrevFinYear[0][1],secondPrevFinYear[0][1],secondPrevFinYear[0][2]])
#                     count_list5.append([secondPrevFinYear[0][3]-secondPrevFinYear[0][4],secondPrevFinYear[0][4],secondPrevFinYear[0][5]])
#                     count_list6.append([secondPrevFinYear[0][6]-secondPrevFinYear[0][7],secondPrevFinYear[0][7],secondPrevFinYear[0][8]])
#                 else:
#                     count_list4.append([0,0,0])
#                     count_list5.append([0,0,0])
#                     count_list6.append([0,0,0])
#                 cursor.execute('''select sum(total_count_night_inspection)::int,sum(pending_count_night_inspection)::int,sum(pending_overdue_count_night_inspection)::int,
#                     sum(total_count_surprise_inspection)::int,sum(pending_count_surprise_inspection)::int,sum(pending_overdue_count_surprise_inspection)::int,
#                     sum(total_count_drive_based_inspection)::int,sum(pending_count_drive_based_inspection)::int,sum(pending_overdue_percentage_drive_based_inspection)::int
#                     from view_inspection_analysis_table2 where fin_year=%s and location_type in %s  and location_code in %s  and inspected_on between %s and %s
#                     and designation_code in %s and department in %s;''',[curFinYear,tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData])
#                 secondCurFinYear = cursor.fetchall()
                
#                 if len(secondCurFinYear)>0:
#                     secondCurFinYear = [list([x if x != None else 0 for x in secondCurFinYear[0] ])]
#                     count_list4.append([secondCurFinYear[0][0]-secondCurFinYear[0][1],secondCurFinYear[0][1],secondCurFinYear[0][2]])
#                     count_list5.append([secondCurFinYear[0][3]-secondCurFinYear[0][4],secondCurFinYear[0][4],secondCurFinYear[0][5]])
#                     count_list6.append([secondCurFinYear[0][6]-secondCurFinYear[0][7],secondCurFinYear[0][7],secondCurFinYear[0][8]])
#                 else:
#                     count_list4.append([0,0,0])
#                     count_list5.append([0,0,0])
#                     count_list6.append([0,0,0])

#                 cursor.execute('''select sum(total_count_night_inspection)::int,sum(pending_count_night_inspection)::int,sum(pending_overdue_count_night_inspection)::int,
#                     round((case when sum(total_count_night_inspection) != 0 then sum(pending_count_night_inspection) / sum(total_count_night_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_night_inspection) != 0 then sum(pending_count_night_inspection) / sum(total_count_night_inspection) else 0 end) *100,2),
#                     sum(last_one_days_count_night_inspection)::int,sum(last_two_days_count_night_inspection)::int,sum(last_three_days_count_night_inspection)::int,
#                     sum(last_four_days_count_night_inspection)::int,sum(last_five_days_count_night_inspection)::int,	
#                     sum(total_count_surprise_inspection)::int,sum(pending_count_surprise_inspection)::int,sum(pending_overdue_count_surprise_inspection)::int,
#                     round((case when sum(total_count_surprise_inspection) != 0 then sum(pending_count_surprise_inspection) / sum(total_count_surprise_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_surprise_inspection) != 0 then sum(pending_overdue_count_surprise_inspection) / sum(total_count_surprise_inspection) else 0 end) *100,2),
#                     sum(last_one_days_count_surprise_inspection)::int,sum(last_two_days_count_surprise_inspection)::int,sum(last_three_days_count_surprise_inspection)::int,
#                     sum(last_four_days_count_surprise_inspection)::int,sum(last_five_days_count_surprise_inspection)::int,
#                     sum(total_count_drive_based_inspection)::int,sum(pending_count_drive_based_inspection)::int,sum(pending_overdue_percentage_drive_based_inspection)::int,
#                     round((case when sum(total_count_drive_based_inspection) != 0 then sum(pending_overdue_percentage_drive_based_inspection) / sum(total_count_drive_based_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_drive_based_inspection) != 0 then sum(pending_overdue_percentage_drive_based_inspection) / sum(total_count_drive_based_inspection) else 0 end) *100,2),
#                     sum(last_one_days_count_drive_based_inspection)::int,sum(last_two_days_count_drive_based_inspection)::int,sum(last_three_days_count_drive_based_inspection)::int,
#                     sum(last_four_days_count_drive_based_inspection)::int,sum(last_five_days_count_drive_based_inspection)::int
#                     from view_inspection_analysis_table2 where location_type in %s  and location_code in %s and inspected_on between %s and %s
#                     and designation_code in %s and department in %s;''',[tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData])
#                 secondRowAllData = cursor.fetchall()
#                 secondRowAllData = [list([x if x != None else 0 for x in secondRowAllData[0] ])]

#                 #########   forth row card(pendency)

#                 cursor.execute('''select sum(count_7_days_passenger_safety),sum(count_30_days_passenger_safety),sum(count_90_days_passenger_safety),
#                     sum(count_180_days_passenger_safety),sum(count_365_days_passenger_safety),
#                     sum(count_7_days_employee_safety),sum(count_30_days_employee_safety),sum(count_90_days_employee_safety),
#                     sum(count_180_days_employee_safety),sum(count_365_days_employee_safety),
#                     sum(count_7_days_others),sum(count_30_days_others),sum(count_90_days_others),
#                     sum(count_180_days_others),sum(count_365_days_others)
#                     from view_inspection_pendency_analysis_table1 where location_type in %s  and location_code in %s and inspected_on between %s and %s
#                     and designation_code in %s and department in %s;''',[tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData])
#                 pendencyDataCard1 = cursor.fetchall()
#                 pendencyDataCard1 = [list([x if x != None else 0 for x in pendencyDataCard1[0] ])]

#                 cursor.execute('''select sum(count_7_days_night_inspection),sum(count_30_days_night_inspection),sum(count_90_days_night_inspection),
#                     sum(count_180_days_night_inspection),sum(count_365_days_night_inspection),
#                     sum(count_7_days_surprise_inspection),sum(count_30_days_surprise_inspection),sum(count_90_days_surprise_inspection),
#                     sum(count_180_days_surprise_inspection),sum(count_365_days_surprise_inspection),
#                     sum(count_7_days_drive_based_inspection),sum(count_30_days_drive_based_inspection),sum(count_90_days_drive_based_inspection),
#                     sum(count_180_days_drive_based_inspection),sum(count_365_days_drive_based_inspection),
#                     sum(count_7_days_regular_inspection),sum(count_30_days_regular_inspection),sum(count_90_days_regular_inspection),
#                     sum(count_180_days_regular_inspection),sum(count_365_days_regular_inspection)
#                     from view_inspection_pendency_analysis_table2 where location_type in %s  and location_code in %s and inspected_on between %s and %s
#                     and designation_code in %s and department in %s;''',[tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData])
#                 pendencyDataCard2 = cursor.fetchall()
#                 pendencyDataCard2 = [list([x if x != None else 0 for x in pendencyDataCard2[0] ])]


#                 cursor.execute('''select  sum(total_count_station_passenger_safety),sum(total_count_station_employee_safety),sum(total_count_station_others),
#                     sum(total_count_station_night_inspection),sum(total_count_station_surprise_inspection),sum(total_count_station_drive_inspection),
#                     sum(total_count_section_passenger_safety),sum(total_count_section_employee_safety),sum(total_count_section_others),
#                     sum(total_count_section_night_inspection),sum(total_count_section_surprise_inspection),sum(total_count_section_drive_inspection),
#                     sum(total_count_train_passenger_safety),sum(total_count_train_employee_safety),sum(total_count_train_others),
#                     sum(total_count_train_night_inspection),sum(total_count_train_surprise_inspection),sum(total_count_train_drive_inspection),
#                     sum(total_count_others_passenger_safety),sum(total_count_others_employee_safety),sum(total_count_others_others),
#                     sum(total_count_others_night_inspection),sum(total_count_others_surprise_inspection),sum(total_count_others_drive_inspection),
#                     round((case when sum(total_count_station_passenger_safety) != 0 then sum(pending_count_station_passenger_safety) / sum(total_count_station_passenger_safety) else 0 end) *100,2),
#                     round((case when sum(total_count_station_employee_safety) != 0 then sum(pending_count_station_employee_safety) / sum(total_count_station_employee_safety) else 0 end) *100,2),
#                     round((case when sum(total_count_station_others) != 0 then sum(pending_count_station_others) / sum(total_count_station_others) else 0 end) *100,2),
#                     round((case when sum(total_count_station_night_inspection) != 0 then sum(pending_count_station_night_inspection) / sum(total_count_station_night_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_station_surprise_inspection) != 0 then sum(pending_count_station_surprise_inspection) / sum(total_count_station_surprise_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_station_drive_inspection) != 0 then sum(pending_count_station_drive_inspection) / sum(total_count_station_drive_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_section_passenger_safety) != 0 then sum(pending_count_section_passenger_safety) / sum(total_count_section_passenger_safety) else 0 end) *100,2),
#                     round((case when sum(total_count_section_employee_safety) != 0 then sum(pending_count_section_employee_safety) / sum(total_count_section_employee_safety) else 0 end) *100,2),
#                     round((case when sum(total_count_section_others) != 0 then sum(pending_count_section_others) / sum(total_count_section_others) else 0 end) *100,2),
#                     round((case when sum(total_count_section_night_inspection) != 0 then sum(pending_count_section_night_inspection) / sum(total_count_section_night_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_section_surprise_inspection) != 0 then sum(pending_count_section_surprise_inspection) / sum(total_count_section_surprise_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_section_drive_inspection) != 0 then sum(pending_count_section_drive_inspection) / sum(total_count_section_drive_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_train_passenger_safety) != 0 then sum(pending_count_train_passenger_safety) / sum(total_count_train_passenger_safety) else 0 end) *100,2),
#                     round((case when sum(total_count_train_employee_safety) != 0 then sum(pending_count_train_employee_safety) / sum(total_count_train_employee_safety) else 0 end) *100,2),
#                     round((case when sum(total_count_train_others) != 0 then sum(pending_count_train_others) / sum(total_count_train_others) else 0 end) *100,2),
#                     round((case when sum(total_count_train_night_inspection) != 0 then sum(pending_count_train_night_inspection) / sum(total_count_train_night_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_train_surprise_inspection) != 0 then sum(pending_count_train_surprise_inspection) / sum(total_count_train_surprise_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_train_drive_inspection) != 0 then sum(pending_count_train_drive_inspection) / sum(total_count_train_drive_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_others_passenger_safety) != 0 then sum(pending_count_others_passenger_safety) / sum(total_count_others_passenger_safety) else 0 end) *100,2),
#                     round((case when sum(total_count_others_employee_safety) != 0 then sum(pending_count_others_employee_safety) / sum(total_count_others_employee_safety) else 0 end) *100,2),
#                     round((case when sum(total_count_others_others) != 0 then sum(pending_count_others_others) / sum(total_count_others_others) else 0 end) *100,2),
#                     round((case when sum(total_count_others_night_inspection) != 0 then sum(total_count_others_night_inspection) / sum(total_count_others_night_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_others_surprise_inspection) != 0 then sum(total_count_others_surprise_inspection) / sum(total_count_others_surprise_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_others_drive_inspection) != 0 then sum(total_count_others_drive_inspection) / sum(total_count_others_drive_inspection) else 0 end) *100,2)
#                     from view_inspection_analysis_table3 where location_type in %s  and location_code in %s and inspected_on between %s and %s
#                     and designation_code in %s and department in %s;''',[tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData])
#                 thirdRowData = cursor.fetchall()
#                 thirdRowData = [list([x if x != None else 0 for x in thirdRowData[0] ])]
                

#             else:
#                 cursor.execute('''select sum(total_count_others)::int,sum(pending_count_others)::int,sum(pending_overdue_count_others)::int,
#                     sum(total_count_passenger_safety)::int,sum(pending_count_passenger_safety)::int,sum(pending_overdue_count_passenger_safety)::int,
#                     sum(total_count_employee_safety)::int,sum(pending_count_employee_safety)::int,sum(pending_overdue_count_employee_safety)::int
#                     from inspection_analysis_table1 where fin_year=%s and location_type in %s  and location_code in %s;''',[prevFinYear,tuple(irTypeValData),allLocationCodeData])
#                 firstPrevFinYear = cursor.fetchall()
#                 count_list1 =[]
#                 count_list2 =[]
#                 count_list3 =[]
#                 if len(firstPrevFinYear)>0:
#                     firstPrevFinYear = [list([x if x != None else 0 for x in firstPrevFinYear[0] ])]
#                     count_list3.append([firstPrevFinYear[0][0],firstPrevFinYear[0][1],firstPrevFinYear[0][2]])
#                     count_list1.append([firstPrevFinYear[0][3],firstPrevFinYear[0][4],firstPrevFinYear[0][5]])
#                     count_list2.append([firstPrevFinYear[0][6],firstPrevFinYear[0][7],firstPrevFinYear[0][8]])
#                 else:
#                     count_list1.append([0,0,0])
#                     count_list2.append([0,0,0])
#                     count_list3.append([0,0,0])
#                 cursor.execute('''select sum(total_count_others)::int,sum(pending_count_others)::int,sum(pending_overdue_count_others)::int,
#                     sum(total_count_passenger_safety)::int,sum(pending_count_passenger_safety)::int,sum(pending_overdue_count_passenger_safety)::int,
#                     sum(total_count_employee_safety)::int,sum(pending_count_employee_safety)::int,sum(pending_overdue_count_employee_safety)::int
#                     from inspection_analysis_table1 where fin_year=%s and location_type in %s  and location_code in %s;''',[curFinYear,tuple(irTypeValData),allLocationCodeData])
#                 firstCurFinYear = cursor.fetchall()
                
#                 if len(firstCurFinYear)>0:
#                     firstCurFinYear = [list([x if x != None else 0 for x in firstCurFinYear[0] ])]
#                     count_list3.append([firstCurFinYear[0][0],firstCurFinYear[0][1],firstCurFinYear[0][2]])
#                     count_list1.append([firstCurFinYear[0][3],firstCurFinYear[0][4],firstCurFinYear[0][5]])
#                     count_list2.append([firstCurFinYear[0][6],firstCurFinYear[0][7],firstCurFinYear[0][8]])
#                 else:
#                     count_list1.append([0,0,0])
#                     count_list2.append([0,0,0])
#                     count_list3.append([0,0,0])

#                 cursor.execute('''select sum(total_count_others)::int,sum(pending_count_others)::int,sum(pending_overdue_count_others)::int,
#                         round((case when sum(total_count_others) != 0 then sum(pending_count_others) / sum(total_count_others) else 0 end) *100,2),
#                         round((case when sum(total_count_others) != 0 then sum(pending_overdue_count_others) / sum(total_count_others) else 0 end) *100,2),
#                         sum(last_one_days_count_others)::int,sum(last_two_days_count_others)::int,sum(last_three_days_count_others)::int,
#                         sum(last_four_days_count_others)::int,sum(last_five_days_count_others)::int,			
#                         sum(total_count_passenger_safety)::int,sum(pending_count_passenger_safety)::int,sum(pending_overdue_count_passenger_safety)::int,
#                         round((case when sum(total_count_passenger_safety) != 0 then sum(pending_count_passenger_safety) / sum(total_count_passenger_safety) else 0 end) *100,2),
#                         round((case when sum(total_count_passenger_safety) != 0 then sum(pending_overdue_count_passenger_safety) / sum(total_count_passenger_safety) else 0 end) *100,2),
#                         sum(last_one_days_count_passenger_safety)::int,sum(last_two_days_count_passenger_safety)::int,sum(last_three_days_count_passenger_safety)::int,
#                         sum(last_four_days_count_passenger_safety)::int,sum(last_five_days_count_passenger_safety)::int,
#                         sum(total_count_employee_safety)::int,sum(pending_count_employee_safety)::int,sum(pending_overdue_count_employee_safety)::int,
#                         round((case when sum(total_count_employee_safety) != 0 then sum(pending_count_employee_safety) / sum(total_count_employee_safety) else 0 end) *100,2),
#                         round((case when sum(total_count_employee_safety) != 0 then sum(pending_overdue_count_employee_safety) / sum(total_count_employee_safety) else 0 end) *100,2),
#                         sum(last_one_days_count_employee_safety)::int,sum(last_two_days_count_employee_safety)::int,sum(last_three_days_count_employee_safety)::int,
#                         sum(last_four_days_count_employee_safety)::int,sum(last_five_days_count_employee_safety)::int
#                         from inspection_analysis_table1 where location_type in %s  and location_code in %s;''',[tuple(irTypeValData),allLocationCodeData])
#                 firstRowAllData = cursor.fetchall()
                
#                 firstRowAllData = [list([x if x != None else 0 for x in firstRowAllData[0] ])]
                



#                 cursor.execute('''select sum(total_count_night_inspection)::int,sum(pending_count_night_inspection)::int,sum(pending_overdue_count_night_inspection)::int,
#                     sum(total_count_surprise_inspection)::int,sum(pending_count_surprise_inspection)::int,sum(pending_overdue_count_surprise_inspection)::int,
#                     sum(total_count_drive_based_inspection)::int,sum(pending_count_drive_based_inspection)::int,sum(pending_overdue_percentage_drive_based_inspection)::int
#                     from inspection_analysis_table2 where fin_year=%s and location_type in %s  and location_code in %s;''',[prevFinYear,tuple(irTypeValData),allLocationCodeData])
#                 secondPrevFinYear = cursor.fetchall()
#                 count_list4 =[]
#                 count_list5 =[]
#                 count_list6 =[]
#                 if len(secondPrevFinYear)>0:
#                     secondPrevFinYear = [list([x if x != None else 0 for x in secondPrevFinYear[0] ])]
#                     count_list4.append([secondPrevFinYear[0][0],secondPrevFinYear[0][1],secondPrevFinYear[0][2]])
#                     count_list5.append([secondPrevFinYear[0][3],secondPrevFinYear[0][4],secondPrevFinYear[0][5]])
#                     count_list6.append([secondPrevFinYear[0][6],secondPrevFinYear[0][7],secondPrevFinYear[0][8]])
#                 else:
#                     count_list4.append([0,0,0])
#                     count_list5.append([0,0,0])
#                     count_list6.append([0,0,0])
#                 cursor.execute('''select sum(total_count_night_inspection)::int,sum(pending_count_night_inspection)::int,sum(pending_overdue_count_night_inspection)::int,
#                     sum(total_count_surprise_inspection)::int,sum(pending_count_surprise_inspection)::int,sum(pending_overdue_count_surprise_inspection)::int,
#                     sum(total_count_drive_based_inspection)::int,sum(pending_count_drive_based_inspection)::int,sum(pending_overdue_percentage_drive_based_inspection)::int
#                     from inspection_analysis_table2 where fin_year=%s and location_type in %s  and location_code in %s;''',[curFinYear,tuple(irTypeValData),allLocationCodeData])
#                 secondCurFinYear = cursor.fetchall()
                
#                 if len(secondCurFinYear)>0:
#                     secondCurFinYear = [list([x if x != None else 0 for x in secondCurFinYear[0] ])]
#                     count_list4.append([secondCurFinYear[0][0],secondCurFinYear[0][1],secondCurFinYear[0][2]])
#                     count_list5.append([secondCurFinYear[0][3],secondCurFinYear[0][4],secondCurFinYear[0][5]])
#                     count_list6.append([secondCurFinYear[0][6],secondCurFinYear[0][7],secondCurFinYear[0][8]])
#                 else:
#                     count_list4.append([0,0,0])
#                     count_list5.append([0,0,0])
#                     count_list6.append([0,0,0])

#                 cursor.execute('''select sum(total_count_night_inspection)::int,sum(pending_count_night_inspection)::int,sum(pending_overdue_count_night_inspection)::int,
#                     round((case when sum(total_count_night_inspection) != 0 then sum(pending_count_night_inspection) / sum(total_count_night_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_night_inspection) != 0 then sum(pending_count_night_inspection) / sum(total_count_night_inspection) else 0 end) *100,2),
#                     sum(last_one_days_count_night_inspection)::int,sum(last_two_days_count_night_inspection)::int,sum(last_three_days_count_night_inspection)::int,
#                     sum(last_four_days_count_night_inspection)::int,sum(last_five_days_count_night_inspection)::int,	
#                     sum(total_count_surprise_inspection)::int,sum(pending_count_surprise_inspection)::int,sum(pending_overdue_count_surprise_inspection)::int,
#                     round((case when sum(total_count_surprise_inspection) != 0 then sum(pending_count_surprise_inspection) / sum(total_count_surprise_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_surprise_inspection) != 0 then sum(pending_overdue_count_surprise_inspection) / sum(total_count_surprise_inspection) else 0 end) *100,2),
#                     sum(last_one_days_count_surprise_inspection)::int,sum(last_two_days_count_surprise_inspection)::int,sum(last_three_days_count_surprise_inspection)::int,
#                     sum(last_four_days_count_surprise_inspection)::int,sum(last_five_days_count_surprise_inspection)::int,
#                     sum(total_count_drive_based_inspection)::int,sum(pending_count_drive_based_inspection)::int,sum(pending_overdue_percentage_drive_based_inspection)::int,
#                     round((case when sum(total_count_drive_based_inspection) != 0 then sum(pending_overdue_percentage_drive_based_inspection) / sum(total_count_drive_based_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_drive_based_inspection) != 0 then sum(pending_overdue_percentage_drive_based_inspection) / sum(total_count_drive_based_inspection) else 0 end) *100,2),
#                     sum(last_one_days_count_drive_based_inspection)::int,sum(last_two_days_count_drive_based_inspection)::int,sum(last_three_days_count_drive_based_inspection)::int,
#                     sum(last_four_days_count_drive_based_inspection)::int,sum(last_five_days_count_drive_based_inspection)::int
#                     from inspection_analysis_table2 where location_type in %s  and location_code in %s;''',[tuple(irTypeValData),allLocationCodeData])
#                 secondRowAllData = cursor.fetchall()
#                 secondRowAllData = [list([x if x != None else 0 for x in secondRowAllData[0] ])]
#                 #########   forth row card(pendency)

#                 cursor.execute('''select sum(count_7_days_passenger_safety),sum(count_30_days_passenger_safety),sum(count_90_days_passenger_safety),
#                     sum(count_180_days_passenger_safety),sum(count_365_days_passenger_safety),
#                     sum(count_7_days_employee_safety),sum(count_30_days_employee_safety),sum(count_90_days_employee_safety),
#                     sum(count_180_days_employee_safety),sum(count_365_days_employee_safety),
#                     sum(count_7_days_others),sum(count_30_days_others),sum(count_90_days_others),
#                     sum(count_180_days_others),sum(count_365_days_others)
#                     from inspection_pendency_analysis_table1 where location_type in %s  and location_code in %s;''',[tuple(irTypeValData),allLocationCodeData])
#                 pendencyDataCard1 = cursor.fetchall()
#                 pendencyDataCard1 = [list([x if x != None else 0 for x in pendencyDataCard1[0] ])]

#                 cursor.execute('''select sum(count_7_days_night_inspection),sum(count_30_days_night_inspection),sum(count_90_days_night_inspection),
#                     sum(count_180_days_night_inspection),sum(count_365_days_night_inspection),
#                     sum(count_7_days_surprise_inspection),sum(count_30_days_surprise_inspection),sum(count_90_days_surprise_inspection),
#                     sum(count_180_days_surprise_inspection),sum(count_365_days_surprise_inspection),
#                     sum(count_7_days_drive_based_inspection),sum(count_30_days_drive_based_inspection),sum(count_90_days_drive_based_inspection),
#                     sum(count_180_days_drive_based_inspection),sum(count_365_days_drive_based_inspection),
#                     sum(count_7_days_regular_inspection),sum(count_30_days_regular_inspection),sum(count_90_days_regular_inspection),
#                     sum(count_180_days_regular_inspection),sum(count_365_days_regular_inspection)
#                     from inspection_pendency_analysis_table2 where location_type in %s  and location_code in %s;''',[tuple(irTypeValData),allLocationCodeData])
#                 pendencyDataCard2 = cursor.fetchall()
#                 pendencyDataCard2 = [list([x if x != None else 0 for x in pendencyDataCard2[0] ])]


#                 cursor.execute('''select  sum(total_count_station_passenger_safety),sum(total_count_station_employee_safety),sum(total_count_station_others),
#                     sum(total_count_station_night_inspection),sum(total_count_station_surprise_inspection),sum(total_count_station_drive_inspection),
#                     sum(total_count_section_passenger_safety),sum(total_count_section_employee_safety),sum(total_count_section_others),
#                     sum(total_count_section_night_inspection),sum(total_count_section_surprise_inspection),sum(total_count_section_drive_inspection),
#                     sum(total_count_train_passenger_safety),sum(total_count_train_employee_safety),sum(total_count_train_others),
#                     sum(total_count_train_night_inspection),sum(total_count_train_surprise_inspection),sum(total_count_train_drive_inspection),
#                     sum(total_count_others_passenger_safety),sum(total_count_others_employee_safety),sum(total_count_others_others),
#                     sum(total_count_others_night_inspection),sum(total_count_others_surprise_inspection),sum(total_count_others_drive_inspection),
#                     round((case when sum(total_count_station_passenger_safety) != 0 then sum(pending_count_station_passenger_safety) / sum(total_count_station_passenger_safety) else 0 end) *100,2),
#                     round((case when sum(total_count_station_employee_safety) != 0 then sum(pending_count_station_employee_safety) / sum(total_count_station_employee_safety) else 0 end) *100,2),
#                     round((case when sum(total_count_station_others) != 0 then sum(pending_count_station_others) / sum(total_count_station_others) else 0 end) *100,2),
#                     round((case when sum(total_count_station_night_inspection) != 0 then sum(pending_count_station_night_inspection) / sum(total_count_station_night_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_station_surprise_inspection) != 0 then sum(pending_count_station_surprise_inspection) / sum(total_count_station_surprise_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_station_drive_inspection) != 0 then sum(pending_count_station_drive_inspection) / sum(total_count_station_drive_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_section_passenger_safety) != 0 then sum(pending_count_section_passenger_safety) / sum(total_count_section_passenger_safety) else 0 end) *100,2),
#                     round((case when sum(total_count_section_employee_safety) != 0 then sum(pending_count_section_employee_safety) / sum(total_count_section_employee_safety) else 0 end) *100,2),
#                     round((case when sum(total_count_section_others) != 0 then sum(pending_count_section_others) / sum(total_count_section_others) else 0 end) *100,2),
#                     round((case when sum(total_count_section_night_inspection) != 0 then sum(pending_count_section_night_inspection) / sum(total_count_section_night_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_section_surprise_inspection) != 0 then sum(pending_count_section_surprise_inspection) / sum(total_count_section_surprise_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_section_drive_inspection) != 0 then sum(pending_count_section_drive_inspection) / sum(total_count_section_drive_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_train_passenger_safety) != 0 then sum(pending_count_train_passenger_safety) / sum(total_count_train_passenger_safety) else 0 end) *100,2),
#                     round((case when sum(total_count_train_employee_safety) != 0 then sum(pending_count_train_employee_safety) / sum(total_count_train_employee_safety) else 0 end) *100,2),
#                     round((case when sum(total_count_train_others) != 0 then sum(pending_count_train_others) / sum(total_count_train_others) else 0 end) *100,2),
#                     round((case when sum(total_count_train_night_inspection) != 0 then sum(pending_count_train_night_inspection) / sum(total_count_train_night_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_train_surprise_inspection) != 0 then sum(pending_count_train_surprise_inspection) / sum(total_count_train_surprise_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_train_drive_inspection) != 0 then sum(pending_count_train_drive_inspection) / sum(total_count_train_drive_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_others_passenger_safety) != 0 then sum(pending_count_others_passenger_safety) / sum(total_count_others_passenger_safety) else 0 end) *100,2),
#                     round((case when sum(total_count_others_employee_safety) != 0 then sum(pending_count_others_employee_safety) / sum(total_count_others_employee_safety) else 0 end) *100,2),
#                     round((case when sum(total_count_others_others) != 0 then sum(pending_count_others_others) / sum(total_count_others_others) else 0 end) *100,2),
#                     round((case when sum(total_count_others_night_inspection) != 0 then sum(total_count_others_night_inspection) / sum(total_count_others_night_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_others_surprise_inspection) != 0 then sum(total_count_others_surprise_inspection) / sum(total_count_others_surprise_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_others_drive_inspection) != 0 then sum(total_count_others_drive_inspection) / sum(total_count_others_drive_inspection) else 0 end) *100,2)
#                     from inspection_analysis_table3 where location_type in %s  and location_code in %s;''',[tuple(irTypeValData),allLocationCodeData])
#                 thirdRowData = cursor.fetchall()
#                 thirdRowData = [list([x if x != None else 0 for x in thirdRowData[0] ])]
                
#             cursor.close()


#     variationPassenger = "{:.2f}".format(((firstCurFinYear[0][3] - firstPrevFinYear[0][3]) / firstPrevFinYear[0][3]) * 100,2) if firstPrevFinYear[0][3] != 0 else 11000011
#     if variationPassenger == 11000011:
#         variationPassenger = ['NaN','0']
#     elif float(variationPassenger) >= 0:
#         variationPassenger = [variationPassenger,'1']
#     else:
#         variationPassenger = [variationPassenger[1:],'2']
    
#     variationEmployee = "{:.2f}".format(((firstCurFinYear[0][6] - firstPrevFinYear[0][6]) / firstPrevFinYear[0][6]) * 100,2) if firstPrevFinYear[0][6] != 0 else 11000011
#     if variationEmployee == 11000011:
#         variationEmployee = ['NaN','0']
#     elif float(variationEmployee) >= 0:
#         variationEmployee = [variationEmployee,'1']
#     else:
#         variationEmployee = [variationEmployee[1:],'2']
    
#     variationOthers = float("{:.2f}".format(((firstCurFinYear[0][0] - firstPrevFinYear[0][0]) / firstPrevFinYear[0][0]) * 100,2)) if firstPrevFinYear[0][0] != 0 else 11000011
    
#     if variationOthers == 11000011:
#         variationOthers = ['NaN','0']
#     elif float(variationOthers) >= 0:
#         variationOthers = [variationOthers,'1']
#     else:
#         variationOthers = [variationOthers[1:],'2']

#     variationSuprise = "{:.2f}".format(((secondCurFinYear[0][3] - secondPrevFinYear[0][3]) / secondPrevFinYear[0][3]) * 100,2) if secondPrevFinYear[0][3] != 0 else 11000011
#     if variationSuprise == 11000011:
#         variationSuprise = ['NaN','0']
#     elif float(variationSuprise) >= 0:
#         variationSuprise = [variationSuprise,'1']
#     else:
#         variationSuprise = [variationSuprise[1:],'2']
    
#     variationDrive = "{:.2f}".format(((secondCurFinYear[0][6] - secondPrevFinYear[0][6]) / secondPrevFinYear[0][6]) * 100,2) if secondPrevFinYear[0][6] != 0 else 11000011
#     if variationDrive == 11000011:
#         variationDrive = ['NaN','0']
#     elif float(variationDrive) >= 0:
#         variationDrive = [variationDrive,'1']
#     else:
#         variationDrive = [variationDrive[1:],'2']
    
#     variationNight = "{:.2f}".format(((secondCurFinYear[0][0] - secondPrevFinYear[0][0]) / secondPrevFinYear[0][0]) * 100,2) if secondPrevFinYear[0][0] != 0 else 11000011
#     if variationNight == 11000011:
#         variationNight = ['NaN','0']
#     elif float(variationNight) >= 0:
#         variationNight = [variationNight,'1']
#     else:
#         variationNight = [variationNight[1:],'2']    
          
#     overallTotalCount =   firstRowAllData[0][10]+firstRowAllData[0][20]+firstRowAllData[0][0]+secondRowAllData[0][10]+secondRowAllData[0][20]+secondRowAllData[0][0]   
#     overallPendingCount = firstRowAllData[0][11]+firstRowAllData[0][21]+firstRowAllData[0][1]+secondRowAllData[0][11]+secondRowAllData[0][21]+secondRowAllData[0][1] 
#     overallOverdueCount = firstRowAllData[0][12]+firstRowAllData[0][22]+firstRowAllData[0][2]+secondRowAllData[0][12]+secondRowAllData[0][22]+secondRowAllData[0][2]
#     overallPendingPercentage = "{:.2f}".format((overallPendingCount/overallTotalCount)*100) if overallTotalCount != 0 else 0.00
#     overallOverduePercentage = "{:.2f}".format((overallOverdueCount/overallTotalCount)*100) if overallTotalCount != 0 else 0.00
#     # for i in range(len(allDesignation)):
#     #     d_level = allDesignation[i]['d_level']
#     #     if d_level != None:
#     #         catData = list(models.category.objects.filter(category=d_level).values('hierarchy_level'))
#     #         if len(catData)>0:
#     #             if catData[0]['hierarchy_level'] != None:
#     #                 allDesignation[i].update({'level':int(catData[0]['hierarchy_level'])})
#     #             else:
#     #                 allDesignation[i].update({'level':1000})
#     #         else:
#     #             allDesignation[i].update({'level':1000})
#     #     else:
#     #         allDesignation[i].update({'level':1000})
#     # allDesignation = sorted(allDesignation, key = lambda x: (x['level'],x['designation']))           


    

#     print(variationPassenger,variationEmployee,variationOthers,variationSuprise,variationDrive,variationNight,overallTotalCount,overallPendingCount,overallOverdueCount,overallPendingPercentage,overallOverduePercentage)
#     context = {
#         'allDepartment':allDepartment,
#         'allDesignation':allDesignation,
#         'allFinYear':json.dumps([prevFinYear,curFinYear]),
#         'daysArray':daysArray,
#         'count_list1':json.dumps(count_list1),
#         'count_list2':json.dumps(count_list2),
#         'count_list3':json.dumps(count_list3),
#         'count_list4':json.dumps(count_list4),
#         'count_list5':json.dumps(count_list5),
#         'count_list6':json.dumps(count_list6),
#         'firstRowAllData':firstRowAllData,
#         'secondRowAllData':secondRowAllData,
#         'pendencyDataCard1':pendencyDataCard1,
#         'pendencyDataCard2':pendencyDataCard2,
#         'thirdRowData':thirdRowData,
#         'irTypeVal':irTypeVal,
#         'irDetailsVal':irDetailsVal,
#         'irMapVal':irMapVal,
#         'irPathVal1':irPathVal1,
#         'irPathVal2':irPathVal2,
#         'dataZoneWs':dataZoneWs,

#         'irSearchDept':irSearchDept,
#         'irSearchDate':irSearchDate,
#         'irSearchDesig':irSearchDesig,  

#         'variationPassenger':variationPassenger,  
#         'variationEmployee':variationEmployee,
#         'variationOthers':variationOthers,
#         'variationSuprise':variationSuprise,
#         'variationDrive':variationDrive,
#         'variationNight':variationNight,
#         'overallTotalCount':overallTotalCount,
#         'overallPendingCount':overallPendingCount,
#         'overallOverdueCount':overallOverdueCount,
#         'overallPendingPercentage':overallPendingPercentage,
#         'overallOverduePercentage':overallOverduePercentage,




#     }
#     return render(request,'svgtemplate.html',context)

# def inspectionDetailsMap(request):
#     N_DAYS_AGO = 5
#     today = datetime.now()    
#     n_days_ago = today - timedelta(days=N_DAYS_AGO)
#     daysArray=[]
#     for i in range(5):
#         daysArray.append((n_days_ago + timedelta(days=i)).strftime('%d/%m'))
#     daysArray = list(reversed(daysArray))
#     finYearCombined = finYear().split('-')
#     curFinYear = finYearCombined[0]+'-'+(finYearCombined[1])[2:]
#     prevFinYear = str(int(finYearCombined[0])-1)+'-'+(finYearCombined[0])[2:]

#     if request.method == "POST" and request.is_ajax():
#         typ = request.POST.get('typ')  
        
#         if typ == 'DesignationDetails':

#             dept = request.POST.get('dept')
#             if(dept == 'All'):
#                 irTypeVal = request.POST.get('irType')   
#                 irPath2 = request.POST.get('irPath2')
#                 irDetailsVal = request.POST.get('irDetails')
               
#                 if irTypeVal == 'ZR':   
#                     irTypeValData = ['ZR','DIV','WS']
                
#                 elif irTypeVal == 'HQ':
#                     irTypeValData = ['ZR']
#                 else:
#                     irTypeValData = [irTypeVal]
#                 if irDetailsVal == 'All':
#                     allDesignation = list(models.Level_Desig.objects.filter(rly_unit__in = models.railwayLocationMaster.objects.filter(location_type__in = irTypeValData).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('designation'))
#                 else:
#                     allDesignation = list(models.Level_Desig.objects.filter(rly_unit__in = models.railwayLocationMaster.objects.filter(Q(location_code=irDetailsVal) | Q(parent_location_code=irDetailsVal),location_type__in = irTypeValData).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('designation'))
#                 if irPath2 != '':
#                     allDesignation = list(models.Level_Desig.objects.filter(rly_unit__in = models.railwayLocationMaster.objects.filter(Q(location_code=irPath2),location_type__in = irTypeValData).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('designation'))

#             else:
#                 irTypeVal = request.POST.get('irType')   
#                 irPath2 = request.POST.get('irPath2')
#                 irDetailsVal = request.POST.get('irDetails')
                
#                 if irTypeVal == 'ZR':   
#                     irTypeValData = ['ZR','DIV','WS']
                
#                 elif irTypeVal == 'HQ':
#                     irTypeValData = ['ZR']
#                 else:
#                     irTypeValData = [irTypeVal]
#                 if irDetailsVal == 'All':
#                     allDesignation = list(models.Level_Desig.objects.filter(department_code=dept,rly_unit__in = models.railwayLocationMaster.objects.filter(location_type__in = irTypeValData).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('designation'))
#                 else:
#                     allDesignation = list(models.Level_Desig.objects.filter(department_code=dept,rly_unit__in = models.railwayLocationMaster.objects.filter(Q(location_code=irDetailsVal) | Q(parent_location_code=irDetailsVal),location_type__in = irTypeValData).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('designation'))
#                 if irPath2 != '':
#                     allDesignation = list(models.Level_Desig.objects.filter(department_code=dept,rly_unit__in = models.railwayLocationMaster.objects.filter(Q(location_code=irPath2),location_type__in = irTypeValData).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('designation'))




#             for i in range(len(allDesignation)):
#                 d_level = allDesignation[i]['d_level']
#                 if d_level != None:
#                     catData = list(models.category.objects.filter(category=d_level).values('hierarchy_level'))
#                     if len(catData)>0:
#                         if catData[0]['hierarchy_level'] != None:
#                             allDesignation[i].update({'level':int(catData[0]['hierarchy_level'])})
#                         else:
#                             allDesignation[i].update({'level':1000})
#                     else:
#                         allDesignation[i].update({'level':1000})
#                 else:
#                     allDesignation[i].update({'level':1000})
#             allDesignation = sorted(allDesignation, key = lambda x: (x['level'],x['designation']))    
            
            
            
            
#             return JsonResponse(allDesignation, safe = False)
        
#     allDesignation = list(models.Level_Desig.objects.filter(rly_unit__in = models.railwayLocationMaster.objects.filter(location_type__in=['DIV','RB','ZR','PU','WS']).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('designation'))
#     allDepartment = list(models.departMast.objects.values('department_name','department_code').distinct().order_by('department_name'))


    
#     if request.method == "GET":
#         cursor = connection.cursor()
#         cursor.execute('''select sum(total_count_others)::int,sum(pending_count_others)::int,sum(pending_overdue_count_others)::int,
#             sum(total_count_passenger_safety)::int,sum(pending_count_passenger_safety)::int,sum(pending_overdue_count_passenger_safety)::int,
#             sum(total_count_employee_safety)::int,sum(pending_count_employee_safety)::int,sum(pending_overdue_count_employee_safety)::int
#             from inspection_analysis_table1 where fin_year=%s;''',[prevFinYear])
#         firstPrevFinYear = cursor.fetchall()
#         count_list1 =[]
#         count_list2 =[]
#         count_list3 =[]
#         if len(firstPrevFinYear)>0:
#             firstPrevFinYear = [list([x if x != None else 0 for x in firstPrevFinYear[0]])]
#             count_list3.append([firstPrevFinYear[0][0]-firstPrevFinYear[0][1],firstPrevFinYear[0][1],firstPrevFinYear[0][2]])
#             count_list1.append([firstPrevFinYear[0][3]-firstPrevFinYear[0][4],firstPrevFinYear[0][4],firstPrevFinYear[0][5]])
#             count_list2.append([firstPrevFinYear[0][6]-firstPrevFinYear[0][7],firstPrevFinYear[0][7],firstPrevFinYear[0][8]])
#         else:
#             count_list1.append([0,0,0])
#             count_list2.append([0,0,0])
#             count_list3.append([0,0,0])
        
#         cursor.execute('''select sum(total_count_others)::int,sum(pending_count_others)::int,sum(pending_overdue_count_others)::int,
#             sum(total_count_passenger_safety)::int,sum(pending_count_passenger_safety)::int,sum(pending_overdue_count_passenger_safety)::int,
#             sum(total_count_employee_safety)::int,sum(pending_count_employee_safety)::int,sum(pending_overdue_count_employee_safety)::int
#             from inspection_analysis_table1 where fin_year=%s;''',[curFinYear])
#         firstCurFinYear = cursor.fetchall()
        
#         if len(firstCurFinYear)>0:
#             firstCurFinYear = [list([x if x != None else 0 for x in firstCurFinYear[0]])]
#             count_list3.append([firstCurFinYear[0][0]-firstCurFinYear[0][1],firstCurFinYear[0][1],firstCurFinYear[0][2]])
#             count_list1.append([firstCurFinYear[0][3]-firstCurFinYear[0][4],firstCurFinYear[0][4],firstCurFinYear[0][5]])
#             count_list2.append([firstCurFinYear[0][6]-firstCurFinYear[0][7],firstCurFinYear[0][7],firstCurFinYear[0][8]])
#         else:
#             count_list1.append([0,0,0])
#             count_list2.append([0,0,0])
#             count_list3.append([0,0,0])

        

#         cursor.execute('''select sum(total_count_others)::int,sum(pending_count_others)::int,sum(pending_overdue_count_others)::int,
#                 round((case when sum(total_count_others) != 0 then sum(pending_count_others) / sum(total_count_others) else 0 end) *100,2),
#                 round((case when sum(total_count_others) != 0 then sum(pending_overdue_count_others) / sum(total_count_others) else 0 end) *100,2),
#                 sum(last_one_days_count_others)::int,sum(last_two_days_count_others)::int,sum(last_three_days_count_others)::int,
#                 sum(last_four_days_count_others)::int,sum(last_five_days_count_others)::int,			
#                 sum(total_count_passenger_safety)::int,sum(pending_count_passenger_safety)::int,sum(pending_overdue_count_passenger_safety)::int,
#                 round((case when sum(total_count_passenger_safety) != 0 then sum(pending_count_passenger_safety) / sum(total_count_passenger_safety) else 0 end) *100,2),
#                 round((case when sum(total_count_passenger_safety) != 0 then sum(pending_overdue_count_passenger_safety) / sum(total_count_passenger_safety) else 0 end) *100,2),
#                 sum(last_one_days_count_passenger_safety)::int,sum(last_two_days_count_passenger_safety)::int,sum(last_three_days_count_passenger_safety)::int,
#                 sum(last_four_days_count_passenger_safety)::int,sum(last_five_days_count_passenger_safety)::int,
#                 sum(total_count_employee_safety)::int,sum(pending_count_employee_safety)::int,sum(pending_overdue_count_employee_safety)::int,
#                 round((case when sum(total_count_employee_safety) != 0 then sum(pending_count_employee_safety) / sum(total_count_employee_safety) else 0 end) *100,2),
#                 round((case when sum(total_count_employee_safety) != 0 then sum(pending_overdue_count_employee_safety) / sum(total_count_employee_safety) else 0 end) *100,2),
#                 sum(last_one_days_count_employee_safety)::int,sum(last_two_days_count_employee_safety)::int,sum(last_three_days_count_employee_safety)::int,
#                 sum(last_four_days_count_employee_safety)::int,sum(last_five_days_count_employee_safety)::int
#                 from inspection_analysis_table1;''')
#         firstRowAllData = cursor.fetchall()


#         cursor.execute('''select sum(total_count_night_inspection)::int,sum(pending_count_night_inspection)::int,sum(pending_overdue_count_night_inspection)::int,
#             sum(total_count_surprise_inspection)::int,sum(pending_count_surprise_inspection)::int,sum(pending_overdue_count_surprise_inspection)::int,
#             sum(total_count_drive_based_inspection)::int,sum(pending_count_drive_based_inspection)::int,sum(pending_overdue_percentage_drive_based_inspection)::int
#             from inspection_analysis_table2 where fin_year=%s;''',[prevFinYear])
#         secondPrevFinYear = cursor.fetchall()
#         count_list4 =[]
#         count_list5 =[]
#         count_list6 =[]
#         if len(secondPrevFinYear)>0:
#             secondPrevFinYear = [list([x if x != None else 0 for x in secondPrevFinYear[0]])]
#             count_list4.append([secondPrevFinYear[0][0]-secondPrevFinYear[0][1],secondPrevFinYear[0][1],secondPrevFinYear[0][2]])
#             count_list5.append([secondPrevFinYear[0][3]-secondPrevFinYear[0][4],secondPrevFinYear[0][4],secondPrevFinYear[0][5]])
#             count_list6.append([secondPrevFinYear[0][6]-secondPrevFinYear[0][7],secondPrevFinYear[0][7],secondPrevFinYear[0][8]])
#         else:
#             count_list4.append([0,0,0])
#             count_list5.append([0,0,0])
#             count_list6.append([0,0,0])
#         cursor.execute('''select sum(total_count_night_inspection)::int,sum(pending_count_night_inspection)::int,sum(pending_overdue_count_night_inspection)::int,
#             sum(total_count_surprise_inspection)::int,sum(pending_count_surprise_inspection)::int,sum(pending_overdue_count_surprise_inspection)::int,
#             sum(total_count_drive_based_inspection)::int,sum(pending_count_drive_based_inspection)::int,sum(pending_overdue_percentage_drive_based_inspection)::int
#             from inspection_analysis_table2 where fin_year=%s;''',[curFinYear])
#         secondCurFinYear = cursor.fetchall()
        
#         if len(secondCurFinYear)>0:
#             secondCurFinYear = [list([x if x != None else 0 for x in secondCurFinYear[0]])]
#             count_list4.append([secondCurFinYear[0][0]-secondCurFinYear[0][1],secondCurFinYear[0][1],secondCurFinYear[0][2]])
#             count_list5.append([secondCurFinYear[0][3]-secondCurFinYear[0][4],secondCurFinYear[0][4],secondCurFinYear[0][5]])
#             count_list6.append([secondCurFinYear[0][6]-secondCurFinYear[0][7],secondCurFinYear[0][7],secondCurFinYear[0][8]])
#         else:
#             count_list4.append([0,0,0])
#             count_list5.append([0,0,0])
#             count_list6.append([0,0,0])

        

#         cursor.execute('''select sum(total_count_night_inspection)::int,sum(pending_count_night_inspection)::int,sum(pending_overdue_count_night_inspection)::int,
#             round((case when sum(total_count_night_inspection) != 0 then sum(pending_count_night_inspection) / sum(total_count_night_inspection) else 0 end) *100,2),
#             round((case when sum(total_count_night_inspection) != 0 then sum(pending_count_night_inspection) / sum(total_count_night_inspection) else 0 end) *100,2),
#             sum(last_one_days_count_night_inspection)::int,sum(last_two_days_count_night_inspection)::int,sum(last_three_days_count_night_inspection)::int,
#             sum(last_four_days_count_night_inspection)::int,sum(last_five_days_count_night_inspection)::int,	
#             sum(total_count_surprise_inspection)::int,sum(pending_count_surprise_inspection)::int,sum(pending_overdue_count_surprise_inspection)::int,
#             round((case when sum(total_count_surprise_inspection) != 0 then sum(pending_count_surprise_inspection) / sum(total_count_surprise_inspection) else 0 end) *100,2),
#             round((case when sum(total_count_surprise_inspection) != 0 then sum(pending_overdue_count_surprise_inspection) / sum(total_count_surprise_inspection) else 0 end) *100,2),
#             sum(last_one_days_count_surprise_inspection)::int,sum(last_two_days_count_surprise_inspection)::int,sum(last_three_days_count_surprise_inspection)::int,
#             sum(last_four_days_count_surprise_inspection)::int,sum(last_five_days_count_surprise_inspection)::int,
#             sum(total_count_drive_based_inspection)::int,sum(pending_count_drive_based_inspection)::int,sum(pending_overdue_percentage_drive_based_inspection)::int,
#             round((case when sum(total_count_drive_based_inspection) != 0 then sum(pending_overdue_percentage_drive_based_inspection) / sum(total_count_drive_based_inspection) else 0 end) *100,2),
#             round((case when sum(total_count_drive_based_inspection) != 0 then sum(pending_overdue_percentage_drive_based_inspection) / sum(total_count_drive_based_inspection) else 0 end) *100,2),
#             sum(last_one_days_count_drive_based_inspection)::int,sum(last_two_days_count_drive_based_inspection)::int,sum(last_three_days_count_drive_based_inspection)::int,
#             sum(last_four_days_count_drive_based_inspection)::int,sum(last_five_days_count_drive_based_inspection)::int
#             from inspection_analysis_table2;''')
#         secondRowAllData = cursor.fetchall()

#         #########   forth row card(pendency)

#         cursor.execute('''select sum(count_7_days_passenger_safety),sum(count_30_days_passenger_safety),sum(count_90_days_passenger_safety),
#             sum(count_180_days_passenger_safety),sum(count_365_days_passenger_safety),
#             sum(count_7_days_employee_safety),sum(count_30_days_employee_safety),sum(count_90_days_employee_safety),
#             sum(count_180_days_employee_safety),sum(count_365_days_employee_safety),
#             sum(count_7_days_others),sum(count_30_days_others),sum(count_90_days_others),
#             sum(count_180_days_others),sum(count_365_days_others)
#             from inspection_pendency_analysis_table1;''')
#         pendencyDataCard1 = cursor.fetchall()

#         cursor.execute('''select sum(count_7_days_night_inspection),sum(count_30_days_night_inspection),sum(count_90_days_night_inspection),
#             sum(count_180_days_night_inspection),sum(count_365_days_night_inspection),
#             sum(count_7_days_surprise_inspection),sum(count_30_days_surprise_inspection),sum(count_90_days_surprise_inspection),
#             sum(count_180_days_surprise_inspection),sum(count_365_days_surprise_inspection),
#             sum(count_7_days_drive_based_inspection),sum(count_30_days_drive_based_inspection),sum(count_90_days_drive_based_inspection),
#             sum(count_180_days_drive_based_inspection),sum(count_365_days_drive_based_inspection),
#             sum(count_7_days_regular_inspection),sum(count_30_days_regular_inspection),sum(count_90_days_regular_inspection),
#             sum(count_180_days_regular_inspection),sum(count_365_days_regular_inspection)
#             from inspection_pendency_analysis_table2;''')
#         pendencyDataCard2 = cursor.fetchall()


#         cursor.execute('''select  sum(total_count_station_passenger_safety),sum(total_count_station_employee_safety),sum(total_count_station_others),
#             sum(total_count_station_night_inspection),sum(total_count_station_surprise_inspection),sum(total_count_station_drive_inspection),
#             sum(total_count_section_passenger_safety),sum(total_count_section_employee_safety),sum(total_count_section_others),
#             sum(total_count_section_night_inspection),sum(total_count_section_surprise_inspection),sum(total_count_section_drive_inspection),
#             sum(total_count_train_passenger_safety),sum(total_count_train_employee_safety),sum(total_count_train_others),
#             sum(total_count_train_night_inspection),sum(total_count_train_surprise_inspection),sum(total_count_train_drive_inspection),
#             sum(total_count_others_passenger_safety),sum(total_count_others_employee_safety),sum(total_count_others_others),
#             sum(total_count_others_night_inspection),sum(total_count_others_surprise_inspection),sum(total_count_others_drive_inspection),
#             round((case when sum(total_count_station_passenger_safety) != 0 then sum(pending_count_station_passenger_safety) / sum(total_count_station_passenger_safety) else 0 end) *100,2),
#             round((case when sum(total_count_station_employee_safety) != 0 then sum(pending_count_station_employee_safety) / sum(total_count_station_employee_safety) else 0 end) *100,2),
#             round((case when sum(total_count_station_others) != 0 then sum(pending_count_station_others) / sum(total_count_station_others) else 0 end) *100,2),
#             round((case when sum(total_count_station_night_inspection) != 0 then sum(pending_count_station_night_inspection) / sum(total_count_station_night_inspection) else 0 end) *100,2),
#             round((case when sum(total_count_station_surprise_inspection) != 0 then sum(pending_count_station_surprise_inspection) / sum(total_count_station_surprise_inspection) else 0 end) *100,2),
#             round((case when sum(total_count_station_drive_inspection) != 0 then sum(pending_count_station_drive_inspection) / sum(total_count_station_drive_inspection) else 0 end) *100,2),
#             round((case when sum(total_count_section_passenger_safety) != 0 then sum(pending_count_section_passenger_safety) / sum(total_count_section_passenger_safety) else 0 end) *100,2),
#             round((case when sum(total_count_section_employee_safety) != 0 then sum(pending_count_section_employee_safety) / sum(total_count_section_employee_safety) else 0 end) *100,2),
#             round((case when sum(total_count_section_others) != 0 then sum(pending_count_section_others) / sum(total_count_section_others) else 0 end) *100,2),
#             round((case when sum(total_count_section_night_inspection) != 0 then sum(pending_count_section_night_inspection) / sum(total_count_section_night_inspection) else 0 end) *100,2),
#             round((case when sum(total_count_section_surprise_inspection) != 0 then sum(pending_count_section_surprise_inspection) / sum(total_count_section_surprise_inspection) else 0 end) *100,2),
#             round((case when sum(total_count_section_drive_inspection) != 0 then sum(pending_count_section_drive_inspection) / sum(total_count_section_drive_inspection) else 0 end) *100,2),
#             round((case when sum(total_count_train_passenger_safety) != 0 then sum(pending_count_train_passenger_safety) / sum(total_count_train_passenger_safety) else 0 end) *100,2),
#             round((case when sum(total_count_train_employee_safety) != 0 then sum(pending_count_train_employee_safety) / sum(total_count_train_employee_safety) else 0 end) *100,2),
#             round((case when sum(total_count_train_others) != 0 then sum(pending_count_train_others) / sum(total_count_train_others) else 0 end) *100,2),
#             round((case when sum(total_count_train_night_inspection) != 0 then sum(pending_count_train_night_inspection) / sum(total_count_train_night_inspection) else 0 end) *100,2),
#             round((case when sum(total_count_train_surprise_inspection) != 0 then sum(pending_count_train_surprise_inspection) / sum(total_count_train_surprise_inspection) else 0 end) *100,2),
#             round((case when sum(total_count_train_drive_inspection) != 0 then sum(pending_count_train_drive_inspection) / sum(total_count_train_drive_inspection) else 0 end) *100,2),
#             round((case when sum(total_count_others_passenger_safety) != 0 then sum(pending_count_others_passenger_safety) / sum(total_count_others_passenger_safety) else 0 end) *100,2),
#             round((case when sum(total_count_others_employee_safety) != 0 then sum(pending_count_others_employee_safety) / sum(total_count_others_employee_safety) else 0 end) *100,2),
#             round((case when sum(total_count_others_others) != 0 then sum(pending_count_others_others) / sum(total_count_others_others) else 0 end) *100,2),
#             round((case when sum(total_count_others_night_inspection) != 0 then sum(total_count_others_night_inspection) / sum(total_count_others_night_inspection) else 0 end) *100,2),
#             round((case when sum(total_count_others_surprise_inspection) != 0 then sum(total_count_others_surprise_inspection) / sum(total_count_others_surprise_inspection) else 0 end) *100,2),
#             round((case when sum(total_count_others_drive_inspection) != 0 then sum(total_count_others_drive_inspection) / sum(total_count_others_drive_inspection) else 0 end) *100,2)
#             from inspection_analysis_table3;''')
#         thirdRowData = cursor.fetchall()


        


#         cursor.close()
#         irTypeVal = 'All'
#         irDetailsVal = 'All'
#         irMapVal = '1'
#         irPathVal1 = None
#         irPathVal2 = ''
#         dataZoneWs = []
#         irPath2 = None
#         irSearchDept = ""
#         irSearchDate = ""
#         irSearchDesig = ""

    
#     if request.method == "POST":
#         submitvalue = request.POST.get('submit')
#         irPathVal1 = None
#         irPathVal2 = ''
#         dataZoneWs = []
#         irSearchDept = ""
#         irSearchDate = ""
#         irSearchDesig = ""
#         if submitvalue == 'irSubmitButton':
#             cursor = connection.cursor()
#             irTypeVal = request.POST.get('irType')  
#             irPath2 = request.POST.get('irPath2')
#             if irTypeVal == 'PU':
#                 irMapVal = '2'
#             else:
#                 irMapVal = '1'
#             irDetailsVal = request.POST.get('irDetails')
#             if irTypeVal == 'DIV':
#                 zone = irDetailsVal
#                 dataZoneWs = list(models.railwayLocationMaster.objects.filter(parent_location_code=zone,location_type = 'DIV').values('location_code','location_description').order_by('location_code'))
                
#             elif irTypeVal == 'WS':
#                 zone = irDetailsVal
#                 dataZoneWs = list(models.railwayLocationMaster.objects.filter(parent_location_code=zone,location_type = 'WS').values('location_code','location_description').order_by('location_code'))
            
#             if irTypeVal == 'ZR':   
#                 irTypeValData = ['ZR','DIV','WS']
            
#             elif irTypeVal == 'HQ':
#                 irTypeValData = ['ZR']
#             else:
#                 irTypeValData = [irTypeVal]
            

#             if irDetailsVal == 'All':
#                 allLocationCodeData = tuple(models.railwayLocationMaster.objects.filter(location_type__in = irTypeValData).values_list('location_code',flat=True).distinct())
#                 allDesignation = list(models.Level_Desig.objects.filter(rly_unit__in = models.railwayLocationMaster.objects.filter(location_type__in = irTypeValData).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('designation'))

#             else:
#                 irPathVal1 = irDetailsVal
#                 allLocationCodeData = list(models.railwayLocationMaster.objects.filter(Q(parent_location_code=irDetailsVal)).values_list('location_code',flat=True).distinct())
#                 allDesignation = list(models.Level_Desig.objects.filter(rly_unit__in = models.railwayLocationMaster.objects.filter(Q(location_code=irDetailsVal) | Q(parent_location_code=irDetailsVal),location_type__in = irTypeValData).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('designation'))

#                 allLocationCodeData.append(irDetailsVal)
#                 allLocationCodeData = tuple(allLocationCodeData)
            
#             if irPath2 != '':
#                 irPathVal2 = irPath2
#                 allDesignation = list(models.Level_Desig.objects.filter(rly_unit__in = models.railwayLocationMaster.objects.filter(Q(location_code=irPath2),location_type__in = irTypeValData).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('designation'))

#                 allLocationCodeData = tuple([irPath2])
#                 irTypeValData = [irTypeVal]




#             irSearchType = request.POST.get('irSearchType')
#             if irSearchType == 'Yes':
#                 irSearchDept = request.POST.get('irSearchDept')
#                 if irSearchDept == 'All':
#                     irSearchDept = ""
#                     allDepartmentData = tuple(models.departMast.objects.values_list('department_name',flat=True).distinct())
#                 else:
#                     allDepartmentData = tuple(models.departMast.objects.filter(department_code=irSearchDept).values_list('department_name',flat=True).distinct())
                
#                 irSearchDesig = request.POST.get('irSearchDesig')
#                 if  irSearchDesig == 'All':
#                     irSearchDesig = ""
#                     allDesignationData = tuple(models.Level_Desig.objects.filter(rly_unit__in = models.railwayLocationMaster.objects.filter(location_type__in=['DIV','RB','ZR','WS','PU']).values('rly_unit_code')).values_list('designation_code',flat=True).distinct())
#                 else:
#                     irSearchDesig = int(irSearchDesig)
#                     allDesignationData = tuple([irSearchDesig])
                    

                
#                 irSearchDate = request.POST.get('irSearchDate')
#                 if irSearchDate == "":
#                     startDate = '2020-04-01'
#                     endDate = datetime.now().strftime('%Y-%m-%d')
#                 else:
#                     irSearchDate11 = irSearchDate.split('-')
#                     start1 = irSearchDate11[0].split('/')
#                     end1 = irSearchDate11[1].split('/')
#                     startDate = '20'+start1[2]+'-'+start1[1]+'-'+start1[0]
#                     endDate = '20'+end1[2]+'-'+end1[1]+'-'+end1[0]
#                 cursor.execute('''select sum(total_count_others)::int,sum(pending_count_others)::int,sum(pending_overdue_count_others)::int,
#                     sum(total_count_passenger_safety)::int,sum(pending_count_passenger_safety)::int,sum(pending_overdue_count_passenger_safety)::int,
#                     sum(total_count_employee_safety)::int,sum(pending_count_employee_safety)::int,sum(pending_overdue_count_employee_safety)::int
#                     from view_inspection_analysis_table1 where fin_year=%s and location_type in %s  and location_code in %s and inspected_on between %s and %s
#                     and designation_code in %s and department in %s;''',[prevFinYear,tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData])
#                 firstPrevFinYear = cursor.fetchall()
                
#                 count_list1 =[]
#                 count_list2 =[]
#                 count_list3 =[]
#                 if len(firstPrevFinYear)>0:
#                     firstPrevFinYear = [list([x if x != None else 0 for x in firstPrevFinYear[0] ])]
#                     count_list3.append([firstPrevFinYear[0][0]-firstPrevFinYear[0][1],firstPrevFinYear[0][1],firstPrevFinYear[0][2]])
#                     count_list1.append([firstPrevFinYear[0][3]-firstPrevFinYear[0][4],firstPrevFinYear[0][4],firstPrevFinYear[0][5]])
#                     count_list2.append([firstPrevFinYear[0][6]-firstPrevFinYear[0][7],firstPrevFinYear[0][7],firstPrevFinYear[0][8]])
#                 else:
#                     count_list1.append([0,0,0])
#                     count_list2.append([0,0,0])
#                     count_list3.append([0,0,0])
#                 cursor.execute('''select sum(total_count_others)::int,sum(pending_count_others)::int,sum(pending_overdue_count_others)::int,
#                     sum(total_count_passenger_safety)::int,sum(pending_count_passenger_safety)::int,sum(pending_overdue_count_passenger_safety)::int,
#                     sum(total_count_employee_safety)::int,sum(pending_count_employee_safety)::int,sum(pending_overdue_count_employee_safety)::int
#                     from view_inspection_analysis_table1 where fin_year=%s and location_type in %s  and location_code in %s and inspected_on between %s and %s
#                     and designation_code in %s and department in %s;''',[curFinYear,tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData])
#                 firstCurFinYear = cursor.fetchall()
                
#                 if len(firstCurFinYear)>0:
#                     firstCurFinYear = [list([x if x != None else 0 for x in firstCurFinYear[0] ])]
#                     count_list3.append([firstCurFinYear[0][0]-firstCurFinYear[0][1],firstCurFinYear[0][1],firstCurFinYear[0][2]])
#                     count_list1.append([firstCurFinYear[0][3]-firstCurFinYear[0][4],firstCurFinYear[0][4],firstCurFinYear[0][5]])
#                     count_list2.append([firstCurFinYear[0][6]-firstCurFinYear[0][7],firstCurFinYear[0][7],firstCurFinYear[0][8]])
#                 else:
#                     count_list1.append([0,0,0])
#                     count_list2.append([0,0,0])
#                     count_list3.append([0,0,0])

#                 cursor.execute('''select sum(total_count_others)::int,sum(pending_count_others)::int,sum(pending_overdue_count_others)::int,
#                         round((case when sum(total_count_others) != 0 then sum(pending_count_others) / sum(total_count_others) else 0 end) *100,2),
#                         round((case when sum(total_count_others) != 0 then sum(pending_overdue_count_others) / sum(total_count_others) else 0 end) *100,2),
#                         sum(last_one_days_count_others)::int,sum(last_two_days_count_others)::int,sum(last_three_days_count_others)::int,
#                         sum(last_four_days_count_others)::int,sum(last_five_days_count_others)::int,			
#                         sum(total_count_passenger_safety)::int,sum(pending_count_passenger_safety)::int,sum(pending_overdue_count_passenger_safety)::int,
#                         round((case when sum(total_count_passenger_safety) != 0 then sum(pending_count_passenger_safety) / sum(total_count_passenger_safety) else 0 end) *100,2),
#                         round((case when sum(total_count_passenger_safety) != 0 then sum(pending_overdue_count_passenger_safety) / sum(total_count_passenger_safety) else 0 end) *100,2),
#                         sum(last_one_days_count_passenger_safety)::int,sum(last_two_days_count_passenger_safety)::int,sum(last_three_days_count_passenger_safety)::int,
#                         sum(last_four_days_count_passenger_safety)::int,sum(last_five_days_count_passenger_safety)::int,
#                         sum(total_count_employee_safety)::int,sum(pending_count_employee_safety)::int,sum(pending_overdue_count_employee_safety)::int,
#                         round((case when sum(total_count_employee_safety) != 0 then sum(pending_count_employee_safety) / sum(total_count_employee_safety) else 0 end) *100,2),
#                         round((case when sum(total_count_employee_safety) != 0 then sum(pending_overdue_count_employee_safety) / sum(total_count_employee_safety) else 0 end) *100,2),
#                         sum(last_one_days_count_employee_safety)::int,sum(last_two_days_count_employee_safety)::int,sum(last_three_days_count_employee_safety)::int,
#                         sum(last_four_days_count_employee_safety)::int,sum(last_five_days_count_employee_safety)::int
#                         from view_inspection_analysis_table1 where location_type in %s  and location_code in %s and inspected_on between %s and %s
#                         and designation_code in %s and department in %s;''',[tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData])
#                 firstRowAllData = cursor.fetchall()
                
#                 firstRowAllData = [list([x if x != None else 0 for x in firstRowAllData[0] ])]
                



#                 cursor.execute('''select sum(total_count_night_inspection)::int,sum(pending_count_night_inspection)::int,sum(pending_overdue_count_night_inspection)::int,
#                     sum(total_count_surprise_inspection)::int,sum(pending_count_surprise_inspection)::int,sum(pending_overdue_count_surprise_inspection)::int,
#                     sum(total_count_drive_based_inspection)::int,sum(pending_count_drive_based_inspection)::int,sum(pending_overdue_percentage_drive_based_inspection)::int
#                     from view_inspection_analysis_table2 where fin_year=%s and location_type in %s  and location_code in %s and inspected_on between %s and %s
#                     and designation_code in %s and department in %s;''',[prevFinYear,tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData])
#                 secondPrevFinYear = cursor.fetchall()
                
#                 count_list4 =[]
#                 count_list5 =[]
#                 count_list6 =[]
#                 if len(secondPrevFinYear)>0:
#                     secondPrevFinYear = [list([x if x != None else 0 for x in secondPrevFinYear[0] ])]
#                     count_list4.append([secondPrevFinYear[0][0]-secondPrevFinYear[0][1],secondPrevFinYear[0][1],secondPrevFinYear[0][2]])
#                     count_list5.append([secondPrevFinYear[0][3]-secondPrevFinYear[0][4],secondPrevFinYear[0][4],secondPrevFinYear[0][5]])
#                     count_list6.append([secondPrevFinYear[0][6]-secondPrevFinYear[0][7],secondPrevFinYear[0][7],secondPrevFinYear[0][8]])
#                 else:
#                     count_list4.append([0,0,0])
#                     count_list5.append([0,0,0])
#                     count_list6.append([0,0,0])
#                 cursor.execute('''select sum(total_count_night_inspection)::int,sum(pending_count_night_inspection)::int,sum(pending_overdue_count_night_inspection)::int,
#                     sum(total_count_surprise_inspection)::int,sum(pending_count_surprise_inspection)::int,sum(pending_overdue_count_surprise_inspection)::int,
#                     sum(total_count_drive_based_inspection)::int,sum(pending_count_drive_based_inspection)::int,sum(pending_overdue_percentage_drive_based_inspection)::int
#                     from view_inspection_analysis_table2 where fin_year=%s and location_type in %s  and location_code in %s  and inspected_on between %s and %s
#                     and designation_code in %s and department in %s;''',[curFinYear,tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData])
#                 secondCurFinYear = cursor.fetchall()
                
#                 if len(secondCurFinYear)>0:
#                     secondCurFinYear = [list([x if x != None else 0 for x in secondCurFinYear[0] ])]
#                     count_list4.append([secondCurFinYear[0][0]-secondCurFinYear[0][1],secondCurFinYear[0][1],secondCurFinYear[0][2]])
#                     count_list5.append([secondCurFinYear[0][3]-secondCurFinYear[0][4],secondCurFinYear[0][4],secondCurFinYear[0][5]])
#                     count_list6.append([secondCurFinYear[0][6]-secondCurFinYear[0][7],secondCurFinYear[0][7],secondCurFinYear[0][8]])
#                 else:
#                     count_list4.append([0,0,0])
#                     count_list5.append([0,0,0])
#                     count_list6.append([0,0,0])

#                 cursor.execute('''select sum(total_count_night_inspection)::int,sum(pending_count_night_inspection)::int,sum(pending_overdue_count_night_inspection)::int,
#                     round((case when sum(total_count_night_inspection) != 0 then sum(pending_count_night_inspection) / sum(total_count_night_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_night_inspection) != 0 then sum(pending_count_night_inspection) / sum(total_count_night_inspection) else 0 end) *100,2),
#                     sum(last_one_days_count_night_inspection)::int,sum(last_two_days_count_night_inspection)::int,sum(last_three_days_count_night_inspection)::int,
#                     sum(last_four_days_count_night_inspection)::int,sum(last_five_days_count_night_inspection)::int,	
#                     sum(total_count_surprise_inspection)::int,sum(pending_count_surprise_inspection)::int,sum(pending_overdue_count_surprise_inspection)::int,
#                     round((case when sum(total_count_surprise_inspection) != 0 then sum(pending_count_surprise_inspection) / sum(total_count_surprise_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_surprise_inspection) != 0 then sum(pending_overdue_count_surprise_inspection) / sum(total_count_surprise_inspection) else 0 end) *100,2),
#                     sum(last_one_days_count_surprise_inspection)::int,sum(last_two_days_count_surprise_inspection)::int,sum(last_three_days_count_surprise_inspection)::int,
#                     sum(last_four_days_count_surprise_inspection)::int,sum(last_five_days_count_surprise_inspection)::int,
#                     sum(total_count_drive_based_inspection)::int,sum(pending_count_drive_based_inspection)::int,sum(pending_overdue_percentage_drive_based_inspection)::int,
#                     round((case when sum(total_count_drive_based_inspection) != 0 then sum(pending_overdue_percentage_drive_based_inspection) / sum(total_count_drive_based_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_drive_based_inspection) != 0 then sum(pending_overdue_percentage_drive_based_inspection) / sum(total_count_drive_based_inspection) else 0 end) *100,2),
#                     sum(last_one_days_count_drive_based_inspection)::int,sum(last_two_days_count_drive_based_inspection)::int,sum(last_three_days_count_drive_based_inspection)::int,
#                     sum(last_four_days_count_drive_based_inspection)::int,sum(last_five_days_count_drive_based_inspection)::int
#                     from view_inspection_analysis_table2 where location_type in %s  and location_code in %s and inspected_on between %s and %s
#                     and designation_code in %s and department in %s;''',[tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData])
#                 secondRowAllData = cursor.fetchall()
#                 secondRowAllData = [list([x if x != None else 0 for x in secondRowAllData[0] ])]

#                 #########   forth row card(pendency)

#                 cursor.execute('''select sum(count_7_days_passenger_safety),sum(count_30_days_passenger_safety),sum(count_90_days_passenger_safety),
#                     sum(count_180_days_passenger_safety),sum(count_365_days_passenger_safety),
#                     sum(count_7_days_employee_safety),sum(count_30_days_employee_safety),sum(count_90_days_employee_safety),
#                     sum(count_180_days_employee_safety),sum(count_365_days_employee_safety),
#                     sum(count_7_days_others),sum(count_30_days_others),sum(count_90_days_others),
#                     sum(count_180_days_others),sum(count_365_days_others)
#                     from view_inspection_pendency_analysis_table1 where location_type in %s  and location_code in %s and inspected_on between %s and %s
#                     and designation_code in %s and department in %s;''',[tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData])
#                 pendencyDataCard1 = cursor.fetchall()
#                 pendencyDataCard1 = [list([x if x != None else 0 for x in pendencyDataCard1[0] ])]

#                 cursor.execute('''select sum(count_7_days_night_inspection),sum(count_30_days_night_inspection),sum(count_90_days_night_inspection),
#                     sum(count_180_days_night_inspection),sum(count_365_days_night_inspection),
#                     sum(count_7_days_surprise_inspection),sum(count_30_days_surprise_inspection),sum(count_90_days_surprise_inspection),
#                     sum(count_180_days_surprise_inspection),sum(count_365_days_surprise_inspection),
#                     sum(count_7_days_drive_based_inspection),sum(count_30_days_drive_based_inspection),sum(count_90_days_drive_based_inspection),
#                     sum(count_180_days_drive_based_inspection),sum(count_365_days_drive_based_inspection),
#                     sum(count_7_days_regular_inspection),sum(count_30_days_regular_inspection),sum(count_90_days_regular_inspection),
#                     sum(count_180_days_regular_inspection),sum(count_365_days_regular_inspection)
#                     from view_inspection_pendency_analysis_table2 where location_type in %s  and location_code in %s and inspected_on between %s and %s
#                     and designation_code in %s and department in %s;''',[tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData])
#                 pendencyDataCard2 = cursor.fetchall()
#                 pendencyDataCard2 = [list([x if x != None else 0 for x in pendencyDataCard2[0] ])]


#                 cursor.execute('''select  sum(total_count_station_passenger_safety),sum(total_count_station_employee_safety),sum(total_count_station_others),
#                     sum(total_count_station_night_inspection),sum(total_count_station_surprise_inspection),sum(total_count_station_drive_inspection),
#                     sum(total_count_section_passenger_safety),sum(total_count_section_employee_safety),sum(total_count_section_others),
#                     sum(total_count_section_night_inspection),sum(total_count_section_surprise_inspection),sum(total_count_section_drive_inspection),
#                     sum(total_count_train_passenger_safety),sum(total_count_train_employee_safety),sum(total_count_train_others),
#                     sum(total_count_train_night_inspection),sum(total_count_train_surprise_inspection),sum(total_count_train_drive_inspection),
#                     sum(total_count_others_passenger_safety),sum(total_count_others_employee_safety),sum(total_count_others_others),
#                     sum(total_count_others_night_inspection),sum(total_count_others_surprise_inspection),sum(total_count_others_drive_inspection),
#                     round((case when sum(total_count_station_passenger_safety) != 0 then sum(pending_count_station_passenger_safety) / sum(total_count_station_passenger_safety) else 0 end) *100,2),
#                     round((case when sum(total_count_station_employee_safety) != 0 then sum(pending_count_station_employee_safety) / sum(total_count_station_employee_safety) else 0 end) *100,2),
#                     round((case when sum(total_count_station_others) != 0 then sum(pending_count_station_others) / sum(total_count_station_others) else 0 end) *100,2),
#                     round((case when sum(total_count_station_night_inspection) != 0 then sum(pending_count_station_night_inspection) / sum(total_count_station_night_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_station_surprise_inspection) != 0 then sum(pending_count_station_surprise_inspection) / sum(total_count_station_surprise_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_station_drive_inspection) != 0 then sum(pending_count_station_drive_inspection) / sum(total_count_station_drive_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_section_passenger_safety) != 0 then sum(pending_count_section_passenger_safety) / sum(total_count_section_passenger_safety) else 0 end) *100,2),
#                     round((case when sum(total_count_section_employee_safety) != 0 then sum(pending_count_section_employee_safety) / sum(total_count_section_employee_safety) else 0 end) *100,2),
#                     round((case when sum(total_count_section_others) != 0 then sum(pending_count_section_others) / sum(total_count_section_others) else 0 end) *100,2),
#                     round((case when sum(total_count_section_night_inspection) != 0 then sum(pending_count_section_night_inspection) / sum(total_count_section_night_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_section_surprise_inspection) != 0 then sum(pending_count_section_surprise_inspection) / sum(total_count_section_surprise_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_section_drive_inspection) != 0 then sum(pending_count_section_drive_inspection) / sum(total_count_section_drive_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_train_passenger_safety) != 0 then sum(pending_count_train_passenger_safety) / sum(total_count_train_passenger_safety) else 0 end) *100,2),
#                     round((case when sum(total_count_train_employee_safety) != 0 then sum(pending_count_train_employee_safety) / sum(total_count_train_employee_safety) else 0 end) *100,2),
#                     round((case when sum(total_count_train_others) != 0 then sum(pending_count_train_others) / sum(total_count_train_others) else 0 end) *100,2),
#                     round((case when sum(total_count_train_night_inspection) != 0 then sum(pending_count_train_night_inspection) / sum(total_count_train_night_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_train_surprise_inspection) != 0 then sum(pending_count_train_surprise_inspection) / sum(total_count_train_surprise_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_train_drive_inspection) != 0 then sum(pending_count_train_drive_inspection) / sum(total_count_train_drive_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_others_passenger_safety) != 0 then sum(pending_count_others_passenger_safety) / sum(total_count_others_passenger_safety) else 0 end) *100,2),
#                     round((case when sum(total_count_others_employee_safety) != 0 then sum(pending_count_others_employee_safety) / sum(total_count_others_employee_safety) else 0 end) *100,2),
#                     round((case when sum(total_count_others_others) != 0 then sum(pending_count_others_others) / sum(total_count_others_others) else 0 end) *100,2),
#                     round((case when sum(total_count_others_night_inspection) != 0 then sum(total_count_others_night_inspection) / sum(total_count_others_night_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_others_surprise_inspection) != 0 then sum(total_count_others_surprise_inspection) / sum(total_count_others_surprise_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_others_drive_inspection) != 0 then sum(total_count_others_drive_inspection) / sum(total_count_others_drive_inspection) else 0 end) *100,2)
#                     from view_inspection_analysis_table3 where location_type in %s  and location_code in %s and inspected_on between %s and %s
#                     and designation_code in %s and department in %s;''',[tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData])
#                 thirdRowData = cursor.fetchall()
#                 thirdRowData = [list([x if x != None else 0 for x in thirdRowData[0] ])]
                

#             else:
#                 cursor.execute('''select sum(total_count_others)::int,sum(pending_count_others)::int,sum(pending_overdue_count_others)::int,
#                     sum(total_count_passenger_safety)::int,sum(pending_count_passenger_safety)::int,sum(pending_overdue_count_passenger_safety)::int,
#                     sum(total_count_employee_safety)::int,sum(pending_count_employee_safety)::int,sum(pending_overdue_count_employee_safety)::int
#                     from inspection_analysis_table1 where fin_year=%s and location_type in %s  and location_code in %s;''',[prevFinYear,tuple(irTypeValData),allLocationCodeData])
#                 firstPrevFinYear = cursor.fetchall()
#                 count_list1 =[]
#                 count_list2 =[]
#                 count_list3 =[]
#                 if len(firstPrevFinYear)>0:
#                     firstPrevFinYear = [list([x if x != None else 0 for x in firstPrevFinYear[0] ])]
#                     count_list3.append([firstPrevFinYear[0][0],firstPrevFinYear[0][1],firstPrevFinYear[0][2]])
#                     count_list1.append([firstPrevFinYear[0][3],firstPrevFinYear[0][4],firstPrevFinYear[0][5]])
#                     count_list2.append([firstPrevFinYear[0][6],firstPrevFinYear[0][7],firstPrevFinYear[0][8]])
#                 else:
#                     count_list1.append([0,0,0])
#                     count_list2.append([0,0,0])
#                     count_list3.append([0,0,0])
#                 cursor.execute('''select sum(total_count_others)::int,sum(pending_count_others)::int,sum(pending_overdue_count_others)::int,
#                     sum(total_count_passenger_safety)::int,sum(pending_count_passenger_safety)::int,sum(pending_overdue_count_passenger_safety)::int,
#                     sum(total_count_employee_safety)::int,sum(pending_count_employee_safety)::int,sum(pending_overdue_count_employee_safety)::int
#                     from inspection_analysis_table1 where fin_year=%s and location_type in %s  and location_code in %s;''',[curFinYear,tuple(irTypeValData),allLocationCodeData])
#                 firstCurFinYear = cursor.fetchall()
                
#                 if len(firstCurFinYear)>0:
#                     firstCurFinYear = [list([x if x != None else 0 for x in firstCurFinYear[0] ])]
#                     count_list3.append([firstCurFinYear[0][0],firstCurFinYear[0][1],firstCurFinYear[0][2]])
#                     count_list1.append([firstCurFinYear[0][3],firstCurFinYear[0][4],firstCurFinYear[0][5]])
#                     count_list2.append([firstCurFinYear[0][6],firstCurFinYear[0][7],firstCurFinYear[0][8]])
#                 else:
#                     count_list1.append([0,0,0])
#                     count_list2.append([0,0,0])
#                     count_list3.append([0,0,0])

#                 cursor.execute('''select sum(total_count_others)::int,sum(pending_count_others)::int,sum(pending_overdue_count_others)::int,
#                         round((case when sum(total_count_others) != 0 then sum(pending_count_others) / sum(total_count_others) else 0 end) *100,2),
#                         round((case when sum(total_count_others) != 0 then sum(pending_overdue_count_others) / sum(total_count_others) else 0 end) *100,2),
#                         sum(last_one_days_count_others)::int,sum(last_two_days_count_others)::int,sum(last_three_days_count_others)::int,
#                         sum(last_four_days_count_others)::int,sum(last_five_days_count_others)::int,			
#                         sum(total_count_passenger_safety)::int,sum(pending_count_passenger_safety)::int,sum(pending_overdue_count_passenger_safety)::int,
#                         round((case when sum(total_count_passenger_safety) != 0 then sum(pending_count_passenger_safety) / sum(total_count_passenger_safety) else 0 end) *100,2),
#                         round((case when sum(total_count_passenger_safety) != 0 then sum(pending_overdue_count_passenger_safety) / sum(total_count_passenger_safety) else 0 end) *100,2),
#                         sum(last_one_days_count_passenger_safety)::int,sum(last_two_days_count_passenger_safety)::int,sum(last_three_days_count_passenger_safety)::int,
#                         sum(last_four_days_count_passenger_safety)::int,sum(last_five_days_count_passenger_safety)::int,
#                         sum(total_count_employee_safety)::int,sum(pending_count_employee_safety)::int,sum(pending_overdue_count_employee_safety)::int,
#                         round((case when sum(total_count_employee_safety) != 0 then sum(pending_count_employee_safety) / sum(total_count_employee_safety) else 0 end) *100,2),
#                         round((case when sum(total_count_employee_safety) != 0 then sum(pending_overdue_count_employee_safety) / sum(total_count_employee_safety) else 0 end) *100,2),
#                         sum(last_one_days_count_employee_safety)::int,sum(last_two_days_count_employee_safety)::int,sum(last_three_days_count_employee_safety)::int,
#                         sum(last_four_days_count_employee_safety)::int,sum(last_five_days_count_employee_safety)::int
#                         from inspection_analysis_table1 where location_type in %s  and location_code in %s;''',[tuple(irTypeValData),allLocationCodeData])
#                 firstRowAllData = cursor.fetchall()
                
#                 firstRowAllData = [list([x if x != None else 0 for x in firstRowAllData[0] ])]
                



#                 cursor.execute('''select sum(total_count_night_inspection)::int,sum(pending_count_night_inspection)::int,sum(pending_overdue_count_night_inspection)::int,
#                     sum(total_count_surprise_inspection)::int,sum(pending_count_surprise_inspection)::int,sum(pending_overdue_count_surprise_inspection)::int,
#                     sum(total_count_drive_based_inspection)::int,sum(pending_count_drive_based_inspection)::int,sum(pending_overdue_percentage_drive_based_inspection)::int
#                     from inspection_analysis_table2 where fin_year=%s and location_type in %s  and location_code in %s;''',[prevFinYear,tuple(irTypeValData),allLocationCodeData])
#                 secondPrevFinYear = cursor.fetchall()
#                 count_list4 =[]
#                 count_list5 =[]
#                 count_list6 =[]
#                 if len(secondPrevFinYear)>0:
#                     secondPrevFinYear = [list([x if x != None else 0 for x in secondPrevFinYear[0] ])]
#                     count_list4.append([secondPrevFinYear[0][0],secondPrevFinYear[0][1],secondPrevFinYear[0][2]])
#                     count_list5.append([secondPrevFinYear[0][3],secondPrevFinYear[0][4],secondPrevFinYear[0][5]])
#                     count_list6.append([secondPrevFinYear[0][6],secondPrevFinYear[0][7],secondPrevFinYear[0][8]])
#                 else:
#                     count_list4.append([0,0,0])
#                     count_list5.append([0,0,0])
#                     count_list6.append([0,0,0])
#                 cursor.execute('''select sum(total_count_night_inspection)::int,sum(pending_count_night_inspection)::int,sum(pending_overdue_count_night_inspection)::int,
#                     sum(total_count_surprise_inspection)::int,sum(pending_count_surprise_inspection)::int,sum(pending_overdue_count_surprise_inspection)::int,
#                     sum(total_count_drive_based_inspection)::int,sum(pending_count_drive_based_inspection)::int,sum(pending_overdue_percentage_drive_based_inspection)::int
#                     from inspection_analysis_table2 where fin_year=%s and location_type in %s  and location_code in %s;''',[curFinYear,tuple(irTypeValData),allLocationCodeData])
#                 secondCurFinYear = cursor.fetchall()
                
#                 if len(secondCurFinYear)>0:
#                     secondCurFinYear = [list([x if x != None else 0 for x in secondCurFinYear[0] ])]
#                     count_list4.append([secondCurFinYear[0][0],secondCurFinYear[0][1],secondCurFinYear[0][2]])
#                     count_list5.append([secondCurFinYear[0][3],secondCurFinYear[0][4],secondCurFinYear[0][5]])
#                     count_list6.append([secondCurFinYear[0][6],secondCurFinYear[0][7],secondCurFinYear[0][8]])
#                 else:
#                     count_list4.append([0,0,0])
#                     count_list5.append([0,0,0])
#                     count_list6.append([0,0,0])

#                 cursor.execute('''select sum(total_count_night_inspection)::int,sum(pending_count_night_inspection)::int,sum(pending_overdue_count_night_inspection)::int,
#                     round((case when sum(total_count_night_inspection) != 0 then sum(pending_count_night_inspection) / sum(total_count_night_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_night_inspection) != 0 then sum(pending_count_night_inspection) / sum(total_count_night_inspection) else 0 end) *100,2),
#                     sum(last_one_days_count_night_inspection)::int,sum(last_two_days_count_night_inspection)::int,sum(last_three_days_count_night_inspection)::int,
#                     sum(last_four_days_count_night_inspection)::int,sum(last_five_days_count_night_inspection)::int,	
#                     sum(total_count_surprise_inspection)::int,sum(pending_count_surprise_inspection)::int,sum(pending_overdue_count_surprise_inspection)::int,
#                     round((case when sum(total_count_surprise_inspection) != 0 then sum(pending_count_surprise_inspection) / sum(total_count_surprise_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_surprise_inspection) != 0 then sum(pending_overdue_count_surprise_inspection) / sum(total_count_surprise_inspection) else 0 end) *100,2),
#                     sum(last_one_days_count_surprise_inspection)::int,sum(last_two_days_count_surprise_inspection)::int,sum(last_three_days_count_surprise_inspection)::int,
#                     sum(last_four_days_count_surprise_inspection)::int,sum(last_five_days_count_surprise_inspection)::int,
#                     sum(total_count_drive_based_inspection)::int,sum(pending_count_drive_based_inspection)::int,sum(pending_overdue_percentage_drive_based_inspection)::int,
#                     round((case when sum(total_count_drive_based_inspection) != 0 then sum(pending_overdue_percentage_drive_based_inspection) / sum(total_count_drive_based_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_drive_based_inspection) != 0 then sum(pending_overdue_percentage_drive_based_inspection) / sum(total_count_drive_based_inspection) else 0 end) *100,2),
#                     sum(last_one_days_count_drive_based_inspection)::int,sum(last_two_days_count_drive_based_inspection)::int,sum(last_three_days_count_drive_based_inspection)::int,
#                     sum(last_four_days_count_drive_based_inspection)::int,sum(last_five_days_count_drive_based_inspection)::int
#                     from inspection_analysis_table2 where location_type in %s  and location_code in %s;''',[tuple(irTypeValData),allLocationCodeData])
#                 secondRowAllData = cursor.fetchall()
#                 secondRowAllData = [list([x if x != None else 0 for x in secondRowAllData[0] ])]
#                 #########   forth row card(pendency)

#                 cursor.execute('''select sum(count_7_days_passenger_safety),sum(count_30_days_passenger_safety),sum(count_90_days_passenger_safety),
#                     sum(count_180_days_passenger_safety),sum(count_365_days_passenger_safety),
#                     sum(count_7_days_employee_safety),sum(count_30_days_employee_safety),sum(count_90_days_employee_safety),
#                     sum(count_180_days_employee_safety),sum(count_365_days_employee_safety),
#                     sum(count_7_days_others),sum(count_30_days_others),sum(count_90_days_others),
#                     sum(count_180_days_others),sum(count_365_days_others)
#                     from inspection_pendency_analysis_table1 where location_type in %s  and location_code in %s;''',[tuple(irTypeValData),allLocationCodeData])
#                 pendencyDataCard1 = cursor.fetchall()
#                 pendencyDataCard1 = [list([x if x != None else 0 for x in pendencyDataCard1[0] ])]

#                 cursor.execute('''select sum(count_7_days_night_inspection),sum(count_30_days_night_inspection),sum(count_90_days_night_inspection),
#                     sum(count_180_days_night_inspection),sum(count_365_days_night_inspection),
#                     sum(count_7_days_surprise_inspection),sum(count_30_days_surprise_inspection),sum(count_90_days_surprise_inspection),
#                     sum(count_180_days_surprise_inspection),sum(count_365_days_surprise_inspection),
#                     sum(count_7_days_drive_based_inspection),sum(count_30_days_drive_based_inspection),sum(count_90_days_drive_based_inspection),
#                     sum(count_180_days_drive_based_inspection),sum(count_365_days_drive_based_inspection),
#                     sum(count_7_days_regular_inspection),sum(count_30_days_regular_inspection),sum(count_90_days_regular_inspection),
#                     sum(count_180_days_regular_inspection),sum(count_365_days_regular_inspection)
#                     from inspection_pendency_analysis_table2 where location_type in %s  and location_code in %s;''',[tuple(irTypeValData),allLocationCodeData])
#                 pendencyDataCard2 = cursor.fetchall()
#                 pendencyDataCard2 = [list([x if x != None else 0 for x in pendencyDataCard2[0] ])]


#                 cursor.execute('''select  sum(total_count_station_passenger_safety),sum(total_count_station_employee_safety),sum(total_count_station_others),
#                     sum(total_count_station_night_inspection),sum(total_count_station_surprise_inspection),sum(total_count_station_drive_inspection),
#                     sum(total_count_section_passenger_safety),sum(total_count_section_employee_safety),sum(total_count_section_others),
#                     sum(total_count_section_night_inspection),sum(total_count_section_surprise_inspection),sum(total_count_section_drive_inspection),
#                     sum(total_count_train_passenger_safety),sum(total_count_train_employee_safety),sum(total_count_train_others),
#                     sum(total_count_train_night_inspection),sum(total_count_train_surprise_inspection),sum(total_count_train_drive_inspection),
#                     sum(total_count_others_passenger_safety),sum(total_count_others_employee_safety),sum(total_count_others_others),
#                     sum(total_count_others_night_inspection),sum(total_count_others_surprise_inspection),sum(total_count_others_drive_inspection),
#                     round((case when sum(total_count_station_passenger_safety) != 0 then sum(pending_count_station_passenger_safety) / sum(total_count_station_passenger_safety) else 0 end) *100,2),
#                     round((case when sum(total_count_station_employee_safety) != 0 then sum(pending_count_station_employee_safety) / sum(total_count_station_employee_safety) else 0 end) *100,2),
#                     round((case when sum(total_count_station_others) != 0 then sum(pending_count_station_others) / sum(total_count_station_others) else 0 end) *100,2),
#                     round((case when sum(total_count_station_night_inspection) != 0 then sum(pending_count_station_night_inspection) / sum(total_count_station_night_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_station_surprise_inspection) != 0 then sum(pending_count_station_surprise_inspection) / sum(total_count_station_surprise_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_station_drive_inspection) != 0 then sum(pending_count_station_drive_inspection) / sum(total_count_station_drive_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_section_passenger_safety) != 0 then sum(pending_count_section_passenger_safety) / sum(total_count_section_passenger_safety) else 0 end) *100,2),
#                     round((case when sum(total_count_section_employee_safety) != 0 then sum(pending_count_section_employee_safety) / sum(total_count_section_employee_safety) else 0 end) *100,2),
#                     round((case when sum(total_count_section_others) != 0 then sum(pending_count_section_others) / sum(total_count_section_others) else 0 end) *100,2),
#                     round((case when sum(total_count_section_night_inspection) != 0 then sum(pending_count_section_night_inspection) / sum(total_count_section_night_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_section_surprise_inspection) != 0 then sum(pending_count_section_surprise_inspection) / sum(total_count_section_surprise_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_section_drive_inspection) != 0 then sum(pending_count_section_drive_inspection) / sum(total_count_section_drive_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_train_passenger_safety) != 0 then sum(pending_count_train_passenger_safety) / sum(total_count_train_passenger_safety) else 0 end) *100,2),
#                     round((case when sum(total_count_train_employee_safety) != 0 then sum(pending_count_train_employee_safety) / sum(total_count_train_employee_safety) else 0 end) *100,2),
#                     round((case when sum(total_count_train_others) != 0 then sum(pending_count_train_others) / sum(total_count_train_others) else 0 end) *100,2),
#                     round((case when sum(total_count_train_night_inspection) != 0 then sum(pending_count_train_night_inspection) / sum(total_count_train_night_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_train_surprise_inspection) != 0 then sum(pending_count_train_surprise_inspection) / sum(total_count_train_surprise_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_train_drive_inspection) != 0 then sum(pending_count_train_drive_inspection) / sum(total_count_train_drive_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_others_passenger_safety) != 0 then sum(pending_count_others_passenger_safety) / sum(total_count_others_passenger_safety) else 0 end) *100,2),
#                     round((case when sum(total_count_others_employee_safety) != 0 then sum(pending_count_others_employee_safety) / sum(total_count_others_employee_safety) else 0 end) *100,2),
#                     round((case when sum(total_count_others_others) != 0 then sum(pending_count_others_others) / sum(total_count_others_others) else 0 end) *100,2),
#                     round((case when sum(total_count_others_night_inspection) != 0 then sum(total_count_others_night_inspection) / sum(total_count_others_night_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_others_surprise_inspection) != 0 then sum(total_count_others_surprise_inspection) / sum(total_count_others_surprise_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_others_drive_inspection) != 0 then sum(total_count_others_drive_inspection) / sum(total_count_others_drive_inspection) else 0 end) *100,2)
#                     from inspection_analysis_table3 where location_type in %s  and location_code in %s;''',[tuple(irTypeValData),allLocationCodeData])
#                 thirdRowData = cursor.fetchall()
#                 thirdRowData = [list([x if x != None else 0 for x in thirdRowData[0] ])]
                
#             cursor.close()


#     variationPassenger = "{:.2f}".format(((firstCurFinYear[0][3] - firstPrevFinYear[0][3]) / firstPrevFinYear[0][3]) * 100,2) if firstPrevFinYear[0][3] != 0 else 11000011
#     if variationPassenger == 11000011:
#         variationPassenger = ['NaN','0']
#     elif float(variationPassenger) >= 0:
#         variationPassenger = [variationPassenger,'1']
#     else:
#         variationPassenger = [variationPassenger[1:],'2']
    
#     variationEmployee = "{:.2f}".format(((firstCurFinYear[0][6] - firstPrevFinYear[0][6]) / firstPrevFinYear[0][6]) * 100,2) if firstPrevFinYear[0][6] != 0 else 11000011
#     if variationEmployee == 11000011:
#         variationEmployee = ['NaN','0']
#     elif float(variationEmployee) >= 0:
#         variationEmployee = [variationEmployee,'1']
#     else:
#         variationEmployee = [variationEmployee[1:],'2']
    
#     variationOthers = float("{:.2f}".format(((firstCurFinYear[0][0] - firstPrevFinYear[0][0]) / firstPrevFinYear[0][0]) * 100,2)) if firstPrevFinYear[0][0] != 0 else 11000011
    
#     if variationOthers == 11000011:
#         variationOthers = ['NaN','0']
#     elif float(variationOthers) >= 0:
#         variationOthers = [variationOthers,'1']
#     else:
#         variationOthers = [variationOthers[1:],'2']

#     variationSuprise = "{:.2f}".format(((secondCurFinYear[0][3] - secondPrevFinYear[0][3]) / secondPrevFinYear[0][3]) * 100,2) if secondPrevFinYear[0][3] != 0 else 11000011
#     if variationSuprise == 11000011:
#         variationSuprise = ['NaN','0']
#     elif float(variationSuprise) >= 0:
#         variationSuprise = [variationSuprise,'1']
#     else:
#         variationSuprise = [variationSuprise[1:],'2']
    
#     variationDrive = "{:.2f}".format(((secondCurFinYear[0][6] - secondPrevFinYear[0][6]) / secondPrevFinYear[0][6]) * 100,2) if secondPrevFinYear[0][6] != 0 else 11000011
#     if variationDrive == 11000011:
#         variationDrive = ['NaN','0']
#     elif float(variationDrive) >= 0:
#         variationDrive = [variationDrive,'1']
#     else:
#         variationDrive = [variationDrive[1:],'2']
    
#     variationNight = "{:.2f}".format(((secondCurFinYear[0][0] - secondPrevFinYear[0][0]) / secondPrevFinYear[0][0]) * 100,2) if secondPrevFinYear[0][0] != 0 else 11000011
#     if variationNight == 11000011:
#         variationNight = ['NaN','0']
#     elif float(variationNight) >= 0:
#         variationNight = [variationNight,'1']
#     else:
#         variationNight = [variationNight[1:],'2']    
          
#     overallTotalCount =   firstRowAllData[0][10]+firstRowAllData[0][20]+firstRowAllData[0][0]+secondRowAllData[0][10]+secondRowAllData[0][20]+secondRowAllData[0][0]   
#     overallPendingCount = firstRowAllData[0][11]+firstRowAllData[0][21]+firstRowAllData[0][1]+secondRowAllData[0][11]+secondRowAllData[0][21]+secondRowAllData[0][1] 
#     overallOverdueCount = firstRowAllData[0][12]+firstRowAllData[0][22]+firstRowAllData[0][2]+secondRowAllData[0][12]+secondRowAllData[0][22]+secondRowAllData[0][2]
#     overallPendingPercentage = "{:.2f}".format((overallPendingCount/overallTotalCount)*100) if overallTotalCount != 0 else 0.00
#     overallOverduePercentage = "{:.2f}".format((overallOverdueCount/overallTotalCount)*100) if overallTotalCount != 0 else 0.00
#     for i in range(len(allDesignation)):
#         d_level = allDesignation[i]['d_level']
#         if d_level != None:
#             catData = list(models.category.objects.filter(category=d_level).values('hierarchy_level'))
#             if len(catData)>0:
#                 if catData[0]['hierarchy_level'] != None:
#                     allDesignation[i].update({'level':int(catData[0]['hierarchy_level'])})
#                 else:
#                     allDesignation[i].update({'level':1000})
#             else:
#                 allDesignation[i].update({'level':1000})
#         else:
#             allDesignation[i].update({'level':1000})
#     allDesignation = sorted(allDesignation, key = lambda x: (x['level'],x['designation']))           


    

#     print(variationPassenger,variationEmployee,variationOthers,variationSuprise,variationDrive,variationNight,overallTotalCount,overallPendingCount,overallOverdueCount,overallPendingPercentage,overallOverduePercentage)
#     context = {
#         'allDepartment':allDepartment,
#         'allDesignation':allDesignation,
#         'allFinYear':json.dumps([prevFinYear,curFinYear]),
#         'daysArray':daysArray,
#         'count_list1':json.dumps(count_list1),
#         'count_list2':json.dumps(count_list2),
#         'count_list3':json.dumps(count_list3),
#         'count_list4':json.dumps(count_list4),
#         'count_list5':json.dumps(count_list5),
#         'count_list6':json.dumps(count_list6),
#         'firstRowAllData':firstRowAllData,
#         'secondRowAllData':secondRowAllData,
#         'pendencyDataCard1':pendencyDataCard1,
#         'pendencyDataCard2':pendencyDataCard2,
#         'thirdRowData':thirdRowData,
#         'irTypeVal':irTypeVal,
#         'irDetailsVal':irDetailsVal,
#         'irMapVal':irMapVal,
#         'irPathVal1':irPathVal1,
#         'irPathVal2':irPathVal2,
#         'dataZoneWs':dataZoneWs,

#         'irSearchDept':irSearchDept,
#         'irSearchDate':irSearchDate,
#         'irSearchDesig':irSearchDesig,  

#         'variationPassenger':variationPassenger,  
#         'variationEmployee':variationEmployee,
#         'variationOthers':variationOthers,
#         'variationSuprise':variationSuprise,
#         'variationDrive':variationDrive,
#         'variationNight':variationNight,
#         'overallTotalCount':overallTotalCount,
#         'overallPendingCount':overallPendingCount,
#         'overallOverdueCount':overallOverdueCount,
#         'overallPendingPercentage':overallPendingPercentage,
#         'overallOverduePercentage':overallOverduePercentage,




#     }
#     return render(request,'svgtemplate.html',context)

# def inspectionDetailsMap(request):
#     N_DAYS_AGO = 4
#     today = datetime.now()    
#     n_days_ago = today - timedelta(days=N_DAYS_AGO)
#     daysArray=[]
#     for i in range(5):
#         daysArray.append((n_days_ago + timedelta(days=i)).strftime('%d/%m'))
#     daysArray = list(reversed(daysArray))
#     finYearCombined = finYear().split('-')
#     curFinYear = finYearCombined[0]+'-'+(finYearCombined[1])[2:]
#     prevFinYear = str(int(finYearCombined[0])-1)+'-'+(finYearCombined[0])[2:]

#     if request.method == "POST" and request.is_ajax():
#         typ = request.POST.get('typ')  
        
#         if typ == 'DesignationDetails':

#             dept = request.POST.get('dept')
#             print(dept)
#             if(dept == 'All'):
#                 irTypeVal = request.POST.get('irType')   
#                 irPath2 = request.POST.get('irPath2')
#                 irDetailsVal = request.POST.get('irDetails')
               
#                 if irTypeVal == 'ZR':   
#                     irTypeValData = ['ZR','DIV','WS']
#                 elif irTypeVal == 'All':   
#                     irTypeValData = ['ZR','DIV','WS','PU']
                
#                 elif irTypeVal == 'HQ':
#                     irTypeValData = ['ZR']
#                 else:
#                     irTypeValData = [irTypeVal]
#                 if irDetailsVal == 'All':
#                     allDesignation = list(models.Level_Desig.objects.filter(rly_unit__in = models.railwayLocationMaster.objects.filter(location_type__in = irTypeValData).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('designation'))
#                 else:
#                     allDesignation = list(models.Level_Desig.objects.filter(rly_unit__in = models.railwayLocationMaster.objects.filter(Q(location_code=irDetailsVal) | Q(parent_location_code=irDetailsVal),location_type__in = irTypeValData).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('designation'))
#                 if irPath2 != '':
#                     allDesignation = list(models.Level_Desig.objects.filter(rly_unit__in = models.railwayLocationMaster.objects.filter(Q(location_code=irPath2),location_type__in = irTypeValData).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('designation'))

#             else:
#                 irTypeVal = request.POST.get('irType')   
#                 irPath2 = request.POST.get('irPath2')
#                 irDetailsVal = request.POST.get('irDetails')
                
#                 if irTypeVal == 'ZR':   
#                     irTypeValData = ['ZR','DIV','WS']
#                 elif irTypeVal == 'All':   
#                     irTypeValData = ['ZR','DIV','WS','PU']
                
#                 elif irTypeVal == 'HQ':
#                     irTypeValData = ['ZR']
#                 else:
#                     irTypeValData = [irTypeVal]
#                 if irDetailsVal == 'All':
#                     allDesignation = list(models.Level_Desig.objects.filter(department_code=dept,rly_unit__in = models.railwayLocationMaster.objects.filter(location_type__in = irTypeValData).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('designation'))
#                 else:
#                     allDesignation = list(models.Level_Desig.objects.filter(department_code=dept,rly_unit__in = models.railwayLocationMaster.objects.filter(Q(location_code=irDetailsVal) | Q(parent_location_code=irDetailsVal),location_type__in = irTypeValData).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('designation'))
#                 if irPath2 != '':
#                     allDesignation = list(models.Level_Desig.objects.filter(department_code=dept,rly_unit__in = models.railwayLocationMaster.objects.filter(Q(location_code=irPath2),location_type__in = irTypeValData).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('designation'))




#             for i in range(len(allDesignation)):
#                 d_level = allDesignation[i]['d_level']
#                 if d_level != None:
#                     catData = list(models.category.objects.filter(category=d_level).values('hierarchy_level'))
#                     if len(catData)>0:
#                         if catData[0]['hierarchy_level'] != None:
#                             allDesignation[i].update({'level':int(catData[0]['hierarchy_level'])})
#                         else:
#                             allDesignation[i].update({'level':1000})
#                     else:
#                         allDesignation[i].update({'level':1000})
#                 else:
#                     allDesignation[i].update({'level':1000})
#             allDesignation = sorted(allDesignation, key = lambda x: (x['level'],x['designation']))    
            
#             print(allDesignation)
            
            
#             return JsonResponse(allDesignation, safe = False)
        
#     allDesignation = list(models.Level_Desig.objects.filter(rly_unit__in = models.railwayLocationMaster.objects.filter(location_type__in=['DIV','RB','ZR','PU','WS']).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('designation'))
#     allDepartment = list(models.departMast.objects.values('department_name','department_code').distinct().order_by('department_name'))


    
#     if request.method == "GET":
#         cursor = connection.cursor()
#         cursor.execute('''select sum(total_count_others)::int,sum(pending_count_others)::int,sum(pending_overdue_count_others)::int,
#             sum(total_count_passenger_safety)::int,sum(pending_count_passenger_safety)::int,sum(pending_overdue_count_passenger_safety)::int,
#             sum(total_count_employee_safety)::int,sum(pending_count_employee_safety)::int,sum(pending_overdue_count_employee_safety)::int
#             from inspection_analysis_table1 where fin_year=%s;''',[prevFinYear])
#         firstPrevFinYear = cursor.fetchall()
#         count_list1 =[]
#         count_list2 =[]
#         count_list3 =[]
#         if len(firstPrevFinYear)>0:
#             firstPrevFinYear = [list([x if x != None else 0 for x in firstPrevFinYear[0]])]
#             count_list3.append([firstPrevFinYear[0][0]-firstPrevFinYear[0][1],firstPrevFinYear[0][1],firstPrevFinYear[0][2]])
#             count_list1.append([firstPrevFinYear[0][3]-firstPrevFinYear[0][4],firstPrevFinYear[0][4],firstPrevFinYear[0][5]])
#             count_list2.append([firstPrevFinYear[0][6]-firstPrevFinYear[0][7],firstPrevFinYear[0][7],firstPrevFinYear[0][8]])
#         else:
#             count_list1.append([0,0,0])
#             count_list2.append([0,0,0])
#             count_list3.append([0,0,0])
        
#         cursor.execute('''select sum(total_count_others)::int,sum(pending_count_others)::int,sum(pending_overdue_count_others)::int,
#             sum(total_count_passenger_safety)::int,sum(pending_count_passenger_safety)::int,sum(pending_overdue_count_passenger_safety)::int,
#             sum(total_count_employee_safety)::int,sum(pending_count_employee_safety)::int,sum(pending_overdue_count_employee_safety)::int
#             from inspection_analysis_table1 where fin_year=%s;''',[curFinYear])
#         firstCurFinYear = cursor.fetchall()
        
#         if len(firstCurFinYear)>0:
#             firstCurFinYear = [list([x if x != None else 0 for x in firstCurFinYear[0]])]
#             count_list3.append([firstCurFinYear[0][0]-firstCurFinYear[0][1],firstCurFinYear[0][1],firstCurFinYear[0][2]])
#             count_list1.append([firstCurFinYear[0][3]-firstCurFinYear[0][4],firstCurFinYear[0][4],firstCurFinYear[0][5]])
#             count_list2.append([firstCurFinYear[0][6]-firstCurFinYear[0][7],firstCurFinYear[0][7],firstCurFinYear[0][8]])
#         else:
#             count_list1.append([0,0,0])
#             count_list2.append([0,0,0])
#             count_list3.append([0,0,0])

        

#         cursor.execute('''select sum(total_count_others)::int,sum(pending_count_others)::int,sum(pending_overdue_count_others)::int,
#                 round((case when sum(total_count_others) != 0 then sum(pending_count_others) / sum(total_count_others) else 0 end) *100,2),
#                 round((case when sum(total_count_others) != 0 then sum(pending_overdue_count_others) / sum(total_count_others) else 0 end) *100,2),
#                 sum(last_one_days_count_others)::int,sum(last_two_days_count_others)::int,sum(last_three_days_count_others)::int,
#                 sum(last_four_days_count_others)::int,sum(last_five_days_count_others)::int,			
#                 sum(total_count_passenger_safety)::int,sum(pending_count_passenger_safety)::int,sum(pending_overdue_count_passenger_safety)::int,
#                 round((case when sum(total_count_passenger_safety) != 0 then sum(pending_count_passenger_safety) / sum(total_count_passenger_safety) else 0 end) *100,2),
#                 round((case when sum(total_count_passenger_safety) != 0 then sum(pending_overdue_count_passenger_safety) / sum(total_count_passenger_safety) else 0 end) *100,2),
#                 sum(last_one_days_count_passenger_safety)::int,sum(last_two_days_count_passenger_safety)::int,sum(last_three_days_count_passenger_safety)::int,
#                 sum(last_four_days_count_passenger_safety)::int,sum(last_five_days_count_passenger_safety)::int,
#                 sum(total_count_employee_safety)::int,sum(pending_count_employee_safety)::int,sum(pending_overdue_count_employee_safety)::int,
#                 round((case when sum(total_count_employee_safety) != 0 then sum(pending_count_employee_safety) / sum(total_count_employee_safety) else 0 end) *100,2),
#                 round((case when sum(total_count_employee_safety) != 0 then sum(pending_overdue_count_employee_safety) / sum(total_count_employee_safety) else 0 end) *100,2),
#                 sum(last_one_days_count_employee_safety)::int,sum(last_two_days_count_employee_safety)::int,sum(last_three_days_count_employee_safety)::int,
#                 sum(last_four_days_count_employee_safety)::int,sum(last_five_days_count_employee_safety)::int
#                 from inspection_analysis_table1;''')
#         firstRowAllData = cursor.fetchall()


#         cursor.execute('''select sum(total_count_night_inspection)::int,sum(pending_count_night_inspection)::int,sum(pending_overdue_count_night_inspection)::int,
#             sum(total_count_surprise_inspection)::int,sum(pending_count_surprise_inspection)::int,sum(pending_overdue_count_surprise_inspection)::int,
#             sum(total_count_drive_based_inspection)::int,sum(pending_count_drive_based_inspection)::int,sum(pending_overdue_percentage_drive_based_inspection)::int
#             from inspection_analysis_table2 where fin_year=%s;''',[prevFinYear])
#         secondPrevFinYear = cursor.fetchall()
#         count_list4 =[]
#         count_list5 =[]
#         count_list6 =[]
#         if len(secondPrevFinYear)>0:
#             secondPrevFinYear = [list([x if x != None else 0 for x in secondPrevFinYear[0]])]
#             count_list4.append([secondPrevFinYear[0][0]-secondPrevFinYear[0][1],secondPrevFinYear[0][1],secondPrevFinYear[0][2]])
#             count_list5.append([secondPrevFinYear[0][3]-secondPrevFinYear[0][4],secondPrevFinYear[0][4],secondPrevFinYear[0][5]])
#             count_list6.append([secondPrevFinYear[0][6]-secondPrevFinYear[0][7],secondPrevFinYear[0][7],secondPrevFinYear[0][8]])
#         else:
#             count_list4.append([0,0,0])
#             count_list5.append([0,0,0])
#             count_list6.append([0,0,0])
#         cursor.execute('''select sum(total_count_night_inspection)::int,sum(pending_count_night_inspection)::int,sum(pending_overdue_count_night_inspection)::int,
#             sum(total_count_surprise_inspection)::int,sum(pending_count_surprise_inspection)::int,sum(pending_overdue_count_surprise_inspection)::int,
#             sum(total_count_drive_based_inspection)::int,sum(pending_count_drive_based_inspection)::int,sum(pending_overdue_percentage_drive_based_inspection)::int
#             from inspection_analysis_table2 where fin_year=%s;''',[curFinYear])
#         secondCurFinYear = cursor.fetchall()
        
#         if len(secondCurFinYear)>0:
#             secondCurFinYear = [list([x if x != None else 0 for x in secondCurFinYear[0]])]
#             count_list4.append([secondCurFinYear[0][0]-secondCurFinYear[0][1],secondCurFinYear[0][1],secondCurFinYear[0][2]])
#             count_list5.append([secondCurFinYear[0][3]-secondCurFinYear[0][4],secondCurFinYear[0][4],secondCurFinYear[0][5]])
#             count_list6.append([secondCurFinYear[0][6]-secondCurFinYear[0][7],secondCurFinYear[0][7],secondCurFinYear[0][8]])
#         else:
#             count_list4.append([0,0,0])
#             count_list5.append([0,0,0])
#             count_list6.append([0,0,0])

        

#         cursor.execute('''select sum(total_count_night_inspection)::int,sum(pending_count_night_inspection)::int,sum(pending_overdue_count_night_inspection)::int,
#             round((case when sum(total_count_night_inspection) != 0 then sum(pending_count_night_inspection) / sum(total_count_night_inspection) else 0 end) *100,2),
#             round((case when sum(total_count_night_inspection) != 0 then sum(pending_count_night_inspection) / sum(total_count_night_inspection) else 0 end) *100,2),
#             sum(last_one_days_count_night_inspection)::int,sum(last_two_days_count_night_inspection)::int,sum(last_three_days_count_night_inspection)::int,
#             sum(last_four_days_count_night_inspection)::int,sum(last_five_days_count_night_inspection)::int,	
#             sum(total_count_surprise_inspection)::int,sum(pending_count_surprise_inspection)::int,sum(pending_overdue_count_surprise_inspection)::int,
#             round((case when sum(total_count_surprise_inspection) != 0 then sum(pending_count_surprise_inspection) / sum(total_count_surprise_inspection) else 0 end) *100,2),
#             round((case when sum(total_count_surprise_inspection) != 0 then sum(pending_overdue_count_surprise_inspection) / sum(total_count_surprise_inspection) else 0 end) *100,2),
#             sum(last_one_days_count_surprise_inspection)::int,sum(last_two_days_count_surprise_inspection)::int,sum(last_three_days_count_surprise_inspection)::int,
#             sum(last_four_days_count_surprise_inspection)::int,sum(last_five_days_count_surprise_inspection)::int,
#             sum(total_count_drive_based_inspection)::int,sum(pending_count_drive_based_inspection)::int,sum(pending_overdue_percentage_drive_based_inspection)::int,
#             round((case when sum(total_count_drive_based_inspection) != 0 then sum(pending_overdue_percentage_drive_based_inspection) / sum(total_count_drive_based_inspection) else 0 end) *100,2),
#             round((case when sum(total_count_drive_based_inspection) != 0 then sum(pending_overdue_percentage_drive_based_inspection) / sum(total_count_drive_based_inspection) else 0 end) *100,2),
#             sum(last_one_days_count_drive_based_inspection)::int,sum(last_two_days_count_drive_based_inspection)::int,sum(last_three_days_count_drive_based_inspection)::int,
#             sum(last_four_days_count_drive_based_inspection)::int,sum(last_five_days_count_drive_based_inspection)::int
#             from inspection_analysis_table2;''')
#         secondRowAllData = cursor.fetchall()

#         #########   forth row card(pendency)

#         cursor.execute('''select sum(count_7_days_passenger_safety),sum(count_30_days_passenger_safety),sum(count_90_days_passenger_safety),
#             sum(count_180_days_passenger_safety),sum(count_365_days_passenger_safety),
#             sum(count_7_days_employee_safety),sum(count_30_days_employee_safety),sum(count_90_days_employee_safety),
#             sum(count_180_days_employee_safety),sum(count_365_days_employee_safety),
#             sum(count_7_days_others),sum(count_30_days_others),sum(count_90_days_others),
#             sum(count_180_days_others),sum(count_365_days_others)
#             from inspection_pendency_analysis_table1;''')
#         pendencyDataCard1 = cursor.fetchall()

#         cursor.execute('''select sum(count_7_days_night_inspection),sum(count_30_days_night_inspection),sum(count_90_days_night_inspection),
#             sum(count_180_days_night_inspection),sum(count_365_days_night_inspection),
#             sum(count_7_days_surprise_inspection),sum(count_30_days_surprise_inspection),sum(count_90_days_surprise_inspection),
#             sum(count_180_days_surprise_inspection),sum(count_365_days_surprise_inspection),
#             sum(count_7_days_drive_based_inspection),sum(count_30_days_drive_based_inspection),sum(count_90_days_drive_based_inspection),
#             sum(count_180_days_drive_based_inspection),sum(count_365_days_drive_based_inspection),
#             sum(count_7_days_regular_inspection),sum(count_30_days_regular_inspection),sum(count_90_days_regular_inspection),
#             sum(count_180_days_regular_inspection),sum(count_365_days_regular_inspection)
#             from inspection_pendency_analysis_table2;''')
#         pendencyDataCard2 = cursor.fetchall()


#         cursor.execute('''select  sum(total_count_station_passenger_safety),sum(total_count_station_employee_safety),sum(total_count_station_others),
#             sum(total_count_station_night_inspection),sum(total_count_station_surprise_inspection),sum(total_count_station_drive_inspection),
#             sum(total_count_section_passenger_safety),sum(total_count_section_employee_safety),sum(total_count_section_others),
#             sum(total_count_section_night_inspection),sum(total_count_section_surprise_inspection),sum(total_count_section_drive_inspection),
#             sum(total_count_train_passenger_safety),sum(total_count_train_employee_safety),sum(total_count_train_others),
#             sum(total_count_train_night_inspection),sum(total_count_train_surprise_inspection),sum(total_count_train_drive_inspection),
#             sum(total_count_others_passenger_safety),sum(total_count_others_employee_safety),sum(total_count_others_others),
#             sum(total_count_others_night_inspection),sum(total_count_others_surprise_inspection),sum(total_count_others_drive_inspection),
#             round((case when sum(total_count_station_passenger_safety) != 0 then sum(pending_count_station_passenger_safety) / sum(total_count_station_passenger_safety) else 0 end) *100,2),
#             round((case when sum(total_count_station_employee_safety) != 0 then sum(pending_count_station_employee_safety) / sum(total_count_station_employee_safety) else 0 end) *100,2),
#             round((case when sum(total_count_station_others) != 0 then sum(pending_count_station_others) / sum(total_count_station_others) else 0 end) *100,2),
#             round((case when sum(total_count_station_night_inspection) != 0 then sum(pending_count_station_night_inspection) / sum(total_count_station_night_inspection) else 0 end) *100,2),
#             round((case when sum(total_count_station_surprise_inspection) != 0 then sum(pending_count_station_surprise_inspection) / sum(total_count_station_surprise_inspection) else 0 end) *100,2),
#             round((case when sum(total_count_station_drive_inspection) != 0 then sum(pending_count_station_drive_inspection) / sum(total_count_station_drive_inspection) else 0 end) *100,2),
#             round((case when sum(total_count_section_passenger_safety) != 0 then sum(pending_count_section_passenger_safety) / sum(total_count_section_passenger_safety) else 0 end) *100,2),
#             round((case when sum(total_count_section_employee_safety) != 0 then sum(pending_count_section_employee_safety) / sum(total_count_section_employee_safety) else 0 end) *100,2),
#             round((case when sum(total_count_section_others) != 0 then sum(pending_count_section_others) / sum(total_count_section_others) else 0 end) *100,2),
#             round((case when sum(total_count_section_night_inspection) != 0 then sum(pending_count_section_night_inspection) / sum(total_count_section_night_inspection) else 0 end) *100,2),
#             round((case when sum(total_count_section_surprise_inspection) != 0 then sum(pending_count_section_surprise_inspection) / sum(total_count_section_surprise_inspection) else 0 end) *100,2),
#             round((case when sum(total_count_section_drive_inspection) != 0 then sum(pending_count_section_drive_inspection) / sum(total_count_section_drive_inspection) else 0 end) *100,2),
#             round((case when sum(total_count_train_passenger_safety) != 0 then sum(pending_count_train_passenger_safety) / sum(total_count_train_passenger_safety) else 0 end) *100,2),
#             round((case when sum(total_count_train_employee_safety) != 0 then sum(pending_count_train_employee_safety) / sum(total_count_train_employee_safety) else 0 end) *100,2),
#             round((case when sum(total_count_train_others) != 0 then sum(pending_count_train_others) / sum(total_count_train_others) else 0 end) *100,2),
#             round((case when sum(total_count_train_night_inspection) != 0 then sum(pending_count_train_night_inspection) / sum(total_count_train_night_inspection) else 0 end) *100,2),
#             round((case when sum(total_count_train_surprise_inspection) != 0 then sum(pending_count_train_surprise_inspection) / sum(total_count_train_surprise_inspection) else 0 end) *100,2),
#             round((case when sum(total_count_train_drive_inspection) != 0 then sum(pending_count_train_drive_inspection) / sum(total_count_train_drive_inspection) else 0 end) *100,2),
#             round((case when sum(total_count_others_passenger_safety) != 0 then sum(pending_count_others_passenger_safety) / sum(total_count_others_passenger_safety) else 0 end) *100,2),
#             round((case when sum(total_count_others_employee_safety) != 0 then sum(pending_count_others_employee_safety) / sum(total_count_others_employee_safety) else 0 end) *100,2),
#             round((case when sum(total_count_others_others) != 0 then sum(pending_count_others_others) / sum(total_count_others_others) else 0 end) *100,2),
#             round((case when sum(total_count_others_night_inspection) != 0 then sum(total_count_others_night_inspection) / sum(total_count_others_night_inspection) else 0 end) *100,2),
#             round((case when sum(total_count_others_surprise_inspection) != 0 then sum(total_count_others_surprise_inspection) / sum(total_count_others_surprise_inspection) else 0 end) *100,2),
#             round((case when sum(total_count_others_drive_inspection) != 0 then sum(total_count_others_drive_inspection) / sum(total_count_others_drive_inspection) else 0 end) *100,2)
#             from inspection_analysis_table3;''')
#         thirdRowData = cursor.fetchall()


        


#         cursor.close()
#         irTypeVal = 'All'
#         irDetailsVal = 'All'
#         irMapVal = '1'
#         irPathVal1 = None
#         irPathVal2 = ''
#         dataZoneWs = []
#         irPath2 = None
#         irSearchDept = ""
#         irSearchDate = ""
#         irSearchDesig = ""

    
#     if request.method == "POST":
#         submitvalue = request.POST.get('submit')
#         irPathVal1 = None
#         irPathVal2 = ''
#         dataZoneWs = []
#         irSearchDept = ""
#         irSearchDate = ""
#         irSearchDesig = ""
#         if submitvalue == 'irSubmitButton':
#             cursor = connection.cursor()
#             irTypeVal = request.POST.get('irType')  
#             irPath2 = request.POST.get('irPath2')
#             if irTypeVal == 'PU':
#                 irMapVal = '2'
#             else:
#                 irMapVal = '1'
#             irDetailsVal = request.POST.get('irDetails')
#             if irTypeVal == 'DIV':
#                 zone = irDetailsVal
#                 dataZoneWs = list(models.railwayLocationMaster.objects.filter(parent_location_code=zone,location_type = 'DIV').values('location_code','location_description').order_by('location_code'))
                
#             elif irTypeVal == 'WS':
#                 zone = irDetailsVal
#                 dataZoneWs = list(models.railwayLocationMaster.objects.filter(parent_location_code=zone,location_type = 'WS').values('location_code','location_description').order_by('location_code'))
            
#             if irTypeVal == 'ZR':   
#                 irTypeValData = ['ZR','DIV','WS']
#             elif irTypeVal == 'All':   
#                 irTypeValData = ['ZR','DIV','WS','PU']
            
#             elif irTypeVal == 'HQ':
#                 irTypeValData = ['ZR']
#             else:
#                 irTypeValData = [irTypeVal]
            

#             if irDetailsVal == 'All':
#                 allLocationCodeData = tuple(models.railwayLocationMaster.objects.filter(location_type__in = irTypeValData).values_list('location_code',flat=True).distinct())
#                 allDesignation = list(models.Level_Desig.objects.filter(rly_unit__in = models.railwayLocationMaster.objects.filter(location_type__in = irTypeValData).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('designation'))

#             else:
#                 irPathVal1 = irDetailsVal
#                 allLocationCodeData = list(models.railwayLocationMaster.objects.filter(Q(parent_location_code=irDetailsVal)).values_list('location_code',flat=True).distinct())
#                 allDesignation = list(models.Level_Desig.objects.filter(rly_unit__in = models.railwayLocationMaster.objects.filter(Q(location_code=irDetailsVal) | Q(parent_location_code=irDetailsVal),location_type__in = irTypeValData).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('designation'))

#                 allLocationCodeData.append(irDetailsVal)
#                 allLocationCodeData = tuple(allLocationCodeData)
            
#             if irPath2 != '':
#                 irPathVal2 = irPath2
#                 allDesignation = list(models.Level_Desig.objects.filter(rly_unit__in = models.railwayLocationMaster.objects.filter(Q(location_code=irPath2),location_type__in = irTypeValData).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('designation'))

#                 allLocationCodeData = tuple([irPath2])
#                 irTypeValData = [irTypeVal]




#             irSearchType = request.POST.get('irSearchType')
#             if irSearchType == 'Yes':
#                 irSearchDept = request.POST.get('irSearchDept')
#                 if irSearchDept == 'All':
#                     irSearchDept = ""
#                     allDepartmentData = tuple(models.departMast.objects.values_list('department_name',flat=True).distinct())
#                 else:
#                     allDepartmentData = tuple(models.departMast.objects.filter(department_code=irSearchDept).values_list('department_name',flat=True).distinct())
                
#                 irSearchDesig = request.POST.get('irSearchDesig')
#                 if  irSearchDesig == 'All':
#                     irSearchDesig = ""
#                     allDesignationData = tuple(models.Level_Desig.objects.filter(rly_unit__in = models.railwayLocationMaster.objects.filter(location_type__in=['DIV','RB','ZR','WS','PU']).values('rly_unit_code')).values_list('designation_code',flat=True).distinct())
#                 else:
#                     irSearchDesig = int(irSearchDesig)
#                     allDesignationData = tuple([irSearchDesig])
                    

                
#                 irSearchDate = request.POST.get('irSearchDate')
#                 if irSearchDate == "":
#                     startDate = '2020-04-01'
#                     endDate = datetime.now().strftime('%Y-%m-%d')
#                 else:
#                     irSearchDate11 = irSearchDate.split('-')
#                     start1 = irSearchDate11[0].split('/')
#                     end1 = irSearchDate11[1].split('/')
#                     startDate = '20'+start1[2]+'-'+start1[1]+'-'+start1[0]
#                     endDate = '20'+end1[2]+'-'+end1[1]+'-'+end1[0]
#                 cursor.execute('''select sum(total_count_others)::int,sum(pending_count_others)::int,sum(pending_overdue_count_others)::int,
#                     sum(total_count_passenger_safety)::int,sum(pending_count_passenger_safety)::int,sum(pending_overdue_count_passenger_safety)::int,
#                     sum(total_count_employee_safety)::int,sum(pending_count_employee_safety)::int,sum(pending_overdue_count_employee_safety)::int
#                     from view_inspection_analysis_table1 where fin_year=%s and location_type in %s  and location_code in %s and inspected_on between %s and %s
#                     and designation_code in %s and department in %s;''',[prevFinYear,tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData])
#                 firstPrevFinYear = cursor.fetchall()
                
#                 count_list1 =[]
#                 count_list2 =[]
#                 count_list3 =[]
#                 if len(firstPrevFinYear)>0:
#                     firstPrevFinYear = [list([x if x != None else 0 for x in firstPrevFinYear[0] ])]
#                     count_list3.append([firstPrevFinYear[0][0]-firstPrevFinYear[0][1],firstPrevFinYear[0][1],firstPrevFinYear[0][2]])
#                     count_list1.append([firstPrevFinYear[0][3]-firstPrevFinYear[0][4],firstPrevFinYear[0][4],firstPrevFinYear[0][5]])
#                     count_list2.append([firstPrevFinYear[0][6]-firstPrevFinYear[0][7],firstPrevFinYear[0][7],firstPrevFinYear[0][8]])
#                 else:
#                     count_list1.append([0,0,0])
#                     count_list2.append([0,0,0])
#                     count_list3.append([0,0,0])
#                 cursor.execute('''select sum(total_count_others)::int,sum(pending_count_others)::int,sum(pending_overdue_count_others)::int,
#                     sum(total_count_passenger_safety)::int,sum(pending_count_passenger_safety)::int,sum(pending_overdue_count_passenger_safety)::int,
#                     sum(total_count_employee_safety)::int,sum(pending_count_employee_safety)::int,sum(pending_overdue_count_employee_safety)::int
#                     from view_inspection_analysis_table1 where fin_year=%s and location_type in %s  and location_code in %s and inspected_on between %s and %s
#                     and designation_code in %s and department in %s;''',[curFinYear,tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData])
#                 firstCurFinYear = cursor.fetchall()
                
#                 if len(firstCurFinYear)>0:
#                     firstCurFinYear = [list([x if x != None else 0 for x in firstCurFinYear[0] ])]
#                     count_list3.append([firstCurFinYear[0][0]-firstCurFinYear[0][1],firstCurFinYear[0][1],firstCurFinYear[0][2]])
#                     count_list1.append([firstCurFinYear[0][3]-firstCurFinYear[0][4],firstCurFinYear[0][4],firstCurFinYear[0][5]])
#                     count_list2.append([firstCurFinYear[0][6]-firstCurFinYear[0][7],firstCurFinYear[0][7],firstCurFinYear[0][8]])
#                 else:
#                     count_list1.append([0,0,0])
#                     count_list2.append([0,0,0])
#                     count_list3.append([0,0,0])

#                 cursor.execute('''select sum(total_count_others)::int,sum(pending_count_others)::int,sum(pending_overdue_count_others)::int,
#                         round((case when sum(total_count_others) != 0 then sum(pending_count_others) / sum(total_count_others) else 0 end) *100,2),
#                         round((case when sum(total_count_others) != 0 then sum(pending_overdue_count_others) / sum(total_count_others) else 0 end) *100,2),
#                         sum(last_one_days_count_others)::int,sum(last_two_days_count_others)::int,sum(last_three_days_count_others)::int,
#                         sum(last_four_days_count_others)::int,sum(last_five_days_count_others)::int,			
#                         sum(total_count_passenger_safety)::int,sum(pending_count_passenger_safety)::int,sum(pending_overdue_count_passenger_safety)::int,
#                         round((case when sum(total_count_passenger_safety) != 0 then sum(pending_count_passenger_safety) / sum(total_count_passenger_safety) else 0 end) *100,2),
#                         round((case when sum(total_count_passenger_safety) != 0 then sum(pending_overdue_count_passenger_safety) / sum(total_count_passenger_safety) else 0 end) *100,2),
#                         sum(last_one_days_count_passenger_safety)::int,sum(last_two_days_count_passenger_safety)::int,sum(last_three_days_count_passenger_safety)::int,
#                         sum(last_four_days_count_passenger_safety)::int,sum(last_five_days_count_passenger_safety)::int,
#                         sum(total_count_employee_safety)::int,sum(pending_count_employee_safety)::int,sum(pending_overdue_count_employee_safety)::int,
#                         round((case when sum(total_count_employee_safety) != 0 then sum(pending_count_employee_safety) / sum(total_count_employee_safety) else 0 end) *100,2),
#                         round((case when sum(total_count_employee_safety) != 0 then sum(pending_overdue_count_employee_safety) / sum(total_count_employee_safety) else 0 end) *100,2),
#                         sum(last_one_days_count_employee_safety)::int,sum(last_two_days_count_employee_safety)::int,sum(last_three_days_count_employee_safety)::int,
#                         sum(last_four_days_count_employee_safety)::int,sum(last_five_days_count_employee_safety)::int
#                         from view_inspection_analysis_table1 where location_type in %s  and location_code in %s and inspected_on between %s and %s
#                         and designation_code in %s and department in %s;''',[tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData])
#                 firstRowAllData = cursor.fetchall()
                
#                 firstRowAllData = [list([x if x != None else 0 for x in firstRowAllData[0] ])]
                



#                 cursor.execute('''select sum(total_count_night_inspection)::int,sum(pending_count_night_inspection)::int,sum(pending_overdue_count_night_inspection)::int,
#                     sum(total_count_surprise_inspection)::int,sum(pending_count_surprise_inspection)::int,sum(pending_overdue_count_surprise_inspection)::int,
#                     sum(total_count_drive_based_inspection)::int,sum(pending_count_drive_based_inspection)::int,sum(pending_overdue_percentage_drive_based_inspection)::int
#                     from view_inspection_analysis_table2 where fin_year=%s and location_type in %s  and location_code in %s and inspected_on between %s and %s
#                     and designation_code in %s and department in %s;''',[prevFinYear,tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData])
#                 secondPrevFinYear = cursor.fetchall()
                
#                 count_list4 =[]
#                 count_list5 =[]
#                 count_list6 =[]
#                 if len(secondPrevFinYear)>0:
#                     secondPrevFinYear = [list([x if x != None else 0 for x in secondPrevFinYear[0] ])]
#                     count_list4.append([secondPrevFinYear[0][0]-secondPrevFinYear[0][1],secondPrevFinYear[0][1],secondPrevFinYear[0][2]])
#                     count_list5.append([secondPrevFinYear[0][3]-secondPrevFinYear[0][4],secondPrevFinYear[0][4],secondPrevFinYear[0][5]])
#                     count_list6.append([secondPrevFinYear[0][6]-secondPrevFinYear[0][7],secondPrevFinYear[0][7],secondPrevFinYear[0][8]])
#                 else:
#                     count_list4.append([0,0,0])
#                     count_list5.append([0,0,0])
#                     count_list6.append([0,0,0])
#                 cursor.execute('''select sum(total_count_night_inspection)::int,sum(pending_count_night_inspection)::int,sum(pending_overdue_count_night_inspection)::int,
#                     sum(total_count_surprise_inspection)::int,sum(pending_count_surprise_inspection)::int,sum(pending_overdue_count_surprise_inspection)::int,
#                     sum(total_count_drive_based_inspection)::int,sum(pending_count_drive_based_inspection)::int,sum(pending_overdue_percentage_drive_based_inspection)::int
#                     from view_inspection_analysis_table2 where fin_year=%s and location_type in %s  and location_code in %s  and inspected_on between %s and %s
#                     and designation_code in %s and department in %s;''',[curFinYear,tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData])
#                 secondCurFinYear = cursor.fetchall()
                
#                 if len(secondCurFinYear)>0:
#                     secondCurFinYear = [list([x if x != None else 0 for x in secondCurFinYear[0] ])]
#                     count_list4.append([secondCurFinYear[0][0]-secondCurFinYear[0][1],secondCurFinYear[0][1],secondCurFinYear[0][2]])
#                     count_list5.append([secondCurFinYear[0][3]-secondCurFinYear[0][4],secondCurFinYear[0][4],secondCurFinYear[0][5]])
#                     count_list6.append([secondCurFinYear[0][6]-secondCurFinYear[0][7],secondCurFinYear[0][7],secondCurFinYear[0][8]])
#                 else:
#                     count_list4.append([0,0,0])
#                     count_list5.append([0,0,0])
#                     count_list6.append([0,0,0])

#                 cursor.execute('''select sum(total_count_night_inspection)::int,sum(pending_count_night_inspection)::int,sum(pending_overdue_count_night_inspection)::int,
#                     round((case when sum(total_count_night_inspection) != 0 then sum(pending_count_night_inspection) / sum(total_count_night_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_night_inspection) != 0 then sum(pending_count_night_inspection) / sum(total_count_night_inspection) else 0 end) *100,2),
#                     sum(last_one_days_count_night_inspection)::int,sum(last_two_days_count_night_inspection)::int,sum(last_three_days_count_night_inspection)::int,
#                     sum(last_four_days_count_night_inspection)::int,sum(last_five_days_count_night_inspection)::int,	
#                     sum(total_count_surprise_inspection)::int,sum(pending_count_surprise_inspection)::int,sum(pending_overdue_count_surprise_inspection)::int,
#                     round((case when sum(total_count_surprise_inspection) != 0 then sum(pending_count_surprise_inspection) / sum(total_count_surprise_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_surprise_inspection) != 0 then sum(pending_overdue_count_surprise_inspection) / sum(total_count_surprise_inspection) else 0 end) *100,2),
#                     sum(last_one_days_count_surprise_inspection)::int,sum(last_two_days_count_surprise_inspection)::int,sum(last_three_days_count_surprise_inspection)::int,
#                     sum(last_four_days_count_surprise_inspection)::int,sum(last_five_days_count_surprise_inspection)::int,
#                     sum(total_count_drive_based_inspection)::int,sum(pending_count_drive_based_inspection)::int,sum(pending_overdue_percentage_drive_based_inspection)::int,
#                     round((case when sum(total_count_drive_based_inspection) != 0 then sum(pending_overdue_percentage_drive_based_inspection) / sum(total_count_drive_based_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_drive_based_inspection) != 0 then sum(pending_overdue_percentage_drive_based_inspection) / sum(total_count_drive_based_inspection) else 0 end) *100,2),
#                     sum(last_one_days_count_drive_based_inspection)::int,sum(last_two_days_count_drive_based_inspection)::int,sum(last_three_days_count_drive_based_inspection)::int,
#                     sum(last_four_days_count_drive_based_inspection)::int,sum(last_five_days_count_drive_based_inspection)::int
#                     from view_inspection_analysis_table2 where location_type in %s  and location_code in %s and inspected_on between %s and %s
#                     and designation_code in %s and department in %s;''',[tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData])
#                 secondRowAllData = cursor.fetchall()
#                 secondRowAllData = [list([x if x != None else 0 for x in secondRowAllData[0] ])]

#                 #########   forth row card(pendency)

#                 cursor.execute('''select sum(count_7_days_passenger_safety),sum(count_30_days_passenger_safety),sum(count_90_days_passenger_safety),
#                     sum(count_180_days_passenger_safety),sum(count_365_days_passenger_safety),
#                     sum(count_7_days_employee_safety),sum(count_30_days_employee_safety),sum(count_90_days_employee_safety),
#                     sum(count_180_days_employee_safety),sum(count_365_days_employee_safety),
#                     sum(count_7_days_others),sum(count_30_days_others),sum(count_90_days_others),
#                     sum(count_180_days_others),sum(count_365_days_others)
#                     from view_inspection_pendency_analysis_table1 where location_type in %s  and location_code in %s and inspected_on between %s and %s
#                     and designation_code in %s and department in %s;''',[tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData])
#                 pendencyDataCard1 = cursor.fetchall()
#                 pendencyDataCard1 = [list([x if x != None else 0 for x in pendencyDataCard1[0] ])]

#                 cursor.execute('''select sum(count_7_days_night_inspection),sum(count_30_days_night_inspection),sum(count_90_days_night_inspection),
#                     sum(count_180_days_night_inspection),sum(count_365_days_night_inspection),
#                     sum(count_7_days_surprise_inspection),sum(count_30_days_surprise_inspection),sum(count_90_days_surprise_inspection),
#                     sum(count_180_days_surprise_inspection),sum(count_365_days_surprise_inspection),
#                     sum(count_7_days_drive_based_inspection),sum(count_30_days_drive_based_inspection),sum(count_90_days_drive_based_inspection),
#                     sum(count_180_days_drive_based_inspection),sum(count_365_days_drive_based_inspection),
#                     sum(count_7_days_regular_inspection),sum(count_30_days_regular_inspection),sum(count_90_days_regular_inspection),
#                     sum(count_180_days_regular_inspection),sum(count_365_days_regular_inspection)
#                     from view_inspection_pendency_analysis_table2 where location_type in %s  and location_code in %s and inspected_on between %s and %s
#                     and designation_code in %s and department in %s;''',[tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData])
#                 pendencyDataCard2 = cursor.fetchall()
#                 pendencyDataCard2 = [list([x if x != None else 0 for x in pendencyDataCard2[0] ])]


#                 cursor.execute('''select  sum(total_count_station_passenger_safety),sum(total_count_station_employee_safety),sum(total_count_station_others),
#                     sum(total_count_station_night_inspection),sum(total_count_station_surprise_inspection),sum(total_count_station_drive_inspection),
#                     sum(total_count_section_passenger_safety),sum(total_count_section_employee_safety),sum(total_count_section_others),
#                     sum(total_count_section_night_inspection),sum(total_count_section_surprise_inspection),sum(total_count_section_drive_inspection),
#                     sum(total_count_train_passenger_safety),sum(total_count_train_employee_safety),sum(total_count_train_others),
#                     sum(total_count_train_night_inspection),sum(total_count_train_surprise_inspection),sum(total_count_train_drive_inspection),
#                     sum(total_count_others_passenger_safety),sum(total_count_others_employee_safety),sum(total_count_others_others),
#                     sum(total_count_others_night_inspection),sum(total_count_others_surprise_inspection),sum(total_count_others_drive_inspection),
#                     round((case when sum(total_count_station_passenger_safety) != 0 then sum(pending_count_station_passenger_safety) / sum(total_count_station_passenger_safety) else 0 end) *100,2),
#                     round((case when sum(total_count_station_employee_safety) != 0 then sum(pending_count_station_employee_safety) / sum(total_count_station_employee_safety) else 0 end) *100,2),
#                     round((case when sum(total_count_station_others) != 0 then sum(pending_count_station_others) / sum(total_count_station_others) else 0 end) *100,2),
#                     round((case when sum(total_count_station_night_inspection) != 0 then sum(pending_count_station_night_inspection) / sum(total_count_station_night_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_station_surprise_inspection) != 0 then sum(pending_count_station_surprise_inspection) / sum(total_count_station_surprise_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_station_drive_inspection) != 0 then sum(pending_count_station_drive_inspection) / sum(total_count_station_drive_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_section_passenger_safety) != 0 then sum(pending_count_section_passenger_safety) / sum(total_count_section_passenger_safety) else 0 end) *100,2),
#                     round((case when sum(total_count_section_employee_safety) != 0 then sum(pending_count_section_employee_safety) / sum(total_count_section_employee_safety) else 0 end) *100,2),
#                     round((case when sum(total_count_section_others) != 0 then sum(pending_count_section_others) / sum(total_count_section_others) else 0 end) *100,2),
#                     round((case when sum(total_count_section_night_inspection) != 0 then sum(pending_count_section_night_inspection) / sum(total_count_section_night_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_section_surprise_inspection) != 0 then sum(pending_count_section_surprise_inspection) / sum(total_count_section_surprise_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_section_drive_inspection) != 0 then sum(pending_count_section_drive_inspection) / sum(total_count_section_drive_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_train_passenger_safety) != 0 then sum(pending_count_train_passenger_safety) / sum(total_count_train_passenger_safety) else 0 end) *100,2),
#                     round((case when sum(total_count_train_employee_safety) != 0 then sum(pending_count_train_employee_safety) / sum(total_count_train_employee_safety) else 0 end) *100,2),
#                     round((case when sum(total_count_train_others) != 0 then sum(pending_count_train_others) / sum(total_count_train_others) else 0 end) *100,2),
#                     round((case when sum(total_count_train_night_inspection) != 0 then sum(pending_count_train_night_inspection) / sum(total_count_train_night_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_train_surprise_inspection) != 0 then sum(pending_count_train_surprise_inspection) / sum(total_count_train_surprise_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_train_drive_inspection) != 0 then sum(pending_count_train_drive_inspection) / sum(total_count_train_drive_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_others_passenger_safety) != 0 then sum(pending_count_others_passenger_safety) / sum(total_count_others_passenger_safety) else 0 end) *100,2),
#                     round((case when sum(total_count_others_employee_safety) != 0 then sum(pending_count_others_employee_safety) / sum(total_count_others_employee_safety) else 0 end) *100,2),
#                     round((case when sum(total_count_others_others) != 0 then sum(pending_count_others_others) / sum(total_count_others_others) else 0 end) *100,2),
#                     round((case when sum(total_count_others_night_inspection) != 0 then sum(total_count_others_night_inspection) / sum(total_count_others_night_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_others_surprise_inspection) != 0 then sum(total_count_others_surprise_inspection) / sum(total_count_others_surprise_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_others_drive_inspection) != 0 then sum(total_count_others_drive_inspection) / sum(total_count_others_drive_inspection) else 0 end) *100,2)
#                     from view_inspection_analysis_table3 where location_type in %s  and location_code in %s and inspected_on between %s and %s
#                     and designation_code in %s and department in %s;''',[tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData])
#                 thirdRowData = cursor.fetchall()
#                 thirdRowData = [list([x if x != None else 0 for x in thirdRowData[0] ])]
                

#             else:
#                 cursor.execute('''select sum(total_count_others)::int,sum(pending_count_others)::int,sum(pending_overdue_count_others)::int,
#                     sum(total_count_passenger_safety)::int,sum(pending_count_passenger_safety)::int,sum(pending_overdue_count_passenger_safety)::int,
#                     sum(total_count_employee_safety)::int,sum(pending_count_employee_safety)::int,sum(pending_overdue_count_employee_safety)::int
#                     from inspection_analysis_table1 where fin_year=%s and location_type in %s  and location_code in %s;''',[prevFinYear,tuple(irTypeValData),allLocationCodeData])
#                 firstPrevFinYear = cursor.fetchall()
#                 count_list1 =[]
#                 count_list2 =[]
#                 count_list3 =[]
#                 if len(firstPrevFinYear)>0:
#                     firstPrevFinYear = [list([x if x != None else 0 for x in firstPrevFinYear[0] ])]
#                     count_list3.append([firstPrevFinYear[0][0]-firstPrevFinYear[0][1],firstPrevFinYear[0][1],firstPrevFinYear[0][2]])
#                     count_list1.append([firstPrevFinYear[0][3]-firstPrevFinYear[0][4],firstPrevFinYear[0][4],firstPrevFinYear[0][5]])
#                     count_list2.append([firstPrevFinYear[0][6]-firstPrevFinYear[0][7],firstPrevFinYear[0][7],firstPrevFinYear[0][8]])
#                 else:
#                     count_list1.append([0,0,0])
#                     count_list2.append([0,0,0])
#                     count_list3.append([0,0,0])
#                 cursor.execute('''select sum(total_count_others)::int,sum(pending_count_others)::int,sum(pending_overdue_count_others)::int,
#                     sum(total_count_passenger_safety)::int,sum(pending_count_passenger_safety)::int,sum(pending_overdue_count_passenger_safety)::int,
#                     sum(total_count_employee_safety)::int,sum(pending_count_employee_safety)::int,sum(pending_overdue_count_employee_safety)::int
#                     from inspection_analysis_table1 where fin_year=%s and location_type in %s  and location_code in %s;''',[curFinYear,tuple(irTypeValData),allLocationCodeData])
#                 firstCurFinYear = cursor.fetchall()
                
#                 if len(firstCurFinYear)>0:
#                     firstCurFinYear = [list([x if x != None else 0 for x in firstCurFinYear[0] ])]
#                     count_list3.append([firstCurFinYear[0][0]-firstCurFinYear[0][1],firstCurFinYear[0][1],firstCurFinYear[0][2]])
#                     count_list1.append([firstCurFinYear[0][3]-firstCurFinYear[0][4],firstCurFinYear[0][4],firstCurFinYear[0][5]])
#                     count_list2.append([firstCurFinYear[0][6]-firstCurFinYear[0][7],firstCurFinYear[0][7],firstCurFinYear[0][8]])
#                 else:
#                     count_list1.append([0,0,0])
#                     count_list2.append([0,0,0])
#                     count_list3.append([0,0,0])

#                 cursor.execute('''select sum(total_count_others)::int,sum(pending_count_others)::int,sum(pending_overdue_count_others)::int,
#                         round((case when sum(total_count_others) != 0 then sum(pending_count_others) / sum(total_count_others) else 0 end) *100,2),
#                         round((case when sum(total_count_others) != 0 then sum(pending_overdue_count_others) / sum(total_count_others) else 0 end) *100,2),
#                         sum(last_one_days_count_others)::int,sum(last_two_days_count_others)::int,sum(last_three_days_count_others)::int,
#                         sum(last_four_days_count_others)::int,sum(last_five_days_count_others)::int,			
#                         sum(total_count_passenger_safety)::int,sum(pending_count_passenger_safety)::int,sum(pending_overdue_count_passenger_safety)::int,
#                         round((case when sum(total_count_passenger_safety) != 0 then sum(pending_count_passenger_safety) / sum(total_count_passenger_safety) else 0 end) *100,2),
#                         round((case when sum(total_count_passenger_safety) != 0 then sum(pending_overdue_count_passenger_safety) / sum(total_count_passenger_safety) else 0 end) *100,2),
#                         sum(last_one_days_count_passenger_safety)::int,sum(last_two_days_count_passenger_safety)::int,sum(last_three_days_count_passenger_safety)::int,
#                         sum(last_four_days_count_passenger_safety)::int,sum(last_five_days_count_passenger_safety)::int,
#                         sum(total_count_employee_safety)::int,sum(pending_count_employee_safety)::int,sum(pending_overdue_count_employee_safety)::int,
#                         round((case when sum(total_count_employee_safety) != 0 then sum(pending_count_employee_safety) / sum(total_count_employee_safety) else 0 end) *100,2),
#                         round((case when sum(total_count_employee_safety) != 0 then sum(pending_overdue_count_employee_safety) / sum(total_count_employee_safety) else 0 end) *100,2),
#                         sum(last_one_days_count_employee_safety)::int,sum(last_two_days_count_employee_safety)::int,sum(last_three_days_count_employee_safety)::int,
#                         sum(last_four_days_count_employee_safety)::int,sum(last_five_days_count_employee_safety)::int
#                         from inspection_analysis_table1 where location_type in %s  and location_code in %s;''',[tuple(irTypeValData),allLocationCodeData])
#                 firstRowAllData = cursor.fetchall()
                
#                 firstRowAllData = [list([x if x != None else 0 for x in firstRowAllData[0] ])]
                



#                 cursor.execute('''select sum(total_count_night_inspection)::int,sum(pending_count_night_inspection)::int,sum(pending_overdue_count_night_inspection)::int,
#                     sum(total_count_surprise_inspection)::int,sum(pending_count_surprise_inspection)::int,sum(pending_overdue_count_surprise_inspection)::int,
#                     sum(total_count_drive_based_inspection)::int,sum(pending_count_drive_based_inspection)::int,sum(pending_overdue_percentage_drive_based_inspection)::int
#                     from inspection_analysis_table2 where fin_year=%s and location_type in %s  and location_code in %s;''',[prevFinYear,tuple(irTypeValData),allLocationCodeData])
#                 secondPrevFinYear = cursor.fetchall()
#                 count_list4 =[]
#                 count_list5 =[]
#                 count_list6 =[]
#                 if len(secondPrevFinYear)>0:
#                     secondPrevFinYear = [list([x if x != None else 0 for x in secondPrevFinYear[0] ])]
#                     count_list4.append([secondPrevFinYear[0][0]-secondPrevFinYear[0][1],secondPrevFinYear[0][1],secondPrevFinYear[0][2]])
#                     count_list5.append([secondPrevFinYear[0][3]-secondPrevFinYear[0][4],secondPrevFinYear[0][4],secondPrevFinYear[0][5]])
#                     count_list6.append([secondPrevFinYear[0][6]-secondPrevFinYear[0][7],secondPrevFinYear[0][7],secondPrevFinYear[0][8]])
#                 else:
#                     count_list4.append([0,0,0])
#                     count_list5.append([0,0,0])
#                     count_list6.append([0,0,0])
#                 cursor.execute('''select sum(total_count_night_inspection)::int,sum(pending_count_night_inspection)::int,sum(pending_overdue_count_night_inspection)::int,
#                     sum(total_count_surprise_inspection)::int,sum(pending_count_surprise_inspection)::int,sum(pending_overdue_count_surprise_inspection)::int,
#                     sum(total_count_drive_based_inspection)::int,sum(pending_count_drive_based_inspection)::int,sum(pending_overdue_percentage_drive_based_inspection)::int
#                     from inspection_analysis_table2 where fin_year=%s and location_type in %s  and location_code in %s;''',[curFinYear,tuple(irTypeValData),allLocationCodeData])
#                 secondCurFinYear = cursor.fetchall()
                
#                 if len(secondCurFinYear)>0:
#                     secondCurFinYear = [list([x if x != None else 0 for x in secondCurFinYear[0] ])]
#                     count_list4.append([secondCurFinYear[0][0]-secondCurFinYear[0][1],secondCurFinYear[0][1],secondCurFinYear[0][2]])
#                     count_list5.append([secondCurFinYear[0][3]-secondCurFinYear[0][4],secondCurFinYear[0][4],secondCurFinYear[0][5]])
#                     count_list6.append([secondCurFinYear[0][6]-secondCurFinYear[0][7],secondCurFinYear[0][7],secondCurFinYear[0][8]])
#                 else:
#                     count_list4.append([0,0,0])
#                     count_list5.append([0,0,0])
#                     count_list6.append([0,0,0])

#                 cursor.execute('''select sum(total_count_night_inspection)::int,sum(pending_count_night_inspection)::int,sum(pending_overdue_count_night_inspection)::int,
#                     round((case when sum(total_count_night_inspection) != 0 then sum(pending_count_night_inspection) / sum(total_count_night_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_night_inspection) != 0 then sum(pending_count_night_inspection) / sum(total_count_night_inspection) else 0 end) *100,2),
#                     sum(last_one_days_count_night_inspection)::int,sum(last_two_days_count_night_inspection)::int,sum(last_three_days_count_night_inspection)::int,
#                     sum(last_four_days_count_night_inspection)::int,sum(last_five_days_count_night_inspection)::int,	
#                     sum(total_count_surprise_inspection)::int,sum(pending_count_surprise_inspection)::int,sum(pending_overdue_count_surprise_inspection)::int,
#                     round((case when sum(total_count_surprise_inspection) != 0 then sum(pending_count_surprise_inspection) / sum(total_count_surprise_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_surprise_inspection) != 0 then sum(pending_overdue_count_surprise_inspection) / sum(total_count_surprise_inspection) else 0 end) *100,2),
#                     sum(last_one_days_count_surprise_inspection)::int,sum(last_two_days_count_surprise_inspection)::int,sum(last_three_days_count_surprise_inspection)::int,
#                     sum(last_four_days_count_surprise_inspection)::int,sum(last_five_days_count_surprise_inspection)::int,
#                     sum(total_count_drive_based_inspection)::int,sum(pending_count_drive_based_inspection)::int,sum(pending_overdue_percentage_drive_based_inspection)::int,
#                     round((case when sum(total_count_drive_based_inspection) != 0 then sum(pending_overdue_percentage_drive_based_inspection) / sum(total_count_drive_based_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_drive_based_inspection) != 0 then sum(pending_overdue_percentage_drive_based_inspection) / sum(total_count_drive_based_inspection) else 0 end) *100,2),
#                     sum(last_one_days_count_drive_based_inspection)::int,sum(last_two_days_count_drive_based_inspection)::int,sum(last_three_days_count_drive_based_inspection)::int,
#                     sum(last_four_days_count_drive_based_inspection)::int,sum(last_five_days_count_drive_based_inspection)::int
#                     from inspection_analysis_table2 where location_type in %s  and location_code in %s;''',[tuple(irTypeValData),allLocationCodeData])
#                 secondRowAllData = cursor.fetchall()
#                 secondRowAllData = [list([x if x != None else 0 for x in secondRowAllData[0] ])]
#                 #########   forth row card(pendency)

#                 cursor.execute('''select sum(count_7_days_passenger_safety),sum(count_30_days_passenger_safety),sum(count_90_days_passenger_safety),
#                     sum(count_180_days_passenger_safety),sum(count_365_days_passenger_safety),
#                     sum(count_7_days_employee_safety),sum(count_30_days_employee_safety),sum(count_90_days_employee_safety),
#                     sum(count_180_days_employee_safety),sum(count_365_days_employee_safety),
#                     sum(count_7_days_others),sum(count_30_days_others),sum(count_90_days_others),
#                     sum(count_180_days_others),sum(count_365_days_others)
#                     from inspection_pendency_analysis_table1 where location_type in %s  and location_code in %s;''',[tuple(irTypeValData),allLocationCodeData])
#                 pendencyDataCard1 = cursor.fetchall()
#                 pendencyDataCard1 = [list([x if x != None else 0 for x in pendencyDataCard1[0] ])]

#                 cursor.execute('''select sum(count_7_days_night_inspection),sum(count_30_days_night_inspection),sum(count_90_days_night_inspection),
#                     sum(count_180_days_night_inspection),sum(count_365_days_night_inspection),
#                     sum(count_7_days_surprise_inspection),sum(count_30_days_surprise_inspection),sum(count_90_days_surprise_inspection),
#                     sum(count_180_days_surprise_inspection),sum(count_365_days_surprise_inspection),
#                     sum(count_7_days_drive_based_inspection),sum(count_30_days_drive_based_inspection),sum(count_90_days_drive_based_inspection),
#                     sum(count_180_days_drive_based_inspection),sum(count_365_days_drive_based_inspection),
#                     sum(count_7_days_regular_inspection),sum(count_30_days_regular_inspection),sum(count_90_days_regular_inspection),
#                     sum(count_180_days_regular_inspection),sum(count_365_days_regular_inspection)
#                     from inspection_pendency_analysis_table2 where location_type in %s  and location_code in %s;''',[tuple(irTypeValData),allLocationCodeData])
#                 pendencyDataCard2 = cursor.fetchall()
#                 pendencyDataCard2 = [list([x if x != None else 0 for x in pendencyDataCard2[0] ])]


#                 cursor.execute('''select  sum(total_count_station_passenger_safety),sum(total_count_station_employee_safety),sum(total_count_station_others),
#                     sum(total_count_station_night_inspection),sum(total_count_station_surprise_inspection),sum(total_count_station_drive_inspection),
#                     sum(total_count_section_passenger_safety),sum(total_count_section_employee_safety),sum(total_count_section_others),
#                     sum(total_count_section_night_inspection),sum(total_count_section_surprise_inspection),sum(total_count_section_drive_inspection),
#                     sum(total_count_train_passenger_safety),sum(total_count_train_employee_safety),sum(total_count_train_others),
#                     sum(total_count_train_night_inspection),sum(total_count_train_surprise_inspection),sum(total_count_train_drive_inspection),
#                     sum(total_count_others_passenger_safety),sum(total_count_others_employee_safety),sum(total_count_others_others),
#                     sum(total_count_others_night_inspection),sum(total_count_others_surprise_inspection),sum(total_count_others_drive_inspection),
#                     round((case when sum(total_count_station_passenger_safety) != 0 then sum(pending_count_station_passenger_safety) / sum(total_count_station_passenger_safety) else 0 end) *100,2),
#                     round((case when sum(total_count_station_employee_safety) != 0 then sum(pending_count_station_employee_safety) / sum(total_count_station_employee_safety) else 0 end) *100,2),
#                     round((case when sum(total_count_station_others) != 0 then sum(pending_count_station_others) / sum(total_count_station_others) else 0 end) *100,2),
#                     round((case when sum(total_count_station_night_inspection) != 0 then sum(pending_count_station_night_inspection) / sum(total_count_station_night_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_station_surprise_inspection) != 0 then sum(pending_count_station_surprise_inspection) / sum(total_count_station_surprise_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_station_drive_inspection) != 0 then sum(pending_count_station_drive_inspection) / sum(total_count_station_drive_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_section_passenger_safety) != 0 then sum(pending_count_section_passenger_safety) / sum(total_count_section_passenger_safety) else 0 end) *100,2),
#                     round((case when sum(total_count_section_employee_safety) != 0 then sum(pending_count_section_employee_safety) / sum(total_count_section_employee_safety) else 0 end) *100,2),
#                     round((case when sum(total_count_section_others) != 0 then sum(pending_count_section_others) / sum(total_count_section_others) else 0 end) *100,2),
#                     round((case when sum(total_count_section_night_inspection) != 0 then sum(pending_count_section_night_inspection) / sum(total_count_section_night_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_section_surprise_inspection) != 0 then sum(pending_count_section_surprise_inspection) / sum(total_count_section_surprise_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_section_drive_inspection) != 0 then sum(pending_count_section_drive_inspection) / sum(total_count_section_drive_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_train_passenger_safety) != 0 then sum(pending_count_train_passenger_safety) / sum(total_count_train_passenger_safety) else 0 end) *100,2),
#                     round((case when sum(total_count_train_employee_safety) != 0 then sum(pending_count_train_employee_safety) / sum(total_count_train_employee_safety) else 0 end) *100,2),
#                     round((case when sum(total_count_train_others) != 0 then sum(pending_count_train_others) / sum(total_count_train_others) else 0 end) *100,2),
#                     round((case when sum(total_count_train_night_inspection) != 0 then sum(pending_count_train_night_inspection) / sum(total_count_train_night_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_train_surprise_inspection) != 0 then sum(pending_count_train_surprise_inspection) / sum(total_count_train_surprise_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_train_drive_inspection) != 0 then sum(pending_count_train_drive_inspection) / sum(total_count_train_drive_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_others_passenger_safety) != 0 then sum(pending_count_others_passenger_safety) / sum(total_count_others_passenger_safety) else 0 end) *100,2),
#                     round((case when sum(total_count_others_employee_safety) != 0 then sum(pending_count_others_employee_safety) / sum(total_count_others_employee_safety) else 0 end) *100,2),
#                     round((case when sum(total_count_others_others) != 0 then sum(pending_count_others_others) / sum(total_count_others_others) else 0 end) *100,2),
#                     round((case when sum(total_count_others_night_inspection) != 0 then sum(total_count_others_night_inspection) / sum(total_count_others_night_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_others_surprise_inspection) != 0 then sum(total_count_others_surprise_inspection) / sum(total_count_others_surprise_inspection) else 0 end) *100,2),
#                     round((case when sum(total_count_others_drive_inspection) != 0 then sum(total_count_others_drive_inspection) / sum(total_count_others_drive_inspection) else 0 end) *100,2)
#                     from inspection_analysis_table3 where location_type in %s  and location_code in %s;''',[tuple(irTypeValData),allLocationCodeData])
#                 thirdRowData = cursor.fetchall()
#                 thirdRowData = [list([x if x != None else 0 for x in thirdRowData[0] ])]
                
#             cursor.close()


#     variationPassenger = "{:.2f}".format(((firstCurFinYear[0][3] - firstPrevFinYear[0][3]) / firstPrevFinYear[0][3]) * 100,2) if firstPrevFinYear[0][3] != 0 else 11000011
#     if variationPassenger == 11000011:
#         variationPassenger = ['NaN','0']
#     elif float(variationPassenger) >= 0:
#         variationPassenger = [variationPassenger,'1']
#     else:
#         variationPassenger = [str(variationPassenger)[1:],'2']
    
#     variationEmployee = "{:.2f}".format(((firstCurFinYear[0][6] - firstPrevFinYear[0][6]) / firstPrevFinYear[0][6]) * 100,2) if firstPrevFinYear[0][6] != 0 else 11000011
#     if variationEmployee == 11000011:
#         variationEmployee = ['NaN','0']
#     elif float(variationEmployee) >= 0:
#         variationEmployee = [variationEmployee,'1']
#     else:
#         variationEmployee = [str(variationEmployee)[1:],'2']
    
#     variationOthers = float("{:.2f}".format(((firstCurFinYear[0][0] - firstPrevFinYear[0][0]) / firstPrevFinYear[0][0]) * 100,2)) if firstPrevFinYear[0][0] != 0 else 11000011
    
#     if variationOthers == 11000011:
#         variationOthers = ['NaN','0']
#     elif float(variationOthers) >= 0:
#         variationOthers = [variationOthers,'1']
#     else:
#         variationOthers = [str(variationOthers)[1:],'2']

#     variationSuprise = "{:.2f}".format(((secondCurFinYear[0][3] - secondPrevFinYear[0][3]) / secondPrevFinYear[0][3]) * 100,2) if secondPrevFinYear[0][3] != 0 else 11000011
#     if variationSuprise == 11000011:
#         variationSuprise = ['NaN','0']
#     elif float(variationSuprise) >= 0:
#         variationSuprise = [variationSuprise,'1']
#     else:
#         variationSuprise = [str(variationSuprise)[1:],'2']
    
#     variationDrive = "{:.2f}".format(((secondCurFinYear[0][6] - secondPrevFinYear[0][6]) / secondPrevFinYear[0][6]) * 100,2) if secondPrevFinYear[0][6] != 0 else 11000011
#     if variationDrive == 11000011:
#         variationDrive = ['NaN','0']
#     elif float(variationDrive) >= 0:
#         variationDrive = [variationDrive,'1']
#     else:
#         variationDrive = [str(variationDrive)[1:],'2']
    
#     variationNight = "{:.2f}".format(((secondCurFinYear[0][0] - secondPrevFinYear[0][0]) / secondPrevFinYear[0][0]) * 100,2) if secondPrevFinYear[0][0] != 0 else 11000011
#     if variationNight == 11000011:
#         variationNight = ['NaN','0']
#     elif float(variationNight) >= 0:
#         variationNight = [variationNight,'1']
#     else:
#         variationNight = [str(variationNight)[1:],'2']    
          
#     overallTotalCount =   firstRowAllData[0][10]+firstRowAllData[0][20]+firstRowAllData[0][0]+secondRowAllData[0][10]+secondRowAllData[0][20]+secondRowAllData[0][0]   
#     overallPendingCount = firstRowAllData[0][11]+firstRowAllData[0][21]+firstRowAllData[0][1]+secondRowAllData[0][11]+secondRowAllData[0][21]+secondRowAllData[0][1] 
#     overallOverdueCount = firstRowAllData[0][12]+firstRowAllData[0][22]+firstRowAllData[0][2]+secondRowAllData[0][12]+secondRowAllData[0][22]+secondRowAllData[0][2]
#     overallPendingPercentage = "{:.2f}".format((overallPendingCount/overallTotalCount)*100) if overallTotalCount != 0 else 0.00
#     overallOverduePercentage = "{:.2f}".format((overallOverdueCount/overallTotalCount)*100) if overallTotalCount != 0 else 0.00
    
#     for i in range(len(allDesignation)):
#         d_level = allDesignation[i]['d_level']
#         if d_level != None:
#             catData = list(models.category.objects.filter(category=d_level).values('hierarchy_level'))
#             if len(catData)>0:
#                 if catData[0]['hierarchy_level'] != None:
#                     allDesignation[i].update({'level':int(catData[0]['hierarchy_level'])})
#                 else:
#                     allDesignation[i].update({'level':1000})
#             else:
#                 allDesignation[i].update({'level':1000})
#         else:
#             allDesignation[i].update({'level':1000})
#     allDesignation = sorted(allDesignation, key = lambda x: (x['level'],x['designation']))           


    

#     print(variationPassenger,variationEmployee,variationOthers,variationSuprise,variationDrive,variationNight,overallTotalCount,overallPendingCount,overallOverdueCount,overallPendingPercentage,overallOverduePercentage)
#     context = {
#         'allDepartment':allDepartment,
#         'allDesignation':allDesignation,
#         'allFinYear':json.dumps([prevFinYear,curFinYear]),
#         'daysArray':daysArray,
#         'count_list1':json.dumps(count_list1),
#         'count_list2':json.dumps(count_list2),
#         'count_list3':json.dumps(count_list3),
#         'count_list4':json.dumps(count_list4),
#         'count_list5':json.dumps(count_list5),
#         'count_list6':json.dumps(count_list6),
#         'firstRowAllData':firstRowAllData,
#         'secondRowAllData':secondRowAllData,
#         'pendencyDataCard1':pendencyDataCard1,
#         'pendencyDataCard2':pendencyDataCard2,
#         'thirdRowData':thirdRowData,
#         'irTypeVal':irTypeVal,
#         'irDetailsVal':irDetailsVal,
#         'irMapVal':irMapVal,
#         'irPathVal1':irPathVal1,
#         'irPathVal2':irPathVal2,
#         'dataZoneWs':dataZoneWs,

#         'irSearchDept':irSearchDept,
#         'irSearchDate':irSearchDate,
#         'irSearchDesig':irSearchDesig,  

#         'variationPassenger':variationPassenger,  
#         'variationEmployee':variationEmployee,
#         'variationOthers':variationOthers,
#         'variationSuprise':variationSuprise,
#         'variationDrive':variationDrive,
#         'variationNight':variationNight,
#         'overallTotalCount':overallTotalCount,
#         'overallPendingCount':overallPendingCount,
#         'overallOverdueCount':overallOverdueCount,
#         'overallPendingPercentage':overallPendingPercentage,
#         'overallOverduePercentage':overallOverduePercentage,




#     }
#     return render(request,'svgtemplate.html',context)

def inspectionDetailsMap(request):
    N_DAYS_AGO = 4
    today = datetime.now()    
    n_days_ago = today - timedelta(days=N_DAYS_AGO)
    daysArray=[]
    for i in range(5):
        daysArray.append((n_days_ago + timedelta(days=i)).strftime('%d/%m'))
    daysArray = list(reversed(daysArray))
    finYearCombined = finYear().split('-')
    curFinYear = finYearCombined[0]+'-'+(finYearCombined[1])[2:]
    prevFinYear = str(int(finYearCombined[0])-1)+'-'+(finYearCombined[0])[2:]

    if request.method == "POST" and request.is_ajax():
        typ = request.POST.get('typ')  
        
        if typ == 'DesignationDetails':

            dept = request.POST.get('dept')
            print(dept)
            if(dept == 'All'):
                irTypeVal = request.POST.get('irType')   
                irPath2 = request.POST.get('irPath2')
                irDetailsVal = request.POST.get('irDetails')
               
                if irTypeVal == 'ZR':   
                    irTypeValData = ['ZR','DIV','WS']
                elif irTypeVal == 'All':   
                    irTypeValData = ['ZR','DIV','WS','PU']
                
                elif irTypeVal == 'HQ':
                    irTypeValData = ['ZR']
                else:
                    irTypeValData = [irTypeVal]
                if irDetailsVal == 'All':
                    allDesignation = list(models.Level_Desig.objects.filter(rly_unit__in = models.railwayLocationMaster.objects.filter(location_type__in = irTypeValData).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('designation'))
                else:
                    allDesignation = list(models.Level_Desig.objects.filter(rly_unit__in = models.railwayLocationMaster.objects.filter(Q(location_code=irDetailsVal) | Q(parent_location_code=irDetailsVal),location_type__in = irTypeValData).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('designation'))
                if irPath2 != '':
                    allDesignation = list(models.Level_Desig.objects.filter(rly_unit__in = models.railwayLocationMaster.objects.filter(Q(location_code=irPath2),location_type__in = irTypeValData).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('designation'))

            else:
                irTypeVal = request.POST.get('irType')   
                irPath2 = request.POST.get('irPath2')
                irDetailsVal = request.POST.get('irDetails')
                
                if irTypeVal == 'ZR':   
                    irTypeValData = ['ZR','DIV','WS']
                elif irTypeVal == 'All':   
                    irTypeValData = ['ZR','DIV','WS','PU']
                
                elif irTypeVal == 'HQ':
                    irTypeValData = ['ZR']
                else:
                    irTypeValData = [irTypeVal]
                if irDetailsVal == 'All':
                    allDesignation = list(models.Level_Desig.objects.filter(department_code=dept,rly_unit__in = models.railwayLocationMaster.objects.filter(location_type__in = irTypeValData).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('designation'))
                else:
                    allDesignation = list(models.Level_Desig.objects.filter(department_code=dept,rly_unit__in = models.railwayLocationMaster.objects.filter(Q(location_code=irDetailsVal) | Q(parent_location_code=irDetailsVal),location_type__in = irTypeValData).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('designation'))
                if irPath2 != '':
                    allDesignation = list(models.Level_Desig.objects.filter(department_code=dept,rly_unit__in = models.railwayLocationMaster.objects.filter(Q(location_code=irPath2),location_type__in = irTypeValData).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('designation'))




            for i in range(len(allDesignation)):
                d_level = allDesignation[i]['d_level']
                if d_level != None:
                    catData = list(models.category.objects.filter(category=d_level).values('hierarchy_level'))
                    if len(catData)>0:
                        if catData[0]['hierarchy_level'] != None:
                            allDesignation[i].update({'level':int(catData[0]['hierarchy_level'])})
                        else:
                            allDesignation[i].update({'level':1000})
                    else:
                        allDesignation[i].update({'level':1000})
                else:
                    allDesignation[i].update({'level':1000})
            allDesignation = sorted(allDesignation, key = lambda x: (x['level'],x['designation']))    
            
            print(allDesignation)
            
            
            return JsonResponse(allDesignation, safe = False)
        
    allDesignation = list(models.Level_Desig.objects.filter(rly_unit__in = models.railwayLocationMaster.objects.filter(location_type__in=['DIV','RB','ZR','PU','WS']).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('designation'))
    allDepartment = list(models.departMast.objects.values('department_name','department_code').distinct().order_by('department_name'))


    
    if request.method == "GET":
        cursor = connection.cursor()
        cursor.execute('''select sum(total_count_others)::int,sum(pending_count_others)::int,sum(pending_overdue_count_others)::int,
            sum(total_count_passenger_safety)::int,sum(pending_count_passenger_safety)::int,sum(pending_overdue_count_passenger_safety)::int,
            sum(total_count_employee_safety)::int,sum(pending_count_employee_safety)::int,sum(pending_overdue_count_employee_safety)::int
            from inspection_analysis_table1 where fin_year=%s;''',[prevFinYear])
        firstPrevFinYear = cursor.fetchall()
        count_list1 =[]
        count_list2 =[]
        count_list3 =[]
        if len(firstPrevFinYear)>0:
            firstPrevFinYear = [list([x if x != None else 0 for x in firstPrevFinYear[0]])]
            count_list3.append([firstPrevFinYear[0][0]-firstPrevFinYear[0][1],firstPrevFinYear[0][1],firstPrevFinYear[0][2]])
            count_list1.append([firstPrevFinYear[0][3]-firstPrevFinYear[0][4],firstPrevFinYear[0][4],firstPrevFinYear[0][5]])
            count_list2.append([firstPrevFinYear[0][6]-firstPrevFinYear[0][7],firstPrevFinYear[0][7],firstPrevFinYear[0][8]])
        else:
            count_list1.append([0,0,0])
            count_list2.append([0,0,0])
            count_list3.append([0,0,0])
        
        cursor.execute('''select sum(total_count_others)::int,sum(pending_count_others)::int,sum(pending_overdue_count_others)::int,
            sum(total_count_passenger_safety)::int,sum(pending_count_passenger_safety)::int,sum(pending_overdue_count_passenger_safety)::int,
            sum(total_count_employee_safety)::int,sum(pending_count_employee_safety)::int,sum(pending_overdue_count_employee_safety)::int
            from inspection_analysis_table1 where fin_year=%s;''',[curFinYear])
        firstCurFinYear = cursor.fetchall()
        
        if len(firstCurFinYear)>0:
            firstCurFinYear = [list([x if x != None else 0 for x in firstCurFinYear[0]])]
            count_list3.append([firstCurFinYear[0][0]-firstCurFinYear[0][1],firstCurFinYear[0][1],firstCurFinYear[0][2]])
            count_list1.append([firstCurFinYear[0][3]-firstCurFinYear[0][4],firstCurFinYear[0][4],firstCurFinYear[0][5]])
            count_list2.append([firstCurFinYear[0][6]-firstCurFinYear[0][7],firstCurFinYear[0][7],firstCurFinYear[0][8]])
        else:
            count_list1.append([0,0,0])
            count_list2.append([0,0,0])
            count_list3.append([0,0,0])

        

        cursor.execute('''select sum(total_count_others)::int,sum(pending_count_others)::int,sum(pending_overdue_count_others)::int,
                round((case when sum(total_count_others) != 0 then sum(pending_count_others) / sum(total_count_others) else 0 end) *100,2),
                round((case when sum(total_count_others) != 0 then sum(pending_overdue_count_others) / sum(total_count_others) else 0 end) *100,2),
                sum(last_one_days_count_others)::int,sum(last_two_days_count_others)::int,sum(last_three_days_count_others)::int,
                sum(last_four_days_count_others)::int,sum(last_five_days_count_others)::int,			
                sum(total_count_passenger_safety)::int,sum(pending_count_passenger_safety)::int,sum(pending_overdue_count_passenger_safety)::int,
                round((case when sum(total_count_passenger_safety) != 0 then sum(pending_count_passenger_safety) / sum(total_count_passenger_safety) else 0 end) *100,2),
                round((case when sum(total_count_passenger_safety) != 0 then sum(pending_overdue_count_passenger_safety) / sum(total_count_passenger_safety) else 0 end) *100,2),
                sum(last_one_days_count_passenger_safety)::int,sum(last_two_days_count_passenger_safety)::int,sum(last_three_days_count_passenger_safety)::int,
                sum(last_four_days_count_passenger_safety)::int,sum(last_five_days_count_passenger_safety)::int,
                sum(total_count_employee_safety)::int,sum(pending_count_employee_safety)::int,sum(pending_overdue_count_employee_safety)::int,
                round((case when sum(total_count_employee_safety) != 0 then sum(pending_count_employee_safety) / sum(total_count_employee_safety) else 0 end) *100,2),
                round((case when sum(total_count_employee_safety) != 0 then sum(pending_overdue_count_employee_safety) / sum(total_count_employee_safety) else 0 end) *100,2),
                sum(last_one_days_count_employee_safety)::int,sum(last_two_days_count_employee_safety)::int,sum(last_three_days_count_employee_safety)::int,
                sum(last_four_days_count_employee_safety)::int,sum(last_five_days_count_employee_safety)::int
                from inspection_analysis_table1;''')
        firstRowAllData = cursor.fetchall()


        cursor.execute('''select sum(total_count_night_inspection)::int,sum(pending_count_night_inspection)::int,sum(pending_overdue_count_night_inspection)::int,
            sum(total_count_surprise_inspection)::int,sum(pending_count_surprise_inspection)::int,sum(pending_overdue_count_surprise_inspection)::int,
            sum(total_count_drive_based_inspection)::int,sum(pending_count_drive_based_inspection)::int,sum(pending_overdue_percentage_drive_based_inspection)::int
            from inspection_analysis_table2 where fin_year=%s;''',[prevFinYear])
        secondPrevFinYear = cursor.fetchall()
        count_list4 =[]
        count_list5 =[]
        count_list6 =[]
        if len(secondPrevFinYear)>0:
            secondPrevFinYear = [list([x if x != None else 0 for x in secondPrevFinYear[0]])]
            count_list4.append([secondPrevFinYear[0][0]-secondPrevFinYear[0][1],secondPrevFinYear[0][1],secondPrevFinYear[0][2]])
            count_list5.append([secondPrevFinYear[0][3]-secondPrevFinYear[0][4],secondPrevFinYear[0][4],secondPrevFinYear[0][5]])
            count_list6.append([secondPrevFinYear[0][6]-secondPrevFinYear[0][7],secondPrevFinYear[0][7],secondPrevFinYear[0][8]])
        else:
            count_list4.append([0,0,0])
            count_list5.append([0,0,0])
            count_list6.append([0,0,0])
        cursor.execute('''select sum(total_count_night_inspection)::int,sum(pending_count_night_inspection)::int,sum(pending_overdue_count_night_inspection)::int,
            sum(total_count_surprise_inspection)::int,sum(pending_count_surprise_inspection)::int,sum(pending_overdue_count_surprise_inspection)::int,
            sum(total_count_drive_based_inspection)::int,sum(pending_count_drive_based_inspection)::int,sum(pending_overdue_percentage_drive_based_inspection)::int
            from inspection_analysis_table2 where fin_year=%s;''',[curFinYear])
        secondCurFinYear = cursor.fetchall()
        
        if len(secondCurFinYear)>0:
            secondCurFinYear = [list([x if x != None else 0 for x in secondCurFinYear[0]])]
            count_list4.append([secondCurFinYear[0][0]-secondCurFinYear[0][1],secondCurFinYear[0][1],secondCurFinYear[0][2]])
            count_list5.append([secondCurFinYear[0][3]-secondCurFinYear[0][4],secondCurFinYear[0][4],secondCurFinYear[0][5]])
            count_list6.append([secondCurFinYear[0][6]-secondCurFinYear[0][7],secondCurFinYear[0][7],secondCurFinYear[0][8]])
        else:
            count_list4.append([0,0,0])
            count_list5.append([0,0,0])
            count_list6.append([0,0,0])

        

        cursor.execute('''select sum(total_count_night_inspection)::int,sum(pending_count_night_inspection)::int,sum(pending_overdue_count_night_inspection)::int,
            round((case when sum(total_count_night_inspection) != 0 then sum(pending_count_night_inspection) / sum(total_count_night_inspection) else 0 end) *100,2),
            round((case when sum(total_count_night_inspection) != 0 then sum(pending_overdue_count_night_inspection) / sum(total_count_night_inspection) else 0 end) *100,2),
            sum(last_one_days_count_night_inspection)::int,sum(last_two_days_count_night_inspection)::int,sum(last_three_days_count_night_inspection)::int,
            sum(last_four_days_count_night_inspection)::int,sum(last_five_days_count_night_inspection)::int,	
            sum(total_count_surprise_inspection)::int,sum(pending_count_surprise_inspection)::int,sum(pending_overdue_count_surprise_inspection)::int,
            round((case when sum(total_count_surprise_inspection) != 0 then sum(pending_count_surprise_inspection) / sum(total_count_surprise_inspection) else 0 end) *100,2),
            round((case when sum(total_count_surprise_inspection) != 0 then sum(pending_overdue_count_surprise_inspection) / sum(total_count_surprise_inspection) else 0 end) *100,2),
            sum(last_one_days_count_surprise_inspection)::int,sum(last_two_days_count_surprise_inspection)::int,sum(last_three_days_count_surprise_inspection)::int,
            sum(last_four_days_count_surprise_inspection)::int,sum(last_five_days_count_surprise_inspection)::int,
            sum(total_count_drive_based_inspection)::int,sum(pending_count_drive_based_inspection)::int,sum(pending_overdue_count_drive_based_inspection)::int,
            round((case when sum(total_count_drive_based_inspection) != 0 then sum(pending_count_drive_based_inspection) / sum(total_count_drive_based_inspection) else 0 end) *100,2),
            round((case when sum(total_count_drive_based_inspection) != 0 then sum(pending_overdue_count_drive_based_inspection) / sum(total_count_drive_based_inspection) else 0 end) *100,2),
            sum(last_one_days_count_drive_based_inspection)::int,sum(last_two_days_count_drive_based_inspection)::int,sum(last_three_days_count_drive_based_inspection)::int,
            sum(last_four_days_count_drive_based_inspection)::int,sum(last_five_days_count_drive_based_inspection)::int
            from inspection_analysis_table2;''')
        secondRowAllData = cursor.fetchall()

        #########   forth row card(pendency)

        cursor.execute('''select sum(count_7_days_passenger_safety),sum(count_30_days_passenger_safety),sum(count_90_days_passenger_safety),
            sum(count_180_days_passenger_safety),sum(count_365_days_passenger_safety),
            sum(count_7_days_employee_safety),sum(count_30_days_employee_safety),sum(count_90_days_employee_safety),
            sum(count_180_days_employee_safety),sum(count_365_days_employee_safety),
            sum(count_7_days_others),sum(count_30_days_others),sum(count_90_days_others),
            sum(count_180_days_others),sum(count_365_days_others)
            from inspection_pendency_analysis_table1;''')
        pendencyDataCard1 = cursor.fetchall()

        cursor.execute('''select sum(count_7_days_night_inspection),sum(count_30_days_night_inspection),sum(count_90_days_night_inspection),
            sum(count_180_days_night_inspection),sum(count_365_days_night_inspection),
            sum(count_7_days_surprise_inspection),sum(count_30_days_surprise_inspection),sum(count_90_days_surprise_inspection),
            sum(count_180_days_surprise_inspection),sum(count_365_days_surprise_inspection),
            sum(count_7_days_drive_based_inspection),sum(count_30_days_drive_based_inspection),sum(count_90_days_drive_based_inspection),
            sum(count_180_days_drive_based_inspection),sum(count_365_days_drive_based_inspection),
            sum(count_7_days_regular_inspection),sum(count_30_days_regular_inspection),sum(count_90_days_regular_inspection),
            sum(count_180_days_regular_inspection),sum(count_365_days_regular_inspection)
            from inspection_pendency_analysis_table2;''')
        pendencyDataCard2 = cursor.fetchall()


        cursor.execute('''select  sum(total_count_station_passenger_safety),sum(total_count_station_employee_safety),sum(total_count_station_others),
            sum(total_count_station_night_inspection),sum(total_count_station_surprise_inspection),sum(total_count_station_drive_inspection),
            sum(total_count_section_passenger_safety),sum(total_count_section_employee_safety),sum(total_count_section_others),
            sum(total_count_section_night_inspection),sum(total_count_section_surprise_inspection),sum(total_count_section_drive_inspection),
            sum(total_count_train_passenger_safety),sum(total_count_train_employee_safety),sum(total_count_train_others),
            sum(total_count_train_night_inspection),sum(total_count_train_surprise_inspection),sum(total_count_train_drive_inspection),
            sum(total_count_others_passenger_safety),sum(total_count_others_employee_safety),sum(total_count_others_others),
            sum(total_count_others_night_inspection),sum(total_count_others_surprise_inspection),sum(total_count_others_drive_inspection),
            round((case when sum(total_count_station_passenger_safety) != 0 then sum(pending_count_station_passenger_safety) / sum(total_count_station_passenger_safety) else 0 end) *100,2),
            round((case when sum(total_count_station_employee_safety) != 0 then sum(pending_count_station_employee_safety) / sum(total_count_station_employee_safety) else 0 end) *100,2),
            round((case when sum(total_count_station_others) != 0 then sum(pending_count_station_others) / sum(total_count_station_others) else 0 end) *100,2),
            round((case when sum(total_count_station_night_inspection) != 0 then sum(pending_count_station_night_inspection) / sum(total_count_station_night_inspection) else 0 end) *100,2),
            round((case when sum(total_count_station_surprise_inspection) != 0 then sum(pending_count_station_surprise_inspection) / sum(total_count_station_surprise_inspection) else 0 end) *100,2),
            round((case when sum(total_count_station_drive_inspection) != 0 then sum(pending_count_station_drive_inspection) / sum(total_count_station_drive_inspection) else 0 end) *100,2),
            round((case when sum(total_count_section_passenger_safety) != 0 then sum(pending_count_section_passenger_safety) / sum(total_count_section_passenger_safety) else 0 end) *100,2),
            round((case when sum(total_count_section_employee_safety) != 0 then sum(pending_count_section_employee_safety) / sum(total_count_section_employee_safety) else 0 end) *100,2),
            round((case when sum(total_count_section_others) != 0 then sum(pending_count_section_others) / sum(total_count_section_others) else 0 end) *100,2),
            round((case when sum(total_count_section_night_inspection) != 0 then sum(pending_count_section_night_inspection) / sum(total_count_section_night_inspection) else 0 end) *100,2),
            round((case when sum(total_count_section_surprise_inspection) != 0 then sum(pending_count_section_surprise_inspection) / sum(total_count_section_surprise_inspection) else 0 end) *100,2),
            round((case when sum(total_count_section_drive_inspection) != 0 then sum(pending_count_section_drive_inspection) / sum(total_count_section_drive_inspection) else 0 end) *100,2),
            round((case when sum(total_count_train_passenger_safety) != 0 then sum(pending_count_train_passenger_safety) / sum(total_count_train_passenger_safety) else 0 end) *100,2),
            round((case when sum(total_count_train_employee_safety) != 0 then sum(pending_count_train_employee_safety) / sum(total_count_train_employee_safety) else 0 end) *100,2),
            round((case when sum(total_count_train_others) != 0 then sum(pending_count_train_others) / sum(total_count_train_others) else 0 end) *100,2),
            round((case when sum(total_count_train_night_inspection) != 0 then sum(pending_count_train_night_inspection) / sum(total_count_train_night_inspection) else 0 end) *100,2),
            round((case when sum(total_count_train_surprise_inspection) != 0 then sum(pending_count_train_surprise_inspection) / sum(total_count_train_surprise_inspection) else 0 end) *100,2),
            round((case when sum(total_count_train_drive_inspection) != 0 then sum(pending_count_train_drive_inspection) / sum(total_count_train_drive_inspection) else 0 end) *100,2),
            round((case when sum(total_count_others_passenger_safety) != 0 then sum(pending_count_others_passenger_safety) / sum(total_count_others_passenger_safety) else 0 end) *100,2),
            round((case when sum(total_count_others_employee_safety) != 0 then sum(pending_count_others_employee_safety) / sum(total_count_others_employee_safety) else 0 end) *100,2),
            round((case when sum(total_count_others_others) != 0 then sum(pending_count_others_others) / sum(total_count_others_others) else 0 end) *100,2),
            round((case when sum(total_count_others_night_inspection) != 0 then sum(total_count_others_night_inspection) / sum(total_count_others_night_inspection) else 0 end) *100,2),
            round((case when sum(total_count_others_surprise_inspection) != 0 then sum(total_count_others_surprise_inspection) / sum(total_count_others_surprise_inspection) else 0 end) *100,2),
            round((case when sum(total_count_others_drive_inspection) != 0 then sum(total_count_others_drive_inspection) / sum(total_count_others_drive_inspection) else 0 end) *100,2)
            from inspection_analysis_table3;''')
        thirdRowData = cursor.fetchall()


        


        cursor.close()
        irTypeVal = 'All'
        irDetailsVal = 'All'
        irMapVal = '1'
        irPathVal1 = None
        irPathVal2 = ''
        dataZoneWs = []
        irPath2 = None
        irSearchDept = ""
        irSearchDate = ""
        irSearchDesig = ""

    
    if request.method == "POST":
        submitvalue = request.POST.get('submit')
        irPathVal1 = None
        irPathVal2 = ''
        dataZoneWs = []
        irSearchDept = ""
        irSearchDate = ""
        irSearchDesig = ""
        if submitvalue == 'irSubmitButton':
            cursor = connection.cursor()
            irTypeVal = request.POST.get('irType')  
            irPath2 = request.POST.get('irPath2')
            if irTypeVal == 'PU':
                irMapVal = '2'
            else:
                irMapVal = '1'
            irDetailsVal = request.POST.get('irDetails')
            if irTypeVal == 'DIV':
                zone = irDetailsVal
                dataZoneWs = list(models.railwayLocationMaster.objects.filter(parent_location_code=zone,location_type = 'DIV').values('location_code','location_description').order_by('location_code'))
                
            elif irTypeVal == 'WS':
                zone = irDetailsVal
                dataZoneWs = list(models.railwayLocationMaster.objects.filter(parent_location_code=zone,location_type = 'WS').values('location_code','location_description').order_by('location_code'))
            
            if irTypeVal == 'ZR':   
                irTypeValData = ['ZR','DIV','WS']
            elif irTypeVal == 'All':   
                irTypeValData = ['ZR','DIV','WS','PU']
            
            elif irTypeVal == 'HQ':
                irTypeValData = ['ZR']
            else:
                irTypeValData = [irTypeVal]
            

            if irDetailsVal == 'All':
                allLocationCodeData = tuple(models.railwayLocationMaster.objects.filter(location_type__in = irTypeValData).values_list('location_code',flat=True).distinct())
                allDesignation = list(models.Level_Desig.objects.filter(rly_unit__in = models.railwayLocationMaster.objects.filter(location_type__in = irTypeValData).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('designation'))

            else:
                irPathVal1 = irDetailsVal
                allLocationCodeData = list(models.railwayLocationMaster.objects.filter(Q(parent_location_code=irDetailsVal)).values_list('location_code',flat=True).distinct())
                allDesignation = list(models.Level_Desig.objects.filter(rly_unit__in = models.railwayLocationMaster.objects.filter(Q(location_code=irDetailsVal) | Q(parent_location_code=irDetailsVal),location_type__in = irTypeValData).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('designation'))

                allLocationCodeData.append(irDetailsVal)
                allLocationCodeData = tuple(allLocationCodeData)
            
            if irPath2 != '':
                irPathVal2 = irPath2
                allDesignation = list(models.Level_Desig.objects.filter(rly_unit__in = models.railwayLocationMaster.objects.filter(Q(location_code=irPath2),location_type__in = irTypeValData).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('designation'))

                allLocationCodeData = tuple([irPath2])
                irTypeValData = [irTypeVal]




            irSearchType = request.POST.get('irSearchType')
            if irSearchType == 'Yes':
                irSearchDept = request.POST.get('irSearchDept')
                if irSearchDept == 'All':
                    irSearchDept = ""
                    allDepartmentData = tuple(models.departMast.objects.values_list('department_name',flat=True).distinct())
                else:
                    allDepartmentData = tuple(models.departMast.objects.filter(department_code=irSearchDept).values_list('department_name',flat=True).distinct())
                
                irSearchDesig = request.POST.get('irSearchDesig')
                if  irSearchDesig == 'All':
                    irSearchDesig = ""
                    allDesignationData = tuple(models.Level_Desig.objects.filter(rly_unit__in = models.railwayLocationMaster.objects.filter(location_type__in=['DIV','RB','ZR','WS','PU']).values('rly_unit_code')).values_list('designation_code',flat=True).distinct())
                else:
                    irSearchDesig = int(irSearchDesig)
                    allDesignationData = tuple([irSearchDesig])
                    

                
                irSearchDate = request.POST.get('irSearchDate')
                if irSearchDate == "":
                    startDate = '2020-04-01'
                    endDate = datetime.now().strftime('%Y-%m-%d')
                else:
                    irSearchDate11 = irSearchDate.split('-')
                    start1 = irSearchDate11[0].split('/')
                    end1 = irSearchDate11[1].split('/')
                    startDate = '20'+start1[2]+'-'+start1[1]+'-'+start1[0]
                    endDate = '20'+end1[2]+'-'+end1[1]+'-'+end1[0]
                cursor.execute('''select sum(total_count_others)::int,sum(pending_count_others)::int,sum(pending_overdue_count_others)::int,
                    sum(total_count_passenger_safety)::int,sum(pending_count_passenger_safety)::int,sum(pending_overdue_count_passenger_safety)::int,
                    sum(total_count_employee_safety)::int,sum(pending_count_employee_safety)::int,sum(pending_overdue_count_employee_safety)::int
                    from view_inspection_analysis_table1 where fin_year=%s and location_type in %s  and location_code in %s and inspected_on between %s and %s
                    and designation_code in %s and department in %s;''',[prevFinYear,tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData])
                firstPrevFinYear = cursor.fetchall()
                
                count_list1 =[]
                count_list2 =[]
                count_list3 =[]
                if len(firstPrevFinYear)>0:
                    firstPrevFinYear = [list([x if x != None else 0 for x in firstPrevFinYear[0] ])]
                    count_list3.append([firstPrevFinYear[0][0]-firstPrevFinYear[0][1],firstPrevFinYear[0][1],firstPrevFinYear[0][2]])
                    count_list1.append([firstPrevFinYear[0][3]-firstPrevFinYear[0][4],firstPrevFinYear[0][4],firstPrevFinYear[0][5]])
                    count_list2.append([firstPrevFinYear[0][6]-firstPrevFinYear[0][7],firstPrevFinYear[0][7],firstPrevFinYear[0][8]])
                else:
                    count_list1.append([0,0,0])
                    count_list2.append([0,0,0])
                    count_list3.append([0,0,0])
                cursor.execute('''select sum(total_count_others)::int,sum(pending_count_others)::int,sum(pending_overdue_count_others)::int,
                    sum(total_count_passenger_safety)::int,sum(pending_count_passenger_safety)::int,sum(pending_overdue_count_passenger_safety)::int,
                    sum(total_count_employee_safety)::int,sum(pending_count_employee_safety)::int,sum(pending_overdue_count_employee_safety)::int
                    from view_inspection_analysis_table1 where fin_year=%s and location_type in %s  and location_code in %s and inspected_on between %s and %s
                    and designation_code in %s and department in %s;''',[curFinYear,tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData])
                firstCurFinYear = cursor.fetchall()
                
                if len(firstCurFinYear)>0:
                    firstCurFinYear = [list([x if x != None else 0 for x in firstCurFinYear[0] ])]
                    count_list3.append([firstCurFinYear[0][0]-firstCurFinYear[0][1],firstCurFinYear[0][1],firstCurFinYear[0][2]])
                    count_list1.append([firstCurFinYear[0][3]-firstCurFinYear[0][4],firstCurFinYear[0][4],firstCurFinYear[0][5]])
                    count_list2.append([firstCurFinYear[0][6]-firstCurFinYear[0][7],firstCurFinYear[0][7],firstCurFinYear[0][8]])
                else:
                    count_list1.append([0,0,0])
                    count_list2.append([0,0,0])
                    count_list3.append([0,0,0])

                cursor.execute('''select sum(total_count_others)::int,sum(pending_count_others)::int,sum(pending_overdue_count_others)::int,
                        round((case when sum(total_count_others) != 0 then sum(pending_count_others) / sum(total_count_others) else 0 end) *100,2),
                        round((case when sum(total_count_others) != 0 then sum(pending_overdue_count_others) / sum(total_count_others) else 0 end) *100,2),
                        sum(last_one_days_count_others)::int,sum(last_two_days_count_others)::int,sum(last_three_days_count_others)::int,
                        sum(last_four_days_count_others)::int,sum(last_five_days_count_others)::int,			
                        sum(total_count_passenger_safety)::int,sum(pending_count_passenger_safety)::int,sum(pending_overdue_count_passenger_safety)::int,
                        round((case when sum(total_count_passenger_safety) != 0 then sum(pending_count_passenger_safety) / sum(total_count_passenger_safety) else 0 end) *100,2),
                        round((case when sum(total_count_passenger_safety) != 0 then sum(pending_overdue_count_passenger_safety) / sum(total_count_passenger_safety) else 0 end) *100,2),
                        sum(last_one_days_count_passenger_safety)::int,sum(last_two_days_count_passenger_safety)::int,sum(last_three_days_count_passenger_safety)::int,
                        sum(last_four_days_count_passenger_safety)::int,sum(last_five_days_count_passenger_safety)::int,
                        sum(total_count_employee_safety)::int,sum(pending_count_employee_safety)::int,sum(pending_overdue_count_employee_safety)::int,
                        round((case when sum(total_count_employee_safety) != 0 then sum(pending_count_employee_safety) / sum(total_count_employee_safety) else 0 end) *100,2),
                        round((case when sum(total_count_employee_safety) != 0 then sum(pending_overdue_count_employee_safety) / sum(total_count_employee_safety) else 0 end) *100,2),
                        sum(last_one_days_count_employee_safety)::int,sum(last_two_days_count_employee_safety)::int,sum(last_three_days_count_employee_safety)::int,
                        sum(last_four_days_count_employee_safety)::int,sum(last_five_days_count_employee_safety)::int
                        from view_inspection_analysis_table1 where location_type in %s  and location_code in %s and inspected_on between %s and %s
                        and designation_code in %s and department in %s;''',[tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData])
                firstRowAllData = cursor.fetchall()
                
                firstRowAllData = [list([x if x != None else 0 for x in firstRowAllData[0] ])]
                



                cursor.execute('''select sum(total_count_night_inspection)::int,sum(pending_count_night_inspection)::int,sum(pending_overdue_count_night_inspection)::int,
                    sum(total_count_surprise_inspection)::int,sum(pending_count_surprise_inspection)::int,sum(pending_overdue_count_surprise_inspection)::int,
                    sum(total_count_drive_based_inspection)::int,sum(pending_count_drive_based_inspection)::int,sum(pending_overdue_percentage_drive_based_inspection)::int
                    from view_inspection_analysis_table2 where fin_year=%s and location_type in %s  and location_code in %s and inspected_on between %s and %s
                    and designation_code in %s and department in %s;''',[prevFinYear,tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData])
                secondPrevFinYear = cursor.fetchall()
                
                count_list4 =[]
                count_list5 =[]
                count_list6 =[]
                if len(secondPrevFinYear)>0:
                    secondPrevFinYear = [list([x if x != None else 0 for x in secondPrevFinYear[0] ])]
                    count_list4.append([secondPrevFinYear[0][0]-secondPrevFinYear[0][1],secondPrevFinYear[0][1],secondPrevFinYear[0][2]])
                    count_list5.append([secondPrevFinYear[0][3]-secondPrevFinYear[0][4],secondPrevFinYear[0][4],secondPrevFinYear[0][5]])
                    count_list6.append([secondPrevFinYear[0][6]-secondPrevFinYear[0][7],secondPrevFinYear[0][7],secondPrevFinYear[0][8]])
                else:
                    count_list4.append([0,0,0])
                    count_list5.append([0,0,0])
                    count_list6.append([0,0,0])
                cursor.execute('''select sum(total_count_night_inspection)::int,sum(pending_count_night_inspection)::int,sum(pending_overdue_count_night_inspection)::int,
                    sum(total_count_surprise_inspection)::int,sum(pending_count_surprise_inspection)::int,sum(pending_overdue_count_surprise_inspection)::int,
                    sum(total_count_drive_based_inspection)::int,sum(pending_count_drive_based_inspection)::int,sum(pending_overdue_percentage_drive_based_inspection)::int
                    from view_inspection_analysis_table2 where fin_year=%s and location_type in %s  and location_code in %s  and inspected_on between %s and %s
                    and designation_code in %s and department in %s;''',[curFinYear,tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData])
                secondCurFinYear = cursor.fetchall()
                
                if len(secondCurFinYear)>0:
                    secondCurFinYear = [list([x if x != None else 0 for x in secondCurFinYear[0] ])]
                    count_list4.append([secondCurFinYear[0][0]-secondCurFinYear[0][1],secondCurFinYear[0][1],secondCurFinYear[0][2]])
                    count_list5.append([secondCurFinYear[0][3]-secondCurFinYear[0][4],secondCurFinYear[0][4],secondCurFinYear[0][5]])
                    count_list6.append([secondCurFinYear[0][6]-secondCurFinYear[0][7],secondCurFinYear[0][7],secondCurFinYear[0][8]])
                else:
                    count_list4.append([0,0,0])
                    count_list5.append([0,0,0])
                    count_list6.append([0,0,0])

                cursor.execute('''select sum(total_count_night_inspection)::int,sum(pending_count_night_inspection)::int,sum(pending_overdue_count_night_inspection)::int,
                    round((case when sum(total_count_night_inspection) != 0 then sum(pending_count_night_inspection) / sum(total_count_night_inspection) else 0 end) *100,2),
                    round((case when sum(total_count_night_inspection) != 0 then sum(pending_overdue_count_night_inspection) / sum(total_count_night_inspection) else 0 end) *100,2),
                    sum(last_one_days_count_night_inspection)::int,sum(last_two_days_count_night_inspection)::int,sum(last_three_days_count_night_inspection)::int,
                    sum(last_four_days_count_night_inspection)::int,sum(last_five_days_count_night_inspection)::int,	
                    sum(total_count_surprise_inspection)::int,sum(pending_count_surprise_inspection)::int,sum(pending_overdue_count_surprise_inspection)::int,
                    round((case when sum(total_count_surprise_inspection) != 0 then sum(pending_count_surprise_inspection) / sum(total_count_surprise_inspection) else 0 end) *100,2),
                    round((case when sum(total_count_surprise_inspection) != 0 then sum(pending_overdue_count_surprise_inspection) / sum(total_count_surprise_inspection) else 0 end) *100,2),
                    sum(last_one_days_count_surprise_inspection)::int,sum(last_two_days_count_surprise_inspection)::int,sum(last_three_days_count_surprise_inspection)::int,
                    sum(last_four_days_count_surprise_inspection)::int,sum(last_five_days_count_surprise_inspection)::int,
                    sum(total_count_drive_based_inspection)::int,sum(pending_count_drive_based_inspection)::int,sum(pending_overdue_count_drive_based_inspection)::int,
                    round((case when sum(total_count_drive_based_inspection) != 0 then sum(pending_count_drive_based_inspection) / sum(total_count_drive_based_inspection) else 0 end) *100,2),
                    round((case when sum(total_count_drive_based_inspection) != 0 then sum(pending_overdue_count_drive_based_inspection) / sum(total_count_drive_based_inspection) else 0 end) *100,2),
                    sum(last_one_days_count_drive_based_inspection)::int,sum(last_two_days_count_drive_based_inspection)::int,sum(last_three_days_count_drive_based_inspection)::int,
                    sum(last_four_days_count_drive_based_inspection)::int,sum(last_five_days_count_drive_based_inspection)::int
                    from view_inspection_analysis_table2 where location_type in %s  and location_code in %s and inspected_on between %s and %s
                    and designation_code in %s and department in %s;''',[tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData])
                secondRowAllData = cursor.fetchall()
                secondRowAllData = [list([x if x != None else 0 for x in secondRowAllData[0] ])]

                #########   forth row card(pendency)

                cursor.execute('''select sum(count_7_days_passenger_safety),sum(count_30_days_passenger_safety),sum(count_90_days_passenger_safety),
                    sum(count_180_days_passenger_safety),sum(count_365_days_passenger_safety),
                    sum(count_7_days_employee_safety),sum(count_30_days_employee_safety),sum(count_90_days_employee_safety),
                    sum(count_180_days_employee_safety),sum(count_365_days_employee_safety),
                    sum(count_7_days_others),sum(count_30_days_others),sum(count_90_days_others),
                    sum(count_180_days_others),sum(count_365_days_others)
                    from view_inspection_pendency_analysis_table1 where location_type in %s  and location_code in %s and inspected_on between %s and %s
                    and designation_code in %s and department in %s;''',[tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData])
                pendencyDataCard1 = cursor.fetchall()
                pendencyDataCard1 = [list([x if x != None else 0 for x in pendencyDataCard1[0] ])]

                cursor.execute('''select sum(count_7_days_night_inspection),sum(count_30_days_night_inspection),sum(count_90_days_night_inspection),
                    sum(count_180_days_night_inspection),sum(count_365_days_night_inspection),
                    sum(count_7_days_surprise_inspection),sum(count_30_days_surprise_inspection),sum(count_90_days_surprise_inspection),
                    sum(count_180_days_surprise_inspection),sum(count_365_days_surprise_inspection),
                    sum(count_7_days_drive_based_inspection),sum(count_30_days_drive_based_inspection),sum(count_90_days_drive_based_inspection),
                    sum(count_180_days_drive_based_inspection),sum(count_365_days_drive_based_inspection),
                    sum(count_7_days_regular_inspection),sum(count_30_days_regular_inspection),sum(count_90_days_regular_inspection),
                    sum(count_180_days_regular_inspection),sum(count_365_days_regular_inspection)
                    from view_inspection_pendency_analysis_table2 where location_type in %s  and location_code in %s and inspected_on between %s and %s
                    and designation_code in %s and department in %s;''',[tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData])
                pendencyDataCard2 = cursor.fetchall()
                pendencyDataCard2 = [list([x if x != None else 0 for x in pendencyDataCard2[0] ])]


                cursor.execute('''select  sum(total_count_station_passenger_safety),sum(total_count_station_employee_safety),sum(total_count_station_others),
                    sum(total_count_station_night_inspection),sum(total_count_station_surprise_inspection),sum(total_count_station_drive_inspection),
                    sum(total_count_section_passenger_safety),sum(total_count_section_employee_safety),sum(total_count_section_others),
                    sum(total_count_section_night_inspection),sum(total_count_section_surprise_inspection),sum(total_count_section_drive_inspection),
                    sum(total_count_train_passenger_safety),sum(total_count_train_employee_safety),sum(total_count_train_others),
                    sum(total_count_train_night_inspection),sum(total_count_train_surprise_inspection),sum(total_count_train_drive_inspection),
                    sum(total_count_others_passenger_safety),sum(total_count_others_employee_safety),sum(total_count_others_others),
                    sum(total_count_others_night_inspection),sum(total_count_others_surprise_inspection),sum(total_count_others_drive_inspection),
                    round((case when sum(total_count_station_passenger_safety) != 0 then sum(pending_count_station_passenger_safety) / sum(total_count_station_passenger_safety) else 0 end) *100,2),
                    round((case when sum(total_count_station_employee_safety) != 0 then sum(pending_count_station_employee_safety) / sum(total_count_station_employee_safety) else 0 end) *100,2),
                    round((case when sum(total_count_station_others) != 0 then sum(pending_count_station_others) / sum(total_count_station_others) else 0 end) *100,2),
                    round((case when sum(total_count_station_night_inspection) != 0 then sum(pending_count_station_night_inspection) / sum(total_count_station_night_inspection) else 0 end) *100,2),
                    round((case when sum(total_count_station_surprise_inspection) != 0 then sum(pending_count_station_surprise_inspection) / sum(total_count_station_surprise_inspection) else 0 end) *100,2),
                    round((case when sum(total_count_station_drive_inspection) != 0 then sum(pending_count_station_drive_inspection) / sum(total_count_station_drive_inspection) else 0 end) *100,2),
                    round((case when sum(total_count_section_passenger_safety) != 0 then sum(pending_count_section_passenger_safety) / sum(total_count_section_passenger_safety) else 0 end) *100,2),
                    round((case when sum(total_count_section_employee_safety) != 0 then sum(pending_count_section_employee_safety) / sum(total_count_section_employee_safety) else 0 end) *100,2),
                    round((case when sum(total_count_section_others) != 0 then sum(pending_count_section_others) / sum(total_count_section_others) else 0 end) *100,2),
                    round((case when sum(total_count_section_night_inspection) != 0 then sum(pending_count_section_night_inspection) / sum(total_count_section_night_inspection) else 0 end) *100,2),
                    round((case when sum(total_count_section_surprise_inspection) != 0 then sum(pending_count_section_surprise_inspection) / sum(total_count_section_surprise_inspection) else 0 end) *100,2),
                    round((case when sum(total_count_section_drive_inspection) != 0 then sum(pending_count_section_drive_inspection) / sum(total_count_section_drive_inspection) else 0 end) *100,2),
                    round((case when sum(total_count_train_passenger_safety) != 0 then sum(pending_count_train_passenger_safety) / sum(total_count_train_passenger_safety) else 0 end) *100,2),
                    round((case when sum(total_count_train_employee_safety) != 0 then sum(pending_count_train_employee_safety) / sum(total_count_train_employee_safety) else 0 end) *100,2),
                    round((case when sum(total_count_train_others) != 0 then sum(pending_count_train_others) / sum(total_count_train_others) else 0 end) *100,2),
                    round((case when sum(total_count_train_night_inspection) != 0 then sum(pending_count_train_night_inspection) / sum(total_count_train_night_inspection) else 0 end) *100,2),
                    round((case when sum(total_count_train_surprise_inspection) != 0 then sum(pending_count_train_surprise_inspection) / sum(total_count_train_surprise_inspection) else 0 end) *100,2),
                    round((case when sum(total_count_train_drive_inspection) != 0 then sum(pending_count_train_drive_inspection) / sum(total_count_train_drive_inspection) else 0 end) *100,2),
                    round((case when sum(total_count_others_passenger_safety) != 0 then sum(pending_count_others_passenger_safety) / sum(total_count_others_passenger_safety) else 0 end) *100,2),
                    round((case when sum(total_count_others_employee_safety) != 0 then sum(pending_count_others_employee_safety) / sum(total_count_others_employee_safety) else 0 end) *100,2),
                    round((case when sum(total_count_others_others) != 0 then sum(pending_count_others_others) / sum(total_count_others_others) else 0 end) *100,2),
                    round((case when sum(total_count_others_night_inspection) != 0 then sum(total_count_others_night_inspection) / sum(total_count_others_night_inspection) else 0 end) *100,2),
                    round((case when sum(total_count_others_surprise_inspection) != 0 then sum(total_count_others_surprise_inspection) / sum(total_count_others_surprise_inspection) else 0 end) *100,2),
                    round((case when sum(total_count_others_drive_inspection) != 0 then sum(total_count_others_drive_inspection) / sum(total_count_others_drive_inspection) else 0 end) *100,2)
                    from view_inspection_analysis_table3 where location_type in %s  and location_code in %s and inspected_on between %s and %s
                    and designation_code in %s and department in %s;''',[tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData])
                thirdRowData = cursor.fetchall()
                thirdRowData = [list([x if x != None else 0 for x in thirdRowData[0] ])]
                

            else:
                cursor.execute('''select sum(total_count_others)::int,sum(pending_count_others)::int,sum(pending_overdue_count_others)::int,
                    sum(total_count_passenger_safety)::int,sum(pending_count_passenger_safety)::int,sum(pending_overdue_count_passenger_safety)::int,
                    sum(total_count_employee_safety)::int,sum(pending_count_employee_safety)::int,sum(pending_overdue_count_employee_safety)::int
                    from inspection_analysis_table1 where fin_year=%s and location_type in %s  and location_code in %s;''',[prevFinYear,tuple(irTypeValData),allLocationCodeData])
                firstPrevFinYear = cursor.fetchall()
                count_list1 =[]
                count_list2 =[]
                count_list3 =[]
                if len(firstPrevFinYear)>0:
                    firstPrevFinYear = [list([x if x != None else 0 for x in firstPrevFinYear[0] ])]
                    count_list3.append([firstPrevFinYear[0][0]-firstPrevFinYear[0][1],firstPrevFinYear[0][1],firstPrevFinYear[0][2]])
                    count_list1.append([firstPrevFinYear[0][3]-firstPrevFinYear[0][4],firstPrevFinYear[0][4],firstPrevFinYear[0][5]])
                    count_list2.append([firstPrevFinYear[0][6]-firstPrevFinYear[0][7],firstPrevFinYear[0][7],firstPrevFinYear[0][8]])
                else:
                    count_list1.append([0,0,0])
                    count_list2.append([0,0,0])
                    count_list3.append([0,0,0])
                cursor.execute('''select sum(total_count_others)::int,sum(pending_count_others)::int,sum(pending_overdue_count_others)::int,
                    sum(total_count_passenger_safety)::int,sum(pending_count_passenger_safety)::int,sum(pending_overdue_count_passenger_safety)::int,
                    sum(total_count_employee_safety)::int,sum(pending_count_employee_safety)::int,sum(pending_overdue_count_employee_safety)::int
                    from inspection_analysis_table1 where fin_year=%s and location_type in %s  and location_code in %s;''',[curFinYear,tuple(irTypeValData),allLocationCodeData])
                firstCurFinYear = cursor.fetchall()
                
                if len(firstCurFinYear)>0:
                    firstCurFinYear = [list([x if x != None else 0 for x in firstCurFinYear[0] ])]
                    count_list3.append([firstCurFinYear[0][0]-firstCurFinYear[0][1],firstCurFinYear[0][1],firstCurFinYear[0][2]])
                    count_list1.append([firstCurFinYear[0][3]-firstCurFinYear[0][4],firstCurFinYear[0][4],firstCurFinYear[0][5]])
                    count_list2.append([firstCurFinYear[0][6]-firstCurFinYear[0][7],firstCurFinYear[0][7],firstCurFinYear[0][8]])
                else:
                    count_list1.append([0,0,0])
                    count_list2.append([0,0,0])
                    count_list3.append([0,0,0])

                cursor.execute('''select sum(total_count_others)::int,sum(pending_count_others)::int,sum(pending_overdue_count_others)::int,
                        round((case when sum(total_count_others) != 0 then sum(pending_count_others) / sum(total_count_others) else 0 end) *100,2),
                        round((case when sum(total_count_others) != 0 then sum(pending_overdue_count_others) / sum(total_count_others) else 0 end) *100,2),
                        sum(last_one_days_count_others)::int,sum(last_two_days_count_others)::int,sum(last_three_days_count_others)::int,
                        sum(last_four_days_count_others)::int,sum(last_five_days_count_others)::int,			
                        sum(total_count_passenger_safety)::int,sum(pending_count_passenger_safety)::int,sum(pending_overdue_count_passenger_safety)::int,
                        round((case when sum(total_count_passenger_safety) != 0 then sum(pending_count_passenger_safety) / sum(total_count_passenger_safety) else 0 end) *100,2),
                        round((case when sum(total_count_passenger_safety) != 0 then sum(pending_overdue_count_passenger_safety) / sum(total_count_passenger_safety) else 0 end) *100,2),
                        sum(last_one_days_count_passenger_safety)::int,sum(last_two_days_count_passenger_safety)::int,sum(last_three_days_count_passenger_safety)::int,
                        sum(last_four_days_count_passenger_safety)::int,sum(last_five_days_count_passenger_safety)::int,
                        sum(total_count_employee_safety)::int,sum(pending_count_employee_safety)::int,sum(pending_overdue_count_employee_safety)::int,
                        round((case when sum(total_count_employee_safety) != 0 then sum(pending_count_employee_safety) / sum(total_count_employee_safety) else 0 end) *100,2),
                        round((case when sum(total_count_employee_safety) != 0 then sum(pending_overdue_count_employee_safety) / sum(total_count_employee_safety) else 0 end) *100,2),
                        sum(last_one_days_count_employee_safety)::int,sum(last_two_days_count_employee_safety)::int,sum(last_three_days_count_employee_safety)::int,
                        sum(last_four_days_count_employee_safety)::int,sum(last_five_days_count_employee_safety)::int
                        from inspection_analysis_table1 where location_type in %s  and location_code in %s;''',[tuple(irTypeValData),allLocationCodeData])
                firstRowAllData = cursor.fetchall()
                
                firstRowAllData = [list([x if x != None else 0 for x in firstRowAllData[0] ])]
                



                cursor.execute('''select sum(total_count_night_inspection)::int,sum(pending_count_night_inspection)::int,sum(pending_overdue_count_night_inspection)::int,
                    sum(total_count_surprise_inspection)::int,sum(pending_count_surprise_inspection)::int,sum(pending_overdue_count_surprise_inspection)::int,
                    sum(total_count_drive_based_inspection)::int,sum(pending_count_drive_based_inspection)::int,sum(pending_overdue_percentage_drive_based_inspection)::int
                    from inspection_analysis_table2 where fin_year=%s and location_type in %s  and location_code in %s;''',[prevFinYear,tuple(irTypeValData),allLocationCodeData])
                secondPrevFinYear = cursor.fetchall()
                count_list4 =[]
                count_list5 =[]
                count_list6 =[]
                if len(secondPrevFinYear)>0:
                    secondPrevFinYear = [list([x if x != None else 0 for x in secondPrevFinYear[0] ])]
                    count_list4.append([secondPrevFinYear[0][0]-secondPrevFinYear[0][1],secondPrevFinYear[0][1],secondPrevFinYear[0][2]])
                    count_list5.append([secondPrevFinYear[0][3]-secondPrevFinYear[0][4],secondPrevFinYear[0][4],secondPrevFinYear[0][5]])
                    count_list6.append([secondPrevFinYear[0][6]-secondPrevFinYear[0][7],secondPrevFinYear[0][7],secondPrevFinYear[0][8]])
                else:
                    count_list4.append([0,0,0])
                    count_list5.append([0,0,0])
                    count_list6.append([0,0,0])
                cursor.execute('''select sum(total_count_night_inspection)::int,sum(pending_count_night_inspection)::int,sum(pending_overdue_count_night_inspection)::int,
                    sum(total_count_surprise_inspection)::int,sum(pending_count_surprise_inspection)::int,sum(pending_overdue_count_surprise_inspection)::int,
                    sum(total_count_drive_based_inspection)::int,sum(pending_count_drive_based_inspection)::int,sum(pending_overdue_percentage_drive_based_inspection)::int
                    from inspection_analysis_table2 where fin_year=%s and location_type in %s  and location_code in %s;''',[curFinYear,tuple(irTypeValData),allLocationCodeData])
                secondCurFinYear = cursor.fetchall()
                
                if len(secondCurFinYear)>0:
                    secondCurFinYear = [list([x if x != None else 0 for x in secondCurFinYear[0] ])]
                    count_list4.append([secondCurFinYear[0][0]-secondCurFinYear[0][1],secondCurFinYear[0][1],secondCurFinYear[0][2]])
                    count_list5.append([secondCurFinYear[0][3]-secondCurFinYear[0][4],secondCurFinYear[0][4],secondCurFinYear[0][5]])
                    count_list6.append([secondCurFinYear[0][6]-secondCurFinYear[0][7],secondCurFinYear[0][7],secondCurFinYear[0][8]])
                else:
                    count_list4.append([0,0,0])
                    count_list5.append([0,0,0])
                    count_list6.append([0,0,0])

                cursor.execute('''select sum(total_count_night_inspection)::int,sum(pending_count_night_inspection)::int,sum(pending_overdue_count_night_inspection)::int,
                    round((case when sum(total_count_night_inspection) != 0 then sum(pending_count_night_inspection) / sum(total_count_night_inspection) else 0 end) *100,2),
                    round((case when sum(total_count_night_inspection) != 0 then sum(pending_overdue_count_night_inspection) / sum(total_count_night_inspection) else 0 end) *100,2),
                    sum(last_one_days_count_night_inspection)::int,sum(last_two_days_count_night_inspection)::int,sum(last_three_days_count_night_inspection)::int,
                    sum(last_four_days_count_night_inspection)::int,sum(last_five_days_count_night_inspection)::int,	
                    sum(total_count_surprise_inspection)::int,sum(pending_count_surprise_inspection)::int,sum(pending_overdue_count_surprise_inspection)::int,
                    round((case when sum(total_count_surprise_inspection) != 0 then sum(pending_count_surprise_inspection) / sum(total_count_surprise_inspection) else 0 end) *100,2),
                    round((case when sum(total_count_surprise_inspection) != 0 then sum(pending_overdue_count_surprise_inspection) / sum(total_count_surprise_inspection) else 0 end) *100,2),
                    sum(last_one_days_count_surprise_inspection)::int,sum(last_two_days_count_surprise_inspection)::int,sum(last_three_days_count_surprise_inspection)::int,
                    sum(last_four_days_count_surprise_inspection)::int,sum(last_five_days_count_surprise_inspection)::int,
                    sum(total_count_drive_based_inspection)::int,sum(pending_count_drive_based_inspection)::int,sum(pending_overdue_count_drive_based_inspection)::int,
                    round((case when sum(total_count_drive_based_inspection) != 0 then sum(pending_count_drive_based_inspection) / sum(total_count_drive_based_inspection) else 0 end) *100,2),
                    round((case when sum(total_count_drive_based_inspection) != 0 then sum(pending_overdue_count_drive_based_inspection) / sum(total_count_drive_based_inspection) else 0 end) *100,2),
                    sum(last_one_days_count_drive_based_inspection)::int,sum(last_two_days_count_drive_based_inspection)::int,sum(last_three_days_count_drive_based_inspection)::int,
                    sum(last_four_days_count_drive_based_inspection)::int,sum(last_five_days_count_drive_based_inspection)::int
                    from view_inspection_analysis_table2 where location_type in %s  and location_code in %s;''',[tuple(irTypeValData),allLocationCodeData])
                secondRowAllData = cursor.fetchall()
                secondRowAllData = [list([x if x != None else 0 for x in secondRowAllData[0] ])]
                #########   forth row card(pendency)

                cursor.execute('''select sum(count_7_days_passenger_safety),sum(count_30_days_passenger_safety),sum(count_90_days_passenger_safety),
                    sum(count_180_days_passenger_safety),sum(count_365_days_passenger_safety),
                    sum(count_7_days_employee_safety),sum(count_30_days_employee_safety),sum(count_90_days_employee_safety),
                    sum(count_180_days_employee_safety),sum(count_365_days_employee_safety),
                    sum(count_7_days_others),sum(count_30_days_others),sum(count_90_days_others),
                    sum(count_180_days_others),sum(count_365_days_others)
                    from inspection_pendency_analysis_table1 where location_type in %s  and location_code in %s;''',[tuple(irTypeValData),allLocationCodeData])
                pendencyDataCard1 = cursor.fetchall()
                pendencyDataCard1 = [list([x if x != None else 0 for x in pendencyDataCard1[0] ])]

                cursor.execute('''select sum(count_7_days_night_inspection),sum(count_30_days_night_inspection),sum(count_90_days_night_inspection),
                    sum(count_180_days_night_inspection),sum(count_365_days_night_inspection),
                    sum(count_7_days_surprise_inspection),sum(count_30_days_surprise_inspection),sum(count_90_days_surprise_inspection),
                    sum(count_180_days_surprise_inspection),sum(count_365_days_surprise_inspection),
                    sum(count_7_days_drive_based_inspection),sum(count_30_days_drive_based_inspection),sum(count_90_days_drive_based_inspection),
                    sum(count_180_days_drive_based_inspection),sum(count_365_days_drive_based_inspection),
                    sum(count_7_days_regular_inspection),sum(count_30_days_regular_inspection),sum(count_90_days_regular_inspection),
                    sum(count_180_days_regular_inspection),sum(count_365_days_regular_inspection)
                    from inspection_pendency_analysis_table2 where location_type in %s  and location_code in %s;''',[tuple(irTypeValData),allLocationCodeData])
                pendencyDataCard2 = cursor.fetchall()
                pendencyDataCard2 = [list([x if x != None else 0 for x in pendencyDataCard2[0] ])]


                cursor.execute('''select  sum(total_count_station_passenger_safety),sum(total_count_station_employee_safety),sum(total_count_station_others),
                    sum(total_count_station_night_inspection),sum(total_count_station_surprise_inspection),sum(total_count_station_drive_inspection),
                    sum(total_count_section_passenger_safety),sum(total_count_section_employee_safety),sum(total_count_section_others),
                    sum(total_count_section_night_inspection),sum(total_count_section_surprise_inspection),sum(total_count_section_drive_inspection),
                    sum(total_count_train_passenger_safety),sum(total_count_train_employee_safety),sum(total_count_train_others),
                    sum(total_count_train_night_inspection),sum(total_count_train_surprise_inspection),sum(total_count_train_drive_inspection),
                    sum(total_count_others_passenger_safety),sum(total_count_others_employee_safety),sum(total_count_others_others),
                    sum(total_count_others_night_inspection),sum(total_count_others_surprise_inspection),sum(total_count_others_drive_inspection),
                    round((case when sum(total_count_station_passenger_safety) != 0 then sum(pending_count_station_passenger_safety) / sum(total_count_station_passenger_safety) else 0 end) *100,2),
                    round((case when sum(total_count_station_employee_safety) != 0 then sum(pending_count_station_employee_safety) / sum(total_count_station_employee_safety) else 0 end) *100,2),
                    round((case when sum(total_count_station_others) != 0 then sum(pending_count_station_others) / sum(total_count_station_others) else 0 end) *100,2),
                    round((case when sum(total_count_station_night_inspection) != 0 then sum(pending_count_station_night_inspection) / sum(total_count_station_night_inspection) else 0 end) *100,2),
                    round((case when sum(total_count_station_surprise_inspection) != 0 then sum(pending_count_station_surprise_inspection) / sum(total_count_station_surprise_inspection) else 0 end) *100,2),
                    round((case when sum(total_count_station_drive_inspection) != 0 then sum(pending_count_station_drive_inspection) / sum(total_count_station_drive_inspection) else 0 end) *100,2),
                    round((case when sum(total_count_section_passenger_safety) != 0 then sum(pending_count_section_passenger_safety) / sum(total_count_section_passenger_safety) else 0 end) *100,2),
                    round((case when sum(total_count_section_employee_safety) != 0 then sum(pending_count_section_employee_safety) / sum(total_count_section_employee_safety) else 0 end) *100,2),
                    round((case when sum(total_count_section_others) != 0 then sum(pending_count_section_others) / sum(total_count_section_others) else 0 end) *100,2),
                    round((case when sum(total_count_section_night_inspection) != 0 then sum(pending_count_section_night_inspection) / sum(total_count_section_night_inspection) else 0 end) *100,2),
                    round((case when sum(total_count_section_surprise_inspection) != 0 then sum(pending_count_section_surprise_inspection) / sum(total_count_section_surprise_inspection) else 0 end) *100,2),
                    round((case when sum(total_count_section_drive_inspection) != 0 then sum(pending_count_section_drive_inspection) / sum(total_count_section_drive_inspection) else 0 end) *100,2),
                    round((case when sum(total_count_train_passenger_safety) != 0 then sum(pending_count_train_passenger_safety) / sum(total_count_train_passenger_safety) else 0 end) *100,2),
                    round((case when sum(total_count_train_employee_safety) != 0 then sum(pending_count_train_employee_safety) / sum(total_count_train_employee_safety) else 0 end) *100,2),
                    round((case when sum(total_count_train_others) != 0 then sum(pending_count_train_others) / sum(total_count_train_others) else 0 end) *100,2),
                    round((case when sum(total_count_train_night_inspection) != 0 then sum(pending_count_train_night_inspection) / sum(total_count_train_night_inspection) else 0 end) *100,2),
                    round((case when sum(total_count_train_surprise_inspection) != 0 then sum(pending_count_train_surprise_inspection) / sum(total_count_train_surprise_inspection) else 0 end) *100,2),
                    round((case when sum(total_count_train_drive_inspection) != 0 then sum(pending_count_train_drive_inspection) / sum(total_count_train_drive_inspection) else 0 end) *100,2),
                    round((case when sum(total_count_others_passenger_safety) != 0 then sum(pending_count_others_passenger_safety) / sum(total_count_others_passenger_safety) else 0 end) *100,2),
                    round((case when sum(total_count_others_employee_safety) != 0 then sum(pending_count_others_employee_safety) / sum(total_count_others_employee_safety) else 0 end) *100,2),
                    round((case when sum(total_count_others_others) != 0 then sum(pending_count_others_others) / sum(total_count_others_others) else 0 end) *100,2),
                    round((case when sum(total_count_others_night_inspection) != 0 then sum(total_count_others_night_inspection) / sum(total_count_others_night_inspection) else 0 end) *100,2),
                    round((case when sum(total_count_others_surprise_inspection) != 0 then sum(total_count_others_surprise_inspection) / sum(total_count_others_surprise_inspection) else 0 end) *100,2),
                    round((case when sum(total_count_others_drive_inspection) != 0 then sum(total_count_others_drive_inspection) / sum(total_count_others_drive_inspection) else 0 end) *100,2)
                    from inspection_analysis_table3 where location_type in %s  and location_code in %s;''',[tuple(irTypeValData),allLocationCodeData])
                thirdRowData = cursor.fetchall()
                thirdRowData = [list([x if x != None else 0 for x in thirdRowData[0] ])]
                
            cursor.close()


    variationPassenger = "{:.0f}".format(((firstCurFinYear[0][3] - firstPrevFinYear[0][3]) / firstPrevFinYear[0][3]) * 100,2) if firstPrevFinYear[0][3] != 0 else 11000011
    if variationPassenger == 11000011:
        variationPassenger = ['NaN','0']
    elif float(variationPassenger) >= 0:
        variationPassenger = [variationPassenger,'1']
    else:
        variationPassenger = [str(variationPassenger)[1:],'2']
    
    variationEmployee = "{:.0f}".format(((firstCurFinYear[0][6] - firstPrevFinYear[0][6]) / firstPrevFinYear[0][6]) * 100,2) if firstPrevFinYear[0][6] != 0 else 11000011
    if variationEmployee == 11000011:
        variationEmployee = ['NaN','0']
    elif float(variationEmployee) >= 0:
        variationEmployee = [variationEmployee,'1']
    else:
        variationEmployee = [str(variationEmployee)[1:],'2']
    
    variationOthers ="{:.0f}".format(((firstCurFinYear[0][0] - firstPrevFinYear[0][0]) / firstPrevFinYear[0][0]) * 100,2) if firstPrevFinYear[0][0] != 0 else 11000011
    
    if variationOthers == 11000011:
        variationOthers = ['NaN','0']
    elif float(variationOthers) >= 0:
        variationOthers = [variationOthers,'1']
    else:
        variationOthers = [str(variationOthers)[1:],'2']

    variationSuprise = "{:.0f}".format(((secondCurFinYear[0][3] - secondPrevFinYear[0][3]) / secondPrevFinYear[0][3]) * 100,2) if secondPrevFinYear[0][3] != 0 else 11000011
    if variationSuprise == 11000011:
        variationSuprise = ['NaN','0']
    elif float(variationSuprise) >= 0:
        variationSuprise = [variationSuprise,'1']
    else:
        variationSuprise = [str(variationSuprise)[1:],'2']
    
    variationDrive = "{:.0f}".format(((secondCurFinYear[0][6] - secondPrevFinYear[0][6]) / secondPrevFinYear[0][6]) * 100,2) if secondPrevFinYear[0][6] != 0 else 11000011
    if variationDrive == 11000011:
        variationDrive = ['NaN','0']
    elif float(variationDrive) >= 0:
        variationDrive = [variationDrive,'1']
    else:
        variationDrive = [str(variationDrive)[1:],'2']
    
    variationNight = "{:.0f}".format(((secondCurFinYear[0][0] - secondPrevFinYear[0][0]) / secondPrevFinYear[0][0]) * 100,2) if secondPrevFinYear[0][0] != 0 else 11000011
    if variationNight == 11000011:
        variationNight = ['NaN','0']
    elif float(variationNight) >= 0:
        variationNight = [variationNight,'1']
    else:
        variationNight = [str(variationNight)[1:],'2']    
          
    overallTotalCount =   firstRowAllData[0][10]+firstRowAllData[0][20]+firstRowAllData[0][0]+secondRowAllData[0][10]+secondRowAllData[0][20]+secondRowAllData[0][0]   
    overallPendingCount = firstRowAllData[0][11]+firstRowAllData[0][21]+firstRowAllData[0][1]+secondRowAllData[0][11]+secondRowAllData[0][21]+secondRowAllData[0][1] 
    overallOverdueCount = firstRowAllData[0][12]+firstRowAllData[0][22]+firstRowAllData[0][2]+secondRowAllData[0][12]+secondRowAllData[0][22]+secondRowAllData[0][2]
    overallPendingPercentage = "{:.0f}".format((overallPendingCount/overallTotalCount)*100) if overallTotalCount != 0 else 0.00
    overallOverduePercentage = "{:.0f}".format((overallOverdueCount/overallTotalCount)*100) if overallTotalCount != 0 else 0.00
    
    for i in range(len(allDesignation)):
        d_level = allDesignation[i]['d_level']
        if d_level != None:
            catData = list(models.category.objects.filter(category=d_level).values('hierarchy_level'))
            if len(catData)>0:
                if catData[0]['hierarchy_level'] != None:
                    allDesignation[i].update({'level':int(catData[0]['hierarchy_level'])})
                else:
                    allDesignation[i].update({'level':1000})
            else:
                allDesignation[i].update({'level':1000})
        else:
            allDesignation[i].update({'level':1000})
    allDesignation = sorted(allDesignation, key = lambda x: (x['level'],x['designation']))           


    
    print(firstRowAllData)
    print(variationPassenger,variationEmployee,variationOthers,variationSuprise,variationDrive,variationNight,overallTotalCount,overallPendingCount,overallOverdueCount,overallPendingPercentage,overallOverduePercentage)
    context = {
        'allDepartment':allDepartment,
        'allDesignation':allDesignation,
        'allFinYear':json.dumps([prevFinYear,curFinYear]),
        'daysArray':daysArray,
        'count_list1':json.dumps(count_list1),
        'count_list2':json.dumps(count_list2),
        'count_list3':json.dumps(count_list3),
        'count_list4':json.dumps(count_list4),
        'count_list5':json.dumps(count_list5),
        'count_list6':json.dumps(count_list6),
        'firstRowAllData':firstRowAllData,
        'secondRowAllData':secondRowAllData,
        'pendencyDataCard1':pendencyDataCard1,
        'pendencyDataCard2':pendencyDataCard2,
        'thirdRowData':thirdRowData,
        'irTypeVal':irTypeVal,
        'irDetailsVal':irDetailsVal,
        'irMapVal':irMapVal,
        'irPathVal1':irPathVal1,
        'irPathVal2':irPathVal2,
        'dataZoneWs':dataZoneWs,

        'irSearchDept':irSearchDept,
        'irSearchDate':irSearchDate,
        'irSearchDesig':irSearchDesig,  

        'variationPassenger':variationPassenger,  
        'variationEmployee':variationEmployee,
        'variationOthers':variationOthers,
        'variationSuprise':variationSuprise,
        'variationDrive':variationDrive,
        'variationNight':variationNight,
        'overallTotalCount':overallTotalCount,
        'overallPendingCount':overallPendingCount,
        'overallOverdueCount':overallOverdueCount,
        'overallPendingPercentage':overallPendingPercentage,
        'overallOverduePercentage':overallOverduePercentage,




    }
    return render(request,'svgtemplate.html',context)




# def InspDashboardDetailView(request):
#     if request.method == 'GET' and request.is_ajax():
#         searchDate = request.GET.get('searchDate')
#         searchDepartment = request.GET.get('searchDepartment')
#         searchDesignation = request.GET.get('searchDesignation')
#         print("topnav",searchDate,searchDepartment,searchDesignation)

#         irType = request.GET.get('irType')
#         irDetails = request.GET.get('irDetails')
#         irPath2 = request.GET.get('irPath2')

#         card_type = request.GET.get('card_type') 
#         card_data = request.GET.get('card_data')


#         cursor = connection.cursor()
#         if card_type == 'Others' and card_data == 'Total':
#             columns = 'location_code,total_count_others,pending_count_others,pending_overdue_count_others,completed_count_others'
#             table = 'public.view_inspection_analysis_table1'
#         elif card_type == 'Others' and card_data in ['Pending','Overdue']:
#             columns = 'location_code,count_7_days_others,count_30_days_others,count_90_days_others,count_180_days_others'
#             table = 'public.inspection_pendency_analysis_table1'

#         if card_type == 'Employee Safety' and card_data == 'Total':
#             columns = 'location_code,total_count_employee_safety,pending_count_employee_safety,pending_overdue_count_employee_safety,completed_count_employee_safety'
#             table = 'public.view_inspection_analysis_table1'
#         elif card_type == 'Employee Safety' and card_data in ['Pending','Overdue']:
#             columns = 'location_code,count_7_days_employee_safety,count_30_days_employee_safety,count_90_days_employee_safety,count_180_days_employee_safety'
#             table = 'public.inspection_pendency_analysis_table1'

#         if card_type == 'Passenger Safety' and card_data == 'Total':
#             columns = 'location_code,total_count_others,pending_count_others,pending_overdue_count_others,completed_count_others'
#             table = 'public.view_inspection_analysis_table1'
#         elif card_type == 'Passenger Safety' and card_data in ['Pending','Overdue']:
#             columns = 'location_code,count_7_days_passenger_safety,count_30_days_passenger_safety,count_90_days_passenger_safety,count_180_days_passenger_safety'
#             table = 'public.inspection_pendency_analysis_table1'
            
        
#         if (searchDate == '') and searchDepartment == 'All' and searchDesignation == 'All':
#             if irType == 'ZR' and irDetails == 'All':
#                 cursor.execute(''' select {}
#                     from {} where location_type in {}; '''.format(columns,table,('ZR','DIV','WS')))   
#                 data = cursor.fetchall()
#                 print('ialjeiffjsrtjrt',data)
#                 return JsonResponse({'data':data},safe = False)  
            
#             elif irType == 'ZR' and irDetails != 'All':
#                 cursor.execute(''' select {}
#                     from {} where location_type = '{}' and location_type = '{}' ; '''.format(columns,table,'ZR',irDetails))   
#                 data = cursor.fetchall()
#                 print('rtdtjdrt',data)
#                 return JsonResponse({'data':data},safe = False)
#             else:
#                 if irPath2 !='':
#                     print("columns",columns,table)
#                     cursor.execute(''' select {} from {} where location_code = '{}' '''.format(columns,table,irPath2))
#                     data = cursor.fetchall()
#                     print("bdfere",data)
#                     return JsonResponse({'data':data},safe = False) 
#                 elif irDetails == 'All':
#                     cursor.execute(''' select {} from {} where location_type = '{}' '''.format(columns,table,irType))
#                     data = cursor.fetchall()
#                     print("hmtymet",data)
#                     return JsonResponse({'data':data},safe = False) 
#                 else:
#                     print('lijsefj',columns,table)
#                     cursor.execute(''' select {} from {} where location_type = '{}' and parent_location_code = '{}' '''.format(columns,table,irType,irDetails))
#                     data = cursor.fetchall()
#                     print("zdtjarhart",data)
#                     return JsonResponse({'data':data},safe = False) 
#         else:
#             if irType == 'ZR' and irDetails == 'All':
#                 cursor.execute(''' select {}
#                     from {} where location_type in {}; '''.format(columns,table,('ZR','DIV','WS')))   
#                 data = cursor.fetchall()
#                 print('ialjeif',data)
#                 return JsonResponse({'data':data},safe = False)  
#             elif irType == 'ZR' and irDetails != 'All':
#                 cursor.execute(''' select {}
#                     from {} where location_type = '{}' and location_type = '{}' ; '''.format(columns,table,'ZR',irDetails))   
#                 data = cursor.fetchall()
#                 print('ialjeif',data)
#                 return JsonResponse({'data':data},safe = False)
#             else:
#                 if irPath2 !='':
#                     cursor.execute(''' select {} from {} where location_code = '{}' '''.format(columns,table,irPath2))
#                     data = cursor.fetchall()
#                     print("srtnrbre",data)
#                     return JsonResponse({'data':data},safe = False) 
#                 elif irDetails == 'All':
#                     cursor.execute(''' select {} from {} where location_type = '{}' '''.format(columns,table,irType))
#                     data = cursor.fetchall()
#                     print("raeraer",data)
#                     return JsonResponse({'data':data},safe = False) 
#                 else:
#                     cursor.execute(''' select {} from {} where location_type = '{}' and parent_location_code = '{}' '''.format(columns,table,irType,irDetails))
#                     data = cursor.fetchall()
#                     print("raeherher",data)
#                     return JsonResponse({'data':data},safe = False) 
            
#         cursor.close()

#         return JsonResponse({},safe = False)     

def InspDashboardDetailView(request):
    if request.method == 'GET' and request.is_ajax():
        searchDate = request.GET.get('searchDate')
        searchDepartment = request.GET.get('searchDepartment')
        searchDesignation = request.GET.get('searchDesignation')

        irSearchDate = request.GET.get('irSearchDate')
        irSearchDept = request.GET.get('irSearchDept')
        irSearchDesig = request.GET.get('irSearchDesig')
        
        print("topnav",searchDate,searchDepartment,searchDesignation)

        irType = request.GET.get('irType')
        irDetails = request.GET.get('irDetails')
        irPath2 = request.GET.get('irPath2')

        card_type = request.GET.get('card_type') 
        card_data = request.GET.get('card_data')


        cursor = connection.cursor()
        if irSearchDate == '' and irSearchDept == 'All' and irSearchDesig == 'All':
            if card_type == 'Others' and card_data == 'Total':
                print('inside if')
                columns = 'location_code,sum(total_count_others) as total_count_others ,sum(pending_count_others) as pending_count_others ,sum(pending_overdue_count_others) as pending_overdue_count_others ,sum(completed_count_others) as completed_count_others'
                table = 'public.inspection_analysis_table1'
            elif card_type == 'Others' and card_data in ['Pending','Overdue']:
                columns = 'location_code,sum(count_7_days_others) as count_7_days_others ,sum(count_30_days_others) as count_30_days_others ,sum(count_90_days_others) as count_90_days_others ,sum(count_180_days_others) as count_180_days_others'
                table = 'public.inspection_pendency_analysis_table1'

            if card_type == 'Employee Safety' and card_data == 'Total':
                columns = 'location_code,sum(total_count_employee_safety) as total_count_employee_safety ,sum(pending_count_employee_safety) as pending_count_employee_safety ,sum(pending_overdue_count_employee_safety) as pending_overdue_count_employee_safety ,sum(completed_count_employee_safety) as completed_count_employee_safety'
                table = 'public.inspection_analysis_table1'
            elif card_type == 'Employee Safety' and card_data in ['Pending','Overdue']:
                columns = 'location_code,sum(count_7_days_employee_safety) as count_7_days_employee_safety ,sum(count_30_days_employee_safety) as count_30_days_employee_safety ,sum(count_90_days_employee_safety) as count_90_days_employee_safety ,sum(count_180_days_employee_safety) as count_180_days_employee_safety'
                table = 'public.inspection_pendency_analysis_table1'

            if card_type == 'Passenger Safety' and card_data == 'Total':
                columns = 'location_code,sum(total_count_passenger_safety) as total_count_passenger_safety ,sum(pending_count_passenger_safety) as pending_count_passenger_safety ,sum(pending_overdue_count_passenger_safety) as pending_overdue_count_passenger_safety ,sum(completed_count_passenger_safety) as completed_count_passenger_safety'
                table = 'public.inspection_analysis_table1'
            elif card_type == 'Passenger Safety' and card_data in ['Pending','Overdue']:
                columns = 'location_code,sum(count_7_days_passenger_safety) as count_7_days_passenger_safety ,sum(count_30_days_passenger_safety) as count_30_days_passenger_safety ,sum(count_90_days_passenger_safety) as count_90_days_passenger_safety ,sum(count_180_days_passenger_safety) as count_180_days_passenger_safety'
                table = 'public.inspection_pendency_analysis_table1'
            
            if card_type == 'Night Inspection' and card_data == 'Total':
                print('inside if')
                columns = 'location_code,sum(total_count_night_inspection) as total_count_night_inspection ,sum(pending_count_night_inspection) as pending_count_night_inspection ,sum(pending_overdue_count_night_inspection) as pending_overdue_count_night_inspection ,sum(completed_count_night_inspection) as completed_count_night_inspection'
                table = 'public.inspection_analysis_table2'
            elif card_type == 'Night Inspection' and card_data in ['Pending','Overdue']:
                columns = 'location_code,sum(count_7_days_night_inspection) as count_7_days_night_inspection ,sum(count_30_days_night_inspection) as count_30_days_night_inspection ,sum(count_90_days_night_inspection) ascount_90_days_night_inspection ,sum(count_180_days_night_inspection) as count_180_days_night_inspection'
                table = 'public.inspection_pendency_analysis_table2'
            if card_type == 'Surprise Inspection' and card_data == 'Total':
                print('inside if')
                columns = 'location_code,sum(total_count_surprise_inspection) as total_count_surprise_inspection ,sum(pending_count_surprise_inspection) as pending_count_surprise_inspection ,sum(pending_overdue_count_surprise_inspection) as pending_overdue_count_surprise_inspection ,sum(completed_count_surprise_inspection) as completed_count_surprise_inspection'
                table = 'public.inspection_analysis_table2'
            elif card_type == 'Surprise Inspection' and card_data in ['Pending','Overdue']:
                columns = 'location_code,sum(count_7_days_surprise_inspection) as count_7_days_surprise_inspection ,sum(count_30_days_surprise_inspection) as count_30_days_surprise_inspection ,sum(count_90_days_surprise_inspection) as count_90_days_surprise_inspection ,sum(count_180_days_surprise_inspection) as count_180_days_surprise_inspection'
                table = 'public.inspection_pendency_analysis_table2'
            if card_type == 'Drive Inspection' and card_data == 'Total':
                print('inside if')
                columns = 'location_code,sum(total_count_drive_based_inspection) as total_count_drive_based_inspection ,sum(pending_count_drive_based_inspection) as pending_count_drive_based_inspection ,sum(pending_overdue_count_drive_based_inspection) as pending_overdue_count_drive_based_inspection ,sum(completed_count_drive_based_inspection) as completed_count_drive_based_inspection'
                table = 'public.inspection_analysis_table2'
            elif card_type == 'Drive Inspection' and card_data in ['Pending','Overdue']:
                columns = 'location_code,sum(count_7_days_drive_based_inspection) as count_7_days_drive_based_inspection ,sum(count_30_days_drive_based_inspection) as count_30_days_drive_based_inspection ,sum(count_90_days_drive_based_inspection) as count_90_days_drive_based_inspection ,sum(count_180_days_drive_based_inspection) as count_180_days_drive_based_inspection'
                table = 'public.inspection_pendency_analysis_table2'
        
        else:

            if card_type == 'Others' and card_data == 'Total':
                # print('inside if')
                columns = 'location_code,sum(total_count_others) as total_count_others ,sum(pending_count_others) as pending_count_others ,sum(pending_overdue_count_others) as pending_overdue_count_others ,sum(completed_count_others) as completed_count_others'
                table = 'public.view_inspection_analysis_table1'
            elif card_type == 'Others' and card_data in ['Pending','Overdue']:
                columns = 'location_code,sum(count_7_days_others) as count_7_days_others ,sum(count_30_days_others) as count_30_days_others ,sum(count_90_days_others) as count_90_days_others ,sum(count_180_days_others) as count_180_days_others'
                table = 'public.view_inspection_pendency_analysis_table1'

            if card_type == 'Employee Safety' and card_data == 'Total':
                columns = 'location_code,sum(total_count_employee_safety) as total_count_employee_safety ,sum(pending_count_employee_safety) as pending_count_employee_safety ,sum(pending_overdue_count_employee_safety) as pending_overdue_count_employee_safety ,sum(completed_count_employee_safety) as completed_count_employee_safety'
                table = 'public.view_inspection_analysis_table1'
            elif card_type == 'Employee Safety' and card_data in ['Pending','Overdue']:
                columns = 'location_code,sum(count_7_days_employee_safety) as count_7_days_employee_safety ,sum(count_30_days_employee_safety) as count_30_days_employee_safety ,sum(count_90_days_employee_safety) as count_90_days_employee_safety ,sum(count_180_days_employee_safety) as count_180_days_employee_safety'
                table = 'public.view_inspection_pendency_analysis_table1'

            if card_type == 'Passenger Safety' and card_data == 'Total':
                columns = 'location_code,sum(total_count_passenger_safety) as total_count_passenger_safety ,sum(pending_count_passenger_safety) as pending_count_passenger_safety ,sum(pending_overdue_count_passenger_safety) as pending_overdue_count_passenger_safety ,sum(completed_count_passenger_safety) as completed_count_passenger_safety'
                table = 'public.view_inspection_analysis_table1'
            elif card_type == 'Passenger Safety' and card_data in ['Pending','Overdue']:
                columns = 'location_code,sum(count_7_days_passenger_safety) as count_7_days_passenger_safety ,sum(count_30_days_passenger_safety) as count_30_days_passenger_safety ,sum(count_90_days_passenger_safety) as count_90_days_passenger_safety ,sum(count_180_days_passenger_safety) as count_180_days_passenger_safety'
                table = 'public.view_inspection_pendency_analysis_table1'
            
            if card_type == 'Night Inspection' and card_data == 'Total':
                print('inside if')
                columns = 'location_code,sum(total_count_night_inspection) as total_count_night_inspection ,sum(pending_count_night_inspection) as pending_count_night_inspection ,sum(pending_overdue_count_night_inspection) as pending_overdue_count_night_inspection ,sum(completed_count_night_inspection) as completed_count_night_inspection'
                table = 'public.view_inspection_analysis_table2'
            elif card_type == 'Night Inspection' and card_data in ['Pending','Overdue']:
                columns = 'location_code,sum(count_7_days_night_inspection) as count_7_days_night_inspection ,sum(count_30_days_night_inspection) as count_30_days_night_inspection ,sum(count_90_days_night_inspection) ascount_90_days_night_inspection ,sum(count_180_days_night_inspection) as count_180_days_night_inspection'
                table = 'public.view_inspection_pendency_analysis_table2'
            if card_type == 'Surprise Inspection' and card_data == 'Total':
                print('inside if')
                columns = 'location_code,sum(total_count_surprise_inspection) as total_count_surprise_inspection ,sum(pending_count_surprise_inspection) as pending_count_surprise_inspection ,sum(pending_overdue_count_surprise_inspection) as pending_overdue_count_surprise_inspection ,sum(completed_count_surprise_inspection) as completed_count_surprise_inspection'
                table = 'public.view_inspection_analysis_table2'
            elif card_type == 'Surprise Inspection' and card_data in ['Pending','Overdue']:
                columns = 'location_code,sum(count_7_days_surprise_inspection) as count_7_days_surprise_inspection ,sum(count_30_days_surprise_inspection) as count_30_days_surprise_inspection ,sum(count_90_days_surprise_inspection) as count_90_days_surprise_inspection ,sum(count_180_days_surprise_inspection) as count_180_days_surprise_inspection'
                table = 'public.view_inspection_pendency_analysis_table2'
            if card_type == 'Drive Inspection' and card_data == 'Total':
                print('inside if')
                columns = 'location_code,sum(total_count_drive_based_inspection) as total_count_drive_based_inspection ,sum(pending_count_drive_based_inspection) as pending_count_drive_based_inspection ,sum(pending_overdue_count_drive_based_inspection) as pending_overdue_count_drive_based_inspection ,sum(completed_count_drive_based_inspection) as completed_count_drive_based_inspection'
                table = 'public.view_inspection_analysis_table2'
            elif card_type == 'Drive Inspection' and card_data in ['Pending','Overdue']:
                columns = 'location_code,sum(count_7_days_drive_based_inspection) as count_7_days_drive_based_inspection ,sum(count_30_days_drive_based_inspection) as count_30_days_drive_based_inspection ,sum(count_90_days_drive_based_inspection) as count_90_days_drive_based_inspection ,sum(count_180_days_drive_based_inspection) as count_180_days_drive_based_inspection'
                table = 'public.view_inspection_pendency_analysis_table2'
        # CODE I CHANGE TODAY ) 4-AUG-23



        if irSearchDate == '' and irSearchDept == 'All' and irSearchDesig == 'All':
            print('inside me ')
            if irPath2 !='':
                print("columns",columns,table)
                cursor.execute(''' select {} from {} where location_code = '{}' group by location_code '''.format(columns,table,irPath2))
                data = cursor.fetchall()
                print("bdfere",data)
                return JsonResponse({'data':data},safe = False) 

            elif irType == 'ZR' and irDetails == 'All':
                print(columns.split(' '))
                y = columns.split(' ')
                x = y[2]+','+y[5]+','+y[8]+','+y[11]
                cursor.execute(''' 	select {} from(
                                    SELECT parent_location_code as location_code ,{} FROM {} where parent_location_code in (SELECT location_code 
                                    FROM {} where location_type = 'ZR')
                                    union all SELECT location_code,{} FROM {} where location_type = 'ZR') t group by location_code
                                    '''.format(columns,x,table,table,x,table))   
                data = cursor.fetchall()
                print('LK;OK;EF',data)
                return JsonResponse({'data':data},safe = False) 
            elif irType == 'ZR' and irDetails != 'All':
                print(columns.split(' '))
                y = columns.split(' ')
                x = y[2]+','+y[5]+','+y[8]+','+y[11]
                cursor.execute(''' 	select {} from (
                                    select location_code,{} FROM {} where location_type = '{}' AND location_code = '{}'
                                    union all select parent_location_code as location_code,{} FROM {} where parent_location_code = '{}'
                                        ) t group by location_code
                                    '''.format(columns,x,table,irType,irDetails,x,table,irDetails))   
                data = cursor.fetchall()
                print('kshuehfF',data)
                return JsonResponse({'data':data},safe = False)  
            elif irType == 'All' and irDetails == 'All':
                print('LTYUKHR',columns,table)
                print(columns.split(' '))
                y = columns.split(' ')
                x = y[2]+','+y[5]+','+y[8]+','+y[11]
                cursor.execute(''' select {} from (
                                SELECT parent_location_code as location_code, {} FROM {} where parent_location_code in (SELECT location_code FROM {} where location_type in ('ZR','PU'))
                                union all select location_code,{} from {} where location_type in ('ZR','PU') 
                                ) t group by location_code order by location_code '''.format(columns,x,table,table,x,table))
                data = cursor.fetchall()
                print("zdtjarha",data)
                return JsonResponse({'data':data},safe = False) 
            elif irType != 'All' and irDetails == 'All':
                print("columns",columns,table)
                if irType == 'HQ':
                    irType = 'ZR'
                cursor.execute(''' select {} from {} where location_type = '{}' group by location_code '''.format(columns,table,irType))
                data = cursor.fetchall()
                print("89jkjklwe",data)
                return JsonResponse({'data':data},safe = False) 
            elif irType != 'All' and irDetails != 'All' :
                print('lijsefj',columns,table)
                if irType == 'HQ':
                    irType = 'ZR'
                    fields = 'location_code'
                elif irType == 'PU':
                    fields = 'location_code'
                else:
                    fields = 'parent_location_code'
                cursor.execute(''' select {} from {} where location_type = '{}' and {} = '{}' group by location_code '''.format(columns,table,irType,fields,irDetails))
                data = cursor.fetchall()
                print("zdtjarhart",data)
                return JsonResponse({'data':data},safe = False) 
        
        else:
            print('inside elese')
            # if irSearchDate !='':
            #     get_date = irSearchDate.split('-')
            #     startdate = strptime(get_date[0],'%d/%m/%y')
            #     enddate = strptime(get_date[1],'%d/%m/%y')
            # if irSearchDept != 'All':
                
            # print(startdate,startdate)

            if irSearchDate == '':
                startdate = date(2022,9,11) 
                enddate = date.today()
            else:
                get_date = irSearchDate.split('-')
                startdate = datetime.strptime(get_date[0],'%d/%m/%y')
                enddate = datetime.strptime(get_date[1],'%d/%m/%y')
            if irSearchDept == 'All':
                irSearchDept = tuple(models.departMast.objects.values_list('department_name',flat = True))
            else:
                irSearchDept = tuple([models.departMast.objects.get(department_code = irSearchDept).department_name,'None'])
            if irSearchDesig == "All":
                irSearchDesig = tuple(models.Level_Desig.objects.values_list('designation_code',flat = True))
            else:
                irSearchDesig = tuple([irSearchDesig,0])

            if irPath2 !='':
                print("columns",columns,table)
                cursor.execute(''' select {} from {} where location_code = '{}' and inspected_on between '{}' and '{}' and designation_code in {} and department in {} group by location_code '''.format(columns,table,irPath2,startdate,enddate,irSearchDesig,irSearchDept))
                data = cursor.fetchall()
                print("bdfere",data)
                return JsonResponse({'data':data},safe = False) 

            elif irType == 'ZR' and irDetails == 'All':
                print(columns.split(' '))
                y = columns.split(' ')
                x = y[2]+','+y[5]+','+y[8]+','+y[11]
                cursor.execute(''' 	select {} from(
                                    SELECT parent_location_code as location_code ,{} FROM {} where parent_location_code in (SELECT location_code 
                                    FROM {} where location_type = 'ZR') and inspected_on between '{}' and '{}' and designation_code in {} and department in {}
                                    union all SELECT location_code,{} FROM {} where location_type = 'ZR' and inspected_on between '{}' and '{}' and designation_code in {} and department in {}) t group by location_code
                                    '''.format(columns,x,table,table,startdate,enddate,irSearchDesig,irSearchDept,x,table,startdate,enddate,irSearchDesig,irSearchDept))   
                data = cursor.fetchall()
                print('LK;OK;EF',data)
                return JsonResponse({'data':data},safe = False) 
            elif irType == 'ZR' and irDetails != 'All':
                print(columns.split(' '))
                y = columns.split(' ')
                x = y[2]+','+y[5]+','+y[8]+','+y[11]
                cursor.execute(''' 	select {} from (
                                    select location_code,{} FROM {} where location_type = '{}' AND location_code = '{}' and inspected_on between '{}' and '{}' and designation_code in {} and department in {}
                                    union all select parent_location_code as location_code,{} FROM {} where parent_location_code = '{}' and inspected_on between '{}' and '{}' and designation_code in {} and department in {}
                                        ) t group by location_code
                                    '''.format(columns,x,table,irType,irDetails,startdate,enddate,irSearchDesig,irSearchDept,x,table,irDetails,startdate,enddate,irSearchDesig,irSearchDept))   
                data = cursor.fetchall()
                print('kshuehfF',data)
                return JsonResponse({'data':data},safe = False)  
            elif irType == 'All' and irDetails == 'All':
                print('LTYUKHR',columns,table)
                print(columns.split(' '))
                y = columns.split(' ')
                x = y[2]+','+y[5]+','+y[8]+','+y[11]
                cursor.execute(''' select {} from (
                                SELECT parent_location_code as location_code, {} FROM {} where parent_location_code in (SELECT location_code FROM {} where location_type in ('ZR','PU')) and inspected_on between '{}' and '{}' and designation_code in {} and department in {}
                                union all select location_code,{} from {} where location_type in ('ZR','PU') and inspected_on between '{}' and '{}' and designation_code in {} and department in {}
                                ) t group by location_code order by location_code '''.format(columns,x,table,table,startdate,enddate,irSearchDesig,irSearchDept,x,table,startdate,enddate,irSearchDesig,irSearchDept))
                data = cursor.fetchall()
                print("zdtjarha",data)
                return JsonResponse({'data':data},safe = False) 
            elif irType != 'All' and irDetails == 'All':
                print("columns",columns,table)
                if irType == 'HQ':
                    irType = 'ZR'
                print(''' select {} from {} where location_type = '{}' and inspected_on between '{}' and '{}' and designation_code in {} and department in {} group by location_code '''.format(columns,table,irType,startdate,enddate,irSearchDesig,irSearchDept))
                cursor.execute(''' select {} from {} where location_type = '{}' and inspected_on between '{}' and '{}' and designation_code in {} and department in {} group by location_code '''.format(columns,table,irType,startdate,enddate,irSearchDesig,irSearchDept))
                data = cursor.fetchall()
                print("89jkjklwe",data)
                return JsonResponse({'data':data},safe = False) 
            elif irType != 'All' and irDetails != 'All' :
                print('lijsefj',columns,table)
                if irType == 'HQ':
                    irType = 'ZR'
                    fields = 'location_code'
                elif irType == 'PU':
                    fields = 'location_code'
                else:
                    fields = 'parent_location_code'
                print('data',''' select {} from {} where location_type = '{}' and {} = '{}' and inspected_on between '{}' and '{}' and designation_code in {} and department in {} group by location_code '''.format(columns,table,irType,fields,irDetails,startdate,enddate,irSearchDesig,irSearchDept))
                cursor.execute(''' select {} from {} where location_type = '{}' and {} = '{}' and inspected_on between '{}' and '{}' and designation_code in {} and department in {} group by location_code '''.format(columns,table,irType,fields,irDetails,startdate,enddate,irSearchDesig,irSearchDept))
                
                data = cursor.fetchall()
                print("zdtjarhart",data)
                return JsonResponse({'data':data},safe = False) 


        cursor.close()

        return JsonResponse({},safe = False)      


def DetailsViewOfData(request):
    if request.method == 'GET' and request.is_ajax():
        # CODD TO FILTER ALL THE DATA
        searchDate = request.GET.get('searchDate')
        searchDepartment = request.GET.get('searchDepartment')
        searchDesignation = request.GET.get('searchDesignation')

        irSearchDate = request.GET.get('irSearchDate')
        irSearchDept = request.GET.get('irSearchDept')
        irSearchDesig = request.GET.get('irSearchDesig')
        
        print("topnav",searchDate,searchDepartment,searchDesignation)

        irType = request.GET.get('irType')
        irDetails = request.GET.get('irDetails')
        irPath2 = request.GET.get('irPath2')

        card_type = request.GET.get('card_type') 
        card_data = request.GET.get('card_data')


        cursor = connection.cursor()
        if irSearchDate == '' and irSearchDept == 'All' and irSearchDesig == 'All':
            if card_type == 'Others' and card_data == 'Total':
                print('inside if')
                columns = 'location_code,sum(total_count_others) as total_count_others ,sum(pending_count_others) as pending_count_others ,sum(pending_overdue_count_others) as pending_overdue_count_others ,sum(completed_count_others) as completed_count_others'
                table = 'public.inspection_analysis_table1'
            elif card_type == 'Others' and card_data in ['Pending','Overdue']:
                columns = 'location_code,sum(count_7_days_others) as count_7_days_others ,sum(count_30_days_others) as count_30_days_others ,sum(count_90_days_others) as count_90_days_others ,sum(count_180_days_others) as count_180_days_others'
                table = 'public.inspection_pendency_analysis_table1'

            if card_type == 'Employee Safety' and card_data == 'Total':
                columns = 'location_code,sum(total_count_employee_safety) as total_count_employee_safety ,sum(pending_count_employee_safety) as pending_count_employee_safety ,sum(pending_overdue_count_employee_safety) as pending_overdue_count_employee_safety ,sum(completed_count_employee_safety) as completed_count_employee_safety'
                table = 'public.inspection_analysis_table1'
            elif card_type == 'Employee Safety' and card_data in ['Pending','Overdue']:
                columns = 'location_code,sum(count_7_days_employee_safety) as count_7_days_employee_safety ,sum(count_30_days_employee_safety) as count_30_days_employee_safety ,sum(count_90_days_employee_safety) as count_90_days_employee_safety ,sum(count_180_days_employee_safety) as count_180_days_employee_safety'
                table = 'public.inspection_pendency_analysis_table1'

            if card_type == 'Passenger Safety' and card_data == 'Total':
                columns = 'location_code,sum(total_count_passenger_safety) as total_count_passenger_safety ,sum(pending_count_passenger_safety) as pending_count_passenger_safety ,sum(pending_overdue_count_passenger_safety) as pending_overdue_count_passenger_safety ,sum(completed_count_passenger_safety) as completed_count_passenger_safety'
                table = 'public.inspection_analysis_table1'
            elif card_type == 'Passenger Safety' and card_data in ['Pending','Overdue']:
                columns = 'location_code,sum(count_7_days_passenger_safety) as count_7_days_passenger_safety ,sum(count_30_days_passenger_safety) as count_30_days_passenger_safety ,sum(count_90_days_passenger_safety) as count_90_days_passenger_safety ,sum(count_180_days_passenger_safety) as count_180_days_passenger_safety'
                table = 'public.inspection_pendency_analysis_table1'
            
            if card_type == 'Night Inspection' and card_data == 'Total':
                print('inside if')
                columns = 'location_code,sum(total_count_night_inspection) as total_count_night_inspection ,sum(pending_count_night_inspection) as pending_count_night_inspection ,sum(pending_overdue_count_night_inspection) as pending_overdue_count_night_inspection ,sum(completed_count_night_inspection) as completed_count_night_inspection'
                table = 'public.inspection_analysis_table2'
            elif card_type == 'Night Inspection' and card_data in ['Pending','Overdue']:
                columns = 'location_code,sum(count_7_days_night_inspection) as count_7_days_night_inspection ,sum(count_30_days_night_inspection) as count_30_days_night_inspection ,sum(count_90_days_night_inspection) ascount_90_days_night_inspection ,sum(count_180_days_night_inspection) as count_180_days_night_inspection'
                table = 'public.inspection_pendency_analysis_table2'
            if card_type == 'Surprise Inspection' and card_data == 'Total':
                print('inside if')
                columns = 'location_code,sum(total_count_surprise_inspection) as total_count_surprise_inspection ,sum(pending_count_surprise_inspection) as pending_count_surprise_inspection ,sum(pending_overdue_count_surprise_inspection) as pending_overdue_count_surprise_inspection ,sum(completed_count_surprise_inspection) as completed_count_surprise_inspection'
                table = 'public.inspection_analysis_table2'
            elif card_type == 'Surprise Inspection' and card_data in ['Pending','Overdue']:
                columns = 'location_code,sum(count_7_days_surprise_inspection) as count_7_days_surprise_inspection ,sum(count_30_days_surprise_inspection) as count_30_days_surprise_inspection ,sum(count_90_days_surprise_inspection) as count_90_days_surprise_inspection ,sum(count_180_days_surprise_inspection) as count_180_days_surprise_inspection'
                table = 'public.inspection_pendency_analysis_table2'
            if card_type == 'Drive Inspection' and card_data == 'Total':
                print('inside if')
                columns = 'location_code,sum(total_count_drive_based_inspection) as total_count_drive_based_inspection ,sum(pending_count_drive_based_inspection) as pending_count_drive_based_inspection ,sum(pending_overdue_count_drive_based_inspection) as pending_overdue_count_drive_based_inspection ,sum(completed_count_drive_based_inspection) as completed_count_drive_based_inspection'
                table = 'public.inspection_analysis_table2'
            elif card_type == 'Drive Inspection' and card_data in ['Pending','Overdue']:
                columns = 'location_code,sum(count_7_days_drive_based_inspection) as count_7_days_drive_based_inspection ,sum(count_30_days_drive_based_inspection) as count_30_days_drive_based_inspection ,sum(count_90_days_drive_based_inspection) as count_90_days_drive_based_inspection ,sum(count_180_days_drive_based_inspection) as count_180_days_drive_based_inspection'
                table = 'public.inspection_pendency_analysis_table2'
        
        else:

            if card_type == 'Others' and card_data == 'Total':
                # print('inside if')
                columns = 'location_code,sum(total_count_others) as total_count_others ,sum(pending_count_others) as pending_count_others ,sum(pending_overdue_count_others) as pending_overdue_count_others ,sum(completed_count_others) as completed_count_others'
                table = 'public.view_inspection_analysis_table1'
            elif card_type == 'Others' and card_data in ['Pending','Overdue']:
                columns = 'location_code,sum(count_7_days_others) as count_7_days_others ,sum(count_30_days_others) as count_30_days_others ,sum(count_90_days_others) as count_90_days_others ,sum(count_180_days_others) as count_180_days_others'
                table = 'public.view_inspection_pendency_analysis_table1'

            if card_type == 'Employee Safety' and card_data == 'Total':
                columns = 'location_code,sum(total_count_employee_safety) as total_count_employee_safety ,sum(pending_count_employee_safety) as pending_count_employee_safety ,sum(pending_overdue_count_employee_safety) as pending_overdue_count_employee_safety ,sum(completed_count_employee_safety) as completed_count_employee_safety'
                table = 'public.view_inspection_analysis_table1'
            elif card_type == 'Employee Safety' and card_data in ['Pending','Overdue']:
                columns = 'location_code,sum(count_7_days_employee_safety) as count_7_days_employee_safety ,sum(count_30_days_employee_safety) as count_30_days_employee_safety ,sum(count_90_days_employee_safety) as count_90_days_employee_safety ,sum(count_180_days_employee_safety) as count_180_days_employee_safety'
                table = 'public.view_inspection_pendency_analysis_table1'

            if card_type == 'Passenger Safety' and card_data == 'Total':
                columns = 'location_code,sum(total_count_passenger_safety) as total_count_passenger_safety ,sum(pending_count_passenger_safety) as pending_count_passenger_safety ,sum(pending_overdue_count_passenger_safety) as pending_overdue_count_passenger_safety ,sum(completed_count_passenger_safety) as completed_count_passenger_safety'
                table = 'public.view_inspection_analysis_table1'
            elif card_type == 'Passenger Safety' and card_data in ['Pending','Overdue']:
                columns = 'location_code,sum(count_7_days_passenger_safety) as count_7_days_passenger_safety ,sum(count_30_days_passenger_safety) as count_30_days_passenger_safety ,sum(count_90_days_passenger_safety) as count_90_days_passenger_safety ,sum(count_180_days_passenger_safety) as count_180_days_passenger_safety'
                table = 'public.view_inspection_pendency_analysis_table1'
            
            if card_type == 'Night Inspection' and card_data == 'Total':
                print('inside if')
                columns = 'location_code,sum(total_count_night_inspection) as total_count_night_inspection ,sum(pending_count_night_inspection) as pending_count_night_inspection ,sum(pending_overdue_count_night_inspection) as pending_overdue_count_night_inspection ,sum(completed_count_night_inspection) as completed_count_night_inspection'
                table = 'public.view_inspection_analysis_table2'
            elif card_type == 'Night Inspection' and card_data in ['Pending','Overdue']:
                columns = 'location_code,sum(count_7_days_night_inspection) as count_7_days_night_inspection ,sum(count_30_days_night_inspection) as count_30_days_night_inspection ,sum(count_90_days_night_inspection) ascount_90_days_night_inspection ,sum(count_180_days_night_inspection) as count_180_days_night_inspection'
                table = 'public.view_inspection_pendency_analysis_table2'
            if card_type == 'Surprise Inspection' and card_data == 'Total':
                print('inside if')
                columns = 'location_code,sum(total_count_surprise_inspection) as total_count_surprise_inspection ,sum(pending_count_surprise_inspection) as pending_count_surprise_inspection ,sum(pending_overdue_count_surprise_inspection) as pending_overdue_count_surprise_inspection ,sum(completed_count_surprise_inspection) as completed_count_surprise_inspection'
                table = 'public.view_inspection_analysis_table2'
            elif card_type == 'Surprise Inspection' and card_data in ['Pending','Overdue']:
                columns = 'location_code,sum(count_7_days_surprise_inspection) as count_7_days_surprise_inspection ,sum(count_30_days_surprise_inspection) as count_30_days_surprise_inspection ,sum(count_90_days_surprise_inspection) as count_90_days_surprise_inspection ,sum(count_180_days_surprise_inspection) as count_180_days_surprise_inspection'
                table = 'public.view_inspection_pendency_analysis_table2'
            if card_type == 'Drive Inspection' and card_data == 'Total':
                print('inside if')
                columns = 'location_code,sum(total_count_drive_based_inspection) as total_count_drive_based_inspection ,sum(pending_count_drive_based_inspection) as pending_count_drive_based_inspection ,sum(pending_overdue_count_drive_based_inspection) as pending_overdue_count_drive_based_inspection ,sum(completed_count_drive_based_inspection) as completed_count_drive_based_inspection'
                table = 'public.view_inspection_analysis_table2'
            elif card_type == 'Drive Inspection' and card_data in ['Pending','Overdue']:
                columns = 'location_code,sum(count_7_days_drive_based_inspection) as count_7_days_drive_based_inspection ,sum(count_30_days_drive_based_inspection) as count_30_days_drive_based_inspection ,sum(count_90_days_drive_based_inspection) as count_90_days_drive_based_inspection ,sum(count_180_days_drive_based_inspection) as count_180_days_drive_based_inspection'
                table = 'public.view_inspection_pendency_analysis_table2'
        # CODE I CHANGE TODAY ) 4-AUG-23



        if irSearchDate == '' and irSearchDept == 'All' and irSearchDesig == 'All':
            print('inside me ')

            
            if irType == 'All' and irDetails in ["ER","SER","WCR","NCR","ECOR","KM","SCR","NWR","WR","SR","SECR","CR","SWR","NER","ECR","NFR","NR",'KR']:
                print('LTYUKHR323',columns,table)
                print(columns.split(' '))
                y = columns.split(' ')
                x = y[2]+','+y[5]+','+y[8]+','+y[11]
                # print(''' select {} from (
                #                     select {} from {} where parent_location_code = '{}' UNION ALL 
                #                     select {} from {} where  location_type = 'ZR' AND location_code = '{}'
                #                     ) t group by location_code '''.format(columns,x,table,irDetails,x,table,irDetails))
                cursor.execute(''' select {} from (
                                    select location_code,{} from {} where parent_location_code = '{}' UNION ALL 
                                    select location_code,{} from {} where  location_type = 'ZR' AND location_code = '{}'
                                    ) t group by location_code '''.format(columns,x,table,irDetails,x,table,irDetails))
                data = cursor.fetchall()
                print("zdtjarha",data)
                return JsonResponse({'data':data},safe = False) 
            

        else:
            print('inside elese')
            # if irSearchDate !='':
            #     get_date = irSearchDate.split('-')
            #     startdate = strptime(get_date[0],'%d/%m/%y')
            #     enddate = strptime(get_date[1],'%d/%m/%y')
            # if irSearchDept != 'All':
                
            # print(startdate,startdate)

            if irSearchDate == '':
                startdate = date(2022,9,11) 
                enddate = date.today()
            else:
                get_date = irSearchDate.split('-')
                startdate = datetime.strptime(get_date[0],'%d/%m/%y')
                enddate = datetime.strptime(get_date[1],'%d/%m/%y')
            if irSearchDept == 'All':
                irSearchDept = tuple(models.departMast.objects.values_list('department_name',flat = True))
            else:
                irSearchDept = tuple([models.departMast.objects.get(department_code = irSearchDept).department_name,'None'])
            if irSearchDesig == "All":
                irSearchDesig = tuple(models.Level_Desig.objects.values_list('designation_code',flat = True))
            else:
                irSearchDesig = tuple([irSearchDesig,0])

            if irPath2 !='':
                print("columns",columns,table)
                cursor.execute(''' select {} from {} where location_code = '{}' and inspected_on between '{}' and '{}' and designation_code in {} and department in {} group by location_code '''.format(columns,table,irPath2,startdate,enddate,irSearchDesig,irSearchDept))
                data = cursor.fetchall()
                print("bdfere",data)
                return JsonResponse({'data':data},safe = False) 

            elif irType == 'ZR' and irDetails == 'All':
                print(columns.split(' '))
                y = columns.split(' ')
                x = y[2]+','+y[5]+','+y[8]+','+y[11]
                cursor.execute(''' 	select {} from(
                                    SELECT parent_location_code as location_code ,{} FROM {} where parent_location_code in (SELECT location_code 
                                    FROM {} where location_type = 'ZR') and inspected_on between '{}' and '{}' and designation_code in {} and department in {}
                                    union all SELECT location_code,{} FROM {} where location_type = 'ZR' and inspected_on between '{}' and '{}' and designation_code in {} and department in {}) t group by location_code
                                    '''.format(columns,x,table,table,startdate,enddate,irSearchDesig,irSearchDept,x,table,startdate,enddate,irSearchDesig,irSearchDept))   
                data = cursor.fetchall()
                print('LK;OK;EF',data)
                return JsonResponse({'data':data},safe = False) 
            elif irType == 'ZR' and irDetails != 'All':
                print(columns.split(' '))
                y = columns.split(' ')
                x = y[2]+','+y[5]+','+y[8]+','+y[11]
                cursor.execute(''' 	select {} from (
                                    select location_code,{} FROM {} where location_type = '{}' AND location_code = '{}' and inspected_on between '{}' and '{}' and designation_code in {} and department in {}
                                    union all select parent_location_code as location_code,{} FROM {} where parent_location_code = '{}' and inspected_on between '{}' and '{}' and designation_code in {} and department in {}
                                        ) t group by location_code
                                    '''.format(columns,x,table,irType,irDetails,startdate,enddate,irSearchDesig,irSearchDept,x,table,irDetails,startdate,enddate,irSearchDesig,irSearchDept))   
                data = cursor.fetchall()
                print('kshuehfF',data)
                return JsonResponse({'data':data},safe = False)  
            elif irType == 'All' and irDetails == 'All':
                print('LTYUKHR',columns,table)
                print(columns.split(' '))
                y = columns.split(' ')
                x = y[2]+','+y[5]+','+y[8]+','+y[11]
                cursor.execute(''' select {} from (
                                SELECT parent_location_code as location_code, {} FROM {} where parent_location_code in (SELECT location_code FROM {} where location_type in ('ZR','PU')) and inspected_on between '{}' and '{}' and designation_code in {} and department in {}
                                union all select location_code,{} from {} where location_type in ('ZR','PU') and inspected_on between '{}' and '{}' and designation_code in {} and department in {}
                                ) t group by location_code order by location_code '''.format(columns,x,table,table,startdate,enddate,irSearchDesig,irSearchDept,x,table,startdate,enddate,irSearchDesig,irSearchDept))
                data = cursor.fetchall()
                print("zdtjarha",data)
                return JsonResponse({'data':data},safe = False) 
            elif irType != 'All' and irDetails == 'All':
                print("columns",columns,table)
                if irType == 'HQ':
                    irType = 'ZR'
                print(''' select {} from {} where location_type = '{}' and inspected_on between '{}' and '{}' and designation_code in {} and department in {} group by location_code '''.format(columns,table,irType,startdate,enddate,irSearchDesig,irSearchDept))
                cursor.execute(''' select {} from {} where location_type = '{}' and inspected_on between '{}' and '{}' and designation_code in {} and department in {} group by location_code '''.format(columns,table,irType,startdate,enddate,irSearchDesig,irSearchDept))
                data = cursor.fetchall()
                print("89jkjklwe",data)
                return JsonResponse({'data':data},safe = False) 
            elif irType != 'All' and irDetails != 'All' :
                print('lijsefj',columns,table)
                if irType == 'HQ':
                    irType = 'ZR'
                    fields = 'location_code'
                elif irType == 'PU':
                    fields = 'location_code'
                else:
                    fields = 'parent_location_code'
                print('data',''' select {} from {} where location_type = '{}' and {} = '{}' and inspected_on between '{}' and '{}' and designation_code in {} and department in {} group by location_code '''.format(columns,table,irType,fields,irDetails,startdate,enddate,irSearchDesig,irSearchDept))
                cursor.execute(''' select {} from {} where location_type = '{}' and {} = '{}' and inspected_on between '{}' and '{}' and designation_code in {} and department in {} group by location_code '''.format(columns,table,irType,fields,irDetails,startdate,enddate,irSearchDesig,irSearchDept))
                
                data = cursor.fetchall()
                print("zdtjarhart",data)
                return JsonResponse({'data':data},safe = False) 

        # END HERE
        # div = request.GET.get('div')
        div = request.GET.get('mydata')
        search_date = request.GET.get('searchDate')
        irTypeformodal = request.GET.get('irTypeformodal')
        print("mydev",div,irTypeformodal)
        if irTypeformodal == 'ZR' and (div in ["ER","SER","WCR","NCR","ECOR","KM","SCR","NWR","WR","SR","SECR","CR","SWR","NER","ECR","NFR","NR",'KR']):
            print('ksjlief"8899')
            query = "select inspected_on,inspection_note_no, concat(item_title,observation) as item_title , designation,location_code, division_code FROM inspectection_data_view1 WHERE location_code= '{}' division_code is not NULL ;".format(div)
        
        elif irTypeformodal in ['DIV','WS','ZR']:
            query = "select inspected_on,inspection_note_no, concat(item_title,observation) as item_title , designation,location_code, division_code FROM inspectection_data_view1 WHERE division_code= '{}' ;".format(div)
        
        else:
            query = "select inspected_on,inspection_note_no, concat(item_title,observation) as item_title , designation,location_code, division_code FROM inspectection_data_view1 WHERE location_code= '{}' ;".format(div)
        with connection.cursor() as cursor:
            cursor.execute(query)
            data1 = cursor.fetchall()  
            print('therht',data1)
        

        response_data = {
            'data1': data1
        }
        return JsonResponse(response_data,safe = False) 



from django.http import JsonResponse
import json
@csrf_exempt
def generate_pdf_Inspection_report(request):
    jsonData = request.POST.get('jsonData')

    # Parse the JSON string into a Python object
    data = json.loads(jsonData)

    # Access the values
    location_code = data['location_code']
    location_type = data['location_type']
    designation = data['designation']
    dept = data['dept']
    created_on = data['created_on']
    selected_value = data['selectedValue']
    # Print the received values for debugging
    print("location_code:", location_code)
    print("location_type:", location_type)
    print("designation:", designation)
    print("dept:", dept)
    print("created_on:", created_on)
    print("selected_value:", selected_value)
    # Process the data and return a response
    # ...

    # location_code = json.loads(request.GET.get("location_code"))
    # location_type = json.loads(request.GET.get("location_type"))
    # designation = json.loads(request.GET.get("designation"))
    # created_on = request.GET.get("created_on")
    # print('mydatas4444444',location_code,location_type,designation,created_on)
    l=[]
    if designation:
        l = designation
        # print("mydesigs",l)
    elif location_type:
        # DIVISION WISE
        
        for x in location_type:
            x1=x.split('-')
            ins=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation__icontains=x1[0]).values('designation').distinct('designation'))
            #print(ins,'==============================================')
            for i in ins:
                l.append(i['designation'])
        # END DIVISION WISE
    elif location_code:
        # RAILWAYS WISE
        # grou=json.loads(request.GET.get("group"))
        
        # ins=list(models.railwayLocationMaster.objects.filter(location_type='DIV',parent_location_code=grou).values('location_code', 'rly_unit_code'))

        ins=list(models.railwayLocationMaster.objects.filter(Q(location_type_desc='DIVISION')|Q(location_type_desc='WORKSHOP')|Q(location_type_desc='STORE')|Q(location_type_desc='CONSTRUCTION'),parent_location_code__in=location_code).values('location_code', 'location_type'))

        l=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(rly_unit_id__in=(models.railwayLocationMaster.objects.filter(parent_location_code__in=location_code).values('rly_unit_code'))).values_list('designation',flat=True).distinct('designation'))
        print("insdesig",l)

        # END RAILWAY WISE
    else:
        list7=models.Level_Desig.objects.exclude(delete_flag=True).all().values('designation').order_by('designation')
        list8=[]
        for i in list7:
            # print(i['designation'],'_________')
            list8.append(i['designation'])
            l = list8
    print("mylist5555",l)


    ''' inspection report '''
    total_total_inspection = 0
    total_total_closed = 0
    total_total_open = 0
    total_total_item = 0
    total_total_item_pending = 0
    total_total_item_overdue = 0
    total_total_per_complied = 0

    ''' inspection report mom '''
    mom_total_total_inspection = 0
    mom_total_total_closed = 0
    mom_total_total_open = 0
    mom_total_total_item = 0
    mom_total_total_item_pending = 0
    mom_total_total_item_overdue = 0
    mom_total_total_per_complied = 0


    ''' Do letter data '''
    do_total_total_open = 0
    do_total_total_pending = 0
    do_total_total_closed = 0 
    do_total_total_per_complied = 0

    ''' TASK TRACKER '''
    task_total_total_open = 0
    total_total_task_assign = 0
    total_total_task_completed = 0 
    task_total_total_per_complied = 0

    my_data = []
    ajaxname = selected_value

    if ajaxname == 'Marked By Officer':
        print("inside MarkedByOfficer")
        # DATA FROM AJAX MarkedByOfficer
        if created_on:
            print("inside else")
            for i in l:
                print(i)
                datefrom = datetime.strptime(created_on.split('to')[0].strip(),'%d/%m/%y')
                dateto = datetime.strptime(created_on.split('to')[1].strip(),'%d/%m/%y')
                desig_code = models.Level_Desig.objects.exclude(delete_flag=True).filter(designation = i)[0].designation_code

                ###############################3 INSPECTION REPORT ##################################
                # total complaince
                cursor = connection.cursor()
                cursor.execute(''' SELECT count(distinct(A.inspection_no)) total_comp
                FROM public.inspects_inspection_details A,
                public.inspects_marked_officers B,
                public.inspects_item_details D, 
                public.myadmin_level_desig E
                where B.item_no_id=D.item_no and B.marked_to_id = E.designation_code and B.marked_to_id = %s
                and B.status_flag != 0 and A.inspection_no = D.inspection_no_id  and
                (A.inspected_on >= %s and A.inspected_on <= %s)''',[desig_code,datefrom,dateto])
                total_inspection = cursor.fetchall()
                total_total_inspection +=total_inspection[0][0]
                cursor.close()

                # total_closed
                # cursor = connection.cursor()
                # cursor.execute(''' SELECT count(distinct(A.inspection_no)) total_closed
                # FROM public.inspects_inspection_details A,
                # public.inspects_marked_officers B,
                # public.inspects_item_details D, 
                # public.myadmin_level_desig E
                # where B.item_no_id=D.item_no and B.marked_to_id = E.designation_code and B.marked_to_id =%s
                # and B.status_flag in (3,4)  and A.inspection_no = D.inspection_no_id and
                # (A.inspected_on >= %s and A.inspected_on <= %s)''',[desig_code,datefrom,dateto])
                # total_closed = cursor.fetchall()
                # total_total_closed +=total_closed[0][0]
                
                # pending
                cursor = connection.cursor()
                cursor.execute(''' SELECT count(distinct(A.inspection_no)) pending
                FROM public.inspects_inspection_details A,
                public.inspects_marked_officers B,
                public.inspects_item_details D, 
                public.myadmin_level_desig E
                where B.item_no_id=D.item_no and B.marked_to_id = E.designation_code and B.marked_to_id = %s
                and B.status_flag in (1,2) and A.inspection_no = D.inspection_no_id and
                (A.inspected_on >= %s and A.inspected_on <= %s)''',[desig_code,datefrom,dateto])
                total_open = cursor.fetchall()
                total_total_open +=total_open[0][0]
                # print("total_inspection7777777777total_open",total_open)
                total_closed =total_inspection[0][0]-total_open[0][0]
                total_total_closed+=total_closed
                # total_item
                cursor = connection.cursor()
                cursor.execute(''' SELECT count(D.item_no)
                FROM public.inspects_inspection_details A,
                public.inspects_marked_officers B,
                public.inspects_item_details D, 
                public.myadmin_level_desig E
                where B.item_no_id=D.item_no and B.marked_to_id = E.designation_code and B.marked_to_id = %s
                and A.inspection_no = D.inspection_no_id and
                B.status_flag >0 and (A.inspected_on >= %s and A.inspected_on <= %s)''',[desig_code,datefrom,dateto])
                total_item = cursor.fetchall()
                total_total_item +=total_item[0][0]


                # total_item_pending
                cursor = connection.cursor()
                cursor.execute(''' SELECT count(D.item_no)
                FROM public.inspects_inspection_details A,
                public.inspects_marked_officers B,
                public.inspects_item_details D, 
                public.myadmin_level_desig E
                where B.item_no_id=D.item_no and B.marked_to_id = E.designation_code and B.marked_to_id = %s
                and A.inspection_no = D.inspection_no_id and
                B.status_flag  in (1,2)   and (A.inspected_on >= %s and A.inspected_on <= %s)''',[desig_code,datefrom,dateto])
                total_item_pending = cursor.fetchall()
                total_total_item_pending +=total_item_pending[0][0]
                
                # total_item_overdue
                cursor = connection.cursor()
                cursor.execute(''' SELECT count(*)
                FROM public.inspects_inspection_details A,
                public.inspects_marked_officers B,
                public.inspects_item_details D, 
                public.myadmin_level_desig E
                where B.item_no_id=D.item_no and B.marked_to_id = E.designation_code and B.marked_to_id = %s
                and A.inspection_no = D.inspection_no_id and
                B.status_flag in (1,2) and
                D.target_date < now() and (A.inspected_on >= %s and A.inspected_on <= %s)''',[desig_code,datefrom,dateto])
                total_item_overdue = cursor.fetchall()
                total_total_item_overdue +=total_item_overdue[0][0]

                # %complied 
                try:
                    per_complied = ((total_item[0][0]-total_item_pending[0][0])/total_item[0][0])*100
                    
                except:
                    per_complied = 0
                
                # ####################### MOM INSPECTION REPORT #########################################
                # total complaince
                cursor = connection.cursor()
                cursor.execute(''' SELECT count(distinct(A.insp_no)) total_comp
                FROM public.mom_insp_details A,
                public.mom_marked_members B,
                public.mom_item_details D, 
                public.myadmin_level_desig E
                where B.item_no_id=D.item_no and B.marked_to_id = E.designation_code and B.marked_to_id = %s
                and B.status_flag != 0 and A.insp_no = D.insp_no_id ''',[desig_code])
                mom_total_inspection = cursor.fetchall()
                mom_total_total_inspection +=mom_total_inspection[0][0]
                cursor.close()

                # total_closed
                cursor = connection.cursor()
                cursor.execute(''' SELECT count(distinct(A.insp_no)) total_closed
                FROM public.mom_insp_details A,
                public.mom_marked_members B,
                public.mom_item_details D, 
                public.myadmin_level_desig E
                where B.item_no_id=D.item_no and B.marked_to_id = E.designation_code and B.marked_to_id = %s
                and B.status_flag = 4 and A.insp_no = D.insp_no_id''',[desig_code])
                mom_total_closed = cursor.fetchall()
                mom_total_total_closed +=mom_total_closed[0][0]

                # pending
                cursor = connection.cursor()
                cursor.execute(''' SELECT count(distinct(A.insp_no)) pending
                FROM public.mom_insp_details A,
                public.mom_marked_members B,
                public.mom_item_details D, 
                public.myadmin_level_desig E
                where B.item_no_id=D.item_no and B.marked_to_id = E.designation_code and B.marked_to_id = %s
                and B.status_flag in (1,2) and A.insp_no = D.insp_no_id ''',[desig_code])
                mom_total_open = cursor.fetchall()
                mom_total_total_open +=mom_total_open[0][0]
                # print("total_inspection7777777777total_open",mom_total_open)

                # total_item
                cursor = connection.cursor()
                cursor.execute(''' SELECT count(*) FROM public.mom_insp_details A,
                public.mom_marked_members B,
                public.mom_item_details D, 
                public.myadmin_level_desig E
                where B.item_no_id=D.item_no and B.marked_to_id = E.designation_code and B.marked_to_id = %s
                and A.insp_no = D.insp_no_id and
                D.status_flag >0''',[desig_code])
                mom_total_item = cursor.fetchall()
                mom_total_total_item +=mom_total_item[0][0]


                # total_item_pending
                cursor = connection.cursor()
                cursor.execute(''' SELECT count(*) FROM public.mom_insp_details A,
                public.mom_marked_members B,
                public.mom_item_details D, 
                public.myadmin_level_desig E
                where B.item_no_id=D.item_no and B.marked_to_id = E.designation_code and B.marked_to_id = %s
                and A.insp_no = D.insp_no_id and
                D.status_flag  in (1,2,3)    ''',[desig_code])
                mom_total_item_pending = cursor.fetchall()
                mom_total_total_item_pending +=mom_total_item_pending[0][0]
                
                # total_item_overdue
                cursor = connection.cursor()
                cursor.execute(''' SELECT count(*) FROM public.mom_insp_details A,
                public.mom_marked_members B,
                public.mom_item_details D, 
                public.myadmin_level_desig E
                where B.item_no_id=D.item_no and B.marked_to_id = E.designation_code and B.marked_to_id = %s
                and A.insp_no = D.insp_no_id and
                D.status_flag  in (1,2,3)   ''',[desig_code])
                mom_total_item_overdue = cursor.fetchall()
                mom_total_total_item_overdue +=mom_total_item_overdue[0][0]

                # %complied 
                try:
                    mom_per_complied = ((mom_total_item-mom_total_item_pending)/mom_total_item)*100
                    
                except:
                    mom_per_complied = 0


                # DO LETTER 
                
                # TOTAL OPEN
                do_total_open=m4.do_act.objects.filter(desig_id_id = desig_code).count()
                do_total_total_open += do_total_open

                # TOTAL PENDING
                do_total_pending=m4.do_act.objects.filter(desig_id_id = desig_code,status_flag=False).count()
                do_total_total_pending += do_total_pending

                # TOTAL CLOSED
                do_total_closed=m4.do_act.objects.filter(desig_id_id = desig_code,status_flag=True).count()
                do_total_total_closed += do_total_closed
                # per complied
                try:
                    do_per_complied = (do_total_closed / do_total_open) * 100
                except:
                    do_per_complied = 0

                
                ''' TASK TRACKER '''
                # total task tracker assign data
                # task_assigned_insp = m1.target_compliance.objects.filter(marked_no__item_no__inspection_no__inspection_officer__rly_unit__location_code = i, task_flag=1).exclude(status_flag = 3).count()
                # task_assigned_tracker = m1.target_compliance.objects.filter(assigned_by__rly_unit__location_code = i, task_flag=2).exclude(status_flag = 3).count()
                task_assigned = m1.target_compliance.objects.filter(pending_with__designation_code = desig_code).exclude(status_flag = 3).count()
                total_total_task_assign += task_assigned

                # total task tracker completed data apeksha:7005
                # task_completed_insp = m1.target_compliance.objects.filter(marked_no__item_no__inspection_no__inspection_officer__rly_unit__location_code = i, task_flag=1,status_flag = 3).count()
                task_completed = m1.target_compliance.objects.filter(pending_with__designation_code = desig_code, status_flag = 3).count()
                # task_completed = task_completed_insp + task_completed_tracker
                total_total_task_completed += task_completed
                
                # total task tracker open data
                totol_open = task_assigned+task_completed
                task_total_total_open += totol_open

                try:
                    task_per_complied = (task_completed / totol_open) * 100
                except:
                    task_per_complied = 0



                my_data.append({'rly':i,"total_inspection":total_inspection[0][0],"total_closed":total_closed,
                "total_open":total_open[0][0],"total_item":total_item[0][0],"total_item_pending":total_item_pending[0][0],
                'total_item_overdue':total_item_overdue[0][0],"per_complied":per_complied,"mom_total_inspection":mom_total_inspection[0][0],"mom_total_closed":mom_total_closed[0][0],
                "mom_total_open":mom_total_open[0][0],"mom_total_item":mom_total_item[0][0],"mom_total_item_pending":mom_total_item_pending[0][0],
                'mom_total_item_overdue':mom_total_item_overdue[0][0],"mom_per_complied":mom_per_complied,'do_total_open':do_total_open,
                'do_total_pending':do_total_pending,'do_total_closed':do_total_closed,
                'do_per_complied':do_per_complied,'task_assigned':task_assigned,"task_completed":task_completed,
                'totol_open':totol_open,'task_per_complied':task_per_complied})
        
        try:
        
            total_total_per_complied = ((total_total_item-total_total_item_pending)/total_total_item)*100
        except:
        
            total_total_per_complied = 0
        try:
        
            mom_total_total_per_complied = ((mom_total_total_item-mom_total_total_item_pending)/mom_total_total_item)*100
        except:
        
            mom_total_total_per_complied = 0
        
        try:
        
            do_total_total_per_complied = ((do_total_total_closed)/do_total_total_open)*100
        except:
        
            do_total_total_per_complied = 0
        try:
        
            task_total_total_per_complied = ((total_total_task_completed)/task_total_total_open)*100
        except:
        
            task_total_total_per_complied = 0

        # print("mydata",total_total_item_overdue)
        '''
        return ({'rly_list':my_data,'total_total_inspection':total_total_inspection,"total_total_closed":total_total_closed,
        "total_total_open":total_total_open,"total_total_item":total_total_item,"total_total_item_pending":total_total_item_pending,
        "total_total_item_overdue":total_total_item_overdue,"total_total_per_complied":total_total_per_complied,'mom_total_total_inspection':mom_total_total_inspection,"mom_total_total_closed":mom_total_total_closed,
        "mom_total_total_open":mom_total_total_open,"mom_total_total_item":mom_total_total_item,"mom_total_total_item_pending":mom_total_total_item_pending,
        "mom_total_total_item_overdue":mom_total_total_item_overdue,"mom_total_total_per_complied":mom_total_total_per_complied,'do_total_total_open':do_total_total_open,
        'do_total_total_pending':do_total_total_pending,'do_total_total_closed':do_total_total_closed,
        'do_total_total_per_complied':do_total_total_per_complied,"task_total_total_open":task_total_total_open,
        'total_total_task_assign':total_total_task_assign,'total_total_task_completed':total_total_task_completed,
        'task_total_total_per_complied':task_total_total_per_complied}, safe=False)
        '''
        print("$$$$$$$ ",'rly_list:',my_data,'total_total_inspection: ',total_total_inspection,"total_total_closed: ",total_total_closed,
        "total_total_open: ",total_total_open,"total_total_item: ",total_total_item,"total_total_item_pending: ",total_total_item_pending,
        "total_total_item_overdue: ",total_total_item_overdue,"total_total_per_complied: ",total_total_per_complied,'mom_total_total_inspection: ',mom_total_total_inspection,"mom_total_total_closed: ",mom_total_total_closed,
        "mom_total_total_open: ",mom_total_total_open,"mom_total_total_item: ",mom_total_total_item,"mom_total_total_item_pending: ",mom_total_total_item_pending,
        "mom_total_total_item_overdue: ",mom_total_total_item_overdue,"mom_total_total_per_complied: ", mom_total_total_per_complied,'do_total_total_open: ',do_total_total_open,'do_total_total_pending: ',do_total_total_pending,"do_total_total_closed: ",do_total_total_closed,
        'do_total_total_per_complied: ',do_total_total_per_complied,"task_total_total_open: ",task_total_total_open,
        'total_total_task_assign: ',total_total_task_assign,'total_total_task_completed: ',total_total_task_completed,
        'task_total_total_per_complied: ',task_total_total_per_complied)
         # return JsonResponse({'message': 'Data inside Marked by Officer'})
         # Prepare the context for rendering the PDF template
        data = {'rly_list':my_data,'total_total_inspection':total_total_inspection,"total_total_closed":total_total_closed,
        "total_total_open":total_total_open,"total_total_item":total_total_item,"total_total_item_pending":total_total_item_pending,
        "total_total_item_overdue":total_total_item_overdue,"total_total_per_complied":total_total_per_complied,'mom_total_total_inspection':mom_total_total_inspection,"mom_total_total_closed":mom_total_total_closed,
        "mom_total_total_open":mom_total_total_open,"mom_total_total_item":mom_total_total_item,"mom_total_total_item_pending":mom_total_total_item_pending,
        "mom_total_total_item_overdue":mom_total_total_item_overdue,"mom_total_total_per_complied":mom_total_total_per_complied,'do_total_total_open':do_total_total_open,
        'do_total_total_pending':do_total_total_pending,'do_total_total_closed':do_total_total_closed,
        'do_total_total_per_complied':do_total_total_per_complied,"task_total_total_open":task_total_total_open,
        'total_total_task_assign':total_total_task_assign,'total_total_task_completed':total_total_task_completed,
        'task_total_total_per_complied':task_total_total_per_complied}
        context = {
            'location_code': location_code,
            'location_type': location_type,
            'designation': designation,
            'dept': dept,
            'created_on': created_on,
            'selected_value': selected_value,
            'data': data
        }

        # Render the HTML template as a string
        pdf = render_to_pdf('new_inspection_report_pdf.html', context)
        print("Rendering$$$$$$$$$$$$$$$$$$$$$$$$$$$$4")
        # Return the PDF as a response
        return HttpResponse(pdf, content_type='application/pdf')
        return HttpResponse(result)

    else:
        # DATA FROM AJAX issues By Officer
        if created_on:
            datefrom = datetime.strptime(created_on.split('to')[0].strip(),'%d/%m/%y')
            dateto = datetime.strptime(created_on.split('to')[1].strip(),'%d/%m/%y')
            for i in l:
                desig_code = models.Level_Desig.objects.exclude(delete_flag=True).filter(designation = i)[0].designation_code
                # print("desig_codedesig_codedesig_codedesig_codedesig_code",desig_code)
                # total_inspection=m1.Inspection_details.objects.filter(~Q(status_flag=0),inspection_officer=desig_code).count()
                # total inspection notes (passed)
                cursor = connection.cursor()
                cursor.execute(''' SELECT count( DISTINCT A.inspection_no) total_inspection
                FROM public.inspects_inspection_details A,
                public.myadmin_level_desig B
                where A.inspection_officer_id = B.designation_code and A.status_flag!=0 and
                        A.inspection_officer_id = %s and
                        (A.inspected_on >= %s and A.inspected_on <= %s) ''',[desig_code,datefrom,dateto])
                total_inspection = cursor.fetchall()
                total_total_inspection +=total_inspection[0][0]
                cursor.close()
                # print("total_inspection45",total_inspection)

                # total_closed (passed)
                cursor = connection.cursor()
                cursor.execute(''' SELECT count( DISTINCT A.inspection_no) total_closed
                FROM public.inspects_inspection_details A,
                public.myadmin_level_desig B
            
                where A.inspection_officer_id = B.designation_code and A.status_flag=4 and
                        A.inspection_officer_id = %s and
                        (A.inspected_on >= %s and A.inspected_on <= %s) ''',[desig_code,datefrom,dateto])
                total_closed = cursor.fetchall()
                total_total_closed +=total_closed[0][0]
                cursor.close()

                # pending inspection report (passed)
                cursor = connection.cursor()
                cursor.execute(''' SELECT count( DISTINCT A.inspection_no) total_open
                FROM public.inspects_inspection_details A,
                public.myadmin_level_desig B
            
                where A.inspection_officer_id = B.designation_code and A.status_flag between 1 and 3 and
                        A.inspection_officer_id = %s and
                        (A.inspected_on >= %s and A.inspected_on <= %s) ''',[desig_code,datefrom,dateto])
                total_open = cursor.fetchall()
                total_total_open +=total_open[0][0]
                cursor.close()

                # total_item
                cursor = connection.cursor()
                
                cursor.execute(''' SELECT count( distinct B.item_no_id) total_item
                FROM public.inspects_inspection_details A,
                public.inspects_marked_officers B,
            
                public.inspects_item_details D
                where  A.status_flag>0 and
                    B.item_no_id=D.item_no and
                        
                A.inspection_no = D.inspection_no_id and D.status_flag >0 and A.inspection_officer_id = %s and
                        (A.inspected_on >= %s and A.inspected_on <= %s) ''',[desig_code,datefrom,dateto])

                
                total_item = cursor.fetchall()
                total_total_item +=total_item[0][0]
                cursor.close()

                # total_item_pending
                cursor = connection.cursor()
                cursor.execute(''' SELECT count( distinct B.item_no_id) total_item
                FROM public.inspects_inspection_details A,
                public.inspects_marked_officers B,
            
                public.inspects_item_details D
                where  A.status_flag between 1 and 3 and
                    B.item_no_id=D.item_no and
                    
                A.inspection_no = D.inspection_no_id and D.status_flag between 1 and 3 and A.inspection_officer_id = %s and
                        (A.inspected_on >= %s and A.inspected_on <= %s) ''',[desig_code,datefrom,dateto])
                total_item_pending = cursor.fetchall()
                total_total_item_pending +=total_item_pending[0][0]
                cursor.close()


                # total_item_overdue
                cursor = connection.cursor()
                cursor.execute(''' SELECT count( distinct B.item_no_id) total_item
                FROM public.inspects_inspection_details A,
                public.inspects_marked_officers B,
            
                public.inspects_item_details D
                where B.item_no_id=D.item_no and A.status_flag between 1 and 4 and
                        
                A.inspection_no = D.inspection_no_id and D.status_flag between 1 and 3 and
                        D.target_date < now() and A.inspection_officer_id = %s and
                        (A.inspected_on >= %s and A.inspected_on <= %s) ''',[desig_code,datefrom,dateto])
                
                total_item_overdue = cursor.fetchall()
                total_total_item_overdue +=total_item_overdue[0][0]
                cursor.close()

                # %complied 
                try:
                    per_complied = ((total_item[0][0]-total_item_pending[0][0])/total_item[0][0])*100
                    
                except:
                    per_complied = 0


                # ####################### MOM INSPECTION REPORT #########################################
                # total complaince
                cursor = connection.cursor()
                cursor.execute(''' SELECT count( DISTINCT A.insp_no) total_inspection
                FROM public.mom_insp_details A,
                public.myadmin_level_desig B
                where A.mom_officer_id = B.designation_code and A.status_flag!=0 and
                A.mom_officer_id = %s and (A.mom_date >= %s and A.mom_date <= %s) ''',[desig_code,datefrom,dateto])
                mom_total_inspection = cursor.fetchall()
                mom_total_total_inspection +=mom_total_inspection[0][0]
                cursor.close()

                # total_closed
                cursor = connection.cursor()
                cursor.execute(''' SELECT count( DISTINCT A.insp_no) total_closed
                FROM public.mom_insp_details A,
                public.myadmin_level_desig B
                where A.mom_officer_id = B.designation_code and A.status_flag=4 and
                A.mom_officer_id = %s and (A.mom_date >= %s and A.mom_date <= %s)  ''',[desig_code,datefrom,dateto])
                mom_total_closed = cursor.fetchall()
                mom_total_total_closed +=mom_total_closed[0][0]

                # pending
                cursor = connection.cursor()
                cursor.execute('''  SELECT count( DISTINCT A.insp_no) total_open
                FROM public.mom_insp_details A,
                public.myadmin_level_desig B
            
                where A.mom_officer_id = B.designation_code and A.status_flag between 1 and 3 and
                A.mom_officer_id = %s and (A.mom_date >= %s and A.mom_date <= %s) ''',[desig_code,datefrom,dateto])
                mom_total_open = cursor.fetchall()
                mom_total_total_open +=mom_total_open[0][0]
                # print("total_inspection7777777777total_open",mom_total_open)

                # total_item
                cursor = connection.cursor()
                cursor.execute(''' SELECT count( distinct D.item_no) total_item
                FROM public.mom_insp_details A,
                
            
                public.mom_item_details D
                where  A.status_flag>0 and  D.item_heading is not null  and
                    
                        
                A.insp_no = D.insp_no_id and D.status_flag >0 and A.mom_officer_id = %s and (A.mom_date >= %s and A.mom_date <= %s) ''',[desig_code,datefrom,dateto])
                mom_total_item = cursor.fetchall()
                mom_total_total_item +=mom_total_item[0][0]


                # total_item_pending
                cursor = connection.cursor()
                cursor.execute(''' SELECT count( distinct B.item_no_id) total_item
                FROM public.mom_insp_details A,
                    public.mom_marked_members B,
                
                public.mom_item_details D
                where  A.status_flag between 1 and 3 and
                    B.item_no_id=D.item_no and
                        
                A.insp_no = D.insp_no_id and D.status_flag between 1 and 3 and A.mom_officer_id = %s and (A.mom_date >= %s and A.mom_date <= %s)''',[desig_code,datefrom,dateto])
                mom_total_item_pending = cursor.fetchall()
                mom_total_total_item_pending +=mom_total_item_pending[0][0]
                
                # total_item_overdue
                cursor = connection.cursor()
                cursor.execute(''' SELECT count( distinct B.item_no_id) total_item
                FROM public.mom_insp_details A,
                    public.mom_marked_members B,
                
                public.mom_item_details D
                where B.item_no_id=D.item_no and A.status_flag between 1 and 4 and
                        
                A.insp_no = D.insp_no_id and D.status_flag between 1 and 3 and
                        D.target_date < now() and A.mom_officer_id = %s and (A.mom_date >= %s and A.mom_date <= %s) ''',[desig_code,datefrom,dateto])
                mom_total_item_overdue = cursor.fetchall()
                mom_total_total_item_overdue +=mom_total_item_overdue[0][0]

                # %complied 
                try:
                    mom_per_complied = ((mom_total_item-mom_total_item_pending)/mom_total_item)*100
                    
                except:
                    mom_per_complied = 0
                

                
                # DO LETTER OFFICER WISE -----------------------------------------------------------
                # user = request.user
                dol=list(m4.do_upload.objects.filter(desig_id_id=desig_code).values_list('id',flat = True))
                
                # TOTAL OPEN
                do_total_open=m4.do_act.objects.filter(id_upload__in = dol).count()
                do_total_total_open += do_total_open

                # TOTAL PENDING
                do_total_pending=m4.do_act.objects.filter(id_upload__in = dol,status_flag=False).count()
                do_total_total_pending += do_total_pending

                # TOTAL CLOSED
                do_total_closed=m4.do_act.objects.filter(id_upload__in = dol,status_flag=True).count()
                do_total_total_closed += do_total_closed
                # per complied
                try:
                    do_per_complied = (do_total_closed / do_total_open) * 100
                except:
                    do_per_complied = 0
                # do_total_total_per_complied +=do_per_complied
                

                ''' TASK TRACKER '''
                # total task tracker assign data
                # task_assigned_insp = m1.target_compliance.objects.filter(marked_no__item_no__inspection_no__inspection_officer__rly_unit__location_code = i, task_flag=1).exclude(status_flag = 3).count()
                task_assigned = m1.target_compliance.objects.filter(assigned_by__designation_code = desig_code).exclude(status_flag = 3).count()
                # task_assigned = task_assigned_insp+task_assigned_tracker
                total_total_task_assign += task_assigned

                # total task tracker completed data
                # task_completed_insp = m1.target_compliance.objects.filter(marked_no__item_no__inspection_no__inspection_officer__rly_unit__location_code = i, task_flag=1,status_flag = 3).count()
                task_completed = m1.target_compliance.objects.filter(assigned_by__designation_code = desig_code, status_flag = 3).count()
                # task_completed = task_completed_insp + task_completed_tracker
                total_total_task_completed += task_completed
                
                # total task tracker open data
                totol_open = task_assigned+task_completed
                task_total_total_open += totol_open

                try:
                    task_per_complied = (task_completed / totol_open) * 100
                except:
                    task_per_complied = 0

                my_data.append({'rly':i,"total_inspection":total_inspection[0][0],"total_closed":total_closed[0][0],
                "total_open":total_open[0][0],"total_item":total_item[0][0],"total_item_pending":total_item_pending[0][0],
                'total_item_overdue':total_item_overdue[0][0],"per_complied":per_complied,"mom_total_inspection":mom_total_inspection[0][0],"mom_total_closed":mom_total_closed[0][0],
                "mom_total_open":mom_total_open[0][0],"mom_total_item":mom_total_item[0][0],"mom_total_item_pending":mom_total_item_pending[0][0],
                'mom_total_item_overdue':mom_total_item_overdue[0][0],"mom_per_complied":mom_per_complied,'do_total_open':do_total_open,
                'do_total_pending':do_total_pending,'do_total_closed':do_total_closed,
                'do_per_complied':do_per_complied,'task_assigned':task_assigned,"task_completed":task_completed,
                'totol_open':totol_open,'task_per_complied':task_per_complied})

        try:
        
            total_total_per_complied = ((total_total_item-total_total_item_pending)/total_total_item)*100
        except:
        
            total_total_per_complied = 0
        
        try:
        
            mom_total_total_per_complied = ((mom_total_total_item-mom_total_total_item_pending)/mom_total_total_item)*100
        except:
        
            mom_total_total_per_complied = 0
        
        try:
        
            do_total_total_per_complied = ((do_total_total_closed)/do_total_total_open)*100
        except:
        
            do_total_total_per_complied = 0
        try:
        
            task_total_total_per_complied = ((total_total_task_completed)/task_total_total_open)*100
        except:
        
            task_total_total_per_complied = 0
        '''
        return JsonResponse({'rly_list':my_data,'total_total_inspection':total_total_inspection,"total_total_closed":total_total_closed,
        "total_total_open":total_total_open,"total_total_item":total_total_item,"total_total_item_pending":total_total_item_pending,
        "total_total_item_overdue":total_total_item_overdue,"total_total_per_complied":total_total_per_complied,
        'mom_total_total_inspection':mom_total_total_inspection,"mom_total_total_closed":mom_total_total_closed,
        "mom_total_total_open":mom_total_total_open,"mom_total_total_item":mom_total_total_item,"mom_total_total_item_pending":mom_total_total_item_pending,
        "mom_total_total_item_overdue":mom_total_total_item_overdue,"mom_total_total_per_complied":mom_total_total_per_complied,'do_total_total_open':do_total_total_open,
        'do_total_total_pending':do_total_total_pending,'do_total_total_closed':do_total_total_closed,
        'do_total_total_per_complied':do_total_total_per_complied,"task_total_total_open":task_total_total_open,
        'total_total_task_assign':total_total_task_assign,'total_total_task_completed':total_total_task_completed,
        'task_total_total_per_complied':task_total_total_per_complied}, safe=False) '''
        data={'rly_list':my_data,'total_total_inspection':total_total_inspection,"total_total_closed":total_total_closed,
        "total_total_open":total_total_open,"total_total_item":total_total_item,"total_total_item_pending":total_total_item_pending,
        "total_total_item_overdue":total_total_item_overdue,"total_total_per_complied":total_total_per_complied,
        'mom_total_total_inspection':mom_total_total_inspection,"mom_total_total_closed":mom_total_total_closed,
        "mom_total_total_open":mom_total_total_open,"mom_total_total_item":mom_total_total_item,"mom_total_total_item_pending":mom_total_total_item_pending,
        "mom_total_total_item_overdue":mom_total_total_item_overdue,"mom_total_total_per_complied":mom_total_total_per_complied,'do_total_total_open':do_total_total_open,
        'do_total_total_pending':do_total_total_pending,'do_total_total_closed':do_total_total_closed,
        'do_total_total_per_complied':do_total_total_per_complied,"task_total_total_open":task_total_total_open,
        'total_total_task_assign':total_total_task_assign,'total_total_task_completed':total_total_task_completed,
        'task_total_total_per_complied':task_total_total_per_complied}
        context = {
            'location_code': location_code,
            'location_type': location_type,
            'designation': designation,
            'dept': dept,
            'created_on': created_on,
            'selected_value': selected_value,
            'data': data
        }

        # Render the HTML template as a string
        pdf = render_to_pdf('new_inspection_report_pdf.html', context)
        print("Rendering$$$$$$$$$$$$$$$$$$$$$$$$$$$$4")
        # Return the PDF as a response
        return HttpResponse(pdf, content_type='application/pdf')
        return HttpResponse(result)
        return JsonResponse({'message': 'Data received in Issues by officer'})

@csrf_exempt
def new_inspection_report_marked_pdf(request):
        jsonData = request.POST.get('jsonData')
        data = json.loads(jsonData)
      

        location_code = data['location_code']
        location_type = data['location_type']
        designation = data['designation']
        dept = data['dept']
        created_on = data['created_on']
        
    
        print('mydatas4444444vikash',location_code,location_type,designation,created_on)
        l=[]
        if designation:
            l = designation
            # print("mydesigs",l)
        elif location_type:
            # DIVISION WISE
            
            for x in location_type:
                x1=x.split('-')
                ins=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation__icontains=x1[0]).values('designation').distinct('designation'))
                #print(ins,'==============================================')
                for i in ins:
                    l.append(i['designation'])
            # END DIVISION WISE
        elif location_code:
            # RAILWAYS WISE
            # grou=json.loads(request.GET.get("group"))
            
            # ins=list(models.railwayLocationMaster.objects.filter(location_type='DIV',parent_location_code=grou).values('location_code', 'rly_unit_code'))
    
            ins=list(models.railwayLocationMaster.objects.filter(Q(location_type_desc='DIVISION')|Q(location_type_desc='WORKSHOP')|Q(location_type_desc='STORE')|Q(location_type_desc='CONSTRUCTION'),parent_location_code__in=location_code).values('location_code', 'location_type'))

            l=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(rly_unit_id__in=(models.railwayLocationMaster.objects.filter(parent_location_code__in=location_code).values('rly_unit_code'))).values_list('designation',flat=True).distinct('designation'))
            print("insdesig",l)

            # END RAILWAY WISE
        else:
            list7=models.Level_Desig.objects.exclude(delete_flag=True).all().values('designation').order_by('designation')
            print("asdhjffsh",list7)
            list8=[]
            for i in list7:
                # print(i['designation'],'_________')
                list8.append(i['designation'])
                l = list8

        ''' inspection report '''
        total_insp = 0
        total_marked_insp = 0

        total_total_closed = 0
        total_total_open = 0
        total_total_item = 0
        total_total_item_pending = 0
        total_total_item_overdue = 0
        total_total_per_complied = 0

        ''' inspection report mom '''
        mom_total_total_inspection = 0
        mom_total_total_closed = 0
        mom_total_total_open = 0
        mom_total_total_item = 0
        mom_total_total_item_pending = 0
        mom_total_total_item_overdue = 0
        mom_total_total_per_complied = 0


        ''' Do letter data '''
        do_total_total_open = 0
        do_total_total_pending = 0
        do_total_total_closed = 0 
        do_total_total_per_complied = 0
        mark_do_total_total_open = 0
        mark_do_total_total_pending = 0
        mark_do_total_total_closed = 0 
        mark_do_total_total_per_complied = 0

        ''' TASK TRACKER '''
        task_total_total_open = 0
        total_total_task_assign = 0
        total_total_task_completed = 0 
        task_total_total_per_complied = 0
        mark_task_total_total_open = 0
        mark_total_total_task_assign = 0
        mark_total_total_task_completed = 0 
        mark_task_total_total_per_complied = 0
        
        my_data = []

        if created_on:
            datefrom = datetime.strptime(created_on.split('to')[0].strip(),'%d/%m/%y')
            dateto = datetime.strptime(created_on.split('to')[1].strip(),'%d/%m/%y')
            for i in l:
                desig_code = models.Level_Desig.objects.exclude(delete_flag=True).filter(designation = i)[0].designation_code
                print("rani",desig_code)
                # CREATED NOTES
                data = m1.Inspection_details.objects.filter(~Q(status_flag = 0),inspection_officer = desig_code,inspected_on__range = [datefrom,dateto]).aggregate(insp = Count('inspection_no',distinct = True),para = Count('item_details'))
                print("rani2",data)
                created_insp_notes = data['insp']
                created_insp_para = data['para']

                # Pending Compliance Created Notes
                data = m1.Inspection_details.objects.filter(status_flag__in = [1,2,3],inspection_officer = desig_code,inspected_on__range = [datefrom,dateto]).aggregate(insp = Count('inspection_no',distinct = True),para = Count('item_details'))
                print("rani4",data)
                pending_insp_notes = data['insp']
                pending_insp_para = data['para']
                
                # % compliance created Notes
                data = m1.Inspection_details.objects.filter(status_flag = 4,inspection_officer = desig_code,inspected_on__range = [datefrom,dateto]).aggregate(insp = Count('inspection_no',distinct = True),para = Count('item_details'))
                print("rani76",data)
                try:
                    per_created_insp_notes = (data['insp']/created_insp_notes)*100 
                except:
                    per_created_insp_notes = 0
                try:
                    per_created_insp_para = (data['para']/created_insp_para)*100
                except:
                    per_created_insp_para = 0

                # Marked Notes
                data = m1.Marked_Officers.objects.filter(~Q(status_flag = 0),marked_to = desig_code,item_no__inspection_no__inspected_on__range = [datefrom,dateto]).aggregate(insp = Count('item_no__inspection_no',distinct = True),para = Count('item_no'))
                print("rani75",data)

                marked_created_insp_notes = data['insp']
                marked_created_insp_para = data['para']

                # Marked Pending compliance
                data = m1.Marked_Officers.objects.filter(status_flag__in = [1,2],marked_to = desig_code,item_no__inspection_no__inspected_on__range = [datefrom,dateto]).aggregate(insp = Count('item_no__inspection_no',distinct = True),para = Count('item_no'))
                print("rani686",data)

                marked_pending_insp_notes = data['insp']
                marked_pending_insp_para = data['para']
                
                # % Compliance Marked Notes
                data = m1.Marked_Officers.objects.filter(status_flag__in = [3,4],marked_to = desig_code,item_no__inspection_no__inspected_on__range = [datefrom,dateto]).aggregate(insp = Count('item_no__inspection_no',distinct = True),para = Count('item_no'))
                print("rani56",data)

                try:
                    per_marked_created_insp_notes = (data['insp']/marked_created_insp_notes)*100 
                except:
                    per_marked_created_insp_notes = 0
                try:
                    per_marked_created_insp_para = (data['para']/marked_created_insp_para)*100
                except:
                    per_marked_created_insp_para = 0

                # MOM created
                data = m3.Insp_details.objects.filter(~Q(status_flag = 0),mom_officer = desig_code,mom_date__range = [datefrom,dateto]).aggregate(insp = Count('insp_no',distinct = True),para = Count('item_details'))
                print("rani5",data)

                mom_created_insp_notes = data['insp']
                mom_created_insp_para = data['para']

                # MOM Pending compliance
                data = m3.Insp_details.objects.filter(status_flag__in = [1,2,3],mom_officer = desig_code,mom_date__range = [datefrom,dateto]).aggregate(insp = Count('insp_no',distinct = True),para = Count('item_details'))
                print("rani5",data)
                mom_pending_insp_notes = data['insp']
                mom_pending_insp_para = data['para']

                # % compliance MOM Notes
                data = m3.Insp_details.objects.filter(status_flag=4,mom_officer = desig_code,mom_date__range = [datefrom,dateto]).aggregate(insp = Count('insp_no',distinct = True),para = Count('item_details'))
                print("rani45",data)
                try:
                    per_mom_created_insp_notes = (data['insp']/mom_created_insp_notes)*100 
                except:
                    per_mom_created_insp_notes = 0
                try:
                    per_mom_pending_insp_notes  = (data['para']/mom_created_insp_para)*100
                except:
                    per_mom_pending_insp_notes = 0
                
                # MOM Marked
                data = m3.Marked_Members.objects.filter(~Q(status_flag = 0),marked_to = desig_code,item_no__insp_no__mom_date__range = [datefrom,dateto]).aggregate(insp = Count('item_no__insp_no',distinct = True),para = Count('item_no'))
                print("rani865",data)
                marked_mom_created_insp_notes = data['insp']
                marked_mom_created_insp_para = data['para']

                # MOM Marked Pending compliance
                data = m3.Marked_Members.objects.filter(status_flag__in = [1,2],marked_to = desig_code,item_no__insp_no__mom_date__range = [datefrom,dateto]).aggregate(insp = Count('item_no__insp_no',distinct = True),para = Count('item_no'))
                print("rani45",data)
                marked_mom_pending_insp_notes = data['insp']
                marked_mom_pending_insp_para = data['para']

                # % Compliance MOM Marked Notes
                data = m3.Marked_Members.objects.filter(status_flag = 4,marked_to = desig_code,item_no__insp_no__mom_date__range = [datefrom,dateto]).aggregate(insp = Count('item_no__insp_no',distinct = True),para = Count('item_no'))
                print("rani45",data)
                try:
                    per_marked_mom_created = (data['insp']/marked_mom_created_insp_notes)*100 
                except:
                    per_marked_mom_created = 0
                try:
                    per_marked_mom_pending  = (data['para']/marked_mom_created_insp_para)*100
                except:
                    per_marked_mom_pending = 0
                

                # DO LETTER OFFICER WISE -----------------------------------------------------------
                dol=list(m4.do_upload.objects.filter(desig_id_id=desig_code,do_letter_date__range = [datefrom,dateto] ).values_list('id',flat = True))
                print("sona13",dol)
                
                # TOTAL OPEN
                do_total_open=m4.do_act.objects.filter(id_upload__in = dol).count()
                do_total_total_open += do_total_open

                # TOTAL PENDING
                do_total_pending=m4.do_act.objects.filter(id_upload__in = dol,status_flag=False).count()
                do_total_total_pending += do_total_pending

                # TOTAL CLOSED
                do_total_closed=m4.do_act.objects.filter(id_upload__in = dol,status_flag=True).count()
                do_total_total_closed += do_total_closed
                # per complied
                try:
                    do_per_complied = (do_total_closed / do_total_open) * 100
                except:
                    do_per_complied = 0
                # do_total_total_per_complied +=do_per_complied
                
                #  DO MARKDED 
                # TOTAL OPEN 
                mark_do_total_open=m4.do_act.objects.filter(desig_id_id = desig_code,id_upload__do_letter_date__range = [datefrom,dateto]).count()
                print("rani455",mark_do_total_open)
                mark_do_total_total_open += mark_do_total_open

                # TOTAL PENDING
                mark_do_total_pending=m4.do_act.objects.filter(desig_id_id = desig_code,status_flag=False,id_upload__do_letter_date__range = [datefrom,dateto]).count()
                print("rani785",mark_do_total_pending)
                mark_do_total_total_pending += mark_do_total_pending

                # TOTAL CLOSED
                mark_do_total_closed=m4.do_act.objects.filter(desig_id_id = desig_code,status_flag=True,id_upload__do_letter_date__range = [datefrom,dateto]).count()
                print("rani86",mark_do_total_closed)
                mark_do_total_total_closed += mark_do_total_closed
                # per complied
                try:
                    mark_do_per_complied = (mark_do_total_closed / mark_do_total_open) * 100
                except:
                    mark_do_per_complied = 0

                ''' TASK TRACKER '''
                # total task tracker assign data
                task_assigned = m1.target_compliance.objects.filter(assigned_by__designation_code = desig_code,target_date__range = [datefrom,dateto]).exclude(status_flag = 1).count()
                total_total_task_assign += task_assigned

                # total task tracker completed data
                task_completed = m1.target_compliance.objects.filter(assigned_by__designation_code = desig_code, status_flag = 1,target_date__range = [datefrom,dateto]).count()
                total_total_task_completed += task_completed
                
                # total task tracker open data
                # totol_open = task_assigned+task_completed
                # task_total_total_open += totol_open

                
                ''' TASK TRACKER '''
                # total task tracker assign data

                mark_task_assigned = m1.target_compliance.objects.filter(pending_with__designation_code = desig_code,target_date__range = [datefrom,dateto]).exclude(status_flag = 1).count()
                # mark_total_task_assign += mark_task_assigned

                mark_task_completed = m1.target_compliance.objects.filter(pending_with__designation_code = desig_code, status_flag = 0,target_date__range = [datefrom,dateto]).count()
                # mark_total_task_completed += mark_task_completed


                my_data.append({'rly' : i, "created_insp_notes" : created_insp_notes, "created_insp_para" : created_insp_para, 
                "pending_insp_notes" : pending_insp_notes, "pending_insp_para" : pending_insp_para, "marked_created_insp_notes":marked_created_insp_notes,'marked_pending_insp_para':marked_pending_insp_para,
                'marked_created_insp_para':marked_created_insp_para,"marked_pending_insp_notes":marked_pending_insp_notes,"mom_pending_insp_para":mom_pending_insp_para,"marked_mom_created_insp_notes":marked_mom_created_insp_notes,
                "mom_created_insp_para":mom_created_insp_para,"mom_pending_insp_notes":mom_pending_insp_notes,'mom_created_insp_notes':mom_created_insp_notes,''
                'marked_mom_created_insp_para':marked_mom_created_insp_para,"marked_mom_pending_insp_notes":marked_mom_pending_insp_notes,'marked_mom_pending_insp_para':marked_mom_pending_insp_para,
                'do_total_pending':do_total_pending,'do_total_closed':do_total_closed,'mark_do_total_pending':mark_do_total_pending,'mark_do_total_closed':mark_do_total_closed,'mark_do_total_open':mark_do_total_open,
                'do_per_complied':do_per_complied,'mark_do_per_complied':mark_do_per_complied,'task_assigned':task_assigned,"task_completed":task_completed,'do_total_open':do_total_open,
                'mark_task_assigned':mark_task_assigned,"mark_task_completed":mark_task_completed,'per_created_insp_notes':per_created_insp_notes,"per_created_insp_para":per_created_insp_para,
                'per_marked_created_insp_notes':per_marked_created_insp_notes,"per_marked_created_insp_para":per_marked_created_insp_para,'per_mom_created_insp_notes':per_mom_created_insp_notes,
                'per_mom_pending_insp_notes':per_mom_pending_insp_notes,'per_marked_mom_created':per_marked_mom_created,'per_marked_mom_pending':per_marked_mom_pending
                })
                
       
        context={'rly_list':my_data,"mom_total_total_per_complied":mom_total_total_per_complied,'do_total_total_open':do_total_total_open,
        'do_total_total_pending':do_total_total_pending,'do_total_total_closed':do_total_total_closed,
        'do_total_total_per_complied':do_total_total_per_complied,"task_total_total_open":task_total_total_open,
        'total_total_task_assign':total_total_task_assign,'total_total_task_completed':total_total_task_completed,
        'task_total_total_per_complied':task_total_total_per_complied,'location_code':location_code,'location_type':location_type,'designation':designation,'created_on':created_on}
    

        pdf=render_to_pdf('new_inspection_report_marked_pdf.html',context)
        return HttpResponse(pdf,content_type='application/pdf')  


####  with library encrypt hindi fint also
import base64 
from Crypto.Cipher import AES
from Crypto.Util.Padding import pad,unpad

def encryptWithAesEinspect(data):
        key = 'AAAAAAAAAAAAAAAA'
        iv =  'BBBBBBBBBBBBBBBB'.encode('utf-8')
        data= pad(data.encode(),16)
        cipher = AES.new(key.encode('utf-8'),AES.MODE_CBC,iv)
        encrypted = base64.b64encode(cipher.encrypt(data))
        return encrypted.decode("utf-8", "ignore")


def decryptWithAesEinspect(enc):
        key = 'AAAAAAAAAAAAAAAA'
        iv =  'BBBBBBBBBBBBBBBB'.encode('utf-8')
        enc = base64.b64decode(enc)
        cipher = AES.new(key.encode('utf-8'), AES.MODE_CBC, iv)
        decrypted = unpad(cipher.decrypt(enc),16)
        return decrypted.decode("utf-8", "ignore")




import hashlib
from Crypto.Cipher import AES
import base64

class SSOCrypt:
    TRANSFORMATION = "AES/ECB/PKCS5Padding"

    @staticmethod
    def doEncrypt(encodekey, inputStr):
        try:
            cipher = AES.new(SSOCrypt.deriveKey(encodekey), AES.MODE_ECB)
            padded_data = SSOCrypt.pkcs5_pad(inputStr.encode())
            encrypted_data = cipher.encrypt(padded_data)
            encoded_data = base64.b64encode(encrypted_data)
            return encoded_data.decode()

        except Exception as E:
            print(E)
            return inputStr

    @staticmethod
    def doDecrypt(encodekey, encryptedStr):
        try:
            cipher = AES.new(SSOCrypt.deriveKey(encodekey), AES.MODE_ECB)
            decoded_data = base64.b64decode(encryptedStr)
            decrypted_data = cipher.decrypt(decoded_data)
            unpadded_data = SSOCrypt.pkcs5_unpad(decrypted_data)
            return unpadded_data.decode()

        except Exception as e:
            print(e)
            return None

    @staticmethod
    def deriveKey(key):
        sha = hashlib.sha512()
        sha.update(key.encode())
        derived_key = sha.digest()[:16]
        return derived_key

    @staticmethod
    def pkcs5_pad(data):
        block_size = AES.block_size
        padding_len = block_size - (len(data) % block_size)
        padding = bytes([padding_len] * padding_len)
        return data + padding

    @staticmethod
    def pkcs5_unpad(padded_data):
        padding_len = padded_data[-1]
        return padded_data[:-padding_len]





from django.views.decorators.csrf import csrf_exempt
@csrf_exempt
def einspectionhrmslogin(request):  
    if request.method=='POST' and request.is_ajax():
        op=request.POST.get('op')
        if op=="getbacktoken":
            hrmsid=request.POST.get('hrmsid')
            url='http://10.77.32.41:8080/hrmssinglesignon/getnewtoken'
            data1 = {
                    "hrmsid":hrmsid,
                    "secretkey":'4D66D316DE1949948E23C69756EED'
                    
                    }
            import requests
            import json  
            username = 'MU6437'
            password = '3C2D8ECA3E5537C8'                    
            print(data1)
            l_main = requests.post(url, auth=(username, password), json=data1)
            l_main = l_main.json()
            token=l_main['token']
            wa=m1.empmast.objects.get(hrms_id=hrmsid)
            ssouid=wa.SSOUid
            sessionid=wa.SessionId
            data={'ssouid':ssouid,'token':token,'sessionid':sessionid}
            print('---------------',data)
            
            app_code='IR'
            backToSSOString="SessionId=" + sessionid + "|token=" + token + "|hrmsId=" + hrmsid + "|SSOUid=" + ssouid+ "|app_code=" + app_code
            encodekey = "3bd172c3b659ad1a44c1fff9a2aa0480bccb71d24b91cbb4610fbcc48c882989"
            encrptedString = SSOCrypt.doEncrypt(encodekey,backToSSOString)
            test= SSOCrypt.doDecrypt(encodekey, encrptedString)
            plainString="app_code="+ app_code
            encData =encrptedString+"#"+plainString
            print(encData)
            print(test)
            encData ={'encData':encData}
            logout(request)
            m1.hrms_logs.objects.create(empno='NA',hrmsid=hrmsid,token=token,SessionId=sessionid,SSOUid=ssouid,purpose='Back to SSO',remarks='Encrypted Data Sent to SSO')
            return JsonResponse(encData, safe = False) 
    
        if op=="getbacktokenr":
            hrmsid=request.POST.get('hrmsid')
            sessionid=str(request.POST.get('sessionid'))
            print('seesion_id---------',sessionid)
            ssouid=str(request.POST.get('SSOUid'))
            
            url='http://10.77.32.41:8080/hrmssinglesignon/getnewtoken'
            data1 = {
                    "hrmsid":hrmsid,
                    "secretkey":'4D66D316DE1949948E23C69756EED'
                    
                    }
            import requests
            import json
            username = 'MU6437'
            password = '3C2D8ECA3E5537C8'                    
            print('data1data1data1data1data1data1data1data1data1',data1)
            l_main = requests.post(url, auth=(username, password), json=data1)
            l_main = l_main.json()
            token=l_main['token']
            # wa=empmast.objects.get(hrmsid=hrmsid)
           
            data={'ssouid':ssouid,'token':token,'sessionid':sessionid}
            print('---------------',data)
            
            app_code='IR'
            backToSSOString="SessionId=" + sessionid + "|token=" + token + "|hrmsId=" + hrmsid + "|SSOUid=" + ssouid+ "|app_code=" + app_code
            encodekey = "3bd172c3b659ad1a44c1fff9a2aa0480bccb71d24b91cbb4610fbcc48c882989"
            encrptedString = SSOCrypt.doEncrypt(encodekey,backToSSOString)
            # test= SSOCrypt.doDecrypt(encodekey, encrptedString)
            plainString="app_code="+ app_code
            encData =encrptedString+"#"+plainString
            # print(encData)
            # print(test)
            encData ={'encData':encData}
            
            logout(request)
            m1.hrms_logs.objects.create(empno='NA',hrmsid=hrmsid,token=token,SessionId=sessionid,SSOUid=ssouid,purpose='Back to SSO',remarks='Encrypted Data Sent to SSO')
            return JsonResponse(encData, safe = False)

    
    
    if request.method=='POST':
        encData =request.POST.get('encData') 
        print('mmmmm',encData) 
        

        encodekey = "3bd172c3b659ad1a44c1fff9a2aa0480bccb71d24b91cbb4610fbcc48c882989"
        encryptedData = encData
        
        decryptedData = SSOCrypt.doDecrypt(encodekey, encryptedData)
        dataArr = decryptedData.split("|")
        print(dataArr)
        for enqData in dataArr:
            enqDataArr = enqData.split("=")
            if len(enqDataArr) == 2:
                key = enqDataArr[0]
                value = enqDataArr[1]
                print(key + "===" + value)
                if key=='SessionId':
                    SessionId= value
                elif key=='token':
                    token= value
                elif key=='hrmsId':
                    hrmsId= value
                elif key=='SSOUid':
                    SSOUid= value
                elif key=='app_code':
                    app_code= value
                
        
       
        



        # SessionId = request.POST.get('SessionId')
        # token =request.POST.get('token')  
        # hrmsId =request.POST.get('hrmsId')  
        # SSOUid =request.POST.get('SSOUid') 
        # SessionId='Pankaj123'
        # token='eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJNSUNNS0wiLCJpc3MiOiJocm1zU2luZ2xlU2lnbk9uIiwiZXhwIjoxNjc2ODgzNDcxfQ.NxZC2jQZMOHxHY10_FS9j8Nn8giBpdrShbN7AHGu2mg'
        # hrmsId='ASOQZN'
        # SSOUid='kUMAR123'
        if m1.empmast.objects.filter(hrms_id=hrmsId).exists():
            wa = m1.empmast.objects.get(hrms_id=hrmsId)
            erpuserno = wa.empno
            print(hrmsId,token)
        else:
            print('In------valid User5-------------------------------------------------',hrmsId,encData,SSOUid,SessionId)
            context={
            'is_sso':'Y',
            'encData':encData,
            'hrmsId':hrmsId,
            'SSOUid':SSOUid,
            'sessionid':SessionId,
                        
            }
            messages.success(request,"Your HRMD ID is not mapped with the application user ID for this application.Please login directly. You will have to carry out HRMS ID mapping (after login) to use SSO functionality.")
            m1.hrms_logs.objects.create(empno='NA',hrmsid=hrmsId,token=token,SessionId=SessionId,SSOUid=SSOUid,purpose='SSO LOGIN',remarks='Unable to authenticate login request. Please provide credentials again for login.')                         
            return render(request, 'login.html', context)
        try:
            wa = models.Level_Desig.objects.filter(empno=erpuserno).first()
            print(wa)
            erpuserno=wa.official_email_ID
            _email=wa.official_email_ID
            user_role=wa.user_role
            print(user_role,_email,erpuserno)
            try:
                wa = m1.MyUser.objects.get(username=erpuserno)
            except:
                wa = m1.MyUser.objects.get(email=erpuserno)
            is_admin=wa.is_admin
            phase_type=wa.phase_type
            # m1.MyUser.objects.filter(username=erpuserno).update(password='pbkdf2_sha256$100000$5Rb4BKH9oQgJ$FsEsWNqy55jBVvLtOcRTI/5k+xqWZYzPgHXOqO2mgvo=')
            print(is_admin,phase_type)
        except:
            print('In------valid User5-------------------------------------------------',hrmsId,encData,SSOUid,SessionId)
            context={
            'is_sso':'Y',
            'encData':encData,
            'hrmsId':hrmsId,
            'SSOUid':SSOUid,
            'sessionid':SessionId,
                        
            }
            messages.success(request,"Your HRMD ID is not mapped with the application user ID for this application.Please login directly. You will have to carry out HRMS ID mapping (after login) to use SSO functionality.")
            m1.hrms_logs.objects.create(empno='NA',hrmsid=hrmsId,token=token,SessionId=SessionId,SSOUid=SSOUid,purpose='SSO LOGIN',remarks='Unable to authenticate login request. Please provide credentials again for login.')                         
            return render(request, 'login.html', context)
       
        
        
        url='http://10.77.32.41:8080/hrmssinglesignon/tokencheck'
        data1 = {
                "hrmsid":hrmsId,
                "token":token,
                }
        import requests
        username = 'MU6437'
        password = '3C2D8ECA3E5537C8'
        # print(data1)
        l_main = requests.post(url, auth=(username, password), json=data1)
        print('hhhhhh       ',l_main)

        if l_main:
            l_main = l_main.json()
            if l_main['status']=='1':
                m1.empmast.objects.filter(hrms_id=hrmsId).update(SessionId=SessionId,SSOUid=SSOUid)
            
                try:
                    user = m1.MyUser.objects.get(username=erpuserno)
                except:
                    user = m1.MyUser.objects.get(email=erpuserno)   
                if user:
                    
                    # user = authenticate(username=erpuserno, password='itpi@123') 
                    # try:
                    #     user = m1.MyUser.objects.get(username=erpuserno)
                    # except:
                    #     user = m1.MyUser.objects.get(email=erpuserno)
                    print('user-------------',user)  
                    global f_name
                    global l_name
                    global role_list 

                    if user is not None:
                        print(user,is_admin,user_role,phase_type)
                        login(request, user) 
                        request.session["userrole"]=request.user.user_role
                        request.session["ssoid"]=hrmsId
                        m1.hrms_logs.objects.create(empno=erpuserno,hrmsid=hrmsId,token=token,SessionId=SessionId,SSOUid=SSOUid,purpose='SSO LOGIN',remarks='Login Successful ')
                        if user_role=="guest": 
                            desig=models.Level_Desig.objects.filter(official_email_ID=request.user).values('designation','d_level')
                            request.session["designation"] = desig[0]['designation']
                            request.session["d_level"]=desig[0]['d_level']

                        elif user_role=="admin_rly" or user_role=="admin_super" or user_role=="admin_div" or user_role=="admin_roster":
                            rlyid=models.AdminMaster.objects.filter(user_id=_email).values('rly_id')
                        # else:     
                        #     print('xxxxx')               
                        #     desig=models.Level_Desig.objects.filter(official_email_ID=_email).values('designation','d_level')
                            
                        #     request.session["designation"] = desig[0]['designation']
                        #     request.session["d_level"]=desig[0]['d_level']
                        else:          
                            print('In------valid User5-------------------------------------------------',hrmsId,encData,SSOUid,SessionId)
                            context={
                            'is_sso':'Y',
                            'encData':encData,
                            'hrmsId':hrmsId,
                            'SSOUid':SSOUid,
                            'sessionid':SessionId,
                                        
                            }
                            desig=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=_email)|Q(official_email_ID=request.user.guest_email) | Q(official_email_ID=request.user)).values('designation','d_level','empno')
                            request.session["designation"] = desig[0]['designation']
                            request.session["d_level"]=desig[0]['d_level']

                            if desig[0]['empno'] == None:
                                logout(request)
                                messages.error(request, 'Employee number is not mapped with designation, please contact admin.')
                                m1.hrms_logs.objects.create(empno='NA',hrmsid=hrmsId,token=token,SessionId=SessionId,SSOUid=SSOUid,purpose='SSO LOGIN',remarks='Unable to authenticate login request. Employee number is not mapped with designation.')                         

                                return render(request, 'login.html', context)  
                        
                        
                        if (is_admin==True) and (user_role=="admin_super"):
                            if (phase_type=='1') or (phase_type==None) or (phase_type=='3'):
                                role_list = str(user_role)
                                request.session["nav"] = custommenu_admin(request)
                                # return HttpResponseRedirect('/adminuserHome')
                                return HttpResponseRedirect('/employeeList')
                            elif phase_type=='2':
                                role_list = str(user_role)
                                request.session["nav"] = custommenu2(phase_type,d_level)
                                return HttpResponseRedirect('/masterTable')
                        
                        elif (is_admin==True) and (user_role=="admin_rly"):
                            if phase_type=='1' or (phase_type==None) or (phase_type=='3'): 
                                role_list = str(user_role)
                                request.session["nav"] = custommenu_admin(request)
                                return HttpResponseRedirect('/DivisonMaster')
                            elif phase_type=='2':
                                role_list = str(user_role)
                                request.session["nav "] = custommenu2(phase_type,d_level)
                                return HttpResponseRedirect('/masterTable')  

                        elif (is_admin==True) and (user_role=="admin_div"):
                            if (phase_type=='1') or (phase_type==None) or (phase_type=='3'):
                                role_list = str(user_role)
                                request.session["nav"] = custommenu_admin(request)
                                return HttpResponseRedirect('/requests111')
                            elif phase_type=='2':
                                role_list = str(user_role)
                                request.session["nav"] = custommenu2(phase_type,d_level)
                                return HttpResponseRedirect('/masterTable')

                        elif (is_admin==True) and (user_role=="admin_roster"):
                            if phase_type=='1' or (phase_type==None) or (phase_type=='3'): 
                                role_list = str(user_role)
                                request.session["nav"] = custommenu_admin(request)
                                return HttpResponseRedirect('/roster_list')
                            elif phase_type=='2':
                                role_list = str(user_role)
                                request.session["nav "] = custommenu2(phase_type,d_level)
                                return HttpResponseRedirect('/masterTable')

                        ##################################### USER LOGIN ###########################################
                        else:
                            username =erpuserno
                            try:
                                
                                desig=models.Level_Desig.objects.filter(official_email_ID=request.user).values('designation','d_level')
                                request.session["designation"] = desig[0]['designation']
                                request.session["d_level"]=desig[0]['d_level']
                                d_level=desig[0]['d_level']
                                print(d_level)
                            except:
                                d_level=''
                            
                        # role_list = "user"
                            # Phase type 1
                            if phase_type=='1':
                                role_list = str(user_role)
                                print('ssss',user_role,phase_type,d_level)
                                request.session["nav"] = custommenu(request,phase_type,d_level)
                                request.session['phase']='1'
                                if request.session['designation']=='CRB & CEO':
                                    return HttpResponseRedirect('/home_page')
                                else:
                                    print('sqsss',user_role,phase_type,d_level)
                                    return HttpResponseRedirect('/dash_home')

                            # Phase Type 2
                            elif phase_type=='2':
                                role_list = str(user_role)
                                request.session["nav"] = custommenu2(phase_type,d_level)
                                request.session['phase']='2'
                                # request.session['phase']='1'
                                # return HttpResponseRedirect('/dash_home')
                                return HttpResponseRedirect('/frontpage')
                            
                            # Phase Type 3
                            elif phase_type=='3':
                                role_list = str(user_role)
                                request.session['nav1']=custommenu2(phase_type,d_level)
                                storeNav = custommenu(request,phase_type,d_level)
                                request.session['nav']=storeNav
                                request.session['phase']='3'
                                # request.session['phase']='1'
                                # return HttpResponseRedirect('/dash_home')
                                return HttpResponseRedirect('/frontpage')

                            else:
                                role_list = str(user_role)
                                request.session["nav"] = custommenu(request,phase_type,d_level)
                                request.session['phase']='1'
                                return HttpResponseRedirect('/dash_home')

                else:
                    print('In------valid User3-------------------------------------------------',hrmsId,encData)
                    context={
                    'is_sso':'Y',
                    'encData':encData,
                    'hrmsId':hrmsId,
                    'SSOUid':SSOUid,
                    'sessionid':SessionId,
                                
                    }
                    messages.success(request,"Your HRMD ID is not mapped with the application user ID for this application.Please login directly. You will have to carry out HRMS ID mapping (after login) to use SSO functionality.")
                    m1.hrms_logs.objects.create(empno='NA',hrmsid=hrmsId,token=token,SessionId=SessionId,SSOUid=SSOUid,purpose='SSO LOGIN',remarks='Unable to authenticate login request. Please provide credentials again for login.')                         
                    return render(request, 'login.html', context)

            elif l_main['status']=='0':  
                # messages.success(request,"Unable to authenticate login request. Please provide credentials again for login.")
                # # global ssoStatus
                # # ssoStatus = True
                # m1.hrms_logs.objects.create(empno='NA',hrmsid=hrmsId,token=token,SessionId=SessionId,SSOUid=SSOUid,purpose='SSO LOGIN',remarks='Unable to authenticate login request. Please provide credentials again for login.')                         
                # return render(request, "login.html")
                
                context={
                    'is_sso':'Y',
                    'encData':encData,
                    'hrmsId':hrmsId,
                    'SSOUid':SSOUid,
                    'sessionid':SessionId,
                                  
                }
                print('context4---------------------------------------------------',context)
                messages.success(request,"Your HRMD ID is not mapped with the application user ID for this application.Please login directly. You will have to carry out HRMS ID mapping (after login) to use SSO functionality.")
                # global ssoStatus
                # ssoStatus = True
                m1.hrms_logs.objects.create(empno='NA',hrmsid=hrmsId,token=token,SessionId=SessionId,SSOUid=SSOUid,purpose='SSO LOGIN',remarks='Unable to authenticate login request. Please provide credentials again for login.')                         
                return render(request, 'login.html', context)
        else:
            # messages.success(request,"Unable to authenticate login request. Please provide credentials again for login.")
            # # global ssoStatus
            # # ssoStatus = True
            # m1.hrms_logs.objects.create(empno='NA',hrmsid=hrmsId,token=token,SessionId=SessionId,SSOUid=SSOUid,purpose='SSO LOGIN',remarks='Unable to authenticate login request. Token authorization failed.')                         
            # return render(request, "login.html")
            print(hrmsId,encData)
            context={
                'is_sso':'Y',
                'encData':encData,
                'hrmsId':hrmsId,
                'SSOUid':SSOUid,
                'sessionid':SessionId,
                                
            }
            print('context4---------------------------------------------------',context)
            messages.success(request,"Your HRMD ID is not mapped with the application user ID for this application.Please login directly. You will have to carry out HRMS ID mapping (after login) to use SSO functionality.")
            # global ssoStatus
            # ssoStatus = True
            m1.hrms_logs.objects.create(empno='NA',hrmsid=hrmsId,token=token,SessionId=SessionId,SSOUid=SSOUid,purpose='SSO LOGIN',remarks='Unable to authenticate login request. Please provide credentials again for login.')                         
            return render(request, 'login.html', context)
    return render(request, "login.html")

def pendencyReport(request):
        
        cuser=request.user
        if request.user.user_role == 'guest':
            cuser=request.user.guest_email
            request.user.email=request.user.guest_email

        desigid=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user)).values()
        rly_code=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].rly_unit.location_code
        rly_unit_code=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].rly_unit.rly_unit_code
        parent_loc=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].rly_unit.parent_location_code
        parent_loc_id=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].rly_unit.parent_rly_unit_code
        div_code=rly_code
        if parent_loc!='RB':
            div_code=rly_code
            rly_code=parent_loc
            rly_unit_code=parent_loc_id

        #print(div_code,rly_code,rly_unit_code)

        rly=request.POST.getlist('zone')
        div=request.POST.getlist('division')
        dept=request.POST.getlist('department')
        loc=request.POST.getlist('location')

        list3=models.railwayLocationMaster.objects.filter(location_type_desc__in=['DIVISION','WORKSHOP']).values('location_code', 'location_type', 'rly_unit_code').order_by('location_code')
        #print(list3)
        list4=list(list3)
        
        list1=models.railwayLocationMaster.objects.filter(location_type_desc__in=['RAILWAY BOARD', 'PRODUCTION UNIT', 'HEAD QUATER','OFFICE', 'PSU', 'PRODUCTION UNIT', 'INSTITUTE']).values('location_code','rly_unit_code').order_by('location_code')
        list2=[]
        for i in list1:
            list2.append({'location_code': i['location_code'], 'rly_unit_code': i['rly_unit_code']})
                
        list5=list(models.departMast.objects.all().values('department_name','department_code')) 
        item=[] 
        obj6 = models.railwayLocationMaster.objects.filter(location_type_desc__in=['DIVISION','WORKSHOP'], parent_rly_unit_code = rly_unit_code).values('location_code','location_type', 'rly_unit_code').order_by('location_code')
        obj7 = list(obj6)
        #print(list2)
                        
        context={
            'Zone':list2 ,
            'division':obj7,
            'department':list5,
            'rly_unit_code':rly_unit_code,
            'rly_code':rly_code,
            'div_code':div_code
        }                
        return render(request,"pendencyReport.html",context)




def dashfunc(request):
    if request.method=='GET' or request.is_ajax():
        
        startDate = request.POST.get('startDate')
        currentDate = request.POST.get('currentDate')
        rl = request.POST.get('rl')
        di = request.POST.get('di')
        zone = request.POST.get('Myzone')

        if (di == '') :
            dept = rl
        else:
            dept = di

        print('----------------------------dept',dept)
        print('di',di, type(di))
        cuser=request.user
        total_pendency_count_7 = []
        total_pendency_count_30 = []
        total_pendency_count_180 = []
        total_pendency_count_90 = []
        total_pending = []
        total_overdue = []
        total_inspection = []
        total_items = []
        insptotal_pending = []
        insptotal_overdue = []
        Data_priority = []

        priority = []
        ps = []
        es = []
        oth = []
        ni = []
        si = []
        di = []
        ri = []
                
        radioVal1 = []
        Data_total_inspection= []
        Data_total_items = []
        Data_insptotal_pending = []
        Data_insptotal_overdue = []
        Data_total_pending = []
        Data_total_overdue = []

        rly_unit_code=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].rly_unit.rly_unit_code
        #rly_id = list(models.railwayLocationMaster.objects.filter(rly_unit_code = rly_unit_code).values_list('parent_rly_unit_code', flat=True).order_by('location_code'))[0]
        #print('rly_id',rly_id)
        radioVal = request.POST.get('selected_value')
        radioVal2 = request.POST.get('selected_value2')
        
        b = try_convert_to_int(radioVal)
        print("//////////////////////////")
        print('rly_unit_code',rly_unit_code)       
        print('radioVal',b)
        print('radioVal2',radioVal2)

        # print('ascii',ord(radioVal) )
        print('type', type(b))

        ###
        if radioVal == 'e': # Marked officer
            field_name = 'Marked Officers'
            cursor = connection.cursor()
            #data=list(models.departMast.objects.all().values_list('department_name', flat=True))
            cursor.execute( """ select distinct marked_designation from public.insp_marked_sumry where (marked_div_id = %s or marked_hq_id = %s) group by marked_designation""",[rly_unit_code, rly_unit_code])
            #  """ select distinct designation from public.view_inspection_pendency_analysis_table1 and rly_unit_code = %s group by designation
            #                """, [rly_unit_code]
            rlycode = cursor.fetchall()
            cursor.close()
            
            rly_id = '#'
            # print('data', data)
            print('rly_id', rly_id)

            for i in rlycode:
                radioVal1.append(radioVal)
                cursor = connection.cursor()
                
                cursor.execute(
                    """ select count(distinct item_no) FROM public.insp_marked_sumry where marked_designation = %s and pendency_days > 7 and marked_officer_status in (1,2) group by marked_designation """,[i])
                #AND rly_unit_code = %s
                pendency_count_7 = cursor.fetchall()
                if (pendency_count_7 == None or pendency_count_7 == []):
                    pendency_count_7 = [0]    
                total_pendency_count_7.append(pendency_count_7)               

                cursor.execute(
                    """ select count(distinct item_no) FROM public.insp_marked_sumry where marked_designation = %s and pendency_days > 30 and marked_officer_status in (1,2) group by marked_designation """,[i])
                pendency_count_30 = cursor.fetchall()
                if (pendency_count_30 == None or pendency_count_30 == []):
                    pendency_count_30 = [0]    
                total_pendency_count_30.append(pendency_count_30)
                                
                cursor.execute(
                    """  select count(distinct item_no) FROM public.insp_marked_sumry where marked_designation = %s and pendency_days > 90 and marked_officer_status in (1,2) group by marked_designation """,[i])
                pendency_count_90 = cursor.fetchall()
                if (pendency_count_90 == None or pendency_count_90 == []):
                    pendency_count_90 = [0]    
                total_pendency_count_90.append(pendency_count_90)
                
                cursor.execute(
                    """  select count(distinct item_no) FROM public.insp_marked_sumry where marked_designation = %s and pendency_days > 180 and marked_officer_status in (1,2) group by marked_designation """,[i])
                pendency_count_180 = cursor.fetchall()
                if (pendency_count_180 == None or pendency_count_180 == []):
                    pendency_count_180 = [0]    
                total_pendency_count_180.append(pendency_count_180)

                
                cursor.execute(
                    """SELECT count(distinct item_no) FROM public.insp_marked_sumry where marked_designation = %s and  marked_officer_status in (1, 2) group by marked_designation
                    """,[i]
                )
                pending = cursor.fetchall()
                if (pending == None or pending == []):
                    pending = [0]    
                total_pending.append(pending)

                cursor.execute(
                    """ SELECT count(distinct inspection_no) FROM public.insp_marked_sumry where marked_designation =  %s and  marked_officer_status in (1, 2, 3, 4) group by marked_designation""",[i]
                )
                inspection_count = cursor.fetchall()
                if (inspection_count == None or inspection_count == []):
                    inspection_count = [0]    
                total_inspection.append(inspection_count)

                cursor.execute(
                    """SELECT count(distinct item_no) FROM public.insp_marked_sumry where marked_designation =  %s and  marked_officer_status in (1, 2, 3, 4) group by marked_designation """,[i]
                )
                items_count = cursor.fetchall()
                if (items_count == None or items_count == []):
                    items_count = [0]    
                total_items.append(items_count)

                cursor.execute(
                    """select count (distinct item_no) FROM public.insp_marked_sumry where marked_designation  = %s and marked_officer_status in (1, 2) and overdue_flag = 1  group by marked_designation;
                    """,[i]
                )
                overdue = cursor.fetchall()
                if (overdue == None or overdue == []):
                    overdue = [0]    
                total_overdue.append(overdue)

                
                cursor.execute(
                    """SELECT count(distinct inspection_no) FROM public.insp_marked_sumry where marked_designation = %s and  marked_officer_status in (1, 2) group by marked_designation
                    """,[i]
                )
                inspPending = cursor.fetchall()
                if (inspPending == None or inspPending == []):
                    inspPending = [0]    
                insptotal_pending.append(inspPending)

                cursor.execute(
                    """select count(distinct inspection_no) FROM public.insp_marked_sumry where marked_designation  = %s and marked_officer_status in (1, 2) and overdue_flag = 1  group by marked_designation;
                    """,[i]
                )
                inspOverdue = cursor.fetchall()
                if (inspOverdue == None or inspOverdue == []):
                    inspOverdue = [0]    
                insptotal_overdue.append(inspOverdue)
                    
                cursor.execute(
                        """select count(distinct item_no) FROM public.insp_marked_sumry where marked_designation  = %s and marked_officer_status in (1, 2, 3, 4) and ps = 1  group by marked_designation;
                        """,[i]
                )
                p = cursor.fetchall()
                if (p == None or p == []):
                    p = [0]    
                ps.append(p)
                cursor.execute(
                        """select count(distinct item_no) FROM public.insp_marked_sumry where marked_designation  = %s and marked_officer_status in (1, 2, 3, 4) and es = 1  group by marked_designation;
                        """,[i]
                )
                e = cursor.fetchall()
                if (e == None or e == []):
                    e = [0]    
                es.append(e)

                cursor.execute(
                        """select count(distinct item_no) FROM public.insp_marked_sumry where marked_designation  = %s and marked_officer_status in (1, 2, 3, 4) and oth = 1  group by marked_designation;
                        """,[i]
                )
                o = cursor.fetchall()
                if (o == None or o == []):
                    o = [0]    
                oth.append(o)
                cursor.execute(
                        """select count(distinct item_no) FROM public.insp_marked_sumry where marked_designation  = %s and marked_officer_status in (1, 2, 3, 4) and ni = 1  group by marked_designation;
                        """,[i]
                )
                n = cursor.fetchall()
                if (n == None or n == []):
                    n = [0]    
                ni.append(n)

                
                cursor.execute(
                        """select count(distinct item_no) FROM public.insp_marked_sumry where marked_designation  = %s and marked_officer_status in (1, 2, 3, 4) and si = 1  group by marked_designation;
                        """,[i]
                )
                s = cursor.fetchall()
                if (s == None or s == []):
                    s = [0]    
                si.append(s)
                cursor.execute(
                        """ select count(distinct item_no) FROM public.insp_marked_sumry where marked_designation  = %s and marked_officer_status in (1, 2, 3, 4) and di = 1  group by marked_designation;
                        """,[i]
                )
                d = cursor.fetchall()
                if (d == None or d == []):
                    d = [0]    
                di.append(d)
                cursor.execute(
                        """ select count(distinct item_no) FROM public.insp_marked_sumry where marked_designation  = %s and marked_officer_status in (1, 2, 3, 4) and ri = 1  group by marked_designation;
                        """,[i]
                )
                r = cursor.fetchall()
                if (r == None or r == []):
                    r = [0]    
                ri.append(r)

                cursor.execute(
                        """ select count(distinct item_no) FROM public.insp_marked_sumry where marked_designation  = %s and marked_officer_status in (1, 2, 3, 4) and priority > 0  group by marked_designation;
                        """,[i]
                )
                prior = cursor.fetchall()
                if (prior == None or prior == []):
                    prior = [0]    
                priority.append(prior)
# - - - - - - - - - - - - - -  - -  -  -                 
                
                cursor.execute(
                        """ select distinct item_no FROM public.insp_marked_sumry where marked_designation  = %s and marked_officer_status in (1, 2, 3, 4) and priority > 0  group by marked_designation, item_no;
                        """,[i]
                )
                prior = cursor.fetchall()
                if (prior == None or prior == []):
                    prior = [0]    
                Data_priority.append(prior)


                cursor.execute(
                    """SELECT distinct item_no FROM public.insp_marked_sumry where marked_designation = %s and  marked_officer_status in (1, 2) group by marked_designation, item_no
                    """,[i]
                )
                pending = cursor.fetchall()
                if (pending == None or pending == []):
                    pending = [0]    
                Data_total_pending.append(pending)

                cursor.execute(
                    """ SELECT distinct inspection_no FROM public.insp_marked_sumry where marked_designation =  %s and  marked_officer_status in (1, 2, 3, 4) group by marked_designation, inspection_no""",[i]
                )
                inspection_count = cursor.fetchall()
                if (inspection_count == None or inspection_count == []):
                    inspection_count = [0]    
                Data_total_inspection.append(inspection_count)

                cursor.execute(
                    """SELECT distinct item_no FROM public.insp_marked_sumry where marked_designation =  %s and  marked_officer_status in (1, 2, 3, 4) group by marked_designation, item_no """,[i]
                )
                items_count = cursor.fetchall()
                if (items_count == None or items_count == []):
                    items_count = [0]    
                Data_total_items.append(items_count)

                cursor.execute(
                    """select distinct item_no FROM public.insp_marked_sumry where marked_designation  = %s and marked_officer_status in (1, 2) and overdue_flag = 1  group by marked_designation, item_no;
                    """,[i]
                )
                overdue = cursor.fetchall()
                if (overdue == None or overdue == []):
                    overdue = [0]    
                Data_total_overdue.append(overdue)

                
                cursor.execute(
                    """SELECT distinct inspection_no FROM public.insp_marked_sumry where marked_designation = %s and  marked_officer_status in (1, 2) group by marked_designation, inspection_no;
                    """,[i]
                )
                inspPending = cursor.fetchall()
                if (inspPending == None or inspPending == []):
                    inspPending = [0]    
                Data_insptotal_pending.append(inspPending)

                cursor.execute(
                    """select distinct inspection_no FROM public.insp_marked_sumry where marked_designation  = %s and marked_officer_status in (1, 2) and overdue_flag = 1  group by marked_designation, inspection_no;
                    """,[i]
                )
                inspOverdue = cursor.fetchall()
                if (inspOverdue == None or inspOverdue == []):
                    inspOverdue = [0]    
                Data_insptotal_overdue.append(inspOverdue)
                    

            cursor.close()
            context = {
                'rly_id':rly_id,
                'field_name':field_name,
                'radioVal':radioVal,
                'tdata': rlycode,
                'rlycode':rlycode,

                'total_pendency_count_7':total_pendency_count_7,
                'total_pendency_count_30':total_pendency_count_30,
                'total_pendency_count_90':total_pendency_count_90,
                'total_pendency_count_180':total_pendency_count_180,
                'total_pending':total_pending,
                'total_overdue':total_overdue,
                'total_inspection':total_inspection,
                'total_items':total_items,                
                'insptotal_pending':insptotal_pending,
                'insptotal_overdue':insptotal_overdue,
                'ps':ps,
                'es':es,
                'oth':oth, 
                'ni':ni,
                'si':si,
                'di':di,
                'ri':ri, 
                'priority':priority,
                    
                'Data_total_inspection':Data_total_inspection, 
                'Data_total_pending':Data_total_pending,
                'Data_total_overdue':Data_total_overdue,
                'Data_total_items':Data_total_items,
                'Data_insptotal_pending':Data_insptotal_pending,
                'Data_insptotal_overdue':Data_insptotal_overdue,
                'Data_priority':Data_priority,
                }
            request.session['vontext'] = context
            return JsonResponse(context, safe = False)
        ###
        if radioVal == 'c': # Department Wise
            print('radioVal',radioVal)
            field_name = 'Department'
            data=list(models.departMast.objects.all().values_list('department_name', flat=True))
            # print('data',data)
            rly_id = ''
            rlycode = data            
            print('rly_id',rly_id)
            # cursor = connection.cursor()
            # cursor.execute( """  select distinct department from public.view_inspection_pendency_analysis_table1  group by department""")
            # data = cursor.fetchall()
            
            for i in data:
                radioVal1.append(radioVal)
                cursor = connection.cursor()
                
                cursor.execute(""" select count(distinct item_no) FROM public.insp_marked_sumry where marked_officer_department = %s and pendency_days > 7 and marked_officer_status in (1,2)  AND inspected_on >= %s AND inspected_on <= %s AND  (marked_div_id = %s or marked_hq_id = %s)  group by marked_officer_department""",[i, startDate, currentDate, dept, dept])
                        
                pendency_count_7 = cursor.fetchall()     
                if (pendency_count_7 == None or pendency_count_7 == []):
                    pendency_count_7 = [0]     
                total_pendency_count_7.append(pendency_count_7)
                
                cursor.execute(
                    """select count(distinct item_no) FROM public.insp_marked_sumry where marked_officer_department = %s and pendency_days > 30 and marked_officer_status in (1,2)  AND inspected_on >= %s AND inspected_on <= %sAND  (marked_div_id = %s or marked_hq_id = %s)  group by marked_officer_department""",[i, startDate, currentDate, dept, dept])
                pendency_count_30 = cursor.fetchall()
                if (pendency_count_30 == None or pendency_count_30 == []):
                    pendency_count_30 = [0]    
                total_pendency_count_30.append(pendency_count_30)
                
                cursor.execute(
                        """select count(distinct item_no) FROM public.insp_marked_sumry where marked_officer_department = %s and pendency_days > 90 and marked_officer_status in (1,2)  AND inspected_on >= %s AND inspected_on <= %sAND  (marked_div_id = %s or marked_hq_id = %s)  group by marked_officer_department """,[i, startDate, currentDate, dept, dept])
                pendency_count_90 = cursor.fetchall()
                if (pendency_count_90 == None or pendency_count_90 == []):
                    pendency_count_90 = [0]    
                total_pendency_count_90.append(pendency_count_90)

                cursor.execute(
                        """select count(distinct item_no) FROM public.insp_marked_sumry where marked_officer_department = %s and pendency_days > 180 and marked_officer_status in (1,2)  AND inspected_on >= %s AND inspected_on <= %sAND  (marked_div_id = %s or marked_hq_id = %s)  group by marked_officer_department """,[i, startDate, currentDate, dept, dept])
                pendency_count_180 = cursor.fetchall()
                if (pendency_count_180 == None or pendency_count_180 == []):
                    pendency_count_180 = [0]  
                total_pendency_count_180.append(pendency_count_180)

                cursor.execute(
                        """ select count (distinct item_no) FROM public.insp_marked_sumry where marked_officer_department = %s and item_status in (1, 2) 
                             AND inspected_on >= %s AND inspected_on <= %sAND  (marked_div_id = %s or marked_hq_id = %s)  group by marked_officer_department
                        """,[i, startDate, currentDate, dept, dept])
                pending_count = cursor.fetchall()            
                if (pending_count == None or pending_count == []):
                    pending_count = [0]  
                total_pending.append(pending_count)

                cursor.execute(
                    """  SELECT count(distinct item_no) FROM public.insp_marked_sumry where marked_officer_department = %s and marked_officer_status in (1, 2, 3, 4) AND inspected_on >= %s AND inspected_on <= %s AND  (marked_div_id = %s or marked_hq_id = %s)  group by marked_officer_department """,[i, startDate, currentDate, dept, dept])
                items = cursor.fetchall()                      
                if (items == None or items == []):
                    items = [0]  
                total_items.append(items)
                    
                cursor.execute(
                        """   SELECT count(distinct inspection_no) FROM public.insp_marked_sumry where marked_officer_department = %s and  marked_officer_status in (1, 2, 3, 4) AND inspected_on >= %s AND inspected_on <= %s AND  (marked_div_id = %s or marked_hq_id = %s)  group by marked_officer_department """,[i, startDate, currentDate, dept, dept])
                inspection = cursor.fetchall()                      
                if (inspection == None or inspection == []):
                    inspection = [0]  
                total_inspection.append(inspection)

                        ##marked_officer_department
                cursor.execute(                 
                    """select count (distinct item_no) FROM public.insp_marked_sumry where marked_officer_department = %s and marked_officer_status in (1, 2) and overdue_flag = 1  AND inspected_on >= %s AND inspected_on <= %sAND  (marked_div_id = %s or marked_hq_id = %s)  group by marked_officer_department;""",[i, startDate, currentDate, dept, dept])
                overdue = cursor.fetchall()
                if (overdue == None or overdue == []):
                    overdue = [0]    
                total_overdue.append(overdue)                  
                                
                cursor.execute(
                    """SELECT count(distinct inspection_no) FROM public.insp_marked_sumry where marked_officer_department = %s and  marked_officer_status in (1, 2)  AND inspected_on >= %s AND inspected_on <= %sAND  (marked_div_id = %s or marked_hq_id = %s)   group by marked_officer_department
                    """,[i, startDate, currentDate, dept, dept]
                )
                inspPending = cursor.fetchall()
                if (inspPending == None or inspPending == []):
                    inspPending = [0]    
                insptotal_pending.append(inspPending)
                cursor.execute(
                    """select count (distinct inspection_no) FROM public.insp_marked_sumry where marked_officer_department = %s and marked_officer_status in (1, 2) and overdue_flag = 1  AND inspected_on >= %s AND inspected_on <= %s AND  (marked_div_id = %s or marked_hq_id = %s)  group by marked_officer_department;
                    """,[i, startDate, currentDate, dept, dept]
                )
                inspOverdue = cursor.fetchall()
                if (inspOverdue == None or inspOverdue == []):
                    inspOverdue = [0]    
                insptotal_overdue.append(inspOverdue)
                

                    
                cursor.execute(
                        """select count (distinct item_no) FROM public.insp_marked_sumry 
                            where marked_officer_department = %s and marked_officer_status in (1, 2, 3, 4) 
                            and ps = 1 AND inspected_on >= %s AND inspected_on <= %s AND  (marked_div_id = %s or marked_hq_id = %s)  group by marked_officer_department;
                        """,[str(i), str(startDate), str(currentDate), dept, dept]
                )
                p = cursor.fetchall()
                if (p == None or p == []):
                    p = [0]    
                ps.append(p)

                cursor.execute(
                        """select count (distinct item_no) FROM public.insp_marked_sumry 
                            where marked_officer_department = %s and marked_officer_status in (1, 2, 3, 4) 
                            and es = 1 AND inspected_on >= %s AND inspected_on <= %s AND  (marked_div_id = %s or marked_hq_id = %s)  group by marked_officer_department;
                        """,[i, startDate, currentDate, dept, dept]
                )
                e = cursor.fetchall()
                if (e == None or e == []):
                    e = [0]    
                es.append(e)

                cursor.execute(
                        """select count (distinct item_no) FROM public.insp_marked_sumry 
                            where marked_officer_department = %s and marked_officer_status in (1, 2, 3, 4) 
                            and oth = 1 AND inspected_on >= %s AND inspected_on <= %s AND  (marked_div_id = %s or marked_hq_id = %s)  group by marked_officer_department;
                        """,[str(i), str(startDate), str(currentDate), dept, dept]
                )
                o = cursor.fetchall()
                if (o == None or o == []):
                    o = [0]    
                oth.append(o)
                cursor.execute(
                        """select count (distinct item_no) FROM public.insp_marked_sumry 
                            where marked_officer_department = %s and marked_officer_status in (1, 2, 3, 4) 
                            and ni = 1 AND inspected_on >= %s AND inspected_on <= %s AND  (marked_div_id = %s or marked_hq_id = %s)  group by marked_officer_department;
                        """,[i, startDate, currentDate, dept, dept]
                )
                n = cursor.fetchall()
                if (n == None or n == []):
                    n = [0]    
                ni.append(n)

                
                cursor.execute(
                        """select count (distinct item_no) FROM public.insp_marked_sumry 
                            where marked_officer_department  = %s and marked_officer_status in (1, 2, 3, 4) 
                            and si = 1 AND inspected_on >= %s AND inspected_on <= %s AND  (marked_div_id = %s or marked_hq_id = %s)  group by marked_officer_department;
                        """,[i, startDate, currentDate, dept, dept]
                )
                s = cursor.fetchall()
                if (s == None or s == []):
                    s = [0]    
                si.append(s)
                cursor.execute(
                        """ select count (distinct item_no) FROM public.insp_marked_sumry 
                            where marked_officer_department  = %s and marked_officer_status in (1, 2, 3, 4) 
                            and di = 1 AND inspected_on >= %s AND inspected_on <= %s AND  (marked_div_id = %s or marked_hq_id = %s)  group by marked_officer_department;
                        """,[i, startDate, currentDate, dept, dept]
                )
                d = cursor.fetchall()
                if (d == None or d == []):
                    d = [0]    
                di.append(d)
                cursor.execute(
                        """ select count (distinct item_no) FROM public.insp_marked_sumry 
                            where marked_officer_department  = %s and marked_officer_status in (1, 2, 3, 4) 
                            and ri = 1 AND inspected_on >= %s AND inspected_on <= %s AND  (marked_div_id = %s or marked_hq_id = %s)  group by marked_officer_department;
                        """,[i, startDate, currentDate, dept, dept]
                )
                r = cursor.fetchall()
                if (r == None or r == []):
                    r = [0]    
                ri.append(r)

                cursor.execute(
                        """ select count (distinct item_no) FROM public.insp_marked_sumry 
                            where marked_officer_department  = %s and marked_officer_status in (1, 2, 3, 4) 
                            and priority > 0 AND inspected_on >= %s AND inspected_on <= %s AND  (marked_div_id = %s or marked_hq_id = %s)  group by marked_officer_department;
                        """,[i, startDate, currentDate, dept, dept]
                )
                prior = cursor.fetchall()
                if (prior == None or prior == []):
                    prior = [0]    
                priority.append(prior)


                # ---------------------------

                
                cursor.execute(
                        """ select distinct item_no FROM public.insp_marked_sumry 
                            where marked_officer_department  = %s and marked_officer_status in (1, 2, 3, 4) 
                            and priority > 0 AND inspected_on >= %s AND inspected_on <= %s AND  (marked_div_id = %s or marked_hq_id = %s)  group by marked_officer_department, item_no;
                        """,[i, startDate, currentDate, dept, dept]
                )
                prior = cursor.fetchall()
                if (prior == None or prior == []):
                    prior = [0]    
                Data_priority.append(prior)

                cursor.execute(
                        """ select distinct item_no FROM public.insp_marked_sumry where marked_officer_department = %s and item_status in (1, 2) 
                             AND inspected_on >= %s AND inspected_on <= %sAND  (marked_div_id = %s or marked_hq_id = %s)  group by marked_officer_department, item_no
                        """,[i, startDate, currentDate, dept, dept])
                pending_count = cursor.fetchall()            
                if (pending_count == None or pending_count == []):
                    pending_count = [0]  
                Data_total_pending.append(pending_count)

                cursor.execute(
                    """  SELECT distinct item_no FROM public.insp_marked_sumry where marked_officer_department = %s and marked_officer_status in (1, 2, 3, 4) AND inspected_on >= %s AND inspected_on <= %s AND  (marked_div_id = %s or marked_hq_id = %s)  group by marked_officer_department, item_no """,[i, startDate, currentDate, dept, dept])
                items = cursor.fetchall()                      
                if (items == None or items == []):
                    items = [0]  
                Data_total_items.append(items)
                    
                cursor.execute(
                        """   SELECT distinct inspection_no FROM public.insp_marked_sumry where marked_officer_department = %s and  marked_officer_status in (1, 2, 3, 4) AND inspected_on >= %s AND inspected_on <= %s AND  (marked_div_id = %s or marked_hq_id = %s)  group by marked_officer_department, inspection_no """,[i, startDate, currentDate, dept, dept])
                inspection = cursor.fetchall()                      
                if (inspection == None or inspection == []):
                    inspection = [0]  
                Data_total_inspection.append(inspection)

                        ##marked_officer_department
                cursor.execute(                 
                    """select distinct item_no FROM public.insp_marked_sumry where marked_officer_department = %s and marked_officer_status in (1, 2) and overdue_flag = 1  AND inspected_on >= %s AND inspected_on <= %sAND  (marked_div_id = %s or marked_hq_id = %s)  group by marked_officer_department, item_no;""",[i, startDate, currentDate, dept, dept])
                overdue = cursor.fetchall()
                if (overdue == None or overdue == []):
                    overdue = [0]    
                Data_total_overdue.append(overdue)                  
                                
                cursor.execute(
                    """SELECT distinct inspection_no FROM public.insp_marked_sumry where marked_officer_department = %s and  marked_officer_status in (1, 2)  AND inspected_on >= %s AND inspected_on <= %sAND  (marked_div_id = %s or marked_hq_id = %s)   group by marked_officer_department, inspection_no
                    """,[i, startDate, currentDate, dept, dept]
                )
                inspPending = cursor.fetchall()
                if (inspPending == None or inspPending == []):
                    inspPending = [0]    
                Data_insptotal_pending.append(inspPending)
                cursor.execute(
                    """select distinct inspection_no FROM public.insp_marked_sumry where marked_officer_department = %s and marked_officer_status in (1, 2) and overdue_flag = 1  AND inspected_on >= %s AND inspected_on <= %s AND  (marked_div_id = %s or marked_hq_id = %s)  group by marked_officer_department, inspection_no;
                    """,[i, startDate, currentDate, dept, dept]
                )
                inspOverdue = cursor.fetchall()
                if (inspOverdue == None or inspOverdue == []):
                    inspOverdue = [0]    
                Data_insptotal_overdue.append(inspOverdue)
                
                cursor.close()
            context = {
                'rly_id':rly_id,
                'field_name':field_name,
                'radioVal':radioVal,
                'radioVal1':radioVal1,
                'rlycode':rlycode,

                'tdata': data,
                'total_pendency_count_7':total_pendency_count_7,
                'total_pendency_count_30':total_pendency_count_30,
                'total_pendency_count_90':total_pendency_count_90,
                'total_pendency_count_180':total_pendency_count_180,
                'total_pending':total_pending,
                'total_overdue':total_overdue,
                'total_inspection':total_inspection,
                'total_items':total_items,

                'insptotal_pending':insptotal_pending,
                'insptotal_overdue':insptotal_overdue,
                'ps':ps,
                'es':es,
                'oth':oth, 
                'ni':ni,
                'si':si,
                'di':di,
                'ri':ri,
                'priority':priority,                
                
                'Data_priority':Data_priority,
                'Data_total_inspection':Data_total_inspection, 
                'Data_total_pending':Data_total_pending,
                'Data_total_overdue':Data_total_overdue,
                'Data_total_items':Data_total_items,
                'Data_insptotal_pending':Data_insptotal_pending,
                'Data_insptotal_overdue':Data_insptotal_overdue,
                }
            request.session['vontext'] = context
            return JsonResponse(context, safe = False)
        ###
        if (radioVal.isnumeric()) : # Marked office  wise  (filter zone   department)
            print("numeric worked for marked desig")    
            
            field_name = 'Marked Officer'
            rly_id = '#'
            
            cursor = connection.cursor()
            #data=list(models.departMast.objects.all().values_list('department_name', flat=True))
            cursor.execute( """	select distinct marked_designation from public.insp_marked_sumry where (marked_div_id = %s or marked_hq_id = %s) group by marked_designation""",[radioVal, radioVal])
            #  """ select distinct designation from public.view_inspection_pendency_analysis_table1 and rly_unit_code = %s group by designation
            #                """, [rly_unit_code]
            data = cursor.fetchall()
            print('data', data)
            
            for i in data:
                radioVal1.append(radioVal)
                cursor = connection.cursor()

                cursor = connection.cursor()
                cursor.execute(""" select count(distinct item_no) FROM public.insp_marked_sumry where marked_designation = %s and pendency_days > 7 and marked_officer_status in (1,2) AND inspected_on >= %s AND inspected_on <= %s  group by marked_designation""",[i, startDate, currentDate])
                        
                pendency_count_7 = cursor.fetchall()     
                if (pendency_count_7 == None or pendency_count_7 == []):
                    pendency_count_7 = [0]                  
                total_pendency_count_7.append(pendency_count_7)
                
                cursor.execute(   """select count(distinct item_no) FROM public.insp_marked_sumry where marked_designation = %s and pendency_days > 30 and marked_officer_status in (1,2) AND inspected_on >= %s AND inspected_on <= %s  group by marked_designation""",[i, startDate, currentDate])
                pendency_count_30 = cursor.fetchall()
                if (pendency_count_30 == None or pendency_count_30 == []):
                    pendency_count_30 = [0]    
                total_pendency_count_30.append(pendency_count_30)

                
                cursor.execute( """select count(distinct item_no) FROM public.insp_marked_sumry where marked_designation = %s and pendency_days > 90 and marked_officer_status in (1,2) AND inspected_on >= %s AND inspected_on <= %s  group by marked_designation """,[i, startDate, currentDate])
                pendency_count_90 = cursor.fetchall()
                if (pendency_count_90 == None or pendency_count_90 == []):
                    pendency_count_90 = [0]    
                total_pendency_count_90.append(pendency_count_90)


                cursor.execute( """select count(distinct item_no) FROM public.insp_marked_sumry where marked_designation = %s and pendency_days > 180 and marked_officer_status in (1,2) AND inspected_on >= %s AND inspected_on <= %s  group by marked_designation """,[i, startDate, currentDate])
                pendency_count_180 = cursor.fetchall()
                if (pendency_count_180 == None or pendency_count_180 == []):
                    pendency_count_180 = [0]  
                total_pendency_count_180.append(pendency_count_180)

                cursor.execute(
                #     """            
                # select sum(count_180_days_others + count_180_days_passenger_safety + count_180_days_employee_safety) As total_Sum 
                #     from public.view_inspection_pendency_analysis_table1 where designation = %s group by designation
                #     """,[i]
                    """SELECT count(distinct inspection_no) FROM public.insp_marked_sumry where marked_designation = %s and  marked_officer_status in (1, 2) AND inspected_on >= %s AND inspected_on <= %s  group by marked_designation
                    """,[i, startDate, currentDate]
                )
                pending = cursor.fetchall()
                if (pending == None or pending == []):
                    pending = [0]    
                total_pending.append(pending)

                cursor.execute(
                #     """            
                # select sum(count_180_days_others + count_180_days_passenger_safety + count_180_days_employee_safety) As total_Sum 
                #     from public.view_inspection_pendency_analysis_table1 where designation = %s group by designation
                #     """,[i]
                    """  select count (distinct item_no) FROM public.insp_marked_sumry where marked_designation  = %s and marked_officer_status in (1, 2) and overdue_flag = 1 AND inspected_on >= %s AND inspected_on <= %s  group by marked_designation
                    """,[i, startDate, currentDate]
                )
                overdue = cursor.fetchall()
                if (overdue == None or overdue == []):
                    overdue = [0]    
                total_overdue.append(overdue)

                
                cursor.execute(
                    """ SELECT count(distinct inspection_no) FROM public.insp_marked_sumry where marked_designation =  %s and  marked_officer_status in (1, 2, 3, 4)  AND inspected_on >= %s AND inspected_on <= %s  group by marked_designation""",[i,  startDate, currentDate]
                )
                inspection_count = cursor.fetchall()
                if (inspection_count == None or inspection_count == []):
                    inspection_count = [0]    
                total_inspection.append(inspection_count)

                cursor.execute(
                    """SELECT count(distinct item_no) FROM public.insp_marked_sumry where marked_designation =  %s and  marked_officer_status in (1, 2, 3, 4)  AND inspected_on >= %s AND inspected_on <= %s  group by marked_designation """,[i,  startDate, currentDate]
                )
                items_count = cursor.fetchall()
                if (items_count == None or items_count == []):
                    items_count = [0]    
                total_items.append(items_count)

                cursor.execute(
                    """SELECT count(distinct inspection_no) FROM public.insp_marked_sumry where marked_designation = %s and  marked_officer_status in (1, 2) AND inspected_on >= %s AND inspected_on <= %s  group by marked_designation
                    """,[i, startDate, currentDate]
                )
                inspPending = cursor.fetchall()
                if (inspPending == None or inspPending == []):
                    inspPending = [0]    
                insptotal_pending.append(inspPending)
                cursor.execute(
                    """select count (distinct inspection_no) FROM public.insp_marked_sumry where marked_designation  = %s and marked_officer_status in (1, 2) and overdue_flag = 1  AND inspected_on >= %s AND inspected_on <= %s  group by marked_designation;
                    """,[i, startDate, currentDate]
                )
                inspOverdue = cursor.fetchall()
                if (inspOverdue == None or inspOverdue == []):
                    inspOverdue = [0]    
                insptotal_overdue.append(inspOverdue)

                
                cursor.execute(
                        """select count (distinct item_no) FROM public.insp_marked_sumry 
                            where marked_designation = %s and marked_officer_status in (1, 2, 3, 4)  AND inspected_on >= %s AND inspected_on <= %s 
                            and ps = 1  group by marked_designation;
                        """,[i, startDate, currentDate]
                )
                p = cursor.fetchall()
                if (p == None or p == []):
                    p = [0]    
                ps.append(p)
                cursor.execute(
                        """select count (distinct item_no) FROM public.insp_marked_sumry 
                            where marked_designation = %s and marked_officer_status in (1, 2, 3, 4) AND inspected_on >= %s AND inspected_on <= %s 
                            and es = 1  group by marked_designation;
                        """,[i, startDate, currentDate]
                )
                e = cursor.fetchall()
                if (e == None or e == []):
                    e = [0]    
                es.append(e)

                cursor.execute(
                        """select count (distinct item_no) FROM public.insp_marked_sumry 
                            where marked_designation = %s and marked_officer_status in (1, 2, 3, 4) AND inspected_on >= %s AND inspected_on <= %s 
                            and oth = 1  group by marked_designation;
                        """,[i, startDate, currentDate]
                )
                o = cursor.fetchall()
                if (o == None or o == []):
                    o = [0]    
                oth.append(o)
                cursor.execute(
                        """select count (distinct item_no) FROM public.insp_marked_sumry 
                            where marked_designation = %s and marked_officer_status in (1, 2, 3, 4) AND inspected_on >= %s AND inspected_on <= %s 
                            and ni = 1  group by marked_designation;
                        """,[i, startDate, currentDate]
                )
                n = cursor.fetchall()
                if (n == None or n == []):
                    n = [0]    
                ni.append(n)

                
                cursor.execute(
                        """select count (distinct item_no) FROM public.insp_marked_sumry 
                            where marked_designation = %s and marked_officer_status in (1, 2, 3, 4) AND inspected_on >= %s AND inspected_on <= %s 
                            and si = 1  group by marked_designation;
                        """,[i, startDate, currentDate]
                )
                s = cursor.fetchall()
                if (s == None or s == []):
                    s = [0]    
                si.append(s)
                cursor.execute(
                        """ select count (distinct item_no) FROM public.insp_marked_sumry 
                            where marked_designation = %s and marked_officer_status in (1, 2, 3, 4) AND inspected_on >= %s AND inspected_on <= %s
                            and di = 1  group by marked_designation;
                        """,[i, startDate, currentDate]
                )
                d = cursor.fetchall()
                if (d == None or d == []):
                    d = [0]    
                di.append(d)
                cursor.execute(
                        """ select count (distinct item_no) FROM public.insp_marked_sumry 
                            where marked_designation = %s and marked_officer_status in (1, 2, 3, 4) AND inspected_on >= %s AND inspected_on <= %s 
                            and ri = 1  group by marked_designation;
                        """,[i, startDate, currentDate]
                )
                r = cursor.fetchall()
                if (r == None or r == []):
                    r = [0]    
                ri.append(r)

                cursor.execute(
                        """ select count (distinct item_no) FROM public.insp_marked_sumry 
                            where marked_designation = %s and marked_officer_status in (1, 2, 3, 4) AND inspected_on >= %s AND inspected_on <= %s 
                            and priority > 0  group by marked_designation;
                        """,[i, startDate, currentDate]
                )
                prior = cursor.fetchall()
                if (prior == None or prior == []):
                    prior = [0]    
                priority.append(prior)
                cursor.close()
            context = {
                'rly_id':rly_id,            
                'rlycode':rlycode,
                'field_name':field_name,
                'radioVal':radioVal,
                'radioVal1':radioVal1,
                'tdata': data,
                'total_pendency_count_7':total_pendency_count_7,
                'total_pendency_count_30':total_pendency_count_30,
                'total_pendency_count_90':total_pendency_count_90,
                'total_pendency_count_180':total_pendency_count_180,
                'total_pending':total_pending,
                'total_overdue':total_overdue,                
                'total_inspection':total_inspection,
                'total_items':total_items,         
                'insptotal_pending':insptotal_pending,
                'insptotal_overdue':insptotal_overdue,

                
                'ps':ps,
                'es':es,
                'oth':oth, 
                'ni':ni,
                'si':si,
                'di':di,
                'ri':ri, 
                'priority':priority,
                }
            request.session['vontext'] = context
            return JsonResponse(context, safe = False)
        ###
        
        if (radioVal2 is not None and radioVal == 'STM' ) : #section station railway others
            print('STM dropdown worked')
            field_name = 'UNIT'
            rly_id = '#'            

            radioVal2 = try_convert_to_int(radioVal2)
            print('type RADIO VAL 2s',type(radioVal2))
            cursor = connection.cursor()
            
        
            cursor.execute(""" SELECT location_val FROM public.insp_marked_sumry
                WHERE (marked_div_id = %s or marked_hq_id = %s) AND location_table = %s  group by location_val
            """, [radioVal2, radioVal2, radioVal])
            rlycode = cursor.fetchall()   #location_val    SELECT * FROM public.insp_marked_sumry where location_val = %s and location_table = 'STM' group by location_val
            print('rlycode', rlycode)
              # Close the cursor after using it

            for i in rlycode:#location_val 
                radioVal1.append(radioVal)
                cursor.execute(""" select count(distinct item_no) FROM public.insp_marked_sumry where location_val = %s and pendency_days > 7  and marked_officer_status in (1,2)  AND inspected_on >= %s AND inspected_on <= %s  group by location_val""",[i, startDate, currentDate])
                        
                pendency_count_7 = cursor.fetchall()     
                if (pendency_count_7 == None or pendency_count_7 == []):
                    pendency_count_7 = [0]     
                total_pendency_count_7.append(pendency_count_7)
                
                cursor.execute(
                    """select count(distinct item_no) FROM public.insp_marked_sumry where location_val = %s and pendency_days > 30  and marked_officer_status in (1,2)  AND inspected_on >= %s AND inspected_on <= %s  group by location_val""",[i, startDate, currentDate])
                pendency_count_30 = cursor.fetchall()
                if (pendency_count_30 == None or pendency_count_30 == []):
                    pendency_count_30 = [0]    
                total_pendency_count_30.append(pendency_count_30)

                
                cursor.execute(
                        """select count(distinct item_no) FROM public.insp_marked_sumry where location_val = %s and pendency_days > 90  and marked_officer_status in (1,2)  AND inspected_on >= %s AND inspected_on <= %s group by location_val """,[i, startDate, currentDate])
                pendency_count_90 = cursor.fetchall()
                if (pendency_count_90 == None or pendency_count_90 == []):
                    pendency_count_90 = [0]    
                total_pendency_count_90.append(pendency_count_90)


                cursor.execute(
                        """select count(distinct item_no) FROM public.insp_marked_sumry where location_val = %s and pendency_days > 180 and marked_officer_status in (1,2)  AND inspected_on >= %s AND inspected_on <= %s group by location_val """,[i, startDate, currentDate])
                pendency_count_180 = cursor.fetchall()
                if (pendency_count_180 == None or pendency_count_180 == []):
                    pendency_count_180 = [0]  
                total_pendency_count_180.append(pendency_count_180)

                cursor.execute(
                        """ select count (distinct item_no) FROM public.insp_marked_sumry where location_val = %s and marked_officer_status in (1, 2)  AND inspected_on >= %s AND inspected_on <= %s group by location_val """,[i, startDate, currentDate])
                pending_count = cursor.fetchall()            
                if (pending_count == None or pending_count == []):
                    pending_count = [0]  
                total_pending.append(pending_count)

                
                cursor.execute(
                        """select count (distinct item_no) FROM public.insp_marked_sumry where location_val = %s and marked_officer_status in (1, 2) and overdue_flag = 1  AND inspected_on >= %s AND inspected_on <= %s group by location_val;""",[i, startDate, currentDate])
                overdue_count = cursor.fetchall()                      
                if (overdue_count == None or overdue_count == []):
                    overdue_count = [0]  
                total_overdue.append(overdue_count)

                cursor.execute(
                        """ 
                    SELECT count(distinct inspection_no) as total_inspection
                    FROM public.insp_marked_sumry where location_val = %s AND inspected_on >= %s AND inspected_on <= %s 
					GROUP BY location_val """,[i, startDate, currentDate])
                inspection = cursor.fetchall()                      
                if (inspection == None or inspection == []):
                    inspection = [0]  
                total_inspection.append(inspection)

                cursor.execute(
                        """  
                    SELECT count(distinct item_no) as total_item
                    FROM public.insp_marked_sumry
                    WHERE location_val = %s and marked_officer_status in (1, 2, 3,4) AND inspected_on >= %s AND inspected_on <= %s 
					GROUP BY  location_val """,[i, startDate, currentDate])
                items = cursor.fetchall()                      
                if (items == None or items == []):
                    items = [0]  
                total_items.append(items)                
                cursor.execute(
                    """SELECT count(distinct inspection_no) FROM public.insp_marked_sumry where location_val = %s  and  marked_officer_status in (1, 2)  AND inspected_on >= %s AND inspected_on <= %s group by location_val
                    """,[i, startDate, currentDate]
                )
                inspPending = cursor.fetchall()
                if (inspPending == None or inspPending == []):
                    inspPending = [0]    
                insptotal_pending.append(inspPending)
                cursor.execute(
                    """select count (distinct inspection_no) FROM public.insp_marked_sumry where location_val = %s  and marked_officer_status in (1, 2) and overdue_flag = 1  AND inspected_on >= %s AND inspected_on <= %s  group by location_val;
                    """,[i, startDate, currentDate]
                )
                inspOverdue = cursor.fetchall()
                if (inspOverdue == None or inspOverdue == []):
                    inspOverdue = [0]    
                insptotal_overdue.append(inspOverdue)

                
                cursor.execute(
                        """select count (distinct item_no) FROM public.insp_marked_sumry 
                            where location_val = %s and marked_officer_status in (1, 2, 3, 4)  AND inspected_on >= %s AND inspected_on <= %s 
                            and ps = 1  group by marked_hq_id;
                        """,[i, startDate, currentDate]
                )
                p = cursor.fetchall()
                if (p == None or p == []):
                    p = [0]    
                ps.append(p)
                cursor.execute(
                        """select count (distinct item_no) FROM public.insp_marked_sumry 
                            where location_val = %s and marked_officer_status in (1, 2, 3, 4) AND inspected_on >= %s AND inspected_on <= %s 
                            and es = 1  group by marked_hq_id;
                        """,[i, startDate, currentDate]
                )
                e = cursor.fetchall()
                if (e == None or e == []):
                    e = [0]    
                es.append(e)

                cursor.execute(
                        """select count (distinct item_no) FROM public.insp_marked_sumry 
                            where location_val = %s and marked_officer_status in (1, 2, 3, 4) AND inspected_on >= %s AND inspected_on <= %s 
                            and oth = 1  group by marked_hq_id;
                        """,[i, startDate, currentDate]
                )
                o = cursor.fetchall()
                if (o == None or o == []):
                    o = [0]    
                oth.append(o)
                cursor.execute(
                        """select count (distinct item_no) FROM public.insp_marked_sumry 
                            where location_val = %s and marked_officer_status in (1, 2, 3, 4) AND inspected_on >= %s AND inspected_on <= %s 
                            and ni = 1  group by marked_hq_id;
                        """,[i, startDate, currentDate]
                )
                n = cursor.fetchall()
                if (n == None or n == []):
                    n = [0]    
                ni.append(n)

                
                cursor.execute(
                        """select count (distinct item_no) FROM public.insp_marked_sumry 
                            where location_val = %s and marked_officer_status in (1, 2, 3, 4) AND inspected_on >= %s AND inspected_on <= %s 
                            and si = 1  group by marked_hq_id;
                        """,[i, startDate, currentDate]
                )
                s = cursor.fetchall()
                if (s == None or s == []):
                    s = [0]    
                si.append(s)
                cursor.execute(
                        """ select count (distinct item_no) FROM public.insp_marked_sumry 
                            where location_val = %s and marked_officer_status in (1, 2, 3, 4) AND inspected_on >= %s AND inspected_on <= %s
                            and di = 1  group by marked_hq_id;
                        """,[i, startDate, currentDate]
                )
                d = cursor.fetchall()
                if (d == None or d == []):
                    d = [0]    
                di.append(d)
                cursor.execute(
                        """ select count (distinct item_no) FROM public.insp_marked_sumry 
                            where location_val = %s and marked_officer_status in (1, 2, 3, 4) AND inspected_on >= %s AND inspected_on <= %s 
                            and ri = 1  group by marked_hq_id;
                        """,[i, startDate, currentDate]
                )
                r = cursor.fetchall()
                if (r == None or r == []):
                    r = [0]    
                ri.append(r)

                cursor.execute(
                        """ select count (distinct item_no) FROM public.insp_marked_sumry 
                            where location_val = %s and marked_officer_status in (1, 2, 3, 4) AND inspected_on >= %s AND inspected_on <= %s 
                            and priority > 0  group by marked_hq_id;
                        """,[i, startDate, currentDate]
                )
                prior = cursor.fetchall()
                if (prior == None or prior == []):
                    prior = [0]    
                priority.append(prior)

            context = {
                'rly_id':rlycode,
                'rlycode':rlycode,

                'field_name': field_name,
                'radioVal':radioVal,
                'radioVal1':radioVal1,
                'tdata': rlycode,
                'total_pendency_count_7':total_pendency_count_7,
                'total_pendency_count_30':total_pendency_count_30,
                'total_pendency_count_90':total_pendency_count_90,
                'total_pendency_count_180':total_pendency_count_180,
                'total_inspection':total_inspection,
                'total_items':total_items,
                'total_pending':total_pending,
                'total_overdue':total_overdue,                
                'insptotal_pending':insptotal_pending,
                'insptotal_overdue':insptotal_overdue,
                    
                'ps':ps,
                'es':es,
                'oth':oth, 
                'ni':ni,
                'si':si,
                'di':di,
                'ri':ri, 
                'priority':priority,
                }
            request.session['vontext'] = context
            return JsonResponse(context, safe = False)

        
        if (radioVal2 is not None and radioVal == 'SEM' ) : #section station railway others
            print('STM dropdown worked')
            field_name = 'UNIT'
            rly_id = '#'            

            radioVal2 = try_convert_to_int(radioVal2)
            print('type RADIO VAL 2s',type(radioVal2))
            cursor = connection.cursor()
            
        
            cursor.execute(""" SELECT location_val FROM public.insp_marked_sumry
                WHERE (marked_div_id = %s or marked_hq_id = %s) AND location_table = %s  group by location_val
            """, [radioVal2, radioVal2, radioVal])
            rlycode = cursor.fetchall()   #location_val    SELECT * FROM public.insp_marked_sumry where location_val = %s and location_table = 'STM' group by location_val
            print('rlycode', rlycode)
              # Close the cursor after using it

            for i in rlycode:#location_val 
                radioVal1.append(radioVal)
                cursor.execute(""" select count(distinct item_no) FROM public.insp_marked_sumry where location_val = %s and pendency_days > 7  and marked_officer_status in (1,2)  AND inspected_on >= %s AND inspected_on <= %s  group by location_val""",[i, startDate, currentDate])
                        
                pendency_count_7 = cursor.fetchall()     
                if (pendency_count_7 == None or pendency_count_7 == []):
                    pendency_count_7 = [0]     
                total_pendency_count_7.append(pendency_count_7)
                
                cursor.execute(
                    """select count(distinct item_no) FROM public.insp_marked_sumry where location_val = %s and pendency_days > 30  and marked_officer_status in (1,2)  AND inspected_on >= %s AND inspected_on <= %s  group by location_val""",[i, startDate, currentDate])
                pendency_count_30 = cursor.fetchall()
                if (pendency_count_30 == None or pendency_count_30 == []):
                    pendency_count_30 = [0]    
                total_pendency_count_30.append(pendency_count_30)

                
                cursor.execute(
                        """select count(distinct item_no) FROM public.insp_marked_sumry where location_val = %s and pendency_days > 90  and marked_officer_status in (1,2)  AND inspected_on >= %s AND inspected_on <= %s group by location_val """,[i, startDate, currentDate])
                pendency_count_90 = cursor.fetchall()
                if (pendency_count_90 == None or pendency_count_90 == []):
                    pendency_count_90 = [0]    
                total_pendency_count_90.append(pendency_count_90)


                cursor.execute(
                        """select count(distinct item_no) FROM public.insp_marked_sumry where location_val = %s and pendency_days > 180 and marked_officer_status in (1,2)  AND inspected_on >= %s AND inspected_on <= %s group by location_val """,[i, startDate, currentDate])
                pendency_count_180 = cursor.fetchall()
                if (pendency_count_180 == None or pendency_count_180 == []):
                    pendency_count_180 = [0]  
                total_pendency_count_180.append(pendency_count_180)

                cursor.execute(
                        """ select count (distinct item_no) FROM public.insp_marked_sumry where location_val = %s and marked_officer_status in (1, 2)  AND inspected_on >= %s AND inspected_on <= %s group by location_val """,[i, startDate, currentDate])
                pending_count = cursor.fetchall()            
                if (pending_count == None or pending_count == []):
                    pending_count = [0]  
                total_pending.append(pending_count)

                
                cursor.execute(
                        """select count (distinct item_no) FROM public.insp_marked_sumry where location_val = %s and marked_officer_status in (1, 2) and overdue_flag = 1  AND inspected_on >= %s AND inspected_on <= %s group by location_val;""",[i, startDate, currentDate])
                overdue_count = cursor.fetchall()                      
                if (overdue_count == None or overdue_count == []):
                    overdue_count = [0]  
                total_overdue.append(overdue_count)

                cursor.execute(
                        """ 
                    SELECT count(distinct inspection_no) as total_inspection
                    FROM public.insp_marked_sumry where location_val = %s AND inspected_on >= %s AND inspected_on <= %s 
					GROUP BY location_val """,[i, startDate, currentDate])
                inspection = cursor.fetchall()                      
                if (inspection == None or inspection == []):
                    inspection = [0]  
                total_inspection.append(inspection)

                cursor.execute(
                        """  
                    SELECT count(distinct item_no) as total_item
                    FROM public.insp_marked_sumry
                    WHERE location_val = %s and marked_officer_status in (1, 2, 3,4) AND inspected_on >= %s AND inspected_on <= %s 
					GROUP BY  location_val """,[i, startDate, currentDate])
                items = cursor.fetchall()                      
                if (items == None or items == []):
                    items = [0]  
                total_items.append(items)                
                cursor.execute(
                    """SELECT count(distinct inspection_no) FROM public.insp_marked_sumry where location_val = %s  and  marked_officer_status in (1, 2)  AND inspected_on >= %s AND inspected_on <= %s group by location_val
                    """,[i, startDate, currentDate]
                )
                inspPending = cursor.fetchall()
                if (inspPending == None or inspPending == []):
                    inspPending = [0]    
                insptotal_pending.append(inspPending)
                cursor.execute(
                    """select count (distinct inspection_no) FROM public.insp_marked_sumry where location_val = %s  and marked_officer_status in (1, 2) and overdue_flag = 1  AND inspected_on >= %s AND inspected_on <= %s  group by location_val;
                    """,[i, startDate, currentDate]
                )
                inspOverdue = cursor.fetchall()
                if (inspOverdue == None or inspOverdue == []):
                    inspOverdue = [0]    
                insptotal_overdue.append(inspOverdue)

                
                cursor.execute(
                        """select count (distinct item_no) FROM public.insp_marked_sumry 
                            where location_val = %s and marked_officer_status in (1, 2, 3, 4)  AND inspected_on >= %s AND inspected_on <= %s 
                            and ps = 1  group by marked_hq_id;
                        """,[i, startDate, currentDate]
                )
                p = cursor.fetchall()
                if (p == None or p == []):
                    p = [0]    
                ps.append(p)
                cursor.execute(
                        """select count (distinct item_no) FROM public.insp_marked_sumry 
                            where location_val = %s and marked_officer_status in (1, 2, 3, 4) AND inspected_on >= %s AND inspected_on <= %s 
                            and es = 1  group by marked_hq_id;
                        """,[i, startDate, currentDate]
                )
                e = cursor.fetchall()
                if (e == None or e == []):
                    e = [0]    
                es.append(e)

                cursor.execute(
                        """select count (distinct item_no) FROM public.insp_marked_sumry 
                            where location_val = %s and marked_officer_status in (1, 2, 3, 4) AND inspected_on >= %s AND inspected_on <= %s 
                            and oth = 1  group by marked_hq_id;
                        """,[i, startDate, currentDate]
                )
                o = cursor.fetchall()
                if (o == None or o == []):
                    o = [0]    
                oth.append(o)
                cursor.execute(
                        """select count (distinct item_no) FROM public.insp_marked_sumry 
                            where location_val = %s and marked_officer_status in (1, 2, 3, 4) AND inspected_on >= %s AND inspected_on <= %s 
                            and ni = 1  group by marked_hq_id;
                        """,[i, startDate, currentDate]
                )
                n = cursor.fetchall()
                if (n == None or n == []):
                    n = [0]    
                ni.append(n)

                
                cursor.execute(
                        """select count (distinct item_no) FROM public.insp_marked_sumry 
                            where location_val = %s and marked_officer_status in (1, 2, 3, 4) AND inspected_on >= %s AND inspected_on <= %s 
                            and si = 1  group by marked_hq_id;
                        """,[i, startDate, currentDate]
                )
                s = cursor.fetchall()
                if (s == None or s == []):
                    s = [0]    
                si.append(s)
                cursor.execute(
                        """ select count (distinct item_no) FROM public.insp_marked_sumry 
                            where location_val = %s and marked_officer_status in (1, 2, 3, 4) AND inspected_on >= %s AND inspected_on <= %s
                            and di = 1  group by marked_hq_id;
                        """,[i, startDate, currentDate]
                )
                d = cursor.fetchall()
                if (d == None or d == []):
                    d = [0]    
                di.append(d)
                cursor.execute(
                        """ select count (distinct item_no) FROM public.insp_marked_sumry 
                            where location_val = %s and marked_officer_status in (1, 2, 3, 4) AND inspected_on >= %s AND inspected_on <= %s 
                            and ri = 1  group by marked_hq_id;
                        """,[i, startDate, currentDate]
                )
                r = cursor.fetchall()
                if (r == None or r == []):
                    r = [0]    
                ri.append(r)

                cursor.execute(
                        """ select count (distinct item_no) FROM public.insp_marked_sumry 
                            where location_val = %s and marked_officer_status in (1, 2, 3, 4) AND inspected_on >= %s AND inspected_on <= %s 
                            and priority > 0  group by marked_hq_id;
                        """,[i, startDate, currentDate]
                )
                prior = cursor.fetchall()
                if (prior == None or prior == []):
                    prior = [0]    
                priority.append(prior)

            context = {
                'rly_id':rlycode,
                'rlycode':rlycode,

                'field_name': field_name,
                'radioVal':radioVal,
                'radioVal1':radioVal1,
                'tdata': rlycode,
                'total_pendency_count_7':total_pendency_count_7,
                'total_pendency_count_30':total_pendency_count_30,
                'total_pendency_count_90':total_pendency_count_90,
                'total_pendency_count_180':total_pendency_count_180,
                'total_inspection':total_inspection,
                'total_items':total_items,
                'total_pending':total_pending,
                'total_overdue':total_overdue,                
                'insptotal_pending':insptotal_pending,
                'insptotal_overdue':insptotal_overdue,
                    
                'ps':ps,
                'es':es,
                'oth':oth, 
                'ni':ni,
                'si':si,
                'di':di,
                'ri':ri, 
                'priority':priority,
                }
            request.session['vontext'] = context
            return JsonResponse(context, safe = False)

         
        if (radioVal2 is not None and radioVal == 'TRN' ) : #section station railway others
            print('STM dropdown worked')
            field_name = 'UNIT'
            rly_id = '#'            

            radioVal2 = try_convert_to_int(radioVal2)
            print('type RADIO VAL 2s',type(radioVal2))
            cursor = connection.cursor()
            
        
            cursor.execute(""" SELECT location_val FROM public.insp_marked_sumry
                WHERE (marked_div_id = %s or marked_hq_id = %s) AND location_table = %s  group by location_val
            """, [radioVal2, radioVal2, radioVal])
            rlycode = cursor.fetchall()   #location_val    SELECT * FROM public.insp_marked_sumry where location_val = %s and location_table = 'STM' group by location_val
            print('rlycode', rlycode)
              # Close the cursor after using it

            for i in rlycode:#location_val 
                radioVal1.append(radioVal)
                cursor.execute(""" select count(distinct item_no) FROM public.insp_marked_sumry where location_val = %s and pendency_days > 7  and marked_officer_status in (1,2)  AND inspected_on >= %s AND inspected_on <= %s  group by location_val""",[i, startDate, currentDate])
                        
                pendency_count_7 = cursor.fetchall()     
                if (pendency_count_7 == None or pendency_count_7 == []):
                    pendency_count_7 = [0]     
                total_pendency_count_7.append(pendency_count_7)
                
                cursor.execute(
                    """select count(distinct item_no) FROM public.insp_marked_sumry where location_val = %s and pendency_days > 30  and marked_officer_status in (1,2)  AND inspected_on >= %s AND inspected_on <= %s  group by location_val""",[i, startDate, currentDate])
                pendency_count_30 = cursor.fetchall()
                if (pendency_count_30 == None or pendency_count_30 == []):
                    pendency_count_30 = [0]    
                total_pendency_count_30.append(pendency_count_30)

                
                cursor.execute(
                        """select count(distinct item_no) FROM public.insp_marked_sumry where location_val = %s and pendency_days > 90  and marked_officer_status in (1,2)  AND inspected_on >= %s AND inspected_on <= %s group by location_val """,[i, startDate, currentDate])
                pendency_count_90 = cursor.fetchall()
                if (pendency_count_90 == None or pendency_count_90 == []):
                    pendency_count_90 = [0]    
                total_pendency_count_90.append(pendency_count_90)


                cursor.execute(
                        """select count(distinct item_no) FROM public.insp_marked_sumry where location_val = %s and pendency_days > 180 and marked_officer_status in (1,2)  AND inspected_on >= %s AND inspected_on <= %s group by location_val """,[i, startDate, currentDate])
                pendency_count_180 = cursor.fetchall()
                if (pendency_count_180 == None or pendency_count_180 == []):
                    pendency_count_180 = [0]  
                total_pendency_count_180.append(pendency_count_180)

                cursor.execute(
                        """ select count (distinct item_no) FROM public.insp_marked_sumry where location_val = %s and marked_officer_status in (1, 2)  AND inspected_on >= %s AND inspected_on <= %s group by location_val """,[i, startDate, currentDate])
                pending_count = cursor.fetchall()            
                if (pending_count == None or pending_count == []):
                    pending_count = [0]  
                total_pending.append(pending_count)

                
                cursor.execute(
                        """select count (distinct item_no) FROM public.insp_marked_sumry where location_val = %s and marked_officer_status in (1, 2) and overdue_flag = 1  AND inspected_on >= %s AND inspected_on <= %s group by location_val;""",[i, startDate, currentDate])
                overdue_count = cursor.fetchall()                      
                if (overdue_count == None or overdue_count == []):
                    overdue_count = [0]  
                total_overdue.append(overdue_count)

                cursor.execute(
                        """ 
                    SELECT count(distinct inspection_no) as total_inspection
                    FROM public.insp_marked_sumry where location_val = %s AND inspected_on >= %s AND inspected_on <= %s 
					GROUP BY location_val """,[i, startDate, currentDate])
                inspection = cursor.fetchall()                      
                if (inspection == None or inspection == []):
                    inspection = [0]  
                total_inspection.append(inspection)

                cursor.execute(
                        """  
                    SELECT count(distinct item_no) as total_item
                    FROM public.insp_marked_sumry
                    WHERE location_val = %s and marked_officer_status in (1, 2, 3,4) AND inspected_on >= %s AND inspected_on <= %s 
					GROUP BY  location_val """,[i, startDate, currentDate])
                items = cursor.fetchall()                      
                if (items == None or items == []):
                    items = [0]  
                total_items.append(items)                
                cursor.execute(
                    """SELECT count(distinct inspection_no) FROM public.insp_marked_sumry where location_val = %s  and  marked_officer_status in (1, 2)  AND inspected_on >= %s AND inspected_on <= %s group by location_val
                    """,[i, startDate, currentDate]
                )
                inspPending = cursor.fetchall()
                if (inspPending == None or inspPending == []):
                    inspPending = [0]    
                insptotal_pending.append(inspPending)
                cursor.execute(
                    """select count (distinct inspection_no) FROM public.insp_marked_sumry where location_val = %s  and marked_officer_status in (1, 2) and overdue_flag = 1  AND inspected_on >= %s AND inspected_on <= %s  group by location_val;
                    """,[i, startDate, currentDate]
                )
                inspOverdue = cursor.fetchall()
                if (inspOverdue == None or inspOverdue == []):
                    inspOverdue = [0]    
                insptotal_overdue.append(inspOverdue)

                
                cursor.execute(
                        """select count (distinct item_no) FROM public.insp_marked_sumry 
                            where location_val = %s and marked_officer_status in (1, 2, 3, 4)  AND inspected_on >= %s AND inspected_on <= %s 
                            and ps = 1  group by marked_hq_id;
                        """,[i, startDate, currentDate]
                )
                p = cursor.fetchall()
                if (p == None or p == []):
                    p = [0]    
                ps.append(p)
                cursor.execute(
                        """select count (distinct item_no) FROM public.insp_marked_sumry 
                            where location_val = %s and marked_officer_status in (1, 2, 3, 4) AND inspected_on >= %s AND inspected_on <= %s 
                            and es = 1  group by marked_hq_id;
                        """,[i, startDate, currentDate]
                )
                e = cursor.fetchall()
                if (e == None or e == []):
                    e = [0]    
                es.append(e)

                cursor.execute(
                        """select count (distinct item_no) FROM public.insp_marked_sumry 
                            where location_val = %s and marked_officer_status in (1, 2, 3, 4) AND inspected_on >= %s AND inspected_on <= %s 
                            and oth = 1  group by marked_hq_id;
                        """,[i, startDate, currentDate]
                )
                o = cursor.fetchall()
                if (o == None or o == []):
                    o = [0]    
                oth.append(o)
                cursor.execute(
                        """select count (distinct item_no) FROM public.insp_marked_sumry 
                            where location_val = %s and marked_officer_status in (1, 2, 3, 4) AND inspected_on >= %s AND inspected_on <= %s 
                            and ni = 1  group by marked_hq_id;
                        """,[i, startDate, currentDate]
                )
                n = cursor.fetchall()
                if (n == None or n == []):
                    n = [0]    
                ni.append(n)

                
                cursor.execute(
                        """select count (distinct item_no) FROM public.insp_marked_sumry 
                            where location_val = %s and marked_officer_status in (1, 2, 3, 4) AND inspected_on >= %s AND inspected_on <= %s 
                            and si = 1  group by marked_hq_id;
                        """,[i, startDate, currentDate]
                )
                s = cursor.fetchall()
                if (s == None or s == []):
                    s = [0]    
                si.append(s)
                cursor.execute(
                        """ select count (distinct item_no) FROM public.insp_marked_sumry 
                            where location_val = %s and marked_officer_status in (1, 2, 3, 4) AND inspected_on >= %s AND inspected_on <= %s
                            and di = 1  group by marked_hq_id;
                        """,[i, startDate, currentDate]
                )
                d = cursor.fetchall()
                if (d == None or d == []):
                    d = [0]    
                di.append(d)
                cursor.execute(
                        """ select count (distinct item_no) FROM public.insp_marked_sumry 
                            where location_val = %s and marked_officer_status in (1, 2, 3, 4) AND inspected_on >= %s AND inspected_on <= %s 
                            and ri = 1  group by marked_hq_id;
                        """,[i, startDate, currentDate]
                )
                r = cursor.fetchall()
                if (r == None or r == []):
                    r = [0]    
                ri.append(r)

                cursor.execute(
                        """ select count (distinct item_no) FROM public.insp_marked_sumry 
                            where location_val = %s and marked_officer_status in (1, 2, 3, 4) AND inspected_on >= %s AND inspected_on <= %s 
                            and priority > 0  group by marked_hq_id;
                        """,[i, startDate, currentDate]
                )
                prior = cursor.fetchall()
                if (prior == None or prior == []):
                    prior = [0]    
                priority.append(prior)
# =====================
                
                cursor.execute(
                        """ select distinct item_no FROM public.insp_marked_sumry where location_val = %s and marked_officer_status in (1, 2)  AND inspected_on >= %s AND inspected_on <= %s group by location_val, item_no """,[i, startDate, currentDate])
                pending_count = cursor.fetchall()            
                if (pending_count == None or pending_count == []):
                    pending_count = [0]  
                Data_total_pending.append(pending_count)

                
                cursor.execute(
                        """select distinct item_no FROM public.insp_marked_sumry where location_val = %s and marked_officer_status in (1, 2) and overdue_flag = 1  AND inspected_on >= %s AND inspected_on <= %s group by location_val, item_no;""",[i, startDate, currentDate])
                overdue_count = cursor.fetchall()                      
                if (overdue_count == None or overdue_count == []):
                    overdue_count = [0]  
                Data_total_overdue.append(overdue_count)

                cursor.execute(
                        """ 
                    SELECT distinct inspection_no as total_inspection
                    FROM public.insp_marked_sumry where location_val = %s AND inspected_on >= %s AND inspected_on <= %s 
					GROUP BY location_val, inspection_no """,[i, startDate, currentDate])
                inspection = cursor.fetchall()                      
                if (inspection == None or inspection == []):
                    inspection = [0]  
                Data_total_inspection.append(inspection)

                cursor.execute(
                        """  
                    SELECT distinct item_no as total_item
                    FROM public.insp_marked_sumry
                    WHERE location_val = %s and marked_officer_status in (1, 2, 3,4) AND inspected_on >= %s AND inspected_on <= %s 
					GROUP BY  location_val, item_no """,[i, startDate, currentDate])
                items = cursor.fetchall()                      
                if (items == None or items == []):
                    items = [0]  
                Data_total_items.append(items)                
                cursor.execute(
                    """SELECT distinct inspection_no FROM public.insp_marked_sumry where location_val = %s  and  marked_officer_status in (1, 2)  AND inspected_on >= %s AND inspected_on <= %s group by location_val, inspection_no
                    """,[i, startDate, currentDate]
                )
                inspPending = cursor.fetchall()
                if (inspPending == None or inspPending == []):
                    inspPending = [0]    
                Data_insptotal_pending.append(inspPending)
                cursor.execute(
                    """select distinct inspection_no FROM public.insp_marked_sumry where location_val = %s  and marked_officer_status in (1, 2) and overdue_flag = 1  AND inspected_on >= %s AND inspected_on <= %s  group by location_val, inspection_no;
                    """,[i, startDate, currentDate]
                )
                inspOverdue = cursor.fetchall()
                if (inspOverdue == None or inspOverdue == []):
                    inspOverdue = [0]    
                Data_insptotal_overdue.append(inspOverdue)

            context = {
                'rly_id':rlycode,
                'rlycode':rlycode,

                'field_name': field_name,
                'radioVal':radioVal,
                'radioVal1':radioVal1,
                'tdata': rlycode,
                'total_pendency_count_7':total_pendency_count_7,
                'total_pendency_count_30':total_pendency_count_30,
                'total_pendency_count_90':total_pendency_count_90,
                'total_pendency_count_180':total_pendency_count_180,
                'total_inspection':total_inspection,
                'total_items':total_items,
                'total_pending':total_pending,
                'total_overdue':total_overdue,                
                'insptotal_pending':insptotal_pending,
                'insptotal_overdue':insptotal_overdue,
                    
                'ps':ps,
                'es':es,
                'oth':oth, 
                'ni':ni,
                'si':si,
                'di':di,
                'ri':ri, 
                'priority':priority,

                
                'Data_total_inspection':Data_total_inspection, 
                'Data_total_pending':Data_total_pending,
                'Data_total_overdue':Data_total_overdue,
                'Data_total_items':Data_total_items,
                'Data_insptotal_pending':Data_insptotal_pending,
                'Data_insptotal_overdue':Data_insptotal_overdue,
                'Data_priority':Data_priority,

                }
            request.session['vontext'] = context
            return JsonResponse(context, safe = False)


        if (radioVal2 is not None and radioVal == 'OTHERS' ) : #section station railway others
            print('STM dropdown worked')
            field_name = 'UNIT'
            rly_id = '#'            

            radioVal2 = try_convert_to_int(radioVal2)
            print('type RADIO VAL 2s',type(radioVal2))
            cursor = connection.cursor()
            
        
            cursor.execute(""" SELECT location_val FROM public.insp_marked_sumry
                WHERE (marked_div_id = %s or marked_hq_id = %s) AND location_table in ('DLS', 'HOS', 'ORL', 'RRM')  group by location_val
            """, [radioVal2, radioVal2])
            rlycode = cursor.fetchall()   #location_val    SELECT * FROM public.insp_marked_sumry where location_val = %s and location_table = 'STM' group by location_val
            print('rlycode', rlycode)
              # Close the cursor after using it

            for i in rlycode:#location_val 
                radioVal1.append(radioVal)
                cursor.execute(""" select count(distinct item_no) FROM public.insp_marked_sumry where location_val = %s and pendency_days > 7  and marked_officer_status in (1,2)  AND inspected_on >= %s AND inspected_on <= %s  group by location_val""",[i, startDate, currentDate])
                        
                pendency_count_7 = cursor.fetchall()     
                if (pendency_count_7 == None or pendency_count_7 == []):
                    pendency_count_7 = [0]     
                total_pendency_count_7.append(pendency_count_7)
                
                cursor.execute(
                    """select count(distinct item_no) FROM public.insp_marked_sumry where location_val = %s and pendency_days > 30  and marked_officer_status in (1,2)  AND inspected_on >= %s AND inspected_on <= %s  group by location_val""",[i, startDate, currentDate])
                pendency_count_30 = cursor.fetchall()
                if (pendency_count_30 == None or pendency_count_30 == []):
                    pendency_count_30 = [0]    
                total_pendency_count_30.append(pendency_count_30)

                
                cursor.execute(
                        """select count(distinct item_no) FROM public.insp_marked_sumry where location_val = %s and pendency_days > 90  and marked_officer_status in (1,2)  AND inspected_on >= %s AND inspected_on <= %s group by location_val """,[i, startDate, currentDate])
                pendency_count_90 = cursor.fetchall()
                if (pendency_count_90 == None or pendency_count_90 == []):
                    pendency_count_90 = [0]    
                total_pendency_count_90.append(pendency_count_90)


                cursor.execute(
                        """select count(distinct item_no) FROM public.insp_marked_sumry where location_val = %s and pendency_days > 180 and marked_officer_status in (1,2)  AND inspected_on >= %s AND inspected_on <= %s group by location_val """,[i, startDate, currentDate])
                pendency_count_180 = cursor.fetchall()
                if (pendency_count_180 == None or pendency_count_180 == []):
                    pendency_count_180 = [0]  
                total_pendency_count_180.append(pendency_count_180)

                cursor.execute(
                        """ select count (distinct item_no) FROM public.insp_marked_sumry where location_val = %s and marked_officer_status in (1, 2)  AND inspected_on >= %s AND inspected_on <= %s group by location_val """,[i, startDate, currentDate])
                pending_count = cursor.fetchall()            
                if (pending_count == None or pending_count == []):
                    pending_count = [0]  
                total_pending.append(pending_count)

                
                cursor.execute(
                        """select count (distinct item_no) FROM public.insp_marked_sumry where location_val = %s and marked_officer_status in (1, 2) and overdue_flag = 1  AND inspected_on >= %s AND inspected_on <= %s group by location_val;""",[i, startDate, currentDate])
                overdue_count = cursor.fetchall()                      
                if (overdue_count == None or overdue_count == []):
                    overdue_count = [0]  
                total_overdue.append(overdue_count)

                cursor.execute(
                        """ 
                    SELECT count(distinct inspection_no) as total_inspection
                    FROM public.insp_marked_sumry where location_val = %s AND inspected_on >= %s AND inspected_on <= %s 
					GROUP BY location_val """,[i, startDate, currentDate])
                inspection = cursor.fetchall()                      
                if (inspection == None or inspection == []):
                    inspection = [0]  
                total_inspection.append(inspection)

                cursor.execute(
                        """  
                    SELECT count(distinct item_no) as total_item
                    FROM public.insp_marked_sumry
                    WHERE location_val = %s and marked_officer_status in (1, 2, 3,4) AND inspected_on >= %s AND inspected_on <= %s 
					GROUP BY  location_val """,[i, startDate, currentDate])
                items = cursor.fetchall()                      
                if (items == None or items == []):
                    items = [0]  
                total_items.append(items)                
                cursor.execute(
                    """SELECT count(distinct inspection_no) FROM public.insp_marked_sumry where location_val = %s  and  marked_officer_status in (1, 2)  AND inspected_on >= %s AND inspected_on <= %s group by location_val
                    """,[i, startDate, currentDate]
                )
                inspPending = cursor.fetchall()
                if (inspPending == None or inspPending == []):
                    inspPending = [0]    
                insptotal_pending.append(inspPending)
                cursor.execute(
                    """select count (distinct inspection_no) FROM public.insp_marked_sumry where location_val = %s  and marked_officer_status in (1, 2) and overdue_flag = 1  AND inspected_on >= %s AND inspected_on <= %s  group by location_val;
                    """,[i, startDate, currentDate]
                )
                inspOverdue = cursor.fetchall()
                if (inspOverdue == None or inspOverdue == []):
                    inspOverdue = [0]    
                insptotal_overdue.append(inspOverdue)

                
                cursor.execute(
                        """select count (distinct item_no) FROM public.insp_marked_sumry 
                            where location_val = %s and marked_officer_status in (1, 2, 3, 4)  AND inspected_on >= %s AND inspected_on <= %s 
                            and ps = 1  group by marked_hq_id;
                        """,[i, startDate, currentDate]
                )
                p = cursor.fetchall()
                if (p == None or p == []):
                    p = [0]    
                ps.append(p)
                cursor.execute(
                        """select count (distinct item_no) FROM public.insp_marked_sumry 
                            where location_val = %s and marked_officer_status in (1, 2, 3, 4) AND inspected_on >= %s AND inspected_on <= %s 
                            and es = 1  group by marked_hq_id;
                        """,[i, startDate, currentDate]
                )
                e = cursor.fetchall()
                if (e == None or e == []):
                    e = [0]    
                es.append(e)

                cursor.execute(
                        """select count (distinct item_no) FROM public.insp_marked_sumry 
                            where location_val = %s and marked_officer_status in (1, 2, 3, 4) AND inspected_on >= %s AND inspected_on <= %s 
                            and oth = 1  group by marked_hq_id;
                        """,[i, startDate, currentDate]
                )
                o = cursor.fetchall()
                if (o == None or o == []):
                    o = [0]    
                oth.append(o)
                cursor.execute(
                        """select count (distinct item_no) FROM public.insp_marked_sumry 
                            where location_val = %s and marked_officer_status in (1, 2, 3, 4) AND inspected_on >= %s AND inspected_on <= %s 
                            and ni = 1  group by marked_hq_id;
                        """,[i, startDate, currentDate]
                )
                n = cursor.fetchall()
                if (n == None or n == []):
                    n = [0]    
                ni.append(n)

                
                cursor.execute(
                        """select count (distinct item_no) FROM public.insp_marked_sumry 
                            where location_val = %s and marked_officer_status in (1, 2, 3, 4) AND inspected_on >= %s AND inspected_on <= %s 
                            and si = 1  group by marked_hq_id;
                        """,[i, startDate, currentDate]
                )
                s = cursor.fetchall()
                if (s == None or s == []):
                    s = [0]    
                si.append(s)
                cursor.execute(
                        """ select count (distinct item_no) FROM public.insp_marked_sumry 
                            where location_val = %s and marked_officer_status in (1, 2, 3, 4) AND inspected_on >= %s AND inspected_on <= %s
                            and di = 1  group by marked_hq_id;
                        """,[i, startDate, currentDate]
                )
                d = cursor.fetchall()
                if (d == None or d == []):
                    d = [0]    
                di.append(d)
                cursor.execute(
                        """ select count (distinct item_no) FROM public.insp_marked_sumry 
                            where location_val = %s and marked_officer_status in (1, 2, 3, 4) AND inspected_on >= %s AND inspected_on <= %s 
                            and ri = 1  group by marked_hq_id;
                        """,[i, startDate, currentDate]
                )
                r = cursor.fetchall()
                if (r == None or r == []):
                    r = [0]    
                ri.append(r)

                cursor.execute(
                        """ select count (distinct item_no) FROM public.insp_marked_sumry 
                            where location_val = %s and marked_officer_status in (1, 2, 3, 4) AND inspected_on >= %s AND inspected_on <= %s 
                            and priority > 0  group by marked_hq_id;
                        """,[i, startDate, currentDate]
                )
                prior = cursor.fetchall()
                if (prior == None or prior == []):
                    prior = [0]    
                priority.append(prior)

            context = {
                'rly_id':rlycode,
                'rlycode':rlycode,

                'field_name': field_name,
                'radioVal':radioVal,
                'radioVal1':radioVal1,
                'tdata': rlycode,
                'total_pendency_count_7':total_pendency_count_7,
                'total_pendency_count_30':total_pendency_count_30,
                'total_pendency_count_90':total_pendency_count_90,
                'total_pendency_count_180':total_pendency_count_180,
                'total_inspection':total_inspection,
                'total_items':total_items,
                'total_pending':total_pending,
                'total_overdue':total_overdue,                
                'insptotal_pending':insptotal_pending,
                'insptotal_overdue':insptotal_overdue,
                    
                'ps':ps,
                'es':es,
                'oth':oth, 
                'ni':ni,
                'si':si,
                'di':di,
                'ri':ri, 
                'priority':priority,
                }
            request.session['vontext'] = context
            return JsonResponse(context, safe = False)

        ###
        if (radioVal == 'STM' or radioVal =='SEM' or radioVal == 'TRN' ) : #section station railway
            field_name = 'UNIT'
            rly_id = '#'            

            cursor = connection.cursor()

            cursor.execute("""
                 SELECT distinct location_table FROM public.insp_marked_sumry where (marked_div_id = %s or marked_hq_id = %s) and location_table = %s;
                """,[rly_unit_code, rly_unit_code, radioVal])
            data = cursor.fetchall()

            cursor.execute(""" SELECT location_val FROM public.insp_marked_sumry
                WHERE (marked_div_id = %s or marked_hq_id = %s) AND location_table = %s  group by location_val
            """, [rly_unit_code, rly_unit_code, radioVal])
                                
            rlycode = cursor.fetchall()   #location_val    SELECT * FROM public.insp_marked_sumry where location_val = %s and location_table = 'STM' group by location_val
            
              # Close the cursor after using it

            for i in rlycode:#location_val 
                radioVal1.append(radioVal)
                cursor.execute(""" select count(distinct item_no) FROM public.insp_marked_sumry where location_val = %s and pendency_days > 7  and marked_officer_status in (1,2)  AND inspected_on >= %s AND inspected_on <= %s  group by location_val""",[i, startDate, currentDate])
                        
                pendency_count_7 = cursor.fetchall()     
                if (pendency_count_7 == None or pendency_count_7 == []):
                    pendency_count_7 = [0]     
                total_pendency_count_7.append(pendency_count_7)
                
                cursor.execute(
                    """select count(distinct item_no) FROM public.insp_marked_sumry where location_val = %s and pendency_days > 30  and marked_officer_status in (1,2) AND inspected_on >= %s AND inspected_on <= %s  group by location_val""",[i, startDate, currentDate])
                pendency_count_30 = cursor.fetchall()
                if (pendency_count_30 == None or pendency_count_30 == []):
                    pendency_count_30 = [0]    
                total_pendency_count_30.append(pendency_count_30)

                
                cursor.execute(
                        """select count(distinct item_no) FROM public.insp_marked_sumry where location_val = %s and pendency_days > 90  and marked_officer_status in (1,2) AND inspected_on >= %s AND inspected_on <= %s  group by location_val """,[i, startDate, currentDate])
                pendency_count_90 = cursor.fetchall()
                if (pendency_count_90 == None or pendency_count_90 == []):
                    pendency_count_90 = [0]    
                total_pendency_count_90.append(pendency_count_90)


                cursor.execute(
                        """select count(distinct item_no) FROM public.insp_marked_sumry where location_val = %s and pendency_days > 180 and marked_officer_status in (1,2)  AND inspected_on >= %s AND inspected_on <= %s  group by location_val """,[i, startDate, currentDate])
                pendency_count_180 = cursor.fetchall()
                if (pendency_count_180 == None or pendency_count_180 == []):
                    pendency_count_180 = [0]  
                total_pendency_count_180.append(pendency_count_180)

                cursor.execute(
                        """ select count (distinct item_no) FROM public.insp_marked_sumry where location_val = %s and marked_officer_status in (1, 2) 
                             AND inspected_on >= %s AND inspected_on <= %s group by location_val """,[i, startDate, currentDate])
                pending_count = cursor.fetchall()            
                if (pending_count == None or pending_count == []):
                    pending_count = [0]  
                total_pending.append(pending_count)

                
                cursor.execute(
                        """select count (distinct item_no) FROM public.insp_marked_sumry where location_val = %s and marked_officer_status in (1, 2) and overdue_flag = 1  AND inspected_on >= %s AND inspected_on <= %s group by location_val;""",[i, startDate, currentDate])
                overdue_count = cursor.fetchall()                      
                if (overdue_count == None or overdue_count == []):
                    overdue_count = [0]  
                total_overdue.append(overdue_count)

                cursor.execute(
                        """ 
                    SELECT count(distinct inspection_no) as total_inspection
                    FROM public.insp_marked_sumry
                    WHERE location_table=%s AND location_val = %s AND inspected_on >= %s AND inspected_on <= %s 
					GROUP BY location_val """,[radioVal, i, startDate, currentDate])
                inspection = cursor.fetchall()                      
                if (inspection == None or inspection == []):
                    inspection = [0]  
                total_inspection.append(inspection)

                cursor.execute(
                        """  
                    SELECT count(distinct item_no) as total_item
                    FROM public.insp_marked_sumry
                    WHERE location_table= %s AND location_val = %s and marked_officer_status in (1, 2, 3,4) AND inspected_on >= %s AND inspected_on <= %s 
					GROUP BY  location_val """,[radioVal, i, startDate, currentDate])
                items = cursor.fetchall()                      
                if (items == None or items == []):
                    items = [0]  
                total_items.append(items)                
                cursor.execute(
                    """SELECT count(distinct inspection_no) FROM public.insp_marked_sumry where location_table= %s AND location_val = %s  and  marked_officer_status in (1, 2) AND inspected_on >= %s AND inspected_on <= %s group by location_val
                    """,[radioVal, i, startDate, currentDate]
                )
                inspPending = cursor.fetchall()
                if (inspPending == None or inspPending == []):
                    inspPending = [0]    
                insptotal_pending.append(inspPending)
                cursor.execute(
                    """select count (distinct inspection_no) FROM public.insp_marked_sumry where location_table= %s AND location_val = %s  and marked_officer_status in (1, 2) and overdue_flag = 1 AND inspected_on >= %s AND inspected_on <= %s group by location_val;
                    """,[radioVal, i, startDate, currentDate]
                )
                inspOverdue = cursor.fetchall()
                if (inspOverdue == None or inspOverdue == []):
                    inspOverdue = [0]    
                insptotal_overdue.append(inspOverdue)

                    
                cursor.execute(
                        """select count (distinct item_no) FROM public.insp_marked_sumry 
                            where location_table= %s AND location_val = %s and marked_officer_status in (1, 2, 3, 4)  AND inspected_on >= %s AND inspected_on <= %s 
                            and ps = 1  group by marked_hq_id;
                        """,[radioVal, i, startDate, currentDate]
                )
                p = cursor.fetchall()
                if (p == None or p == []):
                    p = [0]    
                ps.append(p)
                cursor.execute(
                        """select count (distinct item_no) FROM public.insp_marked_sumry 
                            where location_table= %s AND location_val = %s and marked_officer_status in (1, 2, 3, 4) AND inspected_on >= %s AND inspected_on <= %s 
                            and es = 1  group by marked_hq_id;
                        """,[radioVal, i, startDate, currentDate]
                )
                e = cursor.fetchall()
                if (e == None or e == []):
                    e = [0]    
                es.append(e)

                cursor.execute(
                        """select count (distinct item_no) FROM public.insp_marked_sumry 
                            where location_table= %s AND location_val = %s and marked_officer_status in (1, 2, 3, 4) AND inspected_on >= %s AND inspected_on <= %s 
                            and oth = 1  group by marked_hq_id;
                        """,[radioVal, i, startDate, currentDate]
                )
                o = cursor.fetchall()
                if (o == None or o == []):
                    o = [0]    
                oth.append(o)
                cursor.execute(
                        """select count (distinct item_no) FROM public.insp_marked_sumry 
                            where location_table= %s AND location_val = %s and marked_officer_status in (1, 2, 3, 4) AND inspected_on >= %s AND inspected_on <= %s 
                            and ni = 1  group by marked_hq_id;
                        """,[radioVal, i, startDate, currentDate]
                )
                n = cursor.fetchall()
                if (n == None or n == []):
                    n = [0]    
                ni.append(n)

                
                cursor.execute(
                        """select count (distinct item_no) FROM public.insp_marked_sumry 
                            where location_table= %s AND location_val = %s and marked_officer_status in (1, 2, 3, 4) AND inspected_on >= %s AND inspected_on <= %s 
                            and si = 1  group by marked_hq_id;
                        """,[radioVal, i, startDate, currentDate]
                )
                s = cursor.fetchall()
                if (s == None or s == []):
                    s = [0]    
                si.append(s)
                cursor.execute(
                        """ select count (distinct item_no) FROM public.insp_marked_sumry 
                            where location_table= %s AND location_val = %s and marked_officer_status in (1, 2, 3, 4) AND inspected_on >= %s AND inspected_on <= %s
                            and di = 1  group by marked_hq_id;
                        """,[radioVal, i, startDate, currentDate]
                )
                d = cursor.fetchall()
                if (d == None or d == []):
                    d = [0]    
                di.append(d)
                cursor.execute(
                        """ select count (distinct item_no) FROM public.insp_marked_sumry 
                            where location_table= %s AND location_val = %s and marked_officer_status in (1, 2, 3, 4) AND inspected_on >= %s AND inspected_on <= %s 
                            and ri = 1  group by marked_hq_id;
                        """,[radioVal, i, startDate, currentDate]
                )
                r = cursor.fetchall()
                if (r == None or r == []):
                    r = [0]    
                ri.append(r)

                cursor.execute(
                        """ select count (distinct item_no) FROM public.insp_marked_sumry 
                            where location_table= %s AND location_val = %s and marked_officer_status in (1, 2, 3, 4) AND inspected_on >= %s AND inspected_on <= %s 
                            and priority > 0  group by marked_hq_id;
                        """,[radioVal, i, startDate, currentDate]
                )
                prior = cursor.fetchall()
                if (prior == None or prior == []):
                    prior = [0]    
                priority.append(prior)

# //////////////////

                cursor.execute(
                        """ select distinct item_no FROM public.insp_marked_sumry 
                            where location_table= %s AND location_val = %s and marked_officer_status in (1, 2, 3, 4) AND inspected_on >= %s AND inspected_on <= %s 
                            and priority > 0  group by marked_hq_id, item_no;
                        """,[radioVal, i, startDate, currentDate]
                )
                prior = cursor.fetchall()
                if (prior == None or prior == []):
                    prior = [0]    
                Data_priority.append(prior)
                
                cursor.execute(
                        """ select distinct item_no FROM public.insp_marked_sumry where location_val = %s and marked_officer_status in (1, 2) 
                             AND inspected_on >= %s AND inspected_on <= %s group by location_val, item_no """,[i, startDate, currentDate])
                pending_count = cursor.fetchall()            
                if (pending_count == None or pending_count == []):
                    pending_count = [0]  
                Data_total_pending.append(pending_count)

                
                cursor.execute(
                        """select distinct item_no FROM public.insp_marked_sumry where location_val = %s and marked_officer_status in (1, 2) and overdue_flag = 1  AND inspected_on >= %s AND inspected_on <= %s group by location_val, item_no;""",[i, startDate, currentDate])
                overdue_count = cursor.fetchall()                      
                if (overdue_count == None or overdue_count == []):
                    overdue_count = [0]  
                Data_total_overdue.append(overdue_count)

                cursor.execute(
                        """ 
                    SELECT distinct inspection_no as total_inspection
                    FROM public.insp_marked_sumry
                    WHERE location_table=%s AND location_val = %s AND inspected_on >= %s AND inspected_on <= %s 
					GROUP BY location_val, inspection_no """,[radioVal, i, startDate, currentDate])
                inspection = cursor.fetchall()                      
                if (inspection == None or inspection == []):
                    inspection = [0]  
                Data_total_inspection.append(inspection)

                cursor.execute(
                        """  
                    SELECT distinct item_no as total_item
                    FROM public.insp_marked_sumry
                    WHERE location_table= %s AND location_val = %s and marked_officer_status in (1, 2, 3,4) AND inspected_on >= %s AND inspected_on <= %s 
					GROUP BY  location_val, item_no """,[radioVal, i, startDate, currentDate])
                items = cursor.fetchall()                      
                if (items == None or items == []):
                    items = [0]  
                Data_total_items.append(items)                
                cursor.execute(
                    """SELECT distinct inspection_no FROM public.insp_marked_sumry where location_table= %s AND location_val = %s  and  marked_officer_status in (1, 2) AND inspected_on >= %s AND inspected_on <= %s group by location_val, inspection_no
                    """,[radioVal, i, startDate, currentDate]
                )
                inspPending = cursor.fetchall()
                if (inspPending == None or inspPending == []):
                    inspPending = [0]    
                Data_insptotal_pending.append(inspPending)
                cursor.execute(
                    """select distinct inspection_no FROM public.insp_marked_sumry where location_table= %s AND location_val = %s  and marked_officer_status in (1, 2) and overdue_flag = 1 AND inspected_on >= %s AND inspected_on <= %s group by location_val, inspection_no;
                    """,[radioVal, i, startDate, currentDate]
                )
                inspOverdue = cursor.fetchall()
                if (inspOverdue == None or inspOverdue == []):
                    inspOverdue = [0]    
                Data_insptotal_overdue.append(inspOverdue)


            context = {
                'rly_id':rlycode,
                'field_name': field_name,
                'radioVal':radioVal,
                'radioVal1':radioVal1,
                'rlycode':rlycode,

                'tdata': rlycode,
                'total_pendency_count_7':total_pendency_count_7,
                'total_pendency_count_30':total_pendency_count_30,
                'total_pendency_count_90':total_pendency_count_90,
                'total_pendency_count_180':total_pendency_count_180,
                'total_inspection':total_inspection,
                'total_items':total_items,
                'total_pending':total_pending,
                'total_overdue':total_overdue,                
                'insptotal_pending':insptotal_pending,
                'insptotal_overdue':insptotal_overdue,
                'ps':ps,
                'es':es,
                'oth':oth, 
                'ni':ni,
                'si':si,
                'di':di,
                'ri':ri, 
                'priority':priority,
                    
                'Data_total_inspection':Data_total_inspection, 
                'Data_total_pending':Data_total_pending,
                'Data_total_overdue':Data_total_overdue,
                'Data_total_items':Data_total_items,
                'Data_insptotal_pending':Data_insptotal_pending,
                'Data_insptotal_overdue':Data_insptotal_overdue,
                'Data_priority':Data_priority,

                
                }
            request.session['vontext'] = context
            return JsonResponse(context, safe = False)
        ###
        
        if (radioVal == 'OTHERS' ) : # Others        
            field_name = 'UNIT'

            cursor = connection.cursor()
            cursor.execute("""
                SELECT distinct location_table FROM public.insp_marked_sumry where (marked_div_id = %s or marked_hq_id = %s) and location_table in ('DLS', 'HOS', 'ORL', 'RRM');
            """,[rly_unit_code, rly_unit_code])
            data = cursor.fetchall()
            cursor.execute("""  select distinct location_val FROM public.insp_marked_sumry where (marked_div_id = %s or marked_hq_id = %s) and location_table in ('DLS', 'HOS', 'ORL', 'RRM');
                        """,[rly_unit_code, rly_unit_code])                    
            rlycode = cursor.fetchall()
            print('rlycode',rlycode)
    

            for i in rlycode:#location_val 
                radioVal1.append(radioVal)
                cursor.execute(""" select count(distinct item_no) FROM public.insp_marked_sumry where location_table in ('DLS', 'HOS', 'ORL', 'RRM') and location_val = %s and pendency_days > 7  and marked_officer_status in (1,2)  AND inspected_on >= %s AND inspected_on <= %s  group by location_val""",[i, startDate, currentDate])
                        
                pendency_count_7 = cursor.fetchall()     
                if (pendency_count_7 == None or pendency_count_7 == []):
                    pendency_count_7 = [0]     
                total_pendency_count_7.append(pendency_count_7)
                
                cursor.execute(
                    """select count(distinct item_no) FROM public.insp_marked_sumry where location_val = %s and pendency_days > 30  and marked_officer_status in (1,2) AND inspected_on >= %s AND inspected_on <= %s  group by location_val""",[i, startDate, currentDate])
                pendency_count_30 = cursor.fetchall()
                if (pendency_count_30 == None or pendency_count_30 == []):
                    pendency_count_30 = [0]    
                total_pendency_count_30.append(pendency_count_30)

                
                cursor.execute(
                        """select count(distinct item_no) FROM public.insp_marked_sumry where location_val = %s and pendency_days > 90  and marked_officer_status in (1,2) AND inspected_on >= %s AND inspected_on <= %s  group by location_val """,[i, startDate, currentDate])
                pendency_count_90 = cursor.fetchall()
                if (pendency_count_90 == None or pendency_count_90 == []):
                    pendency_count_90 = [0]    
                total_pendency_count_90.append(pendency_count_90)


                cursor.execute(
                        """select count(distinct item_no) FROM public.insp_marked_sumry where location_val = %s and pendency_days > 180 and marked_officer_status in (1,2)  AND inspected_on >= %s AND inspected_on <= %s  group by location_val """,[i, startDate, currentDate])
                pendency_count_180 = cursor.fetchall()
                if (pendency_count_180 == None or pendency_count_180 == []):
                    pendency_count_180 = [0]  
                total_pendency_count_180.append(pendency_count_180)

                cursor.execute(
                        """ select count (distinct item_no) FROM public.insp_marked_sumry where location_val = %s and marked_officer_status in (1, 2) 
                             AND inspected_on >= %s AND inspected_on <= %s group by location_val """,[i, startDate, currentDate])
                pending_count = cursor.fetchall()            
                if (pending_count == None or pending_count == []):
                    pending_count = [0]  
                total_pending.append(pending_count)

                
                cursor.execute(
                        """select count (distinct item_no) FROM public.insp_marked_sumry where location_val = %s and marked_officer_status in (1, 2) and overdue_flag = 1  AND inspected_on >= %s AND inspected_on <= %s group by location_val;""",[i, startDate, currentDate])
                overdue_count = cursor.fetchall()                      
                if (overdue_count == None or overdue_count == []):
                    overdue_count = [0]  
                total_overdue.append(overdue_count)

                cursor.execute(
                        """ 
                    SELECT count(distinct inspection_no) as total_inspection
                    FROM public.insp_marked_sumry
                    WHERE  location_table in ('DLS', 'HOS', 'ORL', 'RRM')  AND location_val = %s AND inspected_on >= %s AND inspected_on <= %s 
					GROUP BY location_val """,[i, startDate, currentDate])
                inspection = cursor.fetchall()                      
                if (inspection == None or inspection == []):
                    inspection = [0]  
                total_inspection.append(inspection)

                cursor.execute(
                        """  
                    SELECT count(distinct item_no) as total_item
                    FROM public.insp_marked_sumry
                    WHERE  location_table in ('DLS', 'HOS', 'ORL', 'RRM')  AND location_val = %s and marked_officer_status in (1, 2, 3,4) AND inspected_on >= %s AND inspected_on <= %s 
					GROUP BY  location_val """,[i, startDate, currentDate])
                items = cursor.fetchall()                      
                if (items == None or items == []):
                    items = [0]  
                total_items.append(items)                
                cursor.execute(
                    """SELECT count(distinct inspection_no) FROM public.insp_marked_sumry where  location_table in ('DLS', 'HOS', 'ORL', 'RRM') and location_val = %s  and  marked_officer_status in (1, 2) AND inspected_on >= %s AND inspected_on <= %s group by location_val
                    """,[i, startDate, currentDate]
                )
                inspPending = cursor.fetchall()
                if (inspPending == None or inspPending == []):
                    inspPending = [0]    
                insptotal_pending.append(inspPending)
                cursor.execute(
                    """select count (distinct inspection_no) FROM public.insp_marked_sumry where location_table in ('DLS', 'HOS', 'ORL', 'RRM') AND location_val = %s  and marked_officer_status in (1, 2) and overdue_flag = 1 AND inspected_on >= %s AND inspected_on <= %s group by location_val;
                    """,[i, startDate, currentDate]
                )
                inspOverdue = cursor.fetchall()
                if (inspOverdue == None or inspOverdue == []):
                    inspOverdue = [0]    
                insptotal_overdue.append(inspOverdue)

                    
                cursor.execute(
                        """select count (distinct item_no) FROM public.insp_marked_sumry 
                            where  location_table in ('DLS', 'HOS', 'ORL', 'RRM') and  location_val = %s and marked_officer_status in (1, 2, 3, 4)  AND inspected_on >= %s AND inspected_on <= %s 
                            and ps = 1  group by marked_hq_id;
                        """,[i, startDate, currentDate]
                )
                p = cursor.fetchall()
                if (p == None or p == []):
                    p = [0]    
                ps.append(p)
                cursor.execute(
                        """select count (distinct item_no) FROM public.insp_marked_sumry 
                            where  location_table in ('DLS', 'HOS', 'ORL', 'RRM') and  location_val = %s and marked_officer_status in (1, 2, 3, 4) AND inspected_on >= %s AND inspected_on <= %s 
                            and es = 1  group by marked_hq_id;
                        """,[i, startDate, currentDate]
                )
                e = cursor.fetchall()
                if (e == None or e == []):
                    e = [0]    
                es.append(e)

                cursor.execute(
                        """select count (distinct item_no) FROM public.insp_marked_sumry 
                            where  location_table in ('DLS', 'HOS', 'ORL', 'RRM') and  location_val = %s and marked_officer_status in (1, 2, 3, 4) AND inspected_on >= %s AND inspected_on <= %s 
                            and oth = 1  group by marked_hq_id;
                        """,[i, startDate, currentDate]
                )
                o = cursor.fetchall()
                if (o == None or o == []):
                    o = [0]    
                oth.append(o)
                cursor.execute(
                        """select count (distinct item_no) FROM public.insp_marked_sumry 
                            where  location_table in ('DLS', 'HOS', 'ORL', 'RRM') and  location_val = %s and marked_officer_status in (1, 2, 3, 4) AND inspected_on >= %s AND inspected_on <= %s 
                            and ni = 1  group by marked_hq_id;
                        """,[i, startDate, currentDate]
                )
                n = cursor.fetchall()
                if (n == None or n == []):
                    n = [0]    
                ni.append(n)

                
                cursor.execute(
                        """select count (distinct item_no) FROM public.insp_marked_sumry 
                            where  location_table in ('DLS', 'HOS', 'ORL', 'RRM') and location_val = %s and marked_officer_status in (1, 2, 3, 4) AND inspected_on >= %s AND inspected_on <= %s 
                            and si = 1  group by marked_hq_id;
                        """,[i, startDate, currentDate]
                )
                s = cursor.fetchall()
                if (s == None or s == []):
                    s = [0]    
                si.append(s)
                cursor.execute(
                        """ select count (distinct item_no) FROM public.insp_marked_sumry 
                            where location_table in ('DLS', 'HOS', 'ORL', 'RRM') and location_val = %s and marked_officer_status in (1, 2, 3, 4) AND inspected_on >= %s AND inspected_on <= %s
                            and di = 1  group by marked_hq_id;
                        """,[i, startDate, currentDate]
                )
                d = cursor.fetchall()
                if (d == None or d == []):
                    d = [0]    
                di.append(d)
                cursor.execute(
                        """ select count (distinct item_no) FROM public.insp_marked_sumry 
                            where location_table in ('DLS', 'HOS', 'ORL', 'RRM') AND location_val = %s and marked_officer_status in (1, 2, 3, 4) AND inspected_on >= %s AND inspected_on <= %s 
                            and ri = 1  group by marked_hq_id;
                        """,[i, startDate, currentDate]
                )
                r = cursor.fetchall()
                if (r == None or r == []):
                    r = [0]    
                ri.append(r)

                cursor.execute(
                        """ select count (distinct item_no) FROM public.insp_marked_sumry 
                            where location_table in ('DLS', 'HOS', 'ORL', 'RRM') AND location_val = %s and marked_officer_status in (1, 2, 3, 4) AND inspected_on >= %s AND inspected_on <= %s 
                            and priority > 0  group by marked_hq_id;
                        """,[i, startDate, currentDate]
                )
                prior = cursor.fetchall()
                if (prior == None or prior == []):
                    prior = [0]    
                priority.append(prior)

                # -----------

                
                cursor.execute(
                        """ select distinct item_no FROM public.insp_marked_sumry 
                            where location_table in ('DLS', 'HOS', 'ORL', 'RRM') AND location_val = %s and marked_officer_status in (1, 2, 3, 4) AND inspected_on >= %s AND inspected_on <= %s 
                            and priority > 0  group by marked_hq_id, item_no;
                        """,[i, startDate, currentDate]
                )
                prior = cursor.fetchall()
                if (prior == None or prior == []):
                    prior = [0]    
                Data_priority.append(prior)
                
                cursor.execute(
                        """ select count (distinct item_no) FROM public.insp_marked_sumry where location_val = %s and marked_officer_status in (1, 2) 
                             AND inspected_on >= %s AND inspected_on <= %s group by location_val """,[i, startDate, currentDate])
                pending_count = cursor.fetchall()            
                if (pending_count == None or pending_count == []):
                    pending_count = [0]  
                Data_total_pending.append(pending_count)

                
                cursor.execute(
                        """select count (distinct item_no) FROM public.insp_marked_sumry where location_val = %s and marked_officer_status in (1, 2) and overdue_flag = 1  AND inspected_on >= %s AND inspected_on <= %s group by location_val;""",[i, startDate, currentDate])
                overdue_count = cursor.fetchall()                      
                if (overdue_count == None or overdue_count == []):
                    overdue_count = [0]  
                Data_total_overdue.append(overdue_count)

                cursor.execute(
                        """ 
                    SELECT count(distinct inspection_no) as total_inspection
                    FROM public.insp_marked_sumry
                    WHERE  location_table in ('DLS', 'HOS', 'ORL', 'RRM')  AND location_val = %s AND inspected_on >= %s AND inspected_on <= %s 
					GROUP BY location_val """,[i, startDate, currentDate])
                inspection = cursor.fetchall()                      
                if (inspection == None or inspection == []):
                    inspection = [0]  
                Data_total_inspection.append(inspection)

                cursor.execute(
                        """  
                    SELECT count(distinct item_no) as total_item
                    FROM public.insp_marked_sumry
                    WHERE  location_table in ('DLS', 'HOS', 'ORL', 'RRM')  AND location_val = %s and marked_officer_status in (1, 2, 3,4) AND inspected_on >= %s AND inspected_on <= %s 
					GROUP BY  location_val """,[i, startDate, currentDate])
                items = cursor.fetchall()                      
                if (items == None or items == []):
                    items = [0]  
                Data_total_items.append(items)                
                cursor.execute(
                    """SELECT count(distinct inspection_no) FROM public.insp_marked_sumry where  location_table in ('DLS', 'HOS', 'ORL', 'RRM') and location_val = %s  and  marked_officer_status in (1, 2) AND inspected_on >= %s AND inspected_on <= %s group by location_val
                    """,[i, startDate, currentDate]
                )
                inspPending = cursor.fetchall()
                if (inspPending == None or inspPending == []):
                    inspPending = [0]    
                Data_insptotal_pending.append(inspPending)
                cursor.execute(
                    """select count (distinct inspection_no) FROM public.insp_marked_sumry where location_table in ('DLS', 'HOS', 'ORL', 'RRM') AND location_val = %s  and marked_officer_status in (1, 2) and overdue_flag = 1 AND inspected_on >= %s AND inspected_on <= %s group by location_val;
                    """,[i, startDate, currentDate]
                )
                inspOverdue = cursor.fetchall()
                if (inspOverdue == None or inspOverdue == []):
                    inspOverdue = [0]    
                Data_insptotal_overdue.append(inspOverdue)


            context = {
                'rly_id':rlycode,
                'rlycode':rlycode,

                'field_name': field_name,
                'radioVal':radioVal,
                'radioVal1':radioVal1,
                'tdata': rlycode,
                'total_pendency_count_7':total_pendency_count_7,
                'total_pendency_count_30':total_pendency_count_30,
                'total_pendency_count_90':total_pendency_count_90,
                'total_pendency_count_180':total_pendency_count_180,
                'total_inspection':total_inspection,
                'total_items':total_items,
                'total_pending':total_pending,
                'total_overdue':total_overdue,                
                'insptotal_pending':insptotal_pending,
                'insptotal_overdue':insptotal_overdue,
                'ps':ps,
                'es':es,
                'oth':oth, 
                'ni':ni,
                'si':si,
                'di':di,
                'ri':ri, 
                'priority':priority,

                    
                'Data_total_inspection':Data_total_inspection, 
                'Data_total_pending':Data_total_pending,
                'Data_total_overdue':Data_total_overdue,
                'Data_total_items':Data_total_items,
                'Data_insptotal_pending':Data_insptotal_pending,
                'Data_insptotal_overdue':Data_insptotal_overdue,
                'Data_priority':Data_priority,

                
                }
            request.session['vontext'] = context
            return JsonResponse(context, safe = False)
       
        ###
        if radioVal == 'a': #zone            
            #data is zone name
            field_name = 'Rly./Org.'
            data = list(models.railwayLocationMaster.objects.filter(location_type_desc__in=['RAILWAY BOARD', 'PRODUCTION UNIT', 'HEAD QUATER']).values_list('location_code',flat=True).order_by('location_code'))
            rlycode = list(models.railwayLocationMaster.objects.filter(location_type_desc__in=['RAILWAY BOARD', 'PRODUCTION UNIT', 'HEAD QUATER']).values_list('rly_unit_code',flat=True).order_by('location_code'))
            print("data",data)
            print("rlycode",rlycode)

            rly_id = list(models.railwayLocationMaster.objects.filter( rly_unit_code__in = rlycode).values_list('location_code',flat=True).order_by('location_code'))
            print('rly_id',rly_id)
            
        elif radioVal == 'b' and zone == None: #division
            field_name = 'Div/Unit'

            data = list(models.railwayLocationMaster.objects.filter(Q(location_type_desc__in=['DIVISION','WORKSHOP']) and (Q(level_desig__div_id = rly_unit_code) | Q(level_desig__hq_id = rly_unit_code))).values_list('location_code', flat=True).order_by('location_code').distinct())
            
            rlycode = list(models.railwayLocationMaster.objects.filter(Q(location_type_desc__in=['DIVISION','WORKSHOP']) and (Q(level_desig__div_id = rly_unit_code) | Q(level_desig__hq_id = rly_unit_code))).values_list('rly_unit_code', flat=True).order_by('location_code').distinct())
            

            rly_id = list(models.railwayLocationMaster.objects.filter( rly_unit_code__in = rlycode).values_list('rly_unit_code',flat=True).order_by('location_code'))
            # print('rly_id',rly_id)
            print('rlycode',rlycode )
            print('data',data)
        else:
            radioVal = list(models.railwayLocationMaster.objects.filter(location_code = radioVal).values_list('rly_unit_code', flat=True))[0] #converted list to int
            print('radioVar',radioVal)
            field_name = 'Division'
            
            data =  list(models.railwayLocationMaster.objects.filter(location_type_desc__in=['DIVISION','WORKSHOP'], rly_unit_code = radioVal).values_list('location_code', flat=True).order_by('location_code')) + list(models.railwayLocationMaster.objects.filter(location_type_desc__in=['DIVISION','WORKSHOP'], parent_rly_unit_code = radioVal).values_list('location_code', flat=True).order_by('location_code'))

            rlycode = list(models.railwayLocationMaster.objects.filter(location_type_desc__in=['DIVISION','WORKSHOP'], rly_unit_code = radioVal).values_list('rly_unit_code', flat=True).order_by('location_code')) + list(models.railwayLocationMaster.objects.filter(location_type_desc__in=['DIVISION','WORKSHOP'], parent_rly_unit_code = radioVal).values_list('rly_unit_code', flat=True).order_by('location_code'))
    
            rly_id = list(models.railwayLocationMaster.objects.filter( rly_unit_code__in = rlycode).values_list('rly_unit_code',flat=True).order_by('location_code'))
            print('rly_id',rly_id)
        
        startDate = (startDate.split('/'))[2] + '-' + (startDate.split('/'))[1] +'-'+ (startDate.split('/'))[0]
        currentDate = (currentDate.split('/'))[2] + '-' + (currentDate.split('/'))[1] +'-'+ (currentDate.split('/'))[0]
    
        for i in rlycode:
            radioVal1.append(radioVal)
            cursor = connection.cursor()
            
            cursor.execute(""" select count(distinct item_no) FROM public.insp_marked_sumry where (marked_div_id = %s or marked_hq_id = %s) and pendency_days > 7 and marked_officer_status in (1,2) AND inspected_on >= %s AND inspected_on <= %s group by marked_hq_id """,[i, i, startDate, currentDate])
            pendency_count_7 = cursor.fetchall()     
            if (pendency_count_7 == None or pendency_count_7 == []):
                pendency_count_7 = [0]     
            total_pendency_count_7.append(pendency_count_7)
            
            cursor.execute(
                """select count(distinct item_no) FROM public.insp_marked_sumry where (marked_div_id = %s or marked_hq_id = %s) and pendency_days > 30 and marked_officer_status in (1,2) AND inspected_on >= %s AND inspected_on <= %s group by marked_hq_id """,[i, i, startDate, currentDate])
            pendency_count_30 = cursor.fetchall()
            if (pendency_count_30 == None or pendency_count_30 == []):
                pendency_count_30 = [0]    
            total_pendency_count_30.append(pendency_count_30)
            
            cursor.execute(
                    """select count(distinct item_no) FROM public.insp_marked_sumry where (marked_div_id = %s or marked_hq_id = %s) and pendency_days > 90 and marked_officer_status in (1,2) AND inspected_on >= %s AND inspected_on <= %s group by  marked_hq_id  """,[i, i, startDate, currentDate])
            pendency_count_90 = cursor.fetchall()
            if (pendency_count_90 == None or pendency_count_90 == []):
                pendency_count_90 = [0]    
            total_pendency_count_90.append(pendency_count_90)


            cursor.execute(
                    """select count(distinct item_no) FROM public.insp_marked_sumry where (marked_div_id = %s or marked_hq_id = %s) and pendency_days > 180 and marked_officer_status in (1,2) AND inspected_on >= %s AND inspected_on <= %s group by  marked_hq_id  """,[i, i, startDate, currentDate])
            pendency_count_180 = cursor.fetchall()
            if (pendency_count_180 == None or pendency_count_180 == []):
                pendency_count_180 = [0]  
            total_pendency_count_180.append(pendency_count_180)

            cursor.execute(
                        """  select count (distinct item_no) FROM public.insp_marked_sumry where (marked_div_id = %s or marked_hq_id = %s) and item_status in (1, 2) AND inspected_on >= %s AND inspected_on <= %s group by  marked_hq_id 
                        """,[i, i, startDate, currentDate])
            pending_count = cursor.fetchall()            
            if (pending_count == None or pending_count == []):
                pending_count = [0]  
            total_pending.append(pending_count)

            cursor.execute(
                    """  SELECT count(distinct item_no) FROM public.insp_marked_sumry where (marked_div_id = %s or marked_hq_id = %s) and marked_officer_status in (1, 2, 3,4) AND inspected_on >= %s AND inspected_on <= %s group by marked_hq_id """,[i, i, startDate, currentDate])
            items = cursor.fetchall()                      
            if (items == None or items == []):
                items = [0]  
            total_items.append(items)

       

            cursor.execute(
                    """select count (distinct item_no) FROM public.insp_marked_sumry where (marked_div_id = %s or marked_hq_id = %s) and marked_officer_status in (1, 2) and overdue_flag = 1 AND inspected_on >= %s AND inspected_on <= %s group by  marked_hq_id ;""",[i, i, startDate, currentDate])
            overdue_count = cursor.fetchall()                      
            if (overdue_count == None or overdue_count == []):
                overdue_count = [0]  
            total_overdue.append(overdue_count)

            cursor.execute(
                    """   SELECT count(distinct inspection_no) FROM public.insp_marked_sumry where (marked_div_id = %s or marked_hq_id = %s) and marked_officer_status in (1, 2, 3,4)  AND inspected_on >= %s AND inspected_on <= %s group by marked_hq_id """,[i, i, startDate, currentDate])
            inspection = cursor.fetchall()                      
            if (inspection == None or inspection == []):
                inspection = [0]  
            total_inspection.append(inspection)

            
            cursor.execute(
                    """SELECT count(distinct inspection_no) FROM public.insp_marked_sumry where (marked_div_id = %s or marked_hq_id = %s) and  marked_officer_status in (1, 2)AND inspected_on >= %s AND inspected_on <= %s   group by marked_hq_id
                    """,[i, i, startDate, currentDate]
            )
            inspPending = cursor.fetchall()
            if (inspPending == None or inspPending == []):
                inspPending = [0]    
            insptotal_pending.append(inspPending)

            cursor.execute(
                    """select count (distinct inspection_no) FROM public.insp_marked_sumry where (marked_div_id = %s or marked_hq_id = %s) and marked_officer_status in (1, 2)  and overdue_flag = 1 AND inspected_on >= %s AND inspected_on <= %s group by marked_hq_id;
                    """,[i, i, startDate, currentDate]
            )
            inspOverdue = cursor.fetchall()
            if (inspOverdue == None or inspOverdue == []):
                inspOverdue = [0]    
            insptotal_overdue.append(inspOverdue)


##
            cursor.execute(
                    """select count (distinct item_no) FROM public.insp_marked_sumry 
                        where (marked_div_id = %s or marked_hq_id = %s) and marked_officer_status in (1, 2, 3, 4) 
                        and ps = 1 AND inspected_on >= %s AND inspected_on <= %s  group by marked_hq_id;
                    """,[i, i, startDate, currentDate]
            )
            p = cursor.fetchall()
            if (p == None or p == []):
                p = [0]    
            ps.append(p)
            cursor.execute(
                    """select count (distinct item_no) FROM public.insp_marked_sumry 
                        where (marked_div_id = %s or marked_hq_id = %s) and marked_officer_status in (1, 2, 3, 4) 
                        and es = 1 AND inspected_on >= %s AND inspected_on <= %s  group by marked_hq_id;
                    """,[i, i, startDate, currentDate]
            )
            e = cursor.fetchall()
            if (e == None or e == []):
                e = [0]    
            es.append(e)

            cursor.execute(
                    """select count (distinct item_no) FROM public.insp_marked_sumry 
                        where (marked_div_id = %s or marked_hq_id = %s) and marked_officer_status in (1, 2, 3, 4) 
                        and oth = 1 AND inspected_on >= %s AND inspected_on <= %s  group by marked_hq_id;
                    """,[i, i, startDate, currentDate]
            )
            o = cursor.fetchall()
            if (o == None or o == []):
                o = [0]    
            oth.append(o)
            cursor.execute(
                    """select count (distinct item_no) FROM public.insp_marked_sumry 
                        where (marked_div_id = %s or marked_hq_id = %s) and marked_officer_status in (1, 2, 3, 4) 
                        and ni = 1 AND inspected_on >= %s AND inspected_on <= %s  group by marked_hq_id;
                    """,[i, i, startDate, currentDate]
            )
            n = cursor.fetchall()
            if (n == None or n == []):
                n = [0]    
            ni.append(n)

            
            cursor.execute(
                    """select count (distinct item_no) FROM public.insp_marked_sumry 
                        where (marked_div_id = %s or marked_hq_id = %s) and marked_officer_status in (1, 2, 3, 4) 
                        and si = 1 AND inspected_on >= %s AND inspected_on <= %s  group by marked_hq_id;
                    """,[i, i, startDate, currentDate]
            )
            s = cursor.fetchall()
            if (s == None or s == []):
                s = [0]    
            si.append(s)
            cursor.execute(
                    """ select count (distinct item_no) FROM public.insp_marked_sumry 
                        where (marked_div_id = %s or marked_hq_id = %s) and marked_officer_status in (1, 2, 3, 4) 
                        and di = 1 AND inspected_on >= %s AND inspected_on <= %s  group by marked_hq_id;
                    """,[i, i, startDate, currentDate]
            )
            d = cursor.fetchall()
            if (d == None or d == []):
                d = [0]    
            di.append(d)
            cursor.execute(
                    """ select count (distinct item_no) FROM public.insp_marked_sumry 
                        where (marked_div_id = %s or marked_hq_id = %s) and marked_officer_status in (1, 2, 3, 4) 
                        and ri = 1 AND inspected_on >= %s AND inspected_on <= %s  group by marked_hq_id;
                    """,[i, i, startDate, currentDate]
            )
            r = cursor.fetchall()
            if (r == None or r == []):
                r = [0]    
            ri.append(r)

            cursor.execute(
                    """ select count (distinct item_no) FROM public.insp_marked_sumry 
                        where (marked_div_id = %s or marked_hq_id = %s) and marked_officer_status in (1, 2, 3, 4) 
                        and priority > 0 AND inspected_on >= %s AND inspected_on <= %s  group by marked_hq_id;
                    """,[i, i, startDate, currentDate]
            )
            prior = cursor.fetchall()
            if (prior == None or prior == []):
                prior = [0]    
            priority.append(prior)



# //////////////////////////////////
            
            cursor.execute(
                    """ select distinct item_no FROM public.insp_marked_sumry 
                        where (marked_div_id = %s or marked_hq_id = %s) and marked_officer_status in (1, 2, 3, 4) 
                        and priority > 0 AND inspected_on >= %s AND inspected_on <= %s  group by marked_hq_id, item_no;
                    """,[i, i, startDate, currentDate]
            )
            prior = cursor.fetchall()
            if (prior == None or prior == []):
                prior = [0]    
            Data_priority.append(prior)

            # DATA #
            cursor.execute(
                    """   SELECT distinct inspection_no FROM public.insp_marked_sumry where (marked_div_id = %s or marked_hq_id = %s) and marked_officer_status in (1, 2, 3,4)  AND inspected_on >= %s AND inspected_on <= %s group by inspection_no, marked_hq_id """,[i, i, startDate, currentDate])
            Dinspection = cursor.fetchall()                      
            if (Dinspection == None or Dinspection == []):
                Dinspection = [0]  
            Data_total_inspection.append(Dinspection)
            

            cursor.execute(
                    """  SELECT distinct item_no FROM public.insp_marked_sumry where (marked_div_id = %s or marked_hq_id = %s) and marked_officer_status in (1, 2, 3,4) AND inspected_on >= %s AND inspected_on <= %s group by marked_hq_id, item_no """,[i, i, startDate, currentDate])
            items = cursor.fetchall()                      
            if (items == None or items == []):
                items = [0]  
            Data_total_items.append(items)



            cursor.execute(
                    """select distinct inspection_no FROM public.insp_marked_sumry where (marked_div_id = %s or marked_hq_id = %s) and marked_officer_status in (1, 2)  and overdue_flag = 1 AND inspected_on >= %s AND inspected_on <= %s group by marked_hq_id, inspection_no;
                    """,[i, i, startDate, currentDate]
            )
            inspOverdue = cursor.fetchall()
            if (inspOverdue == None or inspOverdue == []):
                inspOverdue = [0]    
            Data_insptotal_overdue.append(inspOverdue)


            cursor.execute(
                    """SELECT distinct inspection_no FROM public.insp_marked_sumry where (marked_div_id = %s or marked_hq_id = %s) and  marked_officer_status in (1, 2)AND inspected_on >= %s AND inspected_on <= %s   group by marked_hq_id, inspection_no;
                    """,[i, i, startDate, currentDate]
            )
            inspPending = cursor.fetchall()
            if (inspPending == None or inspPending == []):
                inspPending = [0]    
            Data_insptotal_pending.append(inspPending)



            cursor.execute(
                    """select distinct item_no FROM public.insp_marked_sumry where (marked_div_id = %s or marked_hq_id = %s) and marked_officer_status in (1, 2) and overdue_flag = 1 AND inspected_on >= %s AND inspected_on <= %s group by  marked_hq_id, item_no;""",[i, i, startDate, currentDate])
            overdue_count = cursor.fetchall()                      
            if (overdue_count == None or overdue_count == []):
                overdue_count = [0]  
            Data_total_overdue.append(overdue_count)


            cursor.execute(
                        """  select distinct item_no FROM public.insp_marked_sumry where (marked_div_id = %s or marked_hq_id = %s) and item_status in (1, 2) AND inspected_on >= %s AND inspected_on <= %s group by  marked_hq_id, item_no;
                        """,[i, i, startDate, currentDate])
            pending_count = cursor.fetchall()            
            if (pending_count == None or pending_count == []):
                pending_count = [0]  
            Data_total_pending.append(pending_count)

            
            # cursor.execute(
            #         """   SELECT count(distinct inspection_no) FROM public.insp_marked_sumry where insp_rly_unit_code = %s group by insp_rly_unit_code """,[i])
            # inspection = cursor.fetchall()                      
            # if (inspection == None or inspection == []):
            #     inspection = [0]  
            # total_inspection.append(inspection)

            # cursor.execute(
            #         """  SELECT count(distinct item_no) FROM public.insp_marked_sumry where insp_rly_unit_code = %s group by insp_rly_unit_code """,[i])
            # items = cursor.fetchall()                      
            # if (items == None or items == []):
            #     items = [0]  
            # total_items.append(items)
            cursor.close()  # Close the cursor after using it
            
        # print ('total_pendency_count_7',total_pendency_count_7)
        # print ('total_overdue',total_overdue)
        #print('Data_total_inspection',Data_total_inspection)
        # print('Data_total_inspection',Data_total_inspection)
        # print('Data_total_pending',Data_total_pending)
        # print('Data_total_overdue',Data_total_overdue)
        # print('Data_total_items',Data_total_items)
        # print('Data_insptotal_pending',Data_insptotal_pending)
        # print('Data_insptotal_overdue',Data_insptotal_overdue)

        context = {
            'Data_total_inspection':Data_total_inspection, 
            'Data_total_pending':Data_total_pending,
            'Data_total_overdue':Data_total_overdue,
            'Data_total_items':Data_total_items,
            'Data_insptotal_pending':Data_insptotal_pending,
            'Data_insptotal_overdue':Data_insptotal_overdue,
            'Data_priority':Data_priority,

            'insptotal_pending':insptotal_pending,
            'insptotal_overdue':insptotal_overdue,
            'rly_id':rly_id,
            'rlycode':rlycode,
            'field_name': field_name,
            'radioVal':radioVal,
            'radioVal1':radioVal1,
            'tdata': data,
            'total_pendency_count_7':total_pendency_count_7,
            'total_pendency_count_30':total_pendency_count_30,
            'total_pendency_count_90':total_pendency_count_90,
            'total_pendency_count_180':total_pendency_count_180,
            'total_inspection':total_inspection,
            'total_items':total_items,
            'total_pending':total_pending,
            'total_overdue':total_overdue,
            'insptotal_pending':insptotal_pending,
            'insptotal_overdue':insptotal_overdue,
            'ps':ps,
            'es':es,
            'oth':oth, 
            'ni':ni,
            'si':si,
            'di':di,
            'ri':ri, 
            'priority':priority,
            }
        request.session['vontext'] = context
        return JsonResponse(context, safe = False)
    else:
        return JsonResponse({"error": "Invalid request"})


from psycopg2 import sql
def modalClick(request):
    if request.method=='POST' or request.is_ajax():
        row1 = request.POST.get('row1')
        col1 = request.POST.get('col1')
        fieldName = request.POST.get('field')
        fieldData = request.POST.get('fieldData')
        column_name = sql.Identifier(fieldName)
        print('row1',row1,type(row1))
        b = try_convert_to_int(row1)
        print('b',type(b),)
        con = request.POST.get('con')
        vontext = request.session.get('vontext', '') 
        # Retrieve the data from session

        Data_total_inspection = vontext.get('Data_total_inspection', [[]]) 
        flattened_inspection_numbers = [item for sublist in Data_total_inspection for item in sublist]
        flattened_inspection_numbers = tuple(flattened_inspection_numbers)
        filtered_inspection_numbers = [item for item in flattened_inspection_numbers if item != 0]
        # print('filtered_inspection_numbers', filtered_inspection_numbers)

        Data_total_items = vontext.get('Data_total_items', [[]]) 
        flattened_Data_total_items = [item for sublist in Data_total_items for item in sublist]
        flattened_Data_total_items = tuple(flattened_Data_total_items)
        filtered_Data_total_items = [item for item in flattened_Data_total_items if item != 0]
        # print('filtered_Data_total_items', filtered_Data_total_items)

        Data_total_pending = vontext.get('Data_total_pending', [[]]) 
        flattened_Data_total_pending = [item for sublist in Data_total_pending for item in sublist]
        flattened_Data_total_pending = tuple(flattened_Data_total_pending)
        filtered_Data_total_pending = [item for item in flattened_Data_total_pending if item != 0]
        # print('filtered_Data_total_pending', filtered_Data_total_pending)

        Data_total_overdue = vontext.get('Data_total_overdue', [[]]) 
        flattened_Data_total_overdue = [item for sublist in Data_total_overdue for item in sublist]
        flattened_Data_total_overdue = tuple(flattened_Data_total_overdue)
        filtered_Data_total_overdue = [item for item in flattened_Data_total_overdue if item != 0]
        # print('filtered_Data_total_overdue', filtered_Data_total_overdue)

        Data_insptotal_pending = vontext.get('Data_insptotal_pending', [[]]) 
        flattened_Data_insptotal_pending = [item for sublist in Data_insptotal_pending for item in sublist]
        flattened_Data_insptotal_pending = tuple(flattened_Data_insptotal_pending)
        filtered_Data_insptotal_pending = [item for item in flattened_Data_insptotal_pending if item != 0]
        # print('filtered_Data_insptotal_pending', filtered_Data_insptotal_pending)

        Data_insptotal_overdue = vontext.get('Data_total_overdue', [[]]) 
        flattened_Data_insptotal_overdue = [item for sublist in Data_insptotal_overdue for item in sublist]
        flattened_Data_insptotal_overdue = tuple(flattened_Data_insptotal_overdue)
        filtered_Data_insptotal_overdue = [item for item in flattened_Data_insptotal_overdue if item != 0]

        Data_priority = vontext.get('Data_total_overdue', [[]]) 
        flattened_Data_priority = [item for sublist in Data_priority for item in sublist]
        flattened_Data_priority = tuple(flattened_Data_priority)
        filtered_Data_priority = [item for item in flattened_Data_priority if item != 0]


        # print('filtered_Data_insptotal_overdue', filtered_Data_insptotal_overdue)

        # print('filtered_Data_total_items', filtered_Data_total_items)
        # print('filtered_Data_total_pending', filtered_Data_total_pending)
        # print('filtered_Data_total_overdue', filtered_Data_total_overdue)
        # print('filtered_Data_insptotal_pending', filtered_Data_insptotal_pendinge)
        # print('filtered_Data_insptotal_overdue', filtered_Data_insptotal_overdue)
        A = []
        if (fieldData == 'Data_total_inspection'):
            A = filtered_inspection_numbers
        elif (fieldData == 'Data_total_items'):
            A = filtered_Data_total_items
        elif (fieldData == 'Data_total_pending'):
            A = filtered_Data_total_pending
        elif (fieldData == 'Data_total_overdue'):
            A = filtered_Data_total_overdue
        elif (fieldData == 'Data_insptotal_pending'):
            A = filtered_Data_insptotal_pending
        elif (fieldData == 'Data_insptotal_overdue'):
            A = filtered_Data_insptotal_overdue 
        elif (fieldData == 'Data_priority'):
            A = filtered_Data_priority
        else:
            A = filtered_inspection_numbers

        
        wholedata = ''
        print('row1', row1, type(row1))
        print('col1', col1)
        print('fieldName', fieldName )
        print('fieldData', fieldData )
        print('con', con)
        print('A', A)


        # inspDate= []
        # inspNoteNo=[]
        # MarkedOfficer=[]
        # location=[]

        # cursor.execute('''SELECT a.inspected_on,a.inspection_note_no,a.item_type,b.item_title,a.marked_designation,a.marked_location_type,a.marked_hq_code
        #     from public.insp_marked_sumry a join public.inspects_inspection_details b on a.inspection_no = b.inspection_no where a.item_no in %s group by a.inspected_on,a.inspection_note_no,a.item_type,b.item_title,a.marked_designation,a.marked_location_type,a.marked_hq_code'''[])
        
        cursor = connection.cursor()
        if (row1.isnumeric()):
            print("if worked")
            for i in A:
                if (i != 0):
                    cursor.execute(
                        sql.SQL("""
                        SELECT inspected_on
                        FROM public.insp_marked_sumry 
                        WHERE (marked_div_id = %s OR marked_hq_id = %s) 
                        AND {} = ANY(%s);
                        """).format(column_name),
                        [row1, row1, A]
                    )

                    inspDate = cursor.fetchall()
                    
                    cursor.execute(
                        sql.SQL("""
                        SELECT distinct inspection_note_no
                        FROM public.insp_marked_sumry 
                        WHERE (marked_div_id = %s OR marked_hq_id = %s) 
                        AND {} = ANY(%s);
                        """).format(column_name),
                        [row1, row1, A]
                    )
                    inspNoteNo = cursor.fetchall()

                    cursor.execute(
                        sql.SQL("""
                        SELECT distinct {}
                        FROM public.insp_marked_sumry 
                        WHERE (marked_div_id = %s OR marked_hq_id = %s) 
                        AND {} = ANY(%s);
                        """).format(column_name,column_name),
                        [row1, row1, A]
                    )
                    field_no = cursor.fetchall()
                    # field_no

                    cursor.execute(
                        sql.SQL("""
                        SELECT distinct marked_designation
                        FROM public.insp_marked_sumry 
                        WHERE (marked_div_id = %s OR marked_hq_id = %s) 
                        AND {} = ANY(%s);
                        """).format(column_name),
                        [row1, row1, A]
                    )
                    MarkedOfficer = cursor.fetchall()

                    cursor.execute(
                        sql.SQL("""
                        SELECT marked_location_code
                        FROM public.insp_marked_sumry 
                        WHERE (marked_div_id = %s OR marked_hq_id = %s) 
                        AND {} = ANY(%s);
                        """).format(column_name),
                        [row1, row1, A]
                    )
                    location = cursor.fetchall()
                    
        # print('inspDate',inspDate)
        # print('inspNoteNo',inspNoteNo)
        # print('MarkedOfficer',MarkedOfficer)
        # print('location',location)
            # formatted_dates = [datetime.strftime(date, "%d-%m-%Y") for date in inspDate]
            # print('formatted_dates',formatted_dates)
            print('----------------------')
            context = {
                'inspDate': inspDate,
                'inspNoteNo': inspNoteNo,
                'field_no': field_no,
                # 'inspObs': ,
                'MarkedOfficer': MarkedOfficer,
                # 'Rly':,
                # 'div':,
                'location': location,
            }
            return JsonResponse (context, safe= False)

        elif (con == 'e'):
            MarkedOfficer = []
            print("else worked")
            for i in A:
                if (i != 0):
                    cursor.execute(
                        sql.SQL("""
                        SELECT inspected_on
                        FROM public.insp_marked_sumry 
                        WHERE marked_designation = %s 
                        AND {} = ANY(%s);
                        """).format(column_name),
                        [row1, A]
                    )

                    inspDate = cursor.fetchall()
                    
                    cursor.execute(
                        sql.SQL("""
                        SELECT distinct inspection_note_no
                        FROM public.insp_marked_sumry 
                        WHERE marked_designation = %s
                        AND {} = ANY(%s);
                        """).format(column_name),
                        [row1, A]
                    )
                    inspNoteNo = cursor.fetchall()

                    cursor.execute(
                        sql.SQL("""
                        SELECT  {}
                        FROM distinct public.insp_marked_sumry 
                        WHERE marked_designation = %s
                        AND {} = ANY(%s);
                        """).format(column_name,column_name),
                        [row1, A]
                    )
                    field_no = cursor.fetchall()
                    # field_no

                    # cursor.execute(
                    #     sql.SQL("""
                    #     SELECT  marked_designation
                    #     FROM public.insp_marked_sumry 
                    #     WHERE marked_designation = %s
                    #     AND {} = ANY(%s);
                    #     """).format(column_name),
                    #     [row1, A]
                    # )
                    # MarkedOfficer = cursor.fetchall()

                    MarkedOfficer.append(row1)

                    cursor.execute(
                        sql.SQL("""
                        SELECT marked_location_code
                        FROM public.insp_marked_sumry 
                        WHERE marked_designation = %s 
                        AND {} = ANY(%s);
                        """).format(column_name),
                        [row1, A]
                    )
                    location = cursor.fetchall()
                    
        # print('inspDate',inspDate)
        # print('inspNoteNo',inspNoteNo)
        # print('MarkedOfficer',MarkedOfficer)
        # print('location',location)
            # formatted_dates = [datetime.strftime(date, "%d-%m-%Y") for date in inspDate]
            # print('formatted_dates',formatted_dates)
            print('----------------------')
            context = {
                'inspDate': inspDate,
                'inspNoteNo': inspNoteNo,
                'field_no': field_no,
                # 'inspObs': ,
                'MarkedOfficer': MarkedOfficer,
                # 'Rly':,
                # 'div':,
                'location': location,
            }
            return JsonResponse (context, safe= False)


        elif (con == 'c'):
            
            print("C department worked")
            for i in A:
                if (i != 0):
                    cursor.execute(
                        sql.SQL("""
                        SELECT inspected_on
                        FROM public.insp_marked_sumry 
                        WHERE marked_officer_department = %s 
                        AND {} = ANY(%s);
                        """).format(column_name),
                        [row1, A]
                    )

                    inspDate = cursor.fetchall()
                    
                    cursor.execute(
                        sql.SQL("""
                        SELECT distinct inspection_note_no
                        FROM public.insp_marked_sumry 
                        WHERE marked_officer_department = %s
                        AND {} = ANY(%s);
                        """).format(column_name),
                        [row1, A]
                    )
                    inspNoteNo = cursor.fetchall()

                    cursor.execute(
                        sql.SQL("""
                        SELECT  {}
                        FROM public.insp_marked_sumry 
                        WHERE marked_officer_department = %s
                        AND {} = ANY(%s);
                        """).format(column_name,column_name),
                        [row1, A]
                    )
                    field_no = cursor.fetchall()
                    # field_no

                    cursor.execute(
                        sql.SQL("""
                        SELECT marked_designation
                        FROM public.insp_marked_sumry 
                        WHERE marked_officer_department = %s
                        AND {} = ANY(%s);
                        """).format(column_name),
                        [row1, A]
                    )
                    MarkedOfficer = cursor.fetchall()


                    cursor.execute(
                        sql.SQL("""
                        SELECT marked_location_code
                        FROM public.insp_marked_sumry 
                        WHERE marked_officer_department = %s 
                        AND {} = ANY(%s);
                        """).format(column_name),
                        [row1, A]
                    )
                    location = cursor.fetchall()
                        
            # print('inspDate',inspDate)
            # print('inspNoteNo',inspNoteNo)
            # print('MarkedOfficer',MarkedOfficer)
            # print('location',location)
            # formatted_dates = [datetime.strftime(date, "%d-%m-%Y") for date in inspDate]
            # print('formatted_dates',formatted_dates)
            print('----------------------')
            context = {
                'inspDate': inspDate,
                'inspNoteNo': inspNoteNo,
                'field_no': field_no,
                # 'inspObs': ,
                'MarkedOfficer': MarkedOfficer,
                # 'Rly':,
                # 'div':,
                'location': location,
            }
            return JsonResponse (context, safe= False)

        elif (con == 'STM' or con =='SEM' or con == 'TRN' ) : #section station railway
            
            print("UNIT STM SEM TRN worked")
            for i in A:
                if (i != 0):
                    cursor.execute(
                        sql.SQL("""
                        SELECT inspected_on
                        FROM public.insp_marked_sumry 
                        WHERE marked_officer_department = %s 
                        AND {} = ANY(%s);
                        """).format(column_name),
                        [row1, A]
                    )

                    inspDate = cursor.fetchall()
                    
                    cursor.execute(
                        sql.SQL("""
                        SELECT  inspection_note_no
                        FROM public.insp_marked_sumry 
                        WHERE marked_officer_department = %s
                        AND {} = ANY(%s);
                        """).format(column_name),
                        [row1, A]
                    )
                    inspNoteNo = cursor.fetchall()

                    cursor.execute(
                        sql.SQL("""
                        SELECT  {}
                        FROM public.insp_marked_sumry 
                        WHERE marked_officer_department = %s
                        AND {} = ANY(%s);
                        """).format(column_name,column_name),
                        [row1, A]
                    )
                    field_no = cursor.fetchall()
                    # field_no

                    cursor.execute(
                        sql.SQL("""
                        SELECT  marked_designation
                        FROM public.insp_marked_sumry 
                        WHERE marked_designation = %s
                        AND {} = ANY(%s);
                        """).format(column_name),
                        [row1, A]
                    )
                    MarkedOfficer = cursor.fetchall()

                    # MarkedOfficer.append(row1)

                    cursor.execute(
                        sql.SQL("""
                        SELECT marked_location_code
                        FROM public.insp_marked_sumry 
                        WHERE marked_officer_department = %s 
                        AND {} = ANY(%s);
                        """).format(column_name),
                        [row1, A]
                    )
                    location = cursor.fetchall()
                    
            print('----------------------')
            context = {
                'inspDate': inspDate,
                'inspNoteNo': inspNoteNo,
                'field_no': field_no,
                # 'inspObs': ,
                'MarkedOfficer': MarkedOfficer,
                # 'Rly':,
                # 'div':,
                'location': location,
            }
            return JsonResponse (context, safe= False)





def try_convert_to_int(s):
    try:
        return int(s)
    except ValueError:
        return s



def TableIcon(request):
    irTypeVal = request.POST.get('typeId')
    irDetailsVal = request.POST.get('zoneId')
    divId = request.POST.get('divId')
    irSearchDate = request.POST.get('searchDate')
    irSearchDateTO = request.POST.get('searchDateTo')
    irSearchDept = request.POST.get('searchDepartment')
    irSearchDesig = request.POST.get('searchDesignation')
    searchLevel = request.POST.get('searchLevel')
    card_type = request.POST.get('card_type')
    expandData = request.POST.get('expandData')
    mylist = json.loads(request.POST.get('mylist'))
    print(mylist)
    # irSearchRail = request.POST.get('irSearchRail')
    dataZoneWs = []

    cursor = connection.cursor()



    if irTypeVal == 'PU':
        dataZoneWs = list(models.railwayLocationMaster.objects.filter(location_type='PU').values('location_description', 'location_code').distinct().order_by('location_code'))
    elif irTypeVal == 'DIV':
        zone = irDetailsVal
        dataZoneWs = list(models.railwayLocationMaster.objects.filter(parent_location_code=zone, location_type='DIV').values('location_code', 'location_description').order_by('location_code'))
    elif irTypeVal == 'WS':
        zone = irDetailsVal
        dataZoneWs = list(models.railwayLocationMaster.objects.filter(parent_location_code=zone, location_type='WS').values('location_code', 'location_description').order_by('location_code'))

    if irTypeVal == 'ZR':
        irTypeValData = ['ZR', 'DIV', 'WS']
    elif irTypeVal == 'IR':
        irTypeValData = ['ZR', 'DIV', 'WS', 'PU']
    elif irTypeVal == 'HQ':
        irTypeValData = ['ZR']
    else:
        irTypeValData = [irTypeVal]

    if irDetailsVal == '':
        allLocationCodeData = tuple(models.railwayLocationMaster.objects.filter(location_type__in=irTypeValData).values_list('location_code', flat=True).distinct())
    else:
        irPathVal1 = irDetailsVal
        allLocationCodeData = list(models.railwayLocationMaster.objects.filter(Q(parent_location_code=irDetailsVal)).values_list('location_code', flat=True).distinct())
        allLocationCodeData.append(irDetailsVal)
        allLocationCodeData = tuple(allLocationCodeData)

    if divId != '':
                irPathVal2 = divId
                allLocationCodeData = tuple([divId])
                irTypeValData = [irTypeVal]

    # Rest of your code...

    if irSearchDept == 'All':
        irSearchDept = ""
        allDepartmentData = tuple(models.departMast.objects.values_list('department_name', flat=True).distinct())

        if irDetailsVal == '':
            allDesignation = list(models.Level_Desig.objects.filter(rly_unit__in = models.railwayLocationMaster.objects.filter(location_type__in = irTypeValData).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('hierarchy_level','designation'))
        else:
            allDesignation = list(models.Level_Desig.objects.filter(rly_unit__in = models.railwayLocationMaster.objects.filter(Q(location_code=irDetailsVal) | Q(parent_location_code=irDetailsVal),location_type__in = irTypeValData).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('hierarchy_level','designation'))
        if divId != '':
            allDesignation = list(models.Level_Desig.objects.filter(rly_unit__in = models.railwayLocationMaster.objects.filter(Q(location_code=divId),location_type__in = irTypeValData).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('hierarchy_level','designation'))
        # Rest of your code...
    else:
        allDepartmentData = tuple(models.departMast.objects.filter(department_code=irSearchDept).values_list('department_name', flat=True).distinct())
        if irDetailsVal == '':
            allDesignation = list(models.Level_Desig.objects.filter(department_code=irSearchDept,rly_unit__in = models.railwayLocationMaster.objects.filter(location_type__in = irTypeValData).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('hierarchy_level','designation'))
        else:
            allDesignation = list(models.Level_Desig.objects.filter(department_code=irSearchDept,rly_unit__in = models.railwayLocationMaster.objects.filter(Q(location_code=irDetailsVal) | Q(parent_location_code=irDetailsVal),location_type__in = irTypeValData).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('hierarchy_level','designation'))
        if divId != '':
            allDesignation = list(models.Level_Desig.objects.filter(department_code=irSearchDept,rly_unit__in = models.railwayLocationMaster.objects.filter(Q(location_code=divId),location_type__in = irTypeValData).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('hierarchy_level','designation'))
        # Rest of your code...

    # Rest of your code...
    if  irSearchDesig == 'All':
        irSearchDesig = ""
        allDesignationData = tuple(models.Level_Desig.objects.filter(rly_unit__in = models.railwayLocationMaster.objects.filter(location_type__in=['DIV','RB','ZR','WS','PU']).values('rly_unit_code')).values_list('designation_code',flat=True).distinct())
    else:
        irSearchDesig = int(irSearchDesig)
        allDesignationData = tuple([irSearchDesig])

    if irSearchDate == "":
        startDate = '2020-04-01'
        endDate = datetime.now().strftime('%Y-%m-%d')
    else:
        start1 = irSearchDate.split('/')
        end1 = irSearchDateTO.split('/')
        startDate = '20'+start1[2]+'-'+start1[1]+'-'+start1[0]
        endDate = '20'+end1[2]+'-'+end1[1]+'-'+end1[0]

    
    if searchLevel == 'GM':
        allDesignationData = tuple(models.Level_Desig.objects.filter(d_level = 'GM').values_list('designation_code',flat=True).distinct())
    elif searchLevel == 'DRM':
        allDesignationData = tuple(models.Level_Desig.objects.filter(d_level = 'DRM').values_list('designation_code',flat=True).distinct())
    elif searchLevel == 'BM':
        allDesignationData = tuple(models.Level_Desig.objects.filter(d_level = 'BM').values_list('designation_code',flat=True).distinct())
    elif searchLevel == 'SAG':
        desig_code = list(models.Level_Desig.objects.filter(pc7_levelmin__gte=14,pc7_levelmax__lte=15).values_list('designation_code',flat=True).distinct())
        allDesignationData = tuple(models.Level_Desig.objects.filter(designation_code__in=desig_code).values_list('designation_code',flat=True).distinct())
    elif searchLevel == 'JAG':
        desig_code = list(models.Level_Desig.objects.filter(pc7_levelmin__gte=12,pc7_levelmax__lte=13).values_list('designation_code',flat=True).distinct())
        allDesignationData = tuple(models.Level_Desig.objects.filter(designation_code__in=desig_code).values_list('designation_code',flat=True).distinct())
    elif searchLevel == 'SS/JS':
        desig_code = list(models.Level_Desig.objects.filter(pc7_levelmin__gte=8,pc7_levelmax__lte=11).values_list('designation_code',flat=True).distinct())
        allDesignationData = tuple(models.Level_Desig.objects.filter(designation_code__in=desig_code).values_list('designation_code',flat=True).distinct())

    allDesignation = [x for x in allDesignation if x['designation_code'] in allDesignationData]


    # CHECK FOR CHEKBOX FILTER
    if (('Pending' in mylist and 'Overdue' in mylist and 'Priority' in mylist) or ('Overdue' in mylist and 'Priority' in mylist) ):
        col = "and (overdue_flag = 1 and priority = 1)"
    elif (('Pending' in mylist and 'Overdue' in mylist) or ('Overdue' in mylist) ):
        col = "and overdue_flag = 1"
    elif (('Pending' in mylist and 'Priority' in mylist) or ('Priority' in mylist)):
        col = "and priority = 1"
    else:
        col = "--"
    print('col',col)



    # filter of STM, SEM, TRN, OTH

    if card_type in ['STM','SEM','TRN']:
        value = (card_type,'None')
    elif card_type == 'OTH':
        value = ('DLS','RRM','HOS','ORL')
    else:
         value = ('STM','SEM','TRN','DLS','RRM','HOS','ORL')
    
    print('card_type',card_type,expandData,irTypeValData)
    print('card_type',allDepartmentData)

    if(expandData == "True"):
        print('expand')
        cursor.execute('''select marked_hq_code, marked_location_code, location_val,location_table,
                        COUNT(DISTINCT inspection_no) AS total_inspection_count,
                        COUNT(DISTINCT item_no) AS distinct_item_count,
                        COUNT(DISTINCT inspection_no) FILTER (WHERE insp_status in (1, 2, 3 )) AS pending_inspection_count,
                        COUNT(DISTINCT item_no) FILTER (WHERE insp_status in (1, 2, 3)) AS pending_item_count,
                        count(ps) FILTER (WHERE insp_status in (1, 2,3)),
                        count(es) FILTER (WHERE insp_status in (1, 2,3)), 
						count(oth) FILTER (WHERE insp_status in (1, 2,3)), 
						count(ni) FILTER (WHERE insp_status in (1, 2,3)), 
						count(si) FILTER (WHERE insp_status in (1, 2,3)),
                        count(di) FILTER (WHERE insp_status in (1, 2,3))
                        from insp_marked_sumry where marked_location_type in {}
                        and marked_location_code in {} and inspected_on between '{}' and '{}'    
                        and insp_desig_code in {} and insp_dept in {} and insp_status<>0 and item_status<>0
                        and location_table in {}  {}
                        GROUP BY marked_hq_code, marked_location_code, location_val,location_table;'''.format(
                        tuple(irTypeValData), allLocationCodeData, startDate,
                        endDate, allDesignationData, allDepartmentData,value,col))

        data = cursor.fetchall()
    

    elif(irTypeVal == 'IR'):
        print('ir1station')
        cursor.execute('''select marked_hq_code,
                        COUNT(DISTINCT inspection_no) AS total_inspection_count,
                        COUNT(DISTINCT item_no) AS distinct_item_count,
                        COUNT(DISTINCT inspection_no) FILTER (WHERE insp_status in (1, 2, 3 )) AS pending_inspection_count,
                        COUNT(DISTINCT item_no) FILTER (WHERE item_status in (1, 2, 3)) AS pending_item_count,
                        count(ps) FILTER (WHERE item_status in (1, 2,3)),
                        count(es) FILTER (WHERE item_status in (1, 2,3)), 
						count(oth) FILTER (WHERE item_status in (1, 2,3)), 
						count(ni) FILTER (WHERE item_status in (1, 2,3)), 
						count(si) FILTER (WHERE item_status in (1, 2,3)),
                        count(di) FILTER (WHERE item_status in (1, 2,3))
                        from insp_marked_sumry where marked_location_type in {}
                        and marked_location_code in {} and inspected_on between '{}' and '{}'    
                        and insp_desig_code in {} and insp_dept in {} and insp_status<>0 and item_status<>0 
                        and location_table in {} {}
                        GROUP BY marked_hq_code;'''.format(
                        tuple(irTypeValData), allLocationCodeData, startDate,
                        endDate, allDesignationData, allDepartmentData,value,col))

        data = cursor.fetchall()
    
    # elif(irTypeVal == 'IR' and card_type != 'Station'):
    #     print('ir1notstation')
    #     cursor.execute('''select marked_hq_code,
    #                     COUNT(DISTINCT inspection_no) AS total_inspection_count,
    #                     COUNT(DISTINCT item_no) AS distinct_item_count,
    #                     COUNT(DISTINCT inspection_no) FILTER (WHERE insp_status in (1, 2, 3 )) AS pending_inspection_count,
    #                     COUNT(DISTINCT item_no) FILTER (WHERE insp_status in (1, 2, 3)) AS pending_item_count,
    #                     sum(ps)::int,
    #                     sum(es)::int, sum(oth)::int, sum(ni)::int, sum(si)::int,
    #                     sum(di)::int
    #                     from insp_marked_sumry where marked_location_type in %s
    #                     and marked_location_code in %s and inspected_on between %s and %s    
    #                     and insp_desig_code in %s and insp_dept in %s and insp_status<>0 and item_status<>0 
    #                     and location_table in %s
    #                     GROUP BY marked_hq_code;''',
    #                     [tuple(irTypeValData), allLocationCodeData, startDate,
    #                     endDate, allDesignationData, allDepartmentData,value])

    #     data = cursor.fetchall()
    
    elif(irTypeVal == 'ZR' and card_type == 'Station'):
        print('inside zr')
        print('jkdjie',tuple(irTypeValData), allLocationCodeData)
        cursor.execute('''select marked_hq_code,
                        COUNT(DISTINCT inspection_no) AS total_inspection_count,
                        COUNT(DISTINCT item_no) AS distinct_item_count,
                        COUNT(DISTINCT inspection_no) FILTER (WHERE insp_status in (1, 2, 3 )) AS pending_inspection_count,
                        COUNT(DISTINCT item_no) FILTER (WHERE insp_status in (1, 2, 3)) AS pending_item_count,
                        count(ps) FILTER (WHERE insp_status in (1, 2,3)),
                        count(es) FILTER (WHERE insp_status in (1, 2,3)), 
						count(oth) FILTER (WHERE insp_status in (1, 2,3)), 
						count(ni) FILTER (WHERE insp_status in (1, 2,3)), 
						count(si) FILTER (WHERE insp_status in (1, 2,3)),
                        count(di) FILTER (WHERE insp_status in (1, 2,3))
                        from insp_marked_sumry where marked_location_type in %s
                        and marked_location_code in %s and inspected_on between %s and %s    
                        and insp_desig_code in %s and insp_dept in %s and insp_status<>0 and item_status<>0 
                        and location_table in %s
                        GROUP BY marked_hq_code;''',
                        [tuple(irTypeValData), allLocationCodeData, startDate,
                        endDate, allDesignationData, allDepartmentData,value])

        data = cursor.fetchall()
    
    elif(irTypeVal == 'ZR' and card_type != 'Station'):
        print('inside zr')
        print('jkdjie',tuple(irTypeValData), allLocationCodeData)
        cursor.execute('''select marked_hq_code,
                        COUNT(DISTINCT inspection_no) AS total_inspection_count,
                        COUNT(DISTINCT item_no) AS distinct_item_count,
                        COUNT(DISTINCT inspection_no) FILTER (WHERE insp_status in (1, 2, 3 )) AS pending_inspection_count,
                        COUNT(DISTINCT item_no) FILTER (WHERE insp_status in (1, 2, 3)) AS pending_item_count,
                        count(ps) FILTER (WHERE insp_status in (1, 2,3)),
                        count(es) FILTER (WHERE insp_status in (1, 2,3)), 
						count(oth) FILTER (WHERE insp_status in (1, 2,3)), 
						count(ni) FILTER (WHERE insp_status in (1, 2,3)), 
						count(si) FILTER (WHERE insp_status in (1, 2,3)),
                        count(di) FILTER (WHERE insp_status in (1, 2,3))
                        from insp_marked_sumry where marked_location_type in %s
                        and marked_location_code in %s and inspected_on between %s and %s    
                        and insp_desig_code in %s and insp_dept in %s and insp_status<>0 and item_status<>0 
                        and location_table in %s
                        GROUP BY marked_hq_code;''',
                        [tuple(irTypeValData), allLocationCodeData, startDate,
                        endDate, allDesignationData, allDepartmentData,value])

        data = cursor.fetchall()
    
    else:
        print('else2')
        cursor.execute('''select marked_hq_code, marked_location_code, location_val,location_table,
                        COUNT(DISTINCT inspection_no) AS total_inspection_count,
                        COUNT(DISTINCT item_no) AS distinct_item_count,
                        COUNT(DISTINCT inspection_no) FILTER (WHERE insp_status in (1, 2, 3 )) AS pending_inspection_count,
                        COUNT(DISTINCT item_no) FILTER (WHERE insp_status in (1, 2, 3)) AS pending_item_count,
                        count(ps) FILTER (WHERE insp_status in (1, 2,3)),
                        count(es) FILTER (WHERE insp_status in (1, 2,3)), 
						count(oth) FILTER (WHERE insp_status in (1, 2,3)), 
						count(ni) FILTER (WHERE insp_status in (1, 2,3)), 
						count(si) FILTER (WHERE insp_status in (1, 2,3)),
                        count(di) FILTER (WHERE insp_status in (1, 2,3))
                        from insp_marked_sumry where marked_location_type in %s
                        and marked_location_code in %s and inspected_on between %s and %s    
                        and insp_desig_code in %s and insp_dept in %s and insp_status<>0 and item_status<>0
                        and location_table in %s
                        GROUP BY marked_hq_code, marked_location_code, location_val,location_table;''',
                        [tuple(irTypeValData), allLocationCodeData, startDate,
                        endDate, allDesignationData, allDepartmentData,value])

        data = cursor.fetchall()
    
    print('dataval',data)

    context = {
        'data': data,
    }
    return JsonResponse(context, safe=False)

def pendencyDashboard(request):
    N_DAYS_AGO = 4
    today = datetime.now()    
    n_days_ago = today - timedelta(days=N_DAYS_AGO)
    daysArray=[]
    for i in range(5):
        daysArray.append((n_days_ago + timedelta(days=i)).strftime('%d/%m'))
    daysArray = list(reversed(daysArray))
    finYearCombined = finYear().split('-')
    curFinYear = finYearCombined[0]+'-'+(finYearCombined[1])[2:]
    prevFinYear = str(int(finYearCombined[0])-1)+'-'+(finYearCombined[0])[2:]

    if request.method == "POST" and request.is_ajax():
        typ = request.POST.get('typ')  
        
        if typ == 'DesignationDetails':
            dept = request.POST.get('dept')
            if(dept == 'All'):
                if irTypeVal == 'ZR':   
                    irTypeValData = ['ZR','DIV','WS']
                elif irTypeVal == 'All':   
                    irTypeValData = ['ZR','DIV','WS','PU']
                
                elif irTypeVal == 'HQ':
                    irTypeValData = ['ZR']
                else:
                    irTypeValData = [irTypeVal]
                
                if irDetailsVal == 'All':
                    allDesignation = list(models.Level_Desig.objects.filter(rly_unit__in = models.railwayLocationMaster.objects.filter(location_type__in = irTypeValData).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('designation'))
                else:
                    allDesignation = list(models.Level_Desig.objects.filter(rly_unit__in = models.railwayLocationMaster.objects.filter(Q(location_code=irDetailsVal) | Q(parent_location_code=irDetailsVal),location_type__in = irTypeValData).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('designation'))
                if irPath2 != '':
                    allDesignation = list(models.Level_Desig.objects.filter(rly_unit__in = models.railwayLocationMaster.objects.filter(Q(location_code=irPath2),location_type__in = irTypeValData).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('designation'))

            else:
                
                if irTypeVal == 'ZR':   
                    irTypeValData = ['ZR','DIV','WS']
                elif irTypeVal == 'All':   
                    irTypeValData = ['ZR','DIV','WS','PU']
                
                elif irTypeVal == 'HQ':
                    irTypeValData = ['ZR']
                else:
                    irTypeValData = [irTypeVal]
                if irDetailsVal == 'All':
                    allDesignation = list(models.Level_Desig.objects.filter(department_code=dept,rly_unit__in = models.railwayLocationMaster.objects.filter(location_type__in = irTypeValData).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('designation'))
                else:
                    allDesignation = list(models.Level_Desig.objects.filter(department_code=dept,rly_unit__in = models.railwayLocationMaster.objects.filter(Q(location_code=irDetailsVal) | Q(parent_location_code=irDetailsVal),location_type__in = irTypeValData).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('designation'))
                if irPath2 != '':
                    allDesignation = list(models.Level_Desig.objects.filter(department_code=dept,rly_unit__in = models.railwayLocationMaster.objects.filter(Q(location_code=irPath2),location_type__in = irTypeValData).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('designation'))




            for i in range(len(allDesignation)):
                d_level = allDesignation[i]['d_level']
                if d_level != None:
                    catData = list(models.category.objects.filter(category=d_level).values('hierarchy_level'))
                    if len(catData)>0:
                        if catData[0]['hierarchy_level'] != None:
                            allDesignation[i].update({'level':int(catData[0]['hierarchy_level'])})
                        else:
                            allDesignation[i].update({'level':1000})
                    else:
                        allDesignation[i].update({'level':1000})
                else:
                    allDesignation[i].update({'level':1000})
            allDesignation = sorted(allDesignation, key = lambda x: (x['level'],x['designation']))    

            return JsonResponse(allDesignation, safe = False)
        
        if typ == 'allDetails':

            irTypeVal = request.POST.get('typeId')
            irDetailsVal = request.POST.get('zoneId')
            divId = request.POST.get('divId')
            irSearchDate = request.POST.get('searchDate')
            irSearchDateTO = request.POST.get('searchDateTo')
            irSearchDept = request.POST.get('searchDepartment') 
            irSearchDesig = request.POST.get('searchDesignation')
            searchLevel = request.POST.get('searchLevel')
            dataZoneWs=[]

            #####################
            cursor = connection.cursor()
            if irTypeVal == 'PU':
                dataZoneWs = list(models.railwayLocationMaster.objects.filter(location_type='PU').values('location_description','location_code').distinct().order_by('location_code'))
                
            elif irTypeVal == 'DIV':
                zone = irDetailsVal
                dataZoneWs = list(models.railwayLocationMaster.objects.filter(parent_location_code=zone,location_type = 'DIV').values('location_code','location_description').order_by('location_code'))
               
            elif irTypeVal == 'WS':
                zone = irDetailsVal
                dataZoneWs = list(models.railwayLocationMaster.objects.filter(parent_location_code=zone,location_type = 'WS').values('location_code','location_description').order_by('location_code'))
                
            if irTypeVal == 'ZR':   
                irTypeValData = ['ZR','DIV','WS'] 

            elif irTypeVal == 'IR':   
                irTypeValData = ['ZR','DIV','WS','PU']

            elif irTypeVal == 'HQ':
                irTypeValData = ['ZR']
            else:
                irTypeValData = [irTypeVal]

            if irDetailsVal == '':
                allLocationCodeData = tuple(models.railwayLocationMaster.objects.filter(location_type__in = irTypeValData).values_list('location_code',flat=True).distinct())
                
            else:
                irPathVal1 = irDetailsVal
                allLocationCodeData = list(models.railwayLocationMaster.objects.filter(Q(parent_location_code=irDetailsVal)).values_list('location_code',flat=True).distinct())
                filterDivs=allLocationCodeData
                allLocationCodeData.append(irDetailsVal)
                allLocationCodeData = tuple(allLocationCodeData)
            
            if divId != '':
                irPathVal2 = divId
                allLocationCodeData = tuple([divId])
                irTypeValData = [irTypeVal]



            if irSearchDept == 'All':
                irSearchDept = ""
                allDepartmentData = tuple(models.departMast.objects.values_list('department_name',flat=True).distinct())
                    
                if irDetailsVal == '':
                    allDesignation = list(models.Level_Desig.objects.filter(rly_unit__in = models.railwayLocationMaster.objects.filter(location_type__in = irTypeValData).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('hierarchy_level','designation'))
                else:
                    allDesignation = list(models.Level_Desig.objects.filter(rly_unit__in = models.railwayLocationMaster.objects.filter(Q(location_code=irDetailsVal) | Q(parent_location_code=irDetailsVal),location_type__in = irTypeValData).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('hierarchy_level','designation'))
                if divId != '':
                    allDesignation = list(models.Level_Desig.objects.filter(rly_unit__in = models.railwayLocationMaster.objects.filter(Q(location_code=divId),location_type__in = irTypeValData).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('hierarchy_level','designation'))

            else:
                allDepartmentData = tuple(models.departMast.objects.filter(department_code=irSearchDept).values_list('department_name',flat=True).distinct())

                if irDetailsVal == '':
                    allDesignation = list(models.Level_Desig.objects.filter(department_code=irSearchDept,rly_unit__in = models.railwayLocationMaster.objects.filter(location_type__in = irTypeValData).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('hierarchy_level','designation'))
                else:
                    allDesignation = list(models.Level_Desig.objects.filter(department_code=irSearchDept,rly_unit__in = models.railwayLocationMaster.objects.filter(Q(location_code=irDetailsVal) | Q(parent_location_code=irDetailsVal),location_type__in = irTypeValData).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('hierarchy_level','designation'))
                if divId != '':
                    allDesignation = list(models.Level_Desig.objects.filter(department_code=irSearchDept,rly_unit__in = models.railwayLocationMaster.objects.filter(Q(location_code=divId),location_type__in = irTypeValData).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('hierarchy_level','designation'))


            if  irSearchDesig == 'All':
                irSearchDesig = ""
                allDesignationData = tuple(models.Level_Desig.objects.filter(rly_unit__in = models.railwayLocationMaster.objects.filter(location_type__in=['DIV','RB','ZR','WS','PU']).values('rly_unit_code')).values_list('designation_code',flat=True).distinct())
            else:
                irSearchDesig = int(irSearchDesig)
                allDesignationData = tuple([irSearchDesig])
                
            if irSearchDate == "":
                startDate = '2022-09-01'
                endDate = datetime.now().strftime('%Y-%m-%d')
            else:
                
                start1 = irSearchDate.split('/')
                end1 = irSearchDateTO.split('/')
                startDate = '20'+start1[2]+'-'+start1[1]+'-'+start1[0]
                endDate = '20'+end1[2]+'-'+end1[1]+'-'+end1[0]
            
            if searchLevel == 'GM':
                allDesignationData = tuple(models.Level_Desig.objects.filter(d_level = 'GM').values_list('designation_code',flat=True).distinct())
            elif searchLevel == 'DRM':
                allDesignationData = tuple(models.Level_Desig.objects.filter(d_level = 'DRM').values_list('designation_code',flat=True).distinct())
            elif searchLevel == 'BM':
                allDesignationData = tuple(models.Level_Desig.objects.filter(d_level = 'BM').values_list('designation_code',flat=True).distinct())
            elif searchLevel == 'SAG':
                desig_code = list(models.Level_Desig.objects.filter(pc7_levelmin__gte=14,pc7_levelmax__lte=15).values_list('designation_code',flat=True).distinct())
                allDesignationData = tuple(models.Level_Desig.objects.filter(designation_code__in=desig_code).values_list('designation_code',flat=True).distinct())
            elif searchLevel == 'JAG':
                desig_code = list(models.Level_Desig.objects.filter(pc7_levelmin__gte=12,pc7_levelmax__lte=13).values_list('designation_code',flat=True).distinct())
                allDesignationData = tuple(models.Level_Desig.objects.filter(designation_code__in=desig_code).values_list('designation_code',flat=True).distinct())
            elif searchLevel == 'SS/JS':
                desig_code = list(models.Level_Desig.objects.filter(pc7_levelmin__gte=8,pc7_levelmax__lte=11).values_list('designation_code',flat=True).distinct())
                allDesignationData = tuple(models.Level_Desig.objects.filter(designation_code__in=desig_code).values_list('designation_code',flat=True).distinct())
            

            allDesignation = [x for x in allDesignation if x['designation_code'] in allDesignationData]
            

            cursor.execute('''select sum(total_count_others)::int,sum(pending_count_others)::int,sum(pending_overdue_count_others)::int,            
                    sum(total_count_passenger_safety)::int,sum(pending_count_passenger_safety)::int,sum(pending_overdue_count_passenger_safety)::int,
                    sum(total_count_employee_safety)::int,sum(pending_count_employee_safety)::int,sum(pending_overdue_count_employee_safety)::int,
                    sum(pending_priority_count_others)::int,sum(pending_priority_count_passenger_safety)::int,sum(pending_priority_count_employee_safety)::int
                    from view_inspection_analysis_table1 where location_type in %s  and location_code in %s and inspected_on between %s and %s
                    and designation_code in %s and department in %s;''',[tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData])
            firstRowAllData = cursor.fetchall()
            firstRowAllData = [list([x if x != None else 0 for x in firstRowAllData[0] ])]
            cursor.execute('''select sum(total_count_night_inspection)::int,sum(pending_count_night_inspection)::int,sum(pending_overdue_count_night_inspection)::int,
                sum(total_count_surprise_inspection)::int,sum(pending_count_surprise_inspection)::int,sum(pending_overdue_count_surprise_inspection)::int,
                sum(total_count_drive_based_inspection)::int,sum(pending_count_drive_based_inspection)::int,sum(pending_overdue_count_drive_based_inspection)::int,sum(pending_priority_count_night_inspection)::int,sum(pending_priority_count_surprise_inspection)::int,sum(pending_priority_count_drive_based_inspection)::int
                from view_inspection_analysis_table2 where location_type in %s  and location_code in %s and inspected_on between %s and %s
                and designation_code in %s and department in %s;''',[tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData])
            secondRowAllData = cursor.fetchall()
            secondRowAllData = [list([x if x != None else 0 for x in secondRowAllData[0] ])]
            #########   forth row card(pendency)
            cursor.execute('''select sum(count_7_days_passenger_safety),sum(count_30_days_passenger_safety),sum(count_90_days_passenger_safety),
                sum(count_180_days_passenger_safety),sum(count_365_days_passenger_safety),
                sum(count_7_days_employee_safety),sum(count_30_days_employee_safety),sum(count_90_days_employee_safety),
                sum(count_180_days_employee_safety),sum(count_365_days_employee_safety),
                sum(count_7_days_others),sum(count_30_days_others),sum(count_90_days_others),
                sum(count_180_days_others),sum(count_365_days_others)
                from view_inspection_pendency_analysis_table1 where location_type in %s  and location_code in %s and inspected_on between %s and %s
                and designation_code in %s and department in %s;''',[tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData])
            pendencyDataCard1 = cursor.fetchall()
            pendencyDataCard1 = [list([x if x != None else 0 for x in pendencyDataCard1[0] ])]
            cursor.execute('''select sum(count_7_days_night_inspection),sum(count_30_days_night_inspection),sum(count_90_days_night_inspection),
                sum(count_180_days_night_inspection),sum(count_365_days_night_inspection),
                sum(count_7_days_surprise_inspection),sum(count_30_days_surprise_inspection),sum(count_90_days_surprise_inspection),
                sum(count_180_days_surprise_inspection),sum(count_365_days_surprise_inspection),
                sum(count_7_days_drive_based_inspection),sum(count_30_days_drive_based_inspection),sum(count_90_days_drive_based_inspection),
                sum(count_180_days_drive_based_inspection),sum(count_365_days_drive_based_inspection),
                sum(count_7_days_regular_inspection),sum(count_30_days_regular_inspection),sum(count_90_days_regular_inspection),
                sum(count_180_days_regular_inspection),sum(count_365_days_regular_inspection)
                from view_inspection_pendency_analysis_table2 where location_type in %s  and location_code in %s and inspected_on between %s and %s
                and designation_code in %s and department in %s;''',[tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData])
            pendencyDataCard2 = cursor.fetchall()
            pendencyDataCard2 = [list([x if x != None else 0 for x in pendencyDataCard2[0] ])]
            cursor.execute('''select  sum(total_count_station_passenger_safety),sum(total_count_station_employee_safety),sum(total_count_station_others),
                sum(total_count_station_night_inspection),sum(total_count_station_surprise_inspection),sum(total_count_station_drive_inspection),
                sum(total_count_section_passenger_safety),sum(total_count_section_employee_safety),sum(total_count_section_others),
                sum(total_count_section_night_inspection),sum(total_count_section_surprise_inspection),sum(total_count_section_drive_inspection),
                sum(total_count_train_passenger_safety),sum(total_count_train_employee_safety),sum(total_count_train_others),
                sum(total_count_train_night_inspection),sum(total_count_train_surprise_inspection),sum(total_count_train_drive_inspection),
                sum(total_count_others_passenger_safety),sum(total_count_others_employee_safety),sum(total_count_others_others),
                sum(total_count_others_night_inspection),sum(total_count_others_surprise_inspection),sum(total_count_others_drive_inspection)
                from view_inspection_analysis_table3 where location_type in %s  and location_code in %s and inspected_on between %s and %s
                and designation_code in %s and department in %s;''',[tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData])
            thirdRowData = cursor.fetchall()
            thirdRowData = [list([x if x != None else 0 for x in thirdRowData[0] ])]

            # overallTotalCount =   firstRowAllData[0][0]+firstRowAllData[0][3]+firstRowAllData[0][6]+secondRowAllData[0][0]+secondRowAllData[0][3]+secondRowAllData[0][6]   
            # overallPendingCount = firstRowAllData[0][1]+firstRowAllData[0][4]+firstRowAllData[0][7]+secondRowAllData[0][1]+secondRowAllData[0][4]+secondRowAllData[0][7]  
            # overallOverdueCount = firstRowAllData[0][2]+firstRowAllData[0][5]+firstRowAllData[0][8]+secondRowAllData[0][2]+secondRowAllData[0][5]+secondRowAllData[0][8] 
            # overallTotalCount =   firstRowAllData[0][0]+firstRowAllData[0][3]+firstRowAllData[0][6]   
            # overallPendingCount = firstRowAllData[0][1]+firstRowAllData[0][4]+firstRowAllData[0][7]  
            # overallOverdueCount = firstRowAllData[0][2]+firstRowAllData[0][5]+firstRowAllData[0][8] 


            overallInspection = 0
            pendingInspection = 0
            overdueInspection = 0

            print(startDate,endDate,allDepartmentData,"Apeksha",allDesignationData)

            # cursor.execute('''select distinct(inspection_no) from insp_marked_sumry where insp_status not in('0') and marked_location_type in %s  and marked_location_code in %s and inspected_on between %s and %s
            #     and marked_officer_id in %s and marked_officer_department in %s;''',[tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData])
            # overallInspection = len(list(cursor.fetchall()))
            cursor.execute('''select count (distinct inspection_note_no) from public.insp_marked_sumry where insp_status!=0 and marked_location_type in %s  and marked_location_code in %s and final_submit_on between %s and %s
                and marked_officer_id in %s and marked_officer_department in %s;''',[tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData])
            overallInspection = cursor.fetchall()
            overallInspection = overallInspection[0][0]

            # cursor.execute('''select count (distinct inspection_note_no) from public.insp_marked_sumry where insp_status!=0 and marked_hq_code = %s  and( marked_div_code in %s or marked_div_code is NULL) and final_submit_on between %s and %s
            #     and marked_officer_id in %s and marked_officer_department in %s;''',[tuple(filterZones),tuple(filterDivs),startDate,endDate,allDesignationData,allDepartmentData])
            # overallInspection = len(list(cursor.fetchall()))
            # print(overallInspection,"overallInspection")
            
            cursor.execute('''select count (distinct inspection_note_no) from public.insp_marked_sumry where insp_status not in (0,4) and marked_location_type in %s  and marked_location_code in %s and inspected_on between %s and %s
                and marked_officer_id in %s and marked_officer_department in %s;''',[tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData])
            pendingInspection = cursor.fetchall()
            pendingInspection = pendingInspection[0][0]



            cursor.execute('''select count (distinct inspection_note_no) from public.insp_marked_sumry where insp_status not in (0,4) and overdue_flag=1 and  marked_location_type in %s  and marked_location_code in %s and inspected_on between %s and %s
                and marked_officer_id in %s and marked_officer_department in %s;''',[tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData])
            overdueInspection = cursor.fetchall()
            overdueInspection = overdueInspection[0][0]


            cursor.execute('''select count (distinct inspection_note_no) from public.insp_marked_sumry where insp_status not in (0,4) and priority!=0 and marked_location_type in %s  and marked_location_code in %s and inspected_on between %s and %s
                and marked_officer_id in %s and marked_officer_department in %s;''',[tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData])
            priorityInspection = cursor.fetchall()
            priorityInspection = priorityInspection[0][0]

            cursor.execute('''select count (distinct item_no) from public.insp_marked_sumry where item_status!=0 and marked_location_type in %s  and marked_location_code in %s and inspected_on between %s and %s
                and marked_officer_id in %s and marked_officer_department in %s;''',[tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData])
            overallTotalCount = cursor.fetchall()
            overallTotalCount = overallTotalCount[0][0]

            cursor.execute('''select count (distinct item_no) from public.insp_marked_sumry where item_status not in (0,4) and marked_location_type in %s  and marked_location_code in %s and inspected_on between %s and %s
                and marked_officer_id in %s and marked_officer_department in %s;''',[tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData])
            overallPendingCount = cursor.fetchall()
            overallPendingCount = overallPendingCount[0][0]

            cursor.execute('''select count (distinct item_no) from public.insp_marked_sumry where item_status not in (0,4) and overdue_flag=1 and marked_location_type in %s  and marked_location_code in %s and inspected_on between %s and %s
                and marked_officer_id in %s and marked_officer_department in %s;''',[tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData])
            overallOverdueCount = cursor.fetchall()
            overallOverdueCount = overallOverdueCount[0][0]


            cursor.execute('''select count (distinct item_no) from public.insp_marked_sumry where item_status not in (0,4) and priority!=0 and marked_location_type in %s  and marked_location_code in %s and inspected_on between %s and %s
                and marked_officer_id in %s and marked_officer_department in %s;''',[tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData])
            overallPriorityCount = cursor.fetchall()
            overallPriorityCount = overallPriorityCount[0][0]




            cursor.execute('''select count (distinct item_no) from public.insp_marked_sumry where item_status not in (0,4) and item_type=1 and location_table='STM' and marked_location_type in %s  and marked_location_code in %s and inspected_on between %s and %s
                and marked_officer_id in %s and marked_officer_department in %s;''',[tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData])
            psStation = cursor.fetchall()
            psStation = psStation[0][0]

            cursor.execute('''select count (distinct item_no) from public.insp_marked_sumry where item_status not in (0,4) and item_type=2 and location_table='STM' and marked_location_type in %s  and marked_location_code in %s and inspected_on between %s and %s
                and marked_officer_id in %s and marked_officer_department in %s;''',[tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData])
            esStation = cursor.fetchall()
            esStation = esStation[0][0]

            cursor.execute('''select count (distinct item_no) from public.insp_marked_sumry where item_status not in (0,4) and item_type=0 and location_table='STM' and marked_location_type in %s  and marked_location_code in %s and inspected_on between %s and %s
                and marked_officer_id in %s and marked_officer_department in %s;''',[tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData])
            osStation = cursor.fetchall()
            osStation = osStation[0][0]

            cursor.execute('''select count (distinct item_no) from public.insp_marked_sumry where item_status not in (0,4) and insp_type=2 and location_table='STM' and marked_location_type in %s  and marked_location_code in %s and inspected_on between %s and %s
                and marked_officer_id in %s and marked_officer_department in %s;''',[tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData])
            niStation = cursor.fetchall()
            niStation = niStation[0][0]

            cursor.execute('''select count (distinct item_no) from public.insp_marked_sumry where item_status not in (0,4) and insp_type=3 and location_table='STM' and marked_location_type in %s  and marked_location_code in %s and inspected_on between %s and %s
                and marked_officer_id in %s and marked_officer_department in %s;''',[tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData])
            siStation = cursor.fetchall()
            siStation = siStation[0][0]

            cursor.execute('''select count (distinct item_no) from public.insp_marked_sumry where item_status not in (0,4) and insp_type=1 and location_table='STM' and marked_location_type in %s  and marked_location_code in %s and inspected_on between %s and %s
                and marked_officer_id in %s and marked_officer_department in %s;''',[tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData])
            diStation = cursor.fetchall()
            diStation = diStation[0][0]


    
            cursor.execute('''select count (distinct item_no) from public.insp_marked_sumry where item_status not in (0,4) and item_type=1 and location_table='SEM' and marked_location_type in %s  and marked_location_code in %s and inspected_on between %s and %s
                and marked_officer_id in %s and marked_officer_department in %s;''',[tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData])
            psSection = cursor.fetchall()
            psSection = psSection[0][0]

            cursor.execute('''select count (distinct item_no) from public.insp_marked_sumry where item_status not in (0,4) and item_type=2 and location_table='SEM' and marked_location_type in %s  and marked_location_code in %s and inspected_on between %s and %s
                and marked_officer_id in %s and marked_officer_department in %s;''',[tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData])
            esSection = cursor.fetchall()
            esSection = esSection[0][0]

            cursor.execute('''select count (distinct item_no) from public.insp_marked_sumry where item_status not in (0,4) and item_type=0 and location_table='SEM' and marked_location_type in %s  and marked_location_code in %s and inspected_on between %s and %s
                and marked_officer_id in %s and marked_officer_department in %s;''',[tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData])
            osSection = cursor.fetchall()
            osSection = osSection[0][0]

            cursor.execute('''select count (distinct item_no) from public.insp_marked_sumry where item_status not in (0,4) and insp_type=2 and location_table='SEM' and marked_location_type in %s  and marked_location_code in %s and inspected_on between %s and %s
                and marked_officer_id in %s and marked_officer_department in %s;''',[tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData])
            niSection = cursor.fetchall()
            niSection = niSection[0][0]

            cursor.execute('''select count (distinct item_no) from public.insp_marked_sumry where item_status not in (0,4) and insp_type=3 and location_table='SEM' and marked_location_type in %s  and marked_location_code in %s and inspected_on between %s and %s
                and marked_officer_id in %s and marked_officer_department in %s;''',[tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData])
            siSection = cursor.fetchall()
            siSection = siSection[0][0]

            cursor.execute('''select count (distinct item_no) from public.insp_marked_sumry where item_status not in (0,4) and insp_type=1 and location_table='SEM' and marked_location_type in %s  and marked_location_code in %s and inspected_on between %s and %s
                and marked_officer_id in %s and marked_officer_department in %s;''',[tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData])
            diSection = cursor.fetchall()
            diSection = diSection[0][0]


            cursor.execute('''select count (distinct item_no) from public.insp_marked_sumry where item_status not in (0,4) and item_type=1 and location_table='TRN' and marked_location_type in %s  and marked_location_code in %s and inspected_on between %s and %s
                and marked_officer_id in %s and marked_officer_department in %s;''',[tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData])
            psTrain = cursor.fetchall()
            psTrain = psTrain[0][0]

            cursor.execute('''select count (distinct item_no) from public.insp_marked_sumry where item_status not in (0,4) and item_type=2 and location_table='TRN' and marked_location_type in %s  and marked_location_code in %s and inspected_on between %s and %s
                and marked_officer_id in %s and marked_officer_department in %s;''',[tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData])
            esTrain = cursor.fetchall()
            esTrain = esTrain[0][0]

            cursor.execute('''select count (distinct item_no) from public.insp_marked_sumry where item_status not in (0,4) and item_type=0 and location_table='TRN' and marked_location_type in %s  and marked_location_code in %s and inspected_on between %s and %s
                and marked_officer_id in %s and marked_officer_department in %s;''',[tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData])
            osTrain = cursor.fetchall()
            osTrain = osTrain[0][0]

            cursor.execute('''select count (distinct item_no) from public.insp_marked_sumry where item_status not in (0,4) and insp_type=2 and location_table='TRN' and marked_location_type in %s  and marked_location_code in %s and inspected_on between %s and %s
                and marked_officer_id in %s and marked_officer_department in %s;''',[tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData])
            niTrain = cursor.fetchall()
            niTrain = niTrain[0][0]

            cursor.execute('''select count (distinct item_no) from public.insp_marked_sumry where item_status not in (0,4) and insp_type=3 and location_table='TRN' and marked_location_type in %s  and marked_location_code in %s and inspected_on between %s and %s
                and marked_officer_id in %s and marked_officer_department in %s;''',[tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData])
            siTrain = cursor.fetchall()
            siTrain = siTrain[0][0]

            cursor.execute('''select count (distinct item_no) from public.insp_marked_sumry where item_status not in (0,4) and insp_type=1 and location_table='TRN' and marked_location_type in %s  and marked_location_code in %s and inspected_on between %s and %s
                and marked_officer_id in %s and marked_officer_department in %s;''',[tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData])
            diTrain = cursor.fetchall()
            diTrain = diTrain[0][0]


            cursor.execute('''select count (distinct item_no) from public.insp_marked_sumry where item_status not in (0,4) and item_type=1 and location_table in ('DLS','RRM','HOS','ORL') and marked_location_type in %s  and marked_location_code in %s and inspected_on between %s and %s
                and marked_officer_id in %s and marked_officer_department in %s;''',[tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData])
            psOther = cursor.fetchall()
            psOther = psOther[0][0]

            cursor.execute('''select count (distinct item_no) from public.insp_marked_sumry where item_status not in (0,4) and item_type=2 and location_table in ('DLS','RRM','HOS','ORL') and marked_location_type in %s  and marked_location_code in %s and inspected_on between %s and %s
                and marked_officer_id in %s and marked_officer_department in %s;''',[tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData])
            esOther = cursor.fetchall()
            esOther = esOther[0][0]

            cursor.execute('''select count (distinct item_no) from public.insp_marked_sumry where item_status not in (0,4) and item_type=0 and location_table in ('DLS','RRM','HOS','ORL') and marked_location_type in %s  and marked_location_code in %s and inspected_on between %s and %s
                and marked_officer_id in %s and marked_officer_department in %s;''',[tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData])
            osOther = cursor.fetchall()
            osOther = osOther[0][0]

            cursor.execute('''select count (distinct item_no) from public.insp_marked_sumry where item_status not in (0,4) and insp_type=2 and location_table in ('DLS','RRM','HOS','ORL') and marked_location_type in %s  and marked_location_code in %s and inspected_on between %s and %s
                and marked_officer_id in %s and marked_officer_department in %s;''',[tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData])
            niOther = cursor.fetchall()
            niOther = niOther[0][0]

            cursor.execute('''select count (distinct item_no) from public.insp_marked_sumry where item_status not in (0,4) and insp_type=3 and location_table in ('DLS','RRM','HOS','ORL') and marked_location_type in %s  and marked_location_code in %s and inspected_on between %s and %s
                and marked_officer_id in %s and marked_officer_department in %s;''',[tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData])
            siOther = cursor.fetchall()
            siOther = siOther[0][0]

            cursor.execute('''select count (distinct item_no) from public.insp_marked_sumry where item_status not in (0,4) and insp_type=1 and location_table in ('DLS','RRM','HOS','ORL') and marked_location_type in %s  and marked_location_code in %s and inspected_on between %s and %s
                and marked_officer_id in %s and marked_officer_department in %s;''',[tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData])
            diOther = cursor.fetchall()
            diOther = diOther[0][0]



            
            print(firstRowAllData)
            context = {
                'priorityInspection':priorityInspection,
                'overallPriorityCount':overallPriorityCount,
                'dataZoneWs':dataZoneWs,
                'firstRowAllData':firstRowAllData,
                'secondRowAllData':secondRowAllData,
                'thirdRowData':thirdRowData,
                'pendencyDataCard1':pendencyDataCard1,
                'pendencyDataCard2':pendencyDataCard2,
                'overallTotalCount':overallTotalCount,
                'overallPendingCount':overallPendingCount,
                'overallOverdueCount':overallOverdueCount,
                'allDesignation':allDesignation,
                'overallInspection':overallInspection,
                'pendingInspection':pendingInspection,
                'overdueInspection':overdueInspection,
                
                'psStation':psStation,
                'esStation':esStation,
                'osStation':osStation,
                'niStation':niStation,
                'siStation':siStation,
                'diStation':diStation,
                'psSection':psSection,
                'esSection':esSection,
                'osSection':osSection,
                'niSection':niSection,
                'siSection':siSection,
                'diSection':diSection,
                'psTrain':psTrain,
                'esTrain':esTrain,
                'osTrain':osTrain,
                'niTrain':niTrain,
                'siTrain':siTrain,
                'diTrain':diTrain,
                'psOther':psOther,
                'esOther':esOther,
                'osOther':osOther,
                'niOther':niOther,
                'siOther':siOther,
                'diOther':diOther,

            }
            return JsonResponse(context, safe = False)
    

    allDesignation = list(models.Level_Desig.objects.filter(rly_unit__in = models.railwayLocationMaster.objects.filter(location_type__in=['DIV','RB','ZR','PU','WS']).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('hierarchy_level','designation'))
    allDepartment = list(models.departMast.objects.values('department_name','department_code').distinct().order_by('department_name'))
    cursor = connection.cursor()
    if request.method == "GET":
        

        cursor.execute('''select sum(total_count_others)::int,sum(pending_count_others)::int,sum(pending_overdue_count_others)::int,
                round((case when sum(total_count_others) != 0 then sum(pending_count_others) / sum(total_count_others) else 0 end) *100,2),
                round((case when sum(total_count_others) != 0 then sum(pending_overdue_count_others) / sum(total_count_others) else 0 end) *100,2),
                sum(last_one_days_count_others)::int,sum(last_two_days_count_others)::int,sum(last_three_days_count_others)::int,
                sum(last_four_days_count_others)::int,sum(last_five_days_count_others)::int,            
                sum(total_count_passenger_safety)::int,sum(pending_count_passenger_safety)::int,sum(pending_overdue_count_passenger_safety)::int,
                round((case when sum(total_count_passenger_safety) != 0 then sum(pending_count_passenger_safety) / sum(total_count_passenger_safety) else 0 end) *100,2),
                round((case when sum(total_count_passenger_safety) != 0 then sum(pending_overdue_count_passenger_safety) / sum(total_count_passenger_safety) else 0 end) *100,2),
                sum(last_one_days_count_passenger_safety)::int,sum(last_two_days_count_passenger_safety)::int,sum(last_three_days_count_passenger_safety)::int,
                sum(last_four_days_count_passenger_safety)::int,sum(last_five_days_count_passenger_safety)::int,
                sum(total_count_employee_safety)::int,sum(pending_count_employee_safety)::int,sum(pending_overdue_count_employee_safety)::int,
                round((case when sum(total_count_employee_safety) != 0 then sum(pending_count_employee_safety) / sum(total_count_employee_safety) else 0 end) *100,2),
                round((case when sum(total_count_employee_safety) != 0 then sum(pending_overdue_count_employee_safety) / sum(total_count_employee_safety) else 0 end) *100,2),
                sum(last_one_days_count_employee_safety)::int,sum(last_two_days_count_employee_safety)::int,sum(last_three_days_count_employee_safety)::int,
                sum(last_four_days_count_employee_safety)::int,sum(last_five_days_count_employee_safety)::int,sum(pending_priority_count_others)::int,sum(pending_priority_count_passenger_safety)::int,sum(pending_priority_count_employee_safety)::int
                from inspection_analysis_table1;''')
        firstRowAllData = cursor.fetchall()



        cursor.execute('''select sum(total_count_night_inspection)::int,sum(pending_count_night_inspection)::int,sum(pending_overdue_count_night_inspection)::int,
            round((case when sum(total_count_night_inspection) != 0 then sum(pending_count_night_inspection) / sum(total_count_night_inspection) else 0 end) *100,2),
            round((case when sum(total_count_night_inspection) != 0 then sum(pending_overdue_count_night_inspection) / sum(total_count_night_inspection) else 0 end) *100,2),
            sum(last_one_days_count_night_inspection)::int,sum(last_two_days_count_night_inspection)::int,sum(last_three_days_count_night_inspection)::int,
            sum(last_four_days_count_night_inspection)::int,sum(last_five_days_count_night_inspection)::int,    
            sum(total_count_surprise_inspection)::int,sum(pending_count_surprise_inspection)::int,sum(pending_overdue_count_surprise_inspection)::int,
            round((case when sum(total_count_surprise_inspection) != 0 then sum(pending_count_surprise_inspection) / sum(total_count_surprise_inspection) else 0 end) *100,2),
            round((case when sum(total_count_surprise_inspection) != 0 then sum(pending_overdue_count_surprise_inspection) / sum(total_count_surprise_inspection) else 0 end) *100,2),
            sum(last_one_days_count_surprise_inspection)::int,sum(last_two_days_count_surprise_inspection)::int,sum(last_three_days_count_surprise_inspection)::int,
            sum(last_four_days_count_surprise_inspection)::int,sum(last_five_days_count_surprise_inspection)::int,
            sum(total_count_drive_based_inspection)::int,sum(pending_count_drive_based_inspection)::int,sum(pending_overdue_count_drive_based_inspection)::int,
            round((case when sum(total_count_drive_based_inspection) != 0 then sum(pending_count_drive_based_inspection) / sum(total_count_drive_based_inspection) else 0 end) *100,2),
            round((case when sum(total_count_drive_based_inspection) != 0 then sum(pending_overdue_count_drive_based_inspection) / sum(total_count_drive_based_inspection) else 0 end) *100,2),
            sum(last_one_days_count_drive_based_inspection)::int,sum(last_two_days_count_drive_based_inspection)::int,sum(last_three_days_count_drive_based_inspection)::int,
            sum(last_four_days_count_drive_based_inspection)::int,sum(last_five_days_count_drive_based_inspection)::int,sum(pending_priority_count_night_inspection)::int,sum(pending_priority_count_surprise_inspection)::int,sum(pending_priority_count_drive_based_inspection)::int
            from inspection_analysis_table2;''')
        secondRowAllData = cursor.fetchall()

        #########   forth row card(pendency)

        cursor.execute('''select sum(count_7_days_passenger_safety),sum(count_30_days_passenger_safety),sum(count_90_days_passenger_safety),
            sum(count_180_days_passenger_safety),sum(count_365_days_passenger_safety),
            sum(count_7_days_employee_safety),sum(count_30_days_employee_safety),sum(count_90_days_employee_safety),
            sum(count_180_days_employee_safety),sum(count_365_days_employee_safety),
            sum(count_7_days_others),sum(count_30_days_others),sum(count_90_days_others),
            sum(count_180_days_others),sum(count_365_days_others)
            from inspection_pendency_analysis_table1;''')
        pendencyDataCard1 = cursor.fetchall()

        cursor.execute('''select sum(count_7_days_night_inspection),sum(count_30_days_night_inspection),sum(count_90_days_night_inspection),
            sum(count_180_days_night_inspection),sum(count_365_days_night_inspection),
            sum(count_7_days_surprise_inspection),sum(count_30_days_surprise_inspection),sum(count_90_days_surprise_inspection),
            sum(count_180_days_surprise_inspection),sum(count_365_days_surprise_inspection),
            sum(count_7_days_drive_based_inspection),sum(count_30_days_drive_based_inspection),sum(count_90_days_drive_based_inspection),
            sum(count_180_days_drive_based_inspection),sum(count_365_days_drive_based_inspection),
            sum(count_7_days_regular_inspection),sum(count_30_days_regular_inspection),sum(count_90_days_regular_inspection),
            sum(count_180_days_regular_inspection),sum(count_365_days_regular_inspection)
            from inspection_pendency_analysis_table2;''')
        pendencyDataCard2 = cursor.fetchall()


        cursor.execute('''select  sum(total_count_station_passenger_safety),sum(total_count_station_employee_safety),sum(total_count_station_others),
            sum(total_count_station_night_inspection),sum(total_count_station_surprise_inspection),sum(total_count_station_drive_inspection),
            sum(total_count_section_passenger_safety),sum(total_count_section_employee_safety),sum(total_count_section_others),
            sum(total_count_section_night_inspection),sum(total_count_section_surprise_inspection),sum(total_count_section_drive_inspection),
            sum(total_count_train_passenger_safety),sum(total_count_train_employee_safety),sum(total_count_train_others),
            sum(total_count_train_night_inspection),sum(total_count_train_surprise_inspection),sum(total_count_train_drive_inspection),
            sum(total_count_others_passenger_safety),sum(total_count_others_employee_safety),sum(total_count_others_others),
            sum(total_count_others_night_inspection),sum(total_count_others_surprise_inspection),sum(total_count_others_drive_inspection),
            round((case when sum(total_count_station_passenger_safety) != 0 then sum(pending_count_station_passenger_safety) / sum(total_count_station_passenger_safety) else 0 end) *100,2),
            round((case when sum(total_count_station_employee_safety) != 0 then sum(pending_count_station_employee_safety) / sum(total_count_station_employee_safety) else 0 end) *100,2),
            round((case when sum(total_count_station_others) != 0 then sum(pending_count_station_others) / sum(total_count_station_others) else 0 end) *100,2),
            round((case when sum(total_count_station_night_inspection) != 0 then sum(pending_count_station_night_inspection) / sum(total_count_station_night_inspection) else 0 end) *100,2),
            round((case when sum(total_count_station_surprise_inspection) != 0 then sum(pending_count_station_surprise_inspection) / sum(total_count_station_surprise_inspection) else 0 end) *100,2),
            round((case when sum(total_count_station_drive_inspection) != 0 then sum(pending_count_station_drive_inspection) / sum(total_count_station_drive_inspection) else 0 end) *100,2),
            round((case when sum(total_count_section_passenger_safety) != 0 then sum(pending_count_section_passenger_safety) / sum(total_count_section_passenger_safety) else 0 end) *100,2),
            round((case when sum(total_count_section_employee_safety) != 0 then sum(pending_count_section_employee_safety) / sum(total_count_section_employee_safety) else 0 end) *100,2),
            round((case when sum(total_count_section_others) != 0 then sum(pending_count_section_others) / sum(total_count_section_others) else 0 end) *100,2),
            round((case when sum(total_count_section_night_inspection) != 0 then sum(pending_count_section_night_inspection) / sum(total_count_section_night_inspection) else 0 end) *100,2),
            round((case when sum(total_count_section_surprise_inspection) != 0 then sum(pending_count_section_surprise_inspection) / sum(total_count_section_surprise_inspection) else 0 end) *100,2),
            round((case when sum(total_count_section_drive_inspection) != 0 then sum(pending_count_section_drive_inspection) / sum(total_count_section_drive_inspection) else 0 end) *100,2),
            round((case when sum(total_count_train_passenger_safety) != 0 then sum(pending_count_train_passenger_safety) / sum(total_count_train_passenger_safety) else 0 end) *100,2),
            round((case when sum(total_count_train_employee_safety) != 0 then sum(pending_count_train_employee_safety) / sum(total_count_train_employee_safety) else 0 end) *100,2),
            round((case when sum(total_count_train_others) != 0 then sum(pending_count_train_others) / sum(total_count_train_others) else 0 end) *100,2),
            round((case when sum(total_count_train_night_inspection) != 0 then sum(pending_count_train_night_inspection) / sum(total_count_train_night_inspection) else 0 end) *100,2),
            round((case when sum(total_count_train_surprise_inspection) != 0 then sum(pending_count_train_surprise_inspection) / sum(total_count_train_surprise_inspection) else 0 end) *100,2),
            round((case when sum(total_count_train_drive_inspection) != 0 then sum(pending_count_train_drive_inspection) / sum(total_count_train_drive_inspection) else 0 end) *100,2),
            round((case when sum(total_count_others_passenger_safety) != 0 then sum(pending_count_others_passenger_safety) / sum(total_count_others_passenger_safety) else 0 end) *100,2),
            round((case when sum(total_count_others_employee_safety) != 0 then sum(pending_count_others_employee_safety) / sum(total_count_others_employee_safety) else 0 end) *100,2),
            round((case when sum(total_count_others_others) != 0 then sum(pending_count_others_others) / sum(total_count_others_others) else 0 end) *100,2),
            round((case when sum(total_count_others_night_inspection) != 0 then sum(total_count_others_night_inspection) / sum(total_count_others_night_inspection) else 0 end) *100,2),
            round((case when sum(total_count_others_surprise_inspection) != 0 then sum(total_count_others_surprise_inspection) / sum(total_count_others_surprise_inspection) else 0 end) *100,2),
            round((case when sum(total_count_others_drive_inspection) != 0 then sum(total_count_others_drive_inspection) / sum(total_count_others_drive_inspection) else 0 end) *100,2)
            from inspection_analysis_table3;''')
        thirdRowData = cursor.fetchall()

        
        irTypeVal = 'PU'
        irDetailsVal = 'All'
        irMapVal = '1'
        irPathVal1 = None
        irPathVal2 = ''
        dataZoneWs = []
        irPath2 = None
        irSearchDept = ""
        irSearchDate = ""
        irSearchDesig = ""
    
          
    # overallTotalCount =   firstRowAllData[0][10]+firstRowAllData[0][20]+firstRowAllData[0][0]+secondRowAllData[0][10]+secondRowAllData[0][20]+secondRowAllData[0][0]  
    # overallPendingCount = firstRowAllData[0][11]+firstRowAllData[0][21]+firstRowAllData[0][1]+secondRowAllData[0][11]+secondRowAllData[0][21]+secondRowAllData[0][1] 
    # overallOverdueCount = firstRowAllData[0][12]+firstRowAllData[0][22]+firstRowAllData[0][2]+secondRowAllData[0][12]+secondRowAllData[0][22]+secondRowAllData[0][2]
    

    # cursor.execute('''select distinct(inspection_no) from insp_marked_sumry where insp_status not in('0');''')
    # overallInspection = len(list(cursor.fetchall()))
    
    
    # cursor.execute('''select distinct(inspection_no) from insp_marked_sumry where insp_status not in ('0','4');''')
    # pendingInspection = len(list(cursor.fetchall()))
    # cursor.execute('''select distinct(inspection_no) from insp_marked_sumry group by inspection_no,overdue_flag having overdue_flag = 1;''')
    # overdueInspection = len(list(cursor.fetchall()))

    # cursor.execute('''select distinct(inspection_no) from insp_marked_sumry where priority not in('0');''')
    # priorityInspection = len(list(cursor.fetchall()))
    # cursor.execute('''select distinct(item_no) from insp_marked_sumry where priority not in('0');''')
    # overallPriorityCount = len(list(cursor.fetchall()))


    cursor.execute('''select count (distinct inspection_note_no) from public.insp_marked_sumry where insp_status!=0;''')
    overallInspection = cursor.fetchall()
    overallInspection = overallInspection[0][0]

    cursor.execute('''select count (distinct inspection_note_no) from public.insp_marked_sumry where insp_status not in (0,4);''')
    pendingInspection = cursor.fetchall()
    pendingInspection = pendingInspection[0][0]


    cursor.execute('''select count (distinct inspection_note_no) from public.insp_marked_sumry where insp_status not in (0,4) and overdue_flag=1;''')
    overdueInspection = cursor.fetchall()
    overdueInspection = overdueInspection[0][0]


    cursor.execute('''select count (distinct inspection_note_no) from public.insp_marked_sumry where insp_status not in (0,4) and priority!=0;''')
    priorityInspection = cursor.fetchall()
    priorityInspection = priorityInspection[0][0]

    cursor.execute('''select count (distinct item_no) from public.insp_marked_sumry where item_status!=0;''')
    overallTotalCount = cursor.fetchall()
    overallTotalCount = overallTotalCount[0][0]

    cursor.execute('''select count (distinct item_no) from public.insp_marked_sumry where item_status not in (0,4);''')
    overallPendingCount = cursor.fetchall()
    overallPendingCount = overallPendingCount[0][0]

    cursor.execute('''select count (distinct item_no) from public.insp_marked_sumry where item_status not in (0,4) and overdue_flag=1;''')
    overallOverdueCount = cursor.fetchall()
    overallOverdueCount = overallOverdueCount[0][0]

    cursor.execute('''select count (distinct item_no) from public.insp_marked_sumry where item_status not in (0,4) and priority!=0;''')
    overallPriorityCount = cursor.fetchall()
    overallPriorityCount = overallPriorityCount[0][0]


    cursor.execute('''select count (distinct item_no) from public.insp_marked_sumry where item_status not in (0,4) and item_type=1 and location_table='STM';''')
    psStation = cursor.fetchall()
    psStation = psStation[0][0]

    cursor.execute('''select count (distinct item_no) from public.insp_marked_sumry where item_status not in (0,4) and item_type=2 and location_table='STM';''')
    esStation = cursor.fetchall()
    esStation = esStation[0][0]

    cursor.execute('''select count (distinct item_no) from public.insp_marked_sumry where item_status not in (0,4) and item_type=0 and location_table='STM';''')
    osStation = cursor.fetchall()
    osStation = osStation[0][0]

    cursor.execute('''select count (distinct item_no) from public.insp_marked_sumry where item_status not in (0,4) and insp_type=2 and location_table='STM';''')
    niStation = cursor.fetchall()
    niStation = niStation[0][0]

    cursor.execute('''select count (distinct item_no) from public.insp_marked_sumry where item_status not in (0,4) and insp_type=3 and location_table='STM';''')
    siStation = cursor.fetchall()
    siStation = siStation[0][0]

    cursor.execute('''select count (distinct item_no) from public.insp_marked_sumry where item_status not in (0,4) and insp_type=1 and location_table='STM';''')
    diStation = cursor.fetchall()
    diStation = diStation[0][0]


    
    cursor.execute('''select count (distinct item_no) from public.insp_marked_sumry where item_status not in (0,4) and item_type=1 and location_table='SEM';''')
    psSection = cursor.fetchall()
    psSection = psSection[0][0]

    cursor.execute('''select count (distinct item_no) from public.insp_marked_sumry where item_status not in (0,4) and item_type=2 and location_table='SEM';''')
    esSection = cursor.fetchall()
    esSection = esSection[0][0]

    cursor.execute('''select count (distinct item_no) from public.insp_marked_sumry where item_status not in (0,4) and item_type=0 and location_table='SEM';''')
    osSection = cursor.fetchall()
    osSection = osSection[0][0]

    cursor.execute('''select count (distinct item_no) from public.insp_marked_sumry where item_status not in (0,4) and insp_type=2 and location_table='SEM';''')
    niSection = cursor.fetchall()
    niSection = niSection[0][0]

    cursor.execute('''select count (distinct item_no) from public.insp_marked_sumry where item_status not in (0,4) and insp_type=3 and location_table='SEM';''')
    siSection = cursor.fetchall()
    siSection = siSection[0][0]

    cursor.execute('''select count (distinct item_no) from public.insp_marked_sumry where item_status not in (0,4) and insp_type=1 and location_table='SEM';''')
    diSection = cursor.fetchall()
    diSection = diSection[0][0]


    cursor.execute('''select count (distinct item_no) from public.insp_marked_sumry where item_status not in (0,4) and item_type=1 and location_table='TRN';''')
    psTrain = cursor.fetchall()
    psTrain = psTrain[0][0]

    cursor.execute('''select count (distinct item_no) from public.insp_marked_sumry where item_status not in (0,4) and item_type=2 and location_table='TRN';''')
    esTrain = cursor.fetchall()
    esTrain = esTrain[0][0]

    cursor.execute('''select count (distinct item_no) from public.insp_marked_sumry where item_status not in (0,4) and item_type=0 and location_table='TRN';''')
    osTrain = cursor.fetchall()
    osTrain = osTrain[0][0]

    cursor.execute('''select count (distinct item_no) from public.insp_marked_sumry where item_status not in (0,4) and insp_type=2 and location_table='TRN';''')
    niTrain = cursor.fetchall()
    niTrain = niTrain[0][0]

    cursor.execute('''select count (distinct item_no) from public.insp_marked_sumry where item_status not in (0,4) and insp_type=3 and location_table='TRN';''')
    siTrain = cursor.fetchall()
    siTrain = siTrain[0][0]

    cursor.execute('''select count (distinct item_no) from public.insp_marked_sumry where item_status not in (0,4) and insp_type=1 and location_table='TRN';''')
    diTrain = cursor.fetchall()
    diTrain = diTrain[0][0]


    cursor.execute('''select count (distinct item_no) from public.insp_marked_sumry where item_status not in (0,4) and item_type=1 and location_table in ('DLS','RRM','HOS','ORL');''')
    psOther = cursor.fetchall()
    psOther = psOther[0][0]

    cursor.execute('''select count (distinct item_no) from public.insp_marked_sumry where item_status not in (0,4) and item_type=2 and location_table in ('DLS','RRM','HOS','ORL');''')
    esOther = cursor.fetchall()
    esOther = esOther[0][0]

    cursor.execute('''select count (distinct item_no) from public.insp_marked_sumry where item_status not in (0,4) and item_type=0 and location_table in ('DLS','RRM','HOS','ORL');''')
    osOther = cursor.fetchall()
    osOther = osOther[0][0]

    cursor.execute('''select count (distinct item_no) from public.insp_marked_sumry where item_status not in (0,4) and insp_type=2 and location_table in ('DLS','RRM','HOS','ORL');''')
    niOther = cursor.fetchall()
    niOther = niOther[0][0]

    cursor.execute('''select count (distinct item_no) from public.insp_marked_sumry where item_status not in (0,4) and insp_type=3 and location_table in ('DLS','RRM','HOS','ORL');''')
    siOther = cursor.fetchall()
    siOther = siOther[0][0]

    cursor.execute('''select count (distinct item_no) from public.insp_marked_sumry where item_status not in (0,4) and insp_type=1 and location_table in ('DLS','RRM','HOS','ORL');''')
    diOther = cursor.fetchall()
    diOther = diOther[0][0]

    
  
    irEndDate= datetime.today()
    irEndDate=datetime.strftime(irEndDate,'%d/%m/%y')
    irStartDate = '01/09/22'

    #Faisal Code start 
    list3=models.railwayLocationMaster.objects.filter(location_type_desc__in=['DIVISION','WORKSHOP']).values('location_code', 'location_type').order_by('location_code')
    list4=[]
    for i in list3:
        list4.append({'location_code': i['location_code'], 'location_type': i['location_type']})
    list1=models.railwayLocationMaster.objects.filter(location_type_desc__in=['RAILWAY BOARD', 'PRODUCTION UNIT', 'HEAD QUATER','OFFICE', 'PSU', 'PRODUCTION UNIT', 'INSTITUTE']).values('location_code').order_by('location_code')
    list2=[]
    for i in list1:
        # print(i['location_code'],'_________')
        list2.append(i['location_code'])


    #Faisal Code end 'zone':list2,        'division':list4,

    cursor.close()
    context = {
        'priorityInspection':priorityInspection,
        'overallPriorityCount':overallPriorityCount,
        'irStartDate':irStartDate,
        'irEndDate':irEndDate,
        'allDepartment':allDepartment,
        'allDesignation':allDesignation,
       
      
        'firstRowAllData':firstRowAllData,
        'secondRowAllData':secondRowAllData,
        'pendencyDataCard1':pendencyDataCard1,
        'pendencyDataCard2':pendencyDataCard2,
        'thirdRowData':thirdRowData,
        
        'irTypeVal':irTypeVal,
        'irDetailsVal':irDetailsVal,
        'irMapVal':irMapVal,
        'irPathVal1':irPathVal1,
        'irPathVal2':irPathVal2,
        'dataZoneWs':dataZoneWs,

        'irSearchDept':irSearchDept,
        'irSearchDate':irSearchDate,
        'irSearchDesig':irSearchDesig,  


        'overallTotalCount':overallTotalCount,
        'overallPendingCount':overallPendingCount,
        'overallOverdueCount':overallOverdueCount,
        'overallInspection':overallInspection,
        'pendingInspection':pendingInspection,
        'overdueInspection':overdueInspection,
       
        'zone':list2,
        'division':list4,


        'psStation':psStation,
        'esStation':esStation,
        'osStation':osStation,
        'niStation':niStation,
        'siStation':siStation,
        'diStation':diStation,
        'psSection':psSection,
        'esSection':esSection,
        'osSection':osSection,
        'niSection':niSection,
        'siSection':siSection,
        'diSection':diSection,
        'psTrain':psTrain,
        'esTrain':esTrain,
        'osTrain':osTrain,
        'niTrain':niTrain,
        'siTrain':siTrain,
        'diTrain':diTrain,
        'psOther':psOther,
        'esOther':esOther,
        'osOther':osOther,
        'niOther':niOther,
        'siOther':siOther,
        'diOther':diOther,
    }
    
    return render(request,'pendencyDashboard.html',context)

def TableViewPendencyDashboard(request):
     if request.method == 'GET' and request.is_ajax():
        irTypeVal = request.GET.get('typeId')
        irDetailsVal = request.GET.get('zoneId')
        location_val = request.GET.get('location_val')
        print('bhssssstsrtytftdytdyt123456',location_val)
        divId = request.GET.get('divId')
        irSearchDate = request.GET.get('searchDate')
        irSearchDateTO = request.GET.get('searchDateTo')
        irSearchDept = request.GET.get('searchDepartment')
        irSearchDesig = request.GET.get('searchDesignation')
        searchLevel = request.GET.get('searchLevel')
        card_type = request.GET.get('card_type')
        card_data = request.GET.get('card_data')
        INSPITEMTYPE = request.GET.get('INSPITEMTYPE')
        print('INSPITEMTYPE,INSPITEMTYPE',INSPITEMTYPE)
        mylist = json.loads(request.GET.get('mylist'))

        dataZoneWs=[]
        #####################
        cursor = connection.cursor()
        if irTypeVal == 'PU':
            dataZoneWs = list(models.railwayLocationMaster.objects.filter(location_type='PU').values('location_description','location_code').distinct().order_by('location_code'))
        elif irTypeVal == 'DIV':
            zone = irDetailsVal
            dataZoneWs = list(models.railwayLocationMaster.objects.filter(parent_location_code=zone,location_type = 'DIV').values('location_code','location_description').order_by('location_code'))
        elif irTypeVal == 'WS':
            zone = irDetailsVal
            dataZoneWs = list(models.railwayLocationMaster.objects.filter(parent_location_code=zone,location_type = 'WS').values('location_code','location_description').order_by('location_code'))
       
        if irTypeVal == 'ZR':  
            irTypeValData = ['ZR','DIV','WS']
        elif irTypeVal == 'IR':  
            irTypeValData = ['ZR','DIV','WS','PU',"RB","PSU","CON","CD","O"]
       
        elif irTypeVal == 'HQ':
            irTypeValData = ['ZR',"None"]
        else:
            irTypeValData = [irTypeVal,'None']

        if irDetailsVal == '':
            allLocationCodeData = tuple(models.railwayLocationMaster.objects.filter(location_type__in = irTypeValData).values_list('location_code',flat=True).distinct())
            # print('insode"',allLocationCodeData)
        else:
            # print('hello there')
            irPathVal1 = irDetailsVal
            allLocationCodeData = list(models.railwayLocationMaster.objects.filter(Q(parent_location_code=irDetailsVal)).values_list('location_code',flat=True).distinct())
            allLocationCodeData.append(irDetailsVal)
            allLocationCodeData = tuple(allLocationCodeData)
            # print("allLocationCodeData",allLocationCodeData)
       
        if divId != '':
            print("do it hee")
            irPathVal2 = divId
            allLocationCodeData = tuple([divId,'None'])
            irTypeValData = [irTypeVal,'None']



        if irSearchDept == 'All':
            irSearchDept = ""
            allDepartmentData = tuple(models.departMast.objects.values_list('department_name',flat=True).distinct())
               
            if irDetailsVal == '':
                allDesignation = list(models.Level_Desig.objects.filter(rly_unit__in = models.railwayLocationMaster.objects.filter(location_type__in = irTypeValData).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('hierarchy_level','designation'))
            else:
                allDesignation = list(models.Level_Desig.objects.filter(rly_unit__in = models.railwayLocationMaster.objects.filter(Q(location_code=irDetailsVal) | Q(parent_location_code=irDetailsVal),location_type__in = irTypeValData).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('hierarchy_level','designation'))
            if divId != '':
                allDesignation = list(models.Level_Desig.objects.filter(rly_unit__in = models.railwayLocationMaster.objects.filter(Q(location_code=divId),location_type__in = irTypeValData).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('hierarchy_level','designation'))

        else:
            allDepartmentData = tuple([models.departMast.objects.get(department_code=irSearchDept).department_name,'xyz'])
            # allDepartmentData = list(models.departMast.objects.filter(department_code=irSearchDept).values_list('department_name',flat=True).distinct())

            if irDetailsVal == '':
                allDesignation = list(models.Level_Desig.objects.filter(department_code=irSearchDept,rly_unit__in = models.railwayLocationMaster.objects.filter(location_type__in = irTypeValData).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('hierarchy_level','designation'))
            else:
                allDesignation = list(models.Level_Desig.objects.filter(department_code=irSearchDept,rly_unit__in = models.railwayLocationMaster.objects.filter(Q(location_code=irDetailsVal) | Q(parent_location_code=irDetailsVal),location_type__in = irTypeValData).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('hierarchy_level','designation'))
            if divId != '':
                allDesignation = list(models.Level_Desig.objects.filter(department_code=irSearchDept,rly_unit__in = models.railwayLocationMaster.objects.filter(Q(location_code=divId),location_type__in = irTypeValData).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('hierarchy_level','designation'))

        if  irSearchDesig == 'All':
            irSearchDesig = ""
            allDesignationData = tuple(models.Level_Desig.objects.filter(rly_unit__in = models.railwayLocationMaster.objects.filter(location_type__in=['DIV','RB','ZR','WS','PU']).values('rly_unit_code')).values_list('designation_code',flat=True).distinct())
        else:
            irSearchDesig = int(irSearchDesig)
            allDesignationData = tuple([irSearchDesig,-1])
           
        if irSearchDate == "":
            startDate = '2020-04-01'
            # startDate = datetime.strptime('%Y-%m-%d')
            # endDate = datetime.now()
            endDate = datetime.now().strftime(startDate,'%Y-%m-%d')
        else:
           
            start1 = irSearchDate.split('/')
            end1 = irSearchDateTO.split('/')
            startDate = '20'+start1[2]+'-'+start1[1]+'-'+start1[0]
            endDate = '20'+end1[2]+'-'+end1[1]+'-'+end1[0]
            # startDate = datetime.strptime(irSearchDate,'%d/%m/%y').date()
            # endDate = datetime.strptime(irSearchDateTO,'%d/%m/%y').date()
       
        if searchLevel == 'GM':
            allDesignationData = tuple(models.Level_Desig.objects.filter(d_level = 'GM').values_list('designation_code',flat=True).distinct())
        elif searchLevel == 'DRM':
            allDesignationData = tuple(models.Level_Desig.objects.filter(d_level = 'DRM').values_list('designation_code',flat=True).distinct())
        elif searchLevel == 'BM':
            allDesignationData = tuple(models.Level_Desig.objects.filter(d_level = 'BM').values_list('designation_code',flat=True).distinct())
        elif searchLevel == 'SAG':
            desig_code = list(models.Level_Desig.objects.filter(pc7_levelmin__gte=14,pc7_levelmax__lte=15).values_list('designation_code',flat=True).distinct())
            allDesignationData = tuple(models.Level_Desig.objects.filter(designation_code__in=desig_code).values_list('designation_code',flat=True).distinct())
        elif searchLevel == 'JAG':
            desig_code = list(models.Level_Desig.objects.filter(pc7_levelmin__gte=12,pc7_levelmax__lte=13).values_list('designation_code',flat=True).distinct())
            allDesignationData = tuple(models.Level_Desig.objects.filter(designation_code__in=desig_code).values_list('designation_code',flat=True).distinct())
        elif searchLevel == 'SS/JS':
            desig_code = list(models.Level_Desig.objects.filter(pc7_levelmin__gte=8,pc7_levelmax__lte=11).values_list('designation_code',flat=True).distinct())
            allDesignationData = tuple(models.Level_Desig.objects.filter(designation_code__in=desig_code).values_list('designation_code',flat=True).distinct())
       

        # allDesignation = [x for x in allDesignation if x['designation_code'] in allDesignationData]

        # TOTAL PENDING OVERDUE FILTER


        if card_data == 'Total':
            column_name = 'item_status in'
            value = (1,2,3,4)
            column_name_insp = 'insp_status in'
            value_insp = (1,2,3,4)
            column_name_mark = 'marked_officer_status in'
            value_mark = (1,2,3,4)
        elif card_data == 'Pending':
            column_name = 'item_status in'
            value = (1,2,3)
            column_name_insp = 'insp_status in'  
            value_insp = (1,2,3)
            column_name_mark = 'marked_officer_status in'
            value_mark = (1,2,3)
        elif card_data == 'Overdue':
            print('hahaha')
            column_name = 'overdue_flag in'
            value = (1,2)
            column_name_insp = 'item_status in'
            value_insp = (1,2,3)
            column_name_mark = 'marked_officer_status in'
            value_mark = (1,2,3)
        elif card_data == 'Priority':
            print('ulalala')
            column_name = 'priority in'
            value = (1,2)
            column_name_insp = 'item_status in'
            value_insp = (1,2,3)
            column_name_mark = 'marked_officer_status in'
            value_mark = (1,2,3)

        elif card_data == '7':
            print('i am here2')
            column_name = 'item_status != 0 and pendency_days >'
            value = 7
            column_name_insp = 'insp_status in'
            value_insp = (1,2,3,4)
            column_name_mark = 'marked_officer_status in'
            value_mark = (1,2,3,4)
        elif card_data == '30':
            print('i am here3')
            column_name = 'item_status != 0 and pendency_days >'
            value = 30
            column_name_insp = 'insp_status in'
            value_insp = (1,2,3,4)
            column_name_mark = 'marked_officer_status in'
            value_mark = (1,2,3,4)
        elif card_data == '90':
            print('i am here9')
            column_name = 'item_status != 0 and pendency_days >'
            value = 90
            column_name_insp = 'insp_status in'
            value_insp = (1,2,3,4)
            column_name_mark = 'marked_officer_status in'
            value_mark = (1,2,3,4)
        elif card_data == '180':
            print('i am here18')
            column_name = 'item_status != 0 and pendency_days >'
            value = 180
            column_name_insp = 'insp_status in'
            value_insp = (1,2,3,4)
            column_name_mark = 'marked_officer_status in'
            value_mark = (1,2,3,4)
        # FOR STATION SECTION TRAIN AND OTHERS
        elif card_data in ['STM','SEM','TRN']:
            print('station ')
            column_name = 'item_status != 0 and location_table ='
            value = "'"+card_data+"'"
            column_name_insp = 'insp_status in'
            value_insp = (1,2,3,4)
            column_name_mark = 'marked_officer_status in'
            value_mark = (1,2,3,4)
        elif card_data == 'OTH':
            print('not station ')
            column_name = 'item_status != 0 and location_table in'
            value = ('DLS','RRM','HOS','ORL')
            column_name_insp = 'insp_status in'
            value_insp = (1,2,3,4)
            column_name_mark = 'marked_officer_status in'
            value_mark = (1,2,3,4)
        else:
            print('not station ')
            column_name = 'item_status != 0 and location_table in'
            value = ('STM','SEM','TRN','DLS','RRM','HOS','ORL')
            column_name_insp = 'insp_status in'
            value_insp = (1,2,3,4)
            column_name_mark = 'marked_officer_status in'
            value_mark = (1,2,3,4)


        # FILTER CODES
        # FILTER ACCORDING TO THE CARD TYPE
        MYINSPITEMTYPE = {'Other Items':"and item_type = 0",'Employee Safety':"and item_type = 2",'Passenger Safety':"and item_type = 1",'Night Inspection':"and insp_type = 2",
                            'Surprise Inspection':"and insp_type = 3",'Drive Inspection':"and insp_type = 1"}
        if INSPITEMTYPE in MYINSPITEMTYPE:
            col_val = MYINSPITEMTYPE[INSPITEMTYPE]
        else:
            col_val = "--"
        print("collllll",col_val)
        # CHECK FOR CHEKBOX FILTER
        if (('Pending' in mylist and 'Overdue' in mylist and 'Priority' in mylist) or ('Overdue' in mylist and 'Priority' in mylist) ):
            col = "and (overdue_flag = 1 and priority = 1) "
        elif (('Pending' in mylist and 'Overdue' in mylist) or ('Overdue' in mylist) ):
            col = "and overdue_flag = 1 "
        elif (('Pending' in mylist and 'Priority' in mylist) or ('Priority' in mylist)):
            col = "and priority = 1 "
        else:
            col = "or overdue_flag = 5 "
        print('col444444444444',card_type,card_data,INSPITEMTYPE)

        mydictionary = {'oth':"item_type = 0",'es':"item_type = 2",'ps':"item_type = 1",'ni':"insp_type = 2",
                            'si':"insp_type = 3",'di':"insp_type = 1",'days7':"pendency_days > 7",'days30':"pendency_days > 30",
                            'days90':"pendency_days > 90",'days180':"pendency_days > 180"}

        # PS,NI,O,ETC....
        
        if(location_val== 'NULL'):
            dash = "--"
        else:
            dash = 'and'
        
        if card_type == 'Others':
            col = 'item_type'
            val = 0

        elif card_type == 'Employee Safety' :
            col = 'item_type'
            val = 2
        elif card_type == 'Passenger Safety':
            col = 'item_type'
            val = 1

        elif card_type == 'Night Inspection':
            col = 'insp_type'
            val = 2

        elif card_type == 'Surprise Inspection':
            col = 'insp_type'
            val = 3

        elif card_type == 'Drive Inspection':
            col = 'insp_type'
            val = 1

        elif card_type == 't_insp':
            print("col3444444",col)
            print("col3444444",column_name_insp)
            print("col3444444",value_insp)
            print("col3444444",column_name)
            print("col3444444",value)
            print("col3444444",col_val)
            print("col3444444",dash)
            print("col3444444",location_val)
            wholedata = ''
            # print('col',column_name,value,col,val)
            cursor.execute('''
            SELECT DISTINCT ON (inspection_no) inspection_no, inspected_on,inspection_note_no,string_agg(marked_designation , ', '),marked_hq_code,marked_location_code
            FROM public.insp_marked_sumry where {} {} and {} {} and marked_location_type in {} and marked_location_code in {} and inspected_on between '{}' and '{}'
            and insp_desig_code in {} and insp_dept in {} and {} {} {} {}
            {} location_val = '{}' and item_status in (1,2,3,4) 
            group by inspection_no,inspected_on,inspection_note_no,location_val,insp_type,marked_location_type,marked_location_code,marked_hq_code
            '''.format(column_name_insp,value_insp,column_name_mark,value_mark,tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData,column_name,value,col_val,col,dash,location_val))
        
        
            firstRowAllData = cursor.fetchall()
            # print(len(firstRowAllData))
            for i in range(len(firstRowAllData)):
                # print(firstRowAllData[i])
                obsev = m1.Inspection_details.objects.get(inspection_no = firstRowAllData[i][0])
                
                
                wholedata +='<tr><td>'+str(i+1)+'</td><td>'+obsev.inspected_on.strftime('%d-%m-%y')+'</td><td>'+obsev.inspection_note_no+'</td><td>'+str(obsev.insp_type)+'</td><td><a class="js-btn-tooltip long-and-truncated-with-child" data-toggle="tooltip" data-placement="top" title="'+obsev.inspection_title+'">'+obsev.inspection_title+'</a></td><td>'+obsev.inspection_officer.designation+'</td><td>'+firstRowAllData[i][4]+'</td><td>'+firstRowAllData[i][5]+'</td><td><a href="/inspectionReportHtml/'+str(obsev.inspection_no)+'/" target = "blank"><i style = "font-size:22px;" class="far fa-file-alt"></i></a></td></tr>'        
            context = {
                'wholedata':wholedata,


            }
            return JsonResponse(context, safe = False)
       
        elif card_type == 't_item':
            wholedata = ''
            print('i am here hello')
            cursor.execute('''
            SELECT distinct on (item_no) item_no,inspected_on,inspection_note_no, insp_type,string_agg(marked_designation , ', '),location_val
            FROM public.insp_marked_sumry where {} {} and {} {} and marked_location_type in {} and marked_location_code in {} and inspected_on between '{}' and '{}'
            and insp_desig_code in {} and insp_dept in {}  and {} {} {} {}
            {} location_val = '{}' 
            group by item_no,inspected_on,inspection_note_no,location_val,insp_type
            '''.format(column_name_insp,value_insp,column_name_mark,value_mark,tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData,column_name,value,col_val,col,dash,location_val))
           
       
            firstRowAllData = cursor.fetchall()
            # print(firstRowAllData[i][0])
            for i in range(len(firstRowAllData)):
                print(firstRowAllData[i][0])
                obsev = m1.Item_details.objects.get(item_no=firstRowAllData[i][0])
                observation = obsev.observation
                
                if not observation:
                    observation = obsev.item_title
                observation_words = observation.split()
                
                if len(observation_words) > 1:
                    truncated_observation = ' '.join(islice(observation_words, 50)) + '...'
                else:
                    truncated_observation = ' '.join(observation_words)
                
                # print('Truncated Observation:', truncated_observation)
                
                if firstRowAllData[i][2] == None:
                    # print('if')
                    inspected_note = ''
                else:
                    # print('else')
                    inspected_note = firstRowAllData[i][2]
                if firstRowAllData[i][5] == None:
                    # print('if')
                    location_val = ''
                else:
                    # print('else')
                    location_val = firstRowAllData[i][5]
                # print(observation)
                wholedata +='<tr><td>'+str(i+1)+'</td><td>'+str(firstRowAllData[i][1].strftime('%d-%m-%Y'))+'</td><td>'+inspected_note+'</td><td>'+str(firstRowAllData[i][3])+'</td><td><a class="js-btn-tooltip long-and-truncated-with-child" data-toggle="tooltip" data-placement="top" title="'+truncated_observation+'">'+truncated_observation+'</a></td><td>'+str(firstRowAllData[i][4])+'</td><td>'+location_val+'</td><td><a href="/inspectionReportHtml/'+str(firstRowAllData[i][5])+'/" target = "blank"><i style = "font-size:22px;" class="far fa-file-alt"></i></a></td></tr>'
            context = {'wholedata':wholedata}
            return JsonResponse(context, safe = False)
        
        elif card_type == 'p_insp':
            
            wholedata = ''
            # print('col',column_name,value,col,val)
            cursor.execute('''
            SELECT DISTINCT ON (inspection_no) inspection_no, inspected_on,inspection_note_no,string_agg(marked_designation , ', '),marked_hq_code,marked_location_code
            FROM public.insp_marked_sumry where item_status in (1,2,3) and {} {} and marked_location_type in {} and marked_location_code in {} and inspected_on between '{}' and '{}'
            and insp_desig_code in {} and insp_dept in {} and {} {} {} {}
            {} location_val = '{}' 
            group by inspection_no,inspected_on,inspection_note_no,location_val,insp_type,marked_location_type,marked_location_code,marked_hq_code
            '''.format(column_name_mark,value_mark,tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData,column_name,value,col_val,col,dash,location_val))
        
        
            firstRowAllData = cursor.fetchall()
            # print(len(firstRowAllData))
            for i in range(len(firstRowAllData)):
                # print(firstRowAllData[i])
                obsev = m1.Inspection_details.objects.get(inspection_no = firstRowAllData[i][0])
                
                
                wholedata +='<tr><td>'+str(i+1)+'</td><td>'+obsev.inspected_on.strftime('%d-%m-%y')+'</td><td>'+obsev.inspection_note_no+'</td><td>'+str(obsev.insp_type)+'</td><td><a class="js-btn-tooltip long-and-truncated-with-child" data-toggle="tooltip" data-placement="top" title="'+obsev.inspection_title+'">'+obsev.inspection_title+'</a></td><td>'+obsev.inspection_officer.designation+'</td><td>'+firstRowAllData[i][4]+'</td><td>'+firstRowAllData[i][5]+'</td><td><a href="/inspectionReportHtml/'+str(obsev.inspection_no)+'/" target = "blank"><i style = "font-size:22px;" class="far fa-file-alt"></i></a></td></tr>'        
            context = {
                'wholedata':wholedata,


            }
            return JsonResponse(context, safe = False)
       
        elif card_type == 'p_item':
            wholedata = ''
            print('i am here hello',column_name)
            print('i am here hello',value)
            print('i am here hello',col_val)
            print('i am here hello',dash)
            print('i am here hello',location_val)
           
            cursor.execute('''
            SELECT distinct on (item_no) item_no,inspected_on,inspection_note_no, insp_type,string_agg(marked_designation , ', '),location_val
            FROM public.insp_marked_sumry where item_status in (1,2,3) and {} {} and marked_location_type in {} and marked_location_code in {} and inspected_on between '{}' and '{}'
            and insp_desig_code in {} and insp_dept in {} and {} {} {} {}
            {} location_val = '{}' 
            group by item_no,inspected_on,inspection_note_no,location_val,insp_type,marked_location_type,marked_location_code,marked_hq_code
            '''.format(column_name_mark,value_mark,tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData,column_name,value,col_val,col,dash,location_val))
        
       
            firstRowAllData = cursor.fetchall()
            # print(firstRowAllData[i][0])
            for i in range(len(firstRowAllData)):
                # print(firstRowAllData[i][0])
                obsev = m1.Item_details.objects.get(item_no = firstRowAllData[i][0])
                observation = obsev.observation
                if not observation:
                    observation = obsev.item_title
                    truncated_observation = ' '.join(islice(observation.split(), 50))
                if len(observation.split()) > 50:
                   truncated_observation += '...'
                if firstRowAllData[i][2] == None:
                    # print('if')
                    inspected_note = ''
                else:
                    # print('else')
                    inspected_note = firstRowAllData[i][2]
                if firstRowAllData[i][5] == None:
                    # print('if')
                    location_val = ''
                else:
                    # print('else')
                    location_val = firstRowAllData[i][5]
                # print(observation)
                wholedata +='<tr><td>'+str(i+1)+'</td><td>'+str(firstRowAllData[i][1].strftime('%d-%m-%Y'))+'</td><td>'+inspected_note+'</td><td>'+str(firstRowAllData[i][3])+'</td><td><a class="js-btn-tooltip long-and-truncated-with-child" data-toggle="tooltip" data-placement="top" title="'+observation+'">'+observation+'</a></td><td>'+str(firstRowAllData[i][4])+'</td><td>'+location_val+'</td><td><a href="/inspectionReportHtml/'+str(firstRowAllData[i][5])+'/" target = "blank"><i style = "font-size:22px;" class="far fa-file-alt"></i></a></td></tr>'
            context = {'wholedata':wholedata}
            return JsonResponse(context, safe = False)
       
        elif card_type == 'o_insp':
            print("col3444444",column_name)
            print("col3444444",value)
            print("col3444444",col_val)
            print("col3444444",col)
            print("col3444444",dash)
            print("col3444444",location_val)
            
            wholedata = ''
            # print('col',column_name,value,col,val)
            cursor.execute('''
            SELECT DISTINCT ON (inspection_no) inspection_no, inspected_on,inspection_note_no,string_agg(marked_designation , ', '),marked_hq_code,marked_location_code
            FROM public.insp_marked_sumry 
            where {} {} and {} {} and marked_location_type in {} and marked_location_code in {} and inspected_on between '{}' and '{}'
            and insp_desig_code in {} and insp_dept in {}  and {} {} {} and overdue_flag='1' {} 
            {} location_val = '{}' 
            group by inspection_no,inspected_on,inspection_note_no,location_val,insp_type,marked_location_type,marked_location_code,marked_hq_code
            '''.format(column_name_insp,value_insp,column_name_mark,value_mark,tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData,column_name,value,col_val,col,dash,location_val))
        
        
            firstRowAllData = cursor.fetchall()
            # print(len(firstRowAllData))
            for i in range(len(firstRowAllData)):
                # print(firstRowAllData[i])
                obsev = m1.Inspection_details.objects.get(inspection_no = firstRowAllData[i][0])
                
                
                wholedata +='<tr><td>'+str(i+1)+'</td><td>'+obsev.inspected_on.strftime('%d-%m-%y')+'</td><td>'+obsev.inspection_note_no+'</td><td>'+str(obsev.insp_type)+'</td><td><a class="js-btn-tooltip long-and-truncated-with-child" data-toggle="tooltip" data-placement="top" title="'+obsev.inspection_title+'">'+obsev.inspection_title+'</a></td><td>'+obsev.inspection_officer.designation+'</td><td>'+firstRowAllData[i][4]+'</td><td>'+firstRowAllData[i][5]+'</td><td><a href="/inspectionReportHtml/'+str(obsev.inspection_no)+'/" target = "blank"><i style = "font-size:22px;" class="far fa-file-alt"></i></a></td></tr>'        
            context = {
                'wholedata':wholedata,


            }
            return JsonResponse(context, safe = False)
       
        elif card_type == 'o_item':
            wholedata = ''
            print('i am here hello')
            cursor.execute('''
            SELECT distinct on (item_no) item_no,inspected_on,inspection_note_no,insp_type,string_agg(marked_designation , ', '),location_val
            FROM public.insp_marked_sumry where {} {} and {} {} and marked_location_type in {} and marked_location_code in {} and inspected_on between '{}' and '{}'
            and insp_desig_code in {} and insp_dept in {}  and {} {} {}  and overdue_flag='1' {}
            {} location_val = '{}' 
            group by item_no,inspected_on,inspection_note_no,location_val,insp_type
            '''.format(column_name_insp,value_insp,column_name_mark,value_mark,tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData,column_name,value,col_val,col,dash,location_val))
           
       
            firstRowAllData = cursor.fetchall()
            # print(firstRowAllData[i][0])
            for i in range(len(firstRowAllData)):
                print(firstRowAllData[i][0])
                obsev = m1.Item_details.objects.get(item_no = firstRowAllData[i][0])
                observation = obsev.observation
                if not observation:
                    observation = obsev.item_title
                    truncated_observation = ' '.join(islice(observation.split(), 50))
                if len(observation.split()) > 50:
                   truncated_observation += '...'
                if firstRowAllData[i][2] == None:
                    # print('if')
                    inspected_note = ''
                else:
                    # print('else')
                    inspected_note = firstRowAllData[i][2]
                if firstRowAllData[i][5] == None:
                    # print('if')
                    location_val = ''
                else:
                    # print('else')
                    location_val = firstRowAllData[i][5]
                # print(observation)
                wholedata +='<tr><td>'+str(i+1)+'</td><td>'+str(firstRowAllData[i][1].strftime('%d-%m-%Y'))+'</td><td>'+inspected_note+'</td><td>'+str(firstRowAllData[i][3])+'</td><td><a class="js-btn-tooltip long-and-truncated-with-child" data-toggle="tooltip" data-placement="top" title="'+observation+'">'+observation+'</a></td><td>'+str(firstRowAllData[i][4])+'</td><td>'+location_val+'</td><td><a href="/inspectionReportHtml/'+str(firstRowAllData[i][5])+'/" target = "blank"><i style = "font-size:22px;" class="far fa-file-alt"></i></a></td></tr>'
            context = {'wholedata':wholedata}
            return JsonResponse(context, safe = False)
       
            firstRowAllData = cursor.fetchall()
            print("mydata333333333",firstRowAllData)
            for i in range(len(firstRowAllData)):
                # print(firstRowAllData[i])
                obsev = m1.Item_details.objects.get(item_no = firstRowAllData[i][0])
                observation = obsev.observation
                if not observation:
                    observation = obsev.item_title
       
                wholedata +='<tr><td>'+str(i+1)+'</td><td>'+obsev.inspection_no.inspected_on.strftime('%d-%m-%Y')+'</td><td>'+obsev.inspection_no.inspection_note_no+'</td><td><a class="js-btn-tooltip long-and-truncated-with-child" data-toggle="tooltip" data-placement="top" title="'+observation+'">'+observation+'</a></td><td>'+'firstRowAllData[i][3]'+'</td><td>'+'firstRowAllData[i][4]'+'</td><td>'+'firstRowAllData[i][5]'+'</td><td>'+obsev.location_val+'</td><td><a href="/inspectionReportHtml/'+str(obsev.inspection_no)+'/" target = "blank"><i style = "font-size:22px;" class="far fa-file-alt"></i></a></td></tr>'
            context = {'wholedata':wholedata}
            return JsonResponse(context, safe = False)
        
        elif card_type in mydictionary:

            wholedata = ''
            print('col444444455555555555756865444',mydictionary[card_type])
            cursor.execute('''
            SELECT distinct on (item_no) item_no,inspected_on,inspection_note_no, insp_type,string_agg(marked_designation , ', '),location_val
            FROM public.insp_marked_sumry where {} and {} {} and {} {}  and marked_location_type in {} and marked_location_code in {} and inspected_on between '{}' and '{}'
            and insp_desig_code in {} and insp_dept in {}  and {} {} {} {}
            {} location_val = '{}' 
            group by item_no,inspected_on,inspection_note_no,location_val,insp_type
            '''.format(mydictionary[card_type],column_name_insp,value_insp,column_name_mark,value_mark,tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData,column_name,value,col_val,col,dash,location_val))
           
            firstRowAllData = cursor.fetchall()
            # print(firstRowAllData[i][0])
            for i in range(len(firstRowAllData)):
                print(firstRowAllData[i][0])
                obsev = m1.Item_details.objects.get(item_no = firstRowAllData[i][0])
                observation = obsev.observation
                if not observation:
                    observation = obsev.item_title
                    truncated_observation = ' '.join(islice(observation.split(), 50))
                if len(observation.split()) > 50:
                   truncated_observation += '...'
                if firstRowAllData[i][2] == None:
                    # print('if')
                    inspected_note = ''
                else:
                    # print('else')
                    inspected_note = firstRowAllData[i][2]
                if firstRowAllData[i][5] == None:
                    # print('if')
                    location_val = ''
                else:
                    # print('else')
                    location_val = firstRowAllData[i][5]
                # print(observation)
                wholedata +='<tr><td>'+str(i+1)+'</td><td>'+str(firstRowAllData[i][1].strftime('%d-%m-%Y'))+'</td><td>'+inspected_note+'</td><td>'+str(firstRowAllData[i][3])+'</td><td><a class="js-btn-tooltip long-and-truncated-with-child" data-toggle="tooltip" data-placement="top" title="'+observation+'">'+observation+'</a></td><td>'+str(firstRowAllData[i][4])+'</td><td>'+location_val+'</td><td><a href="/inspectionReportHtml/'+str(firstRowAllData[i][5])+'/" target = "blank"><i style = "font-size:22px;" class="far fa-file-alt"></i></a></td></tr>'
            context = {'wholedata':wholedata}
            return JsonResponse(context, safe = False)
        
        wholedata = ''
        # print('col',column_name,value,col,val)
        
        print('yesssssssssss, me I am the problem, its me')
        
        cursor.execute('''
        SELECT a.item_no,a.final_submit_on,a.inspection_note_no,string_agg(marked_designation , ', '),b.location_code,c.location_code,a.inspection_no,a.location_val
        FROM public.insp_marked_sumry a
        join public.myadmin_railwaylocationmaster b on b.rly_unit_code = a.item_hq_id
        join public.myadmin_railwaylocationmaster c on c.rly_unit_code = a.item_div_id
        where {} {} and {} {} and marked_location_type in {} and marked_location_code in {} and inspected_on between '{}' and '{}'
        and insp_desig_code in {} and insp_dept in {} and {} {} and {} = '{}' AND item_status not in (0,4)
        group by a.item_no,a.final_submit_on,a.inspection_note_no,b.location_code,c.location_code,a.inspection_no,a.location_val
         '''.format(column_name_insp,value_insp,column_name_mark,value_mark,tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData,column_name,value,col,val))
        
     
        firstRowAllData = cursor.fetchall()
        
        # print(len(firstRowAllData))
        for i in range(len(firstRowAllData)):
            # print(firstRowAllData[i])
            obsev = m1.Item_details.objects.get(item_no = firstRowAllData[i][0])
            observation = obsev.observation
            if not observation:
                observation = obsev.item_title
            if firstRowAllData[i][2] == None:
                # print('if')
                inspected_note = ''
            else:
                # print('else')
                inspected_note = firstRowAllData[i][2]
            if firstRowAllData[i][7] == None:
                # print('if')
                location_val = ''
            else:
                # print('else')
                location_val = firstRowAllData[i][7]
            if firstRowAllData[i][4] == None:
                # print('if')
                desg = ''
            else:
                # print('else')
                desg = firstRowAllData[i][4]
            # print(observation)
            wholedata +='<tr><td>'+str(i+1)+'</td><td>'+str(firstRowAllData[i][1].strftime('%d-%m-%Y'))+'</td><td>'+inspected_note+'</td><td><a class="js-btn-tooltip long-and-truncated-with-child" data-toggle="tooltip" data-placement="top" title="'+observation+'">'+observation+'</a></td><td>'+firstRowAllData[i][3]+'</td><td>'+desg+'</td><td>'+firstRowAllData[i][5]+'</td><td>'+location_val+'</td><td><a href="/inspectionReportHtml/'+str(firstRowAllData[i][6])+'/" target = "blank"><i style = "font-size:22px;" class="far fa-file-alt"></i></a></td></tr>'
                # x='<a class="js-btn-tooltip" data-toggle="tooltip" data-placement="top" title='${response.data1[i][2]}'>${substr}</a>'
        print(len(firstRowAllData))
        context = {
            'wholedata':wholedata,
        }
        
        return JsonResponse(context, safe = False)


def IconData(request):
    irTypeVal = request.POST.get('typeId')
    irDetailsVal = request.POST.get('zoneId')
    divId = request.POST.get('divId')
    irSearchDate = request.POST.get('searchDate')
    irSearchDateTO = request.POST.get('searchDateTo')
    irSearchDept = request.POST.get('searchDepartment')
    irSearchDesig = request.POST.get('searchDesignation')
    searchLevel = request.POST.get('searchLevel')
    division = request.POST.get('selectedDivision')
    card_type = request.POST.get('card_type')
    card = request.POST.get('card')
    prev_card = request.POST.get('prev_card')
    INSPITEMTYPE = request.POST.get('INSPITEMTYPE')
    mylist = json.loads(request.POST.get('mylist'))
    expandData = request.POST.get('expandData')
    print(mylist)
    dataZoneWs = []

    cursor = connection.cursor()

    if irTypeVal == 'PU':
        dataZoneWs = list(models.railwayLocationMaster.objects.filter(location_type='PU').values('location_description', 'location_code').distinct().order_by('location_code'))
    elif irTypeVal == 'DIV':
        zone = irDetailsVal
        dataZoneWs = list(models.railwayLocationMaster.objects.filter(parent_location_code=zone, location_type='DIV').values('location_code', 'location_description').order_by('location_code'))
    elif irTypeVal == 'WS':
        zone = irDetailsVal
        dataZoneWs = list(models.railwayLocationMaster.objects.filter(parent_location_code=zone, location_type='WS').values('location_code', 'location_description').order_by('location_code'))

    if irTypeVal == 'ZR':
        irTypeValData = ['ZR', 'DIV', 'WS']
    elif irTypeVal == 'IR':
        irTypeValData = ['ZR', 'DIV', 'WS', 'PU']
    elif irTypeVal == 'HQ':
        irTypeValData = ['ZR','None']
    else:
        irTypeValData = [irTypeVal,'None']

    if irDetailsVal == '':
        allLocationCodeData = tuple(models.railwayLocationMaster.objects.filter(location_type__in=irTypeValData).values_list('location_code', flat=True).distinct())
    else:
        irPathVal1 = irDetailsVal
        allLocationCodeData = list(models.railwayLocationMaster.objects.filter(Q(parent_location_code=irDetailsVal)).values_list('location_code', flat=True).distinct())
        allLocationCodeData.append(irDetailsVal)
        allLocationCodeData = tuple(allLocationCodeData)

    if divId != '':
                irPathVal2 = divId
                allLocationCodeData = tuple([divId,'None'])
                irTypeValData = [irTypeVal,'None']

    # Rest of your code...

    if irSearchDept == 'All':
        irSearchDept = ""
        allDepartmentData = tuple(models.departMast.objects.values_list('department_name', flat=True).distinct())

        if irDetailsVal == '':
            allDesignation = list(models.Level_Desig.objects.filter(rly_unit__in = models.railwayLocationMaster.objects.filter(location_type__in = irTypeValData).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('hierarchy_level','designation'))
        else:
            allDesignation = list(models.Level_Desig.objects.filter(rly_unit__in = models.railwayLocationMaster.objects.filter(Q(location_code=irDetailsVal) | Q(parent_location_code=irDetailsVal),location_type__in = irTypeValData).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('hierarchy_level','designation'))
        if divId != '':
            allDesignation = list(models.Level_Desig.objects.filter(rly_unit__in = models.railwayLocationMaster.objects.filter(Q(location_code=divId),location_type__in = irTypeValData).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('hierarchy_level','designation'))
        # Rest of your code...
    else:
        allDepartmentData = tuple([models.departMast.objects.get(department_code=irSearchDept).department_name,'xyz'])
        if irDetailsVal == '':
            allDesignation = list(models.Level_Desig.objects.filter(department_code=irSearchDept,rly_unit__in = models.railwayLocationMaster.objects.filter(location_type__in = irTypeValData).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('hierarchy_level','designation'))
        else:
            allDesignation = list(models.Level_Desig.objects.filter(department_code=irSearchDept,rly_unit__in = models.railwayLocationMaster.objects.filter(Q(location_code=irDetailsVal) | Q(parent_location_code=irDetailsVal),location_type__in = irTypeValData).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('hierarchy_level','designation'))
        if divId != '':
            allDesignation = list(models.Level_Desig.objects.filter(department_code=irSearchDept,rly_unit__in = models.railwayLocationMaster.objects.filter(Q(location_code=divId),location_type__in = irTypeValData).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('hierarchy_level','designation'))
        # Rest of your code...

    # Rest of your code...
    if  irSearchDesig == 'All':
        irSearchDesig = ""
        allDesignationData = tuple(models.Level_Desig.objects.filter(rly_unit__in = models.railwayLocationMaster.objects.filter(location_type__in=['DIV','RB','ZR','WS','PU']).values('rly_unit_code')).values_list('designation_code',flat=True).distinct())
    else:
        # irSearchDesig = int(irSearchDesig)
        allDesignationData = tuple([irSearchDesig,-1])

    if irSearchDate == "":
        startDate = '2020-04-01'
        endDate = datetime.now().strftime('%Y-%m-%d')
    else:
        start1 = irSearchDate.split('/')
        end1 = irSearchDateTO.split('/')
        startDate = '20'+start1[2]+'-'+start1[1]+'-'+start1[0]
        endDate = '20'+end1[2]+'-'+end1[1]+'-'+end1[0]

   
    if searchLevel == 'GM':
        allDesignationData = tuple(models.Level_Desig.objects.filter(d_level = 'GM').values_list('designation_code',flat=True).distinct())
    elif searchLevel == 'DRM':
        allDesignationData = tuple(models.Level_Desig.objects.filter(d_level = 'DRM').values_list('designation_code',flat=True).distinct())
    elif searchLevel == 'BM':
        allDesignationData = tuple(models.Level_Desig.objects.filter(d_level = 'BM').values_list('designation_code',flat=True).distinct())
    elif searchLevel == 'SAG':
        desig_code = list(models.Level_Desig.objects.filter(pc7_levelmin__gte=14,pc7_levelmax__lte=15).values_list('designation_code',flat=True).distinct())
        allDesignationData = tuple(models.Level_Desig.objects.filter(designation_code__in=desig_code).values_list('designation_code',flat=True).distinct())
    elif searchLevel == 'JAG':
        desig_code = list(models.Level_Desig.objects.filter(pc7_levelmin__gte=12,pc7_levelmax__lte=13).values_list('designation_code',flat=True).distinct())
        allDesignationData = tuple(models.Level_Desig.objects.filter(designation_code__in=desig_code).values_list('designation_code',flat=True).distinct())
    elif searchLevel == 'SS/JS':
        desig_code = list(models.Level_Desig.objects.filter(pc7_levelmin__gte=8,pc7_levelmax__lte=11).values_list('designation_code',flat=True).distinct())
        allDesignationData = tuple(models.Level_Desig.objects.filter(designation_code__in=desig_code).values_list('designation_code',flat=True).distinct())

    allDesignation = [x for x in allDesignation if x['designation_code'] in allDesignationData]

    # FILTER CODES 
    # FILTER ACCORDING TO THE CARD TYPE 
    if INSPITEMTYPE == 'Other Items':
        print('hulala')
        col = "item_type = 0"

    elif INSPITEMTYPE == 'Employee Safety' :
        col = "item_type = 2"

    if INSPITEMTYPE == 'Passenger Safety':
        col = "item_type = 1"

    elif INSPITEMTYPE == 'Night Inspection':
        col = "insp_type = 2"

    elif INSPITEMTYPE == 'Surprise Inspection':
        col = "insp_type = 3"

    elif INSPITEMTYPE == 'Drive Inspection':
        col = "insp_type = 1"


    # CHECK FOR CHEKBOX FILTER
    if (('Pending' in mylist and 'Overdue' in mylist and 'Priority' in mylist) or ('Overdue' in mylist and 'Priority' in mylist) ):
        checkcol = "and (overdue_flag = 1 and priority = 1) "
    elif (('Pending' in mylist and 'Overdue' in mylist) or ('Overdue' in mylist) ):
        checkcol = "and overdue_flag = 1 "
    elif (('Pending' in mylist and 'Priority' in mylist) or ('Priority' in mylist)):
        checkcol = "and priority = 1 "
    else:
        checkcol = "--"
    print('col',checkcol)



    # filter of STM, SEM, TRN, OTH

    if card_type in ['STM','SEM','TRN']:
        print('station ')
        column_name = 'item_status != 0 and location_table ='
        value = "'"+card_type+"'"
        column_name_insp = 'insp_status in'
        value_insp = (1,2,3,4)
        column_name_mark = 'marked_officer_status in'
        value_mark = (1,2,3,4)
    elif card_type == 'OTH':
        print('not station ')
        column_name = 'item_status != 0 and location_table in'
        value = ('DLS','RRM','HOS','ORL')
        column_name_insp = 'insp_status in'
        value_insp = (1,2,3,4)
        column_name_mark = 'marked_officer_status in'
        value_mark = (1,2,3,4)
    else:
        print('not station ')
        column_name = 'item_status != 0 and location_table in'
        value = ('STM','SEM','TRN','DLS','RRM','HOS','ORL')
        column_name_insp = 'insp_status in'
        value_insp = (1,2,3,4)
        column_name_mark = 'marked_officer_status in'
        value_mark = (1,2,3,4)
   
    #  case 1 on click of any of the cards

    if(expandData == "True"):
        cursor.execute('''SELECT marked_hq_code,marked_location_code,location_val,location_table,
                        COUNT(DISTINCT inspection_no) AS total_inspection_count,
                        COUNT(DISTINCT item_no) AS distinct_item_count,
                        COUNT(DISTINCT inspection_no) FILTER (WHERE insp_status in (1, 2, 3 )) AS pending_inspection_count,
                        COUNT(DISTINCT item_no) FILTER (WHERE insp_status in (1, 2, 3)) AS pending_item_count,
                        COUNT(DISTINCT inspection_no) FILTER (WHERE overdue_flag=1) AS overdue_inspection_count,
                        COUNT(DISTINCT item_no) FILTER (WHERE overdue_flag=1) AS overdue_item_count,
                        COUNT(CASE WHEN pendency_days > 7 THEN 1 ELSE NULL END) AS pendency_days_gt_7,
                        COUNT(CASE WHEN pendency_days > 30 THEN 1 ELSE NULL END) AS pendency_days_gt_30,
                        COUNT(CASE WHEN pendency_days > 90 THEN 1 ELSE NULL END) AS pendency_days_gt_90,
                        COUNT(CASE WHEN pendency_days > 180 THEN 1 ELSE NULL END) AS pendency_days_gt_180
                    FROM
                        insp_marked_sumry
                    WHERE 
                    marked_location_type in {}
                    and marked_location_code in {} and inspected_on between '{}' and '{}'    
                    and insp_desig_code in {} and insp_dept in {} and {} {} and {} {} 
                    GROUP BY marked_hq_code, marked_location_code, location_val,location_table; '''.format(
                    tuple(irTypeValData), allLocationCodeData, startDate,
                        endDate, allDesignationData, allDepartmentData,column_name,value,col,checkcol))
        data = cursor.fetchall()

    
        context = {
            'data': data,
        }
        print('huhuhD',data)
        return JsonResponse(context, safe=False)


    elif irTypeVal=='IR':
        print('fuuuuuuuuuuuu')
        cursor.execute('''SELECT marked_hq_code,
                            COUNT(DISTINCT inspection_no)  FILTER (WHERE item_status in (1, 2, 3, 4)) AS total_inspection_count,
                            COUNT(DISTINCT item_no)  FILTER (WHERE item_status in (1, 2, 3, 4)) AS distinct_item_count,
                            COUNT(DISTINCT inspection_no) FILTER (WHERE insp_status in (1, 2, 3 )) AS pending_inspection_count,
                            COUNT(DISTINCT item_no) FILTER (WHERE insp_status in (1, 2, 3)) AS pending_item_count,
                            COUNT(DISTINCT inspection_no) FILTER (WHERE overdue_flag=1) AS overdue_inspection_count,
                            COUNT(DISTINCT item_no) FILTER (WHERE overdue_flag=1) AS overdue_item_count,
                            COUNT(DISTINCT CASE WHEN pendency_days > 7 THEN item_no ELSE NULL END) AS distinct_item_count_pendency_gt_7,
                            COUNT(DISTINCT CASE WHEN pendency_days > 30 THEN item_no ELSE NULL END) AS distinct_item_count_pendency_gt_30,
                            COUNT(DISTINCT CASE WHEN pendency_days > 90 THEN item_no ELSE NULL END) AS distinct_item_count_pendency_gt_90,
                            COUNT(DISTINCT CASE WHEN pendency_days > 180 THEN item_no ELSE NULL END) AS distinct_item_count_pendency_gt_180
                        FROM
                            insp_marked_sumry
                        WHERE 
                        marked_location_type in {}
                        and marked_location_code in {} and inspected_on between '{}' and '{}'    
                        and insp_desig_code in {} and insp_dept in {} and {} {} and {} {} 
                        GROUP BY marked_hq_code; '''.format(
                        tuple(irTypeValData), allLocationCodeData, startDate,
                            endDate, allDesignationData, allDepartmentData,column_name,value,col,checkcol))

        data = cursor.fetchall()
    
        
        context = {
            'data': data,
        }
        print('huhuhR',data)
        return JsonResponse(context, safe=False)
    
    elif irTypeVal == "ZR":
        cursor.execute('''SELECT marked_hq_code,marked_location_code,
                        COUNT(DISTINCT inspection_no) AS total_inspection_count,
                        COUNT(DISTINCT item_no) AS distinct_item_count,
                        COUNT(DISTINCT inspection_no) FILTER (WHERE insp_status in (1, 2, 3 )) AS pending_inspection_count,
                        COUNT(DISTINCT item_no) FILTER (WHERE insp_status in (1, 2, 3)) AS pending_item_count,
                        COUNT(DISTINCT inspection_no) FILTER (WHERE overdue_flag=1) AS overdue_inspection_count,
                        COUNT(DISTINCT item_no) FILTER (WHERE overdue_flag=1) AS overdue_item_count,
                        COUNT(DISTINCT CASE WHEN pendency_days > 7 THEN item_no ELSE NULL END) AS distinct_item_count_pendency_gt_7,
                        COUNT(DISTINCT CASE WHEN pendency_days > 30 THEN item_no ELSE NULL END) AS distinct_item_count_pendency_gt_30,
                        COUNT(DISTINCT CASE WHEN pendency_days > 90 THEN item_no ELSE NULL END) AS distinct_item_count_pendency_gt_90,
                        COUNT(DISTINCT CASE WHEN pendency_days > 180 THEN item_no ELSE NULL END) AS distinct_item_count_pendency_gt_180
                    FROM
                        insp_marked_sumry
                    WHERE 
                        marked_location_type in {}
                        and marked_location_code in {} and inspected_on between '{}' and '{}'    
                        and insp_desig_code in {} and insp_dept in {} and {} {} and {} {} 
                        GROUP BY marked_hq_code,marked_location_code; '''.format(
                        tuple(irTypeValData), allLocationCodeData, startDate,
                            endDate, allDesignationData, allDepartmentData,column_name,value,col,checkcol))

        data = cursor.fetchall()

    
        context = {
            'data': data,
        }
        print('huhuhD',data)
        return JsonResponse(context, safe=False)
    
    else:
        print('else33')
        cursor.execute('''SELECT marked_hq_code,marked_location_code,location_val,location_table,
                        COUNT(DISTINCT inspection_no) AS total_inspection_count,
                        COUNT(DISTINCT item_no) AS distinct_item_count,
                        COUNT(DISTINCT inspection_no) FILTER (WHERE insp_status in (1, 2, 3 )) AS pending_inspection_count,
                        COUNT(DISTINCT item_no) FILTER (WHERE insp_status in (1, 2, 3)) AS pending_item_count,
                        COUNT(DISTINCT inspection_no) FILTER (WHERE overdue_flag=1) AS overdue_inspection_count,
                        COUNT(DISTINCT item_no) FILTER (WHERE overdue_flag=1) AS overdue_item_count,
                        COUNT(DISTINCT CASE WHEN pendency_days > 7 THEN item_no ELSE NULL END) AS distinct_item_count_pendency_gt_7,
                        COUNT(DISTINCT CASE WHEN pendency_days > 30 THEN item_no ELSE NULL END) AS distinct_item_count_pendency_gt_30,
                        COUNT(DISTINCT CASE WHEN pendency_days > 90 THEN item_no ELSE NULL END) AS distinct_item_count_pendency_gt_90,
                        COUNT(DISTINCT CASE WHEN pendency_days > 180 THEN item_no ELSE NULL END) AS distinct_item_count_pendency_gt_180
                    FROM
                        insp_marked_sumry
                    WHERE 
                        marked_location_type in {}
                        and marked_location_code in {} and inspected_on between '{}' and '{}'    
                        and insp_desig_code in {} and insp_dept in {} and {} {} and {} {} 
                        GROUP BY marked_hq_code, marked_location_code, location_val,location_table; '''.format(
                        tuple(irTypeValData), allLocationCodeData, startDate,
                            endDate, allDesignationData, allDepartmentData,column_name,value,col,checkcol))

        data = cursor.fetchall()

    
        context = {
            'data': data,
        }
        print('huhuhD',data)
        return JsonResponse(context, safe=False)


def allinspectionreport(request):
        cursor = connection.cursor()
    # if request.method == "GET" and request.is_ajax():
        # startDate,endDate,Department,Designation,Level,typeID,zoneID,divID, types'
        # overallTotalCount overallInspection pendingInspection overallPendingCount overdueInspection overallOverdueCount overallPriorityCount priorityInspection
        startDate=request.GET.get('startDate')
        endDate=request.GET.get('endDate')
        Department=request.GET.get('Department')
        Designation=request.GET.get('Designation')
        Level=request.GET.get('Level')
        typeID=request.GET.get('typeID')
        zoneID=request.GET.get('zoneID')
        divID=request.GET.get('divID')
        types=request.GET.get('types')
        Desig=[]
        Dept=[]
        insp=[]
        insp_details=[]
        items_details=[]
        lvl=[]
        header = 'Total'
        flag='inspection'
        selected_dept = None
        lvll=[]
        location=[]


        startDate = datetime.strptime(startDate,'%d/%m/%y').strftime('%Y-%m-%d')
        endDate = datetime.strptime(endDate,'%d/%m/%y').strftime('%Y-%m-%d')
        print(startDate,endDate,Department,Designation,Level,typeID,zoneID,divID, types)

        sDate = datetime.strptime(startDate,'%Y-%m-%d').strftime('%d-%m-%Y')
        eDate = datetime.strptime(endDate,'%Y-%m-%d').strftime('%d-%m-%Y')


        if typeID == 'ZR':
            if len(zoneID):
                zones=list(models.railwayLocationMaster.objects.filter(location_code=zoneID,location_type='ZR').values_list('location_code', flat=True))
            else:
                zones=list(models.railwayLocationMaster.objects.filter(location_type='ZR').values_list('location_code', flat=True))
            if len(divID):
                div=divID.split('-')
                divs=list(models.railwayLocationMaster.objects.filter(location_code=div[0],location_type=div[1]).values_list('location_code', flat=True))
            else:
                divs=list(models.railwayLocationMaster.objects.filter(location_type__in=['WS','DIV']).values_list('location_code', flat=True))
        elif typeID == 'PU':
            if len(zoneID):
                zones=models.railwayLocationMaster.objects.filter(location_code=zoneID,location_type='PU').values_list('location_code', flat=True)
            else:
                zones=models.railwayLocationMaster.objects.filter(location_type='PU').values_list('location_code', flat=True)
        elif typeID == 'WS':
            if len(zoneID):
                zones=models.railwayLocationMaster.objects.filter(location_code=zoneID,location_type='ZR').values_list('location_code', flat=True)
            else:
                zones=models.railwayLocationMaster.objects.filter(location_type='ZR').values_list('location_code', flat=True)
            if len(divID):
                div=divID.split('-')
                divs=list(models.railwayLocationMaster.objects.filter(location_code=div[0],location_type=div[1]).values_list('location_code', flat=True))
            else:
                divs=list(models.railwayLocationMaster.objects.filter(location_type__in=['WS']).values_list('location_code', flat=True))
        elif typeID == 'DIV':
            if len(zoneID):
                zones=models.railwayLocationMaster.objects.filter(location_code=zoneID,location_type='ZR').values_list('location_code', flat=True)
            else:
                zones=models.railwayLocationMaster.objects.filter(location_type='ZR').values_list('location_code', flat=True)
            if len(divID):
                div=divID.split('-')
                divs=list(models.railwayLocationMaster.objects.filter(location_code=div[0],location_type=div[1]).values_list('location_code', flat=True))
            else:
                divs=list(models.railwayLocationMaster.objects.filter(location_type__in=['DIV']).values_list('location_code', flat=True))
        elif typeID == 'HQ':
            if len(zoneID):
                zones=models.railwayLocationMaster.objects.filter(location_code=zoneID,location_type='ZR').values_list('location_code', flat=True)
            else:
                zones=models.railwayLocationMaster.objects.filter(location_type='ZR').values_list('location_code', flat=True)
        else:
            zones=list(models.railwayLocationMaster.objects.filter(location_type__in=['ZR','PU']).values_list('location_code', flat=True))
            divs=list(models.railwayLocationMaster.objects.filter(location_type__in=['WS','DIV']).values_list('location_code', flat=True))

        if Department == 'All':
            Dept = list(models.departMast.objects.filter(delete_flag=False).values_list('department_name', flat=True))
        else:
            Dept=list(models.departMast.objects.filter(delete_flag=False,department_code=Department).values_list('department_name', flat=True))
        if Designation == 'All':
            Desig = tuple(models.Level_Desig.objects.filter().values_list('designation_code', flat=True))
        else:
            Desig.append(Designation)
            Desig = tuple(Desig)  
        # if Level == 'All':
        #     lvl = list(models.Level_Desig.objects.filter(delete_flag=False).values_list('d_level', flat=True))  
        # else:
        #     lvl.append(Level)
        if Level == 'GM':
            Desig = tuple(models.Level_Desig.objects.filter(d_level = 'GM').values_list('designation_code',flat=True).distinct())
        elif Level == 'DRM':
            Desig = tuple(models.Level_Desig.objects.filter(d_level = 'DRM').values_list('designation_code',flat=True).distinct())
        elif Level == 'BM':
            Desig = tuple(models.Level_Desig.objects.filter(d_level = 'BM').values_list('designation_code',flat=True).distinct())
        elif Level == 'SAG':
            desig_code = list(models.Level_Desig.objects.filter(pc7_levelmin__gte=14,pc7_levelmax__lte=15).values_list('designation_code',flat=True).distinct())
            Desig = tuple(models.Level_Desig.objects.filter(designation_code__in=desig_code).values_list('designation_code',flat=True).distinct())
        elif Level == 'JAG':
            desig_code = list(models.Level_Desig.objects.filter(pc7_levelmin__gte=12,pc7_levelmax__lte=13).values_list('designation_code',flat=True).distinct())
            Desig = tuple(models.Level_Desig.objects.filter(designation_code__in=desig_code).values_list('designation_code',flat=True).distinct())
        elif Level == 'SS/JS':
            desig_code = list(models.Level_Desig.objects.filter(pc7_levelmin__gte=8,pc7_levelmax__lte=11).values_list('designation_code',flat=True).distinct())
            Desig = tuple(models.Level_Desig.objects.filter(designation_code__in=desig_code).values_list('designation_code',flat=True).distinct())


        
        if Department == 'All':
            deptt = ''
        else:
            cursor.execute('''SELECT department_name FROM myadmin_departmast
                           WHERE department_code = %s;''',
                           [str(Department)])
            deptt = cursor.fetchall()[0][0]

        if Designation == 'All':
            Desigg = ''
        else:
            cursor.execute('''SELECT designation FROM myadmin_level_desig
                           WHERE designation_code = %s;''',
                           [Designation])
            Desigg = cursor.fetchall()[0][0]

        if Level == 'All':
            lvll = ''
            
        else:
            lvll.append(Level)    
            lvll=lvll[0] 
        

        location.append(list(zones))  
        location.append(list(divs)) 
        location = location[0]
        print(location)
        # print('--------------')
        # print(allDesignationData)
        # print('--------------')

        startDate = '2021-09-01'
        print('fghjk  ',typeID)
        if typeID=='WS' or typeID=='DIV':
            if types == 'overallInspection':
                cursor.execute('''SELECT DISTINCT inspection_note_no FROM insp_marked_sumry
                                WHERE (marked_hq_code in %s and (marked_div_code in %s and marked_div_type = %s))
                                and inspected_on between %s and %s    
                                and marked_officer_id in %s and marked_officer_department in %s and insp_status!=0 ;''',
                                [tuple(zones),tuple(divs),typeID, startDate,
                                    endDate, tuple(Desig), tuple(Dept)])
                data = cursor.fetchall()
                # data = data[0]
            if types == 'pendingInspection':
                cursor.execute('''SELECT DISTINCT inspection_note_no FROM insp_marked_sumry
                                WHERE (marked_hq_code in %s and (marked_div_code in %s and marked_div_type = %s))
                                and inspected_on between %s and %s    
                                and marked_officer_id in %s and marked_officer_department in %s and insp_status not in (0,4) ;''',
                                [tuple(zones),tuple(divs),typeID, startDate,
                                    endDate, tuple(Desig), tuple(Dept)])
                data = cursor.fetchall()
            if types == 'overdueInspection':
                cursor.execute('''SELECT DISTINCT inspection_note_no FROM insp_marked_sumry
                                WHERE (marked_hq_code in %s and (marked_div_code in %s and marked_div_type = %s))
                                and inspected_on between %s and %s    
                                and marked_officer_id in %s and marked_officer_department in %s and overdue_flag = 1 and insp_status not in (0,4);''',
                                [tuple(zones),tuple(divs),typeID, startDate,
                                    endDate, tuple(Desig), tuple(Dept)])
                data = cursor.fetchall()

            if types == 'priorityInspection':
                cursor.execute('''SELECT DISTINCT inspection_note_no FROM insp_marked_sumry
                                WHERE (marked_hq_code in %s and (marked_div_code in %s and marked_div_type = %s))
                                and inspected_on between %s and %s    
                                and marked_officer_id in %s and marked_officer_department in %s and priority!=0 and insp_status not in (0,4);''',
                                [tuple(zones),tuple(divs),typeID, startDate,
                                    endDate, tuple(Desig), tuple(Dept)])
                data = cursor.fetchall()

            if types == 'overallTotalCount':
                cursor.execute('''SELECT DISTINCT item_no FROM insp_marked_sumry
                                WHERE (marked_hq_code in %s and (marked_div_code in %s and marked_div_type = %s))
                                and inspected_on between %s and %s    
                                and marked_officer_id in %s and marked_officer_department in %s and item_status!=0 ;''',
                                [tuple(zones),tuple(divs),typeID, startDate,
                                    endDate, tuple(Desig), tuple(Dept)])
                data = cursor.fetchall()
            if  types == 'overallPendingCount':
                cursor.execute('''SELECT DISTINCT item_no FROM insp_marked_sumry
                                WHERE (marked_hq_code in %s and (marked_div_code in %s and marked_div_type = %s))
                                and inspected_on between %s and %s    
                                and marked_officer_id in %s and marked_officer_department in %s and item_status not in (0,4) ;''',
                                [tuple(zones),tuple(divs),typeID, startDate,
                                    endDate, tuple(Desig), tuple(Dept)])
                data = cursor.fetchall()
            if types == 'overallOverdueCount':
                cursor.execute('''SELECT DISTINCT item_no FROM insp_marked_sumry
                                WHERE (marked_hq_code in %s and (marked_div_code in %s and marked_div_type = %s))
                                and inspected_on between %s and %s    
                                and marked_officer_id in %s and marked_officer_department in %s and overdue_flag = 1 and item_status not in (0,4);''',
                                [tuple(zones),tuple(divs),typeID, startDate,
                                    endDate, tuple(Desig), tuple(Dept)])
                data = cursor.fetchall()
            if types == 'overallPriorityCount':
                cursor.execute('''SELECT DISTINCT item_no FROM insp_marked_sumry
                                WHERE (marked_hq_code in %s and (marked_div_code in %s and marked_div_type = %s))
                                and inspected_on between %s and %s    
                                and marked_officer_id in %s and marked_officer_department in %s and priority!=0 and item_status not in (0,4);''',
                                [tuple(zones),tuple(divs),typeID, startDate,
                                    endDate, tuple(Desig), tuple(Dept)])
                data = cursor.fetchall()
        
        elif typeID=='HQ' or typeID=='PU':
            if types == 'overallInspection':
                cursor.execute('''SELECT DISTINCT inspection_note_no FROM insp_marked_sumry
                                WHERE marked_hq_code in %s and marked_div_code is NULL and marked_div_type is NULL
                                and inspected_on between %s and %s    
                                and marked_officer_id in %s and marked_officer_department in %s and insp_status!=0 ;''',
                                [tuple(zones), startDate,
                                    endDate, tuple(Desig), tuple(Dept)])
                data = cursor.fetchall()
                # data = data[0]
            if types == 'pendingInspection':
                cursor.execute('''SELECT DISTINCT inspection_note_no FROM insp_marked_sumry
                                WHERE marked_hq_code in %s and marked_div_code is NULL and marked_div_type is NULL
                                and inspected_on between %s and %s    
                                and marked_officer_id in %s and marked_officer_department in %s and insp_status not in (0,4) ;''',
                                [tuple(zones), startDate,
                                    endDate, tuple(Desig), tuple(Dept)])
                data = cursor.fetchall()
            if types == 'overdueInspection':
                cursor.execute('''SELECT DISTINCT inspection_note_no FROM insp_marked_sumry
                                WHERE marked_hq_code in %s and marked_div_code is NULL and marked_div_type is NULL
                                and inspected_on between %s and %s    
                                and marked_officer_id in %s and marked_officer_department in %s and overdue_flag=1 and insp_status not in (0,4);''',
                                [tuple(zones), startDate,
                                    endDate, tuple(Desig), tuple(Dept)])
                data = cursor.fetchall()
            if types == 'priorityInspection':
                cursor.execute('''SELECT DISTINCT inspection_note_no FROM insp_marked_sumry
                                WHERE marked_hq_code in %s and marked_div_code is NULL and marked_div_type is NULL
                                and inspected_on between %s and %s    
                                and marked_officer_id in %s and marked_officer_department in %s and priority=1 and insp_status not in (0,4);''',
                                [tuple(zones), startDate,
                                    endDate, tuple(Desig), tuple(Dept)])
                data = cursor.fetchall()

            if types == 'overallTotalCount':
                cursor.execute('''SELECT DISTINCT item_no FROM insp_marked_sumry
                                WHERE marked_hq_code in %s and marked_div_code is NULL and marked_div_type is NULL
                                and inspected_on between %s and %s    
                                and marked_officer_id in %s and marked_officer_department in %s and item_status!=0 ;''',
                                [tuple(zones), startDate,
                                    endDate, tuple(Desig), tuple(Dept)])
                data = cursor.fetchall()
            if  types == 'overallPendingCount':
                cursor.execute('''SELECT DISTINCT item_no FROM insp_marked_sumry
                                WHERE marked_hq_code in %s and marked_div_code is NULL and marked_div_type is NULL
                                and inspected_on between %s and %s    
                                and marked_officer_id in %s and marked_officer_department in %s and item_status not in (0,4) ;''',
                                [tuple(zones), startDate,
                                    endDate, tuple(Desig), tuple(Dept)])
                data = cursor.fetchall()
            if types == 'overallOverdueCount':
                cursor.execute('''SELECT DISTINCT item_no FROM insp_marked_sumry
                                WHERE marked_hq_code in %s and marked_div_code is NULL and marked_div_type is NULL
                                and inspected_on between %s and %s    
                                and marked_officer_id in %s and marked_officer_department in %s and overdue_flag = 1 and item_status not in (0,4);''',
                                [tuple(zones), startDate,
                                    endDate, tuple(Desig), tuple(Dept)])
                data = cursor.fetchall()
            if types == 'overallPriorityCount':
                cursor.execute('''SELECT DISTINCT item_no FROM insp_marked_sumry
                                WHERE marked_hq_code in %s and marked_div_code is NULL and marked_div_type is NULL
                                and inspected_on between %s and %s    
                                and marked_officer_id in %s and marked_officer_department in %s and priority!=0 and item_status not in (0,4);''',
                                [tuple(zones), startDate,
                                    endDate, tuple(Desig), tuple(Dept)])
                data = cursor.fetchall()
        
        else:
            if types == 'overallInspection':
                cursor.execute('''SELECT DISTINCT inspection_note_no FROM insp_marked_sumry
                                WHERE (marked_hq_code in %s and (marked_div_code in %s or marked_div_code is NULL))
                                and inspected_on between %s and %s    
                                and marked_officer_id in %s and marked_officer_department in %s and insp_status!=0 ;''',
                                [tuple(zones),tuple(divs), startDate,
                                    endDate, tuple(Desig), tuple(Dept)])
                data = cursor.fetchall()

                # data = data[0]
            if types == 'pendingInspection':
                cursor.execute('''SELECT DISTINCT inspection_note_no FROM insp_marked_sumry
                                WHERE (marked_hq_code in %s and (marked_div_code in %s or marked_div_code is NULL))
                                and inspected_on between %s and %s    
                                and marked_officer_id in %s and marked_officer_department in %s and insp_status not in (0,4) ;''',
                                [tuple(zones),tuple(divs), startDate,
                                    endDate, tuple(Desig), tuple(Dept)])
                data = cursor.fetchall()
            if types == 'overdueInspection':
                cursor.execute('''SELECT DISTINCT inspection_note_no FROM insp_marked_sumry
                                WHERE (marked_hq_code in %s and (marked_div_code in %s or marked_div_code is NULL))
                                and inspected_on between %s and %s    
                                and marked_officer_id in %s and marked_officer_department in %s and overdue_flag = 1 and insp_status not in (0,4);''',
                                [tuple(zones),tuple(divs), startDate,
                                    endDate, tuple(Desig), tuple(Dept)])
                data = cursor.fetchall()
            if types == 'priorityInspection':
                cursor.execute('''SELECT DISTINCT inspection_note_no FROM insp_marked_sumry
                                WHERE (marked_hq_code in %s and (marked_div_code in %s or marked_div_code is NULL))
                                and inspected_on between %s and %s    
                                and marked_officer_id in %s and marked_officer_department in %s and priority!=0 and insp_status not in (0,4);''',
                                [tuple(zones),tuple(divs), startDate,
                                    endDate, tuple(Desig), tuple(Dept)])
                data = cursor.fetchall()

            if types == 'overallTotalCount':
                cursor.execute('''SELECT DISTINCT item_no FROM insp_marked_sumry
                                WHERE (marked_hq_code in %s and (marked_div_code in %s or marked_div_code is NULL))
                                and inspected_on between %s and %s    
                                and marked_officer_id in %s and marked_officer_department in %s and item_status!=0 ;''',
                                [tuple(zones),tuple(divs), startDate,
                                    endDate, tuple(Desig), tuple(Dept)])
                data = cursor.fetchall()
            if  types == 'overallPendingCount':
                cursor.execute('''SELECT DISTINCT item_no FROM insp_marked_sumry
                                WHERE (marked_hq_code in %s and (marked_div_code in %s or marked_div_code is NULL))
                                and inspected_on between %s and %s    
                                and marked_officer_id in %s and marked_officer_department in %s and item_status not in (0,4) ;''',
                                [tuple(zones),tuple(divs), startDate,
                                    endDate, tuple(Desig), tuple(Dept)])
                data = cursor.fetchall()
            if types == 'overallOverdueCount':
                cursor.execute('''SELECT DISTINCT item_no FROM insp_marked_sumry
                                WHERE (marked_hq_code in %s and (marked_div_code in %s or marked_div_code is NULL))
                                and inspected_on between %s and %s    
                                and marked_officer_id in %s and marked_officer_department in %s and overdue_flag = 1 and item_status not in (0,4);''',
                                [tuple(zones),tuple(divs), startDate,
                                    endDate, tuple(Desig), tuple(Dept)])
                data = cursor.fetchall()
            if types == 'overallPriorityCount':
                cursor.execute('''SELECT DISTINCT item_no FROM insp_marked_sumry
                                WHERE (marked_hq_code in %s and (marked_div_code in %s or marked_div_code is NULL))
                                and inspected_on between %s and %s    
                                and marked_officer_id in %s and marked_officer_department in %s and priority!=0 and item_status not in (0,4);''',
                                [tuple(zones),tuple(divs), startDate,
                                    endDate, tuple(Desig), tuple(Dept)])
                data = cursor.fetchall()
        print (len(data))
        # from functools import reduce
        # data = tuple(reduce(lambda x,y:list(x).extend(list(y)) or list(x),data))
        
        data1=[]
        for i in data:
            for j in i:
                data1.append(j)
        print (len(data1))
        data = data1
            

        # for d in data:
        #     insp.append(d[0])

        if types in ['overallOverdueCount','overallPendingCount','overallTotalCount','overallPriorityCount']:
            flag='items'
       
        if flag=='inspection':
            cursor.execute('''SELECT
                           distinct a.inspection_no,
                           STRING_AGG(DISTINCT TO_CHAR(a.final_submit_on, 'DD-MM-YYYY'), ', ') AS final_submit_on,
                           STRING_AGG(DISTINCT CAST(a.inspection_note_no AS VARCHAR), ', ') AS inspection_note_no,
                           b.inspection_title,
                           STRING_AGG(DISTINCT CAST(a.marked_designation AS VARCHAR), ', ') AS marked_designation,
                           STRING_AGG(DISTINCT CAST(a.marked_hq_code AS VARCHAR), ', ') AS marked_hq_code,
                           STRING_AGG(DISTINCT CAST(a.marked_div_code AS VARCHAR), ', ') AS marked_div_code,
                           STRING_AGG(DISTINCT CAST(a.location_val AS VARCHAR), ', ') AS location_val
                           FROM public.insp_marked_sumry a 
                           Join public.inspects_inspection_details b on a.inspection_no = b.inspection_no
                           WHERE a.insp_status != 0 and a.inspection_note_no in %s
                           GROUP BY a.inspection_no,b.inspection_title;''',(tuple(data),))
            mdata = cursor.fetchall()
        else: 
            cursor.execute('''SELECT
                           distinct a.item_no,
                           TO_CHAR(a.final_submit_on, 'DD-MM-YYYY') AS final_submit_on,
                           a.inspection_note_no,
                           b.observation,
                           STRING_AGG(DISTINCT CAST(a.marked_designation AS VARCHAR), ', ') AS marked_designation,
                           c.location_code,
                           d.location_code,
                           a.location_val
                           FROM public.insp_marked_sumry a 
                           Join public.inspects_item_details b on a.item_no = b.item_no
                           join public.myadmin_railwaylocationmaster c on c.rly_unit_code = a.item_hq_id
                           join public.myadmin_railwaylocationmaster d on d.rly_unit_code = a.item_div_id
                           WHERE a.item_status != 0 and a.item_no in %s
                           GROUP BY a.item_no,final_submit_on,a.inspection_note_no,b.observation,c.location_code,d.location_code,a.location_val;
                           ''',(tuple(data),))
            mdata = cursor.fetchall()

        
        if types in ['pendingInspection','overallPendingCount']:
            header='Pending'
        
        if types in ['overdueInspection','overallOverdueCount']:
            header='Overdue'
        
        if types in ['priorityInspection','overallPriorityCount']:
            header='Priority'
        

        context={
            'flag':flag,
            'insp_details':insp_details,
            'items_details':items_details,
            'header':header,
            'typeID':typeID,
            'zoneID':zoneID,
            'types':types,
            # 'startDate':startDate,
            # 'endDate':endDate,
            'Department':Department,
            'Designation':Designation,
            'startDate': startDate,
            'endDate': endDate,
            'Dept':Dept,
            'selected_dept':selected_dept,
            'Level':Level,
            # 'selected_desg':selected_desg,
            'deptt':deptt,
            'Desigg':Desigg,
            'lvll':lvll,
            'mdata':mdata,
            'sDate':sDate,
            'eDate':eDate,

        }
        return render(request,'allinspectionreport.html',context)



def inspectionReportReply_pdf(request, insp_id):
    # try:
        ins_detail=list(m1.Inspection_details.objects.filter(inspection_no=insp_id).values())
        final_submit_on = None
        if len(ins_detail) > 0:
            if ins_detail[0]['final_submit_on'] is not None:
                final_submit_on = ins_detail[0]['final_submit_on']
        ins_title=m1.Inspection_details.objects.filter(inspection_no=insp_id).values()
        item_details1= list(m1.Item_details.objects.filter(inspection_no_id=insp_id).exclude(type='SSH').values().order_by('sl_no'))
        
        New_Accompany = m1.Insp_Accompany.objects.filter(inspection_no=insp_id).values_list('accompany', flat=True)
        Accompany1 = ''
        for dx in New_Accompany:
            Accompany1 += dx + ','
        Accompany = Accompany1.rstrip(',')
        multi_loc = m1.Insp_multi_location.objects.filter(inspection_no_id=insp_id).values()

        
        for j in item_details1:
            # mrkoffi = {}
            if j['type'] == 'SH':
                mark=m1.Marked_Officers.objects.filter(item_no=j['item_no']).values('reverted_on','marked_to__designation', 'marked_to__empno_id','compliance','reply_on', 'viewed_on' ,'marked_no', 'status_flag','created_on', 'status', 'target_flag','target_date','priority','action_type').order_by('marked_no')
                # print(mark, '11111111')
                comp =m1.Marked_Officers.objects.filter(item_no=j['item_no']).count()
                flag =m1.Marked_Officers.objects.filter(item_no=j['item_no'], status_flag=3).count()
                # print(comp, '  hh00000000hh   ',flag)
                if comp > 0:
                    percentage = round((flag / comp)*100)
                else: 
                    percentage = 0
                for a in mark:
                    a.update({'marked_no': a['marked_no']})
                    if a['created_on']:
                        dt1 = datetime.today() - a['created_on']
                        a.update({'days': dt1.days})
                    else:
                        dt1 = 0
                        a.update({'days': dt1})
                    if a['status_flag'] ==3:
                        dt1 = date.today() - a['reply_on']
                        a.update({'days': dt1.days})
                    if a['status_flag'] ==4:
                        dt1 = date.today() - a['reverted_on']
                        a.update({'days': dt1.days})
                    if a['priority'] == 1:
                        a['priority'] = 'On priority'
                    else:
                        a['priority'] = '-'
                    if a['target_flag']:
                        tgt=m1.target_compliance.objects.filter(marked_no_id=a['marked_no']).values('target_date')
                        tgt_date=datetime.strftime(tgt[0]['target_date'],"%d/%m/%y") if tgt[0]['target_date'] else '-'
                        # print(tgt_date)
                        a.update({'tgt_date': tgt_date})
                    else:
                        a.update({'tgt_date': "-"})
                    forwarded_graph=list(m1.Marked_Officers_forward.objects.filter(marked_no=a['marked_no']).values_list('marked_no_forward'))
                    a.update({'forwrd_ofcs': len(forwarded_graph)})

                    
                
                # desig_longdesc1 =''
                # marked_officers1 = ''
                # for x in mark:
                #     #marked=m1.empmast.objects.filter(myuser_id=x['myuser_id_id'])
                #     marked=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=x['marked_to_id'])
                #     print('^^^^^^^^^', marked)
                #     if marked[0].designation:
                #         desig_longdesc1 += marked[0].designation    
                #     marked_officers1 += marked[0].empno_id
                #     print('uuuuuuuuuu', marked[0].designation)
                    
                #     mrkoffi.update({'marked_officers': marked_officers1, 'desig_longdesc': desig_longdesc1})
                j.update({'mrkoffi': mark, 'percentage': percentage})

            elif j['type'] == 'H':
                mark=m1.Marked_Officers.objects.filter(item_no=j['item_no'])
                # print(mark.values(), '00000000')
        #         print('***********', mark)
                comp =m1.Marked_Officers.objects.filter(item_no=j['item_no']).count()
                flag =m1.Marked_Officers.objects.filter(item_no=j['item_no'], status_flag=3).count()
                # print(comp, '  00000000hh   ',flag)
                if comp > 0:
                    percentage = round((flag / comp)*100)
                else: 
                    percentage = 0
                if mark.exists():
                    all_h = mark.values('reverted_on','marked_to__designation','created_on', 'marked_to__empno_id','compliance','reply_on',  'viewed_on','marked_no', 'status_flag', 'status', 'target_flag','priority','target_date','action_type').order_by('marked_no')
                    for a in all_h:
                        a.update({'marked_no': a['marked_no']})
                        if a['created_on']:
                            dt1 = datetime.today() - a['created_on']
                            a.update({'days': dt1.days})
                        else:
                            dt1 = 0
                            a.update({'days': dt1})

                        # a.update({'days': dt1.days})
                        if a['status_flag'] ==3:
                            dt1 = date.today() - a['reply_on']
                            a.update({'days': dt1.days})
                        if a['status_flag'] ==4:
                            dt1 = date.today() - a['reverted_on']
                            a.update({'days': dt1.days})

                        if a['priority'] == 1:
                            a['priority'] = 'On priority'
                        else:
                            a['priority'] = '-'
                        if a['target_flag']:
                            tgt=m1.target_compliance.objects.filter(marked_no_id=a['marked_no']).values('target_date')
                            tgt_date=datetime.strftime(tgt[0]['target_date'],"%d/%m/%y") if tgt[0]['target_date'] else '-'
                            a.update({'tgt_date': tgt_date})
                        else:
                            a.update({'tgt_date': "-"})

                        forwarded_graph=list(m1.Marked_Officers_forward.objects.filter(marked_no=a['marked_no']).values_list('marked_no_forward'))
                        a.update({'forwrd_ofcs': len(forwarded_graph)})
                        
                    j.update({'mrkoffi': all_h, 'chk_cts':'YES', 'percentage': percentage})
                    
                    
                else:
                    j.update({'chk_cts':'NO', 'percentage': 0})
        #             
        # 
        # if mark[0].marked_to is not None: 
        #                 print('---------', j['item_no'])
        #                 # mrkoffi = {}
        #                 desig_longdesc1 =''
        #                 marked_officers1 = ''
        #                 for x in mark.values():
        #                     # print('xxxxxxxxx', x['myuser_id_id'])
                            
        #                     des = models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=x['marked_to_id'])
        #                     desig_longdesc1 += des[0].designation+','
        #                     marked_officers1 += des[0].empno_id+','
                        
                            
                        
        #                 mrkoffi.update({'marked_officers': marked_officers1, 'desig_longdesc': desig_longdesc1})
                        
                #         j.update({'mrkoffi': mrkoffi, 'chk_cts':'YES'})
                #     else:
                #         j.update({'mrkoffi': '', 'chk_cts':'YES'})
                # else:
                
                
                # j.update({'chk_cts':'NO'})
            

        # ins_detail[0].update({'item_details1': item_details1})
        # print('00000000', ins_detail)
        # print('$$$$$$$$$$', item_details1)
        # print('mmmmmmmmmmm', mark)
        empnox = models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=request.user)| Q(official_email_ID=request.user.guest_email) | Q(official_email_ID=request.user.email), empno__isnull=False)
        inspection_note_no=m1.Inspection_details.objects.filter(inspection_no=insp_id)[0].inspection_note_no
        # personal_values = list(m1.Inspection_details.objects.filter(inspection_no=insp_id).values('officer_desig','officer_name','station_name'))
        
        # if personal_values:
        #     # insp_desig=personal_values[0]['officer_desig'] if personal_values[0]['officer_desig'] else employee_desig
        #     insp_ofc_name=personal_values[0]['officer_name'] if personal_values[0]['officer_name'] else employee_name
        #     station_name=personal_values[0]['station_name'] if personal_values[0]['station_name'] else station_des
        designation = list(models.Level_Desig.objects.filter(empno=ins_detail[0]['created_by']).values_list('designation',flat=True))[0]
        names=list(m1.empmast.objects.filter(empno=ins_detail[0]['created_by']).values_list('empname',flat=True))[0]
        ins_detail[0]['insp_name']=''
        if empnox:
            empno = empnox[0].designation_code
            desig = empnox[0].designation
        context={
            'ins_title':ins_title,
            'inspection_note_no':inspection_note_no,
            'item_details1': item_details1,
            'names':names,
            'designation':designation,
            'insp_number': insp_id,
            'multi_loc': multi_loc,
            'desig': desig,
            'Accompany':Accompany,
            'final_submit_on':final_submit_on,
            }  
        # print(item_details1)
        
            
        template_src='inspectionReportReply_pdf.html'
        return render_to_pdf(template_src, context)
    # except Exception as e: 
    #     try:
    #         m1.error_Table.objects.create(fun_name="inspectionReportReply",user_id=request.user,err_details=str(e))
    #     except:
    #         print("Internal Error!!!")
    #     return render(request, "errorspage.html", {})



def view_compliance_phase2_pdf(request,insp_no):
    cuser=request.user
    if request.user.user_role == 'guest':
        cuser=request.user.guest_email
        request.user.email=request.user.guest_email
    
    ins_detail=list(m2.einspection_details.objects.filter(einspno=insp_no).values())
    start_date = None
    if len(ins_detail) > 0:
        if ins_detail[0]['start_date'] is not None:
            start_date = ins_detail[0]['start_date']    

    empnox = models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=request.user)| Q(official_email_ID=request.user.guest_email) | Q(official_email_ID=request.user.email))
    if empnox:
        das_desig = empnox[0].designation_code
        desig = empnox[0].designation


    inspection_note_no=m2.einspection_details.objects.filter(einspno=insp_no)[0].inspection_note_no    
    # personal_values = list(m2.einspection_details.objects.filter(einspno=insp_no).values('inspection_officer','officer_name','station_name'))
    # if personal_values:
    #     insp_desig=personal_values[0]['inspection_officer'] if personal_values[0]['inspection_officer'] else employee_desig
    #     insp_ofc_name=personal_values[0]['officer_name'] if personal_values[0]['officer_name'] else employee_name
    #     station_name=personal_values[0]['station_name'] if personal_values[0]['station_name'] else station_des


    insp_details=list(m2.einspection_details.objects.filter(einspno=insp_no).values('einspno','instypeid_id','inspected_on','inspection_title','designation_id__designation','designation_id','created_by','inspection_note_no'))
    insp_details[0]['inspected_on']=insp_details[0]['inspected_on'].strftime("%d/%m/%Y")
    names=list(m1.empmast.objects.filter(empno=insp_details[0]['created_by']).values_list('empname',flat=True))[0]


    designation = list(models.Level_Desig.objects.filter(empno=insp_details[0]['created_by']).values_list('designation',flat=True))[0]
    # print(insp_details[0]['created_by'])
    # print('designation', designation)
    insp_details[0]['insp_name']=''
    # if names:
    #     insp_details[0]['insp_name']+=names[0]['empname']+' ' if names[0]['empname']!=None else ' '
        # insp_details[0]['insp_name']+=names[0]['empmname']+' ' if names[0]['empmname']!=None else ' '
        # insp_details[0]['insp_name']+=names[0]['emplname']+' ' if names[0]['emplname']!=None else ' '
    
    marked_nos = list(m2.einsp_marked.objects.exclude(revert=2).filter(eitemid__einspno=insp_no).values())
    count=0

    
    # print(marked_nos)
    listgrid=[]
    for m in marked_nos:
        temp={}
        count+=1
        item_det=m2.einspection_item_detail.objects.filter(eitemid=m['eitemid_id']).values()
        question=m2.questionare_master.objects.filter(qid=item_det[0]['qid_id']).values()
        temp['sr_no']=count
        temp['item_no']=m['eitemid_id']
        temp['marked_no']=m['id']
        temp['marked_to']=m['designation']
        temp['question']=question[0]['activity']
        temp['compliance']=m['compliance'] if m['compliance'] else '-'
        temp['status_flag']=m['status_flag']
        temp['revert']=m['revert']
        temp['reject']=m['reject']
        temp['report_act']=question[0]['report_act']
        temp['value']=item_det[0]['value']
        temp['tgt_date']=m['target_date'].strftime("%d/%m/%Y") if m['target_date'] else 'NA'
        temp['compliance_recieved_on']=m['compliance_recieved_on'].strftime("%d/%m/%Y") if m['compliance_recieved_on'] else 'NA'
        if temp['compliance_recieved_on'] !='NA':
            temp['days']=( m['compliance_recieved_on'] - m['created_on']).days
        else:
            temp['days']='-'
        listgrid.append(temp)

    context={
        'insp_details':insp_details,
        'listgrid':listgrid,
        'inspection_note_no':inspection_note_no,
        'start_date':start_date,
        'names':names,
        'designation':designation,
        # 'insp_desig':insp_desig,
        # 'insp_ofc_name':insp_ofc_name,
        # 'station_name':station_name,
    }
    # print(context)
    template_src='view_compliance_phase2_pdf.html'
    return render_to_pdf(template_src, context)




def corrigendum_compliance_checklist_pdf(request):
        abs_path=os.path.abspath('static/images/e-inspection.png')
    # try:
        empnox = models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=request.user)| Q(official_email_ID=request.user.guest_email) | Q(official_email_ID=request.user.email), empno__isnull=False)
        if empnox:
            empno = empnox[0].designation_code

            list3=models.railwayLocationMaster.objects.filter(location_type_desc__in=['DIVISION','WORKSHOP']).values('location_code', 'location_type').order_by('location_code')
            list4=[]
            for i in list3:
                list4.append({'location_code': i['location_code'], 'location_type': i['location_type']})
            list1=models.railwayLocationMaster.objects.filter(location_type_desc__in=['RAILWAY BOARD', 'PRODUCTION UNIT', 'HEAD QUATER','OFFICE', 'PSU', 'PRODUCTION UNIT', 'INSTITUTE']).values('location_code').order_by('location_code')
            list2=[]
            for i in list1:
                list2.append(i['location_code'])
                
            list5=list(models.departMast.objects.all().values('department_name')) 
            item=[] 
            # print(list5)

            obj1 = m1.Marked_Officers.objects.filter(status_flag=4, item_no__inspection_no__inspection_officer=empno).values_list('item_no__inspection_no', flat=True).distinct()
            print('obj1', obj1)
            mydata =[]
            # for i in obj1:
            #     insp = i['item_no__inspection_no']
            mydata = list(m1.Inspection_details.objects.filter(inspection_no__in=obj1).values())
            
            for j in mydata:
                insp = j['inspection_no']
                location = list(m1.Insp_multi_location.objects.filter(inspection_no=insp).values())
                j.update({'location_item': location})

            counter=len(mydata)
            phase2 = list(m2.einsp_marked.objects.exclude(revert=2).filter(eitemid__einspno__designation_id=empno,status_flag=4, revert=1).values('eitemid__einspno__inspected_on','eitemid_id','created_on','status_flag','created_by','id','compliance','marked_to_id','marked_emp_id','designation_by','target_date','revert','designation','id','eitemid__einspno','eitemid__einspno__inspection_title','eitemid__einspno__instypeid__name','eitemid__einspno__rly_id_id__location_code','eitemid__einspno__div_id_id__location_code','eitemid__einspno__inspection_note_no','eitemid__einspno__designation__designation').distinct('eitemid__einspno'))
            for p in phase2:
                counter+=1
                p['sr_no']=counter
            context={
                'Zone':list2 ,
                    'division':list4,
                    'department':list5,
                    'item':item,
                    'mydata': mydata,
                    'phase2':phase2,
                    'abs_path':abs_path,
                }
            print(mydata)
            if request.method == 'POST':
                print('@@@@@@@@@@@@@')
                rly=request.POST.get('zone')
                div=request.POST.get('division')
                dept=request.POST.get('department')
                loc=request.POST.get('loc')
                start_date=request.POST.get('start')
                end_date=request.POST.get('txtDate2')
                get_designation=request.POST.get('get_designation')
                print(rly,div,dept,loc,start_date,end_date,get_designation,"~~~~~~~~~")
                
                
                # mydata=m1.Inspection_details.objects.filter(zone=rly,division=div,dept=dept).values('inspection_no','inspection_note_no', 'inspection_title','inspected_on', 'zone','division','dept','location','report_path').order_by('-inspection_no')
                mydata1 =[]
                for i in obj1:
                    insp = i['item_no__inspection_no']
                    mydata = list(m1.Inspection_details.objects.filter(inspection_no=insp, zone=rly,division=div,dept=dept).values())
                    mydata1.extend(mydata)
                    print('iiiiiiiiiiiii',  mydata)

                context={
                    'Zone':list2 ,
                    'division':list4,
                    'department':list5,
                    'item':item,
                    'mydata': mydata1,
                    'abs_path':abs_path,
                }
                
                template_src='corrigendum_compliance_checklist_pdf.html'
                return render_to_pdf(template_src,context)
            
            template_src='corrigendum_compliance_checklist_pdf.html'
            return render_to_pdf(template_src,context)
        else:
            messages.error(request, 'You are not authorize to see inspection. Please contact to admin')
            return render(request,"corrigendum_compliance_checklist.html")
    # except Exception as e: 
    #     try:
    #         m1.error_Table.objects.create(fun_name="corrigendum_compliance_checklist",user_id=request.user,err_details=str(e))
    #     except:
    #         print("Internal Error!!!")
    #     return render(request, "errorspage.html", {})



def draft_inspection_form_pdf(request):
    abs_path=os.path.abspath('static/images/e-inspection.png')
    try:
        daterangeselect=request.GET.get('data3')
        empnox = models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=request.user)| Q(official_email_ID=request.user.guest_email) | Q(official_email_ID=request.user.email), empno__isnull=False)
        if empnox:
            empno = empnox[0].designation_code

            if daterangeselect not in ['0-3','0-6','0-12','tofrom']:
                inspection=m1.Inspection_details.objects.filter(status_flag=0, inspection_officer=empno).values().order_by('-inspection_no')
            else:
                from dateutil.relativedelta import relativedelta
                if daterangeselect=='0-3':
                    now = datetime.today()
                    six = now
                    prev = now - relativedelta(months=3)
                    prev = prev.date()
                elif daterangeselect=='0-6':
                    now = datetime.today()
                    six = now
                    prev = now - relativedelta(months=6)
                    prev = prev.date()
                elif daterangeselect=='0-12':
                    now = datetime.today()
                    six = now
                    prev = now - relativedelta(months=12)
                    prev = prev.date()
                elif daterangeselect=='tofrom':
                    daterange=request.GET.get('daterange')
                    daterange1=daterange.split('-')
                    date1=daterange1[0].split('/')
                    date2=daterange1[1].split('/')
                    prev='20'+date1[2].strip()+'-'+date1[1].strip()+'-'+date1[0].strip()
                    six='20'+date2[2].strip()+'-'+date2[1].strip()+'-'+date2[0].strip()
                inspection=m1.Inspection_details.objects.filter(status_flag=0, inspection_officer=empno,inspected_on__gte=prev,inspected_on__lte=six).values().order_by('-inspection_no')
            for i in inspection:
                location = list(m1.Insp_multi_location.objects.filter(inspection_no=i['inspection_no']).values())
                #print(location)
                i.update({'location_item': location})
        else:
            messages.error(request, 'You are not authorize to see inspection. Please contact to admin')
            return render(request,"draft_inspection.html")

        rly_code=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=request.user.email) | Q(official_email_ID=request.user.guest_email))[0].rly_unit.location_code
        rly_unit_code=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=request.user.email) | Q(official_email_ID=request.user.guest_email))[0].rly_unit.rly_unit_code
        parent_loc=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=request.user.email) | Q(official_email_ID=request.user.guest_email))[0].rly_unit.parent_location_code
        parent_loc_id=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=request.user.email) | Q(official_email_ID=request.user.guest_email))[0].rly_unit.parent_rly_unit_code
        div_code=rly_code
        if parent_loc!='RB':
            div_code=rly_code
            rly_code=parent_loc
            rly_unit_code=parent_loc_id
        print(div_code,rly_code,rly_unit_code)

        list1=models.railwayLocationMaster.objects.filter(location_type_desc__in=['RAILWAY BOARD', 'PRODUCTION UNIT', 'HEAD QUATER', 'PSU', 'INSTITUTE']).values('location_code').distinct().order_by('location_code')
        list2=[]
        for i in list1:
            # print(i['location_code'],'_________')
            list2.append(i['location_code'])
        list3=models.railwayLocationMaster.objects.filter(location_type_desc__in=['DIVISION','WORKSHOP', 'STORE', 'CONSTRUCTION', 'OFFICE']).distinct().values('location_code', 'location_type').order_by('location_code')
        list4=[]
        for i in list3:
            list4.append({'location_code': i['location_code'], 'location_type': i['location_type']})
          
        list5=models.departMast.objects.all().distinct().values('department_name').order_by('department_name')
        list6=[]
        for i in list5:
            # print(i['department_name'],'_________')
            list6.append(i['department_name'])  


        #PHASE 2
        dataph2 = list(m2.einspection_details.objects.filter(status=0,designation_id=empno,instypeid__isnull=False).values('inspected_on','instypeid__name','einspno','inspection_title','rly_id_id__location_code','div_id_id__location_code','instypeid').order_by('-einspno'))
        count=len(inspection)+1
        for i in dataph2:
            i['sr_no']=count
            count+=1
            

        context={
            'zone':list2 ,
            'division':list4,
            'dept':list6,
            'list1':inspection,
            'dataph2':dataph2,
            'rly_unit_code':rly_unit_code,
            'rly_code':rly_code,
            'div_code':div_code,
            'abs_path':abs_path,
        }
        template_src='draft_inspection_pdf.html'
        return render_to_pdf(template_src, context)
    except Exception as e:
        try:
            m1.error_Table.objects.create(fun_name="draft_inspection_form",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        #messages.error(request, 'Error : '+str(e))
        return render(request, "errorspage.html", {})




def inspection_doneby_list_pdf(request):
    abs_path=os.path.abspath('static/images/e-inspection.png')
    try:
        daterangeselect=request.GET.get('data3')
        empnox = models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=request.user) | Q(official_email_ID=request.user.guest_email) | Q(official_email_ID=request.user.email), empno__isnull=False)
        
        if empnox:
            empno = empnox[0].designation_code
            desig = empnox[0].designation
            rly=request.POST.getlist('zone')
            div=request.POST.getlist('division')
            dept=request.POST.getlist('department')
            loc=request.POST.getlist('location')
            
            list3=models.railwayLocationMaster.objects.filter(location_type_desc__in=['DIVISION','WORKSHOP']).values('location_code', 'location_type').order_by('location_code')
            list4=[]
            for i in list3:
                list4.append({'location_code': i['location_code'], 'location_type': i['location_type']})
            list1=models.railwayLocationMaster.objects.filter(location_type_desc__in=['RAILWAY BOARD', 'PRODUCTION UNIT', 'HEAD QUATER','OFFICE', 'PSU', 'PRODUCTION UNIT', 'INSTITUTE']).values('location_code').order_by('location_code')
            list2=[]
            for i in list1:
                list2.append(i['location_code'])
                
            list5=list(models.departMast.objects.all().values('department_name')) 
            item=[] 
            #PHASE 2
            
            data = m2.einspection_details.objects.filter(~Q(status=0),designation_id=empno,instypeid__isnull=False).all().order_by('-einspno')
            
            try: 
                
                # if len(rly) != 0 or len(dept) !=0 or len(div)!=0 or len(loc)!=0:
                #     print('rly', rly)
                #     loca = m1.Insp_multi_location.objects.filter(Q(item__in=rly)|Q(item__in=div)|Q(item__in=dept)|Q(item__in=loc), inspection_no__status_flag=1, inspection_no__inspection_officer=empno ).values_list('inspection_no', flat=True)
                #     print('!!!!!!!!!!', loca)
                #     mydata=list(m1.Inspection_details.objects.filter(inspection_no__in=loca).values().order_by('-inspection_no'))
                    
                #     for i in mydata:
                #         location = list(m1.Insp_multi_location.objects.filter(inspection_no=i['inspection_no']).values())
                #         insp = m1.Marked_Officers.objects.filter(item_no__inspection_no=i['inspection_no'])
                #         over_all = insp.count()
                #         remaning = insp.filter(status_flag=3).count()
                #         if over_all != 0:
                #             persentage  = (remaning/over_all)*100
                #             persentage = round(persentage)
                #         else:
                #             persentage = 0
                #         print(location)
                #         i.update({'location_item': location, 'persentage': persentage})
                #     print("########")
                    
                # else:


                if daterangeselect not in ['0-3','0-6','0-12','tofrom']:
                    mydata=list(m1.Inspection_details.objects.filter(~Q(status_flag=0), inspection_officer=empno).values().order_by('-inspection_no')) 
                else:
                    from dateutil.relativedelta import relativedelta
                    if daterangeselect=='0-3':
                        now = datetime.today()
                        six = now
                        prev = now - relativedelta(months=3)
                        prev = prev.date()
                    elif daterangeselect=='0-6':
                        now = datetime.today()
                        six = now
                        prev = now - relativedelta(months=6)
                        prev = prev.date()
                    elif daterangeselect=='0-12':
                        now = datetime.today()
                        six = now
                        prev = now - relativedelta(months=12)
                        prev = prev.date()
                    elif daterangeselect=='tofrom':
                        daterange=request.GET.get('daterange')
                        daterange1=daterange.split('-')
                        date1=daterange1[0].split('/')
                        date2=daterange1[1].split('/')
                        prev='20'+date1[2].strip()+'-'+date1[1].strip()+'-'+date1[0].strip()
                        six='20'+date2[2].strip()+'-'+date2[1].strip()+'-'+date2[0].strip()
                    mydata=list(m1.Inspection_details.objects.filter(~Q(status_flag=0), inspection_officer=empno,inspected_on__gte=prev,inspected_on__lte=six).values().order_by('-inspection_no')) 

                # print(mydata)
                count=len(data)
                for i in mydata:
                    count+=1
                    i['sr_no']=count
                    location = list(m1.Insp_multi_location.objects.filter(inspection_no=i['inspection_no']).values())
                    insp = m1.Marked_Officers.objects.filter(item_no__inspection_no=i['inspection_no'])
                    over_all = insp.count()
                    remaning = insp.filter(status_flag=3).count()
                    #print(over_all, remaning)
                    if over_all != 0:
                        persentage  = (remaning/over_all)*100
                        persentage = round(persentage)
                    else:
                        persentage = 0

                    #print(location)
                    i.update({'location_item': location, 'persentage': persentage})
                # print('++++++++++++++', mydata)
          
            except Exception as e:
                print("e==",e)  

            
            
            context={
                'Zone':list2 ,
                'division':list4,
                'department':list5,
                'mydata':mydata,
                'item':item,
                'desig': desig,
                'phase2':data,
                'abs_path':abs_path,
            }
            
            
            template_src='inspection_doneby_list_pdf.html'
            return render_to_pdf(template_src, context)
        else:
            # messages.error(request, 'You are not authorize to draft inspection. Please contact to admin')
            return render(request,"inspection_doneby_list.html")
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="inspection_doneby_list",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})




def created_checklist_pdf(request):
        abs_path=os.path.abspath('static/images/e-inspection.png')
    # try:
        color=request.GET.get('data3')
        empnox = models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=request.user)| Q(official_email_ID=request.user.guest_email) | Q(official_email_ID=request.user.email), empno__isnull=False)
        
        if empnox:
            empno = empnox[0].designation_code
            desig = empnox[0].designation


            # print('@@@@@@@@@@@@@')
            rly=request.POST.getlist('zone')
            div=request.POST.getlist('division')
            dept=request.POST.getlist('department')
            loc=request.POST.getlist('location')
            # start_date=request.POST.get('start')
            # end_date=request.POST.get('txtDate2')
            # get_designation=request.POST.get('get_designation')
            #print(rly, div, dept, loc, "~~~~~~~~~")


            #PHASE 2                                        
            pending = m2.einspection_details.objects.filter(status=1,designation_id=empno,instypeid__isnull=False).values('inspected_on','inspection_note_no','instypeid__name','inspection_title','rly_id_id__location_code','div_id_id__location_code','einspno').order_by('-einspno')
            for p in pending:
                p['total_marked']=m2.einsp_marked.objects.exclude(revert=2).filter(eitemid__einspno=p['einspno']).count()
                p['total_complied']=m2.einsp_marked.objects.exclude(revert=2).filter(eitemid__einspno=p['einspno'],status_flag=4).count()
                # p['total_forward']=m2.einsp_marked.objects.exclude(revert=2).filter(eitemid__einspno=p['einspno'],marked_to_id=das_desig,status_flag=3).count()
                # p['total_pending']=m2.einsp_marked.objects.exclude(revert=2).filter(eitemid__einspno=p['einspno'],marked_to_id=das_desig,status_flag__in=[0,1,2,3]).count()
                print(p['total_marked'])
                if p['total_marked'] == 0:
                    p['percentageCompliance'] = 0
                else:
                    p['percentageCompliance'] = int((p['total_complied']/p['total_marked'])*100)
            count=len(pending)
            
            list3=models.railwayLocationMaster.objects.filter(location_type_desc__in=['DIVISION','WORKSHOP']).values('location_code', 'location_type').order_by('location_code')
            list4=[]
            for i in list3:
                list4.append({'location_code': i['location_code'], 'location_type': i['location_type']})
            list1=models.railwayLocationMaster.objects.filter(location_type_desc__in=['RAILWAY BOARD', 'PRODUCTION UNIT', 'HEAD QUATER','OFFICE', 'PSU', 'PRODUCTION UNIT', 'INSTITUTE']).values('location_code').order_by('location_code')
            list2=[]
            for i in list1:
                # print(i['location_code'],'_________')
                list2.append(i['location_code'])
                
            list5=list(models.departMast.objects.all().values('department_name')) 
            item=[] 
            # print(list5)
            
            try: 
                
                if len(rly) != 0 or len(dept) !=0 or len(div)!=0 or len(loc)!=0:
                    #print('rly', rly)
                    loca = m1.Insp_multi_location.objects.filter(Q(item__in=rly)|Q(item__in=div)|Q(item__in=dept)|Q(item__in=loc), inspection_no__status_flag=1, inspection_no__inspection_officer=empno ).values_list('inspection_no', flat=True)
                    # print('!!!!!!!!!!', loca)
                    # mydata=list(m1.Inspection_details.objects.filter(inspection_no__in=loca).values().order_by('-inspection_no'))
                    if color=='0-3':
                        now = datetime.today()
                        prev = now - timedelta(days=90)
                        mydata=list(m1.Inspection_details.objects.filter(inspection_no__in=loca,inspected_on__gte=prev).values().order_by('-inspection_no'))
                    elif  color=='3-6':
                        now = datetime.today()
                        prev = now - timedelta(days=90)          
                        six=now - timedelta(days=180)
                        mydata=list(m1.Inspection_details.objects.filter(inspection_no__in=loca,inspected_on__gte=prev,inspected_on__lte=six).values().order_by('-inspection_no'))
                    elif color=='>6':
                        now = datetime.today()
                        prev = now - timedelta(days=180)
                        mydata=list(m1.Inspection_details.objects.filter(inspection_no__in=loca,inspected_on__lte=prev).values().order_by('-inspection_no'))
                    elif  color=='tofrom':
                        daterange=request.GET.get('daterange')
                        daterange1=daterange.split('-')
                            
                        date1=daterange1[0].split('/')
                        date2=daterange1[1].split('/')
                        prev='20'+date1[2].strip()+'-'+date1[1].strip()+'-'+date1[0].strip()
                        six='20'+date2[2].strip()+'-'+date2[1].strip()+'-'+date2[0].strip()
                        mydata=list(m1.Inspection_details.objects.filter(inspection_no__in=loca,inspected_on__gte=prev,inspected_on__lte=six).values().order_by('-inspection_no'))
                        
                    else:
                        mydata=list(m1.Inspection_details.objects.filter(inspection_no__in=loca).values().order_by('-inspection_no'))
                    # print(mydata)
                    for i in mydata:
                        count+=1
                        i['sr_no']=count
                        location = list(m1.Insp_multi_location.objects.filter(inspection_no=i['inspection_no']).values())
                        #print(location)
                        i.update({'location_item': location})
                    # print("########")
                    
                    
                else:
                    # mydata=list(m1.Inspection_details.objects.filter(status_flag=1, inspection_officer=empno).values().order_by('-inspection_no'))
                    # print(mydata)
                    #print("######## else")
                    if color=='0-3':
                        now = datetime.today()
                        prev = now - timedelta(days=90)
                        mydata=list(m1.Inspection_details.objects.filter(Q(status_flag=1)|Q(status_flag=2), inspection_officer=empno,inspected_on__gte=prev).values().order_by('-inspection_no'))
                    elif  color=='3-6':
                        now = datetime.today()
                        prev = now - timedelta(days=90)          
                        six=now - timedelta(days=180)
                        mydata=list(m1.Inspection_details.objects.filter(Q(status_flag=1)|Q(status_flag=2), inspection_officer=empno,inspected_on__gte=prev,inspected_on__lte=six).values().order_by('-inspection_no'))
                    elif color=='>6':
                        now = datetime.today()
                        prev = now - timedelta(days=180)
                        mydata=list(m1.Inspection_details.objects.filter(Q(status_flag=1)|Q(status_flag=2), inspection_officer=empno,inspected_on__lte=prev).values().order_by('-inspection_no'))
                    elif  color=='tofrom':
                        daterange=request.GET.get('daterange')
                        daterange1=daterange.split('-')
                            
                        date1=daterange1[0].split('/')
                        date2=daterange1[1].split('/')
                        prev='20'+date1[2].strip()+'-'+date1[1].strip()+'-'+date1[0].strip()
                        six='20'+date2[2].strip()+'-'+date2[1].strip()+'-'+date2[0].strip()
                        mydata=list(m1.Inspection_details.objects.filter(Q(status_flag=1)|Q(status_flag=2), inspection_officer=empno,inspected_on__gte=prev,inspected_on__lte=six).values().order_by('-inspection_no'))
                        
                    else:
                        mydata=list(m1.Inspection_details.objects.filter(Q(status_flag=1)|Q(status_flag=2), inspection_officer=empno).values().order_by('-inspection_no'))
                    for i in mydata:
                        count+=1
                        i['sr_no']=count
                        insp = m1.Marked_Officers.objects.filter(item_no__inspection_no=i['inspection_no'])
                        over_all = insp.count()
                        remaning = insp.filter(status_flag=3).count()
                        if over_all != 0:
                            persentage  = (remaning/over_all)*100
                            persentage = round(persentage)
                        else:
                            persentage = 0

                        location = list(m1.Insp_multi_location.objects.filter(inspection_no=i['inspection_no']).values())
                        i.update({'location_item': location, 'persentage': persentage})
                        
                        
            except Exception as e:
                print("e==",e)  
            
            context={
                'Zone':list2 ,
                'division':list4,
                'department':list5,
                'mydata':mydata,
                'item':item,
                'desig': desig,
                'phase2':pending,
                'abs_path':abs_path,
            }
            
            template_src='list_create_inspection_report_pdf.html'
            return render_to_pdf(template_src,context)
        else:
            messages.error(request, 'You are not authorize to draft inspection. Please contact to admin')
            return render(request,"list_create_inspection_report.html")        
    # except Exception as e: 
    #     try:
    #         m1.error_Table.objects.create(fun_name="created_checklist",user_id=request.user,err_details=str(e))
    #     except:
    #         print("Internal Error!!!")
    #     return render(request, "errorspage.html", {})       



def close_compliance_checklist_pdf(request):
    abs_path=os.path.abspath('static/images/e-inspection.png')
    try:
        daterangeselect=request.GET.get('data3')
        
        # mydata=list(m1.Inspection_details.objects.filter(status='Close').values('inspection_no','inspection_note_no', 'inspection_title','zone','inspected_on','division','dept','location','report_path').order_by('-inspection_no'))
        empnox = models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=request.user)| Q(official_email_ID=request.user.guest_email) | Q(official_email_ID=request.user.email), empno__isnull=False)
        if empnox:
            empno = empnox[0].designation_code
        
            # mydata=list(m1.Inspection_details.objects.filter(Q(status_flag=4), inspection_officer=empno).values().order_by('-inspection_no'))
            if daterangeselect not in ['0-3','0-6','0-12','tofrom']:
                mydata=list(m1.Inspection_details.objects.filter(Q(status_flag=4), inspection_officer=empno).values().order_by('-inspection_no'))
            else:
                from dateutil.relativedelta import relativedelta
                if daterangeselect=='0-3':
                    now = datetime.today()
                    six = now
                    prev = now - relativedelta(months=3)
                    prev = prev.date()
                elif daterangeselect=='0-6':
                    now = datetime.today()
                    six = now
                    prev = now - relativedelta(months=6)
                    prev = prev.date()
                elif daterangeselect=='0-12':
                    now = datetime.today()
                    six = now
                    prev = now - relativedelta(months=12)
                    prev = prev.date()
                elif daterangeselect=='tofrom':
                    daterange=request.GET.get('daterange')
                    daterange1=daterange.split('-')
                    date1=daterange1[0].split('/')
                    date2=daterange1[1].split('/')
                    prev='20'+date1[2].strip()+'-'+date1[1].strip()+'-'+date1[0].strip()
                    six='20'+date2[2].strip()+'-'+date2[1].strip()+'-'+date2[0].strip()
                mydata=list(m1.Inspection_details.objects.filter(Q(status_flag=4), inspection_officer=empno,inspected_on__gte=prev,inspected_on__lte=six).values().order_by('-inspection_no'))
            #PHASE 2
            closed = m2.einspection_details.objects.filter(status=4,designation_id=empno,instypeid__isnull=False).all().order_by('-einspno')
            count=len(closed)
            for i in mydata:
                count+=1
                i['sr_no']=count
                location = list(m1.Insp_multi_location.objects.filter(inspection_no=i['inspection_no']).values())
                # print(location)
                
                insp = m1.Marked_Officers.objects.filter(item_no__inspection_no=i['inspection_no'])
                over_all = insp.count()
                remaning = insp.filter(status_flag=3).count()
                if over_all != 0:
                    persentage  = (remaning/over_all)*100
                    persentage = round(persentage)
                else:
                    persentage = 0
                i.update({'location_item': location, 'persentage': persentage})
            
            
            list3=models.railwayLocationMaster.objects.filter(location_type_desc__in=['DIVISION','WORKSHOP']).values('location_code', 'location_type').order_by('location_code')
            list4=[]
            for i in list3:
                list4.append({'location_code': i['location_code'], 'location_type': i['location_type']})
            list1=models.railwayLocationMaster.objects.filter(location_type_desc__in=['RAILWAY BOARD', 'PRODUCTION UNIT', 'HEAD QUATER','OFFICE', 'PSU', 'PRODUCTION UNIT', 'INSTITUTE']).values('location_code').order_by('location_code')
            list2=[]
            for i in list1:
                list2.append(i['location_code'])
                
            list5=list(models.departMast.objects.all().values('department_name')) 
            item=[] 
            # print(list5)
            mydata1=[]
            for i in range(len(mydata)):
                # if mydata[i]['persentage'] == 100:
                mydata1.append(mydata[i])
            print(mydata1)
            context={
                    'Zone':list2 ,
                    'division':list4,
                    'department':list5,
                    'item':item,
                    'mydata': mydata1,
                    'phase2':closed,
                    'abs_path':abs_path,
                }

            if request.method == 'POST':
                # print('@@@@@@@@@@@@@')
                rly=request.POST.get('zone')
                div=request.POST.get('division')
                dept=request.POST.get('department')
                loc=request.POST.get('loc')
                start_date=request.POST.get('start')
                end_date=request.POST.get('txtDate2')
                get_designation=request.POST.get('get_designation')
                # print(rly,div,dept,loc,start_date,end_date,get_designation,"~~~~~~~~~")
                
                
                mydata=m1.Inspection_details.objects.filter(status_flag=4).values('inspection_no','inspection_note_no', 'inspection_title','inspected_on','report_path').order_by('-inspection_no')
                
                context={
                    'Zone':list2 ,
                    'division':list4,
                    'department':list5,
                    'item':item,
                    'mydata': mydata,
                }
                
                template_src='close_compliance_checklist_pdf.html'
                return render_to_pdf(template_src,context)
            
            template_src='close_compliance_checklist_pdf.html'
            return render_to_pdf(template_src,context)
        else:
            messages.error(request, 'You are not authorize to see inspection. Please contact to admin')
            return render(request,"close_compliance_checklist.html")
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="close_compliance_checklist",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})



##############  new create inspection

def inspectionReportHtml(request, insp_id):
    # try:
        ins_detail=list(m1.Inspection_details.objects.filter(inspection_no=insp_id).values())
        # print(ins_detail,"asdfghjkljhgfghjk")
        final_submit_on = None
        if len(ins_detail) > 0:
            if ins_detail[0]['final_submit_on'] is not None:
                final_submit_on = ins_detail[0]['final_submit_on']
        item_details1= list(m1.Item_details.objects.filter(inspection_no_id=insp_id).values().order_by('sl_no'))
        loc= m1.Insp_multi_location.objects.filter(inspection_no=insp_id, type='LOC').values_list('item', flat=True)
        empno_empname = m1.Inspection_details.objects.filter(inspection_no=insp_id)
        if len(empno_empname) and empno_empname[0].inspection_officer.empno:
            employee_fname = empno_empname[0].inspection_officer.empno.empname
            if employee_fname:
                employee_name = employee_fname + " "
            employee_mname = empno_empname[0].inspection_officer.empno.empmname
            if employee_mname:
                employee_name += employee_mname + " "
            employee_lname = empno_empname[0].inspection_officer.empno.emplname
            if employee_lname:
                employee_name += employee_lname




            # employee_name = employee_fname +" "+employee_mname+" " + employee_lname
            employee_desig = empno_empname[0].inspection_officer.designation
            station_des = empno_empname[0].inspection_officer.empno.station_des
        else:
            employee_name = '- -'
            employee_desig = '- -'
            station_des='- -'




        personal_values = list(m1.Inspection_details.objects.filter(inspection_no=insp_id).values('officer_desig','officer_name','station_name'))
        # print(personal_values)
        if personal_values:
            insp_desig=personal_values[0]['officer_desig'] if personal_values[0]['officer_desig'] else employee_desig
            insp_ofc_name=personal_values[0]['officer_name'] if personal_values[0]['officer_name'] else employee_name
            station_name=personal_values[0]['station_name'] if personal_values[0]['station_name'] else station_des




        location_array = {'ORL':'Other Rly Unit','RRM': 'Running Room', 'SEM': 'Section', 'STM': 'Station', 'WOS': 'Work Shop','DLS': 'Diesel Loco Shed','ELS': 'Electric Loco Shed','COD': 'Coaching Depot','WAD': 'Wagon Depot', 'CTI': 'Training Institute', 'TRN': 'Train', 'HOS': 'Hospital','ORL':'Other Railway Location'}

        loc_str = ''
        for x in loc:
            loc_str += x +','
        ins_detail[0].update({'location': loc_str })




        locationss= m1.Insp_multi_location.objects.filter(inspection_no=insp_id).values()
        zones=''
        divs=''
        locs=''
        for x in locationss:
            if x['type']=='HQ':
                zones+=x['item']+','
            elif x['type']=='LOC':
                if x['table_from'] == None:
                    locs+='Other Railway Units ' + x['item']+','
                else:
                    locs+=location_array[x['table_from']]+' '+x['item']+','
            else:
                divs+=x['item']+','




        zones=zones.strip(',')  
        divs=divs.strip(',')  
        locs=locs.strip(',')    
        # print(zones,divs,locs)




        empnox = models.Level_Desig.objects.exclude(delete_flag=True).filter(Q(official_email_ID=request.user) | Q(official_email_ID=request.user.email))
        mail_detail = m6.copyto_mails.objects.filter(doc_id=insp_id, doc_table='i', area_flag=0).values()
       
        for y in mail_detail:
            y.update({'receiver_desig': y['receiver_desig'].split(',')})
        New_Accompany = m1.Insp_Accompany.objects.filter(inspection_no=insp_id).values_list('accompany', flat=True)
        Accompany1 = ''
        for dx in New_Accompany:
            Accompany1 += dx + ', '
        Accompany = Accompany1.rstrip(', ')
        if empnox:
            empno = empnox[0].empno_id
            desig = empnox[0].designation
            empname=m1.empmast.objects.filter(empno=empno)[0]


            img_count = 1
            for j in item_details1:
                if j['type'] == 'SH':
                    mark=m1.Marked_Officers.objects.filter(item_no=j['item_no'],action_type=0).values()
                    # print('---------', j['item_no'])
                    mrkoffiaction = {}
                    desig_longdesc1 =''
                    marked_officers1 = ''
                    mrkoffiactionlen = mark.count()
                    for x in mark:
                        # print('xxxxxxxxx', x['myuser_id_id'])
                        # marked=m1.empmast.objects.filter(myuser_id=x['myuser_id_id'])
                        marked=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=x['marked_to_id'])
                        # print('yyyyyyyy', marked[0].designation)
                        if marked.count() > 0:
                            if  marked[0].designation:
                                desig_longdesc1 += marked[0].designation+', '
                            marked_officers1 += str(marked[0].designation_code)+','
                    # desig_long = desig_longdesc1.rstrip(' ,')
                    # print('========', desig_longdesc1, '========')
                    # mrkoffi.update({'marked_officers': marked_officers1, 'desig_longdesc': desig_long})
                    testmarkofficer=''
                    if marked_officers1 != '':
                        testdesig=desig_longdesc1.split(',')
                        testempno=marked_officers1.split(',')
                        testdesig.pop()
                        testempno.pop()
                       
                        lstdict=[]
                        alldesig = models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).values('d_level').distinct('d_level')
                       
                        for i in alldesig:
                            if i['d_level'] == 'GM':
                                lst1=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level']).exclude(designation_code__in=testempno).count()
                                if lst1 == 0:
                                    lst2=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).exclude(d_level=i['d_level']).values('designation_code','designation', 'designation_code').order_by('designation'))
                                    if testmarkofficer != '':
                                        testmarkofficer+=','
                                    testmarkofficer=testmarkofficer+"All GM's/ZR"
                                    # testempno=set(testempno)
                                    # part=set(map(lambda d: d['partno'], part))
                                    interkey=set(testempno)-set(map(lambda d: d['designation_code'], lst2))
                                    testempno=list(map(lambda d: d['designation_code'], lst2))
                                    testdesig=list(map(lambda d: d['designation'], lst2))
                                    lstdict.append({"desig":"All GM's/ZR","designation_code":list(interkey)})


                            elif i['d_level'] == 'BM':
                                lst1=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level']).exclude(designation_code__in=testempno).count()
                                if lst1 == 0:
                                    lst2=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).exclude(d_level=i['d_level']).values('designation_code','designation', 'designation_code').order_by('designation'))
                                    if testmarkofficer != '':
                                        testmarkofficer+=','
                                    testmarkofficer=testmarkofficer+"All Board Member's"
                                    # testempno=set(testempno)
                                    # part=set(map(lambda d: d['partno'], part))
                                    interkey=set(testempno)-set(map(lambda d: d['designation_code'], lst2))
                                    testempno=list(map(lambda d: d['designation_code'], lst2))
                                    testdesig=list(map(lambda d: d['designation'], lst2))
                                    lstdict.append({"desig":"All Board Member's","designation_code":list(interkey)})




                            elif i['d_level'] == 'PHOD':
                                lst1=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level']).exclude(designation_code__in=testempno).count()
                                if lst1 == 0:
                                    lst2=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).exclude(d_level=i['d_level']).values('designation_code','designation', 'designation_code').order_by('designation'))
                                    if testmarkofficer != '':
                                        testmarkofficer+=','
                                    testmarkofficer=testmarkofficer+"All PHOD's"
                                    # testempno=set(testempno)
                                    # part=set(map(lambda d: d['partno'], part))
                                    interkey=set(testempno)-set(map(lambda d: d['designation_code'], lst2))
                                    testempno=list(map(lambda d: d['designation_code'], lst2))
                                    testdesig=list(map(lambda d: d['designation'], lst2))
                                    lstdict.append({"desig":"All PHOD's","designation_code":list(interkey)})
                                else:
                                    hq=models.railwayLocationMaster.objects.filter(parent_location_code__isnull=False).values('parent_location_code').distinct()
                                    for ii in hq:
                                        rlyunit=models.railwayLocationMaster.objects.filter(location_code=ii['parent_location_code']).values('rly_unit_code')
                                        if models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level'],rly_unit__in=rlyunit).exists():
                                            lst3=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level'],rly_unit__in=rlyunit).exclude(designation_code__in=testempno).count()
                                            if lst3 == 0:
                                                lst2=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).exclude(d_level=i['d_level'],rly_unit__in=rlyunit).values('designation_code','designation').order_by('designation'))
                                                if testmarkofficer != '':
                                                    testmarkofficer+=','
                                                testmarkofficer=testmarkofficer+"All PHOD's"+ii['parent_location_code']
                                                # testempno=set(testempno)
                                                # part=set(map(lambda d: d['partno'], part))
                                                interkey=set(testempno)-set(map(lambda d: d['designation_code'], lst2))
                                                testempno=list(map(lambda d: d['designation_code'], lst2))
                                                testdesig=list(map(lambda d: d['designation'], lst2))
                                                lstdict.append({"desig":"All PHOD's/"+ii['parent_location_code'],"designation_code":list(interkey)})






                            elif i['d_level'] == 'DRM':
                                lst1=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level']).exclude(designation_code__in=testempno).count()
                                if lst1 == 0:
                                    lst2=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).exclude(d_level=i['d_level']).values('designation_code','designation', 'designation_code').order_by('designation'))
                                    if testmarkofficer != '':
                                        testmarkofficer+=','
                                    testmarkofficer=testmarkofficer+"All DRM's"
                                    # testempno=set(testempno)
                                    # part=set(map(lambda d: d['partno'], part))
                                    interkey=set(testempno)-set(map(lambda d: d['designation_code'], lst2))
                                    testempno=list(map(lambda d: d['designation_code'], lst2))
                                    testdesig=list(map(lambda d: d['designation'], lst2))
                                    lstdict.append({"desig":"All DRM's","designation_code":list(interkey)})
                                else:
                                    hq=models.railwayLocationMaster.objects.filter(parent_location_code__isnull=False).values('parent_location_code').distinct()
                                    for ii in hq:
                                        rlyunit=models.railwayLocationMaster.objects.filter(parent_location_code=ii['parent_location_code']).values('rly_unit_code')
                                        if models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level'],rly_unit__in=rlyunit).exists():
                                            lst3=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level'],rly_unit__in=rlyunit).exclude(designation_code__in=testempno).count()
                                            if lst3 == 0:
                                                lst2=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).exclude(d_level=i['d_level'],rly_unit__in=rlyunit).values('designation_code','designation').order_by('designation'))
                                                if testmarkofficer != '':
                                                    testmarkofficer+=','
                                                testmarkofficer=testmarkofficer+"All DRM's/"+ii['parent_location_code']
                                                # testempno=set(testempno)
                                                # part=set(map(lambda d: d['partno'], part))
                                                interkey=set(testempno)-set(map(lambda d: d['designation_code'], lst2))
                                                testempno=list(map(lambda d: d['designation_code'], lst2))
                                                testdesig=list(map(lambda d: d['designation'], lst2))
                                                lstdict.append({"desig":"All DRM's/"+ii['parent_location_code'],"designation_code":list(interkey)})




                       
                        for i in range(len(testdesig)):
                            if testmarkofficer != '':
                                testmarkofficer+=','
                            testmarkofficer=testmarkofficer+testdesig[i]
                            lstdict.append({"desig":testdesig[i],"designation_code":[testempno[i]]})
                        testmarkofficerrep = testmarkofficer.replace(',', ', ')
                        mrkoffiaction.update({'marked_officers': marked_officers1, 'desig_longdesc': testmarkofficerrep,'custom_key':json.dumps(lstdict)})
                    
                    mark=m1.Marked_Officers.objects.filter(item_no=j['item_no'],action_type=1).values()
                    # print('---------', j['item_no'])
                    mrkofficomp = {}
                    desig_longdesc1 =''
                    marked_officers1 = ''
                    mrkofficomplen = mark.count()
                    for x in mark:
                        # print('xxxxxxxxx', x['myuser_id_id'])
                        # marked=m1.empmast.objects.filter(myuser_id=x['myuser_id_id'])
                        marked=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=x['marked_to_id'])
                        # print('yyyyyyyy', marked[0].designation)
                        if marked.count() > 0:
                            if  marked[0].designation:
                                desig_longdesc1 += marked[0].designation+', '
                            marked_officers1 += str(marked[0].designation_code)+','
                    # desig_long = desig_longdesc1.rstrip(' ,')
                    # print('========', desig_longdesc1, '========')
                    # mrkoffi.update({'marked_officers': marked_officers1, 'desig_longdesc': desig_long})
                    testmarkofficer=''
                    if marked_officers1 != '':
                        testdesig=desig_longdesc1.split(',')
                        testempno=marked_officers1.split(',')
                        testdesig.pop()
                        testempno.pop()
                       
                        lstdict=[]
                        alldesig = models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).values('d_level').distinct('d_level')
                       
                        for i in alldesig:
                            if i['d_level'] == 'GM':
                                lst1=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level']).exclude(designation_code__in=testempno).count()
                                if lst1 == 0:
                                    lst2=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).exclude(d_level=i['d_level']).values('designation_code','designation', 'designation_code').order_by('designation'))
                                    if testmarkofficer != '':
                                        testmarkofficer+=','
                                    testmarkofficer=testmarkofficer+"All GM's/ZR"
                                    # testempno=set(testempno)
                                    # part=set(map(lambda d: d['partno'], part))
                                    interkey=set(testempno)-set(map(lambda d: d['designation_code'], lst2))
                                    testempno=list(map(lambda d: d['designation_code'], lst2))
                                    testdesig=list(map(lambda d: d['designation'], lst2))
                                    lstdict.append({"desig":"All GM's/ZR","designation_code":list(interkey)})


                            elif i['d_level'] == 'BM':
                                lst1=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level']).exclude(designation_code__in=testempno).count()
                                if lst1 == 0:
                                    lst2=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).exclude(d_level=i['d_level']).values('designation_code','designation', 'designation_code').order_by('designation'))
                                    if testmarkofficer != '':
                                        testmarkofficer+=','
                                    testmarkofficer=testmarkofficer+"All Board Member's"
                                    # testempno=set(testempno)
                                    # part=set(map(lambda d: d['partno'], part))
                                    interkey=set(testempno)-set(map(lambda d: d['designation_code'], lst2))
                                    testempno=list(map(lambda d: d['designation_code'], lst2))
                                    testdesig=list(map(lambda d: d['designation'], lst2))
                                    lstdict.append({"desig":"All Board Member's","designation_code":list(interkey)})




                            elif i['d_level'] == 'PHOD':
                                lst1=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level']).exclude(designation_code__in=testempno).count()
                                if lst1 == 0:
                                    lst2=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).exclude(d_level=i['d_level']).values('designation_code','designation', 'designation_code').order_by('designation'))
                                    if testmarkofficer != '':
                                        testmarkofficer+=','
                                    testmarkofficer=testmarkofficer+"All PHOD's"
                                    # testempno=set(testempno)
                                    # part=set(map(lambda d: d['partno'], part))
                                    interkey=set(testempno)-set(map(lambda d: d['designation_code'], lst2))
                                    testempno=list(map(lambda d: d['designation_code'], lst2))
                                    testdesig=list(map(lambda d: d['designation'], lst2))
                                    lstdict.append({"desig":"All PHOD's","designation_code":list(interkey)})
                                else:
                                    hq=models.railwayLocationMaster.objects.filter(parent_location_code__isnull=False).values('parent_location_code').distinct()
                                    for ii in hq:
                                        rlyunit=models.railwayLocationMaster.objects.filter(location_code=ii['parent_location_code']).values('rly_unit_code')
                                        if models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level'],rly_unit__in=rlyunit).exists():
                                            lst3=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level'],rly_unit__in=rlyunit).exclude(designation_code__in=testempno).count()
                                            if lst3 == 0:
                                                lst2=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).exclude(d_level=i['d_level'],rly_unit__in=rlyunit).values('designation_code','designation').order_by('designation'))
                                                if testmarkofficer != '':
                                                    testmarkofficer+=','
                                                testmarkofficer=testmarkofficer+"All PHOD's"+ii['parent_location_code']
                                                # testempno=set(testempno)
                                                # part=set(map(lambda d: d['partno'], part))
                                                interkey=set(testempno)-set(map(lambda d: d['designation_code'], lst2))
                                                testempno=list(map(lambda d: d['designation_code'], lst2))
                                                testdesig=list(map(lambda d: d['designation'], lst2))
                                                lstdict.append({"desig":"All PHOD's/"+ii['parent_location_code'],"designation_code":list(interkey)})






                            elif i['d_level'] == 'DRM':
                                lst1=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level']).exclude(designation_code__in=testempno).count()
                                if lst1 == 0:
                                    lst2=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).exclude(d_level=i['d_level']).values('designation_code','designation', 'designation_code').order_by('designation'))
                                    if testmarkofficer != '':
                                        testmarkofficer+=','
                                    testmarkofficer=testmarkofficer+"All DRM's"
                                    # testempno=set(testempno)
                                    # part=set(map(lambda d: d['partno'], part))
                                    interkey=set(testempno)-set(map(lambda d: d['designation_code'], lst2))
                                    testempno=list(map(lambda d: d['designation_code'], lst2))
                                    testdesig=list(map(lambda d: d['designation'], lst2))
                                    lstdict.append({"desig":"All DRM's","designation_code":list(interkey)})
                                else:
                                    hq=models.railwayLocationMaster.objects.filter(parent_location_code__isnull=False).values('parent_location_code').distinct()
                                    for ii in hq:
                                        rlyunit=models.railwayLocationMaster.objects.filter(parent_location_code=ii['parent_location_code']).values('rly_unit_code')
                                        if models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level'],rly_unit__in=rlyunit).exists():
                                            lst3=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level'],rly_unit__in=rlyunit).exclude(designation_code__in=testempno).count()
                                            if lst3 == 0:
                                                lst2=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).exclude(d_level=i['d_level'],rly_unit__in=rlyunit).values('designation_code','designation').order_by('designation'))
                                                if testmarkofficer != '':
                                                    testmarkofficer+=','
                                                testmarkofficer=testmarkofficer+"All DRM's/"+ii['parent_location_code']
                                                # testempno=set(testempno)
                                                # part=set(map(lambda d: d['partno'], part))
                                                interkey=set(testempno)-set(map(lambda d: d['designation_code'], lst2))
                                                testempno=list(map(lambda d: d['designation_code'], lst2))
                                                testdesig=list(map(lambda d: d['designation'], lst2))
                                                lstdict.append({"desig":"All DRM's/"+ii['parent_location_code'],"designation_code":list(interkey)})




                       
                        for i in range(len(testdesig)):
                            if testmarkofficer != '':
                                testmarkofficer+=','
                            testmarkofficer=testmarkofficer+testdesig[i]
                            lstdict.append({"desig":testdesig[i],"designation_code":[testempno[i]]})
                        testmarkofficerrep = testmarkofficer.replace(',', ', ')
                       
                        mrkofficomp.update({'marked_officers': marked_officers1, 'desig_longdesc': testmarkofficerrep,'custom_key':json.dumps(lstdict)})
                    
                    j.update({'mrkoffiaction': mrkoffiaction,'mrkofficomp':mrkofficomp,'mrkoffiactionlen':mrkoffiactionlen,'mrkofficomplen':mrkofficomplen})
                   
                elif j['type'] == 'H':

                    mrkoffiaction = {}
                    mark=m1.Marked_Officers.objects.filter(item_no=j['item_no'])
                    bol=False
                    itbo = list(m1.Item_details.objects.filter(inspection_no_id=insp_id, type="SH").values('des_id').order_by('sl_no'))
                    for it in itbo:
                        if it['des_id'].split(".")[0]==j['item_no']:
                            bol=True
                    j.update({'bol':bol})
                    
                    desig_longdesc1 =''
                    marked_officers1 = ''
                    mark1=m1.Marked_Officers.objects.filter(item_no=j['item_no'],action_type=0).values()
                    mrkoffiactionlen = mark1.count()
                    for x in mark1:
                        # print('xxxxxxxxx', x['myuser_id_id'])
                        # marked=m1.empmast.objects.filter(myuser_id=x['myuser_id_id'])
                        marked=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=x['marked_to_id'])
                        # print('yyyyyyyy', marked[0].designation)
                        if marked.count() > 0:
                            if  marked[0].designation:
                                desig_longdesc1 += marked[0].designation+', '
                            marked_officers1 += str(marked[0].designation_code)+','
                    if marked_officers1 != '':
                        # all_h = mark.values('marked_to__designation', 'marked_to__empno_id','compliance','reply_on' ,'marked_no', 'status_flag').order_by('marked_no')
                        testmarkofficer=''
                        if marked_officers1 != '':
                            testdesig=desig_longdesc1.split(',')
                            testempno=marked_officers1.split(',')
                            testdesig.pop()
                            testempno.pop()
                           
                            lstdict=[]
                            alldesig = models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).values('d_level').distinct('d_level')
                           
                            for i in alldesig:
                                if i['d_level'] == 'GM':
                                    lst1=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level']).exclude(designation_code__in=testempno).count()
                                    if lst1 == 0:
                                        lst2=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).exclude(d_level=i['d_level']).values('designation_code','designation', 'designation_code').order_by('designation'))
                                        if testmarkofficer != '':
                                            testmarkofficer+=','
                                        testmarkofficer=testmarkofficer+"All GM's/ZR"
                                        # testempno=set(testempno)
                                        # part=set(map(lambda d: d['partno'], part))
                                        interkey=set(testempno)-set(map(lambda d: d['designation_code'], lst2))
                                        testempno=list(map(lambda d: d['designation_code'], lst2))
                                        testdesig=list(map(lambda d: d['designation'], lst2))
                                        lstdict.append({"desig":"All GM's/ZR","designation_code":list(interkey)})


                                elif i['d_level'] == 'BM':
                                    lst1=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level']).exclude(designation_code__in=testempno).count()
                                    if lst1 == 0:
                                        lst2=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).exclude(d_level=i['d_level']).values('designation_code','designation', 'designation_code').order_by('designation'))
                                        if testmarkofficer != '':
                                            testmarkofficer+=','
                                        testmarkofficer=testmarkofficer+"All Board Member's"
                                        # testempno=set(testempno)
                                        # part=set(map(lambda d: d['partno'], part))
                                        interkey=set(testempno)-set(map(lambda d: d['designation_code'], lst2))
                                        testempno=list(map(lambda d: d['designation_code'], lst2))
                                        testdesig=list(map(lambda d: d['designation'], lst2))
                                        lstdict.append({"desig":"All Board Member's","designation_code":list(interkey)})




                                elif i['d_level'] == 'PHOD':
                                    lst1=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level']).exclude(designation_code__in=testempno).count()
                                    if lst1 == 0:
                                        lst2=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).exclude(d_level=i['d_level']).values('designation_code','designation', 'designation_code').order_by('designation'))
                                        if testmarkofficer != '':
                                            testmarkofficer+=','
                                        testmarkofficer=testmarkofficer+"All PHOD's"
                                        # testempno=set(testempno)
                                        # part=set(map(lambda d: d['partno'], part))
                                        interkey=set(testempno)-set(map(lambda d: d['designation_code'], lst2))
                                        testempno=list(map(lambda d: d['designation_code'], lst2))
                                        testdesig=list(map(lambda d: d['designation'], lst2))
                                        lstdict.append({"desig":"All PHOD's","designation_code":list(interkey)})
                                    else:
                                        hq=models.railwayLocationMaster.objects.filter(parent_location_code__isnull=False).values('parent_location_code').distinct()
                                        for ii in hq:
                                            rlyunit=models.railwayLocationMaster.objects.filter(location_code=ii['parent_location_code']).values('rly_unit_code')
                                            if models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level'],rly_unit__in=rlyunit).exists():
                                                lst3=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level'],rly_unit__in=rlyunit).exclude(designation_code__in=testempno).count()
                                                if lst3 == 0:
                                                    lst2=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).exclude(d_level=i['d_level'],rly_unit__in=rlyunit).values('designation_code','designation').order_by('designation'))
                                                    if testmarkofficer != '':
                                                        testmarkofficer+=','
                                                    testmarkofficer=testmarkofficer+"All PHOD's"+ii['parent_location_code']
                                                    # testempno=set(testempno)
                                                    # part=set(map(lambda d: d['partno'], part))
                                                    interkey=set(testempno)-set(map(lambda d: d['designation_code'], lst2))
                                                    testempno=list(map(lambda d: d['designation_code'], lst2))
                                                    testdesig=list(map(lambda d: d['designation'], lst2))
                                                    lstdict.append({"desig":"All PHOD's/"+ii['parent_location_code'],"designation_code":list(interkey)})






                                elif i['d_level'] == 'DRM':
                                    lst1=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level']).exclude(designation_code__in=testempno).count()
                                    if lst1 == 0:
                                        lst2=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).exclude(d_level=i['d_level']).values('designation_code','designation', 'designation_code').order_by('designation'))
                                        if testmarkofficer != '':
                                            testmarkofficer+=','
                                        testmarkofficer=testmarkofficer+"All DRM's"
                                        # testempno=set(testempno)
                                        # part=set(map(lambda d: d['partno'], part))
                                        interkey=set(testempno)-set(map(lambda d: d['designation_code'], lst2))
                                        testempno=list(map(lambda d: d['designation_code'], lst2))
                                        testdesig=list(map(lambda d: d['designation'], lst2))
                                        lstdict.append({"desig":"All DRM's","designation_code":list(interkey)})
                                    else:
                                        hq=models.railwayLocationMaster.objects.filter(parent_location_code__isnull=False).values('parent_location_code').distinct()
                                        for ii in hq:
                                            rlyunit=models.railwayLocationMaster.objects.filter(parent_location_code=ii['parent_location_code']).values('rly_unit_code')
                                            if models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level'],rly_unit__in=rlyunit).exists():
                                                lst3=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level'],rly_unit__in=rlyunit).exclude(designation_code__in=testempno).count()
                                                if lst3 == 0:
                                                    lst2=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).exclude(d_level=i['d_level'],rly_unit__in=rlyunit).values('designation_code','designation').order_by('designation'))
                                                    if testmarkofficer != '':
                                                        testmarkofficer+=','
                                                    testmarkofficer=testmarkofficer+"All DRM's/"+ii['parent_location_code']
                                                    # testempno=set(testempno)
                                                    # part=set(map(lambda d: d['partno'], part))
                                                    interkey=set(testempno)-set(map(lambda d: d['designation_code'], lst2))
                                                    testempno=list(map(lambda d: d['designation_code'], lst2))
                                                    testdesig=list(map(lambda d: d['designation'], lst2))
                                                    lstdict.append({"desig":"All DRM's/"+ii['parent_location_code'],"designation_code":list(interkey)})




                           
                            for i in range(len(testdesig)):
                                if testmarkofficer != '':
                                    testmarkofficer+=','
                                testmarkofficer=testmarkofficer+testdesig[i]
                                lstdict.append({"desig":testdesig[i],"designation_code":[testempno[i]]})
                            testmarkofficerrep = testmarkofficer.replace(',', ', ')
                           
                            mrkoffiaction.update({'marked_officers': marked_officers1, 'desig_longdesc': testmarkofficerrep,'custom_key':json.dumps(lstdict)})

                    mrkofficomp = {}
                    desig_longdesc1 =''
                    marked_officers1 = ''
                    mark1=m1.Marked_Officers.objects.filter(item_no=j['item_no'],action_type=1).values()
                    mrkofficomplen = mark1.count()
                    for x in mark1:
                        # print('xxxxxxxxx', x['myuser_id_id'])
                        # marked=m1.empmast.objects.filter(myuser_id=x['myuser_id_id'])
                        marked=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=x['marked_to_id'])
                        # print('yyyyyyyy', marked[0].designation)
                        if marked.count() > 0:
                            if  marked[0].designation:
                                desig_longdesc1 += marked[0].designation+', '
                            marked_officers1 += str(marked[0].designation_code)+','
                    if marked_officers1 != '':
                        # all_h = mark.values('marked_to__designation', 'marked_to__empno_id','compliance','reply_on' ,'marked_no', 'status_flag').order_by('marked_no')
                        testmarkofficer=''
                        if marked_officers1 != '':
                            testdesig=desig_longdesc1.split(',')
                            testempno=marked_officers1.split(',')
                            testdesig.pop()
                            testempno.pop()
                           
                            lstdict=[]
                            alldesig = models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).values('d_level').distinct('d_level')
                           
                            for i in alldesig:
                                if i['d_level'] == 'GM':
                                    lst1=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level']).exclude(designation_code__in=testempno).count()
                                    if lst1 == 0:
                                        lst2=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).exclude(d_level=i['d_level']).values('designation_code','designation', 'designation_code').order_by('designation'))
                                        if testmarkofficer != '':
                                            testmarkofficer+=','
                                        testmarkofficer=testmarkofficer+"All GM's/ZR"
                                        # testempno=set(testempno)
                                        # part=set(map(lambda d: d['partno'], part))
                                        interkey=set(testempno)-set(map(lambda d: d['designation_code'], lst2))
                                        testempno=list(map(lambda d: d['designation_code'], lst2))
                                        testdesig=list(map(lambda d: d['designation'], lst2))
                                        lstdict.append({"desig":"All GM's/ZR","designation_code":list(interkey)})


                                elif i['d_level'] == 'BM':
                                    lst1=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level']).exclude(designation_code__in=testempno).count()
                                    if lst1 == 0:
                                        lst2=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).exclude(d_level=i['d_level']).values('designation_code','designation', 'designation_code').order_by('designation'))
                                        if testmarkofficer != '':
                                            testmarkofficer+=','
                                        testmarkofficer=testmarkofficer+"All Board Member's"
                                        # testempno=set(testempno)
                                        # part=set(map(lambda d: d['partno'], part))
                                        interkey=set(testempno)-set(map(lambda d: d['designation_code'], lst2))
                                        testempno=list(map(lambda d: d['designation_code'], lst2))
                                        testdesig=list(map(lambda d: d['designation'], lst2))
                                        lstdict.append({"desig":"All Board Member's","designation_code":list(interkey)})




                                elif i['d_level'] == 'PHOD':
                                    lst1=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level']).exclude(designation_code__in=testempno).count()
                                    if lst1 == 0:
                                        lst2=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).exclude(d_level=i['d_level']).values('designation_code','designation', 'designation_code').order_by('designation'))
                                        if testmarkofficer != '':
                                            testmarkofficer+=','
                                        testmarkofficer=testmarkofficer+"All PHOD's"
                                        # testempno=set(testempno)
                                        # part=set(map(lambda d: d['partno'], part))
                                        interkey=set(testempno)-set(map(lambda d: d['designation_code'], lst2))
                                        testempno=list(map(lambda d: d['designation_code'], lst2))
                                        testdesig=list(map(lambda d: d['designation'], lst2))
                                        lstdict.append({"desig":"All PHOD's","designation_code":list(interkey)})
                                    else:
                                        hq=models.railwayLocationMaster.objects.filter(parent_location_code__isnull=False).values('parent_location_code').distinct()
                                        for ii in hq:
                                            rlyunit=models.railwayLocationMaster.objects.filter(location_code=ii['parent_location_code']).values('rly_unit_code')
                                            if models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level'],rly_unit__in=rlyunit).exists():
                                                lst3=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level'],rly_unit__in=rlyunit).exclude(designation_code__in=testempno).count()
                                                if lst3 == 0:
                                                    lst2=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).exclude(d_level=i['d_level'],rly_unit__in=rlyunit).values('designation_code','designation').order_by('designation'))
                                                    if testmarkofficer != '':
                                                        testmarkofficer+=','
                                                    testmarkofficer=testmarkofficer+"All PHOD's"+ii['parent_location_code']
                                                    # testempno=set(testempno)
                                                    # part=set(map(lambda d: d['partno'], part))
                                                    interkey=set(testempno)-set(map(lambda d: d['designation_code'], lst2))
                                                    testempno=list(map(lambda d: d['designation_code'], lst2))
                                                    testdesig=list(map(lambda d: d['designation'], lst2))
                                                    lstdict.append({"desig":"All PHOD's/"+ii['parent_location_code'],"designation_code":list(interkey)})






                                elif i['d_level'] == 'DRM':
                                    lst1=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level']).exclude(designation_code__in=testempno).count()
                                    if lst1 == 0:
                                        lst2=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).exclude(d_level=i['d_level']).values('designation_code','designation', 'designation_code').order_by('designation'))
                                        if testmarkofficer != '':
                                            testmarkofficer+=','
                                        testmarkofficer=testmarkofficer+"All DRM's"
                                        # testempno=set(testempno)
                                        # part=set(map(lambda d: d['partno'], part))
                                        interkey=set(testempno)-set(map(lambda d: d['designation_code'], lst2))
                                        testempno=list(map(lambda d: d['designation_code'], lst2))
                                        testdesig=list(map(lambda d: d['designation'], lst2))
                                        lstdict.append({"desig":"All DRM's","designation_code":list(interkey)})
                                    else:
                                        hq=models.railwayLocationMaster.objects.filter(parent_location_code__isnull=False).values('parent_location_code').distinct()
                                        for ii in hq:
                                            rlyunit=models.railwayLocationMaster.objects.filter(parent_location_code=ii['parent_location_code']).values('rly_unit_code')
                                            if models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level'],rly_unit__in=rlyunit).exists():
                                                lst3=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level'],rly_unit__in=rlyunit).exclude(designation_code__in=testempno).count()
                                                if lst3 == 0:
                                                    lst2=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).exclude(d_level=i['d_level'],rly_unit__in=rlyunit).values('designation_code','designation').order_by('designation'))
                                                    if testmarkofficer != '':
                                                        testmarkofficer+=','
                                                    testmarkofficer=testmarkofficer+"All DRM's/"+ii['parent_location_code']
                                                    # testempno=set(testempno)
                                                    # part=set(map(lambda d: d['partno'], part))
                                                    interkey=set(testempno)-set(map(lambda d: d['designation_code'], lst2))
                                                    testempno=list(map(lambda d: d['designation_code'], lst2))
                                                    testdesig=list(map(lambda d: d['designation'], lst2))
                                                    lstdict.append({"desig":"All DRM's/"+ii['parent_location_code'],"designation_code":list(interkey)})




                           
                            for i in range(len(testdesig)):
                                if testmarkofficer != '':
                                    testmarkofficer+=','
                                testmarkofficer=testmarkofficer+testdesig[i]
                                lstdict.append({"desig":testdesig[i],"designation_code":[testempno[i]]})
                            testmarkofficerrep = testmarkofficer.replace(',', ', ')
                           
                            mrkofficomp.update({'marked_officers': marked_officers1, 'desig_longdesc': testmarkofficerrep,'custom_key':json.dumps(lstdict)})   


                    j.update({'mrkoffiaction': mrkoffiaction,'mrkofficomp':mrkofficomp,'mrkoffiactionlen':mrkoffiactionlen,'mrkofficomplen':mrkofficomplen, 'chk_cts':'YES'})

                else:
                    j.update({'chk_cts':'NO'})
                _tbl_tbl = []
                if j['tbl_data'] != '[]':
                    res = eval(j['tbl_data'])
                    for k1 in range(len(res)):
                        d2 = []
                        for k2 in range(len(res[k1])):
                            d2.append(res[k1][k2])
                        _tbl_tbl.append(d2)
                else:
                    _tbl_tbl = '[]'
                j.update({'tbl_data':_tbl_tbl})




                if j['link_image'] != None:
                    img = len(j['link_image'].split('@#@'))
                    img5=[]
                    for i5 in range(0,img):
                        img5.append(img_count)
                        img_count += 1




                    j.update({'enctype':'Encl:','enclen':img5})
                else:
                    j.update({'enctype':'','enclen':0})
            
            from datetime import datetime
            today_date = datetime.today()
            ins_detail[0].update({'item_details1': item_details1})
            inspection_note_no=m1.Inspection_details.objects.filter(inspection_no=insp_id)[0].inspection_note_no
            copyto1=[]
            if(m1.Insp_mail_details.objects.filter(inspection_no=insp_id, area='Copy To')):
                copyto1 = list(m1.Insp_mail_details.objects.filter(inspection_no=insp_id, area='Copy To').values('send_to', 'send_desig'))
                for j in copyto1:
                    j.update({'send_desig': j['send_desig'].replace(',', ', ')})
            item_details_img= list(m1.Item_details.objects.filter(inspection_no_id=insp_id,link_image__isnull=False).values('link_image','des_id').order_by('sl_no'))
            img_path = []
            for i5 in range(len(item_details_img)):
                img = item_details_img[i5]['link_image'].split('@#@')
                id = item_details_img[i5]['des_id']
                for i6 in range(len(img)):
                        abs_path = os.path.abspath(img[i6])
                        img_path.append({'id':id,'path':img[i6]})
            context={
                'insp_id':insp_id,
                'zones':zones,
                'divs':divs,
                'locs':locs,
                'insp_desig':insp_desig,
                'insp_ofc_name':insp_ofc_name,
                'station_name':station_name,
                'ins_detail':ins_detail,
                'today_date': today_date,
                'inspection_note_no': inspection_note_no,
                'empname': empname,
                'copyto': copyto1,
                'desig':desig,
                'Accompany': Accompany,
                'mail_detail': mail_detail,
                'employee_desig': employee_desig,
                'employee_name': employee_name,
                'img_path':img_path,
                'final_submit_on':final_submit_on,
                }
        return render(request, "inspectionReportHtml.html",context)
    # except Exception as e:
    #     try:
    #         m1.error_Table.objects.create(fun_name="inspectionReportHtml",user_id=request.user,err_details=str(e))
    #     except:
    #         print("Internal Error!!!")
    #     return render(request, "errorspage.html", {})
       
def inspectionReportPdf(request, insp_id):
    # try:
        ins_detail=list(m1.Inspection_details.objects.filter(inspection_no=insp_id).values())
        insp_typeValue = 0
        try:
            insTyp = ins_detail[0]['insp_type']
            if insTyp == 0:
                insp_typeValue = 'Regular Inspection'
            elif insTyp == 1:
                insp_typeValue = 'Drive Based Inspection(issued by RB)'
            elif insTyp == 2:
                insp_typeValue = 'Night Inspection'
            elif insTyp == 3:
                insp_typeValue = 'Surprise Inspection'
        except Exception as e:
            insp_typeValue = 0
        final_submit_on = None
        if len(ins_detail) > 0:
            if ins_detail[0]['final_submit_on'] is not None:
                final_submit_on = ins_detail[0]['final_submit_on']
        item_details1= list(m1.Item_details.objects.filter(inspection_no_id=insp_id).values().order_by('sl_no'))
        loc= m1.Insp_multi_location.objects.filter(inspection_no=insp_id, type='LOC').values_list('item', flat=True)
        empno_empname = m1.Inspection_details.objects.filter(inspection_no=insp_id)
        if empno_empname:
            employee_fname = empno_empname[0].inspection_officer.empno.empname
            if employee_fname:
                employee_name = employee_fname + " "


            employee_mname = empno_empname[0].inspection_officer.empno.empmname
            if employee_mname:
                employee_name += employee_mname + " "


            employee_lname = empno_empname[0].inspection_officer.empno.emplname
            if employee_lname:
                employee_name += employee_lname


            # employee_name = employee_fname +" "+employee_mname+" " + employee_lname
            employee_desig = empno_empname[0].inspection_officer.designation
            station_des = empno_empname[0].inspection_officer.empno.station_des
        else:
            employee_name = '--'
            employee_desig = '--'
            station_des='--'


        personal_values = list(m1.Inspection_details.objects.filter(inspection_no=insp_id).values('officer_desig','officer_name','station_name'))
        # print(personal_values)
        if personal_values:
            insp_desig=personal_values[0]['officer_desig'] if personal_values[0]['officer_desig'] else employee_desig
            insp_ofc_name=personal_values[0]['officer_name'] if personal_values[0]['officer_name'] else employee_name
            station_name=personal_values[0]['station_name'] if personal_values[0]['station_name'] else station_des


        location_array = {'ORL':'Other Rly Unit','RRM': 'Running Room', 'SEM': 'Section', 'STM': 'Station', 'WOS': 'Work Shop','DLS': 'Diesel Loco Shed','ELS': 'Electric Loco Shed','COD': 'Coaching Depot','WAD': 'Wagon Depot', 'CTI': 'Training Institute', 'TRN': 'Train', 'HOS': 'Hospital','ORL':'Other Railway Location'}
           
       
        loc_str = ''
        for x in loc:
            loc_str += x +','
        ins_detail[0].update({'location': loc_str })
        locationss= m1.Insp_multi_location.objects.filter(inspection_no=insp_id).values()
        zones=''
        divs=''
        locs=''
        for x in locationss:
            
            if x['type']=='HQ':
                zones+=x['item']+','
            elif x['type']=='LOC':
                locs+=location_array[x['table_from']]+' '+x['item']+','
            else:
                divs+=x['item']+','


        zones=zones.strip(',')  
        divs=divs.strip(',')  
        locs=locs.strip(',')    
        empnox = models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=request.user))
        mail_detail = m6.copyto_mails.objects.filter(doc_id=insp_id, doc_table='i', area_flag=0).values()
        if mail_detail.count():
            copytoId = mail_detail[0]['receiver_id']
            if copytoId != None:
                copytoId = copytoId.split(',')
            else:
                copytoId = []
        else:
            copytoId = []
        for y in mail_detail:
            y.update({'receiver_desig': y['receiver_desig'].split(',')})
        
        
        mrkoffiaction = {}
        desig_longdesc1 =''
        marked_officers1 = ''
        
        for x in copytoId:
            marked=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=x)
            if marked.count() > 0:
                if  marked[0].designation:
                    desig_longdesc1 += marked[0].designation+', '
                marked_officers1 += str(marked[0].designation_code)+','
        testmarkofficer=''

        
        if marked_officers1 != '':
            testdesig=desig_longdesc1.split(',')
            testempno=marked_officers1.split(',')
            testdesig.pop()
            testempno.pop()
            
            lstdict=[]
            alldesig = models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).values('d_level').distinct('d_level')
            
            for i in alldesig:
                if i['d_level'] == 'GM':
                    lst1=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level']).exclude(designation_code__in=testempno).count()
                    if lst1 == 0:
                        lst2=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).exclude(d_level=i['d_level']).values('designation_code','designation', 'designation_code').order_by('designation'))
                        if testmarkofficer != '':
                            testmarkofficer+=','
                        testmarkofficer=testmarkofficer+"All GM's/ZR"
                        # testempno=set(testempno)
                        # part=set(map(lambda d: d['partno'], part))
                        interkey=set(testempno)-set(map(lambda d: d['designation_code'], lst2))
                        testempno=list(map(lambda d: d['designation_code'], lst2))
                        testdesig=list(map(lambda d: d['designation'], lst2))
                        lstdict.append({"desig":"All GM's/ZR","designation_code":list(interkey)})


                elif i['d_level'] == 'BM':
                    lst1=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level']).exclude(designation_code__in=testempno).count()
                    if lst1 == 0:
                        lst2=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).exclude(d_level=i['d_level']).values('designation_code','designation', 'designation_code').order_by('designation'))
                        if testmarkofficer != '':
                            testmarkofficer+=','
                        testmarkofficer=testmarkofficer+"All Board Member's"
                        # testempno=set(testempno)
                        # part=set(map(lambda d: d['partno'], part))
                        interkey=set(testempno)-set(map(lambda d: d['designation_code'], lst2))
                        testempno=list(map(lambda d: d['designation_code'], lst2))
                        testdesig=list(map(lambda d: d['designation'], lst2))
                        lstdict.append({"desig":"All Board Member's","designation_code":list(interkey)})

                elif i['d_level'] == 'PHOD':
                    lst1=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level']).exclude(designation_code__in=testempno).count()
                    if lst1 == 0:
                        lst2=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).exclude(d_level=i['d_level']).values('designation_code','designation', 'designation_code').order_by('designation'))
                        if testmarkofficer != '':
                            testmarkofficer+=','
                        testmarkofficer=testmarkofficer+"All PHOD's"
                        # testempno=set(testempno)
                        # part=set(map(lambda d: d['partno'], part))
                        interkey=set(testempno)-set(map(lambda d: d['designation_code'], lst2))
                        testempno=list(map(lambda d: d['designation_code'], lst2))
                        testdesig=list(map(lambda d: d['designation'], lst2))
                        lstdict.append({"desig":"All PHOD's","designation_code":list(interkey)})
                    else:
                        hq=models.railwayLocationMaster.objects.filter(parent_location_code__isnull=False).values('parent_location_code').distinct()
                        for ii in hq:
                            rlyunit=models.railwayLocationMaster.objects.filter(location_code=ii['parent_location_code']).values('rly_unit_code')
                            if models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level'],rly_unit__in=rlyunit).exists():
                                lst3=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level'],rly_unit__in=rlyunit).exclude(designation_code__in=testempno).count()
                                if lst3 == 0:
                                    lst2=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).exclude(d_level=i['d_level'],rly_unit__in=rlyunit).values('designation_code','designation').order_by('designation'))
                                    if testmarkofficer != '':
                                        testmarkofficer+=','
                                    testmarkofficer=testmarkofficer+"All PHOD's/"+ii['parent_location_code']
                                    interkey=set(testempno)-set(map(lambda d: d['designation_code'], lst2))
                                    testempno=list(map(lambda d: d['designation_code'], lst2))
                                    testdesig=list(map(lambda d: d['designation'], lst2))
                                    lstdict.append({"desig":"All PHOD's/"+ii['parent_location_code'],"designation_code":list(interkey)})

                elif i['d_level'] == 'DRM':
                    lst1=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level']).exclude(designation_code__in=testempno).count()
                    if lst1 == 0:
                        lst2=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).exclude(d_level=i['d_level']).values('designation_code','designation', 'designation_code').order_by('designation'))
                        if testmarkofficer != '':
                            testmarkofficer+=','
                        testmarkofficer=testmarkofficer+"All DRM's"
                        # testempno=set(testempno)
                        # part=set(map(lambda d: d['partno'], part))
                        interkey=set(testempno)-set(map(lambda d: d['designation_code'], lst2))
                        testempno=list(map(lambda d: d['designation_code'], lst2))
                        testdesig=list(map(lambda d: d['designation'], lst2))
                        lstdict.append({"desig":"All DRM's","designation_code":list(interkey)})
                    else:
                        hq=models.railwayLocationMaster.objects.filter(parent_location_code__isnull=False).values('parent_location_code').distinct()
                        for ii in hq:
                            rlyunit=models.railwayLocationMaster.objects.filter(parent_location_code=ii['parent_location_code']).values('rly_unit_code')
                            if models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level'],rly_unit__in=rlyunit).exists():
                                lst3=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level'],rly_unit__in=rlyunit).exclude(designation_code__in=testempno).count()
                                if lst3 == 0:
                                    lst2=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).exclude(d_level=i['d_level'],rly_unit__in=rlyunit).values('designation_code','designation').order_by('designation'))
                                    if testmarkofficer != '':
                                        testmarkofficer+=','
                                    testmarkofficer=testmarkofficer+"All DRM's/"+ii['parent_location_code']
                                    # testempno=set(testempno)
                                    # part=set(map(lambda d: d['partno'], part))
                                    interkey=set(testempno)-set(map(lambda d: d['designation_code'], lst2))
                                    testempno=list(map(lambda d: d['designation_code'], lst2))
                                    testdesig=list(map(lambda d: d['designation'], lst2))
                                    lstdict.append({"desig":"All DRM's/"+ii['parent_location_code'],"designation_code":list(interkey)})


            for i in range(len(testdesig)):
                if testmarkofficer != '':
                    testmarkofficer+=','
                testmarkofficer=testmarkofficer+testdesig[i]
                lstdict.append({"desig":testdesig[i],"designation_code":[testempno[i]]})
            testmarkofficerrep = testmarkofficer.replace(',', ', ')
            #print(testmarkofficerrep,marked_officers1,lstdict)
            copytoId = testmarkofficerrep.split(',')






        #####################
        New_Accompany = m1.Insp_Accompany.objects.filter(inspection_no=insp_id).values_list('accompany', flat=True)
        Accompany1 = ''
        for dx in New_Accompany:
            Accompany1 += dx + ', '
        Accompany = Accompany1.rstrip(', ')
        if empnox:
            empno = empnox[0].empno_id
            
            desig = empnox[0].designation
            empname=m1.empmast.objects.filter(empno=empno)[0]


            img_count = 1
            for j in item_details1:
                if j['type'] == 'SH':

                    mark=m1.Marked_Officers.objects.filter(item_no=j['item_no'],action_type=0).values()
                    # print('---------', j['item_no'])
                    mrkoffiaction = {}
                    desig_longdesc1 =''
                    marked_officers1 = ''
                    mrkoffiactionlen = mark.count()
                    for x in mark:
                        # print('xxxxxxxxx', x['myuser_id_id'])
                        # marked=m1.empmast.objects.filter(myuser_id=x['myuser_id_id'])
                        marked=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=x['marked_to_id'])
                        # print('yyyyyyyy', marked[0].designation)
                        if marked.count() > 0:
                            if  marked[0].designation:
                                desig_longdesc1 += marked[0].designation+', '
                            marked_officers1 += str(marked[0].designation_code)+','
                    # desig_long = desig_longdesc1.rstrip(' ,')
                    # print('========', desig_longdesc1, '========')
                    # mrkoffi.update({'marked_officers': marked_officers1, 'desig_longdesc': desig_long})
                    testmarkofficer=''
                    if marked_officers1 != '':
                        testdesig=desig_longdesc1.split(',')
                        testempno=marked_officers1.split(',')
                        testdesig.pop()
                        testempno.pop()
                       
                        lstdict=[]
                        alldesig = models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).values('d_level').distinct('d_level')
                       
                        for i in alldesig:
                            if i['d_level'] == 'GM':
                                lst1=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level']).exclude(designation_code__in=testempno).count()
                                if lst1 == 0:
                                    lst2=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).exclude(d_level=i['d_level']).values('designation_code','designation', 'designation_code').order_by('designation'))
                                    if testmarkofficer != '':
                                        testmarkofficer+=','
                                    testmarkofficer=testmarkofficer+"All GM's/ZR"
                                    # testempno=set(testempno)
                                    # part=set(map(lambda d: d['partno'], part))
                                    interkey=set(testempno)-set(map(lambda d: d['designation_code'], lst2))
                                    testempno=list(map(lambda d: d['designation_code'], lst2))
                                    testdesig=list(map(lambda d: d['designation'], lst2))
                                    lstdict.append({"desig":"All GM's/ZR","designation_code":list(interkey)})


                            elif i['d_level'] == 'BM':
                                lst1=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level']).exclude(designation_code__in=testempno).count()
                                if lst1 == 0:
                                    lst2=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).exclude(d_level=i['d_level']).values('designation_code','designation', 'designation_code').order_by('designation'))
                                    if testmarkofficer != '':
                                        testmarkofficer+=','
                                    testmarkofficer=testmarkofficer+"All Board Member's"
                                    # testempno=set(testempno)
                                    # part=set(map(lambda d: d['partno'], part))
                                    interkey=set(testempno)-set(map(lambda d: d['designation_code'], lst2))
                                    testempno=list(map(lambda d: d['designation_code'], lst2))
                                    testdesig=list(map(lambda d: d['designation'], lst2))
                                    lstdict.append({"desig":"All Board Member's","designation_code":list(interkey)})




                            elif i['d_level'] == 'PHOD':
                                lst1=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level']).exclude(designation_code__in=testempno).count()
                                if lst1 == 0:
                                    lst2=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).exclude(d_level=i['d_level']).values('designation_code','designation', 'designation_code').order_by('designation'))
                                    if testmarkofficer != '':
                                        testmarkofficer+=','
                                    testmarkofficer=testmarkofficer+"All PHOD's"
                                    # testempno=set(testempno)
                                    # part=set(map(lambda d: d['partno'], part))
                                    interkey=set(testempno)-set(map(lambda d: d['designation_code'], lst2))
                                    testempno=list(map(lambda d: d['designation_code'], lst2))
                                    testdesig=list(map(lambda d: d['designation'], lst2))
                                    lstdict.append({"desig":"All PHOD's","designation_code":list(interkey)})
                                else:
                                    hq=models.railwayLocationMaster.objects.filter(parent_location_code__isnull=False).values('parent_location_code').distinct()
                                    for ii in hq:
                                        rlyunit=models.railwayLocationMaster.objects.filter(location_code=ii['parent_location_code']).values('rly_unit_code')
                                        if models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level'],rly_unit__in=rlyunit).exists():
                                            lst3=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level'],rly_unit__in=rlyunit).exclude(designation_code__in=testempno).count()
                                            if lst3 == 0:
                                                lst2=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).exclude(d_level=i['d_level'],rly_unit__in=rlyunit).values('designation_code','designation').order_by('designation'))
                                                if testmarkofficer != '':
                                                    testmarkofficer+=','
                                                testmarkofficer=testmarkofficer+"All PHOD's"+ii['parent_location_code']
                                                # testempno=set(testempno)
                                                # part=set(map(lambda d: d['partno'], part))
                                                interkey=set(testempno)-set(map(lambda d: d['designation_code'], lst2))
                                                testempno=list(map(lambda d: d['designation_code'], lst2))
                                                testdesig=list(map(lambda d: d['designation'], lst2))
                                                lstdict.append({"desig":"All PHOD's/"+ii['parent_location_code'],"designation_code":list(interkey)})






                            elif i['d_level'] == 'DRM':
                                lst1=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level']).exclude(designation_code__in=testempno).count()
                                if lst1 == 0:
                                    lst2=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).exclude(d_level=i['d_level']).values('designation_code','designation', 'designation_code').order_by('designation'))
                                    if testmarkofficer != '':
                                        testmarkofficer+=','
                                    testmarkofficer=testmarkofficer+"All DRM's"
                                    # testempno=set(testempno)
                                    # part=set(map(lambda d: d['partno'], part))
                                    interkey=set(testempno)-set(map(lambda d: d['designation_code'], lst2))
                                    testempno=list(map(lambda d: d['designation_code'], lst2))
                                    testdesig=list(map(lambda d: d['designation'], lst2))
                                    lstdict.append({"desig":"All DRM's","designation_code":list(interkey)})
                                else:
                                    hq=models.railwayLocationMaster.objects.filter(parent_location_code__isnull=False).values('parent_location_code').distinct()
                                    for ii in hq:
                                        rlyunit=models.railwayLocationMaster.objects.filter(parent_location_code=ii['parent_location_code']).values('rly_unit_code')
                                        if models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level'],rly_unit__in=rlyunit).exists():
                                            lst3=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level'],rly_unit__in=rlyunit).exclude(designation_code__in=testempno).count()
                                            if lst3 == 0:
                                                lst2=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).exclude(d_level=i['d_level'],rly_unit__in=rlyunit).values('designation_code','designation').order_by('designation'))
                                                if testmarkofficer != '':
                                                    testmarkofficer+=','
                                                testmarkofficer=testmarkofficer+"All DRM's/"+ii['parent_location_code']
                                                # testempno=set(testempno)
                                                # part=set(map(lambda d: d['partno'], part))
                                                interkey=set(testempno)-set(map(lambda d: d['designation_code'], lst2))
                                                testempno=list(map(lambda d: d['designation_code'], lst2))
                                                testdesig=list(map(lambda d: d['designation'], lst2))
                                                lstdict.append({"desig":"All DRM's/"+ii['parent_location_code'],"designation_code":list(interkey)})




                       
                        for i in range(len(testdesig)):
                            if testmarkofficer != '':
                                testmarkofficer+=','
                            testmarkofficer=testmarkofficer+testdesig[i]
                            lstdict.append({"desig":testdesig[i],"designation_code":[testempno[i]]})
                        testmarkofficerrep = testmarkofficer.replace(',', ', ')
                    mrkoffiaction.update({'marked_officers': marked_officers1, 'desig_longdesc': testmarkofficerrep,'custom_key':json.dumps(lstdict)})
                    
                    mark=m1.Marked_Officers.objects.filter(item_no=j['item_no'],action_type=1).values()
                    # print('---------', j['item_no'])
                    mrkofficomp = {}
                    desig_longdesc1 =''
                    marked_officers1 = ''
                    mrkofficomplen = mark.count()
                    for x in mark:
                        # print('xxxxxxxxx', x['myuser_id_id'])
                        # marked=m1.empmast.objects.filter(myuser_id=x['myuser_id_id'])
                        marked=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=x['marked_to_id'])
                        # print('yyyyyyyy', marked[0].designation)
                        if marked.count() > 0:
                            if  marked[0].designation:
                                desig_longdesc1 += marked[0].designation+', '
                            marked_officers1 += str(marked[0].designation_code)+','
                    # desig_long = desig_longdesc1.rstrip(' ,')
                    # print('========', desig_longdesc1, '========')
                    # mrkoffi.update({'marked_officers': marked_officers1, 'desig_longdesc': desig_long})
                    testmarkofficer=''
                    if marked_officers1 != '':
                        testdesig=desig_longdesc1.split(',')
                        testempno=marked_officers1.split(',')
                        testdesig.pop()
                        testempno.pop()
                       
                        lstdict=[]
                        alldesig = models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).values('d_level').distinct('d_level')
                       
                        for i in alldesig:
                            if i['d_level'] == 'GM':
                                lst1=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level']).exclude(designation_code__in=testempno).count()
                                if lst1 == 0:
                                    lst2=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).exclude(d_level=i['d_level']).values('designation_code','designation', 'designation_code').order_by('designation'))
                                    if testmarkofficer != '':
                                        testmarkofficer+=','
                                    testmarkofficer=testmarkofficer+"All GM's/ZR"
                                    # testempno=set(testempno)
                                    # part=set(map(lambda d: d['partno'], part))
                                    interkey=set(testempno)-set(map(lambda d: d['designation_code'], lst2))
                                    testempno=list(map(lambda d: d['designation_code'], lst2))
                                    testdesig=list(map(lambda d: d['designation'], lst2))
                                    lstdict.append({"desig":"All GM's/ZR","designation_code":list(interkey)})


                            elif i['d_level'] == 'BM':
                                lst1=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level']).exclude(designation_code__in=testempno).count()
                                if lst1 == 0:
                                    lst2=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).exclude(d_level=i['d_level']).values('designation_code','designation', 'designation_code').order_by('designation'))
                                    if testmarkofficer != '':
                                        testmarkofficer+=','
                                    testmarkofficer=testmarkofficer+"All Board Member's"
                                    # testempno=set(testempno)
                                    # part=set(map(lambda d: d['partno'], part))
                                    interkey=set(testempno)-set(map(lambda d: d['designation_code'], lst2))
                                    testempno=list(map(lambda d: d['designation_code'], lst2))
                                    testdesig=list(map(lambda d: d['designation'], lst2))
                                    lstdict.append({"desig":"All Board Member's","designation_code":list(interkey)})




                            elif i['d_level'] == 'PHOD':
                                lst1=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level']).exclude(designation_code__in=testempno).count()
                                if lst1 == 0:
                                    lst2=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).exclude(d_level=i['d_level']).values('designation_code','designation', 'designation_code').order_by('designation'))
                                    if testmarkofficer != '':
                                        testmarkofficer+=','
                                    testmarkofficer=testmarkofficer+"All PHOD's"
                                    # testempno=set(testempno)
                                    # part=set(map(lambda d: d['partno'], part))
                                    interkey=set(testempno)-set(map(lambda d: d['designation_code'], lst2))
                                    testempno=list(map(lambda d: d['designation_code'], lst2))
                                    testdesig=list(map(lambda d: d['designation'], lst2))
                                    lstdict.append({"desig":"All PHOD's","designation_code":list(interkey)})
                                else:
                                    hq=models.railwayLocationMaster.objects.filter(parent_location_code__isnull=False).values('parent_location_code').distinct()
                                    for ii in hq:
                                        rlyunit=models.railwayLocationMaster.objects.filter(location_code=ii['parent_location_code']).values('rly_unit_code')
                                        if models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level'],rly_unit__in=rlyunit).exists():
                                            lst3=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level'],rly_unit__in=rlyunit).exclude(designation_code__in=testempno).count()
                                            if lst3 == 0:
                                                lst2=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).exclude(d_level=i['d_level'],rly_unit__in=rlyunit).values('designation_code','designation').order_by('designation'))
                                                if testmarkofficer != '':
                                                    testmarkofficer+=','
                                                testmarkofficer=testmarkofficer+"All PHOD's"+ii['parent_location_code']
                                                # testempno=set(testempno)
                                                # part=set(map(lambda d: d['partno'], part))
                                                interkey=set(testempno)-set(map(lambda d: d['designation_code'], lst2))
                                                testempno=list(map(lambda d: d['designation_code'], lst2))
                                                testdesig=list(map(lambda d: d['designation'], lst2))
                                                lstdict.append({"desig":"All PHOD's/"+ii['parent_location_code'],"designation_code":list(interkey)})






                            elif i['d_level'] == 'DRM':
                                lst1=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level']).exclude(designation_code__in=testempno).count()
                                if lst1 == 0:
                                    lst2=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).exclude(d_level=i['d_level']).values('designation_code','designation', 'designation_code').order_by('designation'))
                                    if testmarkofficer != '':
                                        testmarkofficer+=','
                                    testmarkofficer=testmarkofficer+"All DRM's"
                                    # testempno=set(testempno)
                                    # part=set(map(lambda d: d['partno'], part))
                                    interkey=set(testempno)-set(map(lambda d: d['designation_code'], lst2))
                                    testempno=list(map(lambda d: d['designation_code'], lst2))
                                    testdesig=list(map(lambda d: d['designation'], lst2))
                                    lstdict.append({"desig":"All DRM's","designation_code":list(interkey)})
                                else:
                                    hq=models.railwayLocationMaster.objects.filter(parent_location_code__isnull=False).values('parent_location_code').distinct()
                                    for ii in hq:
                                        rlyunit=models.railwayLocationMaster.objects.filter(parent_location_code=ii['parent_location_code']).values('rly_unit_code')
                                        if models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level'],rly_unit__in=rlyunit).exists():
                                            lst3=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level'],rly_unit__in=rlyunit).exclude(designation_code__in=testempno).count()
                                            if lst3 == 0:
                                                lst2=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).exclude(d_level=i['d_level'],rly_unit__in=rlyunit).values('designation_code','designation').order_by('designation'))
                                                if testmarkofficer != '':
                                                    testmarkofficer+=','
                                                testmarkofficer=testmarkofficer+"All DRM's/"+ii['parent_location_code']
                                                # testempno=set(testempno)
                                                # part=set(map(lambda d: d['partno'], part))
                                                interkey=set(testempno)-set(map(lambda d: d['designation_code'], lst2))
                                                testempno=list(map(lambda d: d['designation_code'], lst2))
                                                testdesig=list(map(lambda d: d['designation'], lst2))
                                                lstdict.append({"desig":"All DRM's/"+ii['parent_location_code'],"designation_code":list(interkey)})




                       
                        for i in range(len(testdesig)):
                            if testmarkofficer != '':
                                testmarkofficer+=','
                            testmarkofficer=testmarkofficer+testdesig[i]
                            lstdict.append({"desig":testdesig[i],"designation_code":[testempno[i]]})
                        testmarkofficerrep = testmarkofficer.replace(',', ', ')
                       
                        mrkofficomp.update({'marked_officers': marked_officers1, 'desig_longdesc': testmarkofficerrep,'custom_key':json.dumps(lstdict)})
                    
                    j.update({'mrkoffiaction': mrkoffiaction,'mrkofficomp':mrkofficomp,'mrkoffiactionlen':mrkoffiactionlen,'mrkofficomplen':mrkofficomplen})
                   
                elif j['type'] == 'H':

                    mrkoffiaction = {}
                    mark=m1.Marked_Officers.objects.filter(item_no=j['item_no'])
                    bol=False
                    itbo = list(m1.Item_details.objects.filter(inspection_no_id=insp_id, type="SH").values('des_id').order_by('sl_no'))
                    for it in itbo:
                        if it['des_id'].split(".")[0]==j['item_no']:
                            bol=True
                    j.update({'bol':bol})
                    
                    desig_longdesc1 =''
                    marked_officers1 = ''
                    mark1=m1.Marked_Officers.objects.filter(item_no=j['item_no'],action_type=0).values()
                    mrkoffiactionlen = mark1.count()
                    for x in mark1:
                        # print('xxxxxxxxx', x['myuser_id_id'])
                        # marked=m1.empmast.objects.filter(myuser_id=x['myuser_id_id'])
                        marked=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=x['marked_to_id'])
                        # print('yyyyyyyy', marked[0].designation)
                        if marked.count() > 0:
                            if  marked[0].designation:
                                desig_longdesc1 += marked[0].designation+', '
                            marked_officers1 += str(marked[0].designation_code)+','
                    if marked_officers1 != '':
                        # all_h = mark.values('marked_to__designation', 'marked_to__empno_id','compliance','reply_on' ,'marked_no', 'status_flag').order_by('marked_no')
                        testmarkofficer=''
                        if marked_officers1 != '':
                            testdesig=desig_longdesc1.split(',')
                            testempno=marked_officers1.split(',')
                            testdesig.pop()
                            testempno.pop()
                           
                            lstdict=[]
                            alldesig = models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).values('d_level').distinct('d_level')
                           
                            for i in alldesig:
                                if i['d_level'] == 'GM':
                                    lst1=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level']).exclude(designation_code__in=testempno).count()
                                    if lst1 == 0:
                                        lst2=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).exclude(d_level=i['d_level']).values('designation_code','designation', 'designation_code').order_by('designation'))
                                        if testmarkofficer != '':
                                            testmarkofficer+=','
                                        testmarkofficer=testmarkofficer+"All GM's/ZR"
                                        # testempno=set(testempno)
                                        # part=set(map(lambda d: d['partno'], part))
                                        interkey=set(testempno)-set(map(lambda d: d['designation_code'], lst2))
                                        testempno=list(map(lambda d: d['designation_code'], lst2))
                                        testdesig=list(map(lambda d: d['designation'], lst2))
                                        lstdict.append({"desig":"All GM's/ZR","designation_code":list(interkey)})


                                elif i['d_level'] == 'BM':
                                    lst1=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level']).exclude(designation_code__in=testempno).count()
                                    if lst1 == 0:
                                        lst2=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).exclude(d_level=i['d_level']).values('designation_code','designation', 'designation_code').order_by('designation'))
                                        if testmarkofficer != '':
                                            testmarkofficer+=','
                                        testmarkofficer=testmarkofficer+"All Board Member's"
                                        # testempno=set(testempno)
                                        # part=set(map(lambda d: d['partno'], part))
                                        interkey=set(testempno)-set(map(lambda d: d['designation_code'], lst2))
                                        testempno=list(map(lambda d: d['designation_code'], lst2))
                                        testdesig=list(map(lambda d: d['designation'], lst2))
                                        lstdict.append({"desig":"All Board Member's","designation_code":list(interkey)})




                                elif i['d_level'] == 'PHOD':
                                    lst1=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level']).exclude(designation_code__in=testempno).count()
                                    if lst1 == 0:
                                        lst2=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).exclude(d_level=i['d_level']).values('designation_code','designation', 'designation_code').order_by('designation'))
                                        if testmarkofficer != '':
                                            testmarkofficer+=','
                                        testmarkofficer=testmarkofficer+"All PHOD's"
                                        # testempno=set(testempno)
                                        # part=set(map(lambda d: d['partno'], part))
                                        interkey=set(testempno)-set(map(lambda d: d['designation_code'], lst2))
                                        testempno=list(map(lambda d: d['designation_code'], lst2))
                                        testdesig=list(map(lambda d: d['designation'], lst2))
                                        lstdict.append({"desig":"All PHOD's","designation_code":list(interkey)})
                                    else:
                                        hq=models.railwayLocationMaster.objects.filter(parent_location_code__isnull=False).values('parent_location_code').distinct()
                                        for ii in hq:
                                            rlyunit=models.railwayLocationMaster.objects.filter(location_code=ii['parent_location_code']).values('rly_unit_code')
                                            if models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level'],rly_unit__in=rlyunit).exists():
                                                lst3=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level'],rly_unit__in=rlyunit).exclude(designation_code__in=testempno).count()
                                                if lst3 == 0:
                                                    lst2=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).exclude(d_level=i['d_level'],rly_unit__in=rlyunit).values('designation_code','designation').order_by('designation'))
                                                    if testmarkofficer != '':
                                                        testmarkofficer+=','
                                                    testmarkofficer=testmarkofficer+"All PHOD's"+ii['parent_location_code']
                                                    # testempno=set(testempno)
                                                    # part=set(map(lambda d: d['partno'], part))
                                                    interkey=set(testempno)-set(map(lambda d: d['designation_code'], lst2))
                                                    testempno=list(map(lambda d: d['designation_code'], lst2))
                                                    testdesig=list(map(lambda d: d['designation'], lst2))
                                                    lstdict.append({"desig":"All PHOD's/"+ii['parent_location_code'],"designation_code":list(interkey)})






                                elif i['d_level'] == 'DRM':
                                    lst1=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level']).exclude(designation_code__in=testempno).count()
                                    if lst1 == 0:
                                        lst2=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).exclude(d_level=i['d_level']).values('designation_code','designation', 'designation_code').order_by('designation'))
                                        if testmarkofficer != '':
                                            testmarkofficer+=','
                                        testmarkofficer=testmarkofficer+"All DRM's"
                                        # testempno=set(testempno)
                                        # part=set(map(lambda d: d['partno'], part))
                                        interkey=set(testempno)-set(map(lambda d: d['designation_code'], lst2))
                                        testempno=list(map(lambda d: d['designation_code'], lst2))
                                        testdesig=list(map(lambda d: d['designation'], lst2))
                                        lstdict.append({"desig":"All DRM's","designation_code":list(interkey)})
                                    else:
                                        hq=models.railwayLocationMaster.objects.filter(parent_location_code__isnull=False).values('parent_location_code').distinct()
                                        for ii in hq:
                                            rlyunit=models.railwayLocationMaster.objects.filter(parent_location_code=ii['parent_location_code']).values('rly_unit_code')
                                            if models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level'],rly_unit__in=rlyunit).exists():
                                                lst3=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level'],rly_unit__in=rlyunit).exclude(designation_code__in=testempno).count()
                                                if lst3 == 0:
                                                    lst2=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).exclude(d_level=i['d_level'],rly_unit__in=rlyunit).values('designation_code','designation').order_by('designation'))
                                                    if testmarkofficer != '':
                                                        testmarkofficer+=','
                                                    testmarkofficer=testmarkofficer+"All DRM's/"+ii['parent_location_code']
                                                    # testempno=set(testempno)
                                                    # part=set(map(lambda d: d['partno'], part))
                                                    interkey=set(testempno)-set(map(lambda d: d['designation_code'], lst2))
                                                    testempno=list(map(lambda d: d['designation_code'], lst2))
                                                    testdesig=list(map(lambda d: d['designation'], lst2))
                                                    lstdict.append({"desig":"All DRM's/"+ii['parent_location_code'],"designation_code":list(interkey)})




                           
                            for i in range(len(testdesig)):
                                if testmarkofficer != '':
                                    testmarkofficer+=','
                                testmarkofficer=testmarkofficer+testdesig[i]
                                lstdict.append({"desig":testdesig[i],"designation_code":[testempno[i]]})
                            testmarkofficerrep = testmarkofficer.replace(',', ', ')
                           
                            mrkoffiaction.update({'marked_officers': marked_officers1, 'desig_longdesc': testmarkofficerrep,'custom_key':json.dumps(lstdict)})

                    mrkofficomp = {}
                    desig_longdesc1 =''
                    marked_officers1 = ''
                    mark1=m1.Marked_Officers.objects.filter(item_no=j['item_no'],action_type=1).values()
                    mrkofficomplen = mark1.count()
                    for x in mark1:
                        # print('xxxxxxxxx', x['myuser_id_id'])
                        # marked=m1.empmast.objects.filter(myuser_id=x['myuser_id_id'])
                        marked=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=x['marked_to_id'])
                        # print('yyyyyyyy', marked[0].designation)
                        if marked.count() > 0:
                            if  marked[0].designation:
                                desig_longdesc1 += marked[0].designation+', '
                            marked_officers1 += str(marked[0].designation_code)+','
                    if marked_officers1 != '':
                        # all_h = mark.values('marked_to__designation', 'marked_to__empno_id','compliance','reply_on' ,'marked_no', 'status_flag').order_by('marked_no')
                        testmarkofficer=''
                        if marked_officers1 != '':
                            testdesig=desig_longdesc1.split(',')
                            testempno=marked_officers1.split(',')
                            testdesig.pop()
                            testempno.pop()
                           
                            lstdict=[]
                            alldesig = models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).values('d_level').distinct('d_level')
                           
                            for i in alldesig:
                                if i['d_level'] == 'GM':
                                    lst1=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level']).exclude(designation_code__in=testempno).count()
                                    if lst1 == 0:
                                        lst2=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).exclude(d_level=i['d_level']).values('designation_code','designation', 'designation_code').order_by('designation'))
                                        if testmarkofficer != '':
                                            testmarkofficer+=','
                                        testmarkofficer=testmarkofficer+"All GM's/ZR"
                                        # testempno=set(testempno)
                                        # part=set(map(lambda d: d['partno'], part))
                                        interkey=set(testempno)-set(map(lambda d: d['designation_code'], lst2))
                                        testempno=list(map(lambda d: d['designation_code'], lst2))
                                        testdesig=list(map(lambda d: d['designation'], lst2))
                                        lstdict.append({"desig":"All GM's/ZR","designation_code":list(interkey)})


                                elif i['d_level'] == 'BM':
                                    lst1=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level']).exclude(designation_code__in=testempno).count()
                                    if lst1 == 0:
                                        lst2=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).exclude(d_level=i['d_level']).values('designation_code','designation', 'designation_code').order_by('designation'))
                                        if testmarkofficer != '':
                                            testmarkofficer+=','
                                        testmarkofficer=testmarkofficer+"All Board Member's"
                                        # testempno=set(testempno)
                                        # part=set(map(lambda d: d['partno'], part))
                                        interkey=set(testempno)-set(map(lambda d: d['designation_code'], lst2))
                                        testempno=list(map(lambda d: d['designation_code'], lst2))
                                        testdesig=list(map(lambda d: d['designation'], lst2))
                                        lstdict.append({"desig":"All Board Member's","designation_code":list(interkey)})




                                elif i['d_level'] == 'PHOD':
                                    lst1=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level']).exclude(designation_code__in=testempno).count()
                                    if lst1 == 0:
                                        lst2=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).exclude(d_level=i['d_level']).values('designation_code','designation', 'designation_code').order_by('designation'))
                                        if testmarkofficer != '':
                                            testmarkofficer+=','
                                        testmarkofficer=testmarkofficer+"All PHOD's"
                                        # testempno=set(testempno)
                                        # part=set(map(lambda d: d['partno'], part))
                                        interkey=set(testempno)-set(map(lambda d: d['designation_code'], lst2))
                                        testempno=list(map(lambda d: d['designation_code'], lst2))
                                        testdesig=list(map(lambda d: d['designation'], lst2))
                                        lstdict.append({"desig":"All PHOD's","designation_code":list(interkey)})
                                    else:
                                        hq=models.railwayLocationMaster.objects.filter(parent_location_code__isnull=False).values('parent_location_code').distinct()
                                        for ii in hq:
                                            rlyunit=models.railwayLocationMaster.objects.filter(location_code=ii['parent_location_code']).values('rly_unit_code')
                                            if models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level'],rly_unit__in=rlyunit).exists():
                                                lst3=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level'],rly_unit__in=rlyunit).exclude(designation_code__in=testempno).count()
                                                if lst3 == 0:
                                                    lst2=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).exclude(d_level=i['d_level'],rly_unit__in=rlyunit).values('designation_code','designation').order_by('designation'))
                                                    if testmarkofficer != '':
                                                        testmarkofficer+=','
                                                    testmarkofficer=testmarkofficer+"All PHOD's"+ii['parent_location_code']
                                                    # testempno=set(testempno)
                                                    # part=set(map(lambda d: d['partno'], part))
                                                    interkey=set(testempno)-set(map(lambda d: d['designation_code'], lst2))
                                                    testempno=list(map(lambda d: d['designation_code'], lst2))
                                                    testdesig=list(map(lambda d: d['designation'], lst2))
                                                    lstdict.append({"desig":"All PHOD's/"+ii['parent_location_code'],"designation_code":list(interkey)})






                                elif i['d_level'] == 'DRM':
                                    lst1=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level']).exclude(designation_code__in=testempno).count()
                                    if lst1 == 0:
                                        lst2=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).exclude(d_level=i['d_level']).values('designation_code','designation', 'designation_code').order_by('designation'))
                                        if testmarkofficer != '':
                                            testmarkofficer+=','
                                        testmarkofficer=testmarkofficer+"All DRM's"
                                        # testempno=set(testempno)
                                        # part=set(map(lambda d: d['partno'], part))
                                        interkey=set(testempno)-set(map(lambda d: d['designation_code'], lst2))
                                        testempno=list(map(lambda d: d['designation_code'], lst2))
                                        testdesig=list(map(lambda d: d['designation'], lst2))
                                        lstdict.append({"desig":"All DRM's","designation_code":list(interkey)})
                                    else:
                                        hq=models.railwayLocationMaster.objects.filter(parent_location_code__isnull=False).values('parent_location_code').distinct()
                                        for ii in hq:
                                            rlyunit=models.railwayLocationMaster.objects.filter(parent_location_code=ii['parent_location_code']).values('rly_unit_code')
                                            if models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level'],rly_unit__in=rlyunit).exists():
                                                lst3=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level'],rly_unit__in=rlyunit).exclude(designation_code__in=testempno).count()
                                                if lst3 == 0:
                                                    lst2=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).exclude(d_level=i['d_level'],rly_unit__in=rlyunit).values('designation_code','designation').order_by('designation'))
                                                    if testmarkofficer != '':
                                                        testmarkofficer+=','
                                                    testmarkofficer=testmarkofficer+"All DRM's/"+ii['parent_location_code']
                                                    # testempno=set(testempno)
                                                    # part=set(map(lambda d: d['partno'], part))
                                                    interkey=set(testempno)-set(map(lambda d: d['designation_code'], lst2))
                                                    testempno=list(map(lambda d: d['designation_code'], lst2))
                                                    testdesig=list(map(lambda d: d['designation'], lst2))
                                                    lstdict.append({"desig":"All DRM's/"+ii['parent_location_code'],"designation_code":list(interkey)})




                           
                            for i in range(len(testdesig)):
                                if testmarkofficer != '':
                                    testmarkofficer+=','
                                testmarkofficer=testmarkofficer+testdesig[i]
                                lstdict.append({"desig":testdesig[i],"designation_code":[testempno[i]]})
                            testmarkofficerrep = testmarkofficer.replace(',', ', ')
                           
                            mrkofficomp.update({'marked_officers': marked_officers1, 'desig_longdesc': testmarkofficerrep,'custom_key':json.dumps(lstdict)})   


                    j.update({'mrkoffiaction': mrkoffiaction,'mrkofficomp':mrkofficomp,'mrkoffiactionlen':mrkoffiactionlen,'mrkofficomplen':mrkofficomplen, 'chk_cts':'YES'})


                else:
                    j.update({'chk_cts':'NO'})


                _tbl_tbl = []
                if j['tbl_data'] != '[]':
                    res = eval(j['tbl_data'])
                    for k1 in range(len(res)):
                        d2 = []
                        for k2 in range(len(res[k1])):
                            d2.append(res[k1][k2])
                        _tbl_tbl.append(d2)
                else:
                    _tbl_tbl = '[]'
                j.update({'tbl_data':_tbl_tbl})


                if j['link_image'] != None:
                    img = len(j['link_image'].split('@#@'))
                    img5=[]
                    for i5 in range(0,img):
                        img5.append(img_count)
                        img_count += 1


                    j.update({'enctype':'Encl:','enclen':img5})
                else:
                    j.update({'enctype':'','enclen':0})
            from datetime import datetime
            today_date = datetime.today()


            ins_detail[0].update({'item_details1': item_details1})


           
            inspection_note_no=m1.Inspection_details.objects.filter(inspection_no=insp_id)[0].inspection_note_no
            copyto1=[]
            if(m1.Insp_mail_details.objects.filter(inspection_no=insp_id, area='Copy To')):
                copyto1 = list(m1.Insp_mail_details.objects.filter(inspection_no=insp_id, area='Copy To').values('send_to', 'send_desig'))
                for j in copyto1:
                    j.update({'send_desig': j['send_desig'].replace(',', ', ')})
                   
                   
               

           
            item_details_img= list(m1.Item_details.objects.filter(inspection_no_id=insp_id,link_image__isnull=False).values('link_image','des_id').order_by('sl_no'))
            img_path = []
            for i5 in range(len(item_details_img)):
                img = item_details_img[i5]['link_image'].split('@#@')
                id = item_details_img[i5]['des_id']
                for i6 in range(len(img)):
                        abs_path = os.path.abspath(img[i6])
                        img_path.append({'id':id,'path':abs_path})
                   
            context={
                'zones':zones,
                'divs':divs,
                'locs':locs,
                'insp_desig':insp_desig,
                'insp_ofc_name':insp_ofc_name,
                'station_name':station_name,
                'ins_detail':ins_detail,
                'today_date': today_date,
                'inspection_note_no': inspection_note_no,
                'empname': empname,
                'copyto': copyto1,
                'desig':desig,
                'Accompany': Accompany,
                'mail_detail': mail_detail,
                'employee_desig': employee_desig,
                'employee_name': employee_name,
                'img_path':img_path,
                'final_submit_on':final_submit_on,
                'insp_typeValue':insp_typeValue,
                'copytoId':copytoId,
                }
            template_src='inspectionReportPdf.html'
            return render_to_pdf(template_src, context)
        else:
            return HttpResponse('PDF not found 404')
    # except Exception as e:
    #     try:
    #         m1.error_Table.objects.create(fun_name="inspectionReportPdf",user_id=request.user,err_details=str(e))
    #     except:
    #         print("Internal Error!!!")
    #     return render(request, "errorspage.html", {})
 




def officertask(request):
    # if 
    desigs=json.loads(request.GET.get('desigs'))
    id=request.GET.get('id')
    # desigs=desigs.split(',')
    print(desigs, id)
    designations=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=desigs).values('designation','designation_code').order_by('designation'))
    context={
      'designations':designations,  
      'id':id,
    }
    return JsonResponse(context,safe=False)


def create_inspection_form(request):
    # try:
        
        empnox = models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=request.user)| Q(official_email_ID=request.user.guest_email) | Q(official_email_ID=request.user.email), empno__isnull=False)
        empnumber=None
        dlevel=None
        rly_unit_id=None
        if empnox:
            empno = empnox[0].empno
            empnumber = empnox[0].designation_code
            dlevel = empnox[0].d_level
            rly_unit_id = empnox[0].rly_unit_id
        empdata = models.Level_Desig.objects.exclude(delete_flag=True).filter(official_email_ID=request.user).values('designation', 'station_name','empno','empno__empname','empno__empmname','empno__emplname')
        insp_ofc_name=''
        if empdata:
            employee_fname =empdata[0]['empno__empname']
            if employee_fname:
                insp_ofc_name = employee_fname + " "


            employee_mname = empdata[0]['empno__empmname']
            if employee_mname:
                insp_ofc_name += employee_mname + " "


            employee_lname = empdata[0]['empno__emplname']
            if employee_lname:
                insp_ofc_name += employee_lname
        else:
            insp_ofc_name = 'NA'


           
        if empdata:
            desig_longdesc = empdata[0]['designation']
            station_name = empdata[0]['station_name']
        else:
            desig_longdesc ='NA'
            station_name='NA'
        insp_desig=desig_longdesc

        insp_type=[
            {'code':0, 'types': 'Regular Inspection'},
            {'code':1, 'types': 'Drive Based Inspection(issued by RB)'},
            {'code':2, 'types': 'Night Inspection'},
            {'code':3, 'types': 'Surprise Inspection'},
        ]

        item_typess=[
            {'code':0, 'types': 'Others'},
            {'code':1, 'types': 'Passenger & Other User Safety'},
            {'code':2, 'types': 'Rly Employee Safety '},
        ]


        list1=models.railwayLocationMaster.objects.filter(location_type_desc__in=['RAILWAY BOARD', 'PRODUCTION UNIT', 'HEAD QUATER','OFFICE', 'PSU', 'PRODUCTION UNIT', 'INSTITUTE']).values('location_code').order_by('location_code')
        list2=[]
        for i in list1:
            list2.append(i['location_code'])
        list3=models.railwayLocationMaster.objects.filter(location_type_desc__in=['DIVISION','WORKSHOP']).values('location_code', 'location_type').order_by('location_code')
        list4=[]
        list5 =[]
        for i in list3:
            list4.append({'location_code':i['location_code'],'location_type':i['location_type']})
        try:
           
            list5=list(models.Level_Desig.objects.exclude(delete_flag=True).all().values('designation','designation_code'))  
        except Exception as e:
            print("e==",e)  
        list6=models.departMast.objects.all().values('department_name').order_by('department_name')
        alldesig=models.Level_Desig.objects.exclude(delete_flag=True).values('designation').distinct().order_by('designation')
        location_array = [{'type_code':'RRM', 'type': 'Running Room'},
                            {'type_code': 'SEM', 'type': 'Section'},
                            {'type_code': 'STM', 'type': 'Station'},
                            # {'type_code':'SOP' , 'type': 'Shop'},
                            # {'type_code':'WOS' , 'type': 'Work Shop'},
                            {'type_code':'DLS' , 'type': 'Diesel Loco Shed'},
                            {'type_code':'ELS' , 'type': 'Electric Loco Shed'},
                            {'type_code':'COD' , 'type': 'Coaching Depot'},
                            {'type_code':'WAD' , 'type': 'Wagon Depot'},
                            { 'type_code': 'CTI', 'type': 'Training Institute'},
                            { 'type_code': 'TRN', 'type': 'Train'},
                            { 'type_code': 'HOS', 'type': 'Hospital'},
                            { 'type_code': 'ORL', 'type': 'Other Rly Unit'},
                           ]
        location_array = sorted(location_array, key=lambda d: d['type'])

        Zone11=models.Level_Desig.objects.exclude(delete_flag=True).exclude(rly_unit=None, official_email_ID = None).filter(Q(official_email_ID=request.user)| Q(official_email_ID=request.user.guest_email) | Q(official_email_ID=request.user.email)).values('rly_unit')
        if Zone11:
            Zone11 = Zone11[0]['rly_unit']
            rly_zone = models.railwayLocationMaster.objects.filter(rly_unit_code=Zone11,location_type_desc__in=['RAILWAY BOARD', 'PRODUCTION UNIT', 'HEAD QUATER','OFFICE', 'PSU', 'PRODUCTION UNIT', 'INSTITUTE']).values('location_code').order_by('location_code')
            if rly_zone:
                Zone1 = rly_zone[0]['location_code']
                
                setdiv = ''
            else:
                rly_zone = models.railwayLocationMaster.objects.filter(rly_unit_code=Zone11,location_type_desc__in=['DIVISION','WORKSHOP']).values('location_code','parent_rly_unit_code').order_by('location_code')
               
                if rly_zone:
                    setdiv = rly_zone[0]['location_code']
                    rly_zone = models.railwayLocationMaster.objects.filter(rly_unit_code=rly_zone[0]['parent_rly_unit_code'],location_type_desc__in=['RAILWAY BOARD', 'PRODUCTION UNIT', 'HEAD QUATER','OFFICE', 'PSU', 'PRODUCTION UNIT', 'INSTITUTE']).values('location_code').order_by('location_code')
                    if rly_zone:
                        Zone1 = rly_zone[0]['location_code']
                    else:
                        Zone1 = ''
                else:
                    Zone1 = ''
                    setdiv = ''
        else:
            Zone1 = ''
            setdiv = ''
   
        desg_no=[]
        if Zone1:
            l_id=list(models.railwayLocationMaster.objects.filter(Q(location_code=Zone1)).values('rly_unit_code'))
            if len(l_id)>0:
                datarlys=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation__isnull=False,rly_unit=l_id[0]['rly_unit_code']).exclude(designation_code=empnumber).values('designation','empno', 'designation_code').order_by('designation'))
                if len(datarlys)>0:
                    if datarlys not in desg_no:
                        desg_no.extend(datarlys)


            l_id=list(models.railwayLocationMaster.objects.filter(Q(parent_location_code=Zone1)).values('rly_unit_code'))
            if len(l_id)>0:
                for x in range(len(l_id)):
                    datarlys=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation__isnull=False,rly_unit=l_id[x]['rly_unit_code']).exclude(designation_code=empnumber).values('designation','empno', 'designation_code').order_by('designation'))
                    if len(datarlys)>0:
                        if datarlys[0] not in desg_no:
                            desg_no.extend(datarlys)
         
            #All other officers
            datarlys=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation__isnull=False).exclude(designation_code=empnumber).values('designation','empno', 'designation_code').order_by('designation'))
            for x in range(len(datarlys)):
                # print(desg_no[x])
                if datarlys[x] not in desg_no:
                    desg_no.append(datarlys[x])
         
        else:
            desg_no=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation__isnull=False).exclude(designation_code=empnumber).values('designation','empno', 'designation_code').order_by('designation'))


        for i in range(len(desg_no)):
            if '/' in desg_no[i]['designation']:
                r_des=desg_no[i]['designation'].replace('/',' ')
            elif '.' in desg_no[i]['designation']:
                r_des=desg_no[i]['designation'].replace('.',' ')
            else:
                r_des=desg_no[i]['designation']
            desg_no[i].update({'empnoser':r_des})
        desg_nounofficer = list(models.Level_Desig.objects.exclude(delete_flag=True).filter(parent_desig_code=empnumber).values_list('designation_code',flat=True).order_by('designation'))
        desg_nodata1 = list(filter(lambda x: x['designation_code'] in desg_nounofficer, desg_no))
        desg_nodata1 = sorted(desg_nodata1, key = lambda x: x['designation'])
        desg_nodata2 = list(filter(lambda x: x['designation_code'] not in desg_nounofficer, desg_no))
        desg_nodata2 = sorted(desg_nodata2, key = lambda x: x['designation'])
        desg_no = desg_nodata1 + desg_nodata2
        copy_no=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation__isnull=False).exclude(designation_code=empnumber).values('designation','empno', 'designation_code').order_by('designation'))
       
        allDepartmentPhase2 = [{'department_name':'COMMON','department_code':0}]
        allDepartmentPhase2.extend(list(models.departMast.objects.filter(delete_flag=False).values('department_name','department_code').order_by('department_name')))
        for i in range(len(allDepartmentPhase2)):
            if allDepartmentPhase2[i]['department_code'] == 0:
                inspTypePhase2 = list(models.inspectiontype_master.objects.filter(parent_id='-1',delete_flag=False,disable_flag=False,concerned_dept__isnull=True).values('instypeid','name'))

            else:
                inspTypePhase2 = list(models.inspectiontype_master.objects.filter(parent_id='-1',delete_flag=False,disable_flag=False,concerned_dept=allDepartmentPhase2[i]['department_code']).values('instypeid','name'))
            allDepartmentPhase2[i].update({'inspTypePhase2':inspTypePhase2})
        allCategoryPhase2 = list(models.asset_master.objects.filter(disable_flag=False).values('asset_id','asset_category'))
        for i in range(len(allCategoryPhase2)):
            inspTypePhase2 = list(models.inspectiontype_master.objects.filter(parent_id='-1',delete_flag=False,disable_flag=False,asset=allCategoryPhase2[i]['asset_id']).values('instypeid','name'))
            allCategoryPhase2[i].update({'inspTypePhase2':inspTypePhase2})
   
        context={
            'insp_desig':insp_desig,
            'insp_ofc_name':insp_ofc_name,
            'station_name':station_name,
            'Zone':list2,
            'division':list4,
            'marked_to':list5,
            'department':list6,
            'desig': desig_longdesc,
            'alldesig':alldesig,
            'desg_no':desg_no,
            'location_array': location_array,
            'Zone1':Zone1,
            'setdiv':setdiv,
            'option_val':'create',
            'copy_no':copy_no,
            'allDepartmentPhase2':allDepartmentPhase2,
            'allCategoryPhase2':allCategoryPhase2,
            'insp_type':insp_type,
            'item_typess':item_typess
            }
       
        ins_id=request.GET.get('ins_id')
        ins_flag=request.GET.get('flag')
       
        ins_detail=[]
        item_id=[]
        length = 0
        sh = []
        ssh = []
        if ins_id!=None:
            personal_values = list(m1.Inspection_details.objects.filter(inspection_no=ins_id).values('officer_desig','officer_name','station_name'))
            if personal_values:
                insp_desig=personal_values[0]['officer_desig'] if personal_values[0]['officer_desig'] else insp_desig
                insp_ofc_name=personal_values[0]['officer_name'] if personal_values[0]['officer_name'] else insp_ofc_name
                station_name=personal_values[0]['station_name'] if personal_values[0]['station_name'] else station_name


            item_t = m1.Inspection_details.objects.filter(inspection_no=ins_id).values('item_type')
            mail_detail = m6.copyto_mails.objects.filter(doc_id=ins_id, doc_table='i', area_flag=0)
            alldesig1 =models.Level_Desig.objects.exclude(delete_flag=True).values('designation').distinct().order_by('designation')
            Accompany = list(m1.Insp_Accompany.objects.filter(inspection_no=ins_id).values('accompany'))
            try:
                Accompany =list(map(lambda x: int(x['accompany']),Accompany))
                acc_type = 'int'
            except Exception as e:
                acc_type = 'str'
                Accompany =list(map(lambda x: x['accompany'],Accompany))
            des_id = json.dumps(list(m1.Item_details.objects.filter(inspection_no_id=ins_id, inspection_no__item_type='Insp').exclude(type='SSH').values_list('des_id', flat=True).order_by('sl_no')))
            if mail_detail:
                new_mail_detail= mail_detail[0].receiver_desig
                new_mail_desig_code= mail_detail[0].receiver_id
            else:
                new_mail_detail  = 'NA'
                new_mail_desig_code = ''
            item_type = item_t[0]['item_type']
            if item_type == 'Insp':
                deleted_sections=[]
                ins_detail=list(m1.Inspection_details.objects.filter(inspection_no=ins_id, item_type='Insp', status_flag=0).values())
                # print(ins_detail)
                if ins_flag=='1':
                    ins_detail=list(m1.Inspection_details.objects.filter(inspection_no=ins_id, item_type='Insp').values())
                    # print(ins_detail)


                if ins_detail==[] and ins_flag=='0':
                    return render(request,"data_not_found.html")
           
                item_details1= list(m1.Item_details.objects.filter(inspection_no_id=ins_id, inspection_no__item_type='Insp').values().order_by('sl_no'))
                item_data= m1.Item_details.objects.filter(inspection_no_id=ins_id, type="H").values()

                multi_loc = list(m1.Insp_multi_location.objects.filter(inspection_no_id=ins_id).values())
                for i in range(len(multi_loc)):
                    locTypeMulti = multi_loc[i]['item'].split('@#@')
                    if len(locTypeMulti) > 1:
                        multi_loc[i].update({'item':locTypeMulti[0],'item_code':str(multi_loc[i]['item_code'])+'#'+locTypeMulti[1]})
                
                multi_loc_zone = list(m1.Insp_multi_location.objects.filter(inspection_no_id=ins_id,type='HQ').values_list('item',flat=True))
                zone = multi_loc_zone

                
                empnox = models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=request.user)| Q(official_email_ID=request.user.guest_email) | Q(official_email_ID=request.user.email), empno__isnull=False)
                empnumber=None
                if empnox:
                    empnumber = empnox[0].designation_code
                data=[]
                for i in range(len(zone)):
                    l_id=list(models.railwayLocationMaster.objects.filter(location_code=zone[i]).values('rly_unit_code'))
                    if len(l_id)>0:
                        desg_no1=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation__isnull=False,rly_unit=l_id[0]['rly_unit_code']).exclude(designation_code=empnumber).values('designation','empno', 'designation_code').order_by('designation'))
                        if len(desg_no1)>0:
                            data.extend(desg_no1)
                    l_id=list(models.railwayLocationMaster.objects.filter(Q(parent_location_code=zone[i])).values('rly_unit_code'))
                    if len(l_id)>0:
                        for x in range(len(l_id)):
                            desg_no1=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation__isnull=False,rly_unit=l_id[x]['rly_unit_code']).exclude(designation_code=empnumber).values('designation','empno', 'designation_code').order_by('designation'))
                            if len(desg_no1)>0:
                                if desg_no1[0] not in data:
                                    data.extend(desg_no1)
                if len(data)==0:
                    data_desg_no  = desg_no
                else:
                    data_desg_no  = data
                for i in range(len(data_desg_no)):
                    if '/' in data_desg_no[i]['designation']:
                        r_des=data_desg_no[i]['designation'].replace('/',' ')
                    elif '.' in data_desg_no[i]['designation']:
                        r_des=data_desg_no[i]['designation'].replace('.',' ')
                    else:
                        r_des=data_desg_no[i]['designation']
                    data_desg_no[i].update({'empnoser':r_des,'designation_code1':str(data_desg_no[i]['designation_code'])})

                desg_nounofficer = list(models.Level_Desig.objects.exclude(delete_flag=True).filter(parent_desig_code=empnumber).values_list('designation_code',flat=True).order_by('designation'))
                desg_nodata1 = list(filter(lambda x: x['designation_code'] in desg_nounofficer, data_desg_no))
                desg_nodata1 = sorted(desg_nodata1, key = lambda x: x['designation'])
                desg_nodata2 = list(filter(lambda x: x['designation_code'] not in desg_nounofficer, data_desg_no))
                desg_nodata2 = sorted(desg_nodata2, key = lambda x: x['designation'])
                data_desg_no = desg_nodata1 + desg_nodata2

                multi_loc_div = m1.Insp_multi_location.objects.filter(inspection_no_id=ins_id,type='DIV').values_list('item',flat=True).order_by('item')
                multi_loc_from = m1.Insp_multi_location.objects.filter(inspection_no_id=ins_id, type='LOC').distinct('table_from').values_list('table_from', flat=True)
                length += item_data.count()
                for zb in item_details1:
                    item_id.append(zb['des_id'])
                for x in range(len(item_data)):
                    mid= str(x+1)+'.'
                    itmdata = m1.Item_details.objects.filter(inspection_no_id=ins_id, type="SH", des_id__startswith=mid).values()
                    ssh.append(0)
                    sh.append(len(itmdata))
                    for y in range(len(itmdata)):
                        nid= str(x+1)+'.'+ str(y+1)+'.'
                        itmdata1 = m1.Item_details.objects.filter(inspection_no_id=ins_id, type="SSH", des_id__startswith=nid).count()
                        ssh.append(itmdata1)
                para_count = 0
                para_marked_officer =[]
                div_para_no = []
                marked_off_details = []
                item_val = []
                table_val = []
                all_sections=[]
                deleteArray=[]
                item_val_type = []
                for j in item_details1:
                    des_id = para_count
                    typ = j['des_id'].split('.')
                    if j['del_flag'] == 1:
                        item_val.append(des_id)
                        item_val_type.append(j['type'])
                    if j['tbl_data'] != '[]':
                        table_val.append(str(des_id))

                    if len(typ) == 1:
                        if typ[0].isalpha():
                            typ = 'S'
                            j['item_title'] = j['item_title'][15:]
                            div_para_no.append(des_id)
                            if j['location_val'] == None:
                                if j['divid_id']==None:
                                    j['sec_type']='zone'
                                    zon=models.railwayLocationMaster.objects.filter(rly_unit_code=j['hqid_id']).values_list('location_code', flat=True)
                                    j['sec_id']=zon[0]+'#zone'
                                    j['sec_val']=zon[0]
                                else:
                                    j['sec_type']='div'
                                    zon=models.railwayLocationMaster.objects.filter(rly_unit_code=j['divid_id']).values_list('location_code', flat=True)
                                    j['sec_id']=zon[0]+'#div'
                                    j['sec_val']=zon[0]
                            else:
                                if j['location_table'] == 'ORL':
                                    data = ''
                                    if j['divid_id'] == None:
                                        zon = models.railwayLocationMaster.objects.filter(rly_unit_code=j['hqid_id']).values_list('location_code', flat=True)
                                        data = zon[0]
                                    else:
                                        zon = models.railwayLocationMaster.objects.filter(rly_unit_code=j['divid_id']).values_list('location_code', flat=True)
                                        data = zon[0]
                                        zon=models.railwayLocationMaster.objects.filter(rly_unit_code=j['hqid_id']).values_list('location_code', flat=True)
                                        data = data+'@' + zon[0]
                                    j['sec_type']='loc'
                                    j['sec_id']=j['location_val']+'#'+j['location_table']+'#'+j['location_code']+'#'+data+'#loc'
                                    j['sec_val']=j['location_val']
                                elif j['location_table'] == 'TRN':
                                    data = ''
                                    if j['divid_id'] == None:
                                        zon = models.railwayLocationMaster.objects.filter(rly_unit_code=j['hqid_id']).values_list('location_code', flat=True)
                                        data = zon[0]
                                    else:
                                        zon = models.railwayLocationMaster.objects.filter(rly_unit_code=j['divid_id']).values_list('location_code', flat=True)
                                        data = zon[0]
                                        zon=models.railwayLocationMaster.objects.filter(rly_unit_code=j['hqid_id']).values_list('location_code', flat=True)
                                        data = data+'@' + zon[0]
                                    j['sec_type']='loc'
                                    j['sec_id']=j['location_val']+'#'+j['location_table']+'#'+j['location_code']+'#'+data+'#loc'
                                    j['sec_val']=j['location_val']

                                else:
                                    j['sec_type']='loc'
                                    j['sec_id']=j['location_val']+'#'+j['location_table']+'#'+j['location_code']+'#loc'
                                    j['sec_val']=j['location_val']
                            all_sections.append({'sec_id':j['sec_id'],'sec_val':j['sec_val']})
                            if j['del_flag'] == 1:
                                deleted_sections.append(j['sec_id'])
                                deletedd= list(m1.Item_details.objects.filter(inspection_no_id=ins_id, inspection_no__item_type='Insp',sl_no__gte=j['sl_no'],type='S').values_list('sl_no',flat=True).order_by('sl_no'))
                                if len(deletedd)>1:
                                    this_sec=deletedd[0]
                                    next_sec=deletedd[1]-1
                                    deleted_paras= list(m1.Item_details.objects.filter(inspection_no_id=ins_id, inspection_no__item_type='Insp',sl_no__gte=this_sec,sl_no__lte=next_sec).values_list('des_id',flat=True).order_by('sl_no'))
                                    for ele in  deleted_paras:
                                        deleteArray.append(ele)
                                

                        else:
                            typ = 'P'
                            para_marked_officer.append(des_id)
                            div_para_no.append(des_id)
                            
                    elif len(typ) == 2:
                        typ = 'SP'
                        para_marked_officer.append(des_id)
                        div_para_no.append(des_id)
                    else:
                        typ = 'SSP'
                        div_para_no.append(des_id)

                    mark=m1.Marked_Officers.objects.filter(item_no=j['item_no']).values()
                    custom_info=[]
                    marked_officers1=''
                    for x in mark:
                        if x['target_date'] is not None:
                            tddate = x['target_date'].strftime('%d/%m/%y')
                        else:
                            tddate ='-1'
                        if x['action_type'] == 1:
                            x['action_type'] = 'info'
                        else:
                            x['action_type'] = 'action'
                        xd={'DesignationCode':x['marked_to_id'],'selected_action':x['action_type'],'priority':x['priority'],'tddate':tddate}
                        des = models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=x['marked_to_id'])
                        if des.count()>0:
                            marked_officers1 += str(des[0].designation_code)+','
                            xd['Designation']=str(des[0].designation)
                        custom_info.append(xd)
                    marked_officers1 = marked_officers1.split(',')
                    marked_officers1 = marked_officers1[:len(marked_officers1)-1]
                    off_1 = []
                    select_officer = {}
                    pre_status = "NO"
                    if len(marked_officers1)>0:
                        present_1 = list(map(lambda x: x['designation_code'],data_desg_no))
                        off_1=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=marked_officers1).exclude(designation_code__in = present_1).values('designation','empno', 'designation_code').order_by('designation'))
                        select_officer = desig_changecode_edit(request,marked_officers1)
                        pre_status = "YES"
                    

                    select_officer1 = []
                    if len(select_officer) > 0:
                        marked_id = json.loads(select_officer['marked_id'])
                        marked_desig = select_officer['marked_desig']
                        marked_key = json.loads(select_officer['marked_key'])
                        marked_desig = marked_desig.split(',')
                        listToStr = '@$@'.join([str(elem) for elem in marked_desig])
                        listToStr = listToStr.replace("/","##")
                        listToStr = listToStr.replace("'","@@")
                        desig_1 = []


                        for ext in range(len(marked_key)):
                            ext_1 = marked_key[ext]['designation_code']
                            ltr_1 = '@#@'.join([str(elem) for elem in ext_1])
                            ltr_2 = marked_key[ext]['desig']
                            ltr_2 = ltr_2.replace("/","##")
                            ltr_2 = ltr_2.replace("'","@@")
                            ltr_1 = ltr_1 + '@$$@' + ltr_2
                            desig_1.append(ltr_1)
                       
                        marked_off_details.append({"no":str(des_id),"marked_desig":listToStr,"marked_id":marked_id,"marked_key":desig_1,"present":pre_status})
                    else:
                        marked_off_details.append({"no":str(des_id),"marked_id":"","marked_desig":"","marked_key":"","present":"NO"})
                    for i in range(len(off_1)):
                        if '/' in off_1[i]['designation']:
                            r_des=off_1[i]['designation'].replace('/',' ')
                        elif '.' in off_1[i]['designation']:
                            r_des=off_1[i]['designation'].replace('.',' ')
                        else:
                            r_des=off_1[i]['designation']
                        off_1[i].update({'empnoser':r_des})
                    j.update({'extra_off':off_1,'mrkoffi': marked_officers1,'created_on':'','item_type':j['item_type'],'des_id_id':des_id,'typ':typ,'custom_info':json.dumps(custom_info, separators=(',', ':'))})
                    _tbl_tbl = []
                    if j['tbl_data'] != '[]':
                        res = eval(j['tbl_data'])
                        for k1 in range(len(res)):
                            d2 = []
                            for k2 in range(len(res[k1])):
                                d2.append(res[k1][k2])
                            _tbl_tbl.append(d2)


                           
                        # tbl_tbl = j['tbl_data'][2:]
                        # tbl_tbl = tbl_tbl[0:len(tbl_tbl)-2]
                        # tbl_tbl = tbl_tbl.split('], [')
                       
                        # for xx in tbl_tbl:
                        #     d2 = []
                        #     d1 = xx.split(',')
                        #     for il in d1:
                        #         d3 = il.strip()[1:]
                        #         d3 = d3[0:len(d3)-1]
                        #         d2.append(d3)
                        #     _tbl_tbl.append(d2)
                        # print(_tbl_tbl)
                    else:
                        _tbl_tbl = '[]'
                    j.update({'tbl_data':_tbl_tbl})
                    ins_detail[0].update({'item_details1': item_details1})
                    para_count +=1
                # item_val = list(m1.Item_details.objects.filter(inspection_no=ins_id,del_flag=1).values('des_id'))
                # item_val = list(map(lambda d: d['des_id'], item_val))
                # table_val = list(m1.Item_details.objects.filter(inspection_no=ins_id).exclude(tbl_data='[]').values('des_id'))
                # table_val = list(map(lambda d: d['des_id'], table_val))
                item_details_img= list(m1.Item_details.objects.filter(inspection_no_id=ins_id,link_image__isnull=False).values('link_image','des_id').order_by('sl_no'))
                img_path = []
                for i5 in range(len(item_details_img)):
                    img = item_details_img[i5]['link_image'].split('@#@')
                    id = item_details_img[i5]['des_id']
                    for i6 in range(len(img)):
                            img_path.append({'id':id,'path':img[i6]})
                new_mail_desig_code = new_mail_desig_code.split(',')
                try:
                    prev_data = ins_detail[0]['item_details1']
                    prev_details  = ins_detail[0]['item_details1']
                except Exception as e:
                    prev_data = []
                    prev_details  = []
                item_val.reverse()
                item_val_type.reverse()

                list3=models.railwayLocationMaster.objects.filter(location_type_desc__in=['DIVISION','WORKSHOP'],parent_location_code__in=multi_loc_zone).values('location_code', 'location_type').order_by('location_code')
                list4=[]
                for i in list3:
                    list4.append({'location_code':i['location_code'],'location_type':i['location_type']})
                context={
                    'deleted_sections':json.dumps(deleted_sections),
                    'item_val_type':json.dumps(item_val_type),
                    'deleteArray':json.dumps(deleteArray),
                    'all_sections':all_sections,
                    'insp_desig':insp_desig,
                    'insp_ofc_name':insp_ofc_name,
                    'station_name':station_name,
                    'img_path':json.dumps(img_path),
                    'ins_id':ins_id,
                    'ins_detail':ins_detail,
                    'item_id': item_id,
                    'length_of_h': length,
                    'sh_list': sh,
                    'ssh_list': ssh,
                    'multi_loc': multi_loc,
                    'Zone':list2 ,
                    'division':list4,
                    'department':list6,
                    'new_mail_detail': new_mail_detail,
                    'new_mail_desig_code': json.dumps(new_mail_desig_code),
                    'alldesig':alldesig1,
                    'desg_no':data_desg_no,
                    'desg_no11':desg_no,
                    'des_id': des_id,
                    'Accompany': Accompany,
                    'location_array': location_array,
                    'multi_loc_from': multi_loc_from,
                    'multi_loc_zone':multi_loc_zone,
                    'multi_loc_div':multi_loc_div,
                    'item_val':json.dumps(item_val),
                    'table_val':json.dumps(table_val),
                    'option_val':'edit',
                    'acc_type' : acc_type,
                    'copy_no':copy_no,
                    # 'prev_data':json.dumps(prev_data),
                    'prev_details':prev_details,
                    'div_para_no':json.dumps(div_para_no),
                    'para_marked_officer':json.dumps(para_marked_officer),
                    'para_count':para_count,
                    'marked_off_details':json.dumps(marked_off_details),
                    'ins_flag':ins_flag,
                    'allDepartmentPhase2':allDepartmentPhase2,
                    'allCategoryPhase2':allCategoryPhase2,
                    'insp_type':insp_type,
                    'item_sections':ins_detail[0]['item_sections'],
                    'item_typess':item_typess,
                    'desig': desig_longdesc,
                    }  
                return render(request,"create_inspection_form.html",context)
            elif item_type == 'Chk':
                ins_detail=list(m1.Inspection_details.objects.filter(inspection_no=ins_id, item_type='Chk').values('zone','division','dept','location','inspected_on','inspection_title'))
                item_details1= list(m1.Item_details.objects.filter(inspection_no_id=ins_id, inspection_no__item_type='Chk').values('observation').order_by('sl_no'))
                empdata=m1.empmast.objects.filter(myuser_id=request.user).values('empname','empno', 'desig_longdesc')
                desig_longdesc = empdata[0]['desig_longdesc']
                list1=models.railwayLocationMaster.objects.filter(location_type='ZR').values('location_code')
                list2=[]
                for i in list1:
                    list2.append(i['location_code'])
                list3=models.railwayLocationMaster.objects.filter(location_type='DIV').values('location_code')
                list4=[]
                list5 =[]
                for i in list3:
                    list4.append(i['location_code'])
                try:
                    list5=list(models.Level_Desig.objects.exclude(delete_flag=True).all().values('designation','designation_code'))  
                except Exception as e:
                    print("e==",e)  
                list6=models.departMast.objects.all().values('department_name')
                context={
                    'Zone':list2 ,
                    'division':list4,
                    'marked_to':list5,
                    'department':list6,
                    'desig': desig_longdesc,
                    'ins_detail':ins_detail,
                    'item_details1':item_details1
                    }
                return render(request, 'search_checklist_template_report.html',context)
               
            else:
                messages.error(request, 'oops error')
        else:    
            return render(request,"create_inspection_form.html", context)
    # except Exception as e:
    #     try:
    #         m1.error_Table.objects.create(fun_name="create_inspection_form",user_id=request.user,err_details=str(e))
    #     except:
    #         print("Internal Error!!!")
    #     return render(request, "errorspage.html", {})
def create_inspection_details(request):
    # try:
        if request.method == "POST" and request.is_ajax():
            print("inside create_inspection_details")
            from datetime import datetime
            final=decryptWithAesEinspect(request.POST.get('final_partinspected'))
            final_id=request.POST.get('id_partinspected')
            rly=json.loads(request.POST.get('zone'))
            div=json.loads(request.POST.get('division'))
            # dept=json.loads(request.POST.get('department'))
            loc=json.loads(request.POST.get('location'))
            insdt=request.POST.get('txtDate2')
            accompany=json.loads(request.POST.get('accompany'))
            final_img = json.loads(request.POST.get('final_img'))
            inspection_no = request.POST.get('inspection_no')
            insp_desig = request.POST.get('insp_desig')
            insp_ofc_name = request.POST.get('insp_ofc_name')
            station_name = request.POST.get('station_name')
            insp_type = request.POST.get('insp_type')
            item_sections = request.POST.get('item_sections')
            sec_ids=json.loads(request.POST.get('sec_ids'))
            sec_details=json.loads(request.POST.get('sec_details'))
            full_array=json.loads(request.POST.get('full_array'))
            ins_flag=request.POST.get('ins_flag')
            rly_id=None
            div_id=None
            if inspection_no =='' or ins_flag=='1':
                inspection_no = None

            if 'to' in insdt:
                dt = insdt.split('to')
                st_date = dt[0].strip()
                en_date = dt[1].strip()
                start_date = datetime.strptime(st_date, '%d/%m/%y').strftime('%Y-%m-%d')
                inspected_on = datetime.strptime(en_date, '%d/%m/%y').strftime('%Y-%m-%d')
            else:
                inspected_on = datetime.strptime(insdt, '%d/%m/%y').strftime('%Y-%m-%d')
                start_date = datetime.strptime(insdt, '%d/%m/%y').strftime('%Y-%m-%d')


            title=request.POST.get('titleinsp')
            send_to=request.POST.get('send_to')
            send_desig=request.POST.get('send_desig')
           
            finalval = json.loads(final)
            final_allid = json.loads(final_id)
            year = str(datetime.now().year)
            print(finalval,final_allid,sec_ids,sec_details)


            # empno=models.Level_Desig.objects.exclude(delete_flag=True).filter(official_email_ID=request.user)
            empnox = models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=request.user)| Q(official_email_ID=request.user.guest_email) | Q(official_email_ID=request.user.email), empno__isnull=False)
            if empnox:
                empno = empnox[0].empno_id
                desig = empnox[0].designation
                ddesig = empnox[0].designation_code
            else:
                messages.error(request, 'Employee id not found')
            if m1.Inspection_details.objects.filter(inspection_no = inspection_no ).exists():
                note_ = year+'/'+desig+'/Insp'+'/'
                last_note1 = m1.Inspection_details.objects.filter(inspection_note_no__istartswith=note_).aggregate(Max('insp_last'))
                if last_note1['insp_last__max'] == None:
                    last_note1 = 1
                    note_no = year+'/'+desig+'/Insp'+'/'+ str(last_note1)
                else:
                    last_note1 = int(last_note1['insp_last__max']) +1
                    note_no = year+'/'+desig+'/Insp'+'/'+ str(last_note1)
                m1.Inspection_details.objects.filter(inspection_no = inspection_no ).update(inspection_title=title,station_name=station_name,officer_name=insp_ofc_name,officer_desig=insp_desig,  created_by=empno, insp_last=last_note1,inspection_note_no=note_no, inspection_officer_id=ddesig, item_type='Insp', modified_by=empno, status_flag=1, start_date=start_date, inspected_on=inspected_on,final_submit_on=datetime.now(),insp_type=insp_type,item_sections=item_sections)
               
                # m1.Insp_Accompany.objects.filter(inspection_no_id=inspection_no).delete()
                # m6.copyto_mails.objects.filter( doc_id=inspection_no, doc_table='i').delete()
                # m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_no, type='HQ').delete()
                # m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_no, type='DIV').delete()
                # m1.Marked_Officers.objects.filter(item_no__in = m1.Item_details.objects.filter(inspection_no=inspection_no).values('item_no')).delete()
                # m1.Item_details.objects.filter(inspection_no=inspection_no).delete()
                # m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_no,type='LOC').delete()
               
                inspection_id = inspection_no
            else:
                note_ = year+'/'+desig+'/Insp'+'/'
                last_note1 = m1.Inspection_details.objects.filter(inspection_note_no__istartswith=note_).aggregate(Max('insp_last'))
                if last_note1['insp_last__max'] == None:
                    last_note1 = 1
                    note_no = year+'/'+desig+'/Insp'+'/'+ str(last_note1)
                else:
                    last_note1 = int(last_note1['insp_last__max']) +1
                    note_no = year+'/'+desig+'/Insp'+'/'+ str(last_note1)
                m1.Inspection_details.objects.create(inspection_title=title,created_on=datetime.now(), station_name=station_name,officer_name=insp_ofc_name,officer_desig=insp_desig, created_by=empno, insp_last=last_note1,inspection_note_no=note_no, inspection_officer_id=ddesig, item_type='Insp', modified_by=empno, status_flag=1, start_date=start_date, inspected_on=inspected_on,final_submit_on=datetime.now(),insp_type=insp_type,item_sections=item_sections)            
                inspection_id=m1.Inspection_details.objects.all().last().inspection_no
           
            messages.info(request, f'Inspection note successfully saved with Inspection Note No: {note_no}')




            m1.Insp_Accompany.objects.filter(inspection_no_id=inspection_id).update(update_status='F')
            if m1.Insp_Accompany.objects.filter(inspection_no_id=inspection_id).exists():
                for up in accompany:
                    if m1.Insp_Accompany.objects.filter(inspection_no_id=inspection_id, accompany=up).exists():
                        m1.Insp_Accompany.objects.filter(inspection_no_id=inspection_id, accompany=up).update(accompany=up,update_status='T')
                    else:
                        m1.Insp_Accompany.objects.create(accompany=up, inspection_no_id=inspection_id)
            else:
                for acc in accompany:
                    m1.Insp_Accompany.objects.create(accompany=acc, inspection_no_id=inspection_id)
            m1.Insp_Accompany.objects.filter(inspection_no_id=inspection_id,update_status='F').delete()
            #======================change 21-11-22======================
            for rl in rly:
                rly_code=models.railwayLocationMaster.objects.get(location_code=rl,location_type_desc__in=['RAILWAY BOARD', 'PRODUCTION UNIT', 'HEAD QUATER','OFFICE', 'PSU', 'PRODUCTION UNIT', 'INSTITUTE'])
                rly_id=rly_code
                if m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_id, item=rl, type='HQ').exists():
                    m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_id, item=rl, type='HQ').update(inspection_no_id=inspection_id, item=rl, type='HQ',update_status='T')
                else:
                    m1.Insp_multi_location.objects.create(inspection_no_id=inspection_id, item=rl, type='HQ')
            for di in div:
                div_code=models.railwayLocationMaster.objects.get(location_code=di,location_type_desc__in=['DIVISION','WORKSHOP'])
                div_id=div_code
                if m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_id, item=di, type='DIV').exists():
                    m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_id, item=di, type='DIV').update(inspection_no_id=inspection_id, item=di, type='DIV',update_status='T')
                else:
                    m1.Insp_multi_location.objects.create(inspection_no_id=inspection_id, item=di, type='DIV')
           
            for lo in loc:
                if lo:
                    new_loc = lo.split('#')
                    if(len(new_loc) == 3):
                        location = new_loc[0]
                        location_type = new_loc[1]
                        location_code = new_loc[2]
                    else:
                        location = new_loc[0]
                        location_type = new_loc[1]
                        location_code = new_loc[2]
                        location = location + '@#@' + new_loc[3]


                    #print(location, location_type)
                    if m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_id, item=location,  type='LOC').exists():
                        m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_id, item=location,  type='LOC').update(inspection_no_id=inspection_id, item=location, item_code=location_code, type='LOC', table_from=location_type,update_status='T')
                    else:
                        m1.Insp_multi_location.objects.create(inspection_no_id=inspection_id, item=location, item_code=location_code, type='LOC', table_from=location_type)

            if len(loc) == 0:
                location = None
                location_type = None
                location_code = None
           
            #========================
            m1.Insp_multi_location.objects.filter(inspection_no=inspection_id,update_status='F').delete()
            m1.Item_details.objects.filter(inspection_no=inspection_id).update(update_status ='F')
            m1.Marked_Officers.objects.filter(item_no__in=m1.Item_details.objects.filter(inspection_no=inspection_id).values('item_no')).update(update_status ='F')

            officer_email=[]
            officer_contact=[]
            marked_officers_sms=[]
            counters =1
            if len(sec_ids) == 0:
                # full_array=full_array.split(',')
                sec_ids['A']=full_array
            for a in (sec_ids):
                if item_sections != '0':
                    locid='location_at'+a
                    locationdet=sec_details[locid][3:]
                    xl = locationdet.split('#')
                    if xl[1] == 'zone':
                        zone_name=models.railwayLocationMaster.objects.get(location_code=xl[0],location_type_desc__in=['RAILWAY BOARD', 'PRODUCTION UNIT', 'HEAD QUATER','OFFICE', 'PSU', 'PRODUCTION UNIT', 'INSTITUTE'])
                        heading='Observation at '+ xl[0]
                        div_name=None
                        sec_name=None
                        sec_type=None
                        sec_id=None
                    elif xl[1] == 'div':
                        div_name=models.railwayLocationMaster.objects.get(location_code=xl[0],location_type_desc__in=['DIVISION','WORKSHOP'])
                        heading='Observation at '+ xl[0]
                        zone_name=None
                        sec_name=None
                        sec_type=None
                        sec_id=None
                        zon=models.railwayLocationMaster.objects.filter(location_code=xl[0],location_type_desc__in=['DIVISION','WORKSHOP']).values('parent_rly_unit_code')
                        if len(zon):
                            zone_name=models.railwayLocationMaster.objects.get(rly_unit_code=zon[0]['parent_rly_unit_code'],location_type_desc__in=['RAILWAY BOARD', 'PRODUCTION UNIT', 'HEAD QUATER','OFFICE', 'PSU', 'PRODUCTION UNIT', 'INSTITUTE'])
                    else:
                        sec_name=xl[0]
                        sec_type=xl[1]
                        sec_id=xl[2]
                        heading='Observation at '+ sec_name
                        otherNames=sec_name.split('/')
                        if sec_type!='TRN' and sec_type!='ORL':
                            if len(otherNames)>2:
                                div_name=models.railwayLocationMaster.objects.get(location_code=otherNames[len(otherNames)-2],location_type__in=['WS','DIV'])
                                zone_name=models.railwayLocationMaster.objects.get(location_code=otherNames[len(otherNames)-1],location_type__in=['ZR','RB'])
                            else:
                                zone_name=models.railwayLocationMaster.objects.get(location_code=otherNames[1],location_type__in=['ZR','RB'])
                                div_name=None
                        else:
                            trdres = xl[3].split('@')
                            if len(trdres)>1:
                                div_name=models.railwayLocationMaster.objects.get(location_code=trdres[0])
                                zone_name=models.railwayLocationMaster.objects.get(location_code=trdres[1])
                            else:
                                zone_name=models.railwayLocationMaster.objects.get(location_code=trdres[0])
                                div_name=None
                    m1.Item_details.objects.create(sl_no=counters,item_title=heading,status_flag=4, created_on=datetime.now(), type='S',des_id=a,created_by=empno, inspection_no_id=inspection_id,location_table=sec_type,location_code=sec_id,location_val = sec_name,hqid=zone_name,divid=div_name)
                    counters+=1
                else:
                    sec_type=location_type
                    sec_id=location_code
                    sec_name=location
                    zone_name=rly_id
                    div_name=div_id
                    
                for f, b in zip(finalval, final_allid):
                    for x,y in zip(finalval[f], final_allid[b]):
                        s = y.split('.')
                        if s[0] not in sec_ids[a]:
                            continue
                        if len(s) == 1:
                            hed = 'heading'+y
                            heading = finalval[f][hed]
                            tbl_data = finalval[f][y]
                            
                            if m1.Item_details.objects.filter(type='H',des_id=y, inspection_no=inspection_id).exists():
                                m1.Item_details.objects.filter(type='H',des_id=y, inspection_no=inspection_id).update(priority=0,sl_no=counters,link_image=None,del_flag=0,tbl_data=tbl_data,item_title=heading,status_flag=1, created_on=datetime.now(),created_by=empno, type='H',des_id=y,update_status='T',location_table=sec_type,location_code=sec_id,location_val = sec_name,hqid=zone_name,divid=div_name)
                                item_id=m1.Item_details.objects.filter(type='H',des_id=y, inspection_no=inspection_id).all().last().item_no
                            else:
                                m1.Item_details.objects.create(sl_no=counters,tbl_data=tbl_data,item_title=heading,status_flag=1, created_on=datetime.now(), type='H',des_id=y,created_by=empno, inspection_no_id=inspection_id,location_table=sec_type,location_code=sec_id,location_val = sec_name,hqid=zone_name,divid=div_name)
                                item_id=m1.Item_details.objects.all().last().item_no
                            y2=str(y+'.1')
                            if y2 in final_allid[b]:
                                #print('if',y2)
                                m1.Item_details.objects.filter(type='H',des_id=y, inspection_no_id=inspection_id).update(status_flag=4)
                                pass
                            else:
                                #print('else',y2)
                                # trz = 'targetdate'+y
                                officm = 'markeofficer'+y
                                # chk = 'check' + y

                                
                            
                                # targetd = finalval[f][trz]
                                markof = finalval[f][officm]
                                # checkbox = finalval[f][chk]


                            


                                # if checkbox == '1':
                                #     checkbox = 1
                                # else:
                                #     checkbox = 0
                                markeofficer = markof.split(',')
                                # if targetd:
                                #     targetd=targetd.split('/')
                                #     targetd='20'+targetd[2].strip()+'-'+targetd[1].strip()+'-'+targetd[0].strip()
                                #     t_date = targetd
                                
                                # else:
                                #     t_date = None

                                # for action type
                                # act_type = 'type' + y
                                # typeofaction=finalval[f][act_type]
                                # if typeofaction=='info':
                                #     act_flag=1
                                # else:
                                #     act_flag=0

                                # rem='remarksmarkeofficer'+y
                                # remarks=finalval[f][rem]
                                ity='item_type'+y
                                item_type=finalval[f][ity]
                                # m1.Item_details.objects.filter(item_title=heading,status_flag=1, type='H',des_id=y, inspection_no_id=inspection_id).update(target_date=t_date, priority=checkbox, action_type=act_flag, markofcRemarks=remarks)
                                m1.Item_details.objects.filter(item_title=heading,status_flag=1, type='H',des_id=y, inspection_no_id=inspection_id).update(location_table=sec_type,location_code=sec_id,location_val = sec_name,item_type=item_type)

                                # item_id=m1.Item_details.objects.all().last().item_no
                                #mark officer
                                infom= 'markeofcinfo'+y
                                infom = finalval[f][infom]
                                if len(infom) >0:
                                    officerinfo=json.loads(infom)
                                    print(officerinfo)
                                else:
                                    officerinfo=[]
                                # officerinfo = (infom.strip('[')).strip(']').split(',')
                                markOfficerPrev = []
                                if len(officerinfo):
                                    for i in range(len(officerinfo)):
                                        DesignationCode=officerinfo[i]['DesignationCode']
                                        markOfficerPrev.append(str(DesignationCode))
                                        selected_action=officerinfo[i]['selected_action']
                                        priority=officerinfo[i]['priority']
                                        tddate=officerinfo[i]['tddate']
                                        if m1.Item_details.objects.filter(item_no=item_id,priority=0).exists():
                                            m1.Item_details.objects.filter(item_no=item_id).update(priority=priority)
                                        Desig=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=DesignationCode)
                                        if Desig:
                                            Desig1=Desig[0].designation_code
                                            if Desig[0].official_email_ID:
                                                officer_email.append(Desig[0].official_email_ID)
                                            if Desig[0].contactnumber:
                                                if Desig[0].contactnumber not in officer_contact:
                                                    marked_officers_sms.append({'contact':Desig[0].contactnumber,'designation':Desig[0].designation_code})
                                                    officer_contact.append(Desig[0].contactnumber)
                                            if m1.Marked_Officers.objects.all().last():
                                                marked_no_id=(m1.Marked_Officers.objects.all().last().marked_no)+1
                                            else:
                                                marked_no_id = 1

                                            
                                            if selected_action == 'info':
                                                if m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).exists():
                                                    m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).update(update_status='T',created_on=datetime.now(),created_by=empno,marked_emp=DesignationCode,status_flag=1,action_type=1)
                                                else:   
                                                    m1.Marked_Officers.objects.create(marked_emp=i,created_on=datetime.now(),created_by=empno, marked_no=marked_no_id,status_flag=1, item_no_id=item_id,marked_to_id=Desig1,action_type=1)
                                            
                                            else:
                                                if tddate == '-1':
                                                    if m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).exists():
                                                        m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).update(update_status='T',created_on=datetime.now(),created_by=empno,marked_emp=DesignationCode,status_flag=1,action_type=0,priority=priority)
                                                    else:   
                                                        m1.Marked_Officers.objects.create(marked_emp=i,created_on=datetime.now(),created_by=empno, marked_no=marked_no_id,status_flag=1, item_no_id=item_id,marked_to_id=Desig1,action_type=0,priority=priority)
                                                         
                                                else:
                                                    targetd=tddate.split('/')
                                                    targetd='20'+targetd[2].strip()+'-'+targetd[1].strip()+'-'+targetd[0].strip()
                                                    tddate = targetd
                                                    if m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).exists():
                                                        m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).update(update_status='T',created_on=datetime.now(),created_by=empno,marked_emp=DesignationCode,status_flag=1,action_type=0,priority=priority,target_date=tddate)
                                                    else:   
                                                        m1.Marked_Officers.objects.create(marked_emp=i,created_on=datetime.now(),created_by=empno, marked_no=marked_no_id,status_flag=1, item_no_id=item_id,marked_to_id=Desig1,action_type=0,priority=priority,target_date=tddate)
                                                    m1.Item_details.objects.filter(item_no=item_id).update(target_date=tddate,priority=priority)   
                                    markOfficerPrev1 = [x for x in markOfficerPrev if x not in markeofficer]
                                    if markOfficerPrev1 != ['']:
                                        for i in markOfficerPrev1:
                                            m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=i).update(update_status='F')
                                    markOfficerPrev = [x for x in markeofficer if x not in markOfficerPrev]
                                    if markOfficerPrev != ['']:
                                        for i in markOfficerPrev:
                                            Desig=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i)
                                            if Desig:
                                                Desig1=Desig[0].designation_code
                                                if m1.Marked_Officers.objects.all().last():
                                                    marked_no_id=(m1.Marked_Officers.objects.all().last().marked_no)+1
                                                else:
                                                    marked_no_id = 1

                                                if m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).exists():
                                                    m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).update(update_status='T',created_on=datetime.now(),created_by=empno,marked_emp=i,status_flag=0)
                                                else:
                                                    m1.Marked_Officers.objects.create(created_on=datetime.now(),created_by=empno,marked_emp=i,marked_no=marked_no_id,status_flag=0,item_no_id=item_id,marked_to_id=Desig1)


                                elif markof:
                                    for i in markeofficer:
                                        Desig=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i)
                                        if Desig:
                                            Desig1=Desig[0].designation_code
                                            if Desig[0].official_email_ID:
                                                officer_email.append(Desig[0].official_email_ID)
                                            if Desig[0].contactnumber:
                                                if Desig[0].contactnumber not in officer_contact:
                                                    marked_officers_sms.append({'contact':Desig[0].contactnumber,'designation':Desig[0].designation_code})
                                                    officer_contact.append(Desig[0].contactnumber)
                                            if m1.Marked_Officers.objects.all().last():
                                                marked_no_id=(m1.Marked_Officers.objects.all().last().marked_no)+1
                                            else:
                                                marked_no_id = 1
                                            

                                            if m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).exists():
                                                m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).update(update_status='T',created_on=datetime.now(),created_by=empno,marked_emp=i,status_flag=1)
                                            else:   
                                                m1.Marked_Officers.objects.create(marked_emp=i,created_on=datetime.now(),created_by=empno, marked_no=marked_no_id,status_flag=1, item_no_id=item_id,marked_to_id=Desig1)
                                        
                                        else:
                                            print('error')
    
                        elif len(s) == 2:
                            ob = 'observation'+y
                            # trz = 'targetdate'+y
                            officm = 'markeofficer'+y
                            # chk = 'check' + y


                            observation = finalval[f][ob]
                            # targetd = finalval[f][trz]
                            markof = finalval[f][officm]
                            markeofficer = markof.split(',')


                            # checkbox = finalval[f][chk]


                            # if checkbox == '1':
                            #     checkbox = 1
                            # else:
                            #     checkbox = 0

                            # for action type
                            # act_type = 'type' + y
                            # typeofaction=finalval[f][act_type]
                            # if typeofaction=='info':
                            #     act_flag=1
                            # else:
                            #     act_flag=0
                        
                            # if targetd:
                            #     # targetdate = datetime.strptime(targetd, '%d/%m/%Y').strftime('%Y-%m-%d')
                            #     targetd=targetd.split('/')
                            #     targetd='20'+targetd[2].strip()+'-'+targetd[1].strip()+'-'+targetd[0].strip()
                            #     targetdate = targetd
                            # else:
                            #     targetdate = None
                            #print(observation)
                            tbl_data = finalval[f][y]
                            # rem='remarksmarkeofficer'+y
                            # remarks=finalval[f][rem]
                            ity='item_type'+y
                            item_type=finalval[f][ity]
                            if m1.Item_details.objects.filter(inspection_no=inspection_id, des_id=y,  type='SH').exists():
                                print("update")
                                # m1.Item_details.objects.filter(inspection_no=inspection_id, des_id=y,  type='SH').update(sl_no=counters,link_image=None,del_flag=0,tbl_data=tbl_data,observation=observation,priority=checkbox, status_flag=1,created_by=empno,created_on=datetime.now(), target_date=targetdate,action_type=act_flag,update_status='T',markofcRemarks=remarks)
                                m1.Item_details.objects.filter(inspection_no=inspection_id, des_id=y,  type='SH').update(priority =0,sl_no=counters,link_image=None,del_flag=0,tbl_data=tbl_data,observation=observation, status_flag=1,created_by=empno,created_on=datetime.now(), update_status='T',location_table=sec_type,location_code=sec_id,location_val = sec_name,item_type=item_type,hqid=zone_name,divid=div_name)

                                item_id=m1.Item_details.objects.filter(inspection_no=inspection_id, des_id=y,  type='SH').all().last().item_no
                            else:
                                # m1.Item_details.objects.create(sl_no=counters,tbl_data=tbl_data,observation=observation,priority=checkbox, status_flag=1,inspection_no_id=inspection_id, des_id=y, target_date=targetdate, type='SH', action_type=act_flag,created_by=empno,created_on=datetime.now(),markofcRemarks=remarks)
                                m1.Item_details.objects.create(sl_no=counters,inspection_no_id=inspection_id,link_image=None,del_flag=0,tbl_data=tbl_data,observation=observation, des_id=y, type='SH',status_flag=1,created_by=empno,created_on=datetime.now(), update_status='T',location_table=sec_type,location_code=sec_id,location_val = sec_name,item_type=item_type,hqid=zone_name,divid=div_name)
                                item_id=m1.Item_details.objects.all().last().item_no

                            # item_id=m1.Item_details.objects.all().last().item_no
                            #mark officer
                            infom= 'markeofcinfo'+y
                            infom = finalval[f][infom]
                            # print(infom)
                            if len(infom) >0:
                                officerinfo=json.loads(infom)
                                print(officerinfo)
                            else:
                                officerinfo=[]
                            # officerinfo = ((infom.strip('[')).strip(']'))
                            # print(officerinfo)
                            markOfficerPrev = []
                            if len(officerinfo):
                                for i in range(len(officerinfo)):
                                    DesignationCode=officerinfo[i]['DesignationCode']
                                    markOfficerPrev.append(str(DesignationCode))
                                    selected_action=officerinfo[i]['selected_action']
                                    priority=officerinfo[i]['priority']
                                    tddate=officerinfo[i]['tddate']
                                    if m1.Item_details.objects.filter(item_no=item_id,priority=0).exists():
                                        m1.Item_details.objects.filter(item_no=item_id).update(priority=priority)
                                    Desig=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=DesignationCode)
                                    if Desig:
                                        Desig1=Desig[0].designation_code
                                        if Desig[0].official_email_ID:
                                            officer_email.append(Desig[0].official_email_ID)
                                        if Desig[0].contactnumber:
                                            if Desig[0].contactnumber not in officer_contact:
                                                marked_officers_sms.append({'contact':Desig[0].contactnumber,'designation':Desig[0].designation_code})
                                                officer_contact.append(Desig[0].contactnumber)
                                        if m1.Marked_Officers.objects.all().last():
                                            marked_no_id=(m1.Marked_Officers.objects.all().last().marked_no)+1
                                        else:
                                            marked_no_id = 1

                                        
                                        if selected_action == 'info':
                                            if m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).exists():
                                                m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).update(update_status='T',created_on=datetime.now(),created_by=empno,marked_emp=DesignationCode,status_flag=1,action_type=1)
                                            else:   
                                                m1.Marked_Officers.objects.create(marked_emp=i,created_on=datetime.now(),created_by=empno, marked_no=marked_no_id,status_flag=1, item_no_id=item_id,marked_to_id=Desig1,action_type=1)
                                        
                                        else:
                                            if tddate == '-1':
                                                if m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).exists():
                                                    m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).update(update_status='T',created_on=datetime.now(),created_by=empno,marked_emp=DesignationCode,status_flag=1,action_type=0,priority=priority)
                                                else:   
                                                    m1.Marked_Officers.objects.create(marked_emp=i,created_on=datetime.now(),created_by=empno, marked_no=marked_no_id,status_flag=1, item_no_id=item_id,marked_to_id=Desig1,action_type=0,priority=priority)
                                            else:
                                                targetd=tddate.split('/')
                                                targetd='20'+targetd[2].strip()+'-'+targetd[1].strip()+'-'+targetd[0].strip()
                                                tddate = targetd
                                                if m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).exists():
                                                    m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).update(update_status='T',created_on=datetime.now(),created_by=empno,marked_emp=DesignationCode,status_flag=1,action_type=0,priority=priority,target_date=tddate)
                                                else:   
                                                    m1.Marked_Officers.objects.create(marked_emp=i,created_on=datetime.now(),created_by=empno, marked_no=marked_no_id,status_flag=1, item_no_id=item_id,marked_to_id=Desig1,action_type=0,priority=priority,target_date=tddate)
                                                m1.Item_details.objects.filter(item_no=item_id).update(target_date=tddate)
                                markOfficerPrev1 = [x for x in markOfficerPrev if x not in markeofficer]
                                if markOfficerPrev1 != ['']:
                                    for i in markOfficerPrev1:
                                        m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=i).update(update_status='F')
                                markOfficerPrev = [x for x in markeofficer if x not in markOfficerPrev]
                                if markOfficerPrev != ['']:
                                    for i in markOfficerPrev:
                                        Desig=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i)
                                        if Desig:
                                            Desig1=Desig[0].designation_code
                                            if m1.Marked_Officers.objects.all().last():
                                                marked_no_id=(m1.Marked_Officers.objects.all().last().marked_no)+1
                                            else:
                                                marked_no_id = 1

                                            if m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).exists():
                                                m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).update(update_status='T',created_on=datetime.now(),created_by=empno,marked_emp=i,status_flag=0)
                                            else:
                                                m1.Marked_Officers.objects.create(created_on=datetime.now(),created_by=empno,marked_emp=i,marked_no=marked_no_id,status_flag=0,item_no_id=item_id,marked_to_id=Desig1)
                            elif markof:
                                for i in markeofficer:
                                    Desig=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i)
                                    if Desig:
                                        Desig1=Desig[0].designation_code
                                        if Desig[0].official_email_ID:
                                            officer_email.append(Desig[0].official_email_ID)
                                        if Desig[0].contactnumber:
                                            if Desig[0].contactnumber not in officer_contact:
                                                marked_officers_sms.append({'contact':Desig[0].contactnumber,'designation':Desig[0].designation_code})
                                                officer_contact.append(Desig[0].contactnumber)


                                        if m1.Marked_Officers.objects.all().last():
                                            marked_no_id=(m1.Marked_Officers.objects.all().last().marked_no)+1
                                        else:
                                            marked_no_id = 1

                                        if m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).exists():
                                            m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).update(created_on=datetime.now(),created_by=empno,marked_emp=i, status_flag=1,update_status='T')
                                        else:
                                            m1.Marked_Officers.objects.create(created_on=datetime.now(),created_by=empno,marked_emp=i,marked_no=marked_no_id,status_flag=1, item_no_id=item_id,marked_to_id=Desig1)
                                    else:
                                        print('error')
                                        # messages.info(request, 'Employ Desig not Match in Designation Master')
                            else:
                                markeofficer=""


                    
                        
                        else:
                            subdes = 'subdes'+y
                            subdes1 = finalval[f][subdes]
                            tbl_data = finalval[f][y]
                            # for action type
                            # act_type = 'type' + y
                            # typeofaction=finalval[f][act_type]
                            # if typeofaction=='info':
                            #     act_flag=1
                            # else:
                            #     act_flag=0
                            if m1.Item_details.objects.filter(type='SSH',des_id=y, inspection_no=inspection_id).exists():
                                m1.Item_details.objects.filter(type='SSH',des_id=y, inspection_no=inspection_id).update(sl_no=counters,link_image=None,del_flag=0,tbl_data=tbl_data, item_subtitle=subdes1,status_flag=4,created_by=empno,created_on=datetime.now(),update_status='T',location_table=sec_type,location_code=sec_id,location_val = sec_name,hqid=zone_name,divid=div_name)
                            else:
                                m1.Item_details.objects.create(sl_no=counters,tbl_data=tbl_data,item_subtitle=subdes1,status_flag=4, type='SSH',des_id=y, inspection_no_id=inspection_id,location_table=sec_type,location_code=sec_id,location_val = sec_name,hqid=zone_name,divid=div_name)

                        counters+=1
                
            m1.Item_details.objects.filter(inspection_no=inspection_id,update_status ='F').delete()
            m1.Marked_Officers.objects.filter(item_no__in=m1.Item_details.objects.filter(inspection_no=inspection_id).values('item_no'),update_status ='F').delete()
            m1.Marked_Officers.objects.filter(item_no__in=m1.Item_details.objects.filter(inspection_no=inspection_id).values('item_no'),marked_to__isnull=True).delete()
            
            for i in range(len(final_img)):
                ref = final_img[i][0]
                path = (final_img[i][1])[1:]
                data = list(m1.Item_details.objects.filter(inspection_no=inspection_id,des_id=ref).values('link_image'))
                if len(data) > 0:
                    data = data[0]['link_image']
                    if data != None:
                        path = data +'@#@'+path
                m1.Item_details.objects.filter(inspection_no=inspection_id,des_id=ref).update(link_image = path)

            m1.Item_details.objects.filter(inspection_no=inspection_id,link_image='').update(link_image=None)

           
            try:
                subject="Inspection report marked to you for n/a."
                # To=['ecegcttarun@gmail.com',]
                To=officer_email
                context = {'title': title}
                
                
                # if len(officer_contact) > 0:
                #     for num in officer_contact:
                #         pass
                        # sendsms(num)

                if len(marked_officers_sms) > 0:
                    for mar in marked_officers_sms:
                        new_pending=m1.Marked_Officers.objects.filter(item_no__inspection_no=inspection_id,marked_to_id=mar['designation']).values().count()
                        cum_pending=m1.Marked_Officers.objects.filter(marked_to_id=mar['designation'], status_flag=1).values().count()
                        for_pending=m1.Marked_Officers_forward.objects.filter(marked_to_forward_id=mar['designation'], status_flag=1).values().count()
                        total_pending=cum_pending+for_pending
                        # n=str(new_pending)+"/"+str(cum_pending)
                        issue_date=date.today()
                        issue_date = datetime.strftime(issue_date,"%d/%m/%Y")
                        t=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=ddesig).values('designation')
                        if len(t)!=0:
                            inspection_officer=t[0]['designation']
                            inspection_officer=inspection_officer[0:15]
                        else:
                            inspection_officer='NA'
                        # msg_body=str(note_no)+" , "+str(issue_date)+", "+str(inspection_officer)
                        note_no=note_no[0:30]
                        # Total {#var#} Items of Insp. note no.{#var#} marked /forwarded by {#var#} marked  to you for n/a. Cumulative pending compliance:{#var#},CRIS/MU.
                        # message="Insp. note no. "+msg_body+" marked to you for n/a. New Paras marked/Cumulative pending compliance: "+n+", CRIS/INSP"
                        sendsms_insp(mar['contact'],new_pending,note_no,inspection_officer,total_pending)
                   
                InspSendMail(subject, To, context)
                



                # m1.Insp_mail_details.objects.create(subject=subject, body=title,area='Mark Of', inspection_no_id=inspection_id, send_to=send_to,send_desig=send_desig)
                m6.copyto_mails.objects.create(sender_id_id=ddesig, subject=subject,doc_id=inspection_id,  body=title, area_flag=1, doc_table='i', receiver_id=send_to, receiver_desig=send_desig)
                messages.success(request, 'Mark officer email has been sent')
               
            except:
                print("error on sending")
                messages.error(
                    request, 'Email send failed. Please Try Again.')
            try:
                offic_mail =[]
                offic_contact =[]
                unique_offic_mail = list(set(offic_mail))
                unique_offic_contact = list(set(offic_contact))
                if send_to:
                    emil = send_to.split(',')
                    for i in emil:
                        email = models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i)
                        if email[0].official_email_ID:
                            offic_mail.append(email[0].official_email_ID)
                        if Desig[0].contactnumber:
                            offic_contact.append(Desig[0].contactnumber)
                           
                    # if len(unique_offic_contact) > 0:
                    #     for num in unique_offic_contact:
                    #         sendsms(num)


                    subject="Inspection report"
                    To = unique_offic_mail
                    # To=['ecegcttarun@gmail.com',]
                    context = {'title': title}
                       
                    InspSendMail(subject, To, context)
                    # m1.Insp_mail_details.objects.create(subject=subject, body=title, area='Copy To', inspection_no_id=inspection_id, send_to=send_to,send_desig=send_desig)
                    if m6.copyto_mails.objects.filter(doc_id=inspection_id, area_flag=0, doc_table='i').exists():
                        m6.copyto_mails.objects.filter(doc_id=inspection_id, area_flag=0, doc_table='i').update(body=title,subject=subject,sender_id_id=ddesig, receiver_id=send_to, receiver_desig=send_desig)
                    else:
                        m6.copyto_mails.objects.create(sender_id_id=ddesig, subject=subject,doc_id=inspection_id,  body=title, area_flag=0, doc_table='i', receiver_id=send_to, receiver_desig=send_desig)
                    messages.success(request, 'Copy to Email has been sent')
                   
            except:
               
                messages.error(request, 'Copy to Email send failed.')


            return JsonResponse({"status": 1 })
        return JsonResponse({"success":False}, status=400)
       
    # except Exception as e:
    #     print(e)
    #     try:
    #         m1.error_Table.objects.create(fun_name="create_inspection_details",user_id=request.user,err_details=str(e))
    #     except:
    #         print("Internal Error!!!")
    #     return render(request, "errorspage.html", {})

def save_draft_data(request):
    # try:
        if request.method == "POST" and request.is_ajax():
            from datetime import datetime
            final=decryptWithAesEinspect(request.POST.get('final_partinspected'))
            final_id=request.POST.get('id_partinspected')
            rly=json.loads(request.POST.get('zone'))
            div=json.loads(request.POST.get('division'))
            loc=json.loads(request.POST.get('location'))
            final_img=json.loads(request.POST.get('final_img'))
            accompany=json.loads(request.POST.get('accompany'))
            inspection_no = request.POST.get('inspection_no')
            insp_desig = request.POST.get('insp_desig')
            insp_ofc_name = request.POST.get('insp_ofc_name')
            station_name = request.POST.get('station_name')
            ins_flag=request.POST.get('ins_flag')
            insp_type = request.POST.get('insp_type')
            item_sections = request.POST.get('item_sections')
            sec_ids=json.loads(request.POST.get('sec_ids'))
            sec_details=json.loads(request.POST.get('sec_details'))
            full_array=json.loads(request.POST.get('full_array'))
            
            rly_id=None
            div_id=None
           
            if inspection_no =='' or ins_flag=='1':
                inspection_no = None


            send_to=request.POST.get('send_to')
            send_desig=request.POST.get('send_desig')
            temp_para_array_marked = json.loads(request.POST.get('temp_para_array_marked'))
           
            insdt=request.POST.get('txtDate2')
            del_array=json.loads(request.POST.get('del_array'))


            if 'to' in insdt:
                dt = insdt.split('to')
                st_date = dt[0].strip()
                en_date = dt[1].strip()


                start_date = datetime.strptime(st_date, '%d/%m/%y').strftime('%Y-%m-%d')
                inspected_on = datetime.strptime(en_date, '%d/%m/%y').strftime('%Y-%m-%d')


            else:
               
                inspected_on = datetime.strptime(insdt, '%d/%m/%y').strftime('%Y-%m-%d')
                start_date = datetime.strptime(insdt, '%d/%m/%y').strftime('%Y-%m-%d')
            title=request.POST.get('titleinsp')
            finalval = json.loads(final)
            final_allid = json.loads(final_id)
            empnox = models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=request.user)| Q(official_email_ID=request.user.guest_email) | Q(official_email_ID=request.user.email), empno__isnull=False)
            if empnox:
                empno = empnox[0].empno_id
                ddesig = empnox[0].designation_code
            else:
                messages.error(request, 'You are not authorize to create inspection. Please contact to admin')


            if m1.Inspection_details.objects.filter(inspection_no = inspection_no ).exists():
                m1.Inspection_details.objects.filter(inspection_no =inspection_no ).update(inspection_title=title,item_type='Insp', created_on=datetime.now(), inspection_officer_id=ddesig, status_flag=0,modified_by=empno, station_name=station_name,officer_name=insp_ofc_name,officer_desig=insp_desig, created_by=empno,start_date=start_date,inspected_on=inspected_on,insp_type=insp_type,item_sections=item_sections)
                
                # m1.Insp_Accompany.objects.filter(inspection_no_id=inspection_no).delete()
                # m6.copyto_mails.objects.filter( doc_id=inspection_no, doc_table='i').delete()
                # m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_no, type='HQ').delete()
                # m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_no, type='DIV').delete()
                # m1.Marked_Officers.objects.filter(item_no__in = m1.Item_details.objects.filter(inspection_no=inspection_no).values('item_no')).delete()
                # m1.Item_details.objects.filter(inspection_no=inspection_no).delete()
                # m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_no,type='LOC').delete()
                
                
                inspection_id = inspection_no
            else:
                m1.Inspection_details.objects.create(inspection_title=title,item_type='Insp', station_name=station_name,officer_name=insp_ofc_name,officer_desig=insp_desig,  created_on=datetime.now(), inspection_officer_id=ddesig, status_flag=0,modified_by=empno, created_by=empno,start_date=start_date,inspected_on=inspected_on,insp_type=insp_type,item_sections=item_sections)
                inspection_id=m1.Inspection_details.objects.all().last().inspection_no
            m1.Insp_Accompany.objects.filter(inspection_no_id=inspection_id).update(update_status='F')
            if m1.Insp_Accompany.objects.filter(inspection_no_id=inspection_id).exists():
                for up in accompany:
                    if m1.Insp_Accompany.objects.filter(inspection_no_id=inspection_id, accompany=up).exists():
                        m1.Insp_Accompany.objects.filter(inspection_no_id=inspection_id, accompany=up).update(accompany=up,update_status='T')
                    else:
                        m1.Insp_Accompany.objects.create(accompany=up, inspection_no_id=inspection_id)
            else:
                for acc in accompany:
                    m1.Insp_Accompany.objects.create(accompany=acc, inspection_no_id=inspection_id)
            m1.Insp_Accompany.objects.filter(inspection_no_id=inspection_id,update_status='F').delete()
            if send_to:
                if m6.copyto_mails.objects.filter(doc_id=inspection_id, area_flag=0, doc_table='i').exists():
                    m6.copyto_mails.objects.filter(doc_id=inspection_id, area_flag=0, doc_table='i').update(sender_id_id=ddesig, receiver_id=send_to, receiver_desig=send_desig)
                else:
                    m6.copyto_mails.objects.create(sender_id_id=ddesig, doc_id=inspection_id, area_flag=0, doc_table='i', receiver_id=send_to, receiver_desig=send_desig)
            

            m1.Insp_multi_location.objects.filter(inspection_no=inspection_id).update(update_status='F')
            for rl in rly:
                
                rly_code=models.railwayLocationMaster.objects.get(location_code=rl,location_type_desc__in=['RAILWAY BOARD', 'PRODUCTION UNIT', 'HEAD QUATER','OFFICE', 'PSU', 'PRODUCTION UNIT', 'INSTITUTE'])
                rly_id=rly_code
                if m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_id, item=rl, type='HQ').exists():
                    m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_id, item=rl, type='HQ').update(inspection_no_id=inspection_id, item=rl, type='HQ',update_status='T')
                else:
                    m1.Insp_multi_location.objects.create(inspection_no_id=inspection_id, item=rl, type='HQ')
            for di in div:
                
                div_code=models.railwayLocationMaster.objects.get(location_code=di,location_type_desc__in=['DIVISION','WORKSHOP'])
                div_id=div_code
                if m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_id, item=di, type='DIV').exists():
                    m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_id, item=di, type='DIV').update(inspection_no_id=inspection_id, item=di, type='DIV',update_status='T')
                else:
                    m1.Insp_multi_location.objects.create(inspection_no_id=inspection_id, item=di, type='DIV')
                    

            for lo in loc:
                if lo:
                    new_loc = lo.split('#')
                    if(len(new_loc) == 3):
                        location = new_loc[0]
                        location_type = new_loc[1]
                        location_code = new_loc[2]
                    else:
                        location = new_loc[0]
                        location_type = new_loc[1]
                        location_code = new_loc[2]
                        location = location + '@#@' + new_loc[3]
                    if m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_id, item=location,  type='LOC').exists():
                        m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_id, item=location,  type='LOC').update(inspection_no_id=inspection_id, item=location, item_code=location_code, type='LOC', table_from=location_type,update_status='T')
                    else:
                        m1.Insp_multi_location.objects.create(inspection_no_id=inspection_id, item=location, item_code=location_code, type='LOC', table_from=location_type)
            
            if len(loc) == 0:
                location=None
                location_type=None
                location_code=None
            
            
            m1.Insp_multi_location.objects.filter(inspection_no=inspection_id,update_status='F').delete()
            m1.Item_details.objects.filter(inspection_no=inspection_id).update(update_status ='F')
            m1.Marked_Officers.objects.filter(item_no__in=m1.Item_details.objects.filter(inspection_no=inspection_id).values('item_no')).update(update_status ='F')

            counters=1
            headp = 0
            headsp = 0
            headssp = 0
            if len(sec_ids) == 0:
                # full_array=full_array.split(',')
                sec_ids['A']=full_array
            for a in (sec_ids):
                if item_sections != '0':
                    locid='location_at'+a
                    locationdet=sec_details[locid][3:]
                    xl = locationdet.split('#')
                    if xl[1] == 'zone':
                        # print(xl[0])
                        zone_name=models.railwayLocationMaster.objects.get(location_code=xl[0],location_type_desc__in=['RAILWAY BOARD', 'PRODUCTION UNIT', 'HEAD QUATER','OFFICE', 'PSU', 'PRODUCTION UNIT', 'INSTITUTE'])
                        heading='Observation at '+ xl[0]
                        div_name=None
                        sec_name=None
                        sec_type=None
                        sec_id=None
                    elif xl[1] == 'div':
                        div_name=models.railwayLocationMaster.objects.get(location_code=xl[0],location_type_desc__in=['DIVISION','WORKSHOP'])
                        heading='Observation at '+ xl[0]
                        zone_name=None
                        sec_name=None
                        sec_type=None
                        sec_id=None
                        zon=models.railwayLocationMaster.objects.filter(location_code=xl[0],location_type_desc__in=['DIVISION','WORKSHOP']).values('parent_rly_unit_code')
                        if len(zon):
                            zone_name=models.railwayLocationMaster.objects.get(rly_unit_code=zon[0]['parent_rly_unit_code'],location_type_desc__in=['RAILWAY BOARD', 'PRODUCTION UNIT', 'HEAD QUATER','OFFICE', 'PSU', 'PRODUCTION UNIT', 'INSTITUTE'])
                    else:
                        sec_name=xl[0]
                        sec_type=xl[1]
                        sec_id=xl[2]
                        heading='Observation at '+ sec_name
                        otherNames=sec_name.split('/')

                        # print('hgh ' ,sec_name,sec_type,sec_id,xl)
                        
                        if sec_type!='TRN' and sec_type!='ORL':
                            if len(otherNames)>2:
                                div_name=models.railwayLocationMaster.objects.get(location_code=otherNames[len(otherNames)-2],location_type__in=['WS','DIV'])
                                zone_name=models.railwayLocationMaster.objects.get(location_code=otherNames[len(otherNames)-1],location_type__in=['ZR','RB','PU'])
                            else:

                                zone_name=models.railwayLocationMaster.objects.get(location_code=otherNames[1],location_type__in=['ZR','RB','PU'])
                                div_name=None
                        
                        else:
                            trdres = xl[3].split('@')
                            if len(trdres)>1:
                                div_name=models.railwayLocationMaster.objects.get(location_code=trdres[0])
                                zone_name=models.railwayLocationMaster.objects.get(location_code=trdres[1])
                            else:
                                zone_name=models.railwayLocationMaster.objects.get(location_code=trdres[0])
                                div_name=None

                     
                    m1.Item_details.objects.create(sl_no=counters,item_title=heading,status_flag=4, created_on=datetime.now(), type='S',des_id=a,created_by=empno, inspection_no_id=inspection_id,location_table=sec_type,location_code=sec_id,location_val = sec_name, hqid=zone_name,divid=div_name)
                    counters+=1
                else:
                    sec_name=location
                    sec_type=location_type
                    sec_id=location_code
                    zone_name=rly_id
                    div_name=div_id
                for f, b in zip(finalval, final_allid):
                    for x,y in zip(finalval[f], final_allid[b]):
                        s = y.split('.')
                        
                        if s[0] not in sec_ids[a]:
                            continue
                        if len(s) == 1:
                            hed = 'heading'+y
                            heading = finalval[f][hed]
                            tbl_data = finalval[f][y]
                            print(zone_name,div_name)
                            if m1.Item_details.objects.filter(type='H',des_id=y, inspection_no=inspection_id).exists():
                                m1.Item_details.objects.filter(type='H',des_id=y, inspection_no=inspection_id).update(priority=0,sl_no=counters,del_flag=0,tbl_data=tbl_data,item_title=heading,status_flag=0,created_by=empno, created_on=datetime.now(),update_status='T',location_table=sec_type,location_code=sec_id,location_val = sec_name,hqid=zone_name,divid=div_name)
                                item_id=m1.Item_details.objects.filter(type='H',des_id=y, inspection_no=inspection_id).all().last().item_no
                                
                            else:
                                m1.Item_details.objects.create(sl_no=counters,tbl_data=tbl_data,item_title=heading,status_flag=0,created_by=empno, created_on=datetime.now(), type='H',des_id=y, inspection_no_id=inspection_id,location_table=sec_type,location_code=sec_id,location_val = sec_name,hqid=zone_name,divid=div_name)
                                item_id=m1.Item_details.objects.all().last().item_no
                                
                            y2=str(y+'.1')
                            if y2 in final_allid[b]:
                        
                                pass
                            else:
                                # trz = 'targetdate'+y
                                officm = 'markeofficer'+y
                                # chk = 'check'+y
                                # targetd = finalval[f][trz]
                                # print(finalval[f])
                                markof = finalval[f][officm]
                                markeofficer = markof.split(',')
                                # checkbox = finalval[f][chk]
                                # rem='remarksmarkeofficer'+y
                                # remarks=finalval[f][rem]
                                # print(remarks,"my name is apeksha")
                                # if checkbox == '1':
                                #     checkbox = 1
                                # elif checkbox== '0':
                                #     checkbox = 0
                                # if targetd:
                                #     targetd=targetd.split('/')
                                #     targetd='20'+targetd[2].strip()+'-'+targetd[1].strip()+'-'+targetd[0].strip()
                                #     t_date = targetd
                                # else:
                                #     t_date = None
                                    
                                # act_type = 'type' + y
                                # typeofaction=finalval[f][act_type]
                                # if typeofaction=='info':
                                #     act_flag=1
                                # else:
                                #     act_flag=0
                                ity='item_type'+y
                                item_type=finalval[f][ity]
                                # m1.Item_details.objects.filter(item_title=heading,status_flag=0, type='H',des_id=y, inspection_no_id=inspection_id).update(target_date=t_date, priority=checkbox, action_type=act_flag, markofcRemarks=remarks)
                                
                                m1.Item_details.objects.filter(item_title=heading,status_flag=0, type='H',des_id=y, inspection_no_id=inspection_id).update(item_type=item_type)

                                infom= 'markeofcinfo'+y
                                infom = finalval[f][infom]
                               
                                if len(infom) >0:
                                    officerinfo=json.loads(infom)
                                else:
                                    officerinfo=[]
                                

                                markOfficerPrev = []
                                if len(officerinfo):
                                    for i in range(len(officerinfo)):
                                        DesignationCode=officerinfo[i]['DesignationCode']
                                        markOfficerPrev.append(str(DesignationCode))
                                        selected_action=officerinfo[i]['selected_action']
                                        priority=officerinfo[i]['priority']
                                        tddate=officerinfo[i]['tddate']
                                        if m1.Item_details.objects.filter(item_no=item_id,priority=0).exists():
                                            m1.Item_details.objects.filter(item_no=item_id).update(priority=priority)
                                        Desig=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=DesignationCode)
                                        if Desig:
                                            Desig1=Desig[0].designation_code
                                            if m1.Marked_Officers.objects.all().last():
                                                marked_no_id=(m1.Marked_Officers.objects.all().last().marked_no)+1
                                            else:
                                                marked_no_id = 1

                                            
                                            if selected_action == 'info':
                                                if m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).exists():
                                                    m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).update(update_status='T',created_on=datetime.now(),created_by=empno,marked_emp=DesignationCode,status_flag=0,action_type=1)
                                                else:   
                                                    m1.Marked_Officers.objects.create(marked_emp=i,created_on=datetime.now(),created_by=empno, marked_no=marked_no_id,status_flag=0, item_no_id=item_id,marked_to_id=Desig1,action_type=1)
                                            
                                            else:
                                                if tddate == '-1':
                                                    if m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).exists():
                                                        m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).update(update_status='T',created_on=datetime.now(),created_by=empno,marked_emp=DesignationCode,status_flag=0,action_type=0,priority=priority)
                                                    else:   
                                                        m1.Marked_Officers.objects.create(marked_emp=i,created_on=datetime.now(),created_by=empno, marked_no=marked_no_id,status_flag=0, item_no_id=item_id,marked_to_id=Desig1,action_type=0,priority=priority)
                                                else:
                                                    targetd=tddate.split('/')
                                                    targetd='20'+targetd[2].strip()+'-'+targetd[1].strip()+'-'+targetd[0].strip()
                                                    tddate = targetd
                                                    if m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).exists():
                                                        m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).update(update_status='T',created_on=datetime.now(),created_by=empno,marked_emp=DesignationCode,status_flag=0,action_type=0,priority=priority,target_date=tddate)
                                                    else:   
                                                        m1.Marked_Officers.objects.create(marked_emp=i,created_on=datetime.now(),created_by=empno, marked_no=marked_no_id,status_flag=0, item_no_id=item_id,marked_to_id=Desig1,action_type=0,priority=priority,target_date=tddate)
                                                    m1.Item_details.objects.filter(item_no=item_id).update(target_date=tddate)
                                    
                                    markOfficerPrev1 = [x for x in markOfficerPrev if x not in markeofficer]
                                    if markOfficerPrev1 != ['']:
                                        for i in markOfficerPrev1:
                                            m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=i).update(update_status='F')
                                    
                                    markOfficerPrev = [x for x in markeofficer if x not in markOfficerPrev]
                                    if markOfficerPrev != ['']:
                                        for i in markOfficerPrev:
                                            Desig=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i)
                                            if Desig:
                                                Desig1=Desig[0].designation_code
                                                if m1.Marked_Officers.objects.all().last():
                                                    marked_no_id=(m1.Marked_Officers.objects.all().last().marked_no)+1
                                                else:
                                                    marked_no_id = 1

                                                if m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).exists():
                                                    m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).update(update_status='T',created_on=datetime.now(),created_by=empno,marked_emp=i,status_flag=0)
                                                else:
                                                    m1.Marked_Officers.objects.create(created_on=datetime.now(),created_by=empno,marked_emp=i,marked_no=marked_no_id,status_flag=0,item_no_id=item_id,marked_to_id=Desig1)


                                elif markof:
                                    print(markof)
                                    for i in markeofficer:
                                        print(i)
                                        Desig=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i)
                                        if Desig:
                                            Desig1=Desig[0].designation_code
                                            if m1.Marked_Officers.objects.all().last():
                                                marked_no_id=(m1.Marked_Officers.objects.all().last().marked_no)+1
                                            else:
                                                marked_no_id = 1

                                            if m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).exists():
                                                m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).update(update_status='T',created_on=datetime.now(),created_by=empno,marked_emp=i,status_flag=0)
                                            else:
                                                m1.Marked_Officers.objects.create(created_on=datetime.now(),created_by=empno,marked_emp=i,marked_no=marked_no_id,status_flag=0,item_no_id=item_id,marked_to_id=Desig1)
                                        else:
                                            messages.info(request, 'Employ Desig not Match in Designation Master')
                                else:
                                    if m1.Marked_Officers.objects.all().last():
                                        marked_no_id=(m1.Marked_Officers.objects.all().last().marked_no)+1
                                    else:
                                        marked_no_id = 1
                                    m1.Marked_Officers.objects.create(created_on=datetime.now(),created_by=empno,marked_no=marked_no_id,status_flag=0,item_no_id=item_id)


                        elif len(s) == 2:
                            ob = 'observation'+y
                            # trz = 'targetdate'+y
                            officm = 'markeofficer'+y
                            # chk = 'check'+y
                            observation = finalval[f][ob]
                            # targetd = finalval[f][trz]
                            markof = finalval[f][officm]
                            # checkbox = finalval[f][chk]
                            # act_type = 'type' + y
                            # typeofaction=finalval[f][act_type]
                            # if typeofaction=='info':
                            #     act_flag=1
                            # else:
                            #     act_flag=0

                            # if checkbox == '1':
                            #     checkbox = 1
                            # elif checkbox== '0':
                            #     checkbox = 0


                            markeofficer = markof.split(',')
                        
                            # if targetd:
                            #     targetd=targetd.split('/')
                            #     targetd='20'+targetd[2].strip()+'-'+targetd[1].strip()+'-'+targetd[0].strip()
                            #     targetdate = targetd
                            # else:
                            #     targetdate = None
                            tbl_data = finalval[f][y]

                            # rem='remarksmarkeofficer'+y
                            # remarks=finalval[f][rem]
                            # if m1.Item_details.objects.filter(inspection_no=inspection_id, des_id=y,  type='SH').exists():
                            #     m1.Item_details.objects.filter(inspection_no=inspection_id, des_id=y,  type='SH').update(sl_no=counters,del_flag=0,tbl_data=tbl_data,observation=observation,priority=checkbox, status_flag=0,created_by=empno,created_on=datetime.now(), target_date=targetdate,action_type=act_flag,update_status='T',markofcRemarks=remarks)
                            #     item_id=m1.Item_details.objects.filter(inspection_no=inspection_id, des_id=y,  type='SH').all().last().item_no
                            # else:
                            #     m1.Item_details.objects.create(sl_no=counters,tbl_data=tbl_data,observation=observation,priority=checkbox, status_flag=0,created_by=empno,created_on=datetime.now(), inspection_no_id=inspection_id, des_id=y, target_date=targetdate, type='SH', action_type=act_flag,markofcRemarks=remarks)
                        
                            #     item_id=m1.Item_details.objects.all().last().item_no
                            ity='item_type'+y
                            item_type=finalval[f][ity]
                            if m1.Item_details.objects.filter(inspection_no=inspection_id, des_id=y,  type='SH').exists():
                                #print("update")
                                # m1.Item_details.objects.filter(inspection_no=inspection_id, des_id=y,  type='SH').update(sl_no=counters,link_image=None,del_flag=0,tbl_data=tbl_data,observation=observation,priority=checkbox, status_flag=1,created_by=empno,created_on=datetime.now(), target_date=targetdate,action_type=act_flag,update_status='T',markofcRemarks=remarks)
                                m1.Item_details.objects.filter(inspection_no=inspection_id, des_id=y,  type='SH').update(priority=0,sl_no=counters,link_image=None,del_flag=0,tbl_data=tbl_data,observation=observation, status_flag=0,created_by=empno,created_on=datetime.now(), update_status='T',location_table=sec_type,location_code=sec_id,location_val = sec_name,item_type=item_type,hqid=zone_name,divid=div_name)

                                item_id=m1.Item_details.objects.filter(inspection_no=inspection_id, des_id=y,  type='SH').all().last().item_no
                            else:
                                # m1.Item_details.objects.create(sl_no=counters,tbl_data=tbl_data,observation=observation,priority=checkbox, status_flag=1,inspection_no_id=inspection_id, des_id=y, target_date=targetdate, type='SH', action_type=act_flag,created_by=empno,created_on=datetime.now(),markofcRemarks=remarks)
                                m1.Item_details.objects.create(sl_no=counters,inspection_no_id=inspection_id,link_image=None,del_flag=0,tbl_data=tbl_data,observation=observation, des_id=y, type='SH',status_flag=0,created_by=empno,created_on=datetime.now(), update_status='T',location_table=sec_type,location_code=sec_id,location_val = sec_name,item_type=item_type,hqid=zone_name,divid=div_name)
                                item_id=m1.Item_details.objects.all().last().item_no

                            infom= 'markeofcinfo'+y
                            infom = finalval[f][infom]
                            #print(infom)
                            if len(infom) >0:
                                officerinfo=json.loads(infom)
                                #print(officerinfo)
                            else:
                                officerinfo=[]
                            # officerinfo = ((infom.strip('[')).strip(']'))
                            #print(officerinfo)
                            markOfficerPrev = []
                            if len(officerinfo):
                                for i in range(len(officerinfo)):
                                    DesignationCode=officerinfo[i]['DesignationCode']
                                    markOfficerPrev.append(str(DesignationCode))
                                    selected_action=officerinfo[i]['selected_action']
                                    priority=officerinfo[i]['priority']
                                    tddate=officerinfo[i]['tddate']
                                    if m1.Item_details.objects.filter(item_no=item_id,priority=0).exists():
                                        m1.Item_details.objects.filter(item_no=item_id).update(priority=priority)
                                    Desig=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=DesignationCode)
                                    if Desig:
                                        Desig1=Desig[0].designation_code
                                        if m1.Marked_Officers.objects.all().last():
                                            marked_no_id=(m1.Marked_Officers.objects.all().last().marked_no)+1
                                        else:
                                            marked_no_id = 1

                                        
                                        if selected_action == 'info':
                                            if m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).exists():
                                                m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).update(update_status='T',created_on=datetime.now(),created_by=empno,marked_emp=DesignationCode,status_flag=0,action_type=1)
                                            else:   
                                                m1.Marked_Officers.objects.create(marked_emp=i,created_on=datetime.now(),created_by=empno, marked_no=marked_no_id,status_flag=0, item_no_id=item_id,marked_to_id=Desig1,action_type=1)
                                        
                                        else:
                                            if tddate == '-1':
                                                if m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).exists():
                                                    m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).update(update_status='T',created_on=datetime.now(),created_by=empno,marked_emp=DesignationCode,status_flag=0,action_type=0,priority=priority)
                                                else:   
                                                    m1.Marked_Officers.objects.create(marked_emp=i,created_on=datetime.now(),created_by=empno, marked_no=marked_no_id,status_flag=0, item_no_id=item_id,marked_to_id=Desig1,action_type=0,priority=priority)
                                            else:
                                                targetd=tddate.split('/')
                                                targetd='20'+targetd[2].strip()+'-'+targetd[1].strip()+'-'+targetd[0].strip()
                                                tddate = targetd
                                                if m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).exists():
                                                    m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).update(update_status='T',created_on=datetime.now(),created_by=empno,marked_emp=DesignationCode,status_flag=0,action_type=0,priority=priority,target_date=tddate)
                                                else:   
                                                    m1.Marked_Officers.objects.create(marked_emp=i,created_on=datetime.now(),created_by=empno, marked_no=marked_no_id,status_flag=0, item_no_id=item_id,marked_to_id=Desig1,action_type=0,priority=priority,target_date=tddate)
                                                m1.Item_details.objects.filter(item_no=item_id).update(target_date=tddate)
                                markOfficerPrev1 = [x for x in markOfficerPrev if x not in markeofficer]
                                if markOfficerPrev1 != ['']:
                                    for i in markOfficerPrev1:
                                        m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=i).update(update_status='F')
                                markOfficerPrev = [x for x in markeofficer if x not in markOfficerPrev]
                                if markOfficerPrev != ['']:
                                    for i in markOfficerPrev:
                                        Desig=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i)
                                        if Desig:
                                            Desig1=Desig[0].designation_code
                                            if m1.Marked_Officers.objects.all().last():
                                                marked_no_id=(m1.Marked_Officers.objects.all().last().marked_no)+1
                                            else:
                                                marked_no_id = 1

                                            if m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).exists():
                                                m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).update(update_status='T',created_on=datetime.now(),created_by=empno,marked_emp=i,status_flag=0)
                                            else:
                                                m1.Marked_Officers.objects.create(created_on=datetime.now(),created_by=empno,marked_emp=i,marked_no=marked_no_id,status_flag=0,item_no_id=item_id,marked_to_id=Desig1)            
                            elif markof:
                                for i in markeofficer:
                                    Desig=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i)
                                    if Desig:
                                        Desig1=Desig[0].designation_code


                                        if m1.Marked_Officers.objects.all().last():
                                            marked_no_id=(m1.Marked_Officers.objects.all().last().marked_no)+1
                                        else:
                                            marked_no_id = 1
                                        if m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).exists():
                                            m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).update(created_on=datetime.now(),created_by=empno,marked_emp=i, status_flag=0,update_status='T')

                                        else:
                                            m1.Marked_Officers.objects.create(created_on=datetime.now(),created_by=empno,marked_no=marked_no_id,marked_emp=i, status_flag=0,item_no_id=item_id,marked_to_id=Desig1)
                                    else:
                                        print('error')
                            else:
                                markeofficer=''
                    
                        else:
                            subdes = 'subdes'+y
                            subdes1 = finalval[f][subdes]
                            tbl_data = finalval[f][y]
                            # for action type
                            # act_type = 'type' + y
                            # typeofaction=finalval[f][act_type]
                            # if typeofaction=='info':
                            #     act_flag=1
                            # else:
                            #     act_flag=0
                            
                            if m1.Item_details.objects.filter(type='SSH',des_id=y, inspection_no=inspection_id).exists():
                                m1.Item_details.objects.filter(type='SSH',des_id=y, inspection_no=inspection_id).update(sl_no=counters,del_flag=0,tbl_data=tbl_data, item_subtitle=subdes1,status_flag=0,created_by=empno,created_on=datetime.now(),update_status='T',location_table=sec_type,location_code=sec_id,location_val = sec_name,hqid=zone_name,divid=div_name)
                            else:
                                m1.Item_details.objects.create(sl_no=counters,tbl_data=tbl_data, item_subtitle=subdes1,status_flag=0,created_by=empno,created_on=datetime.now(), type='SSH',des_id=y, inspection_no_id=inspection_id,location_table=sec_type,location_code=sec_id,location_val = sec_name,hqid=zone_name,divid=div_name)
                        counters+=1
                
            m1.Item_details.objects.filter(inspection_no=inspection_id,update_status ='F').delete()
            m1.Marked_Officers.objects.filter(item_no__in=m1.Item_details.objects.filter(inspection_no=inspection_id).values('item_no'),update_status ='F').delete()
            m1.Marked_Officers.objects.filter(item_no__in=m1.Item_details.objects.filter(inspection_no=inspection_id).values('item_no'),marked_to__isnull=True).delete()
            
            for i in del_array:
                m1.Item_details.objects.filter(inspection_no=inspection_id,des_id=i).update(del_flag=1)
            m1.Item_details.objects.filter(inspection_no=inspection_id).update(link_image=None)
            for i in range(len(final_img)):
                ref = final_img[i][0]
                path = (final_img[i][1])[1:]
                data = list(m1.Item_details.objects.filter(inspection_no=inspection_id,des_id=ref).values('link_image'))
                if len(data) > 0:
                    data = data[0]['link_image']
                    if data != None:
                        path = data +'@#@'+path
                m1.Item_details.objects.filter(inspection_no=inspection_id,des_id=ref).update(link_image = path)
            for i in range(len(temp_para_array_marked)):
                des_id = temp_para_array_marked[i]['id']
                markeofficer = temp_para_array_marked[i]['officer'].split(',')
                if len(markeofficer) > 0:
                    item_id = list(m1.Item_details.objects.filter(inspection_no=inspection_id,des_id=des_id).values('item_no'))
                    if len(item_id) >0:
                        item_id = item_id[0]['item_no']
                    else:
                        continue
                    if not m1.Marked_Officers.objects.filter(item_no = item_id).exists():
                        for i in markeofficer:
                            Desig=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i,)
                            if Desig:
                                Desig1=Desig[0].designation_code
                                if m1.Marked_Officers.objects.all().last():
                                    marked_no_id=(m1.Marked_Officers.objects.all().last().marked_no)+1
                                else:
                                    marked_no_id = 1
                                m1.Marked_Officers.objects.create(created_on=datetime.now(),created_by=empno,marked_no=marked_no_id,marked_emp=i, status_flag=0,item_no_id=item_id,marked_to_id=Desig1)
            m1.Item_details.objects.filter(inspection_no=inspection_id,link_image='').update(link_image=None)
            return JsonResponse({"status": 1,'inspection_no': inspection_id})
        return JsonResponse({"success":False}, status=400)
    # except Exception as e:
    #     try:
    #         m1.error_Table.objects.create(fun_name="save_draft_data",user_id=request.user,err_details=str(e))
    #     except:
    #         print("Internal Error!!!")
    #     return render(request, "errorspage.html", {})

    



# def create_inspection_details(request):
#     # try:
#         if request.method == "POST" and request.is_ajax():
#             print("inside create_inspection_details")
#             from datetime import datetime
#             final=decryptWithAesEinspect(request.POST.get('final_partinspected'))
#             final_id=request.POST.get('id_partinspected')
#             rly=json.loads(request.POST.get('zone'))
#             div=json.loads(request.POST.get('division'))
#             # dept=json.loads(request.POST.get('department'))
#             loc=json.loads(request.POST.get('location'))
#             insdt=request.POST.get('txtDate2')
#             accompany=json.loads(request.POST.get('accompany'))
#             final_img = json.loads(request.POST.get('final_img'))
#             inspection_no = request.POST.get('inspection_no')
#             insp_desig = request.POST.get('insp_desig')
#             insp_ofc_name = request.POST.get('insp_ofc_name')
#             station_name = request.POST.get('station_name')
#             insp_type = request.POST.get('insp_type')
#             item_sections = request.POST.get('item_sections')
#             sec_ids=json.loads(request.POST.get('sec_ids'))
#             sec_details=json.loads(request.POST.get('sec_details'))
#             full_array=json.loads(request.POST.get('full_array'))
#             ins_flag=request.POST.get('ins_flag')
#             rly_id=None
#             div_id=None
#             if inspection_no =='' or ins_flag=='1':
#                 inspection_no = None

#             if 'to' in insdt:
#                 dt = insdt.split('to')
#                 st_date = dt[0].strip()
#                 en_date = dt[1].strip()
#                 start_date = datetime.strptime(st_date, '%d/%m/%y').strftime('%Y-%m-%d')
#                 inspected_on = datetime.strptime(en_date, '%d/%m/%y').strftime('%Y-%m-%d')
#             else:
#                 inspected_on = datetime.strptime(insdt, '%d/%m/%y').strftime('%Y-%m-%d')
#                 start_date = datetime.strptime(insdt, '%d/%m/%y').strftime('%Y-%m-%d')


#             title=request.POST.get('titleinsp')
#             send_to=request.POST.get('send_to')
#             send_desig=request.POST.get('send_desig')
           
#             finalval = json.loads(final)
#             final_allid = json.loads(final_id)
#             year = str(datetime.now().year)
#             print(finalval,final_allid,sec_ids,sec_details)


#             # empno=models.Level_Desig.objects.exclude(delete_flag=True).filter(official_email_ID=request.user)
#             empnox = models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=request.user)| Q(official_email_ID=request.user.guest_email) | Q(official_email_ID=request.user.email), empno__isnull=False)
#             if empnox:
#                 empno = empnox[0].empno_id
#                 desig = empnox[0].designation
#                 ddesig = empnox[0].designation_code
#             else:
#                 messages.error(request, 'Employee id not found')
#             if m1.Inspection_details.objects.filter(inspection_no = inspection_no ).exists():
#                 note_ = year+'/'+desig+'/Insp'+'/'
#                 last_note1 = m1.Inspection_details.objects.filter(inspection_note_no__istartswith=note_).aggregate(Max('insp_last'))
#                 if last_note1['insp_last__max'] == None:
#                     last_note1 = 1
#                     note_no = year+'/'+desig+'/Insp'+'/'+ str(last_note1)
#                 else:
#                     last_note1 = int(last_note1['insp_last__max']) +1
#                     note_no = year+'/'+desig+'/Insp'+'/'+ str(last_note1)
#                 m1.Inspection_details.objects.filter(inspection_no = inspection_no ).update(inspection_title=title,station_name=station_name,officer_name=insp_ofc_name,officer_desig=insp_desig,  created_by=empno, insp_last=last_note1,inspection_note_no=note_no, inspection_officer_id=ddesig, item_type='Insp', modified_by=empno, status_flag=1, start_date=start_date, inspected_on=inspected_on,final_submit_on=datetime.now(),insp_type=insp_type,item_sections=item_sections)
               
#                 # m1.Insp_Accompany.objects.filter(inspection_no_id=inspection_no).delete()
#                 # m6.copyto_mails.objects.filter( doc_id=inspection_no, doc_table='i').delete()
#                 # m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_no, type='HQ').delete()
#                 # m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_no, type='DIV').delete()
#                 # m1.Marked_Officers.objects.filter(item_no__in = m1.Item_details.objects.filter(inspection_no=inspection_no).values('item_no')).delete()
#                 # m1.Item_details.objects.filter(inspection_no=inspection_no).delete()
#                 # m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_no,type='LOC').delete()
               
#                 inspection_id = inspection_no
#             else:
#                 note_ = year+'/'+desig+'/Insp'+'/'
#                 last_note1 = m1.Inspection_details.objects.filter(inspection_note_no__istartswith=note_).aggregate(Max('insp_last'))
#                 if last_note1['insp_last__max'] == None:
#                     last_note1 = 1
#                     note_no = year+'/'+desig+'/Insp'+'/'+ str(last_note1)
#                 else:
#                     last_note1 = int(last_note1['insp_last__max']) +1
#                     note_no = year+'/'+desig+'/Insp'+'/'+ str(last_note1)
#                 m1.Inspection_details.objects.create(inspection_title=title,created_on=datetime.now(), station_name=station_name,officer_name=insp_ofc_name,officer_desig=insp_desig, created_by=empno, insp_last=last_note1,inspection_note_no=note_no, inspection_officer_id=ddesig, item_type='Insp', modified_by=empno, status_flag=1, start_date=start_date, inspected_on=inspected_on,final_submit_on=datetime.now(),insp_type=insp_type,item_sections=item_sections)            
#                 inspection_id=m1.Inspection_details.objects.all().last().inspection_no
           
#             messages.info(request, f'Inspection note successfully saved with Inspection Note No: {note_no}')




#             m1.Insp_Accompany.objects.filter(inspection_no_id=inspection_id).update(update_status='F')
#             if m1.Insp_Accompany.objects.filter(inspection_no_id=inspection_id).exists():
#                 for up in accompany:
#                     if m1.Insp_Accompany.objects.filter(inspection_no_id=inspection_id, accompany=up).exists():
#                         m1.Insp_Accompany.objects.filter(inspection_no_id=inspection_id, accompany=up).update(accompany=up,update_status='T')
#                     else:
#                         m1.Insp_Accompany.objects.create(accompany=up, inspection_no_id=inspection_id)
#             else:
#                 for acc in accompany:
#                     m1.Insp_Accompany.objects.create(accompany=acc, inspection_no_id=inspection_id)
#             m1.Insp_Accompany.objects.filter(inspection_no_id=inspection_id,update_status='F').delete()
#             #======================change 21-11-22======================
#             for rl in rly:
#                 rly_code=models.railwayLocationMaster.objects.get(location_code=rl,location_type_desc__in=['RAILWAY BOARD', 'PRODUCTION UNIT', 'HEAD QUATER','OFFICE', 'PSU', 'PRODUCTION UNIT', 'INSTITUTE'])
#                 rly_id=rly_code
#                 if m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_id, item=rl, type='HQ').exists():
#                     m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_id, item=rl, type='HQ').update(inspection_no_id=inspection_id, item=rl, type='HQ',update_status='T')
#                 else:
#                     m1.Insp_multi_location.objects.create(inspection_no_id=inspection_id, item=rl, type='HQ')
#             for di in div:
#                 div_code=models.railwayLocationMaster.objects.get(location_code=di,location_type_desc__in=['DIVISION','WORKSHOP'])
#                 div_id=div_code
#                 if m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_id, item=di, type='DIV').exists():
#                     m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_id, item=di, type='DIV').update(inspection_no_id=inspection_id, item=di, type='DIV',update_status='T')
#                 else:
#                     m1.Insp_multi_location.objects.create(inspection_no_id=inspection_id, item=di, type='DIV')
           
#             for lo in loc:
#                 if lo:
#                     new_loc = lo.split('#')
#                     if(len(new_loc) == 3):
#                         location = new_loc[0]
#                         location_type = new_loc[1]
#                         location_code = new_loc[2]
#                     else:
#                         location = new_loc[0]
#                         location_type = new_loc[1]
#                         location_code = new_loc[2]
#                         location = location + '@#@' + new_loc[3]


#                     #print(location, location_type)
#                     if m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_id, item=location,  type='LOC').exists():
#                         m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_id, item=location,  type='LOC').update(inspection_no_id=inspection_id, item=location, item_code=location_code, type='LOC', table_from=location_type,update_status='T')
#                     else:
#                         m1.Insp_multi_location.objects.create(inspection_no_id=inspection_id, item=location, item_code=location_code, type='LOC', table_from=location_type)

#             if len(loc) == 0:
#                 location = None
#                 location_type = None
#                 location_code = None
           
#             #========================
#             m1.Insp_multi_location.objects.filter(inspection_no=inspection_id,update_status='F').delete()
#             m1.Item_details.objects.filter(inspection_no=inspection_id).update(update_status ='F')
#             m1.Marked_Officers.objects.filter(item_no__in=m1.Item_details.objects.filter(inspection_no=inspection_id).values('item_no')).update(update_status ='F')

#             officer_email=[]
#             officer_contact=[]
#             marked_officers_sms=[]
#             counters =1
#             if len(sec_ids) == 0:
#                 # full_array=full_array.split(',')
#                 sec_ids['A']=full_array
#             for a in (sec_ids):
#                 if item_sections != '0':
#                     locid='location_at'+a
#                     locationdet=sec_details[locid][3:]
#                     xl = locationdet.split('#')
#                     if xl[1] == 'zone':
#                         zone_name=models.railwayLocationMaster.objects.get(location_code=xl[0],location_type_desc__in=['RAILWAY BOARD', 'PRODUCTION UNIT', 'HEAD QUATER','OFFICE', 'PSU', 'PRODUCTION UNIT', 'INSTITUTE'])
#                         heading='Observation at '+ xl[0]
#                         div_name=None
#                         sec_name=None
#                         sec_type=None
#                         sec_id=None
#                     elif xl[1] == 'div':
#                         div_name=models.railwayLocationMaster.objects.get(location_code=xl[0],location_type_desc__in=['DIVISION','WORKSHOP'])
#                         heading='Observation at '+ xl[0]
#                         zone_name=None
#                         sec_name=None
#                         sec_type=None
#                         sec_id=None
#                         zon=models.railwayLocationMaster.objects.filter(location_code=xl[0],location_type_desc__in=['DIVISION','WORKSHOP']).values('parent_rly_unit_code')
#                         if len(zon):
#                             zone_name=models.railwayLocationMaster.objects.get(rly_unit_code=zon[0]['parent_rly_unit_code'],location_type_desc__in=['RAILWAY BOARD', 'PRODUCTION UNIT', 'HEAD QUATER','OFFICE', 'PSU', 'PRODUCTION UNIT', 'INSTITUTE'])
#                     else:
#                         sec_name=xl[0]
#                         sec_type=xl[1]
#                         sec_id=xl[2]
#                         heading='Observation at '+ sec_name
#                         otherNames=sec_name.split('/')
#                         if sec_type!='TRN' and sec_type!='ORL':
#                             if len(otherNames)>2:
#                                 div_name=models.railwayLocationMaster.objects.get(location_code=otherNames[len(otherNames)-2],location_type__in=['WS','DIV'])
#                                 zone_name=models.railwayLocationMaster.objects.get(location_code=otherNames[len(otherNames)-1],location_type__in=['ZR','RB'])
#                             else:
#                                 zone_name=models.railwayLocationMaster.objects.get(location_code=otherNames[1],location_type__in=['ZR','RB'])
#                                 div_name=None
#                         else:
#                             trdres = xl[3].split('@')
#                             if len(trdres)>1:
#                                 div_name=models.railwayLocationMaster.objects.get(location_code=trdres[0])
#                                 zone_name=models.railwayLocationMaster.objects.get(location_code=trdres[1])
#                             else:
#                                 zone_name=models.railwayLocationMaster.objects.get(location_code=trdres[0])
#                                 div_name=None
#                     m1.Item_details.objects.create(sl_no=counters,item_title=heading,status_flag=4, created_on=datetime.now(), type='S',des_id=a,created_by=empno, inspection_no_id=inspection_id,location_table=sec_type,location_code=sec_id,location_val = sec_name,hqid=zone_name,divid=div_name)
#                     counters+=1
#                 else:
#                     sec_type=location_type
#                     sec_id=location_code
#                     sec_name=location
#                     zone_name=rly_id
#                     div_name=div_id
                    
#                 for f, b in zip(finalval, final_allid):
#                     for x,y in zip(finalval[f], final_allid[b]):
#                         s = y.split('.')
#                         if s[0] not in sec_ids[a]:
#                             continue
#                         if len(s) == 1:
#                             hed = 'heading'+y
#                             heading = finalval[f][hed]
#                             tbl_data = finalval[f][y]
                            
#                             if m1.Item_details.objects.filter(type='H',des_id=y, inspection_no=inspection_id).exists():
#                                 m1.Item_details.objects.filter(type='H',des_id=y, inspection_no=inspection_id).update(sl_no=counters,link_image=None,del_flag=0,tbl_data=tbl_data,item_title=heading,status_flag=1, created_on=datetime.now(),created_by=empno, type='H',des_id=y,update_status='T',location_table=sec_type,location_code=sec_id,location_val = sec_name,hqid=zone_name,divid=div_name)
#                                 item_id=m1.Item_details.objects.filter(type='H',des_id=y, inspection_no=inspection_id).all().last().item_no
#                             else:
#                                 m1.Item_details.objects.create(sl_no=counters,tbl_data=tbl_data,item_title=heading,status_flag=1, created_on=datetime.now(), type='H',des_id=y,created_by=empno, inspection_no_id=inspection_id,location_table=sec_type,location_code=sec_id,location_val = sec_name,hqid=zone_name,divid=div_name)
#                                 item_id=m1.Item_details.objects.all().last().item_no
#                             y2=str(y+'.1')
#                             if y2 in final_allid[b]:
#                                 #print('if',y2)
#                                 m1.Item_details.objects.filter(type='H',des_id=y, inspection_no_id=inspection_id).update(status_flag=4)
#                                 pass
#                             else:
#                                 #print('else',y2)
#                                 # trz = 'targetdate'+y
#                                 officm = 'markeofficer'+y
#                                 # chk = 'check' + y

                                
                            
#                                 # targetd = finalval[f][trz]
#                                 markof = finalval[f][officm]
#                                 # checkbox = finalval[f][chk]


                            


#                                 # if checkbox == '1':
#                                 #     checkbox = 1
#                                 # else:
#                                 #     checkbox = 0
#                                 markeofficer = markof.split(',')
#                                 # if targetd:
#                                 #     targetd=targetd.split('/')
#                                 #     targetd='20'+targetd[2].strip()+'-'+targetd[1].strip()+'-'+targetd[0].strip()
#                                 #     t_date = targetd
                                
#                                 # else:
#                                 #     t_date = None

#                                 # for action type
#                                 # act_type = 'type' + y
#                                 # typeofaction=finalval[f][act_type]
#                                 # if typeofaction=='info':
#                                 #     act_flag=1
#                                 # else:
#                                 #     act_flag=0

#                                 # rem='remarksmarkeofficer'+y
#                                 # remarks=finalval[f][rem]
#                                 ity='item_type'+y
#                                 item_type=finalval[f][ity]
#                                 # m1.Item_details.objects.filter(item_title=heading,status_flag=1, type='H',des_id=y, inspection_no_id=inspection_id).update(target_date=t_date, priority=checkbox, action_type=act_flag, markofcRemarks=remarks)
#                                 m1.Item_details.objects.filter(item_title=heading,status_flag=1, type='H',des_id=y, inspection_no_id=inspection_id).update(location_table=sec_type,location_code=sec_id,location_val = sec_name,item_type=item_type)

#                                 # item_id=m1.Item_details.objects.all().last().item_no
#                                 #mark officer
#                                 infom= 'markeofcinfo'+y
#                                 infom = finalval[f][infom]
#                                 if len(infom) >0:
#                                     officerinfo=json.loads(infom)
#                                     print(officerinfo)
#                                 else:
#                                     officerinfo=[]
#                                 # officerinfo = (infom.strip('[')).strip(']').split(',')
#                                 markOfficerPrev = []
#                                 if len(officerinfo):
#                                     for i in range(len(officerinfo)):
#                                         DesignationCode=officerinfo[i]['DesignationCode']
#                                         markOfficerPrev.append(str(DesignationCode))
#                                         selected_action=officerinfo[i]['selected_action']
#                                         priority=officerinfo[i]['priority']
#                                         tddate=officerinfo[i]['tddate']
#                                         m1.Item_details.objects.filter(item_no=item_id).update(priority=priority)
#                                         Desig=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=DesignationCode)
#                                         if Desig:
#                                             Desig1=Desig[0].designation_code
#                                             if Desig[0].official_email_ID:
#                                                 officer_email.append(Desig[0].official_email_ID)
#                                             if Desig[0].contactnumber:
#                                                 if Desig[0].contactnumber not in officer_contact:
#                                                     marked_officers_sms.append({'contact':Desig[0].contactnumber,'designation':Desig[0].designation_code})
#                                                     officer_contact.append(Desig[0].contactnumber)
#                                             if m1.Marked_Officers.objects.all().last():
#                                                 marked_no_id=(m1.Marked_Officers.objects.all().last().marked_no)+1
#                                             else:
#                                                 marked_no_id = 1

                                            
#                                             if selected_action == 'info':
#                                                 if m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).exists():
#                                                     m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).update(update_status='T',created_on=datetime.now(),created_by=empno,marked_emp=DesignationCode,status_flag=1,action_type=1)
#                                                 else:   
#                                                     m1.Marked_Officers.objects.create(marked_emp=i,created_on=datetime.now(),created_by=empno, marked_no=marked_no_id,status_flag=1, item_no_id=item_id,marked_to_id=Desig1,action_type=1)
                                            
#                                             else:
#                                                 if tddate == '-1':
#                                                     if m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).exists():
#                                                         m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).update(update_status='T',created_on=datetime.now(),created_by=empno,marked_emp=DesignationCode,status_flag=1,action_type=0,priority=priority)
#                                                     else:   
#                                                         m1.Marked_Officers.objects.create(marked_emp=i,created_on=datetime.now(),created_by=empno, marked_no=marked_no_id,status_flag=1, item_no_id=item_id,marked_to_id=Desig1,action_type=0,priority=priority)
                                                         
#                                                 else:
#                                                     targetd=tddate.split('/')
#                                                     targetd='20'+targetd[2].strip()+'-'+targetd[1].strip()+'-'+targetd[0].strip()
#                                                     tddate = targetd
#                                                     if m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).exists():
#                                                         m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).update(update_status='T',created_on=datetime.now(),created_by=empno,marked_emp=DesignationCode,status_flag=1,action_type=0,priority=priority,target_date=tddate)
#                                                     else:   
#                                                         m1.Marked_Officers.objects.create(marked_emp=i,created_on=datetime.now(),created_by=empno, marked_no=marked_no_id,status_flag=1, item_no_id=item_id,marked_to_id=Desig1,action_type=0,priority=priority,target_date=tddate)
#                                                     m1.Item_details.objects.filter(item_no=item_id).update(target_date=tddate,priority=priority)   
#                                     markOfficerPrev1 = [x for x in markOfficerPrev if x not in markeofficer]
#                                     if markOfficerPrev1 != ['']:
#                                         for i in markOfficerPrev1:
#                                             m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=i).update(update_status='F')
#                                     markOfficerPrev = [x for x in markeofficer if x not in markOfficerPrev]
#                                     if markOfficerPrev != ['']:
#                                         for i in markOfficerPrev:
#                                             Desig=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i)
#                                             if Desig:
#                                                 Desig1=Desig[0].designation_code
#                                                 if m1.Marked_Officers.objects.all().last():
#                                                     marked_no_id=(m1.Marked_Officers.objects.all().last().marked_no)+1
#                                                 else:
#                                                     marked_no_id = 1

#                                                 if m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).exists():
#                                                     m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).update(update_status='T',created_on=datetime.now(),created_by=empno,marked_emp=i,status_flag=0)
#                                                 else:
#                                                     m1.Marked_Officers.objects.create(created_on=datetime.now(),created_by=empno,marked_emp=i,marked_no=marked_no_id,status_flag=0,item_no_id=item_id,marked_to_id=Desig1)


#                                 elif markof:
#                                     for i in markeofficer:
#                                         Desig=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i)
#                                         if Desig:
#                                             Desig1=Desig[0].designation_code
#                                             if Desig[0].official_email_ID:
#                                                 officer_email.append(Desig[0].official_email_ID)
#                                             if Desig[0].contactnumber:
#                                                 if Desig[0].contactnumber not in officer_contact:
#                                                     marked_officers_sms.append({'contact':Desig[0].contactnumber,'designation':Desig[0].designation_code})
#                                                     officer_contact.append(Desig[0].contactnumber)
#                                             if m1.Marked_Officers.objects.all().last():
#                                                 marked_no_id=(m1.Marked_Officers.objects.all().last().marked_no)+1
#                                             else:
#                                                 marked_no_id = 1
                                            

#                                             if m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).exists():
#                                                 m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).update(update_status='T',created_on=datetime.now(),created_by=empno,marked_emp=i,status_flag=1)
#                                             else:   
#                                                 m1.Marked_Officers.objects.create(marked_emp=i,created_on=datetime.now(),created_by=empno, marked_no=marked_no_id,status_flag=1, item_no_id=item_id,marked_to_id=Desig1)
                                        
#                                         else:
#                                             print('error')
    
#                         elif len(s) == 2:
#                             ob = 'observation'+y
#                             # trz = 'targetdate'+y
#                             officm = 'markeofficer'+y
#                             # chk = 'check' + y


#                             observation = finalval[f][ob]
#                             # targetd = finalval[f][trz]
#                             markof = finalval[f][officm]
#                             markeofficer = markof.split(',')


#                             # checkbox = finalval[f][chk]


#                             # if checkbox == '1':
#                             #     checkbox = 1
#                             # else:
#                             #     checkbox = 0

#                             # for action type
#                             # act_type = 'type' + y
#                             # typeofaction=finalval[f][act_type]
#                             # if typeofaction=='info':
#                             #     act_flag=1
#                             # else:
#                             #     act_flag=0
                        
#                             # if targetd:
#                             #     # targetdate = datetime.strptime(targetd, '%d/%m/%Y').strftime('%Y-%m-%d')
#                             #     targetd=targetd.split('/')
#                             #     targetd='20'+targetd[2].strip()+'-'+targetd[1].strip()+'-'+targetd[0].strip()
#                             #     targetdate = targetd
#                             # else:
#                             #     targetdate = None
#                             #print(observation)
#                             tbl_data = finalval[f][y]
#                             # rem='remarksmarkeofficer'+y
#                             # remarks=finalval[f][rem]
#                             ity='item_type'+y
#                             item_type=finalval[f][ity]
#                             if m1.Item_details.objects.filter(inspection_no=inspection_id, des_id=y,  type='SH').exists():
#                                 print("update")
#                                 # m1.Item_details.objects.filter(inspection_no=inspection_id, des_id=y,  type='SH').update(sl_no=counters,link_image=None,del_flag=0,tbl_data=tbl_data,observation=observation,priority=checkbox, status_flag=1,created_by=empno,created_on=datetime.now(), target_date=targetdate,action_type=act_flag,update_status='T',markofcRemarks=remarks)
#                                 m1.Item_details.objects.filter(inspection_no=inspection_id, des_id=y,  type='SH').update(sl_no=counters,link_image=None,del_flag=0,tbl_data=tbl_data,observation=observation, status_flag=1,created_by=empno,created_on=datetime.now(), update_status='T',location_table=sec_type,location_code=sec_id,location_val = sec_name,item_type=item_type,hqid=zone_name,divid=div_name)

#                                 item_id=m1.Item_details.objects.filter(inspection_no=inspection_id, des_id=y,  type='SH').all().last().item_no
#                             else:
#                                 # m1.Item_details.objects.create(sl_no=counters,tbl_data=tbl_data,observation=observation,priority=checkbox, status_flag=1,inspection_no_id=inspection_id, des_id=y, target_date=targetdate, type='SH', action_type=act_flag,created_by=empno,created_on=datetime.now(),markofcRemarks=remarks)
#                                 m1.Item_details.objects.create(sl_no=counters,inspection_no_id=inspection_id,link_image=None,del_flag=0,tbl_data=tbl_data,observation=observation, des_id=y, type='SH',status_flag=1,created_by=empno,created_on=datetime.now(), update_status='T',location_table=sec_type,location_code=sec_id,location_val = sec_name,item_type=item_type,hqid=zone_name,divid=div_name)
#                                 item_id=m1.Item_details.objects.all().last().item_no

#                             # item_id=m1.Item_details.objects.all().last().item_no
#                             #mark officer
#                             infom= 'markeofcinfo'+y
#                             infom = finalval[f][infom]
#                             # print(infom)
#                             if len(infom) >0:
#                                 officerinfo=json.loads(infom)
#                                 print(officerinfo)
#                             else:
#                                 officerinfo=[]
#                             # officerinfo = ((infom.strip('[')).strip(']'))
#                             # print(officerinfo)
#                             markOfficerPrev = []
#                             if len(officerinfo):
#                                 for i in range(len(officerinfo)):
#                                     DesignationCode=officerinfo[i]['DesignationCode']
#                                     markOfficerPrev.append(str(DesignationCode))
#                                     selected_action=officerinfo[i]['selected_action']
#                                     priority=officerinfo[i]['priority']
#                                     tddate=officerinfo[i]['tddate']
#                                     m1.Item_details.objects.filter(item_no=item_id).update(priority=priority)
#                                     Desig=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=DesignationCode)
#                                     if Desig:
#                                         Desig1=Desig[0].designation_code
#                                         if Desig[0].official_email_ID:
#                                             officer_email.append(Desig[0].official_email_ID)
#                                         if Desig[0].contactnumber:
#                                             if Desig[0].contactnumber not in officer_contact:
#                                                 marked_officers_sms.append({'contact':Desig[0].contactnumber,'designation':Desig[0].designation_code})
#                                                 officer_contact.append(Desig[0].contactnumber)
#                                         if m1.Marked_Officers.objects.all().last():
#                                             marked_no_id=(m1.Marked_Officers.objects.all().last().marked_no)+1
#                                         else:
#                                             marked_no_id = 1

                                        
#                                         if selected_action == 'info':
#                                             if m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).exists():
#                                                 m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).update(update_status='T',created_on=datetime.now(),created_by=empno,marked_emp=DesignationCode,status_flag=1,action_type=1)
#                                             else:   
#                                                 m1.Marked_Officers.objects.create(marked_emp=i,created_on=datetime.now(),created_by=empno, marked_no=marked_no_id,status_flag=1, item_no_id=item_id,marked_to_id=Desig1,action_type=1)
                                        
#                                         else:
#                                             if tddate == '-1':
#                                                 if m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).exists():
#                                                     m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).update(update_status='T',created_on=datetime.now(),created_by=empno,marked_emp=DesignationCode,status_flag=1,action_type=0,priority=priority)
#                                                 else:   
#                                                     m1.Marked_Officers.objects.create(marked_emp=i,created_on=datetime.now(),created_by=empno, marked_no=marked_no_id,status_flag=1, item_no_id=item_id,marked_to_id=Desig1,action_type=0,priority=priority)
#                                             else:
#                                                 targetd=tddate.split('/')
#                                                 targetd='20'+targetd[2].strip()+'-'+targetd[1].strip()+'-'+targetd[0].strip()
#                                                 tddate = targetd
#                                                 if m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).exists():
#                                                     m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).update(update_status='T',created_on=datetime.now(),created_by=empno,marked_emp=DesignationCode,status_flag=1,action_type=0,priority=priority,target_date=tddate)
#                                                 else:   
#                                                     m1.Marked_Officers.objects.create(marked_emp=i,created_on=datetime.now(),created_by=empno, marked_no=marked_no_id,status_flag=1, item_no_id=item_id,marked_to_id=Desig1,action_type=0,priority=priority,target_date=tddate)
#                                                 m1.Item_details.objects.filter(item_no=item_id).update(target_date=tddate)
#                                 markOfficerPrev1 = [x for x in markOfficerPrev if x not in markeofficer]
#                                 if markOfficerPrev1 != ['']:
#                                     for i in markOfficerPrev1:
#                                         m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=i).update(update_status='F')
#                                 markOfficerPrev = [x for x in markeofficer if x not in markOfficerPrev]
#                                 if markOfficerPrev != ['']:
#                                     for i in markOfficerPrev:
#                                         Desig=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i)
#                                         if Desig:
#                                             Desig1=Desig[0].designation_code
#                                             if m1.Marked_Officers.objects.all().last():
#                                                 marked_no_id=(m1.Marked_Officers.objects.all().last().marked_no)+1
#                                             else:
#                                                 marked_no_id = 1

#                                             if m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).exists():
#                                                 m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).update(update_status='T',created_on=datetime.now(),created_by=empno,marked_emp=i,status_flag=0)
#                                             else:
#                                                 m1.Marked_Officers.objects.create(created_on=datetime.now(),created_by=empno,marked_emp=i,marked_no=marked_no_id,status_flag=0,item_no_id=item_id,marked_to_id=Desig1)
#                             elif markof:
#                                 for i in markeofficer:
#                                     Desig=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i)
#                                     if Desig:
#                                         Desig1=Desig[0].designation_code
#                                         if Desig[0].official_email_ID:
#                                             officer_email.append(Desig[0].official_email_ID)
#                                         if Desig[0].contactnumber:
#                                             if Desig[0].contactnumber not in officer_contact:
#                                                 marked_officers_sms.append({'contact':Desig[0].contactnumber,'designation':Desig[0].designation_code})
#                                                 officer_contact.append(Desig[0].contactnumber)


#                                         if m1.Marked_Officers.objects.all().last():
#                                             marked_no_id=(m1.Marked_Officers.objects.all().last().marked_no)+1
#                                         else:
#                                             marked_no_id = 1

#                                         if m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).exists():
#                                             m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).update(created_on=datetime.now(),created_by=empno,marked_emp=i, status_flag=1,update_status='T')
#                                         else:
#                                             m1.Marked_Officers.objects.create(created_on=datetime.now(),created_by=empno,marked_emp=i,marked_no=marked_no_id,status_flag=1, item_no_id=item_id,marked_to_id=Desig1)
#                                     else:
#                                         print('error')
#                                         # messages.info(request, 'Employ Desig not Match in Designation Master')
#                             else:
#                                 markeofficer=""


                    
                        
#                         else:
#                             subdes = 'subdes'+y
#                             subdes1 = finalval[f][subdes]
#                             tbl_data = finalval[f][y]
#                             # for action type
#                             # act_type = 'type' + y
#                             # typeofaction=finalval[f][act_type]
#                             # if typeofaction=='info':
#                             #     act_flag=1
#                             # else:
#                             #     act_flag=0
#                             if m1.Item_details.objects.filter(type='SSH',des_id=y, inspection_no=inspection_id).exists():
#                                 m1.Item_details.objects.filter(type='SSH',des_id=y, inspection_no=inspection_id).update(sl_no=counters,link_image=None,del_flag=0,tbl_data=tbl_data, item_subtitle=subdes1,status_flag=4,created_by=empno,created_on=datetime.now(),update_status='T',location_table=sec_type,location_code=sec_id,location_val = sec_name,hqid=zone_name,divid=div_name)
#                             else:
#                                 m1.Item_details.objects.create(sl_no=counters,tbl_data=tbl_data,item_subtitle=subdes1,status_flag=4, type='SSH',des_id=y, inspection_no_id=inspection_id,location_table=sec_type,location_code=sec_id,location_val = sec_name,hqid=zone_name,divid=div_name)

#                         counters+=1
                
#             m1.Item_details.objects.filter(inspection_no=inspection_id,update_status ='F').delete()
#             m1.Marked_Officers.objects.filter(item_no__in=m1.Item_details.objects.filter(inspection_no=inspection_id).values('item_no'),update_status ='F').delete()
#             m1.Marked_Officers.objects.filter(item_no__in=m1.Item_details.objects.filter(inspection_no=inspection_id).values('item_no'),marked_to__isnull=True).delete()
            
#             for i in range(len(final_img)):
#                 ref = final_img[i][0]
#                 path = (final_img[i][1])[1:]
#                 data = list(m1.Item_details.objects.filter(inspection_no=inspection_id,des_id=ref).values('link_image'))
#                 if len(data) > 0:
#                     data = data[0]['link_image']
#                     if data != None:
#                         path = data +'@#@'+path
#                 m1.Item_details.objects.filter(inspection_no=inspection_id,des_id=ref).update(link_image = path)

#             m1.Item_details.objects.filter(inspection_no=inspection_id,link_image='').update(link_image=None)

           
#             try:
#                 subject="Inspection report marked to you for n/a."
#                 # To=['ecegcttarun@gmail.com',]
#                 To=officer_email
#                 context = {'title': title}
                
                
#                 # if len(officer_contact) > 0:
#                 #     for num in officer_contact:
#                 #         pass
#                         # sendsms(num)

#                 if len(marked_officers_sms) > 0:
#                     for mar in marked_officers_sms:
#                         new_pending=m1.Marked_Officers.objects.filter(item_no__inspection_no=inspection_id,marked_to_id=mar['designation']).values().count()
#                         cum_pending=m1.Marked_Officers.objects.filter(marked_to_id=mar['designation'], status_flag=1).values().count()
#                         for_pending=m1.Marked_Officers_forward.objects.filter(marked_to_forward_id=mar['designation'], status_flag=1).values().count()
#                         total_pending=cum_pending+for_pending
#                         # n=str(new_pending)+"/"+str(cum_pending)
#                         issue_date=date.today()
#                         issue_date = datetime.strftime(issue_date,"%d/%m/%Y")
#                         t=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=ddesig).values('designation')
#                         if len(t)!=0:
#                             inspection_officer=t[0]['designation']
#                             inspection_officer=inspection_officer[0:15]
#                         else:
#                             inspection_officer='NA'
#                         # msg_body=str(note_no)+" , "+str(issue_date)+", "+str(inspection_officer)
#                         note_no=note_no[0:30]
#                         # Total {#var#} Items of Insp. note no.{#var#} marked /forwarded by {#var#} marked  to you for n/a. Cumulative pending compliance:{#var#},CRIS/MU.
#                         # message="Insp. note no. "+msg_body+" marked to you for n/a. New Paras marked/Cumulative pending compliance: "+n+", CRIS/INSP"
#                         sendsms_insp(mar['contact'],new_pending,note_no,inspection_officer,total_pending)
                   
#                 InspSendMail(subject, To, context)
                



#                 # m1.Insp_mail_details.objects.create(subject=subject, body=title,area='Mark Of', inspection_no_id=inspection_id, send_to=send_to,send_desig=send_desig)
#                 m6.copyto_mails.objects.create(sender_id_id=ddesig, subject=subject,doc_id=inspection_id,  body=title, area_flag=1, doc_table='i', receiver_id=send_to, receiver_desig=send_desig)
#                 messages.success(request, 'Mark officer email has been sent')
               
#             except:
#                 print("error on sending")
#                 messages.error(
#                     request, 'Email send failed. Please Try Again.')
#             try:
#                 offic_mail =[]
#                 offic_contact =[]
#                 unique_offic_mail = list(set(offic_mail))
#                 unique_offic_contact = list(set(offic_contact))
#                 if send_to:
#                     emil = send_to.split(',')
#                     for i in emil:
#                         email = models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i)
#                         if email[0].official_email_ID:
#                             offic_mail.append(email[0].official_email_ID)
#                         if Desig[0].contactnumber:
#                             offic_contact.append(Desig[0].contactnumber)
                           
#                     # if len(unique_offic_contact) > 0:
#                     #     for num in unique_offic_contact:
#                     #         sendsms(num)


#                     subject="Inspection report"
#                     To = unique_offic_mail
#                     # To=['ecegcttarun@gmail.com',]
#                     context = {'title': title}
                       
#                     InspSendMail(subject, To, context)
#                     # m1.Insp_mail_details.objects.create(subject=subject, body=title, area='Copy To', inspection_no_id=inspection_id, send_to=send_to,send_desig=send_desig)
#                     if m6.copyto_mails.objects.filter(doc_id=inspection_id, area_flag=0, doc_table='i').exists():
#                         m6.copyto_mails.objects.filter(doc_id=inspection_id, area_flag=0, doc_table='i').update(body=title,subject=subject,sender_id_id=ddesig, receiver_id=send_to, receiver_desig=send_desig)
#                     else:
#                         m6.copyto_mails.objects.create(sender_id_id=ddesig, subject=subject,doc_id=inspection_id,  body=title, area_flag=0, doc_table='i', receiver_id=send_to, receiver_desig=send_desig)
#                     messages.success(request, 'Copy to Email has been sent')
                   
#             except:
               
#                 messages.error(request, 'Copy to Email send failed.')


#             return JsonResponse({"status": 1 })
#         return JsonResponse({"success":False}, status=400)
       
#     # except Exception as e:
#     #     print(e)
#     #     try:
#     #         m1.error_Table.objects.create(fun_name="create_inspection_details",user_id=request.user,err_details=str(e))
#     #     except:
#     #         print("Internal Error!!!")
#     #     return render(request, "errorspage.html", {})

# def save_draft_data(request):
#     # try:
#         if request.method == "POST" and request.is_ajax():
#             from datetime import datetime
#             final=decryptWithAesEinspect(request.POST.get('final_partinspected'))
#             final_id=request.POST.get('id_partinspected')
#             rly=json.loads(request.POST.get('zone'))
#             div=json.loads(request.POST.get('division'))
#             loc=json.loads(request.POST.get('location'))
#             final_img=json.loads(request.POST.get('final_img'))
#             accompany=json.loads(request.POST.get('accompany'))
#             inspection_no = request.POST.get('inspection_no')
#             insp_desig = request.POST.get('insp_desig')
#             insp_ofc_name = request.POST.get('insp_ofc_name')
#             station_name = request.POST.get('station_name')
#             ins_flag=request.POST.get('ins_flag')
#             insp_type = request.POST.get('insp_type')
#             item_sections = request.POST.get('item_sections')
#             sec_ids=json.loads(request.POST.get('sec_ids'))
#             sec_details=json.loads(request.POST.get('sec_details'))
#             full_array=json.loads(request.POST.get('full_array'))
            
#             rly_id=None
#             div_id=None
           
#             if inspection_no =='' or ins_flag=='1':
#                 inspection_no = None


#             send_to=request.POST.get('send_to')
#             send_desig=request.POST.get('send_desig')
#             temp_para_array_marked = json.loads(request.POST.get('temp_para_array_marked'))
           
#             insdt=request.POST.get('txtDate2')
#             del_array=json.loads(request.POST.get('del_array'))


#             if 'to' in insdt:
#                 dt = insdt.split('to')
#                 st_date = dt[0].strip()
#                 en_date = dt[1].strip()


#                 start_date = datetime.strptime(st_date, '%d/%m/%y').strftime('%Y-%m-%d')
#                 inspected_on = datetime.strptime(en_date, '%d/%m/%y').strftime('%Y-%m-%d')


#             else:
               
#                 inspected_on = datetime.strptime(insdt, '%d/%m/%y').strftime('%Y-%m-%d')
#                 start_date = datetime.strptime(insdt, '%d/%m/%y').strftime('%Y-%m-%d')
#             title=request.POST.get('titleinsp')
#             finalval = json.loads(final)
#             final_allid = json.loads(final_id)
#             empnox = models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=request.user)| Q(official_email_ID=request.user.guest_email) | Q(official_email_ID=request.user.email), empno__isnull=False)
#             if empnox:
#                 empno = empnox[0].empno_id
#                 ddesig = empnox[0].designation_code
#             else:
#                 messages.error(request, 'You are not authorize to create inspection. Please contact to admin')


#             if m1.Inspection_details.objects.filter(inspection_no = inspection_no ).exists():
#                 m1.Inspection_details.objects.filter(inspection_no =inspection_no ).update(inspection_title=title,item_type='Insp', created_on=datetime.now(), inspection_officer_id=ddesig, status_flag=0,modified_by=empno, station_name=station_name,officer_name=insp_ofc_name,officer_desig=insp_desig, created_by=empno,start_date=start_date,inspected_on=inspected_on,insp_type=insp_type,item_sections=item_sections)
                
#                 # m1.Insp_Accompany.objects.filter(inspection_no_id=inspection_no).delete()
#                 # m6.copyto_mails.objects.filter( doc_id=inspection_no, doc_table='i').delete()
#                 # m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_no, type='HQ').delete()
#                 # m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_no, type='DIV').delete()
#                 # m1.Marked_Officers.objects.filter(item_no__in = m1.Item_details.objects.filter(inspection_no=inspection_no).values('item_no')).delete()
#                 # m1.Item_details.objects.filter(inspection_no=inspection_no).delete()
#                 # m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_no,type='LOC').delete()
                
                
#                 inspection_id = inspection_no
#             else:
#                 m1.Inspection_details.objects.create(inspection_title=title,item_type='Insp', station_name=station_name,officer_name=insp_ofc_name,officer_desig=insp_desig,  created_on=datetime.now(), inspection_officer_id=ddesig, status_flag=0,modified_by=empno, created_by=empno,start_date=start_date,inspected_on=inspected_on,insp_type=insp_type,item_sections=item_sections)
#                 inspection_id=m1.Inspection_details.objects.all().last().inspection_no
#             m1.Insp_Accompany.objects.filter(inspection_no_id=inspection_id).update(update_status='F')
#             if m1.Insp_Accompany.objects.filter(inspection_no_id=inspection_id).exists():
#                 for up in accompany:
#                     if m1.Insp_Accompany.objects.filter(inspection_no_id=inspection_id, accompany=up).exists():
#                         m1.Insp_Accompany.objects.filter(inspection_no_id=inspection_id, accompany=up).update(accompany=up,update_status='T')
#                     else:
#                         m1.Insp_Accompany.objects.create(accompany=up, inspection_no_id=inspection_id)
#             else:
#                 for acc in accompany:
#                     m1.Insp_Accompany.objects.create(accompany=acc, inspection_no_id=inspection_id)
#             m1.Insp_Accompany.objects.filter(inspection_no_id=inspection_id,update_status='F').delete()
#             if send_to:
#                 if m6.copyto_mails.objects.filter(doc_id=inspection_id, area_flag=0, doc_table='i').exists():
#                     m6.copyto_mails.objects.filter(doc_id=inspection_id, area_flag=0, doc_table='i').update(sender_id_id=ddesig, receiver_id=send_to, receiver_desig=send_desig)
#                 else:
#                     m6.copyto_mails.objects.create(sender_id_id=ddesig, doc_id=inspection_id, area_flag=0, doc_table='i', receiver_id=send_to, receiver_desig=send_desig)
            

#             m1.Insp_multi_location.objects.filter(inspection_no=inspection_id).update(update_status='F')
#             for rl in rly:
                
#                 rly_code=models.railwayLocationMaster.objects.get(location_code=rl,location_type_desc__in=['RAILWAY BOARD', 'PRODUCTION UNIT', 'HEAD QUATER','OFFICE', 'PSU', 'PRODUCTION UNIT', 'INSTITUTE'])
#                 rly_id=rly_code
#                 if m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_id, item=rl, type='HQ').exists():
#                     m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_id, item=rl, type='HQ').update(inspection_no_id=inspection_id, item=rl, type='HQ',update_status='T')
#                 else:
#                     m1.Insp_multi_location.objects.create(inspection_no_id=inspection_id, item=rl, type='HQ')
#             for di in div:
                
#                 div_code=models.railwayLocationMaster.objects.get(location_code=di,location_type_desc__in=['DIVISION','WORKSHOP'])
#                 div_id=div_code
#                 if m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_id, item=di, type='DIV').exists():
#                     m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_id, item=di, type='DIV').update(inspection_no_id=inspection_id, item=di, type='DIV',update_status='T')
#                 else:
#                     m1.Insp_multi_location.objects.create(inspection_no_id=inspection_id, item=di, type='DIV')
                    

#             for lo in loc:
#                 if lo:
#                     new_loc = lo.split('#')
#                     if(len(new_loc) == 3):
#                         location = new_loc[0]
#                         location_type = new_loc[1]
#                         location_code = new_loc[2]
#                     else:
#                         location = new_loc[0]
#                         location_type = new_loc[1]
#                         location_code = new_loc[2]
#                         location = location + '@#@' + new_loc[3]
#                     if m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_id, item=location,  type='LOC').exists():
#                         m1.Insp_multi_location.objects.filter(inspection_no_id=inspection_id, item=location,  type='LOC').update(inspection_no_id=inspection_id, item=location, item_code=location_code, type='LOC', table_from=location_type,update_status='T')
#                     else:
#                         m1.Insp_multi_location.objects.create(inspection_no_id=inspection_id, item=location, item_code=location_code, type='LOC', table_from=location_type)
            
#             if len(loc) == 0:
#                 location=None
#                 location_type=None
#                 location_code=None
            
            
#             m1.Insp_multi_location.objects.filter(inspection_no=inspection_id,update_status='F').delete()
#             m1.Item_details.objects.filter(inspection_no=inspection_id).update(update_status ='F')
#             m1.Marked_Officers.objects.filter(item_no__in=m1.Item_details.objects.filter(inspection_no=inspection_id).values('item_no')).update(update_status ='F')

#             counters=1
#             headp = 0
#             headsp = 0
#             headssp = 0
#             if len(sec_ids) == 0:
#                 # full_array=full_array.split(',')
#                 sec_ids['A']=full_array
#             for a in (sec_ids):
#                 if item_sections != '0':
#                     locid='location_at'+a
#                     locationdet=sec_details[locid][3:]
#                     xl = locationdet.split('#')
#                     if xl[1] == 'zone':
#                         # print(xl[0])
#                         zone_name=models.railwayLocationMaster.objects.get(location_code=xl[0],location_type_desc__in=['RAILWAY BOARD', 'PRODUCTION UNIT', 'HEAD QUATER','OFFICE', 'PSU', 'PRODUCTION UNIT', 'INSTITUTE'])
#                         heading='Observation at '+ xl[0]
#                         div_name=None
#                         sec_name=None
#                         sec_type=None
#                         sec_id=None
#                     elif xl[1] == 'div':
#                         div_name=models.railwayLocationMaster.objects.get(location_code=xl[0],location_type_desc__in=['DIVISION','WORKSHOP'])
#                         heading='Observation at '+ xl[0]
#                         zone_name=None
#                         sec_name=None
#                         sec_type=None
#                         sec_id=None
#                         zon=models.railwayLocationMaster.objects.filter(location_code=xl[0],location_type_desc__in=['DIVISION','WORKSHOP']).values('parent_rly_unit_code')
#                         if len(zon):
#                             zone_name=models.railwayLocationMaster.objects.get(rly_unit_code=zon[0]['parent_rly_unit_code'],location_type_desc__in=['RAILWAY BOARD', 'PRODUCTION UNIT', 'HEAD QUATER','OFFICE', 'PSU', 'PRODUCTION UNIT', 'INSTITUTE'])
#                     else:
#                         sec_name=xl[0]
#                         sec_type=xl[1]
#                         sec_id=xl[2]
#                         heading='Observation at '+ sec_name
#                         otherNames=sec_name.split('/')

#                         # print('hgh ' ,sec_name,sec_type,sec_id,xl)
                        
#                         if sec_type!='TRN' and sec_type!='ORL':
#                             if len(otherNames)>2:
#                                 div_name=models.railwayLocationMaster.objects.get(location_code=otherNames[len(otherNames)-2],location_type__in=['WS','DIV'])
#                                 zone_name=models.railwayLocationMaster.objects.get(location_code=otherNames[len(otherNames)-1],location_type__in=['ZR','RB','PU'])
#                             else:

#                                 zone_name=models.railwayLocationMaster.objects.get(location_code=otherNames[1],location_type__in=['ZR','RB','PU'])
#                                 div_name=None
                        
#                         else:
#                             trdres = xl[3].split('@')
#                             if len(trdres)>1:
#                                 div_name=models.railwayLocationMaster.objects.get(location_code=trdres[0])
#                                 zone_name=models.railwayLocationMaster.objects.get(location_code=trdres[1])
#                             else:
#                                 zone_name=models.railwayLocationMaster.objects.get(location_code=trdres[0])
#                                 div_name=None

                     
#                     m1.Item_details.objects.create(sl_no=counters,item_title=heading,status_flag=4, created_on=datetime.now(), type='S',des_id=a,created_by=empno, inspection_no_id=inspection_id,location_table=sec_type,location_code=sec_id,location_val = sec_name, hqid=zone_name,divid=div_name)
#                     counters+=1
#                 else:
#                     sec_name=location
#                     sec_type=location_type
#                     sec_id=location_code
#                     zone_name=rly_id
#                     div_name=div_id
#                 for f, b in zip(finalval, final_allid):
#                     for x,y in zip(finalval[f], final_allid[b]):
#                         s = y.split('.')
                        
#                         if s[0] not in sec_ids[a]:
#                             continue
#                         if len(s) == 1:
#                             hed = 'heading'+y
#                             heading = finalval[f][hed]
#                             tbl_data = finalval[f][y]
#                             print(zone_name,div_name)
#                             if m1.Item_details.objects.filter(type='H',des_id=y, inspection_no=inspection_id).exists():
#                                 m1.Item_details.objects.filter(type='H',des_id=y, inspection_no=inspection_id).update(sl_no=counters,del_flag=0,tbl_data=tbl_data,item_title=heading,status_flag=0,created_by=empno, created_on=datetime.now(),update_status='T',location_table=sec_type,location_code=sec_id,location_val = sec_name,hqid=zone_name,divid=div_name)
#                                 item_id=m1.Item_details.objects.filter(type='H',des_id=y, inspection_no=inspection_id).all().last().item_no
                                
#                             else:
#                                 m1.Item_details.objects.create(sl_no=counters,tbl_data=tbl_data,item_title=heading,status_flag=0,created_by=empno, created_on=datetime.now(), type='H',des_id=y, inspection_no_id=inspection_id,location_table=sec_type,location_code=sec_id,location_val = sec_name,hqid=zone_name,divid=div_name)
#                                 item_id=m1.Item_details.objects.all().last().item_no
                                
#                             y2=str(y+'.1')
#                             if y2 in final_allid[b]:
                        
#                                 pass
#                             else:
#                                 # trz = 'targetdate'+y
#                                 officm = 'markeofficer'+y
#                                 # chk = 'check'+y
#                                 # targetd = finalval[f][trz]
#                                 # print(finalval[f])
#                                 markof = finalval[f][officm]
#                                 markeofficer = markof.split(',')
#                                 # checkbox = finalval[f][chk]
#                                 # rem='remarksmarkeofficer'+y
#                                 # remarks=finalval[f][rem]
#                                 # print(remarks,"my name is apeksha")
#                                 # if checkbox == '1':
#                                 #     checkbox = 1
#                                 # elif checkbox== '0':
#                                 #     checkbox = 0
#                                 # if targetd:
#                                 #     targetd=targetd.split('/')
#                                 #     targetd='20'+targetd[2].strip()+'-'+targetd[1].strip()+'-'+targetd[0].strip()
#                                 #     t_date = targetd
#                                 # else:
#                                 #     t_date = None
                                    
#                                 # act_type = 'type' + y
#                                 # typeofaction=finalval[f][act_type]
#                                 # if typeofaction=='info':
#                                 #     act_flag=1
#                                 # else:
#                                 #     act_flag=0
#                                 ity='item_type'+y
#                                 item_type=finalval[f][ity]
#                                 # m1.Item_details.objects.filter(item_title=heading,status_flag=0, type='H',des_id=y, inspection_no_id=inspection_id).update(target_date=t_date, priority=checkbox, action_type=act_flag, markofcRemarks=remarks)
                                
#                                 m1.Item_details.objects.filter(item_title=heading,status_flag=0, type='H',des_id=y, inspection_no_id=inspection_id).update(item_type=item_type)

#                                 infom= 'markeofcinfo'+y
#                                 infom = finalval[f][infom]
                               
#                                 if len(infom) >0:
#                                     officerinfo=json.loads(infom)
#                                 else:
#                                     officerinfo=[]
                                

#                                 markOfficerPrev = []
#                                 if len(officerinfo):
#                                     for i in range(len(officerinfo)):
#                                         DesignationCode=officerinfo[i]['DesignationCode']
#                                         markOfficerPrev.append(str(DesignationCode))
#                                         selected_action=officerinfo[i]['selected_action']
#                                         priority=officerinfo[i]['priority']
#                                         tddate=officerinfo[i]['tddate']
#                                         m1.Item_details.objects.filter(item_no=item_id).update(priority=priority)
#                                         Desig=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=DesignationCode)
#                                         if Desig:
#                                             Desig1=Desig[0].designation_code
#                                             if m1.Marked_Officers.objects.all().last():
#                                                 marked_no_id=(m1.Marked_Officers.objects.all().last().marked_no)+1
#                                             else:
#                                                 marked_no_id = 1

                                            
#                                             if selected_action == 'info':
#                                                 if m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).exists():
#                                                     m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).update(update_status='T',created_on=datetime.now(),created_by=empno,marked_emp=DesignationCode,status_flag=0,action_type=1)
#                                                 else:   
#                                                     m1.Marked_Officers.objects.create(marked_emp=i,created_on=datetime.now(),created_by=empno, marked_no=marked_no_id,status_flag=0, item_no_id=item_id,marked_to_id=Desig1,action_type=1)
                                            
#                                             else:
#                                                 if tddate == '-1':
#                                                     if m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).exists():
#                                                         m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).update(update_status='T',created_on=datetime.now(),created_by=empno,marked_emp=DesignationCode,status_flag=0,action_type=0,priority=priority)
#                                                     else:   
#                                                         m1.Marked_Officers.objects.create(marked_emp=i,created_on=datetime.now(),created_by=empno, marked_no=marked_no_id,status_flag=0, item_no_id=item_id,marked_to_id=Desig1,action_type=0,priority=priority)
#                                                 else:
#                                                     targetd=tddate.split('/')
#                                                     targetd='20'+targetd[2].strip()+'-'+targetd[1].strip()+'-'+targetd[0].strip()
#                                                     tddate = targetd
#                                                     if m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).exists():
#                                                         m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).update(update_status='T',created_on=datetime.now(),created_by=empno,marked_emp=DesignationCode,status_flag=0,action_type=0,priority=priority,target_date=tddate)
#                                                     else:   
#                                                         m1.Marked_Officers.objects.create(marked_emp=i,created_on=datetime.now(),created_by=empno, marked_no=marked_no_id,status_flag=0, item_no_id=item_id,marked_to_id=Desig1,action_type=0,priority=priority,target_date=tddate)
#                                                     m1.Item_details.objects.filter(item_no=item_id).update(target_date=tddate)
                                    
#                                     markOfficerPrev1 = [x for x in markOfficerPrev if x not in markeofficer]
#                                     if markOfficerPrev1 != ['']:
#                                         for i in markOfficerPrev1:
#                                             m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=i).update(update_status='F')
                                    
#                                     markOfficerPrev = [x for x in markeofficer if x not in markOfficerPrev]
#                                     if markOfficerPrev != ['']:
#                                         for i in markOfficerPrev:
#                                             Desig=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i)
#                                             if Desig:
#                                                 Desig1=Desig[0].designation_code
#                                                 if m1.Marked_Officers.objects.all().last():
#                                                     marked_no_id=(m1.Marked_Officers.objects.all().last().marked_no)+1
#                                                 else:
#                                                     marked_no_id = 1

#                                                 if m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).exists():
#                                                     m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).update(update_status='T',created_on=datetime.now(),created_by=empno,marked_emp=i,status_flag=0)
#                                                 else:
#                                                     m1.Marked_Officers.objects.create(created_on=datetime.now(),created_by=empno,marked_emp=i,marked_no=marked_no_id,status_flag=0,item_no_id=item_id,marked_to_id=Desig1)


#                                 elif markof:
#                                     print(markof)
#                                     for i in markeofficer:
#                                         print(i)
#                                         Desig=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i)
#                                         if Desig:
#                                             Desig1=Desig[0].designation_code
#                                             if m1.Marked_Officers.objects.all().last():
#                                                 marked_no_id=(m1.Marked_Officers.objects.all().last().marked_no)+1
#                                             else:
#                                                 marked_no_id = 1

#                                             if m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).exists():
#                                                 m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).update(update_status='T',created_on=datetime.now(),created_by=empno,marked_emp=i,status_flag=0)
#                                             else:
#                                                 m1.Marked_Officers.objects.create(created_on=datetime.now(),created_by=empno,marked_emp=i,marked_no=marked_no_id,status_flag=0,item_no_id=item_id,marked_to_id=Desig1)
#                                         else:
#                                             messages.info(request, 'Employ Desig not Match in Designation Master')
#                                 else:
#                                     if m1.Marked_Officers.objects.all().last():
#                                         marked_no_id=(m1.Marked_Officers.objects.all().last().marked_no)+1
#                                     else:
#                                         marked_no_id = 1
#                                     m1.Marked_Officers.objects.create(created_on=datetime.now(),created_by=empno,marked_no=marked_no_id,status_flag=0,item_no_id=item_id)


#                         elif len(s) == 2:
#                             ob = 'observation'+y
#                             # trz = 'targetdate'+y
#                             officm = 'markeofficer'+y
#                             # chk = 'check'+y
#                             observation = finalval[f][ob]
#                             # targetd = finalval[f][trz]
#                             markof = finalval[f][officm]
#                             # checkbox = finalval[f][chk]
#                             # act_type = 'type' + y
#                             # typeofaction=finalval[f][act_type]
#                             # if typeofaction=='info':
#                             #     act_flag=1
#                             # else:
#                             #     act_flag=0

#                             # if checkbox == '1':
#                             #     checkbox = 1
#                             # elif checkbox== '0':
#                             #     checkbox = 0


#                             markeofficer = markof.split(',')
                        
#                             # if targetd:
#                             #     targetd=targetd.split('/')
#                             #     targetd='20'+targetd[2].strip()+'-'+targetd[1].strip()+'-'+targetd[0].strip()
#                             #     targetdate = targetd
#                             # else:
#                             #     targetdate = None
#                             tbl_data = finalval[f][y]

#                             # rem='remarksmarkeofficer'+y
#                             # remarks=finalval[f][rem]
#                             # if m1.Item_details.objects.filter(inspection_no=inspection_id, des_id=y,  type='SH').exists():
#                             #     m1.Item_details.objects.filter(inspection_no=inspection_id, des_id=y,  type='SH').update(sl_no=counters,del_flag=0,tbl_data=tbl_data,observation=observation,priority=checkbox, status_flag=0,created_by=empno,created_on=datetime.now(), target_date=targetdate,action_type=act_flag,update_status='T',markofcRemarks=remarks)
#                             #     item_id=m1.Item_details.objects.filter(inspection_no=inspection_id, des_id=y,  type='SH').all().last().item_no
#                             # else:
#                             #     m1.Item_details.objects.create(sl_no=counters,tbl_data=tbl_data,observation=observation,priority=checkbox, status_flag=0,created_by=empno,created_on=datetime.now(), inspection_no_id=inspection_id, des_id=y, target_date=targetdate, type='SH', action_type=act_flag,markofcRemarks=remarks)
                        
#                             #     item_id=m1.Item_details.objects.all().last().item_no
#                             ity='item_type'+y
#                             item_type=finalval[f][ity]
#                             if m1.Item_details.objects.filter(inspection_no=inspection_id, des_id=y,  type='SH').exists():
#                                 #print("update")
#                                 # m1.Item_details.objects.filter(inspection_no=inspection_id, des_id=y,  type='SH').update(sl_no=counters,link_image=None,del_flag=0,tbl_data=tbl_data,observation=observation,priority=checkbox, status_flag=1,created_by=empno,created_on=datetime.now(), target_date=targetdate,action_type=act_flag,update_status='T',markofcRemarks=remarks)
#                                 m1.Item_details.objects.filter(inspection_no=inspection_id, des_id=y,  type='SH').update(sl_no=counters,link_image=None,del_flag=0,tbl_data=tbl_data,observation=observation, status_flag=0,created_by=empno,created_on=datetime.now(), update_status='T',location_table=sec_type,location_code=sec_id,location_val = sec_name,item_type=item_type,hqid=zone_name,divid=div_name)

#                                 item_id=m1.Item_details.objects.filter(inspection_no=inspection_id, des_id=y,  type='SH').all().last().item_no
#                             else:
#                                 # m1.Item_details.objects.create(sl_no=counters,tbl_data=tbl_data,observation=observation,priority=checkbox, status_flag=1,inspection_no_id=inspection_id, des_id=y, target_date=targetdate, type='SH', action_type=act_flag,created_by=empno,created_on=datetime.now(),markofcRemarks=remarks)
#                                 m1.Item_details.objects.create(sl_no=counters,inspection_no_id=inspection_id,link_image=None,del_flag=0,tbl_data=tbl_data,observation=observation, des_id=y, type='SH',status_flag=0,created_by=empno,created_on=datetime.now(), update_status='T',location_table=sec_type,location_code=sec_id,location_val = sec_name,item_type=item_type,hqid=zone_name,divid=div_name)
#                                 item_id=m1.Item_details.objects.all().last().item_no

#                             infom= 'markeofcinfo'+y
#                             infom = finalval[f][infom]
#                             #print(infom)
#                             if len(infom) >0:
#                                 officerinfo=json.loads(infom)
#                                 #print(officerinfo)
#                             else:
#                                 officerinfo=[]
#                             # officerinfo = ((infom.strip('[')).strip(']'))
#                             #print(officerinfo)
#                             markOfficerPrev = []
#                             if len(officerinfo):
#                                 for i in range(len(officerinfo)):
#                                     DesignationCode=officerinfo[i]['DesignationCode']
#                                     markOfficerPrev.append(str(DesignationCode))
#                                     selected_action=officerinfo[i]['selected_action']
#                                     priority=officerinfo[i]['priority']
#                                     tddate=officerinfo[i]['tddate']
#                                     m1.Item_details.objects.filter(item_no=item_id).update(priority=priority)
#                                     Desig=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=DesignationCode)
#                                     if Desig:
#                                         Desig1=Desig[0].designation_code
#                                         if m1.Marked_Officers.objects.all().last():
#                                             marked_no_id=(m1.Marked_Officers.objects.all().last().marked_no)+1
#                                         else:
#                                             marked_no_id = 1

                                        
#                                         if selected_action == 'info':
#                                             if m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).exists():
#                                                 m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).update(update_status='T',created_on=datetime.now(),created_by=empno,marked_emp=DesignationCode,status_flag=0,action_type=1)
#                                             else:   
#                                                 m1.Marked_Officers.objects.create(marked_emp=i,created_on=datetime.now(),created_by=empno, marked_no=marked_no_id,status_flag=0, item_no_id=item_id,marked_to_id=Desig1,action_type=1)
                                        
#                                         else:
#                                             if tddate == '-1':
#                                                 if m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).exists():
#                                                     m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).update(update_status='T',created_on=datetime.now(),created_by=empno,marked_emp=DesignationCode,status_flag=0,action_type=0,priority=priority)
#                                                 else:   
#                                                     m1.Marked_Officers.objects.create(marked_emp=i,created_on=datetime.now(),created_by=empno, marked_no=marked_no_id,status_flag=0, item_no_id=item_id,marked_to_id=Desig1,action_type=0,priority=priority)
#                                             else:
#                                                 targetd=tddate.split('/')
#                                                 targetd='20'+targetd[2].strip()+'-'+targetd[1].strip()+'-'+targetd[0].strip()
#                                                 tddate = targetd
#                                                 if m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).exists():
#                                                     m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).update(update_status='T',created_on=datetime.now(),created_by=empno,marked_emp=DesignationCode,status_flag=0,action_type=0,priority=priority,target_date=tddate)
#                                                 else:   
#                                                     m1.Marked_Officers.objects.create(marked_emp=i,created_on=datetime.now(),created_by=empno, marked_no=marked_no_id,status_flag=0, item_no_id=item_id,marked_to_id=Desig1,action_type=0,priority=priority,target_date=tddate)
#                                                 m1.Item_details.objects.filter(item_no=item_id).update(target_date=tddate)
#                                 markOfficerPrev1 = [x for x in markOfficerPrev if x not in markeofficer]
#                                 if markOfficerPrev1 != ['']:
#                                     for i in markOfficerPrev1:
#                                         m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=i).update(update_status='F')
#                                 markOfficerPrev = [x for x in markeofficer if x not in markOfficerPrev]
#                                 if markOfficerPrev != ['']:
#                                     for i in markOfficerPrev:
#                                         Desig=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i)
#                                         if Desig:
#                                             Desig1=Desig[0].designation_code
#                                             if m1.Marked_Officers.objects.all().last():
#                                                 marked_no_id=(m1.Marked_Officers.objects.all().last().marked_no)+1
#                                             else:
#                                                 marked_no_id = 1

#                                             if m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).exists():
#                                                 m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).update(update_status='T',created_on=datetime.now(),created_by=empno,marked_emp=i,status_flag=0)
#                                             else:
#                                                 m1.Marked_Officers.objects.create(created_on=datetime.now(),created_by=empno,marked_emp=i,marked_no=marked_no_id,status_flag=0,item_no_id=item_id,marked_to_id=Desig1)            
#                             elif markof:
#                                 for i in markeofficer:
#                                     Desig=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i)
#                                     if Desig:
#                                         Desig1=Desig[0].designation_code


#                                         if m1.Marked_Officers.objects.all().last():
#                                             marked_no_id=(m1.Marked_Officers.objects.all().last().marked_no)+1
#                                         else:
#                                             marked_no_id = 1
#                                         if m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).exists():
#                                             m1.Marked_Officers.objects.filter(item_no=item_id,marked_to=Desig1).update(created_on=datetime.now(),created_by=empno,marked_emp=i, status_flag=0,update_status='T')

#                                         else:
#                                             m1.Marked_Officers.objects.create(created_on=datetime.now(),created_by=empno,marked_no=marked_no_id,marked_emp=i, status_flag=0,item_no_id=item_id,marked_to_id=Desig1)
#                                     else:
#                                         print('error')
#                             else:
#                                 markeofficer=''
                    
#                         else:
#                             subdes = 'subdes'+y
#                             subdes1 = finalval[f][subdes]
#                             tbl_data = finalval[f][y]
#                             # for action type
#                             # act_type = 'type' + y
#                             # typeofaction=finalval[f][act_type]
#                             # if typeofaction=='info':
#                             #     act_flag=1
#                             # else:
#                             #     act_flag=0
                            
#                             if m1.Item_details.objects.filter(type='SSH',des_id=y, inspection_no=inspection_id).exists():
#                                 m1.Item_details.objects.filter(type='SSH',des_id=y, inspection_no=inspection_id).update(sl_no=counters,del_flag=0,tbl_data=tbl_data, item_subtitle=subdes1,status_flag=0,created_by=empno,created_on=datetime.now(),update_status='T',location_table=sec_type,location_code=sec_id,location_val = sec_name,hqid=zone_name,divid=div_name)
#                             else:
#                                 m1.Item_details.objects.create(sl_no=counters,tbl_data=tbl_data, item_subtitle=subdes1,status_flag=0,created_by=empno,created_on=datetime.now(), type='SSH',des_id=y, inspection_no_id=inspection_id,location_table=sec_type,location_code=sec_id,location_val = sec_name,hqid=zone_name,divid=div_name)
#                         counters+=1
                
#             m1.Item_details.objects.filter(inspection_no=inspection_id,update_status ='F').delete()
#             m1.Marked_Officers.objects.filter(item_no__in=m1.Item_details.objects.filter(inspection_no=inspection_id).values('item_no'),update_status ='F').delete()
#             m1.Marked_Officers.objects.filter(item_no__in=m1.Item_details.objects.filter(inspection_no=inspection_id).values('item_no'),marked_to__isnull=True).delete()
            
#             for i in del_array:
#                 m1.Item_details.objects.filter(inspection_no=inspection_id,des_id=i).update(del_flag=1)
#             m1.Item_details.objects.filter(inspection_no=inspection_id).update(link_image=None)
#             for i in range(len(final_img)):
#                 ref = final_img[i][0]
#                 path = (final_img[i][1])[1:]
#                 data = list(m1.Item_details.objects.filter(inspection_no=inspection_id,des_id=ref).values('link_image'))
#                 if len(data) > 0:
#                     data = data[0]['link_image']
#                     if data != None:
#                         path = data +'@#@'+path
#                 m1.Item_details.objects.filter(inspection_no=inspection_id,des_id=ref).update(link_image = path)
#             for i in range(len(temp_para_array_marked)):
#                 des_id = temp_para_array_marked[i]['id']
#                 markeofficer = temp_para_array_marked[i]['officer'].split(',')
#                 if len(markeofficer) > 0:
#                     item_id = list(m1.Item_details.objects.filter(inspection_no=inspection_id,des_id=des_id).values('item_no'))
#                     if len(item_id) >0:
#                         item_id = item_id[0]['item_no']
#                     else:
#                         continue
#                     if not m1.Marked_Officers.objects.filter(item_no = item_id).exists():
#                         for i in markeofficer:
#                             Desig=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i,)
#                             if Desig:
#                                 Desig1=Desig[0].designation_code
#                                 if m1.Marked_Officers.objects.all().last():
#                                     marked_no_id=(m1.Marked_Officers.objects.all().last().marked_no)+1
#                                 else:
#                                     marked_no_id = 1
#                                 m1.Marked_Officers.objects.create(created_on=datetime.now(),created_by=empno,marked_no=marked_no_id,marked_emp=i, status_flag=0,item_no_id=item_id,marked_to_id=Desig1)
#             m1.Item_details.objects.filter(inspection_no=inspection_id,link_image='').update(link_image=None)
#             return JsonResponse({"status": 1,'inspection_no': inspection_id})
#         return JsonResponse({"success":False}, status=400)
#     # except Exception as e:
#     #     try:
#     #         m1.error_Table.objects.create(fun_name="save_draft_data",user_id=request.user,err_details=str(e))
#     #     except:
#     #         print("Internal Error!!!")
#     #     return render(request, "errorspage.html", {})






def autoFetchLocation(request):
    if request.method == 'GET' and request.is_ajax():
        last_val = request.GET.get('last_val')
        if last_val is None:
            last_val = ''

        stype = json.loads(request.GET.get('stype'))
        rly_zone = json.loads(request.GET.get('rly_zone'))
        division_id = json.loads(request.GET.get('division_id'))
        list1 = []
        if len(division_id):
            rly_list = models.railwayLocationMaster.objects.filter(Q(location_code__in=division_id)).values_list('rly_unit_code', flat=True)
        else:
            rly_list = models.railwayLocationMaster.objects.filter(Q(location_code__in=rly_zone)|Q(location_code__in=division_id)).values_list('rly_unit_code', flat=True)
       
       
        for i in stype:
           
            if i == 'RRM':
                obj = models.station_master.objects.filter(Q(station_name__istartswith=last_val)|Q(stnshortcode__istartswith=last_val),(Q(rly_id_id_id__in=rly_list)| Q(div_id_id_id__in=rly_list)), station_name__isnull=False).values('station_name', 'stnshortcode','div_id_id__location_code','rly_id_id__location_code').distinct('station_name').order_by('station_name')

                for j in obj:
                    loc_stm = 'RRM-'+j['station_name'].strip()+'/'+j['div_id_id__location_code']+'/'+j['rly_id_id__location_code']
                    list1.append({'city': loc_stm, 'table_from':'RRM', 'loc_code': j['stnshortcode']})
            if i == 'SEM':
                obj = models.section_master.objects.filter(Q(section_name__istartswith=last_val)|Q(section_code__istartswith=last_val),(Q(rly_id_id_id__in=rly_list)| Q(div_id_id_id__in=rly_list)), section_name__isnull=False).values('section_name', 'secid','div_id_id__location_code','rly_id_id__location_code').distinct('section_name').order_by('section_name')
                for j in obj:
                    loc_stm = 'SEM-'+j['section_name'].strip()+'/'+j['div_id_id__location_code']+'/'+j['rly_id_id__location_code']
                    list1.append({'city': loc_stm, 'table_from':'SEM', 'loc_code': j['secid']})
            if i == 'STM':
                obj = models.station_master.objects.filter(Q(station_name__istartswith=last_val)|Q(stnshortcode__istartswith=last_val),(Q(rly_id_id_id__in=rly_list)| Q(div_id_id_id__in=rly_list)), station_name__isnull=False).values('station_name', 'stnshortcode','div_id_id__location_code','rly_id_id__location_code').distinct('station_name').order_by('station_name')
                for j in obj:
                    loc_stm = 'STM-'+j['station_name'].strip()+'/'+j['div_id_id__location_code']+'/'+j['rly_id_id__location_code']
                    list1.append({'city': loc_stm, 'table_from':'STM', 'loc_code': j['stnshortcode']})
            if i == 'ORL':
                obj = models.railwayLocationMaster.objects.filter(Q(location_description__istartswith=last_val) | Q(location_code__istartswith=last_val), rly_unit_code__in=rly_list , location_type_desc__in=['Coach Depot','Wagon Depot']).values('location_description','location_code','rly_unit_code').distinct('location_description').order_by('-location_description')
                for j in obj:
                    loc_orl = j['location_description'].strip()
                    list1.append({'city': loc_orl, 'table_from':'ORL', 'loc_code': j['rly_unit_code']})
           
            if i == 'SOP':
                rly_list1 = [str(s) for s in rly_list]
               
                obj = models.Shop_section.objects.filter(Q(section_desc__istartswith=last_val)|Q(shop_code__istartswith=last_val), rly_unit_code__in=rly_list1, section_desc__isnull=False).values('section_desc', 'section_code', 'shop_code','rly_unit_code').distinct('section_desc').order_by('-section_desc')
                for j in obj:
                    loc_sop = 'SOP-'+j['section_desc'].strip()+'/'+j['rly_unit_code']
                    list1.append({'city': loc_sop, 'table_from':'SOP', 'loc_code': j['section_code']})
           
            if i == 'WOS':
                rly_list1 = [str(s) for s in rly_list]
                obj = models.railwayLocationMaster.objects.filter(Q(location_description__istartswith=last_val) | Q(location_code__istartswith=last_val), parent_rly_unit_code__in=rly_list1 , location_type='WS').values('location_description','location_code','rly_unit_code').distinct('location_code').order_by('-location_code')
                for j in obj:
                    loc_orl = j['location_description'].strip()+j['location_code']
                    list1.append({'city': loc_orl, 'table_from':'WOS', 'loc_code': j['rly_unit_code']})


            if i == 'DLS':
                if len(division_id)==0:
                    rly_list1 = [str(s) for s in rly_list]
                    rly_list = models.railwayLocationMaster.objects.filter(parent_rly_unit_code__in=rly_list1, location_type ='DIV').values_list('rly_unit_code', flat=True)
                rly_list1 = [str(s) for s in rly_list]


                obj = models.railwayLocationMaster.objects.filter(Q(location_description__istartswith=last_val) | Q(location_code__istartswith=last_val), parent_rly_unit_code__in=rly_list1 , location_type='DS').values('location_description','location_code','rly_unit_code','parent_rly_unit_code').distinct('location_code').order_by('-location_code')
                for j in obj:
                    loc_orl = 'DLS-'+j['location_code']
                    prnt=list(models.railwayLocationMaster.objects.filter(rly_unit_code=j['parent_rly_unit_code']).values('location_code','parent_rly_unit_code'))[0]
                    print(prnt)
                    if prnt['parent_rly_unit_code']!='RB':
                        rlyss=list(models.railwayLocationMaster.objects.filter(rly_unit_code=prnt['parent_rly_unit_code'], location_type='ZR').values('location_code','parent_rly_unit_code'))
                        print(rlyss)
                    
                    
                    if len(prnt):
                        loc_orl+='/'+prnt['location_code']
                    if len(rlyss):
                        loc_orl+='/'+rlyss[0]['location_code']
                    list1.append({'city': loc_orl, 'table_from':'DLS', 'loc_code': j['rly_unit_code']})
           
            if i == 'ELS':
                if len(division_id)==0:
                    rly_list1 = [str(s) for s in rly_list]
                    rly_list = models.railwayLocationMaster.objects.filter(parent_rly_unit_code__in=rly_list1, location_type ='DIV').values_list('rly_unit_code', flat=True)
                rly_list1 = [str(s) for s in rly_list]


                obj = models.railwayLocationMaster.objects.filter(Q(location_description__istartswith=last_val) | Q(location_code__istartswith=last_val), parent_rly_unit_code__in=rly_list1 , location_type='ES').values('location_description','location_code','rly_unit_code','parent_rly_unit_code').distinct('location_code').order_by('-location_code')
                for j in obj:
                    loc_orl = 'ELS-'+j['location_code']
                    prnt=list(models.railwayLocationMaster.objects.filter(rly_unit_code=j['parent_rly_unit_code']).values('location_code','parent_rly_unit_code'))[0]
                    if prnt['parent_rly_unit_code']!='RB':
                        rlyss=list(models.railwayLocationMaster.objects.filter(rly_unit_code=prnt['parent_rly_unit_code'], location_type='ZR').values('location_code','parent_rly_unit_code'))
                    
                    
                    if len(prnt):
                        loc_orl+='/'+prnt['location_code']
                    if len(rlyss):
                        loc_orl+='/'+rlyss[0]['location_code']
                    list1.append({'city': loc_orl, 'table_from':'ELS', 'loc_code': j['rly_unit_code']})
           
            if i == 'COD':
                rly_list1 = [str(s) for s in rly_list]
                obj = models.railwayLocationMaster.objects.filter((Q(location_description__istartswith=last_val) | Q(location_code__istartswith=last_val)), parent_rly_unit_code__in=rly_list1 , location_type='CD').values('location_description','location_code','rly_unit_code','parent_rly_unit_code').distinct('location_description').order_by('-location_description')
                for j in obj:
                    loc_orl ='CD-'+ j['location_description'].strip()
                    prnt=list(models.railwayLocationMaster.objects.filter(rly_unit_code=j['parent_rly_unit_code']).values('location_code','parent_rly_unit_code'))[0]
                    if prnt['parent_rly_unit_code']!='RB':
                        rlyss=list(models.railwayLocationMaster.objects.filter(rly_unit_code=prnt['parent_rly_unit_code'], location_type='ZR').values('location_code','parent_rly_unit_code'))
                    
                    
                    if len(prnt):
                        loc_orl+='/'+prnt['location_code']
                    if len(rlyss):
                        loc_orl+='/'+rlyss[0]['location_code']
                    list1.append({'city': loc_orl, 'table_from':'COD', 'loc_code': j['rly_unit_code']})
           
            if i == 'WAD':
                rly_list1 = [str(s) for s in rly_list]
                obj = models.railwayLocationMaster.objects.filter(Q(location_description__istartswith=last_val) | Q(location_code__istartswith=last_val), parent_rly_unit_code__in=rly_list1 , location_type='WD').values('location_description','location_code','rly_unit_code','parent_rly_unit_code').distinct('location_description').order_by('-location_description')
                for j in obj:
                    loc_orl = 'WAD-'+j['location_code']
                    prnt=list(models.railwayLocationMaster.objects.filter(rly_unit_code=j['parent_rly_unit_code']).values('location_code','parent_rly_unit_code'))[0]
                    if prnt['parent_rly_unit_code']!='RB':
                        rlyss=list(models.railwayLocationMaster.objects.filter(rly_unit_code=prnt['parent_rly_unit_code'], location_type='ZR').values('location_code','parent_rly_unit_code'))
                    
                    
                    if len(prnt):
                        loc_orl+='/'+prnt['location_code']
                    if len(rlyss):
                        loc_orl+='/'+rlyss[0]['location_code']
                    list1.append({'city': loc_orl, 'table_from':'WAD', 'loc_code': j['rly_unit_code']})
            if i == 'CTI':
                rly_list1 = [str(s) for s in rly_list]
                obj = models.railwayLocationMaster.objects.filter(Q(location_description__istartswith=last_val) | Q(location_code__istartswith=last_val), parent_rly_unit_code__in=rly_list1 , location_type='RI').values('location_description','location_code','rly_unit_code','parent_rly_unit_code').distinct('location_description').order_by('-location_description')
                for j in obj:
                    loc_orl = 'CTI-'+j['location_code']
                    prnt=list(models.railwayLocationMaster.objects.filter(rly_unit_code=j['parent_rly_unit_code']).values('location_code','parent_rly_unit_code'))[0]
                    if prnt['parent_rly_unit_code']!='RB':
                        rlyss=list(models.railwayLocationMaster.objects.filter(rly_unit_code=prnt['parent_rly_unit_code'], location_type='ZR').values('location_code','parent_rly_unit_code'))
                    
                    
                    if len(prnt):
                        loc_orl+='/'+prnt['location_code']
                    if len(rlyss):
                        loc_orl+='/'+rlyss[0]['location_code']
                    list1.append({'city': loc_orl, 'table_from':'CTI', 'loc_code': j['rly_unit_code']})
           
            if i == 'TRN':
                rly_list1=[]
                for rs in rly_zone:
                    rly_list1.append(rs)
                for rs in division_id:
                    rly_list1.append(rs)
               
                for r in rly_list1:
                    obj = models.trainMaster.objects.filter((Q(train_name__istartswith=last_val) | Q(train_no__istartswith=last_val)), (Q(passing_rly__icontains=r) | Q(passing_division__icontains=r)) ).values('train_name','train_no','org_rly_id','tnid').distinct('tnid').order_by('-tnid')
                    for j in obj:
                        loc_orl = 'TRN-'+j['train_no'].strip()+' - '+j['train_name'].strip()
                        list1.append({'city': loc_orl, 'table_from':'TRN', 'loc_code': j['tnid']})
           
            if i == 'HOS':
                rly_list1=[]
                div_list1=[]
                for rs in rly_zone:
                    rly_list1.append(rs)
                for rs in division_id:
                    div_list1.append(rs)
                if len(div_list1):
                    for d in div_list1:
                        for r in rly_list1:
                            obj = models.iem_hospmstr.objects.filter((Q(iavhccfullname__istartswith=last_val) | Q(iavhccfullname__istartswith=last_val)), iavhcczonecode=r , iavhccdvsncode=d).values('iavhccfullname','iavhcccode','iairlyunitcode','iavhccdvsncode','iavhcczonecode').distinct('iavhccfullname').order_by('-iavhccfullname')
                            for j in obj:
                                loc_orl = "HOS-"+j['iavhccfullname'].strip()+'/'+j['iavhccdvsncode']+'/'+j['iavhcczonecode']
                                list1.append({'city': loc_orl, 'table_from':'HOS', 'loc_code': j['iairlyunitcode']})
                else:
                    for r in rly_list1:
                            obj = models.iem_hospmstr.objects.filter((Q(iavhccfullname__istartswith=last_val) | Q(iavhccfullname__istartswith=last_val)), iavhcczonecode=r).values('iavhccfullname','iavhcccode','iairlyunitcode','iavhccdvsncode','iavhcczonecode').distinct('iavhccfullname').order_by('-iavhccfullname')
                            for j in obj:
                                loc_orl = "HOS-"+j['iavhccfullname'].strip()+'/'+j['iavhccdvsncode']+'/'+j['iavhcczonecode']
                                list1.append({'city': loc_orl, 'table_from':'HOS', 'loc_code': j['iairlyunitcode']})
        if last_val == '':
            list1 = list1
        return JsonResponse(list1, safe=False)
    return JsonResponse({'success': False})

def setChooseLocationData(request):
    if request.method == 'POST' and request.is_ajax():
        location_array = [{'type_code':'RRM', 'type': 'Running Room'},
                        {'type_code': 'SEM', 'type': 'Section'},
                        {'type_code': 'STM', 'type': 'Station'},
                        # {'type_code':'SOP' , 'type': 'Shop'},
                        # {'type_code':'WOS' , 'type': 'Work Shop'},
                        {'type_code':'DLS' , 'type': 'Diesel Loco Shed'},
                        {'type_code':'ELS' , 'type': 'Electric Loco Shed'},
                        {'type_code':'COD' , 'type': 'Coaching Depot'},
                        {'type_code':'WAD' , 'type': 'Wagon Depot'},
                        { 'type_code': 'CTI', 'type': 'Training Institute'},
                        { 'type_code': 'TRN', 'type': 'Train'},
                        { 'type_code': 'HOS', 'type': 'Hospital'},
                        { 'type_code': 'ORL', 'type': 'Other Rly Unit'},
                        ]
        typ = request.POST.get('typ')
        if typ == 'allLocation':
            stype = [x['type_code'] for x in location_array]
            rly_zone = json.loads(request.POST.get('rly_zone'))
            division_id = json.loads(request.POST.get('division_id'))
            
            list1 = []
            if len(division_id):
                rly_list = models.railwayLocationMaster.objects.filter(Q(location_code__in=division_id)).values_list('rly_unit_code', flat=True)
            else:
                rly_list = models.railwayLocationMaster.objects.filter(Q(location_code__in=rly_zone)|Q(location_code__in=division_id)).values_list('rly_unit_code', flat=True)
            
            actualData = []
            for i in stype:
                if i == 'RRM':
                    obj = models.station_master.objects.filter((Q(rly_id_id_id__in=rly_list)| Q(div_id_id_id__in=rly_list)), station_name__isnull=False).values('station_name', 'stnshortcode','div_id_id__location_code','rly_id_id__location_code').distinct('station_name').order_by('station_name')
                    l2=[]
                    for j in obj:
                        loc_stm = 'RRM-'+j['station_name'].strip()+'/'+j['div_id_id__location_code']+'/'+j['rly_id_id__location_code']
                        list1.append({'city': loc_stm, 'table_from':'RRM', 'loc_code': j['stnshortcode']})
                        l2.append({'city': loc_stm, 'table_from':'RRM', 'loc_code': j['stnshortcode']})
                    actualData.append({'id':'RRM','data':l2})
                if i == 'SEM':
                    obj = models.section_master.objects.filter((Q(rly_id_id_id__in=rly_list)| Q(div_id_id_id__in=rly_list)), section_name__isnull=False).values('section_name', 'secid','div_id_id__location_code','rly_id_id__location_code').distinct('section_name').order_by('section_name')
                    l2=[]
                    for j in obj:
                        loc_stm = j['section_name'].strip()+'/'+j['div_id_id__location_code']+'/'+j['rly_id_id__location_code']
                        list1.append({'city': loc_stm, 'table_from':'SEM', 'loc_code': j['secid']})
                        l2.append({'city': loc_stm, 'table_from':'SEM', 'loc_code': j['secid']})
                    actualData.append({'id':'SEM','data':l2})
                if i == 'STM':
                    obj = models.station_master.objects.filter((Q(rly_id_id_id__in=rly_list)| Q(div_id_id_id__in=rly_list)), station_name__isnull=False).values('station_name', 'stnshortcode','div_id_id__location_code','rly_id_id__location_code').distinct('station_name').order_by('station_name')
                    l2=[]
                    for j in obj:
                        loc_stm = 'STN-'+j['station_name'].strip()+'/'+j['div_id_id__location_code']+'/'+j['rly_id_id__location_code']
                        list1.append({'city': loc_stm, 'table_from':'STM', 'loc_code': j['stnshortcode']})
                        l2.append({'city': loc_stm, 'table_from':'STM', 'loc_code': j['stnshortcode']})
                    actualData.append({'id':'STM','data':l2})
                if i == 'ORL':
                    
                    # obj = models.railwayLocationMaster.objects.filter( rly_unit_code__in=rly_list , location_type_desc__in=['Coach Depot','Wagon Depot']).values('location_description','location_code','rly_unit_code').distinct('location_description').order_by('-location_description')
                    # l2=[]
                    # for j in obj:
                    #     loc_orl = j['location_description'].strip()
                    #     list1.append({'city': loc_orl, 'table_from':'ORL', 'loc_code': j['rly_unit_code']})
                    #     l2.append({'city': loc_orl, 'table_from':'ORL', 'loc_code': j['rly_unit_code']})
                    actualData.append({'id':'ORL','data':[]})
            
                if i == 'SOP':
                    rly_list1 = [str(s) for s in rly_list]
                
                    obj = models.Shop_section.objects.filter(rly_unit_code__in=rly_list1, section_desc__isnull=False).values('section_desc', 'section_code', 'shop_code','rly_unit_code').distinct('section_desc').order_by('-section_desc')
                    l2=[]
                    for j in obj:
                        loc_sop = j['section_desc'].strip()+'/'+j['rly_unit_code']
                        list1.append({'city': loc_sop, 'table_from':'SOP', 'loc_code': j['section_code']})
                        l2.append({'city': loc_sop, 'table_from':'SOP', 'loc_code': j['section_code']})
                    actualData.append({'id':'SOP','data':l2})
            
                if i == 'WOS':
                    rly_list1 = [str(s) for s in rly_list]
                    obj = models.railwayLocationMaster.objects.filter(parent_rly_unit_code__in=rly_list1 , location_type='WS').values('location_description','location_code','rly_unit_code').distinct('location_code').order_by('-location_code')
                    l2=[]
                    for j in obj:
                        loc_orl = j['location_description'].strip()+j['location_code']
                        list1.append({'city': loc_orl, 'table_from':'WOS', 'loc_code': j['rly_unit_code']})
                        l2.append({'city': loc_orl, 'table_from':'WOS', 'loc_code': j['rly_unit_code']})
                    actualData.append({'id':'WOS','data':l2})


                if i == 'DLS':
                    rly_list2 = []
                    if len(division_id)==0:
                        rly_list1 = [str(s) for s in rly_list]
                        rly_list2 = models.railwayLocationMaster.objects.filter(parent_rly_unit_code__in=rly_list1, location_type ='DIV').values_list('rly_unit_code', flat=True)
                        rly_list1 = [str(s) for s in rly_list2]
                    else: 
                        rly_list2 = models.railwayLocationMaster.objects.filter(location_code__in=division_id, location_type ='DIV').values_list('rly_unit_code', flat=True)
                        rly_list1 = [str(s) for s in rly_list2]
                    


                    obj = models.railwayLocationMaster.objects.filter( parent_rly_unit_code__in=rly_list1 , location_type='DS').values('location_description','location_code','rly_unit_code','parent_rly_unit_code').distinct('location_code').order_by('-location_code')
                    l2=[]
                    for j in obj:
                        loc_orl = j['location_code']
                        prnt=list(models.railwayLocationMaster.objects.filter(rly_unit_code=j['parent_rly_unit_code']).values('location_code','parent_rly_unit_code'))[0]
                        
                        if prnt['parent_rly_unit_code']!='RB':
                            rlyss=list(models.railwayLocationMaster.objects.filter(rly_unit_code=prnt['parent_rly_unit_code'], location_type='ZR').values('location_code','parent_rly_unit_code'))
                            
                        
                        
                        if len(prnt):
                            loc_orl+='/'+prnt['location_code']
                        if len(rlyss):
                            loc_orl+='/'+rlyss[0]['location_code']
                        list1.append({'city': loc_orl, 'table_from':'DLS', 'loc_code': j['rly_unit_code']})
                        l2.append({'city': loc_orl, 'table_from':'DLS', 'loc_code': j['rly_unit_code']})
                    actualData.append({'id':'DLS','data':l2})
            
                if i == 'ELS':
                    rly_list2 = []
                    if len(division_id)==0:
                        rly_list1 = [str(s) for s in rly_list]
                        rly_list2 = models.railwayLocationMaster.objects.filter(parent_rly_unit_code__in=rly_list1, location_type ='DIV').values_list('rly_unit_code', flat=True)
                        rly_list1 = [str(s) for s in rly_list2]
                    else: 
                        rly_list2 = models.railwayLocationMaster.objects.filter(location_code__in=division_id, location_type ='DIV').values_list('rly_unit_code', flat=True)
                        rly_list1 = [str(s) for s in rly_list2]

                    obj = models.railwayLocationMaster.objects.filter(parent_rly_unit_code__in=rly_list1 , location_type='ES').values('location_description','location_code','rly_unit_code','parent_rly_unit_code').distinct('location_code').order_by('-location_code')
                    l2=[]
                    for j in obj:
                        loc_orl = j['location_code']
                        prnt=list(models.railwayLocationMaster.objects.filter(rly_unit_code=j['parent_rly_unit_code']).values('location_code','parent_rly_unit_code'))[0]
                        if prnt['parent_rly_unit_code']!='RB':
                            rlyss=list(models.railwayLocationMaster.objects.filter(rly_unit_code=prnt['parent_rly_unit_code'], location_type='ZR').values('location_code','parent_rly_unit_code'))
                        
                        
                        if len(prnt):
                            loc_orl+='/'+prnt['location_code']
                        if len(rlyss):
                            loc_orl+='/'+rlyss[0]['location_code']
                        list1.append({'city': loc_orl, 'table_from':'ELS', 'loc_code': j['rly_unit_code']})
                        l2.append({'city': loc_orl, 'table_from':'ELS', 'loc_code': j['rly_unit_code']})
                    actualData.append({'id':'ELS','data':l2})
            
                if i == 'COD':
                    rly_list2 = []
                    if len(division_id)==0:
                        rly_list1 = [str(s) for s in rly_list]
                        rly_list2 = models.railwayLocationMaster.objects.filter(parent_rly_unit_code__in=rly_list1, location_type ='DIV').values_list('rly_unit_code', flat=True)
                        rly_list1 = [str(s) for s in rly_list2]
                    else: 
                        rly_list2 = models.railwayLocationMaster.objects.filter(location_code__in=division_id, location_type ='DIV').values_list('rly_unit_code', flat=True)
                        rly_list1 = [str(s) for s in rly_list2]

                    obj = models.railwayLocationMaster.objects.filter( parent_rly_unit_code__in=rly_list1 , location_type='CD').values('location_description','location_code','rly_unit_code','parent_rly_unit_code').distinct('location_description').order_by('-location_description')
                    l2=[]
                    for j in obj:
                        loc_orl =j['location_code'].strip()
                        prnt=list(models.railwayLocationMaster.objects.filter(rly_unit_code=j['parent_rly_unit_code']).values('location_code','parent_rly_unit_code'))[0]
                        if prnt['parent_rly_unit_code']!='RB':
                            rlyss=list(models.railwayLocationMaster.objects.filter(rly_unit_code=prnt['parent_rly_unit_code'], location_type='ZR').values('location_code','parent_rly_unit_code'))
                        
                        if len(prnt):
                            loc_orl+='/'+prnt['location_code']
                        if len(rlyss):
                            loc_orl+='/'+rlyss[0]['location_code']
                        list1.append({'city': loc_orl, 'table_from':'COD', 'loc_code': j['rly_unit_code']})
                        l2.append({'city': loc_orl, 'table_from':'COD', 'loc_code': j['rly_unit_code']})
                    actualData.append({'id':'COD','data':l2})
            
                if i == 'WAD':
                    rly_list2 = []
                    if len(division_id)==0:
                        rly_list1 = [str(s) for s in rly_list]
                        rly_list2 = models.railwayLocationMaster.objects.filter(parent_rly_unit_code__in=rly_list1, location_type ='DIV').values_list('rly_unit_code', flat=True)
                        rly_list1 = [str(s) for s in rly_list2]
                    else: 
                        rly_list2 = models.railwayLocationMaster.objects.filter(location_code__in=division_id, location_type ='DIV').values_list('rly_unit_code', flat=True)
                        rly_list1 = [str(s) for s in rly_list2]
                    obj = models.railwayLocationMaster.objects.filter(parent_rly_unit_code__in=rly_list1 , location_type='WD').values('location_description','location_code','rly_unit_code','parent_rly_unit_code').distinct('location_description').order_by('-location_description')
                    l2=[]
                    for j in obj:
                        loc_orl = j['location_code']
                        prnt=list(models.railwayLocationMaster.objects.filter(rly_unit_code=j['parent_rly_unit_code']).values('location_code','parent_rly_unit_code'))[0]
                        if prnt['parent_rly_unit_code']!='RB':
                            rlyss=list(models.railwayLocationMaster.objects.filter(rly_unit_code=prnt['parent_rly_unit_code'], location_type='ZR').values('location_code','parent_rly_unit_code'))
                        
                        
                        if len(prnt):
                            loc_orl+='/'+prnt['location_code']
                        if len(rlyss):
                            loc_orl+='/'+rlyss[0]['location_code']
                        list1.append({'city': loc_orl, 'table_from':'WAD', 'loc_code': j['rly_unit_code']})
                        l2.append({'city': loc_orl, 'table_from':'WAD', 'loc_code': j['rly_unit_code']})
                    actualData.append({'id':'WAD','data':l2})
                if i == 'CTI':
                    rly_list1 = [str(s) for s in rly_list]
                    obj = models.railwayLocationMaster.objects.filter( parent_rly_unit_code__in=rly_list1 , location_type='RI').values('location_description','location_code','rly_unit_code','parent_rly_unit_code').distinct('location_description').order_by('-location_description')
                    l2=[]
                    for j in obj:
                        loc_orl =j['location_code']
                        prnt=list(models.railwayLocationMaster.objects.filter(rly_unit_code=j['parent_rly_unit_code']).values('location_code','parent_rly_unit_code'))[0]
                        if prnt['parent_rly_unit_code']!='RB':
                            rlyss=list(models.railwayLocationMaster.objects.filter(rly_unit_code=prnt['parent_rly_unit_code'], location_type='ZR').values('location_code','parent_rly_unit_code'))
                        
                        
                        if len(prnt):
                            loc_orl+='/'+prnt['location_code']
                        if len(rlyss):
                            loc_orl+='/'+rlyss[0]['location_code']
                        list1.append({'city': loc_orl, 'table_from':'CTI', 'loc_code': j['rly_unit_code']})
                        l2.append({'city': loc_orl, 'table_from':'CTI', 'loc_code': j['rly_unit_code']})
                    actualData.append({'id':'CTI','data':l2})
            
                if i == 'TRN':
                    actualData.append({'id':'TRN','data':[]})
            
                if i == 'HOS':
                    rly_list1=[]
                    div_list1=[]
                    for rs in rly_zone:
                        rly_list1.append(rs)
                    for rs in division_id:
                        div_list1.append(rs)
                    l2=[]
                    if len(div_list1):
                        for d in div_list1:
                            for r in rly_list1:
                                obj = models.iem_hospmstr.objects.filter( iavhcczonecode=r , iavhccdvsncode=d).values('iavhccfullname','iavhcccode','iairlyunitcode','iavhccdvsncode','iavhcczonecode').distinct('iavhccfullname').order_by('-iavhccfullname')
                                for j in obj:
                                    loc_orl = j['iavhccfullname'].strip()+'/'+j['iavhccdvsncode']+'/'+j['iavhcczonecode']
                                    list1.append({'city': loc_orl, 'table_from':'HOS', 'loc_code': j['iairlyunitcode']})
                                    l2.append({'city': loc_orl, 'table_from':'HOS', 'loc_code': j['iairlyunitcode']})
                        actualData.append({'id':'HOS','data':l2})
                    else:
                        for r in rly_list1:
                                obj = models.iem_hospmstr.objects.filter(iavhcczonecode=r).values('iavhccfullname','iavhcccode','iairlyunitcode','iavhccdvsncode','iavhcczonecode').distinct('iavhccfullname').order_by('-iavhccfullname')
                                for j in obj:
                                    loc_orl = j['iavhccfullname'].strip()+'/'+j['iavhccdvsncode']+'/'+j['iavhcczonecode']
                                    list1.append({'city': loc_orl, 'table_from':'HOS', 'loc_code': j['iairlyunitcode']})
                                    l2.append({'city': loc_orl, 'table_from':'HOS', 'loc_code': j['iairlyunitcode']})
                        actualData.append({'id':'HOS','data':l2})
            
            return JsonResponse(actualData, safe=False)
        elif typ == 'allDivision':
            rly = request.POST.get('rly_zone')
            list3=models.railwayLocationMaster.objects.filter(location_type_desc__in=['DIVISION','WORKSHOP'],parent_location_code=rly).values('location_code', 'location_type').order_by('location_code')
            list4=[]
            for i in list3:
                list4.append({'location_code':i['location_code'],'location_type':i['location_type']})
            
            return JsonResponse(list4, safe=False)
        elif typ == 'allTrain':
            rly_zone = request.POST.get('rly_zone')
            div_ws = request.POST.get('div_ws')
            list1 = []
            obj = models.trainMaster.objects.filter( (Q(passing_rly__icontains=rly_zone) | Q(passing_division__icontains=div_ws)) ).values('train_name','train_no','org_rly_id','tnid').distinct('tnid').order_by('-tnid')
            for j in obj:
                loc_orl = j['train_no'].strip()+' - '+j['train_name'].strip()
                list1.append({'city': loc_orl, 'table_from':'TRN', 'loc_code': j['tnid']})
            print(list1,rly_zone,div_ws)
            return JsonResponse(list1, safe=False)
    return JsonResponse({'success': False})

def generateTitle(request):
    if request.method == 'GET' and request.is_ajax():
        zone = json.loads(request.GET.get('zone'))
        division = json.loads(request.GET.get('division'))
        loca = json.loads(request.GET.get('loca'))
        locations=[]
        div=[]
        print(loca)
        if len(loca):
            for l in loca:
                temp={}
                loc_name=l.split('#')
                i=loc_name[1]
                place=loc_name[0].strip()
                p=place.split('/')
                
                try:
                    place=(p[0].split('-'))[1]
                except:
                    place=(p[0].split('-'))[0]
                temp['place']=place

                if i == 'RRM':
                    obj = models.station_master.objects.filter(station_name__icontains=place).values('div_id_id__location_code','rly_id_id__location_code')
                    temp['type']='Running Room'
                    loc_div = obj[0]['div_id_id__location_code']
                    loc_zone = obj[0]['rly_id_id__location_code']


                if i == 'SEM':
                    obj = models.section_master.objects.filter(section_name=place).values('div_id_id__location_code','rly_id_id__location_code')
                    temp['type']='Section'
                    if len(obj):
                        loc_div = obj[0]['div_id_id__location_code']
                        loc_zone = obj[0]['rly_id_id__location_code']  
                    else:
                        loc_div='NA'
                        loc_zone='NA'


                if i == 'STM':
                    obj = models.station_master.objects.filter(station_name__icontains=place).values('div_id_id__location_code','rly_id_id__location_code')
                    temp['type']='Station'
                    loc_div = obj[0]['div_id_id__location_code']
                    loc_zone = obj[0]['rly_id_id__location_code']
                   
                
                   
                # if i == 'SOP':              
                #     obj = models.Shop_section.objects.filter(stnshortcode=place).values('div_id_id__location_code','rly_id_id__location_code')
                #     temp['type']='Shop Section'
                #     loc_div = obj[0]['iavhccdvsncode']
                #     loc_zone = obj[0]['iavhcczonecode']
                   
                if i == 'WOS':
                    obj = models.railwayLocationMaster.objects.filter(location_description__icontains=place,location_type='WS').values('parent_location_code')
                    temp['type']='WorkShop'
                    loc_div = obj[0]['parent_location_code']
                    loc_zone = obj[0]['parent_location_code']


                if i == 'DLS':
                    plac=place.split('SHED')[0]
                    # print(plac)
                    obj = models.railwayLocationMaster.objects.filter(location_code__icontains=plac,location_type='DS').values('parent_location_code')
                    temp['type']='Deisel Loco Shed'
                    # print(obj)
                    loc_div = obj[0]['parent_location_code']
                    loc_zone = obj[0]['parent_location_code']  


                if i == 'ELS':
                    plac=place.split('SHED')[0]
                    obj = models.railwayLocationMaster.objects.filter(location_code__icontains=plac,location_type='ES').values('parent_location_code')
                    temp['type']='Electric Loco Shed'
                    loc_div = obj[0]['parent_location_code']
                    loc_zone = obj[0]['parent_location_code']


                if i == 'COD':
                    # plac=place.split('-')[1]
                    obj = models.railwayLocationMaster.objects.filter(location_description__icontains=place,location_type='CD').values('parent_location_code')
                    temp['type']='Coaching Depot'
                    loc_div = obj[0]['parent_location_code']
                    loc_zone = obj[0]['parent_location_code']  


                if i == 'WAD':
                    obj = models.railwayLocationMaster.objects.filter(location_code__icontains=place,location_type='WD').values('parent_location_code')
                    temp['type']='Wagon Depot'
                    loc_div = obj[0]['parent_location_code']
                    loc_zone = obj[0]['parent_location_code']  


                if i == 'CTI':
                    obj = models.railwayLocationMaster.objects.filter(location_code__icontains=place,location_type='RI').values('parent_location_code')
                    temp['type']='Training Institute'
                    loc_div = obj[0]['parent_location_code']
                    loc_zone = obj[0]['parent_location_code']                    
                   
                if i == 'HOS':
                    
                    obj = models.iem_hospmstr.objects.filter(iavhccfullname__icontains=place).values('iavhccdvsncode','iavhcczonecode')
                    
                    temp['type']='Hospital'
                    loc_div = obj[0]['iavhccdvsncode']
                    loc_zone = obj[0]['iavhcczonecode']
                
                if i == 'TRN':
                    temp['place']= loc_name[0]
                    plac=loc_name[3].split('@')
                    #obj = models.trainMaster.objects.filter(train_no=(loc_name[0].split('-')[0]).strip()).values('train_name','train_no','org_rly_id','tnid','org_railway_code').distinct('tnid').order_by('-tnid')
                    obj=list(models.railwayLocationMaster.objects.filter(location_code=plac[0]).values('location_code'))
                    obj1=list(models.railwayLocationMaster.objects.filter(location_code=plac[1]).values('location_code'))

                    temp['type']='Train'
                    loc_div=plac[0]
                    loc_zone=plac[1]
                
                if i == 'ORL':
                    plac=loc_name[3].split('@')
                    temp['type']='Other Location'
                    if len(plac) == 2:
                        loc_div=plac[0]
                        loc_zone=plac[1]
                    else:
                        loc_div=None
                        loc_zone=plac[0]

                    


                temp['loc_div']=loc_div
                temp['loc_zone']=loc_zone
                locations.append(temp)


        if len(division):
            for d in division:
                obj = models.railwayLocationMaster.objects.filter(location_code=d).values('parent_location_code')
                div.append({'place':d,'zone':obj[0]['parent_location_code']})
               

        title={}
        already_added_locs=[]
        locs_mapped_div={}

        
        for d in div:
            locs_div=[]
            for l in locations:
                if l['loc_div']==d['place']:
                    locs_div.append(l['place'])
                    already_added_locs.append(l['place'])
            locs_mapped_div[d['place']]=locs_div

        print(locs_mapped_div,zone)
        divs_mapped_zone={}
        for z in zone:
            div_done=[]
            other_locs=[]
            for d in div:
                if d['zone']==z:
                    div_done.append({d['place']:locs_mapped_div[d['place']]})
            for l in locations:
                if l['loc_zone']==z and l['place'] not in already_added_locs:
                    other_locs.append(l['place'])
                    already_added_locs.append(l['place'])
            title[z]=[{'divs':div_done,'others':other_locs}]


       
               

        Title=''
        done_divs=[]
        import copy 
        titleCopy = copy.deepcopy(title)
        
        for z in zone:
            if Title != '':
                Title = Title + ', '
            for d in div:
                if d['zone']==z:
                    count=1
                    for x in title[z][0]['divs']:
                        if count:
                            if len(x[d['place']]):
                                placess=''
                                for plc in x[d['place']]:
                                    placess+=plc+', '
                                Title+=(str(placess)).strip(', ')+" in "+d['place']+", "
                            else:
                                #Title=Title.strip(', ')
                                Title+=d['place']+", "
                            del title[z][0]['divs'][0]
                            count=0
            if len(title[z][0]['others']):
                placess=''
                for plc in title[z][0]['others']:
                    placess+=plc+', '
                Title+=(str(placess)).strip(', ')+" of "+z+","
            else:
                #Title=Title.strip(', ')
                if len(titleCopy[z][0]['divs']) == 0:
                    Title +=" "+z
                else:
                    Title=Title.strip(', ')
                    Title +=" of "+z
        
        Title = Title.replace(',,',',')
        Title=Title.strip(', ')
        
        context={'Title':Title}
        return JsonResponse(context, safe=False)
    return JsonResponse({'success': False})

def getdiv_rly(request):
    try:
        if request.method == "GET" or request.is_ajax():
            rly=request.GET.get('rly_data')
            newrly = json.loads(rly)

            #print(rly,'rly=======')
            
            division=list(models.railwayLocationMaster.objects.filter(location_type_desc__in=['DIVISION','WORKSHOP'],parent_location_code__in=newrly).order_by('location_code').values('location_code', 'location_type').distinct('location_code'))
            l=[]
            for i in division:
                l.append({'location_code': i['location_code'], 'location_type':i['location_type']})
            #print(l)    
            context={
                'division':l,
            } 
            print(l)
            return JsonResponse(context,safe = False)
        return JsonResponse({"success":False}, status = 400)
    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="getdiv_rly",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {}) 

def autoFetchAccompany(request):
    if request.method == 'GET' and request.is_ajax():
        empnox = models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=request.user)| Q(official_email_ID=request.user.guest_email) | Q(official_email_ID=request.user.email), empno__isnull=False)
        desig=None
        if empnox:
            empnumber = empnox[0].designation_code
            desig = empnox[0].designation
            
        rly_zone = json.loads(request.GET.get('rly_zone'))
        division_id = json.loads(request.GET.get('division_id'))
        
        list1 = []
        if len(division_id):
            div_list = models.railwayLocationMaster.objects.filter(Q(location_code__in=division_id)).values_list('rly_unit_code', flat=True)
        if len(rly_zone):
            rly_list = models.railwayLocationMaster.objects.filter(Q(location_code__in=rly_zone)|Q(location_code__in=division_id)).values_list('rly_unit_code', flat=True)
        
            
        last_val = request.GET.get('last_val')
      
        if last_val is None or last_val == '':
            
            list1=list(models.Level_Desig.objects.exclude(Q(designation=desig)| Q(designation=None) |Q(delete_flag=True)).filter(Q(rly_unit__in=div_list)|Q(rly_unit__in=rly_list)).values('designation').distinct().order_by('designation'))
        else:
            list1=list(models.Level_Desig.objects.exclude(Q(designation=desig)| Q(designation=None) | Q(delete_flag=True)).filter(designation__istartswith=last_val).values('designation').distinct().order_by('designation'))

        return JsonResponse(list1, safe=False)
    return JsonResponse({'success': False})


def desig_changecode(request):
    try:
        if request.method == "POST" or request.is_ajax():
            officer_id=request.POST.get('officer_id')
            desig=[]
            testempno = json.loads(officer_id)
            for i in range(len(testempno)):
                xx=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=testempno[i]).values('designation', ).distinct('designation')
                if len(xx)>0:
                    desig.append(xx[0]['designation'])
            testdesig = desig
            officer_id=testempno
            testmarkofficer=''
            lstdict=[]
            
            alldesig = models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).values('d_level').distinct('d_level')
            
            for i in alldesig:
                if i['d_level'] == 'GM':
                    lst1=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level']).exclude(designation_code__in=testempno).count()
                    if lst1 == 0:
                        lst2=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).exclude(d_level=i['d_level']).values('designation_code','designation').order_by('designation'))
                        if testmarkofficer != '':
                            testmarkofficer+=','
                        testmarkofficer=testmarkofficer+"All GM's/ZR"
                        interkey=set(testempno)-set(map(lambda d: d['designation_code'], lst2))
                        testempno=list(map(lambda d: d['designation_code'], lst2))
                        testdesig=list(map(lambda d: d['designation'], lst2))
                        lstdict.append({"desig":"All GM's/ZR","designation_code":list(interkey)})

                elif i['d_level'] == 'BM':
                    lst1=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level']).exclude(designation_code__in=testempno).count()
                    if lst1 == 0:
                        lst2=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).exclude(d_level=i['d_level']).values('designation_code','designation').order_by('designation'))
                        if testmarkofficer != '':
                            testmarkofficer+=','
                        testmarkofficer=testmarkofficer+"All Board Member's"
                        interkey=set(testempno)-set(map(lambda d: d['designation_code'], lst2))
                        testempno=list(map(lambda d: d['designation_code'], lst2))
                        testdesig=list(map(lambda d: d['designation'], lst2))
                        lstdict.append({"desig":"All Board Member's","designation_code":list(interkey)})


                elif i['d_level'] == 'PHOD':
                    lst1=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level']).exclude(designation_code__in=testempno).count()
                    if lst1 == 0:
                        lst2=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).exclude(d_level=i['d_level']).values('designation_code','designation').order_by('designation'))
                        if testmarkofficer != '':
                            testmarkofficer+=','
                        testmarkofficer=testmarkofficer+"All PHOD's"
                        interkey=set(testempno)-set(map(lambda d: d['designation_code'], lst2))
                        testempno=list(map(lambda d: d['designation_code'], lst2))
                        testdesig=list(map(lambda d: d['designation'], lst2))
                        lstdict.append({"desig":"All PHOD's","designation_code":list(interkey)})
                    else:
                        hq=models.railwayLocationMaster.objects.filter(parent_location_code__isnull=False).values('parent_location_code').distinct()
                        for ii in hq:
                            rlyunit=models.railwayLocationMaster.objects.filter(location_code=ii['parent_location_code']).values('rly_unit_code')
                            if models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level'],rly_unit__in=rlyunit).exists():
                                lst3=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level'],rly_unit__in=rlyunit).exclude(designation_code__in=testempno).count()
                                if lst3 == 0:
                                    lst2=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).exclude(d_level=i['d_level'],rly_unit__in=rlyunit).values('designation_code','designation').order_by('designation'))
                                    if testmarkofficer != '':
                                        testmarkofficer+=','
                                    testmarkofficer=testmarkofficer+"All PHOD's"+ii['parent_location_code']
                                    interkey=set(testempno)-set(map(lambda d: d['designation_code'], lst2))
                                    testempno=list(map(lambda d: d['designation_code'], lst2))
                                    testdesig=list(map(lambda d: d['designation'], lst2))
                                    lstdict.append({"desig":"All PHOD's/"+ii['parent_location_code'],"designation_code":list(interkey)})



                elif i['d_level'] == 'DRM':
                    lst1=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level']).exclude(designation_code__in=testempno).count()
                    if lst1 == 0:
                        lst2=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).exclude(d_level=i['d_level']).values('designation_code','designation').order_by('designation'))
                        if testmarkofficer != '':
                            testmarkofficer+=','
                        testmarkofficer=testmarkofficer+"All DRM's"
                        interkey=set(testempno)-set(map(lambda d: d['designation_code'], lst2))
                        testempno=list(map(lambda d: d['designation_code'], lst2))
                        testdesig=list(map(lambda d: d['designation'], lst2))
                        lstdict.append({"desig":"All DRM's","designation_code":list(interkey)})
                    else:
                        hq=models.railwayLocationMaster.objects.filter(parent_location_code__isnull=False).values('parent_location_code').distinct()
                        for ii in hq:
                            rlyunit=models.railwayLocationMaster.objects.filter(parent_location_code=ii['parent_location_code']).values('rly_unit_code')
                            if models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level'],rly_unit__in=rlyunit).exists():
                                lst3=models.Level_Desig.objects.exclude(delete_flag=True).filter(d_level=i['d_level'],rly_unit__in=rlyunit).exclude(designation_code__in=testempno).count()
                                if lst3 == 0:
                                    lst2=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=testempno).exclude(d_level=i['d_level'],rly_unit__in=rlyunit).values('designation_code','designation').order_by('designation'))
                                    if testmarkofficer != '':
                                        testmarkofficer+=','
                                    testmarkofficer=testmarkofficer+"All DRM's/"+ii['parent_location_code']
                                    interkey=set(testempno)-set(map(lambda d: d['designation_code'], lst2))
                                    testempno=list(map(lambda d: d['designation_code'], lst2))
                                    testdesig=list(map(lambda d: d['designation'], lst2))
                                    lstdict.append({"desig":"All DRM's/"+ii['parent_location_code'],"designation_code":list(interkey)})

            for i in range(len(testdesig)):
                if testmarkofficer != '':
                    testmarkofficer+=','
                testmarkofficer=testmarkofficer+testdesig[i]
                lstdict.append({"desig":testdesig[i],"designation_code":[testempno[i]]})
                
            context={'marked_id': json.dumps(officer_id), 'marked_desig': testmarkofficer,'marked_key':json.dumps(lstdict)}
            print(context)
            return JsonResponse(context,safe = False)
        return JsonResponse({"success":False}, status = 400)

    except Exception as e: 
        try:
            m1.error_Table.objects.create(fun_name="desig_changecode",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})


def TableViewPendencyDashboard_excel(request):
     if request.method == 'GET':
        import xlwt
        from xlwt import Workbook
        irTypeVal = request.GET.get('typeId')
        irDetailsVal = request.GET.get('zoneId')
        location_val = request.GET.get('location_val')
        print('bhssssstsrtytftdytdyt123456',location_val)
        divId = request.GET.get('divId')
        irSearchDate = request.GET.get('searchDate')
        irSearchDateTO = request.GET.get('searchDateTo')
        irSearchDept = request.GET.get('searchDepartment')
        irSearchDesig = request.GET.get('searchDesignation')
        searchLevel = request.GET.get('searchLevel')
        card_type = request.GET.get('card_type')
        card_data = request.GET.get('card_data')
        INSPITEMTYPE = request.GET.get('INSPITEMTYPE')
        print('INSPITEMTYPE,INSPITEMTYPE',INSPITEMTYPE)
        mylist = json.loads(request.GET.get('mylist'))

        dataZoneWs=[]
        #####################
        cursor = connection.cursor()
        if irTypeVal == 'PU':
            dataZoneWs = list(models.railwayLocationMaster.objects.filter(location_type='PU').values('location_description','location_code').distinct().order_by('location_code'))
        elif irTypeVal == 'DIV':
            zone = irDetailsVal
            dataZoneWs = list(models.railwayLocationMaster.objects.filter(parent_location_code=zone,location_type = 'DIV').values('location_code','location_description').order_by('location_code'))
        elif irTypeVal == 'WS':
            zone = irDetailsVal
            dataZoneWs = list(models.railwayLocationMaster.objects.filter(parent_location_code=zone,location_type = 'WS').values('location_code','location_description').order_by('location_code'))
       
        if irTypeVal == 'ZR':  
            irTypeValData = ['ZR','DIV','WS']
        elif irTypeVal == 'IR':  
            irTypeValData = ['ZR','DIV','WS','PU',"RB","PSU","CON","CD","O"]
       
        elif irTypeVal == 'HQ':
            irTypeValData = ['ZR',"None"]
        else:
            irTypeValData = [irTypeVal,'None']

        if irDetailsVal == '':
            allLocationCodeData = tuple(models.railwayLocationMaster.objects.filter(location_type__in = irTypeValData).values_list('location_code',flat=True).distinct())
            # print('insode"',allLocationCodeData)
        else:
            # print('hello there')
            irPathVal1 = irDetailsVal
            allLocationCodeData = list(models.railwayLocationMaster.objects.filter(Q(parent_location_code=irDetailsVal)).values_list('location_code',flat=True).distinct())
            allLocationCodeData.append(irDetailsVal)
            allLocationCodeData = tuple(allLocationCodeData)
            # print("allLocationCodeData",allLocationCodeData)
       
        if divId != '':
            print("do it hee")
            irPathVal2 = divId
            allLocationCodeData = tuple([divId,'None'])
            irTypeValData = [irTypeVal,'None']



        if irSearchDept == 'All':
            irSearchDept = ""
            allDepartmentData = tuple(models.departMast.objects.values_list('department_name',flat=True).distinct())
               
            if irDetailsVal == '':
                allDesignation = list(models.Level_Desig.objects.filter(rly_unit__in = models.railwayLocationMaster.objects.filter(location_type__in = irTypeValData).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('hierarchy_level','designation'))
            else:
                allDesignation = list(models.Level_Desig.objects.filter(rly_unit__in = models.railwayLocationMaster.objects.filter(Q(location_code=irDetailsVal) | Q(parent_location_code=irDetailsVal),location_type__in = irTypeValData).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('hierarchy_level','designation'))
            if divId != '':
                allDesignation = list(models.Level_Desig.objects.filter(rly_unit__in = models.railwayLocationMaster.objects.filter(Q(location_code=divId),location_type__in = irTypeValData).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('hierarchy_level','designation'))

        else:
            allDepartmentData = tuple([models.departMast.objects.get(department_code=irSearchDept).department_name,'xyz'])
            # allDepartmentData = list(models.departMast.objects.filter(department_code=irSearchDept).values_list('department_name',flat=True).distinct())

            if irDetailsVal == '':
                allDesignation = list(models.Level_Desig.objects.filter(department_code=irSearchDept,rly_unit__in = models.railwayLocationMaster.objects.filter(location_type__in = irTypeValData).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('hierarchy_level','designation'))
            else:
                allDesignation = list(models.Level_Desig.objects.filter(department_code=irSearchDept,rly_unit__in = models.railwayLocationMaster.objects.filter(Q(location_code=irDetailsVal) | Q(parent_location_code=irDetailsVal),location_type__in = irTypeValData).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('hierarchy_level','designation'))
            if divId != '':
                allDesignation = list(models.Level_Desig.objects.filter(department_code=irSearchDept,rly_unit__in = models.railwayLocationMaster.objects.filter(Q(location_code=divId),location_type__in = irTypeValData).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('hierarchy_level','designation'))

        if  irSearchDesig == 'All':
            irSearchDesig = ""
            allDesignationData = tuple(models.Level_Desig.objects.filter(rly_unit__in = models.railwayLocationMaster.objects.filter(location_type__in=['DIV','RB','ZR','WS','PU']).values('rly_unit_code')).values_list('designation_code',flat=True).distinct())
        else:
            irSearchDesig = int(irSearchDesig)
            allDesignationData = tuple([irSearchDesig,-1])
           
        if irSearchDate == "":
            startDate = '2020-04-01'
            # startDate = datetime.strptime('%Y-%m-%d')
            # endDate = datetime.now()
            endDate = datetime.now().strftime(startDate,'%Y-%m-%d')
        else:
           
            start1 = irSearchDate.split('/')
            end1 = irSearchDateTO.split('/')
            startDate = '20'+start1[2]+'-'+start1[1]+'-'+start1[0]
            endDate = '20'+end1[2]+'-'+end1[1]+'-'+end1[0]
            # startDate = datetime.strptime(irSearchDate,'%d/%m/%y').date()
            # endDate = datetime.strptime(irSearchDateTO,'%d/%m/%y').date()
       
        if searchLevel == 'GM':
            allDesignationData = tuple(models.Level_Desig.objects.filter(d_level = 'GM').values_list('designation_code',flat=True).distinct())
        elif searchLevel == 'DRM':
            allDesignationData = tuple(models.Level_Desig.objects.filter(d_level = 'DRM').values_list('designation_code',flat=True).distinct())
        elif searchLevel == 'BM':
            allDesignationData = tuple(models.Level_Desig.objects.filter(d_level = 'BM').values_list('designation_code',flat=True).distinct())
        elif searchLevel == 'SAG':
            desig_code = list(models.Level_Desig.objects.filter(pc7_levelmin__gte=14,pc7_levelmax__lte=15).values_list('designation_code',flat=True).distinct())
            allDesignationData = tuple(models.Level_Desig.objects.filter(designation_code__in=desig_code).values_list('designation_code',flat=True).distinct())
        elif searchLevel == 'JAG':
            desig_code = list(models.Level_Desig.objects.filter(pc7_levelmin__gte=12,pc7_levelmax__lte=13).values_list('designation_code',flat=True).distinct())
            allDesignationData = tuple(models.Level_Desig.objects.filter(designation_code__in=desig_code).values_list('designation_code',flat=True).distinct())
        elif searchLevel == 'SS/JS':
            desig_code = list(models.Level_Desig.objects.filter(pc7_levelmin__gte=8,pc7_levelmax__lte=11).values_list('designation_code',flat=True).distinct())
            allDesignationData = tuple(models.Level_Desig.objects.filter(designation_code__in=desig_code).values_list('designation_code',flat=True).distinct())
       

        # allDesignation = [x for x in allDesignation if x['designation_code'] in allDesignationData]

        # TOTAL PENDING OVERDUE FILTER


        if card_data == 'Total':
            column_name = 'item_status in'
            value = (1,2,3,4)
            column_name_insp = 'insp_status in'
            value_insp = (1,2,3,4)
            column_name_mark = 'marked_officer_status in'
            value_mark = (1,2,3,4)
        elif card_data == 'Pending':
            column_name = 'item_status in'
            value = (1,2,3)
            column_name_insp = 'insp_status in'  
            value_insp = (1,2,3)
            column_name_mark = 'marked_officer_status in'
            value_mark = (1,2,3)
        elif card_data == 'Overdue':
            column_name = 'overdue_flag in'
            value = (1,34)
            column_name_insp = 'insp_status in'
            value_insp = (1,2,3)
            column_name_mark = 'marked_officer_status in'
            value_mark = (1,2,3)
        elif card_data == 'Priority':
            column_name = 'priority in'
            value = (1,34)
            column_name_insp = 'insp_status in'
            value_insp = (1,2,3,4)
            column_name_mark = 'marked_officer_status in'
            value_mark = (1,2,3,4)

        elif card_data == '7':
            print('i am here2')
            column_name = 'item_status != 0 and pendency_days >'
            value = 7
            column_name_insp = 'insp_status in'
            value_insp = (1,2,3,4)
            column_name_mark = 'marked_officer_status in'
            value_mark = (1,2,3,4)
        elif card_data == '30':
            print('i am here3')
            column_name = 'item_status != 0 and pendency_days >'
            value = 30
            column_name_insp = 'insp_status in'
            value_insp = (1,2,3,4)
            column_name_mark = 'marked_officer_status in'
            value_mark = (1,2,3,4)
        elif card_data == '90':
            print('i am here9')
            column_name = 'item_status != 0 and pendency_days >'
            value = 90
            column_name_insp = 'insp_status in'
            value_insp = (1,2,3,4)
            column_name_mark = 'marked_officer_status in'
            value_mark = (1,2,3,4)
        elif card_data == '180':
            print('i am here18')
            column_name = 'item_status != 0 and pendency_days >'
            value = 180
            column_name_insp = 'insp_status in'
            value_insp = (1,2,3,4)
            column_name_mark = 'marked_officer_status in'
            value_mark = (1,2,3,4)
        # FOR STATION SECTION TRAIN AND OTHERS
        elif card_data in ['STM','SEM','TRN']:
            print('station ')
            column_name = 'item_status != 0 and location_table ='
            value = "'"+card_data+"'"
            column_name_insp = 'insp_status in'
            value_insp = (1,2,3,4)
            column_name_mark = 'marked_officer_status in'
            value_mark = (1,2,3,4)
        elif card_data == 'OTH':
            print('not station ')
            column_name = 'item_status != 0 and location_table in'
            value = ('DLS','RRM','HOS','ORL')
            column_name_insp = 'insp_status in'
            value_insp = (1,2,3,4)
            column_name_mark = 'marked_officer_status in'
            value_mark = (1,2,3,4)
        else:
            print('not station ')
            column_name = 'item_status != 0 and location_table in'
            value = ('STM','SEM','TRN','DLS','RRM','HOS','ORL')
            column_name_insp = 'insp_status in'
            value_insp = (1,2,3,4)
            column_name_mark = 'marked_officer_status in'
            value_mark = (1,2,3,4)


        # FILTER CODES
        # FILTER ACCORDING TO THE CARD TYPE
        MYINSPITEMTYPE = {'Other Items':"and item_type = 0",'Employee Safety':"and item_type = 2",'Passenger Safety':"and item_type = 1",'Night Inspection':"and insp_type = 2",
                            'Surprise Inspection':"and insp_type = 3",'Drive Inspection':"and insp_type = 1"}
        if INSPITEMTYPE in MYINSPITEMTYPE:
            col_val = MYINSPITEMTYPE[INSPITEMTYPE]
        else:
            col_val = "--"
        print("collllll",col_val)
        # CHECK FOR CHEKBOX FILTER
        if (('Pending' in mylist and 'Overdue' in mylist and 'Priority' in mylist) or ('Overdue' in mylist and 'Priority' in mylist) ):
            col = "and (overdue_flag = 1 and priority = 1)"
        elif (('Pending' in mylist and 'Overdue' in mylist) or ('Overdue' in mylist) ):
            col = "and overdue_flag = 1"
        elif (('Pending' in mylist and 'Priority' in mylist) or ('Priority' in mylist)):
            col = "and priority = 1"
        else:
            col = "--"
        print('col444444444444',card_type,card_data,INSPITEMTYPE)

        mydictionary = {'oth':"item_type = 0",'es':"item_type = 2",'ps':"item_type = 1",'ni':"insp_type = 2",
                            'si':"insp_type = 3",'di':"insp_type = 1",'days7':"pendency_days > 7",'days30':"pendency_days > 30",
                            'days90':"pendency_days > 90",'days180':"pendency_days > 180"}

        # PS,NI,O,ETC....
        if(location_val== 'NULL'):
            dash = "--"
        else:
            dash = 'and'
        if card_type == 'Other Items':
            col = 'item_type'
            val = 0

        elif card_type == 'Employee Safety' :
            col = 'item_type'
            val = 2
        elif card_type == 'Passenger Safety':
            col = 'item_type'
            val = 1

        elif card_type == 'Night Inspection':
            col = 'insp_type'
            val = 2

        elif card_type == 'Surprise Inspection':
            col = 'insp_type'
            val = 3

        elif card_type == 'Drive Inspection':
            col = 'insp_type'
            val = 1

        elif card_type == 't_insp':
            print("col3444444",col)
            wholedata = ''
            # print('col',column_name,value,col,val)
            cursor.execute('''
            SELECT DISTINCT ON (inspection_no) inspection_no, inspected_on,inspection_note_no,string_agg(marked_designation , ', '),marked_location_type,marked_location_code
            FROM public.insp_marked_sumry where {} {} and {} {} and marked_location_type in {} and marked_location_code in {} and inspected_on between '{}' and '{}'
            and insp_desig_code in {} and insp_dept in {} and {} {} {} 
            {} location_val = '{}'
            group by inspection_no,inspected_on,inspection_note_no,location_val,insp_type,marked_location_type,marked_location_code
            '''.format(column_name_insp,value_insp,column_name_mark,value_mark,tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData,column_name,value,col_val,dash,location_val))
        
        
            firstRowAllData = cursor.fetchall()
            # print(len(firstRowAllData))
            for i in range(len(firstRowAllData)):
                # print(firstRowAllData[i])
                obsev = m1.Inspection_details.objects.get(inspection_no = firstRowAllData[i][0])
                
                
                wholedata +='<tr><td>'+str(i+1)+'</td><td>'+obsev.inspected_on.strftime('%d-%m-%y')+'</td><td>'+obsev.inspection_note_no+'</td><td>'+str(obsev.insp_type)+'</td><td><a class="js-btn-tooltip long-and-truncated-with-child" data-toggle="tooltip" data-placement="top" title="'+obsev.inspection_title+'">'+obsev.inspection_title+'</a></td><td>'+obsev.inspection_officer.designation+'</td><td>'+firstRowAllData[i][4]+'</td><td>'+firstRowAllData[i][5]+'</td><td><a href="/inspectionReportHtml/'+str(obsev.inspection_no)+'/" target = "blank"><i style = "font-size:22px;" class="far fa-file-alt"></i></a></td></tr>'        
            context = {
                'wholedata':wholedata,


            }
            return JsonResponse(context, safe = False)
       
        elif card_type == 't_item':
            wholedata = ''
            print('i am here hello')
            cursor.execute('''
            SELECT distinct on (item_no) item_no,inspected_on,inspection_note_no, insp_type,string_agg(marked_designation , ', '),location_val
            FROM public.insp_marked_sumry where {} {} and {} {} and marked_location_type in {} and marked_location_code in {} and inspected_on between '{}' and '{}'
            and insp_desig_code in {} and insp_dept in {} and {} {} {}
            {} location_val = '{}'
            group by item_no,inspected_on,inspection_note_no,location_val,insp_type
            '''.format(column_name_insp,value_insp,column_name_mark,value_mark,tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData,column_name,value,col_val,dash,location_val))
           
       
            firstRowAllData = cursor.fetchall()
            # print(firstRowAllData[i][0])
            for i in range(len(firstRowAllData)):
                print(firstRowAllData[i][0])
                obsev = m1.Item_details.objects.get(item_no=firstRowAllData[i][0])
                observation = obsev.observation
                
                if not observation:
                    observation = obsev.item_title
                observation_words = observation.split()
                
                if len(observation_words) > 1:
                    truncated_observation = ' '.join(islice(observation_words, 50)) + '...'
                else:
                    truncated_observation = ' '.join(observation_words)
                
                print('Truncated Observation:', truncated_observation)
                
                if firstRowAllData[i][2] == None:
                    # print('if')
                    inspected_note = ''
                else:
                    # print('else')
                    inspected_note = firstRowAllData[i][2]
                if firstRowAllData[i][5] == None:
                    # print('if')
                    location_val = ''
                else:
                    # print('else')
                    location_val = firstRowAllData[i][5]
                # print(observation)
                wholedata +='<tr><td>'+str(i+1)+'</td><td>'+str(firstRowAllData[i][1].strftime('%d-%m-%Y'))+'</td><td>'+inspected_note+'</td><td>'+str(firstRowAllData[i][3])+'</td><td><a class="js-btn-tooltip long-and-truncated-with-child" data-toggle="tooltip" data-placement="top" title="'+truncated_observation+'">'+truncated_observation+'</a></td><td>'+str(firstRowAllData[i][4])+'</td><td>'+location_val+'</td><td><a href="/inspectionReportHtml/'+str(firstRowAllData[i][5])+'/" target = "blank"><i style = "font-size:22px;" class="far fa-file-alt"></i></a></td></tr>'
            context = {'wholedata':wholedata}
            return JsonResponse(context, safe = False)
        
        elif card_type == 'p_insp':
            print("col3444444",col)
            wholedata = ''
            # print('col',column_name,value,col,val)
            cursor.execute('''
            SELECT DISTINCT ON (inspection_no) inspection_no, inspected_on,inspection_note_no,string_agg(marked_designation , ', '),marked_location_type,marked_location_code
            FROM public.insp_marked_sumry where {} {} and {} {} and marked_location_type in {} and marked_location_code in {} and inspected_on between '{}' and '{}'
            and insp_desig_code in {} and insp_dept in {} and {} {} {} and insp_status in (1,2,3)
            {} location_val = '{}'
            group by inspection_no,inspected_on,inspection_note_no,location_val,insp_type,marked_location_type,marked_location_code
            '''.format(column_name_insp,value_insp,column_name_mark,value_mark,tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData,column_name,value,col_val,dash,location_val))
        
        
            firstRowAllData = cursor.fetchall()
            # print(len(firstRowAllData))
            for i in range(len(firstRowAllData)):
                # print(firstRowAllData[i])
                obsev = m1.Inspection_details.objects.get(inspection_no = firstRowAllData[i][0])
                
                
                wholedata +='<tr><td>'+str(i+1)+'</td><td>'+obsev.inspected_on.strftime('%d-%m-%y')+'</td><td>'+obsev.inspection_note_no+'</td><td>'+str(obsev.insp_type)+'</td><td><a class="js-btn-tooltip long-and-truncated-with-child" data-toggle="tooltip" data-placement="top" title="'+obsev.inspection_title+'">'+obsev.inspection_title+'</a></td><td>'+obsev.inspection_officer.designation+'</td><td>'+firstRowAllData[i][4]+'</td><td>'+firstRowAllData[i][5]+'</td><td><a href="/inspectionReportHtml/'+str(obsev.inspection_no)+'/" target = "blank"><i style = "font-size:22px;" class="far fa-file-alt"></i></a></td></tr>'        
            context = {
                'wholedata':wholedata,


            }
            return JsonResponse(context, safe = False)
       
        elif card_type == 'p_item':
            wholedata = ''
            print('i am here hello')
            cursor.execute('''
            SELECT distinct on (item_no) item_no,inspected_on,inspection_note_no, insp_type,string_agg(marked_designation , ', '),location_val
            FROM public.insp_marked_sumry where {} {} and {} {} and marked_location_type in {} and marked_location_code in {} and inspected_on between '{}' and '{}'
            and insp_desig_code in {} and insp_dept in {} and {} {} {} and insp_status in (1,2,3)
            {} location_val = '{}'
            group by item_no,inspected_on,inspection_note_no,location_val,insp_type
            '''.format(column_name_insp,value_insp,column_name_mark,value_mark,tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData,column_name,value,col_val,dash,location_val))
           
       
            firstRowAllData = cursor.fetchall()
            # print(firstRowAllData[i][0])
            for i in range(len(firstRowAllData)):
                print(firstRowAllData[i][0])
                obsev = m1.Item_details.objects.get(item_no = firstRowAllData[i][0])
                observation = obsev.observation
                if not observation:
                    observation = obsev.item_title
                    truncated_observation = ' '.join(islice(observation.split(), 50))
                if len(observation.split()) > 50:
                   truncated_observation += '...'
                if firstRowAllData[i][2] == None:
                    # print('if')
                    inspected_note = ''
                else:
                    # print('else')
                    inspected_note = firstRowAllData[i][2]
                if firstRowAllData[i][5] == None:
                    # print('if')
                    location_val = ''
                else:
                    # print('else')
                    location_val = firstRowAllData[i][5]
                # print(observation)
                wholedata +='<tr><td>'+str(i+1)+'</td><td>'+str(firstRowAllData[i][1].strftime('%d-%m-%Y'))+'</td><td>'+inspected_note+'</td><td>'+str(firstRowAllData[i][3])+'</td><td><a class="js-btn-tooltip long-and-truncated-with-child" data-toggle="tooltip" data-placement="top" title="'+observation+'">'+observation+'</a></td><td>'+str(firstRowAllData[i][4])+'</td><td>'+location_val+'</td><td><a href="/inspectionReportHtml/'+str(firstRowAllData[i][5])+'/" target = "blank"><i style = "font-size:22px;" class="far fa-file-alt"></i></a></td></tr>'
            context = {'wholedata':wholedata}
            return JsonResponse(context, safe = False)
       
        elif card_type == 'o_insp':
            print("col3444444",col)
            wholedata = ''
            # print('col',column_name,value,col,val)
            cursor.execute('''
            SELECT DISTINCT ON (inspection_no) inspection_no, inspected_on,inspection_note_no,string_agg(marked_designation , ', '),marked_location_type,marked_location_code
            FROM public.insp_marked_sumry 
            where {} {} and {} {} and marked_location_type in {} and marked_location_code in {} and inspected_on between '{}' and '{}'
            and insp_desig_code in {} and insp_dept in {} and {} {} {} and overdue_flag='1'
            {} location_val = '{}'
            group by inspection_no,inspected_on,inspection_note_no,location_val,insp_type,marked_location_type,marked_location_code
            '''.format(column_name_insp,value_insp,column_name_mark,value_mark,tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData,column_name,value,col_val,dash,location_val))
        
        
            firstRowAllData = cursor.fetchall()
            # print(len(firstRowAllData))
            for i in range(len(firstRowAllData)):
                # print(firstRowAllData[i])
                obsev = m1.Inspection_details.objects.get(inspection_no = firstRowAllData[i][0])
                
                
                wholedata +='<tr><td>'+str(i+1)+'</td><td>'+obsev.inspected_on.strftime('%d-%m-%y')+'</td><td>'+obsev.inspection_note_no+'</td><td>'+str(obsev.insp_type)+'</td><td><a class="js-btn-tooltip long-and-truncated-with-child" data-toggle="tooltip" data-placement="top" title="'+obsev.inspection_title+'">'+obsev.inspection_title+'</a></td><td>'+obsev.inspection_officer.designation+'</td><td>'+firstRowAllData[i][4]+'</td><td>'+firstRowAllData[i][5]+'</td><td><a href="/inspectionReportHtml/'+str(obsev.inspection_no)+'/" target = "blank"><i style = "font-size:22px;" class="far fa-file-alt"></i></a></td></tr>'        
            context = {
                'wholedata':wholedata,


            }
            return JsonResponse(context, safe = False)
       
        elif card_type == 'o_item':
            wholedata = ''
            print('i am here hello')
            cursor.execute('''
            SELECT distinct on (item_no) item_no,inspected_on,inspection_note_no,insp_type,string_agg(marked_designation , ', '),location_val
            FROM public.insp_marked_sumry where {} {} and {} {} and marked_location_type in {} and marked_location_code in {} and inspected_on between '{}' and '{}'
            and insp_desig_code in {} and insp_dept in {} and {} {} {} and overdue_flag='1'
            {} location_val = '{}'
            group by item_no,inspected_on,inspection_note_no,location_val,insp_type
            '''.format(column_name_insp,value_insp,column_name_mark,value_mark,tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData,column_name,value,col_val,dash,location_val))
           
       
            firstRowAllData = cursor.fetchall()
            # print(firstRowAllData[i][0])
            for i in range(len(firstRowAllData)):
                print(firstRowAllData[i][0])
                obsev = m1.Item_details.objects.get(item_no = firstRowAllData[i][0])
                observation = obsev.observation
                if not observation:
                    observation = obsev.item_title
                    truncated_observation = ' '.join(islice(observation.split(), 50))
                if len(observation.split()) > 50:
                   truncated_observation += '...'
                if firstRowAllData[i][2] == None:
                    # print('if')
                    inspected_note = ''
                else:
                    # print('else')
                    inspected_note = firstRowAllData[i][2]
                if firstRowAllData[i][5] == None:
                    # print('if')
                    location_val = ''
                else:
                    # print('else')
                    location_val = firstRowAllData[i][5]
                # print(observation)
                wholedata +='<tr><td>'+str(i+1)+'</td><td>'+str(firstRowAllData[i][1].strftime('%d-%m-%Y'))+'</td><td>'+inspected_note+'</td><td>'+str(firstRowAllData[i][3])+'</td><td><a class="js-btn-tooltip long-and-truncated-with-child" data-toggle="tooltip" data-placement="top" title="'+observation+'">'+observation+'</a></td><td>'+str(firstRowAllData[i][4])+'</td><td>'+location_val+'</td><td><a href="/inspectionReportHtml/'+str(firstRowAllData[i][5])+'/" target = "blank"><i style = "font-size:22px;" class="far fa-file-alt"></i></a></td></tr>'
            context = {'wholedata':wholedata}
            return JsonResponse(context, safe = False)
       
            firstRowAllData = cursor.fetchall()
            print("mydata333333333",firstRowAllData)
            for i in range(len(firstRowAllData)):
                # print(firstRowAllData[i])
                obsev = m1.Item_details.objects.get(item_no = firstRowAllData[i][0])
                observation = obsev.observation
                if not observation:
                    observation = obsev.item_title
       
                wholedata +='<tr><td>'+str(i+1)+'</td><td>'+obsev.inspection_no.inspected_on.strftime('%d-%m-%Y')+'</td><td>'+obsev.inspection_no.inspection_note_no+'</td><td><a class="js-btn-tooltip long-and-truncated-with-child" data-toggle="tooltip" data-placement="top" title="'+observation+'">'+observation+'</a></td><td>'+'firstRowAllData[i][3]'+'</td><td>'+'firstRowAllData[i][4]'+'</td><td>'+'firstRowAllData[i][5]'+'</td><td>'+obsev.location_val+'</td><td><a href="/inspectionReportHtml/'+str(obsev.inspection_no)+'/" target = "blank"><i style = "font-size:22px;" class="far fa-file-alt"></i></a></td></tr>'
            context = {'wholedata':wholedata}
            return JsonResponse(context, safe = False)
        
        elif card_type in mydictionary:
            wholedata = ''
            print('col444444455555555555756865444',mydictionary[card_type])
            cursor.execute('''
            SELECT distinct on (item_no) item_no,inspected_on,inspection_note_no, insp_type,string_agg(marked_designation , ', '),location_val
            FROM public.insp_marked_sumry where {} and {} {} and {} {}  and marked_location_type in {} and marked_location_code in {} and inspected_on between '{}' and '{}'
            and insp_desig_code in {} and insp_dept in {} and {} {} {}
            {} location_val = '{}'
            group by item_no,inspected_on,inspection_note_no,location_val,insp_type
            '''.format(mydictionary[card_type],column_name_insp,value_insp,column_name_mark,value_mark,tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData,column_name,value,col_val,dash,location_val))
           
            firstRowAllData = cursor.fetchall()
            # print(firstRowAllData[i][0])
            for i in range(len(firstRowAllData)):
                print(firstRowAllData[i][0])
                obsev = m1.Item_details.objects.get(item_no = firstRowAllData[i][0])
                observation = obsev.observation
                if not observation:
                    observation = obsev.item_title
                    truncated_observation = ' '.join(islice(observation.split(), 50))
                if len(observation.split()) > 50:
                   truncated_observation += '...'
                if firstRowAllData[i][2] == None:
                    # print('if')
                    inspected_note = ''
                else:
                    # print('else')
                    inspected_note = firstRowAllData[i][2]
                if firstRowAllData[i][5] == None:
                    # print('if')
                    location_val = ''
                else:
                    # print('else')
                    location_val = firstRowAllData[i][5]
                # print(observation)
                wholedata +='<tr><td>'+str(i+1)+'</td><td>'+str(firstRowAllData[i][1].strftime('%d-%m-%Y'))+'</td><td>'+inspected_note+'</td><td>'+str(firstRowAllData[i][3])+'</td><td><a class="js-btn-tooltip long-and-truncated-with-child" data-toggle="tooltip" data-placement="top" title="'+observation+'">'+observation+'</a></td><td>'+str(firstRowAllData[i][4])+'</td><td>'+location_val+'</td><td><a href="/inspectionReportHtml/'+str(firstRowAllData[i][5])+'/" target = "blank"><i style = "font-size:22px;" class="far fa-file-alt"></i></a></td></tr>'
            context = {'wholedata':wholedata}
            return JsonResponse(context, safe = False)
        
        wholedata = ''
        # print('col',column_name,value,col,val)
        cursor.execute('''
        SELECT distinct on (item_no) item_no,inspected_on,inspection_note_no,string_agg(marked_designation , ', '),marked_hq_code,marked_location_code,inspection_no,location_val
        FROM public.insp_marked_sumry where {} {} and {} {} and marked_location_type in {} and marked_location_code in {} and inspected_on between '{}' and '{}'
        and insp_desig_code in {} and insp_dept in {} and {} {} and {} = '{}'
        group by item_no,inspected_on,inspection_note_no,location_val,insp_type,marked_hq_code,marked_location_code,inspection_no
         '''.format(column_name_insp,value_insp,column_name_mark,value_mark,tuple(irTypeValData),allLocationCodeData,startDate,endDate,allDesignationData,allDepartmentData,column_name,value,col,val))
     
        firstRowAllData = cursor.fetchall()
       
        heading2 = irTypeVal+ ": List of " +card_type+ " related item ("+card_data+")" " From " +irSearchDate+ " To " +irSearchDateTO+ "."            
        response = HttpResponse(content_type='application/ms-excel')
        filename = heading2 + ".xls"
        response['Content-Disposition'] = f'attachment; filename="{filename}"'
        wb = Workbook()
        sheet1 = wb.add_sheet('Sheet 1')

        style = xlwt.easyxf("alignment: wrap off;font: bold on;borders: top_color black, bottom_color black, right_color black, left_color black;")
        style1 = xlwt.easyxf("alignment: wrap off;borders: top_color black, bottom_color black, right_color black, left_color black;")
        style2 = xlwt.easyxf("alignment: wrap off;font: bold on;align:")
        style3 = xlwt.easyxf("alignment: wrap off;font: bold on;align: horiz center;")

        heading1 = "E-INSPECTION"
        row = 1
        col = 3
        sheet1.write_merge(row, row, col, col + 1, heading1, style=style2)
        row = 3
        col = 3
        sheet1.write(row, col, heading2 , style=style3)

        row = 5
        col = 0
        attributes = ["Sr.No.", "Insp. Date", "Insp. Note no.", "Insp. Observation", "Marked Officer", "Rly./Org.", "Div./Unit", "Location"]
        col_width = {col: len(attr) for col, attr in enumerate(attributes)}
        for idx, attribute in enumerate(attributes):
            sheet1.write_merge(row, row + 0, col, col, attribute, style=style)
            col_width[col] = max(col_width[col], len(attribute))
            col += 1

        data = firstRowAllData  

        row = 6
        for index, item in enumerate(data, start=1):
            obsev = m1.Item_details.objects.get(item_no = item[0])
            observation = obsev.observation
            if not observation:
                observation = obsev.item_title
            sheet1.write(row, 0, index, style=style1)
            sheet1.write(row, 1, item[1].strftime("%Y-%m-%d"), style=style1)
            sheet1.write(row, 2, item[2], style=style1)
            sheet1.write(row, 3, observation, style=style1)  
            sheet1.write(row, 4, item[3], style=style1)
            sheet1.write(row, 5, item[4], style=style1)
            sheet1.write(row, 6, item[5], style=style1)
            sheet1.write(row, 7, item[7], style=style1)
            col_width = {}
            max_observation_width = max(len(observation), len("Observation"))
            # Set a maximum width for the observation column (e.g., 200 units)
            max_observation_width = min(max_observation_width, 200)
            # Set the width of the observation column
            sheet1.col(3).width = (max_observation_width + 4) * 256
            
            for col, attr in enumerate(attributes):
                max_width = max(len(attr), max(len(str(item[col])) for item in data))
                col_width[col] = max_width

            # Apply the calculated widths to the columns
            for col, width in col_width.items():
                sheet1.col(col).width = (width + 4) * 256
            row += 1

        for col, width in col_width.items():
            sheet1.col(col).width = (width + 4) * 256

        wb.save(response)
        return response




def allinspectionreport_excel(request):
        cursor = connection.cursor()
    # if request.method == "GET" and request.is_ajax():
        # startDate,endDate,Department,Designation,Level,typeID,zoneID,divID, types'
        # overallTotalCount overallInspection pendingInspection overallPendingCount overdueInspection overallOverdueCount overallPriorityCount priorityInspection
        startDate=request.GET.get('startDate')
        endDate=request.GET.get('endDate')
        Department=request.GET.get('Department')
        Designation=request.GET.get('Designation')
        Level=request.GET.get('Level')
        typeID=request.GET.get('typeID')
        zoneID=request.GET.get('zoneID')
        divID=request.GET.get('divID')
        types=request.GET.get('types')
        Desig=[]
        Dept=[]
        insp=[]
        insp_details=[]
        items_details=[]
        lvl=[]
        header = 'Total'
        flag='inspection'
        selected_dept = None
        lvll=[]
        location=[]


        # startDate = datetime.strptime(startDate,'%d/%m/%y').strftime('%Y-%m-%d')
        # endDate = datetime.strptime(endDate,'%d/%m/%y').strftime('%Y-%m-%d')
        print(startDate,endDate,Department,Designation,Level,typeID,zoneID,divID, types)

        # sDate = datetime.strptime(startDate,'%Y-%m-%d').strftime('%d-%m-%Y')
        # eDate = datetime.strptime(endDate,'%Y-%m-%d').strftime('%d-%m-%Y')


        if typeID == 'ZR':
            if len(zoneID):
                zones=list(models.railwayLocationMaster.objects.filter(location_code=zoneID,location_type='ZR').values_list('location_code', flat=True))
            else:
                zones=list(models.railwayLocationMaster.objects.filter(location_type='ZR').values_list('location_code', flat=True))
            if len(divID):
                div=divID.split('-')
                divs=list(models.railwayLocationMaster.objects.filter(location_code=div[0],location_type=div[1]).values_list('location_code', flat=True))
            else:
                divs=list(models.railwayLocationMaster.objects.filter(location_type__in=['WS','DIV']).values_list('location_code', flat=True))
        elif typeID == 'PU':
            if len(zoneID):
                zones=models.railwayLocationMaster.objects.filter(location_code=zoneID,location_type='PU').values_list('location_code', flat=True)
            else:
                zones=models.railwayLocationMaster.objects.filter(location_type='PU').values_list('location_code', flat=True)
        elif typeID == 'WS':
            if len(zoneID):
                zones=models.railwayLocationMaster.objects.filter(location_code=zoneID,location_type='ZR').values_list('location_code', flat=True)
            else:
                zones=models.railwayLocationMaster.objects.filter(location_type='ZR').values_list('location_code', flat=True)
            if len(divID):
                div=divID.split('-')
                divs=list(models.railwayLocationMaster.objects.filter(location_code=div[0],location_type=div[1]).values_list('location_code', flat=True))
            else:
                divs=list(models.railwayLocationMaster.objects.filter(location_type__in=['WS']).values_list('location_code', flat=True))
        elif typeID == 'DIV':
            if len(zoneID):
                zones=models.railwayLocationMaster.objects.filter(location_code=zoneID,location_type='ZR').values_list('location_code', flat=True)
            else:
                zones=models.railwayLocationMaster.objects.filter(location_type='ZR').values_list('location_code', flat=True)
            if len(divID):
                div=divID.split('-')
                divs=list(models.railwayLocationMaster.objects.filter(location_code=div[0],location_type=div[1]).values_list('location_code', flat=True))
            else:
                divs=list(models.railwayLocationMaster.objects.filter(location_type__in=['DIV']).values_list('location_code', flat=True))
        elif typeID == 'HQ':
            if len(zoneID):
                zones=models.railwayLocationMaster.objects.filter(location_code=zoneID,location_type='ZR').values_list('location_code', flat=True)
            else:
                zones=models.railwayLocationMaster.objects.filter(location_type='ZR').values_list('location_code', flat=True)
        else:
            zones=list(models.railwayLocationMaster.objects.filter(location_type__in=['ZR','PU']).values_list('location_code', flat=True))
            divs=list(models.railwayLocationMaster.objects.filter(location_type__in=['WS','DIV']).values_list('location_code', flat=True))

        if Department == 'All':
            Dept = list(models.departMast.objects.filter(delete_flag=False).values_list('department_name', flat=True))
        else:
            Dept=list(models.departMast.objects.filter(delete_flag=False,department_code=Department).values_list('department_name', flat=True))
        if Designation == 'All':
            Desig = tuple(models.Level_Desig.objects.filter().values_list('designation_code', flat=True))
        else:
            Desig.append(Designation)
            Desig = tuple(Desig)  
        # if Level == 'All':
        #     lvl = list(models.Level_Desig.objects.filter(delete_flag=False).values_list('d_level', flat=True))  
        # else:
        #     lvl.append(Level)
        if Level == 'GM':
            Desig = tuple(models.Level_Desig.objects.filter(d_level = 'GM').values_list('designation_code',flat=True).distinct())
        elif Level == 'DRM':
            Desig = tuple(models.Level_Desig.objects.filter(d_level = 'DRM').values_list('designation_code',flat=True).distinct())
        elif Level == 'BM':
            Desig = tuple(models.Level_Desig.objects.filter(d_level = 'BM').values_list('designation_code',flat=True).distinct())
        elif Level == 'SAG':
            desig_code = list(models.Level_Desig.objects.filter(pc7_levelmin__gte=14,pc7_levelmax__lte=15).values_list('designation_code',flat=True).distinct())
            Desig = tuple(models.Level_Desig.objects.filter(designation_code__in=desig_code).values_list('designation_code',flat=True).distinct())
        elif Level == 'JAG':
            desig_code = list(models.Level_Desig.objects.filter(pc7_levelmin__gte=12,pc7_levelmax__lte=13).values_list('designation_code',flat=True).distinct())
            Desig = tuple(models.Level_Desig.objects.filter(designation_code__in=desig_code).values_list('designation_code',flat=True).distinct())
        elif Level == 'SS/JS':
            desig_code = list(models.Level_Desig.objects.filter(pc7_levelmin__gte=8,pc7_levelmax__lte=11).values_list('designation_code',flat=True).distinct())
            Desig = tuple(models.Level_Desig.objects.filter(designation_code__in=desig_code).values_list('designation_code',flat=True).distinct())


        
        if Department == 'All':
            deptt = ''
        else:
            cursor.execute('''SELECT department_name FROM myadmin_departmast
                           WHERE department_code = %s;''',
                           [str(Department)])
            deptt = cursor.fetchall()[0][0]

        if Designation == 'All':
            Desigg = ''
        else:
            cursor.execute('''SELECT designation FROM myadmin_level_desig
                           WHERE designation_code = %s;''',
                           [Designation])
            Desigg = cursor.fetchall()[0][0]

        if Level == 'All':
            lvll = ''
            
        else:
            lvll.append(Level)    
            lvll=lvll[0] 
        

        location.append(list(zones))  
        location.append(list(divs)) 
        location = location[0]
        print(location)
        # print('--------------')
        # print(allDesignationData)
        # print('--------------')

        startDate = '2021-09-01'
        print('fghjk  ',typeID)
        if typeID=='WS' or typeID=='DIV':
            if types == 'overallInspection':
                cursor.execute('''SELECT DISTINCT inspection_note_no FROM insp_marked_sumry
                                WHERE (marked_hq_code in %s and (marked_div_code in %s and marked_div_type = %s))
                                and inspected_on between %s and %s    
                                and marked_officer_id in %s and marked_officer_department in %s and insp_status!=0 ;''',
                                [tuple(zones),tuple(divs),typeID, startDate,
                                    endDate, tuple(Desig), tuple(Dept)])
                data = cursor.fetchall()
                # data = data[0]
            if types == 'pendingInspection':
                cursor.execute('''SELECT DISTINCT inspection_note_no FROM insp_marked_sumry
                                WHERE (marked_hq_code in %s and (marked_div_code in %s and marked_div_type = %s))
                                and inspected_on between %s and %s    
                                and marked_officer_id in %s and marked_officer_department in %s and insp_status not in (0,4) ;''',
                                [tuple(zones),tuple(divs),typeID, startDate,
                                    endDate, tuple(Desig), tuple(Dept)])
                data = cursor.fetchall()
            if types == 'overdueInspection':
                cursor.execute('''SELECT DISTINCT inspection_note_no FROM insp_marked_sumry
                                WHERE (marked_hq_code in %s and (marked_div_code in %s and marked_div_type = %s))
                                and inspected_on between %s and %s    
                                and marked_officer_id in %s and marked_officer_department in %s and overdue_flag = 1 and insp_status not in (0,4);''',
                                [tuple(zones),tuple(divs),typeID, startDate,
                                    endDate, tuple(Desig), tuple(Dept)])
                data = cursor.fetchall()

            if types == 'priorityInspection':
                cursor.execute('''SELECT DISTINCT inspection_note_no FROM insp_marked_sumry
                                WHERE (marked_hq_code in %s and (marked_div_code in %s and marked_div_type = %s))
                                and inspected_on between %s and %s    
                                and marked_officer_id in %s and marked_officer_department in %s and priority!=0 and insp_status not in (0,4);''',
                                [tuple(zones),tuple(divs),typeID, startDate,
                                    endDate, tuple(Desig), tuple(Dept)])
                data = cursor.fetchall()

            if types == 'overallTotalCount':
                cursor.execute('''SELECT DISTINCT item_no FROM insp_marked_sumry
                                WHERE (marked_hq_code in %s and (marked_div_code in %s and marked_div_type = %s))
                                and inspected_on between %s and %s    
                                and marked_officer_id in %s and marked_officer_department in %s and item_status!=0 ;''',
                                [tuple(zones),tuple(divs),typeID, startDate,
                                    endDate, tuple(Desig), tuple(Dept)])
                data = cursor.fetchall()
            if  types == 'overallPendingCount':
                cursor.execute('''SELECT DISTINCT item_no FROM insp_marked_sumry
                                WHERE (marked_hq_code in %s and (marked_div_code in %s and marked_div_type = %s))
                                and inspected_on between %s and %s    
                                and marked_officer_id in %s and marked_officer_department in %s and item_status not in (0,4) ;''',
                                [tuple(zones),tuple(divs),typeID, startDate,
                                    endDate, tuple(Desig), tuple(Dept)])
                data = cursor.fetchall()
            if types == 'overallOverdueCount':
                cursor.execute('''SELECT DISTINCT item_no FROM insp_marked_sumry
                                WHERE (marked_hq_code in %s and (marked_div_code in %s and marked_div_type = %s))
                                and inspected_on between %s and %s    
                                and marked_officer_id in %s and marked_officer_department in %s and overdue_flag = 1 and item_status not in (0,4);''',
                                [tuple(zones),tuple(divs),typeID, startDate,
                                    endDate, tuple(Desig), tuple(Dept)])
                data = cursor.fetchall()
            if types == 'overallPriorityCount':
                cursor.execute('''SELECT DISTINCT item_no FROM insp_marked_sumry
                                WHERE (marked_hq_code in %s and (marked_div_code in %s and marked_div_type = %s))
                                and inspected_on between %s and %s    
                                and marked_officer_id in %s and marked_officer_department in %s and priority!=0 and item_status not in (0,4);''',
                                [tuple(zones),tuple(divs),typeID, startDate,
                                    endDate, tuple(Desig), tuple(Dept)])
                data = cursor.fetchall()
        
        elif typeID=='HQ' or typeID=='PU':
            if types == 'overallInspection':
                cursor.execute('''SELECT DISTINCT inspection_note_no FROM insp_marked_sumry
                                WHERE marked_hq_code in %s and marked_div_code is NULL and marked_div_type is NULL
                                and inspected_on between %s and %s    
                                and marked_officer_id in %s and marked_officer_department in %s and insp_status!=0 ;''',
                                [tuple(zones), startDate,
                                    endDate, tuple(Desig), tuple(Dept)])
                data = cursor.fetchall()
                # data = data[0]
            if types == 'pendingInspection':
                cursor.execute('''SELECT DISTINCT inspection_note_no FROM insp_marked_sumry
                                WHERE marked_hq_code in %s and marked_div_code is NULL and marked_div_type is NULL
                                and inspected_on between %s and %s    
                                and marked_officer_id in %s and marked_officer_department in %s and insp_status not in (0,4) ;''',
                                [tuple(zones), startDate,
                                    endDate, tuple(Desig), tuple(Dept)])
                data = cursor.fetchall()
            if types == 'overdueInspection':
                cursor.execute('''SELECT DISTINCT inspection_note_no FROM insp_marked_sumry
                                WHERE marked_hq_code in %s and marked_div_code is NULL and marked_div_type is NULL
                                and inspected_on between %s and %s    
                                and marked_officer_id in %s and marked_officer_department in %s and overdue_flag=1 and insp_status not in (0,4);''',
                                [tuple(zones), startDate,
                                    endDate, tuple(Desig), tuple(Dept)])
                data = cursor.fetchall()
            if types == 'priorityInspection':
                cursor.execute('''SELECT DISTINCT inspection_note_no FROM insp_marked_sumry
                                WHERE marked_hq_code in %s and marked_div_code is NULL and marked_div_type is NULL
                                and inspected_on between %s and %s    
                                and marked_officer_id in %s and marked_officer_department in %s and priority=1 and insp_status not in (0,4);''',
                                [tuple(zones), startDate,
                                    endDate, tuple(Desig), tuple(Dept)])
                data = cursor.fetchall()

            if types == 'overallTotalCount':
                cursor.execute('''SELECT DISTINCT item_no FROM insp_marked_sumry
                                WHERE marked_hq_code in %s and marked_div_code is NULL and marked_div_type is NULL
                                and inspected_on between %s and %s    
                                and marked_officer_id in %s and marked_officer_department in %s and item_status!=0 ;''',
                                [tuple(zones), startDate,
                                    endDate, tuple(Desig), tuple(Dept)])
                data = cursor.fetchall()
            if  types == 'overallPendingCount':
                cursor.execute('''SELECT DISTINCT item_no FROM insp_marked_sumry
                                WHERE marked_hq_code in %s and marked_div_code is NULL and marked_div_type is NULL
                                and inspected_on between %s and %s    
                                and marked_officer_id in %s and marked_officer_department in %s and item_status not in (0,4) ;''',
                                [tuple(zones), startDate,
                                    endDate, tuple(Desig), tuple(Dept)])
                data = cursor.fetchall()
            if types == 'overallOverdueCount':
                cursor.execute('''SELECT DISTINCT item_no FROM insp_marked_sumry
                                WHERE marked_hq_code in %s and marked_div_code is NULL and marked_div_type is NULL
                                and inspected_on between %s and %s    
                                and marked_officer_id in %s and marked_officer_department in %s and overdue_flag = 1 and item_status not in (0,4);''',
                                [tuple(zones), startDate,
                                    endDate, tuple(Desig), tuple(Dept)])
                data = cursor.fetchall()
            if types == 'overallPriorityCount':
                cursor.execute('''SELECT DISTINCT item_no FROM insp_marked_sumry
                                WHERE marked_hq_code in %s and marked_div_code is NULL and marked_div_type is NULL
                                and inspected_on between %s and %s    
                                and marked_officer_id in %s and marked_officer_department in %s and priority!=0 and item_status not in (0,4);''',
                                [tuple(zones), startDate,
                                    endDate, tuple(Desig), tuple(Dept)])
                data = cursor.fetchall()
        
        else:
            if types == 'overallInspection':
                cursor.execute('''SELECT DISTINCT inspection_note_no FROM insp_marked_sumry
                                WHERE (marked_hq_code in %s and (marked_div_code in %s or marked_div_code is NULL))
                                and inspected_on between %s and %s    
                                and marked_officer_id in %s and marked_officer_department in %s and insp_status!=0 ;''',
                                [tuple(zones),tuple(divs), startDate,
                                    endDate, tuple(Desig), tuple(Dept)])
                data = cursor.fetchall()

                # data = data[0]
            if types == 'pendingInspection':
                cursor.execute('''SELECT DISTINCT inspection_note_no FROM insp_marked_sumry
                                WHERE (marked_hq_code in %s and (marked_div_code in %s or marked_div_code is NULL))
                                and inspected_on between %s and %s    
                                and marked_officer_id in %s and marked_officer_department in %s and insp_status not in (0,4) ;''',
                                [tuple(zones),tuple(divs), startDate,
                                    endDate, tuple(Desig), tuple(Dept)])
                data = cursor.fetchall()
            if types == 'overdueInspection':
                cursor.execute('''SELECT DISTINCT inspection_note_no FROM insp_marked_sumry
                                WHERE (marked_hq_code in %s and (marked_div_code in %s or marked_div_code is NULL))
                                and inspected_on between %s and %s    
                                and marked_officer_id in %s and marked_officer_department in %s and overdue_flag = 1 and insp_status not in (0,4);''',
                                [tuple(zones),tuple(divs), startDate,
                                    endDate, tuple(Desig), tuple(Dept)])
                data = cursor.fetchall()
            if types == 'priorityInspection':
                cursor.execute('''SELECT DISTINCT inspection_note_no FROM insp_marked_sumry
                                WHERE (marked_hq_code in %s and (marked_div_code in %s or marked_div_code is NULL))
                                and inspected_on between %s and %s    
                                and marked_officer_id in %s and marked_officer_department in %s and priority!=0 and insp_status not in (0,4);''',
                                [tuple(zones),tuple(divs), startDate,
                                    endDate, tuple(Desig), tuple(Dept)])
                data = cursor.fetchall()

            if types == 'overallTotalCount':
                cursor.execute('''SELECT DISTINCT item_no FROM insp_marked_sumry
                                WHERE (marked_hq_code in %s and (marked_div_code in %s or marked_div_code is NULL))
                                and inspected_on between %s and %s    
                                and marked_officer_id in %s and marked_officer_department in %s and item_status!=0 ;''',
                                [tuple(zones),tuple(divs), startDate,
                                    endDate, tuple(Desig), tuple(Dept)])
                data = cursor.fetchall()
            if  types == 'overallPendingCount':
                cursor.execute('''SELECT DISTINCT item_no FROM insp_marked_sumry
                                WHERE (marked_hq_code in %s and (marked_div_code in %s or marked_div_code is NULL))
                                and inspected_on between %s and %s    
                                and marked_officer_id in %s and marked_officer_department in %s and item_status not in (0,4) ;''',
                                [tuple(zones),tuple(divs), startDate,
                                    endDate, tuple(Desig), tuple(Dept)])
                data = cursor.fetchall()
            if types == 'overallOverdueCount':
                cursor.execute('''SELECT DISTINCT item_no FROM insp_marked_sumry
                                WHERE (marked_hq_code in %s and (marked_div_code in %s or marked_div_code is NULL))
                                and inspected_on between %s and %s    
                                and marked_officer_id in %s and marked_officer_department in %s and overdue_flag = 1 and item_status not in (0,4);''',
                                [tuple(zones),tuple(divs), startDate,
                                    endDate, tuple(Desig), tuple(Dept)])
                data = cursor.fetchall()
            if types == 'overallPriorityCount':
                cursor.execute('''SELECT DISTINCT item_no FROM insp_marked_sumry
                                WHERE (marked_hq_code in %s and (marked_div_code in %s or marked_div_code is NULL))
                                and inspected_on between %s and %s    
                                and marked_officer_id in %s and marked_officer_department in %s and priority!=0 and item_status not in (0,4);''',
                                [tuple(zones),tuple(divs), startDate,
                                    endDate, tuple(Desig), tuple(Dept)])
                data = cursor.fetchall()
        print (len(data))
        # from functools import reduce
        # data = tuple(reduce(lambda x,y:list(x).extend(list(y)) or list(x),data))
        
        data1=[]
        for i in data:
            for j in i:
                data1.append(j)
        print (len(data1))
        data = data1
            

        # for d in data:
        #     insp.append(d[0])

        if types in ['overallOverdueCount','overallPendingCount','overallTotalCount','overallPriorityCount']:
            flag='items'
       
        if flag=='inspection':
            cursor.execute('''SELECT
                           distinct a.inspection_no,
                           STRING_AGG(DISTINCT TO_CHAR(a.final_submit_on, 'DD-MM-YYYY'), ', ') AS final_submit_on,
                           STRING_AGG(DISTINCT CAST(a.inspection_note_no AS VARCHAR), ', ') AS inspection_note_no,
                           b.inspection_title,
                           STRING_AGG(DISTINCT CAST(a.marked_designation AS VARCHAR), ', ') AS marked_designation,
                           STRING_AGG(DISTINCT CAST(a.marked_hq_code AS VARCHAR), ', ') AS marked_hq_code,
                           STRING_AGG(DISTINCT CAST(a.marked_div_code AS VARCHAR), ', ') AS marked_div_code,
                           STRING_AGG(DISTINCT CAST(a.location_val AS VARCHAR), ', ') AS location_val
                           FROM public.insp_marked_sumry a 
                           Join public.inspects_inspection_details b on a.inspection_no = b.inspection_no
                           WHERE a.insp_status != 0 and a.inspection_note_no in %s
                           GROUP BY a.inspection_no,b.inspection_title;''',(tuple(data),))
            mdata = cursor.fetchall()
        else: 
            cursor.execute('''SELECT
                           distinct a.item_no,
                           TO_CHAR(a.final_submit_on, 'DD-MM-YYYY') AS final_submit_on,
                           a.inspection_note_no,
                           b.observation,
                           STRING_AGG(DISTINCT CAST(a.marked_designation AS VARCHAR), ', ') AS marked_designation,
                           c.location_code,
                           d.location_code,
                           a.location_val
                           FROM public.insp_marked_sumry a 
                           Join public.inspects_item_details b on a.item_no = b.item_no
                           join public.myadmin_railwaylocationmaster c on c.rly_unit_code = a.item_hq_id
                           join public.myadmin_railwaylocationmaster d on d.rly_unit_code = a.item_div_id
                           WHERE a.item_status != 0 and a.item_no in %s
                           GROUP BY a.item_no,final_submit_on,a.inspection_note_no,b.observation,c.location_code,d.location_code,a.location_val;
                           ''',(tuple(data),))
            mdata = cursor.fetchall()

        
        if types in ['pendingInspection','overallPendingCount']:
            header='Pending'
        
        if types in ['overdueInspection','overallOverdueCount']:
            header='Overdue'
        
        if types in ['priorityInspection','overallPriorityCount']:
            header='Priority'
        

        context={
            'flag':flag,
            'insp_details':insp_details,
            'items_details':items_details,
            'header':header,
            'typeID':typeID,
            'zoneID':zoneID,
            'types':types,
            'Department':Department,
            'Designation':Designation,
            'startDate': startDate,
            'endDate': endDate,
            'Dept':Dept,
            'selected_dept':selected_dept,
            'Level':Level,
            'deptt':deptt,
            'Desigg':Desigg,
            'lvll':lvll,
            'mdata':mdata,

        }
                       

        if flag == 'inspection':
            if typeID == 'IR':
                heading2="List Of "+header+" Inspection for "+typeID+ " from " +startDate+ " to "+endDate+ ""
            else:
                heading2="List Of "+header+" Inspection for "+typeID+ " ("+zoneID+")" " from " +startDate+ " to "+endDate+ "" 
            response = HttpResponse(content_type='application/ms-excel')
            filename = heading2 + ".xls"
            response['Content-Disposition'] = f'attachment; filename="{filename}"'
            wb = Workbook()
            sheet1 = wb.add_sheet('Sheet 1')

            style = xlwt.easyxf("alignment: wrap off;font: bold on;borders: top_color black, bottom_color black, right_color black, left_color black;")
            style1 = xlwt.easyxf("alignment: wrap off;borders: top_color black, bottom_color black, right_color black, left_color black;")
            style2 = xlwt.easyxf("alignment: wrap off;font: bold on;align:")
            style3 = xlwt.easyxf("alignment: wrap off;font: bold on;align: horiz center;")

            heading1 = "E-INSPECTION"
            row = 1
            col = 3
            sheet1.write_merge(row, row, col, col + 1, heading1, style=style2)
            row = 3
            col = 3
            sheet1.write(row, col, heading2, style=style3)

            row = 5
            col = 0
            attributes = ["Sr.No.", "Insp. Date", "Insp. Note no.", "Insp. Type", "Insp. Title", "Marked Officer", "Rly./Org.", "Div./Unit","Location"]
            col_width = {col: len(attr) for col, attr in enumerate(attributes)}
            for idx, attribute in enumerate(attributes):
                sheet1.write_merge(row, row + 0, col, col, attribute, style=style)
                col_width[col] = max(col_width[col], len(attribute))
                col += 1

            data = context['mdata']

            row = 6
            for index, item in enumerate(data, start=1):
                sheet1.write(row, 0, index, style=style1)
                sheet1.write(row, 1, item[1], style=style1)
                sheet1.write(row, 2, item[2], style=style1)
                sheet1.write(row, 3, 'General', style=style1)
                sheet1.write(row, 4, item[3], style=style1)
                sheet1.write(row, 5, item[4], style=style1)              
                sheet1.write(row, 6, item[5], style=style1)
                sheet1.write(row, 7, item[6], style=style1)
                sheet1.write(row, 8, item[7], style=style1)

                for col, content in enumerate([index, item[1], item[2], 'General']):
                    col_width[col] = max(col_width[col], len(str(content)))
               
                row += 1

            for col, width in col_width.items():
                sheet1.col(col).width = (width + 4) * 256

            wb.save(response)
            return response

        else:
            if typeID == 'IR':
                heading2="List Of "+header+" Item for "+typeID+ " from " +startDate+ " to "+endDate+ ""
            else:
                heading2="List Of "+header+" Item for "+typeID+ " ("+zoneID+")" " from " +startDate+ " to "+endDate+ "" 
            response = HttpResponse(content_type='application/ms-excel')
            filename = heading2 + ".xls"
            response['Content-Disposition'] = f'attachment; filename="{filename}"'
            wb = Workbook()
            sheet1 = wb.add_sheet('Sheet 1')
           
            style = xlwt.easyxf("alignment: wrap off;font: bold on;borders: top_color black, bottom_color black, right_color black, left_color black;")
            style1 = xlwt.easyxf("alignment: wrap off;borders: top_color black, bottom_color black, right_color black, left_color black;")
            style2 = xlwt.easyxf("alignment: wrap off;font: bold on;align:")
            style3 = xlwt.easyxf("alignment: wrap off;font: bold on;align: horiz center;")

            heading1 = "E-INSPECTION"
            row = 1
            col = 3
            sheet1.write_merge(row, row, col, col + 1, heading1, style=style2)
            row = 3
            col = 3
            sheet1.write(row, col, heading2 , style=style3)

            row = 5
            col = 0
            attributes = ["Sr.No.", "Insp. Date", "Insp. Note no.", "Insp. Type", "Observation","Marked Officer", "Rly./Org.", "Div./Unit","Location"]
            col_width = {col: len(attr) for col, attr in enumerate(attributes)}
            for idx, attribute in enumerate(attributes):
                sheet1.write_merge(row, row + 0, col, col, attribute, style=style)
                col_width[col] = max(col_width[col], len(attribute))
                col += 1

            data = context['mdata']  

            row = 6
            for index, item in enumerate(data, start=1):
                sheet1.write(row, 0, index, style=style1)
                sheet1.write(row, 1, item[1], style=style1)
                sheet1.write(row, 2, item[2], style=style1)
                sheet1.write(row, 3, 'General', style=style1)
                sheet1.write(row, 4, item[3], style=style1)
                sheet1.write(row, 5, item[4], style=style1)              
                sheet1.write(row, 6, item[5], style=style1)
                sheet1.write(row, 7, item[6], style=style1)
                sheet1.write(row, 8, item[7], style=style1)

                for col, content in enumerate([index, item[1], item[2], 'General']):
                    col_width[col] = max(col_width[col], len(str(content)))
               
                row += 1

            for col, width in col_width.items():
                sheet1.col(col).width = (width + 4) * 256
   

            wb.save(response)
            return response



def TableIcon_excel(request):
    irTypeVal = request.GET.get('typeId')
    irDetailsVal = request.GET.get('zoneId')
    divId = request.GET.get('divId')
    irSearchDate = request.GET.get('searchDate')
    irSearchDateTO = request.GET.get('searchDateTo')
    irSearchDept = request.GET.get('searchDepartment')
    irSearchDesig = request.GET.get('searchDesignation')
    searchLevel = request.GET.get('searchLevel')
    card_type = request.GET.get('card_type')
    expandData = request.GET.get('expandData')
    mylist = json.loads(request.GET.get('mylist'))
    print(mylist)
    # irSearchRail = request.POST.get('irSearchRail')
    dataZoneWs = []

    cursor = connection.cursor()



    if irTypeVal == 'PU':
        dataZoneWs = list(models.railwayLocationMaster.objects.filter(location_type='PU').values('location_description', 'location_code').distinct().order_by('location_code'))
    elif irTypeVal == 'DIV':
        zone = irDetailsVal
        dataZoneWs = list(models.railwayLocationMaster.objects.filter(parent_location_code=zone, location_type='DIV').values('location_code', 'location_description').order_by('location_code'))
    elif irTypeVal == 'WS':
        zone = irDetailsVal
        dataZoneWs = list(models.railwayLocationMaster.objects.filter(parent_location_code=zone, location_type='WS').values('location_code', 'location_description').order_by('location_code'))

    if irTypeVal == 'ZR':
        irTypeValData = ['ZR', 'DIV', 'WS']
    elif irTypeVal == 'IR':
        irTypeValData = ['ZR', 'DIV', 'WS', 'PU']
    elif irTypeVal == 'HQ':
        irTypeValData = ['ZR']
    else:
        irTypeValData = [irTypeVal]

    if irDetailsVal == '':
        allLocationCodeData = tuple(models.railwayLocationMaster.objects.filter(location_type__in=irTypeValData).values_list('location_code', flat=True).distinct())
    else:
        irPathVal1 = irDetailsVal
        allLocationCodeData = list(models.railwayLocationMaster.objects.filter(Q(parent_location_code=irDetailsVal)).values_list('location_code', flat=True).distinct())
        allLocationCodeData.append(irDetailsVal)
        allLocationCodeData = tuple(allLocationCodeData)

    if divId != '':
                irPathVal2 = divId
                allLocationCodeData = tuple([divId])
                irTypeValData = [irTypeVal]

    # Rest of your code...

    if irSearchDept == 'All':
        irSearchDept = ""
        allDepartmentData = tuple(models.departMast.objects.values_list('department_name', flat=True).distinct())

        if irDetailsVal == '':
            allDesignation = list(models.Level_Desig.objects.filter(rly_unit__in = models.railwayLocationMaster.objects.filter(location_type__in = irTypeValData).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('hierarchy_level','designation'))
        else:
            allDesignation = list(models.Level_Desig.objects.filter(rly_unit__in = models.railwayLocationMaster.objects.filter(Q(location_code=irDetailsVal) | Q(parent_location_code=irDetailsVal),location_type__in = irTypeValData).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('hierarchy_level','designation'))
        if divId != '':
            allDesignation = list(models.Level_Desig.objects.filter(rly_unit__in = models.railwayLocationMaster.objects.filter(Q(location_code=divId),location_type__in = irTypeValData).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('hierarchy_level','designation'))
        # Rest of your code...
    else:
        allDepartmentData = tuple(models.departMast.objects.filter(department_code=irSearchDept).values_list('department_name', flat=True).distinct())
        if irDetailsVal == '':
            allDesignation = list(models.Level_Desig.objects.filter(department_code=irSearchDept,rly_unit__in = models.railwayLocationMaster.objects.filter(location_type__in = irTypeValData).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('hierarchy_level','designation'))
        else:
            allDesignation = list(models.Level_Desig.objects.filter(department_code=irSearchDept,rly_unit__in = models.railwayLocationMaster.objects.filter(Q(location_code=irDetailsVal) | Q(parent_location_code=irDetailsVal),location_type__in = irTypeValData).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('hierarchy_level','designation'))
        if divId != '':
            allDesignation = list(models.Level_Desig.objects.filter(department_code=irSearchDept,rly_unit__in = models.railwayLocationMaster.objects.filter(Q(location_code=divId),location_type__in = irTypeValData).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('hierarchy_level','designation'))
        # Rest of your code...

    # Rest of your code...
    if  irSearchDesig == 'All':
        irSearchDesig = ""
        allDesignationData = tuple(models.Level_Desig.objects.filter(rly_unit__in = models.railwayLocationMaster.objects.filter(location_type__in=['DIV','RB','ZR','WS','PU']).values('rly_unit_code')).values_list('designation_code',flat=True).distinct())
    else:
        irSearchDesig = int(irSearchDesig)
        allDesignationData = tuple([irSearchDesig])

    if irSearchDate == "":
        startDate = '2020-04-01'
        endDate = datetime.now().strftime('%Y-%m-%d')
    else:
        start1 = irSearchDate.split('/')
        end1 = irSearchDateTO.split('/')
        startDate = '20'+start1[2]+'-'+start1[1]+'-'+start1[0]
        endDate = '20'+end1[2]+'-'+end1[1]+'-'+end1[0]

    
    if searchLevel == 'GM':
        allDesignationData = tuple(models.Level_Desig.objects.filter(d_level = 'GM').values_list('designation_code',flat=True).distinct())
    elif searchLevel == 'DRM':
        allDesignationData = tuple(models.Level_Desig.objects.filter(d_level = 'DRM').values_list('designation_code',flat=True).distinct())
    elif searchLevel == 'BM':
        allDesignationData = tuple(models.Level_Desig.objects.filter(d_level = 'BM').values_list('designation_code',flat=True).distinct())
    elif searchLevel == 'SAG':
        desig_code = list(models.Level_Desig.objects.filter(pc7_levelmin__gte=14,pc7_levelmax__lte=15).values_list('designation_code',flat=True).distinct())
        allDesignationData = tuple(models.Level_Desig.objects.filter(designation_code__in=desig_code).values_list('designation_code',flat=True).distinct())
    elif searchLevel == 'JAG':
        desig_code = list(models.Level_Desig.objects.filter(pc7_levelmin__gte=12,pc7_levelmax__lte=13).values_list('designation_code',flat=True).distinct())
        allDesignationData = tuple(models.Level_Desig.objects.filter(designation_code__in=desig_code).values_list('designation_code',flat=True).distinct())
    elif searchLevel == 'SS/JS':
        desig_code = list(models.Level_Desig.objects.filter(pc7_levelmin__gte=8,pc7_levelmax__lte=11).values_list('designation_code',flat=True).distinct())
        allDesignationData = tuple(models.Level_Desig.objects.filter(designation_code__in=desig_code).values_list('designation_code',flat=True).distinct())

    allDesignation = [x for x in allDesignation if x['designation_code'] in allDesignationData]


   # CHECK FOR CHEKBOX FILTER
    if (('Pending' in mylist and 'Overdue' in mylist and 'Priority' in mylist) or ('Overdue' in mylist and 'Priority' in mylist) ):
        checkcol = "and (overdue_flag = 1 and priority = 1) and item_status in (1,2,3)"
    elif (('Pending' in mylist and 'Overdue' in mylist) or ('Overdue' in mylist) ):
        checkcol = "and overdue_flag = 1 and item_status in (1,2,3)"
    elif (('Pending' in mylist and 'Priority' in mylist) or ('Priority' in mylist)):
        checkcol = "and priority = 1 and item_status in (1,2,3)"
    else:
        checkcol = "and item_status in (1,2,3)"
    print('col',checkcol)


    # filter of STM, SEM, TRN, OTH

    if card_type in ['STM','SEM','TRN']:
        print('station ')
        column_name = 'item_status != 0 and location_table ='
        value = "'"+card_type+"'"
        column_name_insp = 'insp_status in'
        value_insp = (1,2,3,4)
        column_name_mark = 'marked_officer_status in'
        value_mark = (1,2,3,4)
    elif card_type == 'OTH':
        print('not station ')
        column_name = 'item_status != 0 and location_table in'
        value = ('DLS','RRM','HOS','ORL')
        column_name_insp = 'insp_status in'
        value_insp = (1,2,3,4)
        column_name_mark = 'marked_officer_status in'
        value_mark = (1,2,3,4)
    else:
        print('not station ')
        column_name = 'item_status != 0 and location_table in'
        value = ('STM','SEM','TRN','DLS','RRM','HOS','ORL')
        column_name_insp = 'insp_status in'
        value_insp = (1,2,3,4)
        column_name_mark = 'marked_officer_status in'
        value_mark = (1,2,3,4)
   
    #  case 1 on click of any of the cards
    
    print('card_type',card_type,expandData,irTypeValData)
    print('card_type',allDepartmentData)

    if(expandData == "True"):
        print('expand')
        cursor.execute('''select marked_hq_code, marked_location_code, location_val,location_table,
                        COUNT(DISTINCT inspection_no) AS total_inspection_count,
                        COUNT(DISTINCT item_no) AS distinct_item_count,
                        COUNT(DISTINCT inspection_no) FILTER (WHERE insp_status in (1, 2, 3 )) AS pending_inspection_count,
                        COUNT(DISTINCT item_no) FILTER (WHERE insp_status in (1, 2, 3)) AS pending_item_count,
                        count(ps) FILTER (WHERE insp_status in (1, 2,3)),
                        count(es) FILTER (WHERE insp_status in (1, 2,3)), 
                        count(oth) FILTER (WHERE insp_status in (1, 2,3)), 
                        count(ni) FILTER (WHERE insp_status in (1, 2,3)), 
                        count(si) FILTER (WHERE insp_status in (1, 2,3)),
                        count(di) FILTER (WHERE insp_status in (1, 2,3))
                        from insp_marked_sumry where marked_location_type in {}
                        and marked_location_code in {} and inspected_on between '{}' and '{}'    
                        and insp_desig_code in {} and insp_dept in {} and insp_status<>0 and item_status<>0
                        and location_table in {}  {}
                        GROUP BY marked_hq_code, marked_location_code, location_val,location_table;'''.format(
                        tuple(irTypeValData), allLocationCodeData, startDate,
                        endDate, allDesignationData, allDepartmentData,value,col))

        data = cursor.fetchall()
    

    elif(irTypeVal == 'IR'):
        print('ir1station')
        cursor.execute('''select marked_hq_code,
                        COUNT(DISTINCT inspection_no) AS total_inspection_count,
                        COUNT(DISTINCT item_no) AS distinct_item_count,
                        COUNT(DISTINCT inspection_no) FILTER (WHERE insp_status in (1, 2, 3 )) AS pending_inspection_count,
                        COUNT(DISTINCT item_no) FILTER (WHERE item_status in (1, 2, 3)) AS pending_item_count,
                        count(ps) FILTER (WHERE item_status in (1, 2,3)),
                        count(es) FILTER (WHERE item_status in (1, 2,3)), 
                        count(oth) FILTER (WHERE item_status in (1, 2,3)), 
                        count(ni) FILTER (WHERE item_status in (1, 2,3)), 
                        count(si) FILTER (WHERE item_status in (1, 2,3)),
                        count(di) FILTER (WHERE item_status in (1, 2,3))
                        from insp_marked_sumry WHERE 
                        marked_location_type in {}
                        and marked_location_code in {} and inspected_on between '{}' and '{}'    
                        and insp_desig_code in {} and insp_dept in {} and {} {}  {}  
                        GROUP BY marked_hq_code; '''.format(
                        tuple(irTypeValData), allLocationCodeData, startDate,
                            endDate, allDesignationData, allDepartmentData,column_name,value,checkcol))

        data = cursor.fetchall()
    
    # elif(irTypeVal == 'IR' and card_type != 'Station'):
    #     print('ir1notstation')
    #     cursor.execute('''select marked_hq_code,
    #                     COUNT(DISTINCT inspection_no) AS total_inspection_count,
    #                     COUNT(DISTINCT item_no) AS distinct_item_count,
    #                     COUNT(DISTINCT inspection_no) FILTER (WHERE insp_status in (1, 2, 3 )) AS pending_inspection_count,
    #                     COUNT(DISTINCT item_no) FILTER (WHERE insp_status in (1, 2, 3)) AS pending_item_count,
    #                     sum(ps)::int,
    #                     sum(es)::int, sum(oth)::int, sum(ni)::int, sum(si)::int,
    #                     sum(di)::int
    #                     from insp_marked_sumry where marked_location_type in %s
    #                     and marked_location_code in %s and inspected_on between %s and %s    
    #                     and insp_desig_code in %s and insp_dept in %s and insp_status<>0 and item_status<>0 
    #                     and location_table in %s
    #                     GROUP BY marked_hq_code;''',
    #                     [tuple(irTypeValData), allLocationCodeData, startDate,
    #                     endDate, allDesignationData, allDepartmentData,value])

    #     data = cursor.fetchall()
    
    elif(irTypeVal == 'ZR' and card_type == 'Station'):
        print('inside zr')
        print('jkdjie',tuple(irTypeValData), allLocationCodeData)
        cursor.execute('''select marked_hq_code,
                        COUNT(DISTINCT inspection_no) AS total_inspection_count,
                        COUNT(DISTINCT item_no) AS distinct_item_count,
                        COUNT(DISTINCT inspection_no) FILTER (WHERE insp_status in (1, 2, 3 )) AS pending_inspection_count,
                        COUNT(DISTINCT item_no) FILTER (WHERE insp_status in (1, 2, 3)) AS pending_item_count,
                        count(ps) FILTER (WHERE insp_status in (1, 2,3)),
                        count(es) FILTER (WHERE insp_status in (1, 2,3)), 
                        count(oth) FILTER (WHERE insp_status in (1, 2,3)), 
                        count(ni) FILTER (WHERE insp_status in (1, 2,3)), 
                        count(si) FILTER (WHERE insp_status in (1, 2,3)),
                        count(di) FILTER (WHERE insp_status in (1, 2,3))
                        from insp_marked_sumry where marked_location_type in %s
                        and marked_location_code in %s and inspected_on between %s and %s    
                        and insp_desig_code in %s and insp_dept in %s and insp_status<>0 and item_status<>0 
                        and location_table in %s
                        GROUP BY marked_hq_code;''',
                        [tuple(irTypeValData), allLocationCodeData, startDate,
                        endDate, allDesignationData, allDepartmentData,value])

        data = cursor.fetchall()
    
    elif(irTypeVal == 'ZR' and card_type != 'Station'):
        print('inside zr')
        print('jkdjie',tuple(irTypeValData), allLocationCodeData)
        cursor.execute('''select marked_hq_code,
                        COUNT(DISTINCT inspection_no) AS total_inspection_count,
                        COUNT(DISTINCT item_no) AS distinct_item_count,
                        COUNT(DISTINCT inspection_no) FILTER (WHERE insp_status in (1, 2, 3 )) AS pending_inspection_count,
                        COUNT(DISTINCT item_no) FILTER (WHERE insp_status in (1, 2, 3)) AS pending_item_count,
                        count(ps) FILTER (WHERE insp_status in (1, 2,3)),
                        count(es) FILTER (WHERE insp_status in (1, 2,3)), 
                        count(oth) FILTER (WHERE insp_status in (1, 2,3)), 
                        count(ni) FILTER (WHERE insp_status in (1, 2,3)), 
                        count(si) FILTER (WHERE insp_status in (1, 2,3)),
                        count(di) FILTER (WHERE insp_status in (1, 2,3))
                        from insp_marked_sumry where marked_location_type in %s
                        and marked_location_code in %s and inspected_on between %s and %s    
                        and insp_desig_code in %s and insp_dept in %s and insp_status<>0 and item_status<>0 
                        and location_table in %s
                        GROUP BY marked_hq_code;''',
                        [tuple(irTypeValData), allLocationCodeData, startDate,
                        endDate, allDesignationData, allDepartmentData,value])

        data = cursor.fetchall()
    
    else:
        print('else2')
        cursor.execute('''select marked_hq_code, marked_location_code, location_val,location_table,
                        COUNT(DISTINCT inspection_no) AS total_inspection_count,
                        COUNT(DISTINCT item_no) AS distinct_item_count,
                        COUNT(DISTINCT inspection_no) FILTER (WHERE insp_status in (1, 2, 3 )) AS pending_inspection_count,
                        COUNT(DISTINCT item_no) FILTER (WHERE insp_status in (1, 2, 3)) AS pending_item_count,
                        count(ps) FILTER (WHERE insp_status in (1, 2,3)),
                        count(es) FILTER (WHERE insp_status in (1, 2,3)), 
                        count(oth) FILTER (WHERE insp_status in (1, 2,3)), 
                        count(ni) FILTER (WHERE insp_status in (1, 2,3)), 
                        count(si) FILTER (WHERE insp_status in (1, 2,3)),
                        count(di) FILTER (WHERE insp_status in (1, 2,3))
                        from insp_marked_sumry where marked_location_type in %s
                        and marked_location_code in %s and inspected_on between %s and %s    
                        and insp_desig_code in %s and insp_dept in %s and insp_status<>0 and item_status<>0
                        and location_table in %s
                        GROUP BY marked_hq_code, marked_location_code, location_val,location_table;''',
                        [tuple(irTypeValData), allLocationCodeData, startDate,
                        endDate, allDesignationData, allDepartmentData,value])

        data = cursor.fetchall()
    
    print('dataval',data)

    context = {
        'data': data,
    }
    heading2="Pending Count For "+irDetailsVal+" From "+irSearchDate+" To "+irSearchDateTO
    response = HttpResponse(content_type='application/ms-excel')
    filename = heading2 + ".xls"
    response['Content-Disposition'] = f'attachment; filename="{filename}"'
    wb = Workbook()
    sheet1 = wb.add_sheet('Sheet 1')

    style = xlwt.easyxf("alignment: wrap off;font: bold on;borders: top_color black, bottom_color black, right_color black, left_color black;")
    style1 = xlwt.easyxf("alignment: wrap off;borders: top_color black, bottom_color black, right_color black, left_color black;")
    style2 = xlwt.easyxf("alignment: wrap off;font: bold on;align:")
    style3 = xlwt.easyxf("alignment: wrap off;font: bold on;align: horiz center;")

    heading1 = "E-INSPECTION"
    row = 1
    col = 7
    sheet1.write_merge(row, row, col, col + 1, heading1, style=style2)
    row = 3
    col = 7
    sheet1.write(row, col, heading2, style=style3)

    row = 5
    col = 0
    attributes = ["Sr.No.", "Rly./Org.", "Total count Insp.", "Total count Item", "Pending count Insp", "Pending count Item", "Pendency count Psgn Safety", "Pendency count Emply Safety","Pendency count Other","Pendency count Night Insp","Pendency count Surprise Insp","Pendency count Drive"]
    col_width = {col: len(attr) for col, attr in enumerate(attributes)}
    for idx, attribute in enumerate(attributes):
        sheet1.write_merge(row, row + 0, col, col, attribute, style=style)
        col_width[col] = max(col_width[col], len(attribute))
        col += 1

    data = context['data']

    row = 6
    for index, item in enumerate(data, start=1):
        sheet1.write(row, 0, index, style=style1)
        sheet1.write(row, 1, item[0], style=style1)
        sheet1.write(row, 2, item[1], style=style1)
        sheet1.write(row, 3, item[2], style=style1)
        sheet1.write(row, 4, item[3], style=style1)
        sheet1.write(row, 5, item[4], style=style1)              
        sheet1.write(row, 6, item[5], style=style1)
        sheet1.write(row, 7, item[6], style=style1)
        sheet1.write(row, 8, item[7], style=style1)
        sheet1.write(row, 9, item[8], style=style1)              
        sheet1.write(row, 10, item[9], style=style1)
        sheet1.write(row, 11, item[10], style=style1)

        for col, content in enumerate([index, item[0], item[1], item[2], item[3], item[4], item[5], item[6], item[7], item[8], item[9], item[10]]):
            col_width[col] = max(col_width[col], len(str(content)))
       
        row += 1

    for col, width in col_width.items():
        sheet1.col(col).width = (width + 4) * 256

    wb.save(response)
    return response


def IconData_excel(request):
    irTypeVal = request.GET.get('typeId')
    irDetailsVal = request.GET.get('zoneId')
    divId = request.GET.get('divId')
    irSearchDate = request.GET.get('searchDate')
    irSearchDateTO = request.GET.get('searchDateTo')
    irSearchDept = request.GET.get('searchDepartment')
    irSearchDesig = request.GET.get('searchDesignation')
    searchLevel = request.GET.get('searchLevel')
    division = request.GET.get('selectedDivision')
    card_type = request.GET.get('card_type')
    card = request.GET.get('card')
    prev_card = request.GET.get('prev_card')
    INSPITEMTYPE = request.GET.get('INSPITEMTYPE')
    mylist = json.loads(request.GET.get('mylist'))
    expandData = request.GET.get('expandData')
    print(mylist)
    dataZoneWs = []

    cursor = connection.cursor()

    if irTypeVal == 'PU':
        dataZoneWs = list(models.railwayLocationMaster.objects.filter(location_type='PU').values('location_description', 'location_code').distinct().order_by('location_code'))
    elif irTypeVal == 'DIV':
        zone = irDetailsVal
        dataZoneWs = list(models.railwayLocationMaster.objects.filter(parent_location_code=zone, location_type='DIV').values('location_code', 'location_description').order_by('location_code'))
    elif irTypeVal == 'WS':
        zone = irDetailsVal
        dataZoneWs = list(models.railwayLocationMaster.objects.filter(parent_location_code=zone, location_type='WS').values('location_code', 'location_description').order_by('location_code'))

    if irTypeVal == 'ZR':
        irTypeValData = ['ZR', 'DIV', 'WS']
    elif irTypeVal == 'IR':
        irTypeValData = ['ZR', 'DIV', 'WS', 'PU']
    elif irTypeVal == 'HQ':
        irTypeValData = ['ZR','None']
    else:
        irTypeValData = [irTypeVal,'None']

    if irDetailsVal == '':
        allLocationCodeData = tuple(models.railwayLocationMaster.objects.filter(location_type__in=irTypeValData).values_list('location_code', flat=True).distinct())
    else:
        irPathVal1 = irDetailsVal
        allLocationCodeData = list(models.railwayLocationMaster.objects.filter(Q(parent_location_code=irDetailsVal)).values_list('location_code', flat=True).distinct())
        allLocationCodeData.append(irDetailsVal)
        allLocationCodeData = tuple(allLocationCodeData)

    if divId != '':
                irPathVal2 = divId
                allLocationCodeData = tuple([divId,'None'])
                irTypeValData = [irTypeVal,'None']

    # Rest of your code...

    if irSearchDept == 'All':
        irSearchDept = ""
        allDepartmentData = tuple(models.departMast.objects.values_list('department_name', flat=True).distinct())

        if irDetailsVal == '':
            allDesignation = list(models.Level_Desig.objects.filter(rly_unit__in = models.railwayLocationMaster.objects.filter(location_type__in = irTypeValData).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('hierarchy_level','designation'))
        else:
            allDesignation = list(models.Level_Desig.objects.filter(rly_unit__in = models.railwayLocationMaster.objects.filter(Q(location_code=irDetailsVal) | Q(parent_location_code=irDetailsVal),location_type__in = irTypeValData).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('hierarchy_level','designation'))
        if divId != '':
            allDesignation = list(models.Level_Desig.objects.filter(rly_unit__in = models.railwayLocationMaster.objects.filter(Q(location_code=divId),location_type__in = irTypeValData).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('hierarchy_level','designation'))
        # Rest of your code...
    else:
        allDepartmentData = tuple([models.departMast.objects.get(department_code=irSearchDept).department_name,'xyz'])
        if irDetailsVal == '':
            allDesignation = list(models.Level_Desig.objects.filter(department_code=irSearchDept,rly_unit__in = models.railwayLocationMaster.objects.filter(location_type__in = irTypeValData).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('hierarchy_level','designation'))
        else:
            allDesignation = list(models.Level_Desig.objects.filter(department_code=irSearchDept,rly_unit__in = models.railwayLocationMaster.objects.filter(Q(location_code=irDetailsVal) | Q(parent_location_code=irDetailsVal),location_type__in = irTypeValData).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('hierarchy_level','designation'))
        if divId != '':
            allDesignation = list(models.Level_Desig.objects.filter(department_code=irSearchDept,rly_unit__in = models.railwayLocationMaster.objects.filter(Q(location_code=divId),location_type__in = irTypeValData).values('rly_unit_code')).values('designation_code','designation','d_level').order_by('hierarchy_level','designation'))
        # Rest of your code...

    # Rest of your code...
    if  irSearchDesig == 'All':
        irSearchDesig = ""
        allDesignationData = tuple(models.Level_Desig.objects.filter(rly_unit__in = models.railwayLocationMaster.objects.filter(location_type__in=['DIV','RB','ZR','WS','PU']).values('rly_unit_code')).values_list('designation_code',flat=True).distinct())
    else:
        # irSearchDesig = int(irSearchDesig)
        allDesignationData = tuple([irSearchDesig,-1])

    if irSearchDate == "":
        startDate = '2020-04-01'
        endDate = datetime.now().strftime('%Y-%m-%d')
    else:
        start1 = irSearchDate.split('/')
        end1 = irSearchDateTO.split('/')
        startDate = '20'+start1[2]+'-'+start1[1]+'-'+start1[0]
        endDate = '20'+end1[2]+'-'+end1[1]+'-'+end1[0]

   
    if searchLevel == 'GM':
        allDesignationData = tuple(models.Level_Desig.objects.filter(d_level = 'GM').values_list('designation_code',flat=True).distinct())
    elif searchLevel == 'DRM':
        allDesignationData = tuple(models.Level_Desig.objects.filter(d_level = 'DRM').values_list('designation_code',flat=True).distinct())
    elif searchLevel == 'BM':
        allDesignationData = tuple(models.Level_Desig.objects.filter(d_level = 'BM').values_list('designation_code',flat=True).distinct())
    elif searchLevel == 'SAG':
        desig_code = list(models.Level_Desig.objects.filter(pc7_levelmin__gte=14,pc7_levelmax__lte=15).values_list('designation_code',flat=True).distinct())
        allDesignationData = tuple(models.Level_Desig.objects.filter(designation_code__in=desig_code).values_list('designation_code',flat=True).distinct())
    elif searchLevel == 'JAG':
        desig_code = list(models.Level_Desig.objects.filter(pc7_levelmin__gte=12,pc7_levelmax__lte=13).values_list('designation_code',flat=True).distinct())
        allDesignationData = tuple(models.Level_Desig.objects.filter(designation_code__in=desig_code).values_list('designation_code',flat=True).distinct())
    elif searchLevel == 'SS/JS':
        desig_code = list(models.Level_Desig.objects.filter(pc7_levelmin__gte=8,pc7_levelmax__lte=11).values_list('designation_code',flat=True).distinct())
        allDesignationData = tuple(models.Level_Desig.objects.filter(designation_code__in=desig_code).values_list('designation_code',flat=True).distinct())

    allDesignation = [x for x in allDesignation if x['designation_code'] in allDesignationData]

    # FILTER CODES 
    # FILTER ACCORDING TO THE CARD TYPE 
    if INSPITEMTYPE == 'Other Items':
        print('hulala')
        col = "item_type = 0"

    elif INSPITEMTYPE == 'Employee Safety' :
        col = "item_type = 2"

    if INSPITEMTYPE == 'Passenger Safety':
        col = "item_type = 1"

    elif INSPITEMTYPE == 'Night Inspection':
        col = "insp_type = 2"

    elif INSPITEMTYPE == 'Surprise Inspection':
        col = "insp_type = 3"

    elif INSPITEMTYPE == 'Drive Inspection':
        col = "insp_type = 1"


    # CHECK FOR CHEKBOX FILTER
    if (('Pending' in mylist and 'Overdue' in mylist and 'Priority' in mylist) or ('Overdue' in mylist and 'Priority' in mylist) ):
        checkcol = "and (overdue_flag = 1 and priority = 1) "
    elif (('Pending' in mylist and 'Overdue' in mylist) or ('Overdue' in mylist) ):
        checkcol = "and overdue_flag = 1 "
    elif (('Pending' in mylist and 'Priority' in mylist) or ('Priority' in mylist)):
        checkcol = "and priority = 1 "
    else:
        checkcol = "--"
    print('col',checkcol)



    # filter of STM, SEM, TRN, OTH

    if card_type in ['STM','SEM','TRN']:
        print('station ')
        column_name = 'item_status != 0 and location_table ='
        value = "'"+card_type+"'"
        column_name_insp = 'insp_status in'
        value_insp = (1,2,3,4)
        column_name_mark = 'marked_officer_status in'
        value_mark = (1,2,3,4)
    elif card_type == 'OTH':
        print('not station ')
        column_name = 'item_status != 0 and location_table in'
        value = ('DLS','RRM','HOS','ORL')
        column_name_insp = 'insp_status in'
        value_insp = (1,2,3,4)
        column_name_mark = 'marked_officer_status in'
        value_mark = (1,2,3,4)
    else:
        print('not station ')
        column_name = 'item_status != 0 and location_table in'
        value = ('STM','SEM','TRN','DLS','RRM','HOS','ORL')
        column_name_insp = 'insp_status in'
        value_insp = (1,2,3,4)
        column_name_mark = 'marked_officer_status in'
        value_mark = (1,2,3,4)
   
    #  case 1 on click of any of the cards

    if(expandData == "True"):
        cursor.execute('''SELECT marked_hq_code,marked_location_code,location_val,location_table,
                        COUNT(DISTINCT inspection_no) AS total_inspection_count,
                        COUNT(DISTINCT item_no) AS distinct_item_count,
                        COUNT(DISTINCT inspection_no) FILTER (WHERE insp_status in (1, 2, 3 )) AS pending_inspection_count,
                        COUNT(DISTINCT item_no) FILTER (WHERE insp_status in (1, 2, 3)) AS pending_item_count,
                        COUNT(DISTINCT inspection_no) FILTER (WHERE overdue_flag=1) AS overdue_inspection_count,
                        COUNT(DISTINCT item_no) FILTER (WHERE overdue_flag=1) AS overdue_item_count,
                        COUNT(CASE WHEN pendency_days > 7 THEN 1 ELSE NULL END) AS pendency_days_gt_7,
                        COUNT(CASE WHEN pendency_days > 30 THEN 1 ELSE NULL END) AS pendency_days_gt_30,
                        COUNT(CASE WHEN pendency_days > 90 THEN 1 ELSE NULL END) AS pendency_days_gt_90,
                        COUNT(CASE WHEN pendency_days > 180 THEN 1 ELSE NULL END) AS pendency_days_gt_180
                    FROM
                        insp_marked_sumry
                    WHERE 
                    marked_location_type in {}
                    and marked_location_code in {} and inspected_on between '{}' and '{}'    
                    and insp_desig_code in {} and insp_dept in {} and {} {} and {} {} 
                    GROUP BY marked_hq_code, marked_location_code, location_val,location_table; '''.format(
                    tuple(irTypeValData), allLocationCodeData, startDate,
                        endDate, allDesignationData, allDepartmentData,column_name,value,col,checkcol))
        data = cursor.fetchall()

    
        context = {
            'data': data,
        }
        # print('huhuhD',data)
        # return JsonResponse(context, safe=False)


    elif irTypeVal=='IR':
        print('fuuuuuuuuuuuu')
        cursor.execute('''SELECT marked_hq_code,
                            COUNT(DISTINCT inspection_no)  FILTER (WHERE item_status in (1, 2, 3, 4)) AS total_inspection_count,
                            COUNT(DISTINCT item_no)  FILTER (WHERE item_status in (1, 2, 3, 4)) AS distinct_item_count,
                            COUNT(DISTINCT inspection_no) FILTER (WHERE insp_status in (1, 2, 3 )) AS pending_inspection_count,
                            COUNT(DISTINCT item_no) FILTER (WHERE insp_status in (1, 2, 3)) AS pending_item_count,
                            COUNT(DISTINCT inspection_no) FILTER (WHERE overdue_flag=1) AS overdue_inspection_count,
                            COUNT(DISTINCT item_no) FILTER (WHERE overdue_flag=1) AS overdue_item_count,
                            COUNT(DISTINCT CASE WHEN pendency_days > 7 THEN item_no ELSE NULL END) AS distinct_item_count_pendency_gt_7,
                            COUNT(DISTINCT CASE WHEN pendency_days > 30 THEN item_no ELSE NULL END) AS distinct_item_count_pendency_gt_30,
                            COUNT(DISTINCT CASE WHEN pendency_days > 90 THEN item_no ELSE NULL END) AS distinct_item_count_pendency_gt_90,
                            COUNT(DISTINCT CASE WHEN pendency_days > 180 THEN item_no ELSE NULL END) AS distinct_item_count_pendency_gt_180
                        FROM
                            insp_marked_sumry
                        WHERE 
                        marked_location_type in {}
                        and marked_location_code in {} and inspected_on between '{}' and '{}'    
                        and insp_desig_code in {} and insp_dept in {} and {} {} and {} {} 
                        GROUP BY marked_hq_code; '''.format(
                        tuple(irTypeValData), allLocationCodeData, startDate,
                            endDate, allDesignationData, allDepartmentData,column_name,value,col,checkcol))

        data = cursor.fetchall()
    
        
        context = {
            'data': data,
        }
        # print('huhuhR',data)
        # return JsonResponse(context, safe=False)
    
    elif irTypeVal == "ZR":
        cursor.execute('''SELECT marked_hq_code,marked_location_code,
                        COUNT(DISTINCT inspection_no) AS total_inspection_count,
                        COUNT(DISTINCT item_no) AS distinct_item_count,
                        COUNT(DISTINCT inspection_no) FILTER (WHERE insp_status in (1, 2, 3 )) AS pending_inspection_count,
                        COUNT(DISTINCT item_no) FILTER (WHERE insp_status in (1, 2, 3)) AS pending_item_count,
                        COUNT(DISTINCT inspection_no) FILTER (WHERE overdue_flag=1) AS overdue_inspection_count,
                        COUNT(DISTINCT item_no) FILTER (WHERE overdue_flag=1) AS overdue_item_count,
                        COUNT(DISTINCT CASE WHEN pendency_days > 7 THEN item_no ELSE NULL END) AS distinct_item_count_pendency_gt_7,
                        COUNT(DISTINCT CASE WHEN pendency_days > 30 THEN item_no ELSE NULL END) AS distinct_item_count_pendency_gt_30,
                        COUNT(DISTINCT CASE WHEN pendency_days > 90 THEN item_no ELSE NULL END) AS distinct_item_count_pendency_gt_90,
                        COUNT(DISTINCT CASE WHEN pendency_days > 180 THEN item_no ELSE NULL END) AS distinct_item_count_pendency_gt_180
                    FROM
                        insp_marked_sumry
                    WHERE 
                        marked_location_type in {}
                        and marked_location_code in {} and inspected_on between '{}' and '{}'    
                        and insp_desig_code in {} and insp_dept in {} and {} {} and {} {} 
                        GROUP BY marked_hq_code,marked_location_code; '''.format(
                        tuple(irTypeValData), allLocationCodeData, startDate,
                            endDate, allDesignationData, allDepartmentData,column_name,value,col,checkcol))

        data = cursor.fetchall()

    
        context = {
            'data': data,
        }
        # print('huhuhD',data)
        # return JsonResponse(context, safe=False)
    
    else:
        print('else33')
        cursor.execute('''SELECT marked_hq_code,marked_location_code,location_val,location_table,
                        COUNT(DISTINCT inspection_no) AS total_inspection_count,
                        COUNT(DISTINCT item_no) AS distinct_item_count,
                        COUNT(DISTINCT inspection_no) FILTER (WHERE insp_status in (1, 2, 3 )) AS pending_inspection_count,
                        COUNT(DISTINCT item_no) FILTER (WHERE insp_status in (1, 2, 3)) AS pending_item_count,
                        COUNT(DISTINCT inspection_no) FILTER (WHERE overdue_flag=1) AS overdue_inspection_count,
                        COUNT(DISTINCT item_no) FILTER (WHERE overdue_flag=1) AS overdue_item_count,
                        COUNT(DISTINCT CASE WHEN pendency_days > 7 THEN item_no ELSE NULL END) AS distinct_item_count_pendency_gt_7,
                        COUNT(DISTINCT CASE WHEN pendency_days > 30 THEN item_no ELSE NULL END) AS distinct_item_count_pendency_gt_30,
                        COUNT(DISTINCT CASE WHEN pendency_days > 90 THEN item_no ELSE NULL END) AS distinct_item_count_pendency_gt_90,
                        COUNT(DISTINCT CASE WHEN pendency_days > 180 THEN item_no ELSE NULL END) AS distinct_item_count_pendency_gt_180
                    FROM
                        insp_marked_sumry
                    WHERE 
                        marked_location_type in {}
                        and marked_location_code in {} and inspected_on between '{}' and '{}'    
                        and insp_desig_code in {} and insp_dept in {} and {} {} and {} {} 
                        GROUP BY marked_hq_code, marked_location_code, location_val,location_table; '''.format(
                        tuple(irTypeValData), allLocationCodeData, startDate,
                            endDate, allDesignationData, allDepartmentData,column_name,value,col,checkcol))

        data = cursor.fetchall()

    
        context = {
            'data': data,
        }
    if irTypeVal == 'IR':
        heading2 ="Pending Count For "+irTypeVal+" ("+INSPITEMTYPE+") From "+irSearchDate+" To "+irSearchDateTO
    else :
        heading2="Pending Count For "+irDetailsVal+" ("+INSPITEMTYPE+") From "+irSearchDate+" To "+irSearchDateTO
    response = HttpResponse(content_type='application/ms-excel')
    filename = heading2 + ".xls"
    response['Content-Disposition'] = f'attachment; filename="{filename}"'
    wb = Workbook()
    sheet1 = wb.add_sheet('Sheet 1')

    style = xlwt.easyxf("alignment: wrap off;font: bold on;borders: top_color black, bottom_color black, right_color black, left_color black;")
    style1 = xlwt.easyxf("alignment: wrap off;borders: top_color black, bottom_color black, right_color black, left_color black;")
    style2 = xlwt.easyxf("alignment: wrap off;font: bold on;align:")
    style3 = xlwt.easyxf("alignment: wrap off;font: bold on;align: horiz center;")

    heading1 = "E-INSPECTION"
    row = 1
    col = 6
    sheet1.write_merge(row, row, col, col + 1, heading1, style=style2)
    row = 3
    col = 6
    sheet1.write(row, col, heading2, style=style3)

    row = 5
    col = 0
    attributes = ["Sr.No.", "Rly./Org.", "Total count Insp.", "Total count Item", "Pending cout Insp", "Pending cout Item", "Overdue count Insp", "Overdue count Item","Pendency count >7 Days","Pendency count >30 Days","Pendency count >90 Days","Pendency count >180 Days"]
    col_width = {col: len(attr) for col, attr in enumerate(attributes)}
    for idx, attribute in enumerate(attributes):
        sheet1.write_merge(row, row + 0, col, col, attribute, style=style)
        col_width[col] = max(col_width[col], len(attribute))
        col += 1

    data = context['data']

    row = 6
    for index, item in enumerate(data, start=1):
        sheet1.write(row, 0, index, style=style1)
        sheet1.write(row, 1, item[0], style=style1)
        sheet1.write(row, 2, item[1], style=style1)
        sheet1.write(row, 3, item[2], style=style1)
        sheet1.write(row, 4, item[3], style=style1)
        sheet1.write(row, 5, item[4], style=style1)              
        sheet1.write(row, 6, item[5], style=style1)
        sheet1.write(row, 7, item[6], style=style1)
        sheet1.write(row, 8, item[7], style=style1)
        sheet1.write(row, 9, item[8], style=style1)              
        sheet1.write(row, 10, item[9], style=style1)
        sheet1.write(row, 11, item[10], style=style1)

        for col, content in enumerate([index, item[0], item[1], item[2], item[3], item[4], item[5], item[6], item[7], item[8], item[9], item[10]]):
            col_width[col] = max(col_width[col], len(str(content)))
       
        row += 1

    for col, width in col_width.items():
        sheet1.col(col).width = (width + 4) * 256

    wb.save(response)
    return response


######


def forward_officer_phase2(request):
    if request.method == "GET" or request.is_ajax():
        cuser=request.user.username
        if request.user.user_role == 'guest':
            cuser=request.user.guest_email
            request.user.email=request.user.guest_email
        desigid=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].designation_code
        marked_no=json.loads(request.GET.get('marked_no'))

        marks=[]
        if '[' in marked_no:
            marked_no=(marked_no.strip('[')).strip(']')
            marked_no=marked_no.split(',')
            for m in marked_no:
                m=((m.strip('"')).strip(" ")).strip("'")
                marks.append(m)
            marked_no=marks
        furtherFwd=request.GET.get('furtherFwd')
        if furtherFwd is '0':
            furtherFwd=None

        for_desigs=[]
        officers = []
        if marked_no:
            officers=list(m2.einsp_forward_marked.objects.filter(marked_no__in=marked_no, further_forward=furtherFwd).values_list('forwardTo_id', flat=True))
        if officers:
            for_desigs=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=officers).values_list('designation',flat=True))
    
        # print(for_desigs)
        context={"for_desigs":for_desigs}
        return JsonResponse(context,safe = False)

def compliance_forward(request,inspection_no):
    # try:
        cuser=request.user
        if request.user.user_role == 'guest':
            cuser=request.user.guest_email
            request.user.email=request.user.guest_email
        desigid=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user)).values()

        rly_code=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].rly_unit.location_code
        rly_unit_code=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].rly_unit.rly_unit_code
        parent_loc=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].rly_unit.parent_location_code
        parent_loc_id=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].rly_unit.parent_rly_unit_code
        div_code=rly_code
        if parent_loc!='RB':
            rly_code=parent_loc
            rly_unit_code=parent_loc_id


        list1=models.railwayLocationMaster.objects.filter(location_type_desc__in=['RAILWAY BOARD', 'PRODUCTION UNIT', 'HEAD QUATER', 'PSU', 'INSTITUTE']).values('location_code').distinct().order_by('location_code')
        list2=[]
        for i in list1:
            list2.append(i['location_code'])
        list3=models.railwayLocationMaster.objects.filter(location_type_desc__in=['DIVISION','WORKSHOP', 'STORE', 'CONSTRUCTION', 'OFFICE'],parent_location_code=rly_code).distinct().values('location_code').order_by('location_code')
        list4=[]
        for i in list3:
            list4.append(i['location_code'])  
        list5=models.departMast.objects.all().values('department_name').distinct().order_by('department_name')
        list6=[]
        for i in list5:
            list6.append(i['department_name']) 
        pclevel=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=desigid[0]['designation_code']).values().order_by())
        designation=models.Level_Desig.objects.exclude(delete_flag=True).exclude(Q(empno_id=None),designation_code=desigid[0]['designation_code'], delete_flag=True).filter(pc7_levelmin__lte=pclevel[0]['pc7_levelmin'],rly_unit=rly_unit_code).distinct().values('designation').order_by('-pc7_levelmin')

        phase=request.GET.get('phase')
        listgrid=[]
        final_list=[]
        if phase == '2':
            marked_no = list(m2.einsp_forward_marked.objects.filter(forwardBy_id=desigid[0]['designation_code'],marked_no__eitemid__einspno=inspection_no).values_list('marked_no', flat=True))
            marked_nos = list(m2.einsp_marked.objects.exclude(revert=2).filter(eitemid__einspno=inspection_no, id__in=marked_no).values())

            insp_details=list(m2.einspection_details.objects.filter(einspno=inspection_no).values('einspno','instypeid_id','inspected_on','inspection_title','designation__designation','designation_id','created_by','inspection_note_no'))
            insp_details[0]['officer_desig']=insp_details[0]['designation__designation']
            names=m1.empmast.objects.filter(empno=insp_details[0]['created_by']).values('empname','empmname','emplname')
            insp_details[0]['insp_name']=''
            if names:
                insp_details[0]['insp_name']+=names[0]['empname']+' ' if names[0]['empname']!=None else ' '
                insp_details[0]['insp_name']+=names[0]['empmname']+' ' if names[0]['empmname']!=None else ' '
                insp_details[0]['insp_name']+=names[0]['emplname']+' ' if names[0]['emplname']!=None else ' '

            name=insp_details[0]['insp_name']
            details=insp_details

            for m in marked_nos:
                temp={}
                item_det=m2.einspection_item_detail.objects.filter(eitemid=m['eitemid_id']).values()
                question=m2.questionare_master.objects.filter(qid=item_det[0]['qid_id']).values()
                temp['item_no']=m['eitemid_id']
                temp['marked_no']=m['id']
                temp['question']=question[0]['activity']
                temp['report_act']=question[0]['report_act']
                temp['value']=item_det[0]['value']
                forwardss=[]
                forwarded_reply=list(m2.einsp_forward_marked.objects.filter(forwardBy_id=desigid[0]['designation_code'],marked_no=m['id']).values())
            
                if len(forwarded_reply):
                    for x in forwarded_reply:
                        tem={}
                        tem['forwardTo']=x['forwardTo_id']
                        tem['forwardBy']=x['forwardBy_id']
                        tem['designationBy']=x['designationBy']
                        tem['designationTo']=x['designationTo']
                        tem['forwardStatus']=x['status_flag']
                        if x['status_flag'] == 3:
                            tem['stts'] = 'Rejected'
                        elif x['status_flag'] == 2:
                            tem['stts'] = 'Accepted'
                        else:
                            tem['stts'] = 'Pending'
                        tem['forward_on']=x['created_date'].strftime("%d/%m/%Y") if x['created_date'] else -1
                        tem['reply_on_forward']=x['reply_on'].strftime("%d/%m/%Y") if x['reply_on'] else -1
                        tem['compliance_forward']=x['compliance'] if x['compliance'] else 'NA'
                        tem['remarks_forward']=x['remarks'] if x['remarks'] else 'NA'
                        tem['rejected_on_fwd']=x['rejected_on'].strftime("%d/%m/%Y") if x['rejected_on'] else 'NA'
                        tem['forwardId']=x['forwardId']
                        tem['further_forward']=x['further_forward']
                        tem['further_forward_to']=str(list(m2.einsp_forward_marked.objects.filter(forwardBy_id=desigid[0]['designation_code'],marked_no_id=m['id'],parent_forward=tem['forwardId']).values_list('forwardTo__designation', flat=True)))
                        tem['further_forward_to']=(tem['further_forward_to'].strip(']')).strip('[')
                        forwardss.append(tem)
                temp['forwardss'] = forwardss

                listgrid.append(temp)
        else:
            details=m1.Inspection_details.objects.filter(inspection_no=inspection_no).values()
            name=details[0]['officer_name'] if details[0]['officer_name'] else 'NA'
            final_list=[]
            list_item=m1.Item_details.objects.filter(inspection_no=inspection_no).values().distinct()
            for i in list_item:
                list_mark=m1.Marked_Officers_forward.objects.filter(marked_no__marked_to=desigid[0]['designation_code'],marked_no__status_flag=1,marked_no__item_no=i['item_no'])
                if(list_mark.exists()):
                    temp={}
                    temp['item_db']=i['item_no']
                    temp['type']=i['type']
                    temp['item_no']=i['des_id']
                    temp['item_title']=i['item_title']
                    temp['observation']=i['observation']
                    temp['chk']='YES'
                    temp['marked']=m1.Marked_Officers_forward.objects.filter(marked_no__marked_to=desigid[0]['designation_code'],marked_no__status_flag=1,marked_no__item_no=i['item_no']).values('marked_to_forward__designation','created_on_forward','status_flag').distinct('marked_no_forward')
                else:
                    temp={}
                    temp['chk']='NO'
                final_list.append(temp) 

        context={
            'inspection_no':inspection_no,
            'details':details,
            'desigid':desigid,
            'final_list':final_list,
            'name':name,
            'designation':designation,
            "zone":list2,
            "division":list4,
            'rly_code':rly_code,
            'div_code':div_code,
            'listgrid':listgrid,
            }
     
        return render(request,"compliance_forward.html",context)
    # except Exception as e:
    #     try:
    #         m1.error_Table.objects.create(fun_name="compliance_forward",user_id=request.user,err_details=str(e))
    #     except:
    #         print("Internal Error!!!")
    #     return render(request, "errorspage.html", {})

def compliance_form_revert(request):
    try:
        listgrid=[]
        count=1
        cuser=request.user.username
        if request.user.user_role == 'guest':
            cuser=request.user.guest_email
            request.user.email=request.user.guest_email
        desigid=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].designation_code
        inspect_details1=m1.Marked_Officers.objects.filter(~Q(item_no__inspection_no__status_flag=0),marked_to_id=desigid,status_flag=4).values('item_no__inspection_no__inspection_no','item_no__inspection_no__inspection_note_no','item_no__inspection_no__inspection_title','item_no__inspection_no__inspection_officer_id','item_no__inspection_no__inspected_on','item_no__inspection_no__report_path').distinct('item_no__inspection_no__inspection_no')
        for i in inspect_details1:
            if m1.Marked_Officers.objects.filter(item_no_id__inspection_no=i['item_no__inspection_no__inspection_no'],marked_to_id=desigid,status_flag=4).exists(): 
                temp={}
                temp['sr_no']=count
                temp['inspection_no']=i['item_no__inspection_no__inspection_no']
                temp['inspection_note_no']=i['item_no__inspection_no__inspection_note_no']
                temp['inspection_title']=i['item_no__inspection_no__inspection_title']
                t=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i['item_no__inspection_no__inspection_officer_id']).values('designation')
                if len(t)!=0:
                    temp['inspection_officer']=t[0]['designation'] 
                else:
                    temp['inspection_officer']='NA'
                temp['inspected_on']=i['item_no__inspection_no__inspected_on'].strftime("%d/%m/%y") if i['item_no__inspection_no__inspected_on']!=None else 'NA'
                t1=m1.Marked_Officers.objects.filter(item_no_id__inspection_no=i['item_no__inspection_no__inspection_no'],marked_to_id=desigid,status_flag=4).values('reverted_on')
                temp['reverted_on']=t1[0]['reverted_on'].strftime("%d/%m/%y") 
                temp['file_path']=i['item_no__inspection_no__report_path']
                locs = list(m1.Insp_multi_location.objects.filter(inspection_no=i['item_no__inspection_no__inspection_no']).values('item', 'type'))
                zne=[]
                dvs=[]
                for l in locs:
                    if l['type']=='HQ':
                        zne.append(l['item'])
                    elif l['type']!='LOC':
                        dvs.append(l['item'])
                temp['zone']=zne
                temp['div']=dvs
                listgrid.append(temp)
            else:
                pass
            count=count+1
            
        list1=models.railwayLocationMaster.objects.filter(location_type_desc__in=['RAILWAY BOARD', 'PRODUCTION UNIT', 'HEAD QUATER', 'PSU', 'INSTITUTE']).values('location_code').distinct().order_by('location_code')
        list2=[]
        for i in list1:
            list2.append(i['location_code'])
        list3=models.railwayLocationMaster.objects.filter(location_type_desc__in=['DIVISION','WORKSHOP', 'STORE', 'CONSTRUCTION', 'OFFICE']).distinct().values('location_code', 'location_type').order_by('location_code')
        list4=[]
        for i in list3:
            list4.append({'location_code': i['location_code'], 'location_type': i['location_type']})   
        list5=models.departMast.objects.all().distinct().values('department_name').order_by('department_name')
        list6=[]
        for i in list5:
            list6.append(i['department_name'])    
        officr=[]
        for l in listgrid:
            if l['inspection_officer'] not in officr:
                officr.append(l['inspection_officer'])   

        #PHASE 2
        counter=len(listgrid)
        phase2 = list(m2.einsp_marked.objects.filter(marked_to_id=desigid,status_flag=4, revert__in=[1,2]).values('eitemid__einspno__inspected_on','eitemid_id','created_on','status_flag','created_by','id','compliance','marked_to_id','marked_emp_id','designation_by','target_date','revert','designation','id','eitemid__einspno','eitemid__einspno__inspection_title','eitemid__einspno__rly_id_id__location_code','eitemid__einspno__div_id_id__location_code','eitemid__einspno__inspection_note_no','eitemid__einspno__designation__designation').distinct('eitemid__einspno'))
        for p in phase2:
            counter+=1
            p['sr_no']=counter 
            if p['eitemid__einspno__designation__designation'] not in officr:
                officr.append(p['eitemid__einspno__designation__designation']) 
        context={
            'zone':list2 ,
            'division':list4,
            'dept':list6,
            'listgrid':listgrid,
            'officr':officr,
            'phase2':phase2
        }
        return render(request,'compliance_form_revert.html',context)        
    except Exception as e:
        try:
            m1.error_Table.objects.create(fun_name="compliance_form_revert",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})  

def compliance_forward_all(request):
    # try:
        cuser=request.user
        if request.user.user_role == 'guest':
            cuser=request.user.guest_email
            request.user.email=request.user.guest_email

        desigid=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user)).values()
        inspections_forwarded=list(m1.Marked_Officers_forward.objects.filter(marked_no__marked_to=desigid[0]['designation_code'],marked_no__status_flag=1).values_list('marked_no__item_no__inspection_no', flat=True).distinct())
        # print(inspections_forwarded)

        details=m1.Inspection_details.objects.filter(inspection_no__in=inspections_forwarded).values()
        rly_code=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].rly_unit.location_code
        rly_unit_code=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].rly_unit.rly_unit_code
        parent_loc=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].rly_unit.parent_location_code
        parent_loc_id=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].rly_unit.parent_rly_unit_code
        div_code=rly_code
        if parent_loc!='RB':
            div_code=rly_code
            rly_code=parent_loc
            rly_unit_code=parent_loc_id


        listgrid=[]
        count=1
        for i in details:
                temp={}
                temp['sr_no']=count
                temp['inspection_no']=i['inspection_no']
                temp['inspection_note_no']=i['inspection_note_no']
                temp['inspection_title']=i['inspection_title']
                t=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i['inspection_officer_id']).values('designation')
                if len(t)!=0:
                    temp['inspection_officer']=t[0]['designation']
                    temp['inspection_officer_id']=i['inspection_officer_id']
                else:
                    temp['inspection_officer']='NA'
                temp['inspected_on']=i['inspected_on'].strftime("%d/%m/%y") if i['inspected_on']!=None else 'NA'
                t1=m1.Marked_Officers.objects.filter(item_no_id__inspection_no=i['inspection_no'],marked_to_id=desigid,status_flag=1).values('viewed_on')
                # temp['viewed_on']=t1[0]['viewed_on'].strftime("%d/%m/%y") if t1[0]['viewed_on']!=None else 'Pending'
                temp['file_path']=i['report_path']
                locs = list(m1.Insp_multi_location.objects.filter(inspection_no=i['inspection_no']).values('item', 'type'))
                zne=[]
                dvs=[]
                for l in locs:
                    if l['type']=='HQ':
                        zne.append(l['item'])
                    elif l['type']!='LOC':
                        dvs.append(l['item'])
                temp['zone']=zne
                temp['div']=dvs
                listgrid.append(temp)
                count=count+1  

        list1=models.railwayLocationMaster.objects.filter(location_type_desc__in=['RAILWAY BOARD', 'PRODUCTION UNIT', 'HEAD QUATER', 'PSU', 'INSTITUTE']).values('location_code').distinct().order_by('location_code')
        list2=[]
        for i in list1:
            list2.append(i['location_code'])
        list3=models.railwayLocationMaster.objects.filter(location_type_desc__in=['DIVISION','WORKSHOP', 'STORE', 'CONSTRUCTION', 'OFFICE']).distinct().values('location_code', 'location_type').order_by('location_code')
        list4=[]
        for i in list3:
            list4.append({'location_code': i['location_code'], 'location_type': i['location_type']})  
        list5=models.departMast.objects.all().values('department_name').distinct().order_by('department_name')
        list6=[]
        for i in list5:
            list6.append(i['department_name'])

        

        officr=[]
        for l in listgrid:
            if l['inspection_officer'] not in officr:
                officr.append(l['inspection_officer'])

        #PHASE 2
        counter=len(listgrid)
        mark_nos=list(m2.einsp_forward_marked.objects.filter(forwardBy_id=desigid[0]['designation_code']).values_list('marked_no_id', flat=True))
        phase2 = list(m2.einsp_marked.objects.filter(marked_to_id=desigid[0]['designation_code'],id__in=mark_nos).values('eitemid__einspno__inspected_on','eitemid_id','created_on','status_flag','created_by','id','compliance','marked_to_id','marked_emp_id','designation_by','target_date','revert','designation','id','eitemid__einspno','eitemid__einspno__inspection_title','eitemid__einspno__rly_id_id__location_code','eitemid__einspno__div_id_id__location_code','eitemid__einspno__inspection_note_no','eitemid__einspno__designation__designation').distinct('eitemid__einspno'))
        for p in phase2:
            counter+=1
            p['sr_no']=counter 
            if p['eitemid__einspno__designation__designation'] not in officr:
                officr.append(p['eitemid__einspno__designation__designation'])
        
        context={
            'zone':list2 ,
            'division':list4,
            'dept':list6,
            'listgrid':listgrid,
            'officr':officr,
            'rly_code':rly_code,
            'div_code':div_code,
            'phase2':phase2,
            }      
        return render(request,"compliance_forward_all.html",context)
    # except Exception as e:
    #     try:
    #         m1.error_Table.objects.create(fun_name="compliance_forward",user_id=request.user,err_details=str(e))
    #     except:
    #         print("Internal Error!!!")
    #     #messages.error(request, 'Error : '+str(e))
    #     return render(request, "errorspage.html", {})

def compliance_forward_samelist(request):
    if request.method == "GET" or request.is_ajax():
        inspection_no = request.GET.get('inspection_no')
        phase = request.GET.get('phase')
        cuser=request.user
        if request.user.user_role == 'guest':
            cuser=request.user.guest_email
            request.user.email=request.user.guest_email
        desigid=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user)).values()

        rly_code=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].rly_unit.location_code
        rly_unit_code=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].rly_unit.rly_unit_code
        parent_loc=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].rly_unit.parent_location_code
        parent_loc_id=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].rly_unit.parent_rly_unit_code
        div_code=rly_code
        if parent_loc!='RB':
            rly_code=parent_loc
            rly_unit_code=parent_loc_id


        list1=models.railwayLocationMaster.objects.filter(location_type_desc__in=['RAILWAY BOARD', 'PRODUCTION UNIT', 'HEAD QUATER', 'PSU', 'INSTITUTE']).values('location_code').distinct().order_by('location_code')
        list2=[]
        for i in list1:
            list2.append(i['location_code'])
        list3=models.railwayLocationMaster.objects.filter(location_type_desc__in=['DIVISION','WORKSHOP', 'STORE', 'CONSTRUCTION', 'OFFICE'],parent_location_code=rly_code).distinct().values('location_code').order_by('location_code')
        list4=[]
        for i in list3:
            list4.append(i['location_code'])  
        list5=models.departMast.objects.all().values('department_name').distinct().order_by('department_name')
        list6=[]
        for i in list5:
            list6.append(i['department_name']) 
        pclevel=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=desigid[0]['designation_code']).values().order_by())
        designation=models.Level_Desig.objects.exclude(delete_flag=True).exclude(Q(empno_id=None),designation_code=desigid[0]['designation_code'], delete_flag=True).filter(pc7_levelmin__lte=pclevel[0]['pc7_levelmin'],rly_unit=rly_unit_code).distinct().values('designation').order_by('-pc7_levelmin')

        
        listgrid=[]
        final_list=[]
        if phase == '2':
            marked_no = list(m2.einsp_forward_marked.objects.filter(forwardBy_id=desigid[0]['designation_code'],marked_no__eitemid__einspno=inspection_no).values_list('marked_no', flat=True))
            marked_nos = list(m2.einsp_marked.objects.exclude(revert=2).filter(eitemid__einspno=inspection_no, id__in=marked_no).values())

            insp_details=list(m2.einspection_details.objects.filter(einspno=inspection_no).values('einspno','instypeid_id','inspected_on','inspection_title','designation__designation','designation_id','created_by','inspection_note_no'))
            insp_details[0]['officer_desig']=insp_details[0]['designation__designation']
            names=m1.empmast.objects.filter(empno=insp_details[0]['created_by']).values('empname','empmname','emplname')
            insp_details[0]['insp_name']=''
            if names:
                insp_details[0]['insp_name']+=names[0]['empname']+' ' if names[0]['empname']!=None else ' '
                insp_details[0]['insp_name']+=names[0]['empmname']+' ' if names[0]['empmname']!=None else ' '
                insp_details[0]['insp_name']+=names[0]['emplname']+' ' if names[0]['emplname']!=None else ' '

            name=insp_details[0]['insp_name']
            details=insp_details

            for m in marked_nos:
                temp={}
                item_det=m2.einspection_item_detail.objects.filter(eitemid=m['eitemid_id']).values()
                question=m2.questionare_master.objects.filter(qid=item_det[0]['qid_id']).values()
                temp['item_no']=m['eitemid_id']
                temp['marked_no']=m['id']
                temp['question']=question[0]['activity']
                temp['report_act']=question[0]['report_act']
                temp['value']=item_det[0]['value']
                forwardss=[]
                forwarded_reply=list(m2.einsp_forward_marked.objects.filter(forwardBy_id=desigid[0]['designation_code'],marked_no=m['id']).values())
            
                if len(forwarded_reply):
                    for x in forwarded_reply:
                        tem={}
                        tem['forwardTo']=x['forwardTo_id']
                        tem['forwardBy']=x['forwardBy_id']
                        tem['designationBy']=x['designationBy']
                        tem['designationTo']=x['designationTo']
                        tem['forwardStatus']=x['status_flag']
                        if x['status_flag'] == 3:
                            tem['stts'] = 'Rejected'
                        elif x['status_flag'] == 2:
                            tem['stts'] = 'Accepted'
                        else:
                            tem['stts'] = 'Pending'
                        tem['forward_on']=x['created_date'].strftime("%d/%m/%Y") if x['created_date'] else -1
                        tem['reply_on_forward']=x['reply_on'].strftime("%d/%m/%Y") if x['reply_on'] else -1
                        tem['compliance_forward']=x['compliance'] if x['compliance'] else 'NA'
                        tem['remarks_forward']=x['remarks'] if x['remarks'] else 'NA'
                        tem['rejected_on_fwd']=x['rejected_on'].strftime("%d/%m/%Y") if x['rejected_on'] else 'NA'
                        tem['forwardId']=x['forwardId']
                        tem['further_forward']=x['further_forward']
                        tem['further_forward_to']=str(list(m2.einsp_forward_marked.objects.filter(forwardBy_id=desigid[0]['designation_code'],marked_no_id=m['id'],parent_forward=tem['forwardId']).values_list('forwardTo__designation', flat=True)))
                        tem['further_forward_to']=(tem['further_forward_to'].strip(']')).strip('[')
                        forwardss.append(tem)
                temp['forwardss'] = forwardss

                listgrid.append(temp)
        else:
            details=m1.Inspection_details.objects.filter(inspection_no=inspection_no).values()
            name=details[0]['officer_name'] if details[0]['officer_name'] else 'NA'
            final_list=[]
            list_item=m1.Item_details.objects.filter(inspection_no=inspection_no).values().distinct()
            for i in list_item:
                list_mark=m1.Marked_Officers_forward.objects.filter(marked_no__marked_to=desigid[0]['designation_code'],marked_no__status_flag=1,marked_no__item_no=i['item_no'])
                if(list_mark.exists()):
                    temp={}
                    temp['item_db']=i['item_no']
                    temp['type']=i['type']
                    temp['item_no']=i['des_id']
                    temp['item_title']=i['item_title']
                    temp['observation']=i['observation']
                    temp['chk']='YES'
                    temp['marked']=list(m1.Marked_Officers_forward.objects.filter(marked_no__marked_to=desigid[0]['designation_code'],marked_no__status_flag=1,marked_no__item_no=i['item_no']).values('marked_to_forward__designation','created_on_forward','status_flag').distinct('marked_no_forward'))
                else:
                    temp={}
                    temp['chk']='NO'
                final_list.append(temp) 

        context={
            'inspection_no':inspection_no,
            'details':list(details),
            'desigid':list(desigid),
            'final_list':final_list,
            'name':name,
            'designation':list(designation),
            "zone":list2,
            "division":list4,
            'rly_code':rly_code,
            'div_code':div_code,
            'listgrid':listgrid,
            }
        

        return JsonResponse(context,safe = False)


def compliance_form_accept(request):
    try:
        daterangeselect=request.GET.get('data3')
        listgrid=[]
        count=1
        if daterangeselect not in ['0-3','0-6','0-12','tofrom']:
            inspect_details1=m1.Inspection_details.objects.values().order_by('-inspection_no')
        else:
            from dateutil.relativedelta import relativedelta
            if daterangeselect=='0-3':
                now = datetime.today()
                six = now
                prev = now - relativedelta(months=3)
                prev = prev.date()
            elif daterangeselect=='0-6':
                now = datetime.today()
                six = now
                prev = now - relativedelta(months=6)
                prev = prev.date()
            elif daterangeselect=='0-12':
                now = datetime.today()
                six = now
                prev = now - relativedelta(months=12)
                prev = prev.date()
            elif daterangeselect=='tofrom':
                daterange=request.GET.get('daterange')
                daterange1=daterange.split('-')
                date1=daterange1[0].split('/')
                date2=daterange1[1].split('/')
                prev='20'+date1[2].strip()+'-'+date1[1].strip()+'-'+date1[0].strip()
                six='20'+date2[2].strip()+'-'+date2[1].strip()+'-'+date2[0].strip()

            inspect_details1=m1.Inspection_details.objects.filter(inspected_on__gte=prev,inspected_on__lte=six).values().order_by('-inspection_no')

        cuser=request.user.username
        if request.user.user_role == 'guest':
            cuser=request.user.guest_email
            request.user.email=request.user.guest_email
        desigid=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].designation_code
        for i in inspect_details1:
            if m1.Marked_Officers.objects.filter(item_no_id__inspection_no=i['inspection_no'],marked_to_id=desigid,status_flag=3):        
                temp={}
                temp['sr_no']=count
                temp['inspection_no']=i['inspection_no']
                temp['inspection_note_no']=i['inspection_note_no']
                temp['inspection_title']=i['inspection_title']
                t=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i['inspection_officer_id']).values('designation')
                if len(t)!=0:
                    temp['inspection_officer']=t[0]['designation'] 
                else:
                    temp['inspection_officer']='NA'
                temp['inspected_on']=i['inspected_on'].strftime("%d/%m/%y") if i['inspected_on']!=None else 'NA'
                temp['inspected_on_date']=i['inspected_on'] if i['inspected_on']!=None else 'NA'
                # t1=m1.Marked_Officers.objects.filter(item_no_id__inspection_no=i['inspection_no'],marked_to_id=desigid,status_flag=1).values('viewed_on')
                # temp['viewed_on']=t1[0]['viewed_on'].strftime("%d/%m/%y") if t1[0]['viewed_on']!=None else 'Pending'
                temp['file_path']=i['report_path']
                locs = list(m1.Insp_multi_location.objects.filter(inspection_no=i['inspection_no']).values('item', 'type'))
                zne=[]
                dvs=[]
                for l in locs:
                    if l['type']=='HQ':
                        zne.append(l['item'])
                    elif l['type']!='LOC':
                        dvs.append(l['item'])
                temp['zone']=zne
                temp['div']=dvs
                listgrid.append(temp)
                count=count+1
        list1=models.railwayLocationMaster.objects.filter(location_type_desc__in=['RAILWAY BOARD', 'PRODUCTION UNIT', 'HEAD QUATER', 'PSU', 'INSTITUTE']).values('location_code').distinct().order_by('location_code')
        list2=[]
        for i in list1:
            list2.append(i['location_code'])
        list3=models.railwayLocationMaster.objects.filter(location_type_desc__in=['DIVISION','WORKSHOP', 'STORE', 'CONSTRUCTION', 'OFFICE']).distinct().values('location_code', 'location_type').order_by('location_code')
        list4=[]
        for i in list3:
            list4.append({'location_code': i['location_code'], 'location_type': i['location_type']})  
        list5=models.departMast.objects.all().distinct().values('department_name').order_by('department_name')
        list6=[]
        for i in list5:
            list6.append(i['department_name'])  

        officr=[]
        for l in listgrid:
            if l['inspection_officer'] not in officr:
                officr.append(l['inspection_officer'])   


        #PHASE 2
        counter=len(listgrid)
        phase2 = list(m2.einsp_marked.objects.exclude(revert=2).filter(marked_to_id=desigid,status_flag=4).values('eitemid__einspno__inspected_on','eitemid_id','created_on','status_flag','created_by','id','compliance','marked_to_id','marked_emp_id','designation_by','target_date','revert','designation','id','eitemid__einspno','eitemid__einspno__inspection_title','eitemid__einspno__rly_id_id__location_code','eitemid__einspno__div_id_id__location_code','eitemid__einspno__inspection_note_no','eitemid__einspno__designation__designation').distinct('eitemid__einspno'))
        for p in phase2:
            counter+=1
            p['sr_no']=counter
            if p['eitemid__einspno__designation__designation'] not in officr:
                officr.append(p['eitemid__einspno__designation__designation']) 
        context={
            'zone':list2 ,
            'division':list4,
            'dept':list6,
            'listgrid':listgrid,
            'officr':officr,
            'phase2_accept':phase2,
        }
        return render(request,'compliance_form_accept.html',context)
    except Exception as e:
        try:
            m1.error_Table.objects.create(fun_name="compliance_form_accept",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})

def compliance_filterdata(request):
    try:
        if request.method == "GET" and request.is_ajax():
            div_id=request.GET.get('div_id')
            rly_id=request.GET.get('rly_id')
            dept_id=request.GET.get('dept_id')
            startDate=request.GET.get('startDate')
            startDate = datetime.strptime(startDate,'%Y-%m-%d')
            endDate=request.GET.get('endDate')
            endDate = datetime.strptime(endDate,'%Y-%m-%d')
            str=request.GET.get('str')
            list=[]
            count=1
            if rly_id=="" and div_id=="" and dept_id=="":
                inspect_details=m1.Inspection_details.objects.filter(inspected_on__gte=startDate,inspected_on__lte=endDate).values()
            elif div_id=="" and dept_id=="":
                insp_details=m1.Insp_multi_location.objects.filter(type='HQ',item=rly_id).values('inspection_no_id')
                inspect_details=m1.Inspection_details.objects.filter(inspection_no__in=insp_details,inspected_on__gte=startDate,inspected_on__lte=endDate).values()
            elif rly_id=="":
                insp_details=m1.Insp_multi_location.objects.filter(Q(type='DPT',item=dept_id)).values('inspection_no_id')
                inspect_details=m1.Inspection_details.objects.filter(inspection_no__in=insp_details,inspected_on__gte=startDate,inspected_on__lte=endDate).values()
            elif div_id=="":
                insp_details=m1.Insp_multi_location.objects.filter(Q(type='HQ',item=rly_id)&Q(type='DPT',item=dept_id)).values('inspection_no_id')
                inspect_details=m1.Inspection_details.objects.filter(inspection_no__in=insp_details,inspected_on__gte=startDate,inspected_on__lte=endDate).values()
            elif dept_id=="":
                insp_details=m1.Insp_multi_location.objects.filter(Q(type='HQ',item=rly_id)&Q(type='DIV',item=div_id)).values('inspection_no_id')
                inspect_details=m1.Inspection_details.objects.filter(inspection_no__in=insp_details,inspected_on__gte=startDate,inspected_on__lte=endDate).values()
            else:
                insp_details=m1.Insp_multi_location.objects.filter(Q(type='HQ',item=rly_id)&Q(type='DIV',item=div_id)&Q(type='DPT',item=dept_id)).values('inspection_no_id')
                inspect_details=m1.Inspection_details.objects.filter(inspection_no__in=insp_details,inspected_on__gte=startDate,inspected_on__lte=endDate).values()
            cuser=request.user.username
            desigid=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].designation_code
            if(str=='pending'):
                for i in inspect_details:
                    if m1.Marked_Officers.objects.filter(item_no_id__inspection_no=i['inspection_no'],marked_to_id=desigid,status_flag=1):
                        temp={}
                        temp['sr_no']=count
                        temp['inspection_no']=i['inspection_no']
                        temp['inspection_note_no']=i['inspection_note_no']
                        temp['inspection_title']=i['inspection_title']
                        t=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i['inspection_officer_id']).values('designation')
                        if len(t)!=0:
                            temp['inspection_officer']=t[0]['designation']
                        else:
                            temp['inspection_officer']='NA'
                        temp['inspected_on']=i['inspected_on'].strftime("%d/%m/%y") if i['inspected_on']!=None else 'NA'
                        temp['viewed_on']=i['modified_on'].strftime("%d/%m/%y") if i['modified_on']!=None else 'Pending'
                        temp['file_path']=i['report_path']
                        list.append(temp)
                        count=count+1
     
            elif(str=='send'):
                for i in inspect_details:
                    if m1.Marked_Officers.objects.filter(item_no_id__inspection_no=i['inspection_no'],marked_to_id=desigid,status_flag=2):
                        temp={}
                        temp['sr_no']=count
                        temp['inspection_no']=i['inspection_no']
                        temp['inspection_note_no']=i['inspection_note_no']
                        temp['inspection_title']=i['inspection_title']
                        t=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i['inspection_officer_id']).values('designation')
                        if len(t)!=0:
                            temp['inspection_officer']=t[0]['designation']
                        else:
                            temp['inspection_officer']='NA'
                        temp['inspected_on']=i['inspected_on'].strftime("%d/%m/%y") if i['inspected_on']!=None else 'NA'
                        temp['viewed_on']=i['modified_on'].strftime("%d/%m/%y") if i['modified_on']!=None else 'Pending'
                        temp['file_path']=i['report_path']
                        list.append(temp)
                        count=count+1
      
            elif(str=='accept'):
                for i in inspect_details:
                    if m1.Marked_Officers.objects.filter(item_no_id__inspection_no=i['inspection_no'],marked_to_id=desigid,status_flag=3):
                        temp={}
                        temp['sr_no']=count
                        temp['inspection_no']=i['inspection_no']
                        temp['inspection_note_no']=i['inspection_note_no']
                        temp['inspection_title']=i['inspection_title']
                        t=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i['inspection_officer_id']).values('designation')
                        if len(t)!=0:
                            temp['inspection_officer']=t[0]['designation']
                        else:
                            temp['inspection_officer']='NA'
                        temp['inspected_on']=i['inspected_on'].strftime("%d/%m/%y") if i['inspected_on']!=None else 'NA'
                        temp['viewed_on']=i['modified_on'].strftime("%d/%m/%y") if i['modified_on']!=None else 'Pending'
                        temp['file_path']=i['report_path']
                        list.append(temp)
                        count=count+1
   
            elif(str=='reject'):
                for i in inspect_details:
                    item=m1.Item_details.objects.filter(inspection_no_id=i['inspection_no']).values('item_no')
                    marked=m1.Marked_Officers.objects.filter(item_no_id__in=item,marked_to_id=desigid).values('marked_no')
                    if(len(marked)!=0):
                        if m1.Officers_Remark.objects.filter(marked_no_id__in=marked,marked_desig_id_id=desigid):
                            temp={}
                            temp['sr_no']=count
                            temp['inspection_no']=i['inspection_no']
                            temp['inspection_note_no']=i['inspection_note_no']
                            temp['inspection_title']=i['inspection_title']
                            t=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i['inspection_officer_id']).values('designation')
                            if len(t)!=0:
                                temp['inspection_officer']=t[0]['designation']
                            else:
                                temp['inspection_officer']='NA'
                            temp['inspected_on']=i['inspected_on'].strftime("%d/%m/%y") if i['inspected_on']!=None else 'Pending'
                            temp['file_path']=i['report_path']
                            list.append(temp)
                            count=count+1
            elif(str=='revert'):
                for i in inspect_details:
                    if m1.Marked_Officers.objects.filter(item_no_id__inspection_no=i['inspection_no'],marked_to_id=desigid,status_flag=4):
                        temp={}
                        temp['sr_no']=count
                        temp['inspection_no']=i['inspection_no']
                        temp['inspection_note_no']=i['inspection_note_no']
                        temp['inspection_title']=i['inspection_title']
                        t=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i['inspection_officer_id']).values('designation')
                        if len(t)!=0:
                            temp['inspection_officer']=t[0]['designation']
                        else:
                            temp['inspection_officer']='NA'
                        temp['inspected_on']=i['inspected_on'].strftime("%d/%m/%y") if i['inspected_on']!=None else 'NA'
                        t1=m1.Marked_Officers.objects.filter(item_no_id__inspection_no=i['inspection_no'],marked_to_id=desigid,status_flag=4).values('reverted_on')
                        temp['reverted_on']=t1[0]['reverted_on'].strftime("%d/%m/%y") if t1[0]['reverted_on']!=None else 'NA'
                        temp['file_path']=i['report_path']
                        list.append(temp)
                        count=count+1
       
            elif(str=='pending-forward'):
                for i in inspect_details:      
                    marked_no=m1.Marked_Officers_forward.objects.filter(marked_to_forward_id=desigid).values('marked_no_id')
                    if m1.Marked_Officers.objects.filter(item_no__inspection_no_id=i['inspection_no'],marked_no__in=marked_no,status_flag=1):
                        item_no=m1.Marked_Officers.objects.filter(item_no__inspection_no_id=i['inspection_no'],marked_no__in=marked_no)[0].item_no_id
                        if m1.Marked_Officers_forward.objects.filter(marked_no__item_no=item_no,status_flag=1,marked_to_forward_id=desigid):  
                            temp={}
                            temp['sr_no']=count
                            temp['inspection_no']=i['inspection_no']
                            temp['inspection_note_no']=i['inspection_note_no']
                            temp['inspection_title']=i['inspection_title']
                            t=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i['inspection_officer_id']).values('designation')
                            if len(t)!=0:
                                temp['inspection_officer']=t[0]['designation']
                            else:
                                temp['inspection_officer']='NA'
                            temp['inspected_on']=i['inspected_on'].strftime("%d/%m/%y") if i['inspected_on']!=None else 'NA'
                            temp['file_path']=i['report_path']
                            list.append(temp)
                            count=count+1
            elif(str=='sent-forward'):
                for i in inspect_details:      
                    marked_no=m1.Marked_Officers_forward.objects.filter(marked_to_forward_id=desigid).values('marked_no_id')
                    if m1.Marked_Officers.objects.filter(item_no__inspection_no_id=i['inspection_no'],marked_no__in=marked_no,status_flag=1):
                        item_no=m1.Marked_Officers.objects.filter(item_no__inspection_no_id=i['inspection_no'],marked_no__in=marked_no)[0].item_no_id
                        if m1.Marked_Officers_forward.objects.filter(marked_no__item_no=item_no,status_flag=1,marked_to_forward_id=desigid):  
                            temp={}
                            temp['sr_no']=count
                            temp['inspection_no']=i['inspection_no']
                            temp['inspection_note_no']=i['inspection_note_no']
                            temp['inspection_title']=i['inspection_title']
                            t=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i['inspection_officer_id']).values('designation')
                            if len(t)!=0:
                                temp['inspection_officer']=t[0]['designation']
                            else:
                                temp['inspection_officer']='NA'
                            temp['inspected_on']=i['inspected_on'].strftime("%d/%m/%y") if i['inspected_on']!=None else 'NA'
                            temp['file_path']=i['report_path']
                            list.append(temp)
                            count=count+1
                    print(list,'LIST-------------------------LIST')
            return JsonResponse({'inspect_details':list,})
    except Exception as e:
        try:
            m1.error_Table.objects.create(fun_name="compliance_filterdata",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})

def addendum_ajax(request):
    if request.method == "POST" and request.is_ajax():
        typ=request.POST.get('typ')
        if typ == 'Ammend':
            empnox = models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=request.user)| Q(official_email_ID=request.user.guest_email) | Q(official_email_ID=request.user.email), empno__isnull=False)
            if empnox:
                desig_code = empnox[0].designation_code
                desig = empnox[0].designation
            id=request.POST.get('id')[3:]
            marked_no=list(m1.Marked_Officers.objects.filter(marked_to_id=desig_code,item_no=id).values('marked_no','compliance','item_no__type','item_no__observation','item_no__item_title'))
            item_no=list(m1.Item_details.objects.filter(item_no=id).values())
            insp_no=list(m1.Inspection_details.objects.filter(inspection_no=item_no[0]['inspection_no_id']).values('inspection_note_no','inspection_officer__designation','officer_name','inspected_on','inspection_title','inspection_no'))
            adden=list(m1.addendum.objects.filter(item_no=id,marked_no=marked_no[0]['marked_no']).values())
            if len(adden):
                adden_status=1
            else:
                adden_status=0
            context={
                'insp_no':insp_no,
                'item_no':item_no,
                'marked_no':marked_no,
                'adden':adden,
                'adden_status':adden_status,
                'id':id,
            }
           
            return JsonResponse(context, safe=False)
        else:
            id=request.POST.get('id')[3:]
            additionalComment=request.POST.get('additionalComment')
            empnox = models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=request.user)| Q(official_email_ID=request.user.guest_email) | Q(official_email_ID=request.user.email), empno__isnull=False)
            if empnox:
                desig_code = empnox[0].designation_code
                desig = empnox[0].designation
            id=request.POST.get('id')[3:]
            marked_no=list(m1.Marked_Officers.objects.filter(marked_to_id=desig_code,item_no=id).values('marked_no','compliance','item_no__type','item_no__observation','item_no__item_title'))
            item_no=list(m1.Item_details.objects.filter(item_no=id).values())
            m1.addendum.objects.create(item_no_id=id,marked_no_id=marked_no[0]['marked_no'],compliance=additionalComment,status_flag=1)
            m1.Marked_Officers.objects.filter(marked_to_id=desig_code,item_no=id).update(add_status=1)
            return JsonResponse({}, safe=False)

def addendum(request):
    empnox = models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=request.user)| Q(official_email_ID=request.user.guest_email) | Q(official_email_ID=request.user.email), empno__isnull=False)
    if empnox:
        desig_code = empnox[0].designation_code
        desig = empnox[0].designation
    id=request.GET.get('id')[3:]
    marked_no=list(m1.Marked_Officers.objects.filter(marked_to_id=desig_code,item_no=id).values('marked_no','compliance','item_no__type','item_no__observation','item_no__item_title'))
    item_no=list(m1.Item_details.objects.filter(item_no=id).values())
    insp_no=list(m1.Inspection_details.objects.filter(inspection_no=item_no[0]['inspection_no_id']).values('inspection_note_no','inspection_officer__designation','officer_name','inspected_on','inspection_title','inspection_no'))
    adden=list(m1.addendum.objects.filter(item_no=id,marked_no=marked_no[0]['marked_no']).values())
    if len(adden):
        adden_status=1
    else:
        adden_status=0
    
    context={
        'insp_no':insp_no,
        'item_no':item_no,
        'marked_no':marked_no,
        'adden':adden,
        'adden_status':adden_status,
        'id':id,
    }
    if request.method == "POST" and request.is_ajax():
        additionalComment=request.POST.get('additionalComment')
        m1.addendum.objects.create(item_no_id=id,marked_no_id=marked_no[0]['marked_no'],compliance=additionalComment,status_flag=1)
        m1.Marked_Officers.objects.filter(marked_to_id=desig_code,item_no=id).update(add_status=1)
        return JsonResponse({}, safe=False)
    return render(request, "addendum.html",context)

def compliance_form_reject(request):
    try:
       
        listgrid=[]
        count=1
        inspect_details1=m1.Inspection_details.objects.values().order_by('-inspection_no')
        
        cuser=request.user.username
        if request.user.user_role == 'guest':
            cuser=request.user.guest_email
            request.user.email=request.user.guest_email
        desigid=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].designation_code
        for i in inspect_details1:
            item=m1.Item_details.objects.filter(inspection_no_id=i['inspection_no']).values('item_no')
            marked=m1.Marked_Officers.objects.filter(item_no_id__in=item,marked_to_id=desigid,status='R',status_flag=1).values('marked_no')
            if(len(marked)!=0):
                if m1.Officers_Remark.objects.filter(marked_no_id__in=marked):
                    temp={}
                    temp['sr_no']=count
                    temp['inspection_no']=i['inspection_no']
                    temp['inspection_note_no']=i['inspection_note_no']
                    temp['inspection_title']=i['inspection_title']
                    t=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i['inspection_officer_id']).values('designation')
                    if len(t)!=0:
                        temp['inspection_officer']=t[0]['designation'] 
                    else:
                        temp['inspection_officer']='NA'
                    temp['inspected_on']=i['inspected_on'].strftime("%d/%m/%y") if i['inspected_on']!=None else 'NA'
                    temp['inspected_on_date']=i['inspected_on'] if i['inspected_on']!=None else 'NA'
                    temp['file_path']=i['report_path']
                    locs = list(m1.Insp_multi_location.objects.filter(inspection_no=i['inspection_no']).values('item', 'type'))
                    zne=[]
                    dvs=[]
                    for l in locs:
                        if l['type']=='HQ':
                            zne.append(l['item'])
                        elif l['type']!='LOC':
                            dvs.append(l['item'])
                    temp['zone']=zne
                    temp['div']=dvs
                    listgrid.append(temp)
                count=count+1
        list1=models.railwayLocationMaster.objects.filter(location_type_desc__in=['RAILWAY BOARD', 'PRODUCTION UNIT', 'HEAD QUATER', 'PSU', 'INSTITUTE']).values('location_code').distinct().order_by('location_code')
        list2=[]
        for i in list1:
            list2.append(i['location_code'])
        list3=models.railwayLocationMaster.objects.filter(location_type_desc__in=['DIVISION','WORKSHOP', 'STORE', 'CONSTRUCTION', 'OFFICE']).distinct().values('location_code', 'location_type').order_by('location_code')
        list4=[]
        for i in list3:
            list4.append({'location_code': i['location_code'], 'location_type': i['location_type']})  
        list5=models.departMast.objects.all().distinct().values('department_name').order_by('department_name')
        list6=[]
        for i in list5:
            list6.append(i['department_name'])     

        officr=[]
        for l in listgrid:
            if l['inspection_officer'] not in officr:
                officr.append(l['inspection_officer'])  


        #PHASE 2
        counter=len(listgrid)
        phase2 = list(m2.einsp_marked.objects.exclude(revert=2).filter(marked_to_id=desigid,status_flag=1,reject=1).values('eitemid__einspno__inspected_on','eitemid_id','created_on','status_flag','created_by','id','compliance','marked_to_id','marked_emp_id','designation_by','target_date','revert','designation','id','eitemid__einspno','eitemid__einspno__inspection_title','eitemid__einspno__rly_id_id__location_code','eitemid__einspno__div_id_id__location_code','eitemid__einspno__inspection_note_no','eitemid__einspno__designation__designation').distinct('eitemid__einspno'))
        for p in phase2:
            counter+=1
            p['sr_no']=counter 
            if p['eitemid__einspno__designation__designation'] not in officr:
                officr.append(p['eitemid__einspno__designation__designation'])   
        context={
            'zone':list2 ,
            'division':list4,
            'dept':list6,
            'listgrid':listgrid,
            'officr':officr,
            'phase2':phase2,
        }
        return render(request,'compliance_form_reject.html',context)  
    except Exception as e:
        try:
            m1.error_Table.objects.create(fun_name="compliance_form_reject",user_id=request.user,err_details=str(e))
        except:
            print("Internal Error!!!")
        return render(request, "errorspage.html", {})  



##############  05-10-23

def compliance_filterdata_ajax(request):
    # try:
        if request.method == "GET" and request.is_ajax():
            str=request.GET.get('str')
            if(str=='filter'):
                rly_id=request.GET.get('rly_id')
                if(rly_id==""):
                    list3=models.railwayLocationMaster.objects.filter(location_type='DIV').values('location_code')
                else:    
                    list3=models.railwayLocationMaster.objects.filter(location_type_desc__in=['DIVISION','WORKSHOP'],parent_location_code=rly_id).order_by('location_code').values('location_code', 'location_type').distinct('location_code')
                list4=[]
                for i in list3:
                    list4.append(i['location_code'])  
                return JsonResponse({'div':list4})
           
            cuser=request.user.username
            user_role=request.user.user_role
            if request.user.user_role == 'guest':
                cuser=request.user.guest_email
                request.user.email=request.user.guest_email
            desigid=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].designation_code
            if request.user.user_role == 'guest':
                user_email=request.user.guest_email
                request.user.email=request.user.guest_email
                desigid=models.Level_Desig.objects.exclude(delete_flag=True).filter(official_email_ID=user_email)[0].designation_code
       
        #data for reply modal    
            if(str=='reply'):
                status=request.GET.get('status')
                item_no=0
                inspection_id=0
                list3=[]
                list4=[]
                list6=[]
                desiglist=[]
           
                if(request.GET.get('inspection_id')):
                    inspection_id=request.GET.get('inspection_id')
                    print(inspection_id)
                    listdesig1=m1.Inspection_details.objects.filter(inspection_no=inspection_id).values('inspection_officer_id')
                    listdesig=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=listdesig1).values('designation')
                    listname1=m1.Inspection_details.objects.filter(inspection_no=inspection_id).values('modified_by')
                    if m1.empmast.objects.filter(empno__in=listname1).exists():
                        empfname=m1.empmast.objects.filter(empno__in=listname1)[0].empname
                        empmname=m1.empmast.objects.filter(empno__in=listname1)[0].empmname
                        emplname=m1.empmast.objects.filter(empno__in=listname1)[0].emplname
                        if(empmname==None and emplname==None):
                            listname=empfname
                        elif(empmname==None):
                            listname=empfname + " " + emplname
                        elif(emplname==None):
                            listname=empfname + " " + empmname  
                        else:
                            listname=empfname + " " + empmname + " " + emplname
                    else:
                        listname='NA'
                    # print(listname,'rajputttttttttttttttttttttttt')
                    list1=m1.Inspection_details.objects.filter(inspection_no=inspection_id).values()
                    list5=[]
                # for pending/rejected reply and pending query
                    if(status=='P'):
                        list5=m1.Marked_Officers.objects.filter(item_no__inspection_no_id=inspection_id,marked_to_id=desigid,status_flag=1).values('item_no_id','action_type')
                # for send reply
                    elif(status=='S'):
                        list5=m1.Marked_Officers.objects.filter(item_no__inspection_no_id=inspection_id,marked_to_id=desigid,status_flag=2).values('item_no_id','action_type')
                # for accepted reply
                    elif(status=='A'):
                        list5=m1.Marked_Officers.objects.filter(item_no__inspection_no_id=inspection_id,marked_to_id=desigid,status_flag=3).values('item_no_id','action_type')
                # for rejected reply    
                    elif(status=='R'):
                        list5=m1.Marked_Officers.objects.filter(item_no__inspection_no_id=inspection_id,marked_to_id=desigid,status_flag=4).values('item_no_id','action_type')
                # for send query
                    else:
                        list5=m1.Marked_Officers.objects.filter(item_no__inspection_no_id=inspection_id,marked_to_id=desigid).values('item_no_id','action_type')
                    for i in list5:
                        list6.append(i['item_no_id'])
                    list2=m1.Item_details.objects.filter(item_no__in=list6).values()
                    for i in list1:
                        temp={}
                        temp['inspection_no']=i['inspection_no']
                        temp['inspection_note_no']=i['inspection_note_no'] if i['inspection_note_no']!=None else 'NA'
                        temp['inspection_title']=i['inspection_title']
                        temp['inspection_date']=i['inspected_on'].strftime("%d/%m/%y") if i['inspected_on']!=None else 'NA'
                        temp['final_submit_on']=i['final_submit_on'].strftime("%d/%m/%y") if i['final_submit_on']!=None else 'NA'
                        temp['empname']=listname if listname!=None else 'NA'
                        list3.append(temp)
                    for i in listdesig:
                        temp={}
                        temp['designation']=i['designation'] if i['designation']!=None else 'NA'
                        desiglist.append(temp)
                
                   
                        # list4.append(temp)
                    for i in list2:
                        # print(i,'iiii')
                        temp={}
                       
                        temp['item_no']=i['item_no']
                        if(i['type']=='H'):
                            temp['type']=i['type']
                            temp['item_title']=i['item_title']
                            temp['priority']=i['priority']

                            _tbl_tbl = []
                            if i['tbl_data'] != '[]':
                                res = eval(i['tbl_data'])
                                for k1 in range(len(res)):
                                    d2 = []
                                    for k2 in range(len(res[k1])):
                                        d2.append(res[k1][k2])
                                    _tbl_tbl.append(d2)
                            else:
                                _tbl_tbl = '[]'
                            
                            temp['tbl_data']=_tbl_tbl

                            if i['link_image'] != None:
                                img = i['link_image'].split('@#@')
                                image = []
                                for i6 in range(len(img)):
                                    abs_path = os.path.abspath(img[i6])
                                    image.append(img[i6])
                            else:
                                image = None
                            temp['link_image']=image

                            temp['target_date']=i['target_date']
                        elif(i['type']=='SH'):
                            temp['type']=i['type']
                            temp['observation']=i['observation']
                            temp['priority']=i['priority']
                            _tbl_tbl = []
                            if i['tbl_data'] != '[]':
                                res = eval(i['tbl_data'])
                                for k1 in range(len(res)):
                                    d2 = []
                                    for k2 in range(len(res[k1])):
                                        d2.append(res[k1][k2])
                                    _tbl_tbl.append(d2)
                            else:
                                _tbl_tbl = '[]'
                            
                            temp['tbl_data']=_tbl_tbl
                            if i['link_image'] != None:
                                img = i['link_image'].split('@#@')
                                image = []
                                for i6 in range(len(img)):
                                    abs_path = os.path.abspath(img[i6])
                                    image.append(img[i6])
                            else:
                                image = None
                            temp['link_image']=image
                            temp['target_date']=i['target_date']
                        for al in list5:
                            if al['item_no_id'] == temp['item_no']:
                                temp['action_type']=al['action_type']
                            

                        item_list=[]
                        item_list=item_no_details(inspection_id)
                        for j in item_list:
                            # print(j,'jjjjj')
                            if(i['item_no']==j['item_test']):
                                temp['item']=j['count']
                    # for rejected reply
                        if(m1.Officers_Remark.objects.filter(marked_no__item_no=i['item_no'],marked_desig_id_id=desigid)):
                            temp['reply_received']=m1.Officers_Remark.objects.filter(marked_no__item_no=i['item_no'],marked_desig_id_id=desigid).order_by('-rejected_on')[0].reply_received
                            temp['remark']=m1.Officers_Remark.objects.filter(marked_no__item_no=i['item_no'],marked_desig_id_id=desigid).order_by('-rejected_on')[0].remark
                            temp['rejected_on']=m1.Officers_Remark.objects.filter(marked_no__item_no=i['item_no'],marked_desig_id_id=desigid).order_by('-rejected_on')[0].rejected_on.strftime("%d/%m/%y")
                    # for reverted inspection
                        if m1.Marked_Officers.objects.filter(item_no__inspection_no_id=inspection_id,marked_to_id=desigid,status_flag=4):
                            temp['revert']=m1.Marked_Officers.objects.filter(item_no__inspection_no_id=inspection_id,marked_to_id=desigid,status_flag=4)[0].revert
                            reverted_on=m1.Marked_Officers.objects.filter(item_no__inspection_no_id=inspection_id,marked_to_id=desigid,status_flag=4)[0].reverted_on
                            temp['reverted_on']=reverted_on.strftime("%d/%m/%y") if reverted_on!=None else 'NA'
                    #for forwarded officers details
                        forwardes = list(m1.Marked_Officers_forward.objects.filter(marked_no__status_flag=1,marked_no__item_no=i['item_no']).values_list('marked_to_forward__designation',flat=True))
                        if forwardes:
                            temp['forwardes']=forwardes
                        else:
                            temp['forwardes']=[]
                        temp['compliance']=m1.Marked_Officers.objects.filter(item_no=i['item_no'],marked_to_id=desigid)[0].compliance
                        marked_obj=m1.Marked_Officers.objects.filter(item_no=i['item_no'],marked_to_id=desigid)[0]
                        tgt_date=None
                        if marked_obj and marked_obj.target_flag:
                            tgt_date=m1.target_compliance.objects.filter(marked_no=marked_obj)
                            if len(tgt_date):
                                tgt_date=tgt_date[0].target_date
                            else:
                                tgt_date=None
                        temp['tgt_date']=tgt_date.strftime("%d/%m/%y") if tgt_date!=None else 0
                        reply_on=m1.Marked_Officers.objects.filter(item_no=i['item_no'],marked_to_id=desigid)[0].reply_on
                        temp['reply_on']=reply_on.strftime("%d/%m/%y") if reply_on!=None else 'NA'
                        list4.append(temp)  
                
                elif(request.GET.get('item_no')):
                    item_no=request.GET.get('item_no')
                    temp={}
                    temp['item_no']=item_no
                    temp['observation']=m1.Item_details.objects.filter(item_no=item_no)[0].observation
                    if temp['observation'] == None:
                        temp['observation']=m1.Item_details.objects.filter(item_no=item_no)[0].item_title
                    temp['item_title']=m1.Item_details.objects.filter(item_no=item_no)[0].item_title
                    temp['type']=m1.Item_details.objects.filter(item_no=item_no)[0].type
                   
                    list4.append(temp)  
                print(list4)
                return JsonResponse({'idetails':list3,'itemdetails':list4,'desigdetails':desiglist,'user_role':user_role})
           
            item_no=request.GET.get('item_no')
            #print(item_no,'item_no')
            compliance=request.GET.get('compliance')
            remarks=request.GET.get('remarks')
            #print(remarks,'remarks')
       
        #for saving merged forwarded reply
            if(str=='save'):
                if(len(compliance)!=0):
                    # reply_on=datetime.now()
                    targetd=request.GET.get('targetDate')
                    print(targetd,"targetd",compliance)
                    if targetd:
                        t_date = datetime.strptime(targetd, '%d/%m/%y').strftime('%Y-%m-%d')
                        t_flag=1
                    else:
                        t_date = None
                        t_flag=0
                    m1.Marked_Officers.objects.filter(item_no_id=item_no,marked_to_id=desigid).update(compliance=compliance,status_flag=1,target_flag=t_flag)
                    marked_nox=m1.Marked_Officers.objects.get(item_no_id=item_no,marked_to_id=desigid)
                    all_values=m1.Marked_Officers.objects.filter(item_no_id=item_no,marked_to_id=desigid).values('item_no__inspection_no__inspection_officer','item_no__created_on')
                    task_desp=m1.Item_details.objects.filter(item_no=item_no).values()

                    if(task_desp[0]['type']=='H'):
                            task_det=task_desp[0]['item_title']
                    elif(task_desp[0]['type']=='SH'):
                           task_det=task_desp[0]['observation']
                    
                    # insp_det_task=marked_nox.item_no.inspection_no
                    if t_flag:
                        if m1.target_compliance.objects.filter(marked_no=marked_nox).exists():
                            m1.target_compliance.objects.filter(marked_no=marked_nox).update(status_flag=1,target_date=t_date,pending_with_id=desigid,assigned_by_id=all_values[0]['item_no__inspection_no__inspection_officer'],init_date=all_values[0]['item_no__created_on'],task_flag=1,task_descp=task_det)
                        else:
                            m1.target_compliance.objects.create(marked_no=marked_nox,status_flag=1,target_date=t_date,pending_with_id=desigid,assigned_by_id=all_values[0]['item_no__inspection_no__inspection_officer'],init_date=all_values[0]['item_no__created_on'],task_flag=1,task_descp=task_det)


                   


                    inspection_no=m1.Item_details.objects.filter(item_no=item_no)[0].inspection_no_id
                else:
                    bono=[]
                    return JsonResponse(bono,safe=False)
                return JsonResponse({'insp_no':inspection_no})
        #for saving revert reason    
            elif(str=='revert'):
                if(len(remarks)!=0):
                    # reply_on=datetime.now()
                    m1.Marked_Officers.objects.filter(item_no_id=item_no,marked_to_id=desigid).update(revert=remarks,compliance=remarks,status_flag=4,reverted_on=datetime.now())
                    inspection_no=m1.Item_details.objects.filter(item_no=item_no)[0].inspection_no_id
                    var1 = m1.Marked_Officers.objects.filter(item_no_id=item_no).values('item_no_id')
                    print("something.............", var1)
                else:
                    bono=[]
                    return JsonResponse(bono,safe=False)
                return JsonResponse({'insp_no':inspection_no})
    # except Exception as e:
    #     try:
    #         m1.error_Table.objects.create(fun_name="compliance_filterdata_ajax",user_id=request.user,err_details=str(e))
    #     except:
    #         print("Internal Error!!!")
    #     #messages.error(request, 'Error : '+str(e))
    #     return render(request, "errorspage.html", {})


def compliance_form(request):
    # try:
        daterangeselect=request.GET.get('data3')
        listgrid=[]
        count=1
        if daterangeselect not in ['0-3','0-6','0-12','tofrom']:
            inspect_details1=m1.Inspection_details.objects.filter(Q(status_flag=1)|Q(status_flag=2)|Q(status_flag=3)).values().order_by('-inspection_no')
        else:
            from dateutil.relativedelta import relativedelta
            if daterangeselect=='0-3':
                now = datetime.today()
                six = now
                prev = now - relativedelta(months=3)
                prev = prev.date()
            elif daterangeselect=='0-6':
                now = datetime.today()
                six = now
                prev = now - relativedelta(months=6)
                prev = prev.date()
            elif daterangeselect=='0-12':
                now = datetime.today()
                six = now
                prev = now - relativedelta(months=12)
                prev = prev.date()
            elif daterangeselect=='tofrom':
                daterange=request.GET.get('daterange')
                daterange1=daterange.split('-')
                date1=daterange1[0].split('/')
                date2=daterange1[1].split('/')
                prev='20'+date1[2].strip()+'-'+date1[1].strip()+'-'+date1[0].strip()
                six='20'+date2[2].strip()+'-'+date2[1].strip()+'-'+date2[0].strip()
            inspect_details1=m1.Inspection_details.objects.filter((Q(status_flag=1)|Q(status_flag=2)|Q(status_flag=3)),inspected_on__gte=prev,inspected_on__lte=six).values().order_by('-inspection_no')
       
        #print(inspect_details1,'01234')
        cuser=request.user.username
        # desigid=models.Level_Desig.objects.exclude(delete_flag=True).filter(official_email_ID=cuser)[0].designation_code
        if request.user.user_role == 'guest':
            cuser=request.user.guest_email
            request.user.email=request.user.guest_email
        desigid=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].designation_code
       




        rly_code=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].rly_unit.location_code
        rly_unit_code=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].rly_unit.rly_unit_code
        parent_loc=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].rly_unit.parent_location_code
        parent_loc_id=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].rly_unit.parent_rly_unit_code
        div_code=rly_code
        if parent_loc!='RB':
            div_code=rly_code
            rly_code=parent_loc
            rly_unit_code=parent_loc_id

        
           


        for i in inspect_details1:
            # print(i,"apeksha_compliance")
            if m1.Marked_Officers.objects.filter(item_no__inspection_no_id=i['inspection_no'],status_flag=1,marked_to_id=desigid):        
                temp={}
                temp['sr_no']=count
                temp['inspection_no']=i['inspection_no']
                temp['final_submit_on']=i['final_submit_on'].strftime("%d/%m/%y") if i['final_submit_on']!=None else 'NA'
                temp['inspection_note_no']=i['inspection_note_no']
                temp['inspection_title']=i['inspection_title']
                t=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i['inspection_officer_id']).values('designation')
                if len(t)!=0:
                    temp['inspection_officer']=t[0]['designation']
                    temp['inspection_officer_id']=i['inspection_officer_id']
                else:
                    temp['inspection_officer']='NA'
                temp['inspected_on']=i['inspected_on'].strftime("%d/%m/%y") if i['inspected_on']!=None else 'NA'
                temp['inspected_on_filter']=i['inspected_on'] if i['inspected_on']!=None else 'NA'
                t1=m1.Marked_Officers.objects.filter(item_no_id__inspection_no=i['inspection_no'],marked_to_id=desigid,status_flag=1).values('viewed_on')
                temp['viewed_on']=t1[0]['viewed_on'].strftime("%d/%m/%y") if t1[0]['viewed_on']!=None else 'Pending'
                temp['file_path']=i['report_path']


                total_items_marked = m1.Marked_Officers.objects.exclude(status_flag=4).filter(item_no__inspection_no_id=i['inspection_no'],marked_to_id=desigid).count()
                total_items_complied = m1.Marked_Officers.objects.filter(item_no__inspection_no_id=i['inspection_no'],marked_to_id=desigid, status_flag=3).count()
                total_items_pending = m1.Marked_Officers.objects.filter(item_no__inspection_no_id=i['inspection_no'],marked_to_id=desigid, status_flag=1).count()


                temp['total_items_marked']=total_items_marked
                temp['total_items_complied']=total_items_complied
                temp['total_items_pending']=total_items_pending
               


                locs = list(m1.Insp_multi_location.objects.filter(inspection_no=i['inspection_no']).values('item', 'type'))
                zne=[]
                dvs=[]
                for l in locs:
                    if l['type']=='HQ':
                        zne.append(l['item'])
                    elif l['type']!='LOC':
                        dvs.append(l['item'])
                temp['zone']=zne
                temp['div']=dvs
               
                # print(locs)
                listgrid.append(temp)
                count=count+1
           
        # print(listgrid,'------------------------,pending')


        for l in listgrid:
            marked_of = m1.Marked_Officers.objects.filter(item_no__inspection_no_id=l['inspection_no'], status_flag=1, marked_to_id=desigid).values_list('marked_no', flat=True)
            for_mark = m1.Marked_Officers_forward.objects.filter(marked_no__in=marked_of).values()
            if for_mark:
                l.update({'for_flag':1})
            else:
                l.update({'for_flag':0})
           
            # total_for_mark=m1.Marked_Officers_forward.objects.filter(marked_no__in=marked_of).distinct('marked_no').count()
            total_for_mark=m1.Marked_Officers_forward.objects.filter(marked_no__in=marked_of).count()
            marked_forwards_reply=0
            # total_forwarded = list(m1.Marked_Officers_forward.objects.filter(marked_no__in=marked_of).distinct('marked_no').values_list('marked_no', flat=True))
            no_for_mark=m1.Marked_Officers_forward.objects.filter(marked_no__in=marked_of).distinct('marked_no').count()
            marked_forwards_reply=0
            # total_forwarded = list(m1.Marked_Officers_forward.objects.filter(marked_no__in=marked_of).distinct('marked_no').values_list('marked_no', flat=True))
            total_forwarded = list(m1.Marked_Officers_forward.objects.filter(marked_no__in=marked_of).values_list('marked_no', flat=True))
            for t in total_forwarded:
                        marked_forwards = list(m1.Marked_Officers_forward.objects.filter(marked_no=t).values_list('marked_no_forward', flat=True))
                        marked_forwards_pending=m1.Marked_Officers_forward.objects.filter(marked_no_forward__in=marked_forwards, status_flag__in=[1,3]).count()
                        # if marked_forwards_pending==0:
                        #     marked_forwards_reply+=1
                        marked_forwards_reply=total_for_mark-marked_forwards_pending
            l.update({'total_for_mark':total_for_mark,'marked_forwards_reply':marked_forwards_reply,'no_for_mark':no_for_mark})
           
       
        list1=models.railwayLocationMaster.objects.filter(location_type_desc__in=['RAILWAY BOARD', 'PRODUCTION UNIT', 'HEAD QUATER', 'PSU', 'INSTITUTE']).values('location_code').distinct().order_by('location_code')
        list2=[]
        for i in list1:
            # print(i['location_code'],'_________')
            list2.append(i['location_code'])
        list3=models.railwayLocationMaster.objects.filter(location_type_desc__in=['DIVISION','WORKSHOP', 'STORE', 'CONSTRUCTION', 'OFFICE']).distinct().values('location_code', 'location_type').order_by('location_code')
        list4=[]
        for i in list3:
            list4.append({'location_code': i['location_code'], 'location_type': i['location_type']})  
        list5=models.departMast.objects.all().values('department_name').distinct().order_by('department_name')
        list6=[]
        for i in list5:
            # print(i['department_name'],'_________')
            list6.append(i['department_name'])
        pclevel=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=desigid).values().order_by())


        designation=models.Level_Desig.objects.exclude(delete_flag=True).exclude(Q(empno_id=None)|Q(designation_code=desigid)|Q(delete_flag=True)).filter(pc7_levelmin__lte=pclevel[0]['pc7_levelmin'],rly_unit=rly_unit_code).distinct().values('designation').order_by('-pc7_levelmin')
        # print(designation)
        officr=[]
        for l in listgrid:
            # print(l,'apeksha')
            if l['inspection_officer'] not in officr:
                officr.append(l['inspection_officer'])
        # print(rly_code,'CUSER, DESIGID',list2)


        #PHASE 2
        counter=len(listgrid)
        phase2 = list(m2.einsp_marked.objects.exclude(revert=2).filter(marked_to_id=desigid,eitemid__einspno__status=1).values('eitemid__einspno__lastmodified_on','eitemid__einspno__inspected_on','eitemid_id','created_on','status_flag','created_by','id','compliance','marked_to_id','marked_emp_id','designation_by','target_date','revert','designation','id','eitemid__einspno','eitemid__einspno__inspection_title','eitemid__einspno__rly_id_id__location_code','eitemid__einspno__div_id_id__location_code','eitemid__einspno__inspection_note_no','eitemid__einspno__designation__designation').distinct('eitemid__einspno'))
        phase2_pending=[]
        # print(phase2)
        for p in phase2:
            
            p['total_marked']=m2.einsp_marked.objects.exclude(revert=2).filter(eitemid__einspno=p['eitemid__einspno'],marked_to_id=desigid).count()
            p['total_complied']=m2.einsp_marked.objects.exclude(revert=2).filter(eitemid__einspno=p['eitemid__einspno'],marked_to_id=desigid,status_flag=4).count()
            p['total_forward']=m2.einsp_marked.objects.exclude(revert=2).filter(eitemid__einspno=p['eitemid__einspno'],marked_to_id=desigid,status_flag=3).count()
            p['total_pending']=m2.einsp_marked.objects.exclude(revert=2).filter(eitemid__einspno=p['eitemid__einspno'],marked_to_id=desigid,status_flag__in=[0,1,2,3]).count()
            all_ids=m2.einsp_marked.objects.filter(eitemid__einspno=p['eitemid__einspno']).values_list('id', flat=True)
            if m2.einsp_forward_marked.objects.filter(marked_no__in=all_ids,further_forward=None).exists():
                p['marked_forwards_reply']= m2.einsp_forward_marked.objects.filter(marked_no__in=all_ids,further_forward=None,status_flag=2).count()
                p['total_for_mark']= m2.einsp_forward_marked.objects.filter(marked_no__in=all_ids,further_forward=None).count()
                p['for_flag']=1
            else:
                p['for_flag']=0
            if p['total_pending'] != 0:
                counter+=1
                p['sr_no']=counter
                phase2_pending.append(p)
            if p['eitemid__einspno__designation__designation'] not in officr:
                officr.append(p['eitemid__einspno__designation__designation'])
            # print(p['for_flag'],p['id'])

        context={
            'zone':list2 ,
            'division':list4,
            'dept':list6,
            'listgrid':listgrid,
            'desig':designation,
            'designation':designation,
            'officr':officr,
            'rly_code':rly_code,
            'div_code':div_code,
            'phase2_pending':phase2_pending,
        }
        # print(list4,div_code)
        # print(officr,'_____________',)
        return render(request,'compliance_form.html',context)
    # except Exception as e:
    #     try:
    #         m1.error_Table.objects.create(fun_name="compliance_form",user_id=request.user,err_details=str(e))
    #     except:
    #         print("Internal Error!!!")
    #     #messages.error(request, 'Error : '+str(e))
    #     return render(request, "errorspage.html", {})
    

def compliance_filterdata1(request):
    # try:
        
        if request.method == "GET" and request.is_ajax():
            rly_id=request.GET.get('rly_id')
            div_id=request.GET.get('div_id')
            ofc_idssss=request.GET.get('ofc_id')
            startDate=request.GET.get('startDate')
            endDate=request.GET.get('endDate')
            daterange=datetime.strptime(startDate,'%Y-%m-%d').strftime("%d/%m/%Y")+"-"+datetime.strptime(endDate,'%Y-%m-%d').strftime("%d/%m/%Y")
            startDate = datetime.strptime(startDate,'%Y-%m-%d')
            endDate = datetime.strptime(endDate,'%Y-%m-%d')
            
            str=request.GET.get('str')
            listss=[]
            count=1
            if ofc_idssss=="":
                # print("here")
                if rly_id=="" and div_id=="":
                    # print("here too")
                    inspect_details=m1.Inspection_details.objects.filter(inspected_on__gte=startDate,inspected_on__lte=endDate).values()
                    # print(inspect_details)
                elif rly_id=="":
                    insp_details=m1.Insp_multi_location.objects.filter(Q(type='DIV',item=div_id)).values('inspection_no_id')
                    inspect_details=m1.Inspection_details.objects.filter(inspection_no__in=insp_details,inspected_on__gte=startDate,inspected_on__lte=endDate).values()
                elif div_id=="":
                    insp_details=m1.Insp_multi_location.objects.filter(Q(type='HQ',item=rly_id)).values('inspection_no_id')
                    inspect_details=m1.Inspection_details.objects.filter(inspection_no__in=insp_details,inspected_on__gte=startDate,inspected_on__lte=endDate).values()
                else:
                    insp_details=m1.Insp_multi_location.objects.filter(Q(type='HQ',item=rly_id)&Q(type='DIV',item=div_id)).values('inspection_no_id')
                    inspect_details=m1.Inspection_details.objects.filter(inspection_no__in=insp_details,inspected_on__gte=startDate,inspected_on__lte=endDate).values()
            else:
                if rly_id=="" and div_id=="":
                    inspect_details=m1.Inspection_details.objects.filter(inspected_on__gte=startDate,inspected_on__lte=endDate).values()
                elif rly_id=="":
                    insp_details=m1.Insp_multi_location.objects.filter(Q(type='DIV',item=div_id)).values('inspection_no_id')
                    inspect_details=m1.Inspection_details.objects.filter(inspection_no__in=insp_details,inspected_on__gte=startDate,inspected_on__lte=endDate).values()
                elif div_id=="":
                    insp_details=m1.Insp_multi_location.objects.filter(Q(type='HQ',item=rly_id)).values('inspection_no_id')
                    inspect_details=m1.Inspection_details.objects.filter(inspection_no__in=insp_details,inspected_on__gte=startDate,inspected_on__lte=endDate).values()
                else:
                    insp_details=m1.Insp_multi_location.objects.filter(Q(type='HQ',item=rly_id)&Q(type='DIV',item=div_id)).values('inspection_no_id')
                    inspect_details=m1.Inspection_details.objects.filter(inspection_no__in=insp_details,inspected_on__gte=startDate,inspected_on__lte=endDate).values()

            cuser=request.user.username
            if request.user.user_role == 'guest':
                cuser=request.user.guest_email
                request.user.email=request.user.guest_email
            desigid=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].designation_code
            
            # if(str=='pending'):
            #     for i in inspect_details:
            #         itemDet=list(m1.Item_details.objects.filter(inspection_no=i['inspection_no']).values('item_no'))
            #         print(itemDet)
            #         for j in itemDet:
            #             marked_to_me=list(m1.Marked_Officers.objects.filter(item_no=j['item_no'],marked_to_id=desigid,status_flag=1).values())
            #             print(marked_to_me)
        # data of pending reply view
            if(str=='pending'):
                
                for i in inspect_details:
                    if m1.Marked_Officers.objects.filter(item_no_id__inspection_no=i['inspection_no'],marked_to_id=desigid,status_flag=1):
                        temp={}
                        temp['sr_no']=count
                        temp['inspection_no']=i['inspection_no']
                        temp['final_submit_on']=i['final_submit_on'].strftime("%d/%m/%y") if i['final_submit_on']!=None else 'NA'
                        temp['inspection_note_no']=i['inspection_note_no']
                        temp['inspection_title']=i['inspection_title']
                        t=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i['inspection_officer_id']).values('designation')
                        if len(t)!=0:
                            temp['inspection_officer']=t[0]['designation']
                            # print(temp['inspection_officer'],"hello apeksha")
                            if ofc_idssss!='':
                                if temp['inspection_officer']!=ofc_idssss:
                                    continue
                        else:
                            temp['inspection_officer']='NA'
                        temp['inspected_on']=i['inspected_on'].strftime("%d/%m/%y") if i['inspected_on']!=None else 'NA'
                        temp['inspected_on_filter']=i['inspected_on'] if i['inspected_on']!=None else 'NA'
                        temp['viewed_on']=i['modified_on'].strftime("%d/%m/%y") if i['modified_on']!=None else 'Pending'
                        temp['file_path']=i['report_path']

                        total_items_marked = m1.Marked_Officers.objects.exclude(status_flag=4).filter(item_no__inspection_no_id=i['inspection_no'],marked_to_id=desigid).count()
                        total_items_complied = m1.Marked_Officers.objects.filter(item_no__inspection_no_id=i['inspection_no'],marked_to_id=desigid, status_flag=3).count()
                        total_items_pending = m1.Marked_Officers.objects.filter(item_no__inspection_no_id=i['inspection_no'],marked_to_id=desigid, status_flag=1).count()

                        temp['total_items_marked']=total_items_marked
                        temp['total_items_complied']=total_items_complied
                        temp['total_items_pending']=total_items_pending
                        
                        listss.append(temp)
                        count=count+1

                        
                for l in listss:
                    marked_of = m1.Marked_Officers.objects.filter(item_no__inspection_no_id=l['inspection_no'], status_flag=1, marked_to_id=desigid).values_list('marked_no', flat=True) 
                    for_mark = m1.Marked_Officers_forward.objects.filter(marked_no__in=marked_of).values()
                    if for_mark:
                        l.update({'for_flag':1})
                    else:
                        l.update({'for_flag':0})
                    
                    total_for_mark=m1.Marked_Officers_forward.objects.filter(marked_no__in=marked_of).count()
                    no_for_mark=m1.Marked_Officers_forward.objects.filter(marked_no__in=marked_of).distinct('marked_no').count()
                    marked_forwards_reply=0
                    # total_forwarded = list(m1.Marked_Officers_forward.objects.filter(marked_no__in=marked_of).distinct('marked_no').values_list('marked_no', flat=True))
                    total_forwarded = list(m1.Marked_Officers_forward.objects.filter(marked_no__in=marked_of).values_list('marked_no', flat=True))
                    for t in total_forwarded:
                        marked_forwards = list(m1.Marked_Officers_forward.objects.filter(marked_no=t).values_list('marked_no_forward', flat=True))
                        marked_forwards_pending=m1.Marked_Officers_forward.objects.filter(marked_no_forward__in=marked_forwards, status_flag__in=[1,3]).count()
                        # if marked_forwards_pending==0:
                        #     marked_forwards_reply+=1
                        marked_forwards_reply=total_for_mark-marked_forwards_pending
                    l.update({'total_for_mark':total_for_mark,'marked_forwards_reply':marked_forwards_reply,'no_for_mark':no_for_mark})

            
                
                # print(listss,'pending')
            # data of send reply view
            elif(str=='send'):
                for i in inspect_details:
                    if m1.Marked_Officers.objects.filter(item_no_id__inspection_no=i['inspection_no'],marked_to_id=desigid,status_flag=2):
                        temp={}
                        temp['sr_no']=count
                        temp['inspection_no']=i['inspection_no']
                        temp['inspection_note_no']=i['inspection_note_no']
                        temp['inspection_title']=i['inspection_title']
                        t=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i['inspection_officer_id']).values('designation')
                        if len(t)!=0:
                            temp['inspection_officer']=t[0]['designation']
                            # print(temp['inspection_officer'],"hello apeksha")
                            if ofc_idssss!='':
                                if temp['inspection_officer']!=ofc_idssss:
                                    continue
                        else:
                            temp['inspection_officer']='NA'
                        temp['inspected_on']=i['inspected_on'].strftime("%d/%m/%y") if i['inspected_on']!=None else 'NA'
                        temp['viewed_on']=i['modified_on'].strftime("%d/%m/%y") if i['modified_on']!=None else 'Pending'
                        temp['file_path']=i['report_path']
                        listss.append(temp)
                        count=count+1
                print(listss,'send')
            # data of accepted reply view
            elif(str=='accept'):
                for i in inspect_details:
                    if m1.Marked_Officers.objects.filter(item_no_id__inspection_no=i['inspection_no'],marked_to_id=desigid,status_flag=3):
                        temp={}
                        temp['sr_no']=count
                        temp['inspection_no']=i['inspection_no']
                        temp['inspection_note_no']=i['inspection_note_no']
                        temp['inspection_title']=i['inspection_title']
                        t=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i['inspection_officer_id']).values('designation')
                        if len(t)!=0:
                            temp['inspection_officer']=t[0]['designation']
                            # print(temp['inspection_officer'],"hello apeksha")
                            if ofc_idssss!='':
                                if temp['inspection_officer']!=ofc_idssss:
                                    continue
                        else:
                            temp['inspection_officer']='NA'
                        temp['inspected_on']=i['inspected_on'].strftime("%d/%m/%y") if i['inspected_on']!=None else 'NA'
                        temp['viewed_on']=i['modified_on'].strftime("%d/%m/%y") if i['modified_on']!=None else 'Pending'
                        temp['file_path']=i['report_path']
                        listss.append(temp)
                        count=count+1
                print(listss,'accept')
            # data of rejected reply view
            elif(str=='reject'):
                for i in inspect_details:
                    item=m1.Item_details.objects.filter(inspection_no_id=i['inspection_no']).values('item_no')
                    marked=m1.Marked_Officers.objects.filter(item_no_id__in=item,marked_to_id=desigid).values('marked_no')
                    #print(marked,'rejectreject')
                    if(len(marked)!=0):
                        if m1.Officers_Remark.objects.filter(marked_no_id__in=marked,marked_desig_id_id=desigid):
                            temp={}
                            temp['sr_no']=count
                            temp['inspection_no']=i['inspection_no']
                            temp['inspection_note_no']=i['inspection_note_no']
                            temp['inspection_title']=i['inspection_title']
                            t=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i['inspection_officer_id']).values('designation')
                            if len(t)!=0:
                                temp['inspection_officer']=t[0]['designation']
                                # print(temp['inspection_officer'],"hello apeksha")
                                if ofc_idssss!='':
                                    if temp['inspection_officer']!=ofc_idssss:
                                        continue
                            else:
                                temp['inspection_officer']='NA'
                            temp['inspected_on']=i['inspected_on'].strftime("%d/%m/%y") if i['inspected_on']!=None else 'Pending'
                            temp['file_path']=i['report_path']
                            listss.append(temp)
                            count=count+1
                print(listss,'reject')
            # data of rejected reply view
            elif(str=='revert'):
                for i in inspect_details:
                    if m1.Marked_Officers.objects.filter(item_no_id__inspection_no=i['inspection_no'],marked_to_id=desigid,status_flag=4):
                        #print(count,'countcount')
                        temp={}
                        temp['sr_no']=count
                        temp['inspection_no']=i['inspection_no']
                        temp['inspection_note_no']=i['inspection_note_no']
                        temp['inspection_title']=i['inspection_title']
                        t=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i['inspection_officer_id']).values('designation')
                        if len(t)!=0:
                            temp['inspection_officer']=t[0]['designation']
                            # print(temp['inspection_officer'],"hello apeksha")
                            if ofc_idssss!='':
                                if temp['inspection_officer']!=ofc_idssss:
                                    continue
                        else:
                            temp['inspection_officer']='NA'
                        temp['inspected_on']=i['inspected_on'].strftime("%d/%m/%y") if i['inspected_on']!=None else 'NA'
                        t1=m1.Marked_Officers.objects.filter(item_no_id__inspection_no=i['inspection_no'],marked_to_id=desigid,status_flag=4).values('reverted_on')
                        temp['reverted_on']=t1[0]['reverted_on'].strftime("%d/%m/%y") if t1[0]['reverted_on']!=None else 'NA'
                        temp['file_path']=i['report_path']
                        listss.append(temp)
                        count=count+1
                print(listss,'revert')            
            # data of pending query view
            elif(str=='pending-forward'):
                frwd_ofc=request.GET.get('frwd_ofc')
                if frwd_ofc=='all':
                    forward=list(m1.Marked_Officers_forward.objects.filter(marked_to_forward_id=desigid, status_flag__in=[1,3],marked_no__status_flag=1).values_list('created_by_forward',flat=True).distinct('created_by_forward'))
                else:
                    forward=[frwd_ofc]
                # print(forward)

                marked_no=list(m1.Marked_Officers_forward.objects.filter(marked_to_forward_id=desigid, created_by_forward__in=forward, status_flag__in=[1,3]).values_list('marked_no_id', flat=True).distinct('marked_no_id'))
                item_no=list(m1.Marked_Officers.objects.filter(marked_no__in=marked_no,status_flag=1).values_list('item_no_id', flat=True))
                insp_no=list(m1.Item_details.objects.filter(item_no__in=item_no).distinct('inspection_no_id').values_list('inspection_no_id', flat=True))
                
                for i in inspect_details:      
                    # if m1.Marked_Officers.objects.filter(item_no__inspection_no_id=i['inspection_no'],marked_no__in=marked_no):
                    #     item_no=m1.Marked_Officers.objects.filter(item_no__inspection_no_id=i['inspection_no'],marked_no__in=marked_no)[0].item_no_id
                    #     print(item_no)
                        # if m1.Marked_Officers_forward.objects.filter(marked_no__item_no=item_no,status_flag__in=[1,3],marked_to_forward_id=desigid):  
                            # print('ENTERED',i)
                        if i['inspection_no'] in insp_no:
                            temp={}
                            temp['sr_no']=count
                            temp['inspection_no']=i['inspection_no']
                            temp['inspection_note_no']=i['inspection_note_no']
                            temp['inspection_title']=i['inspection_title']
                            t=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i['inspection_officer_id']).values('designation')
                            if len(t)!=0:
                                temp['inspection_officer']=t[0]['designation']
                                temp['inspection_officer_id']=i['inspection_officer_id']
                                if ofc_idssss!='':
                                    if temp['inspection_officer']!=ofc_idssss:
                                        continue
                            else:
                                temp['inspection_officer']='NA'
                            temp['inspected_on']=i['inspected_on'].strftime("%d/%m/%y") if i['inspected_on']!=None else 'NA'
                            temp['file_path']=i['report_path']
                            listss.append(temp)
                            count=count+1
                print(listss,'pending-forward')
            # data of sent query view
            elif(str=='sent-forward'):
                marked_no=list(m1.Marked_Officers_forward.objects.filter(marked_to_forward_id=desigid, status_flag=2).values_list('marked_no_id', flat=True).distinct('marked_no_id'))
                item_no=list(m1.Marked_Officers.objects.filter(marked_no__in=marked_no).values_list('item_no_id', flat=True))
                insp_no=list(m1.Item_details.objects.filter(item_no__in=item_no).distinct('inspection_no_id').values_list('inspection_no_id', flat=True))
                
                for i in inspect_details:      
                    # marked_no=m1.Marked_Officers_forward.objects.filter(marked_to_forward_id=desigid).values('marked_no_id')
                    # if m1.Marked_Officers.objects.filter(item_no__inspection_no_id=i['inspection_no'],marked_no__in=marked_no,status_flag=1):
                    #     item_no=m1.Marked_Officers.objects.filter(item_no__inspection_no_id=i['inspection_no'],marked_no__in=marked_no)[0].item_no_id
                    #     if m1.Marked_Officers_forward.objects.filter(marked_no__item_no=item_no,status_flag=1,marked_to_forward_id=desigid):  
                        if i['inspection_no'] in insp_no:    
                            temp={}
                            temp['sr_no']=count
                            temp['inspection_no']=i['inspection_no']
                            temp['inspection_note_no']=i['inspection_note_no']
                            temp['inspection_title']=i['inspection_title']
                            t=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i['inspection_officer_id']).values('designation')
                            if len(t)!=0:
                                temp['inspection_officer']=t[0]['designation']
                                temp['inspection_officer_id']=i['inspection_officer_id']
                                if ofc_idssss!='':
                                    if temp['inspection_officer']!=ofc_idssss:
                                        continue
                            else:
                                temp['inspection_officer']='NA'
                            temp['inspected_on']=i['inspected_on'].strftime("%d/%m/%y") if i['inspected_on']!=None else 'NA'
                            temp['file_path']=i['report_path']
                            listss.append(temp)
                            count=count+1
                        # print(listss,'send-forward')

            # data of forwarded by me view
            if (str=='forwarded_all'):
                inspections_forwarded=list(m1.Marked_Officers_forward.objects.filter(marked_no__marked_to=desigid,marked_no__status_flag=1).values_list('marked_no__item_no__inspection_no', flat=True).distinct())
                for i in inspect_details:
                    if i['inspection_no'] in inspections_forwarded:
                        temp={}
                        temp['sr_no']=count
                        temp['inspection_no']=i['inspection_no']
                        temp['inspection_note_no']=i['inspection_note_no']
                        temp['inspection_title']=i['inspection_title']
                        t=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=i['inspection_officer_id']).values('designation')
                        if len(t)!=0:
                            temp['inspection_officer']=t[0]['designation']
                            temp['inspection_officer_id']=i['inspection_officer_id']
                            if ofc_idssss!='':
                                if temp['inspection_officer']!=ofc_idssss:
                                    continue
                        else:
                            temp['inspection_officer']='NA'
                        temp['inspected_on']=i['inspected_on'].strftime("%d/%m/%y") if i['inspected_on']!=None else 'NA'
                        t1=m1.Marked_Officers.objects.filter(item_no_id__inspection_no=i['inspection_no'],marked_to_id=desigid,status_flag=1).values('viewed_on')
                        # temp['viewed_on']=t1[0]['viewed_on'].strftime("%d/%m/%y") if t1[0]['viewed_on']!=None else 'Pending'
                        temp['file_path']=i['report_path']
                        listss.append(temp)
                        count=count+1  
            
            for i in listss:
                locs = list(m1.Insp_multi_location.objects.filter(inspection_no=i['inspection_no']).values('item', 'type'))
                zne=[]
                dvs=[]
                for l in locs:
                    if l['type']=='HQ':
                        zne.append(l['item'])
                    elif l['type']!='LOC':
                        dvs.append(l['item'])
                i.update({'zone':zne})
                i.update({'div':dvs})
                # temp['zone']=zne
                # temp['div']=dvs
                
           

           #PHASE 2
            print(div_id)
            rly_list=list(models.railwayLocationMaster.objects.filter(location_code=rly_id,location_type='ZR').values_list('rly_unit_code',flat=True))
            if div_id:
                div_code=div_id.split('-')[0]
                #div_type=div_id.split('-')[1]
                div_list=list(models.railwayLocationMaster.objects.filter(location_code=div_code).values_list('rly_unit_code',flat=True))
            else:
                div_list=[]
            if ofc_idssss == '':
                ofc_list=[]
            else:
                ofc_list=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation=ofc_idssss).values_list('designation_code', flat=True)
            
            
            phase2=phase2_filter(request,str,rly_list,div_list,daterange,ofc_list)
            
            return JsonResponse({'inspect_details':listss,'phase2':phase2})
        

    # except Exception as e:
    #     try:
    #         m1.error_Table.objects.create(fun_name="compliance_filterdata1",user_id=request.user,err_details=str(e))
    #     except:
    #         print("Internal Error!!!")
    #     #messages.error(request, 'Error : '+str(e))
    #     return render(request, "errorspage.html", {})


def compliance_phase2(request):
    cuser=request.user
    if request.user.user_role == 'guest':
        cuser=request.user.guest_email
        request.user.email=request.user.guest_email

    empnox = models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=request.user)| Q(official_email_ID=request.user.guest_email) | Q(official_email_ID=request.user.email))
    if empnox:
        das_desig = empnox[0].designation_code
        desig = empnox[0].designation

    desigid=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].designation_code
    rly_code=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].rly_unit.location_code
    rly_unit_code=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].rly_unit.rly_unit_code
    parent_loc=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].rly_unit.parent_location_code
    parent_loc_id=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].rly_unit.parent_rly_unit_code
    div_code=rly_code
    div_unit_code=rly_unit_code
    if parent_loc!='RB':
        div_code=rly_code
        rly_code=parent_loc
        div_unit_code=parent_loc_id

    pclevel=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=desigid).values().order_by())
    designation=list(models.Level_Desig.objects.exclude(delete_flag=True).exclude(Q(empno_id=None)|Q(designation_code=das_desig)|Q(delete_flag=True)).filter(pc7_levelmin__lte=pclevel[0]['pc7_levelmin'],rly_unit=rly_unit_code).distinct().values('designation').order_by('-pc7_levelmin'))

    zone=models.railwayLocationMaster.objects.filter(location_type_desc__in=['RAILWAY BOARD', 'PRODUCTION UNIT', 'HEAD QUATER', 'PSU', 'INSTITUTE']).values_list('location_code', flat=True).distinct().order_by('location_code')
    list3=models.railwayLocationMaster.objects.filter(location_type_desc__in=['DIVISION','WORKSHOP', 'STORE', 'CONSTRUCTION', 'OFFICE'], parent_rly_unit_code=div_unit_code).distinct().values('location_code', 'location_type').order_by('location_code')
    division=[]
    for i in list3:
        division.append({'location_code': i['location_code'], 'location_type': i['location_type']})  

    if request.method == 'GET' and request.is_ajax():
        duration=request.GET.get('duration')
        if duration == 'Later':
            insp_no=request.GET.get('inspection_id')
            status=request.GET.get('status')
            typei=request.GET.get('type')
            insp_details=list(m2.einspection_details.objects.filter(einspno=insp_no).values('lastmodified_on','einspno','instypeid_id','inspected_on','inspection_title','designation_id__designation','designation_id','created_by','inspection_note_no'))
            insp_details[0]['inspected_on']=insp_details[0]['inspected_on'].strftime("%d/%m/%Y")
            insp_details[0]['lastmodified_on']=insp_details[0]['lastmodified_on'].strftime("%d/%m/%Y")
            
            names=m1.empmast.objects.filter(empno=insp_details[0]['created_by']).values('empname','empmname','emplname')
            insp_details[0]['insp_name']=''
            if names:
                insp_details[0]['insp_name']+=names[0]['empname']+' ' if names[0]['empname']!=None else ' '
                insp_details[0]['insp_name']+=names[0]['empmname']+' ' if names[0]['empmname']!=None else ' '
                insp_details[0]['insp_name']+=names[0]['emplname']+' ' if names[0]['emplname']!=None else ' '
            
            

            listgrid=[]
            forwarded_reply=[]
            ff=None
            marked_no=-1
            if typei =='reply':
                if status == 'P':
                    marked_nos = list(m2.einsp_marked.objects.exclude(revert=2).filter(marked_to_id=das_desig,eitemid__einspno=insp_no,status_flag__in=[0,1,2,3]).values())

                if status == 'A':
                    marked_nos = list(m2.einsp_marked.objects.exclude(revert=2).filter(marked_to_id=das_desig,eitemid__einspno=insp_no,reject=1).values())
                    
                if status == 'R':
                    marked_no=request.GET.get('marked_no')
                    marked_nos = list(m2.einsp_marked.objects.exclude(revert=2).filter(eitemid__einspno=insp_no, id=marked_no).values())
                
                if status == 'X':
                    # marked_no=request.GET.get('marked_no')
                    marked_nos = list(m2.einsp_marked.objects.exclude(revert=2, status_flag=4).filter(marked_to_id=das_desig,eitemid__einspno=insp_no,reject=1).values())

                if status == 'C':
                    # marked_no=request.GET.get('marked_no')
                    marked_nos = list(m2.einsp_marked.objects.exclude(revert=2).filter(marked_to_id=das_desig,eitemid__einspno=insp_no,status_flag=4).values())
 
            elif typei =='Forward':
                #for fetch forward replies of items forwarded by me
                if status == 'F':
                    marked_no=request.GET.get('marked_no')
                    marked_nos = list(m2.einsp_marked.objects.exclude(revert=2).filter(eitemid__einspno=insp_no, id=marked_no).values())
                    forwarded_reply=list(m2.einsp_forward_marked.objects.filter(forwardBy_id=das_desig,marked_no_id=marked_no).values())
                #for pending replies of items forwarded to me
                elif status == 'P':
                    for_marked_nos = list(m2.einsp_forward_marked.objects.filter(forwardTo_id=das_desig,marked_no__eitemid__einspno=insp_no,status_flag__in=[0,1,3]).values_list('marked_no_id', flat=True))
                    marked_nos = list(m2.einsp_marked.objects.exclude(revert=2).filter(eitemid__einspno=insp_no, id__in=for_marked_nos).values().distinct('id'))
                    forwarded_reply=list(m2.einsp_forward_marked.objects.filter(forwardTo_id=das_desig,marked_no__eitemid__einspno=insp_no,status_flag__in=[0,1,3]).values())
                    ff=1
                    # print("here",for_marked_nos,marked_nos,forwarded_reply)
                #for fetch forward replies of items further forwarded by me 
                if status == 'B':
                    forwardId=request.GET.get('forwardId')
                    marked_no = list(m2.einsp_forward_marked.objects.filter(forwardId=forwardId).values('marked_no_id'))[0]['marked_no_id']
                    forwarded_reply=m2.einsp_forward_marked.objects.filter(forwardBy_id=das_desig,marked_no=marked_no,further_forward=1).values()
                    marked_nos = list(m2.einsp_marked.objects.exclude(revert=2).filter(eitemid__einspno=insp_no, id=marked_no).values())
                #for fetch forward replies of multiple items to be forwarded together
                if status == 'M':
                    marked_no=json.loads(request.GET.get('marked_no'))
                    forwarded_reply=m2.einsp_forward_marked.objects.filter(forwardBy_id=das_desig,marked_no__in=marked_no,further_forward=None).values()
                    marked_nos = list(m2.einsp_marked.objects.exclude(revert=2).filter(eitemid__einspno=insp_no, id__in=marked_no).values())

            count=0
            for m in marked_nos:
                temp={}
                count+=1
                item_det=m2.einspection_item_detail.objects.filter(eitemid=m['eitemid_id']).values()
                question=m2.questionare_master.objects.filter(qid=item_det[0]['qid_id']).values()
                temp['sr_no']=count
                temp['item_no']=m['eitemid_id']
                temp['marked_no']=m['id']
                temp['question']=question[0]['activity']
                temp['compliance']=m['compliance']
                temp['status_flag']=m['status_flag']
                temp['forwarded']=False
                if len(list(m2.einsp_forward_marked.objects.filter(forwardBy_id=das_desig,marked_no_id=m['id'],further_forward=ff).values_list('forwardTo__designation', flat=True))):
                    temp['forwarded_to']=str(list(m2.einsp_forward_marked.objects.filter(forwardBy_id=das_desig,marked_no_id=m['id'],further_forward=ff).values_list('forwardTo__designation', flat=True)))
                    temp['forwarded_to']=(temp['forwarded_to'].strip(']')).strip('[')
                    temp['forwarded']=True
                temp['report_act']=question[0]['report_act']
                temp['value']=item_det[0]['value']
                temp['tgt_date']=m['target_date'].strftime("%d/%m/%y") if m['target_date'] else -1
                temp['compliance_recieved_on']=m['compliance_recieved_on'].strftime("%d/%m/%Y") if m['compliance_recieved_on'] else 'NA'
                forwardss=[]
                if len(forwarded_reply):
                    for x in forwarded_reply:
                        tem={}
                        tem['forwardTo']=x['forwardTo_id']
                        tem['forwardBy']=x['forwardBy_id']
                        tem['designationBy']=x['designationBy']
                        tem['designationTo']=x['designationTo']
                        tem['forwardStatus']=x['status_flag']
                        tem['forward_on']=x['created_date'].strftime("%d/%m/%Y") if x['created_date'] else -1
                        tem['reply_on_forward']=x['reply_on'].strftime("%d/%m/%Y") if x['reply_on'] else -1
                        tem['compliance_forward']=x['compliance'] if x['compliance'] else 'NA'
                        tem['remarks_forward']=x['remarks'] if x['remarks'] else 'NA'
                        tem['rejected_on_fwd']=x['rejected_on'].strftime("%d/%m/%Y") if x['rejected_on'] else 'NA'
                        tem['forwardId']=x['forwardId']
                        tem['further_forward']=x['further_forward']
                        print(forwarded_reply)
                        tem['further_forward_to']=str(list(m2.einsp_forward_marked.objects.filter(forwardBy_id=das_desig,marked_no_id=m['id'],parent_forward=tem['forwardId']).values_list('forwardTo__designation', flat=True)))
                        tem['further_forward_to']=(tem['further_forward_to'].strip(']')).strip('[')
                        forwardss.append(tem)
                temp['forwardss'] = forwardss
                temp['reject']=m['reject']
                if m['reject']==1:
                    rejected_remarks=list(m2.einsp_officers_remark.objects.filter(marked_no=temp['marked_no']).values())
                    temp['rejected_rem']=rejected_remarks[0]['remark']
                    temp['rejected_on']=rejected_remarks[0]['rejected_on'].strftime("%d/%m/%y") if rejected_remarks[0]['rejected_on'] else 'NA'
                listgrid.append(temp)
            try:
                user_role2 = request.session['user_role']
            except:
                user_role2 = None

    

                
            context={
                'insp_details':insp_details,
                'listgrid':listgrid,
                'designation':designation,
                'zone':list(zone),
                'division':division,
                'rly_code':rly_code,
                'div_code':div_code,
                'marked_no':marked_no,
                'user_role':user_role2,
                }
            if typei =='Forward' and status == 'F':
                context['furtherFwd']=0
            elif typei =='Forward' and status == 'B':
                context['furtherFwd']=1
            elif typei =='Forward' and status == 'M':
                context['furtherFwd']=0
            
            return JsonResponse(context,safe = False)

        elif duration=='Later1':
            cuser=request.user
            if request.user.user_role == 'guest':
                cuser=request.user.guest_email
                request.user.email=request.user.guest_email
            desigid=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user)).values()

            rly_code=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].rly_unit.location_code
            rly_unit_code=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].rly_unit.rly_unit_code
            parent_loc=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].rly_unit.parent_location_code
            parent_loc_id=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].rly_unit.parent_rly_unit_code
            div_code=rly_code
            if parent_loc!='RB':
                rly_code=parent_loc
                rly_unit_code=parent_loc_id


            list1=models.railwayLocationMaster.objects.filter(location_type_desc__in=['RAILWAY BOARD', 'PRODUCTION UNIT', 'HEAD QUATER', 'PSU', 'INSTITUTE']).values('location_code').distinct().order_by('location_code')
            list2=[]
            for i in list1:
                list2.append(i['location_code'])
            list3=models.railwayLocationMaster.objects.filter(location_type_desc__in=['DIVISION','WORKSHOP', 'STORE', 'CONSTRUCTION', 'OFFICE'],parent_location_code=rly_code).distinct().values('location_code').order_by('location_code')
            list4=[]
            for i in list3:
                list4.append(i['location_code'])  
            list5=models.departMast.objects.all().values('department_name').distinct().order_by('department_name')
            list6=[]
            for i in list5:
                list6.append(i['department_name']) 
            pclevel=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=desigid[0]['designation_code']).values().order_by())
            designation=models.Level_Desig.objects.exclude(delete_flag=True).exclude(Q(empno_id=None),designation_code=desigid[0]['designation_code'], delete_flag=True).filter(pc7_levelmin__lte=pclevel[0]['pc7_levelmin'],rly_unit=rly_unit_code).distinct().values('designation').order_by('-pc7_levelmin')

            phase=request.GET.get('phase')
            inspection_no = request.GET.get('inspection_id')
            listgrid=[]
            final_list=[]
            if phase == '2':
                marked_no = list(m2.einsp_forward_marked.objects.filter(forwardBy_id=desigid[0]['designation_code'],marked_no__eitemid__einspno=inspection_no).values_list('marked_no', flat=True))
                marked_nos = list(m2.einsp_marked.objects.exclude(revert=2).filter(eitemid__einspno=inspection_no, id__in=marked_no).values())

                insp_details=list(m2.einspection_details.objects.filter(einspno=inspection_no).values('lastmodified_on','einspno','instypeid_id','inspected_on','inspection_title','designation__designation','designation_id','created_by','inspection_note_no'))
                insp_details[0]['officer_desig']=insp_details[0]['designation__designation']
                names=m1.empmast.objects.filter(empno=insp_details[0]['created_by']).values('empname','empmname','emplname')
                insp_details[0]['insp_name']=''
                if names:
                    insp_details[0]['insp_name']+=names[0]['empname']+' ' if names[0]['empname']!=None else ' '
                    insp_details[0]['insp_name']+=names[0]['empmname']+' ' if names[0]['empmname']!=None else ' '
                    insp_details[0]['insp_name']+=names[0]['emplname']+' ' if names[0]['emplname']!=None else ' '

                name=insp_details[0]['insp_name']
                details=insp_details

                for m in marked_nos:
                    temp={}
                    item_det=m2.einspection_item_detail.objects.filter(eitemid=m['eitemid_id']).values()
                    question=m2.questionare_master.objects.filter(qid=item_det[0]['qid_id']).values()
                    temp['item_no']=m['eitemid_id']
                    temp['marked_no']=m['id']
                    temp['question']=question[0]['activity']
                    temp['report_act']=question[0]['report_act']
                    temp['value']=item_det[0]['value']
                    forwardss=[]
                    forwarded_reply=list(m2.einsp_forward_marked.objects.filter(forwardBy_id=desigid[0]['designation_code'],marked_no=m['id']).values())
                
                    if len(forwarded_reply):
                        for x in forwarded_reply:
                            tem={}
                            tem['forwardTo']=x['forwardTo_id']
                            tem['forwardBy']=x['forwardBy_id']
                            tem['designationBy']=x['designationBy']
                            tem['designationTo']=x['designationTo']
                            tem['forwardStatus']=x['status_flag']
                            if x['status_flag'] == 3:
                                tem['stts'] = 'Rejected'
                            elif x['status_flag'] == 2:
                                tem['stts'] = 'Accepted'
                            else:
                                tem['stts'] = 'Pending'
                            tem['forward_on']=x['created_date'].strftime("%d/%m/%Y") if x['created_date'] else -1
                            tem['reply_on_forward']=x['reply_on'].strftime("%d/%m/%Y") if x['reply_on'] else -1
                            tem['compliance_forward']=x['compliance'] if x['compliance'] else 'NA'
                            tem['remarks_forward']=x['remarks'] if x['remarks'] else 'NA'
                            tem['rejected_on_fwd']=x['rejected_on'].strftime("%d/%m/%Y") if x['rejected_on'] else 'NA'
                            tem['forwardId']=x['forwardId']
                            tem['further_forward']=x['further_forward']
                            tem['further_forward_to']=str(list(m2.einsp_forward_marked.objects.filter(forwardBy_id=desigid[0]['designation_code'],marked_no_id=m['id'],parent_forward=tem['forwardId']).values_list('forwardTo__designation', flat=True)))
                            tem['further_forward_to']=(tem['further_forward_to'].strip(']')).strip('[')
                            forwardss.append(tem)
                    temp['forwardss'] = forwardss

                    listgrid.append(temp)
            else:
                details=m1.Inspection_details.objects.filter(inspection_no=inspection_no).values()
                name=details[0]['officer_name'] if details[0]['officer_name'] else 'NA'
                final_list=[]
                list_item=m1.Item_details.objects.filter(inspection_no=inspection_no).values().distinct()
                for i in list_item:
                    list_mark=m1.Marked_Officers_forward.objects.filter(marked_no__marked_to=desigid[0]['designation_code'],marked_no__status_flag=1,marked_no__item_no=i['item_no'])
                    if(list_mark.exists()):
                        temp={}
                        temp['item_db']=i['item_no']
                        temp['type']=i['type']
                        temp['item_no']=i['des_id']
                        temp['item_title']=i['item_title']
                        temp['observation']=i['observation']
                        temp['chk']='YES'
                        temp['marked']=m1.Marked_Officers_forward.objects.filter(marked_no__marked_to=desigid[0]['designation_code'],marked_no__status_flag=1,marked_no__item_no=i['item_no']).values('marked_to_forward__designation','created_on_forward','status_flag').distinct('marked_no_forward')
                    else:
                        temp={}
                        temp['chk']='NO'
                    final_list.append(temp) 

            context={
                'inspection_no':inspection_no,
                'details':details,
                'desigid':list(desigid),
                'final_list':final_list,
                'name':name,
                'designation':list(designation),
                "zone":list(list2),
                "division":list(list4),
                'rly_code':list(rly_code),
                'div_code':list(div_code),
                'listgrid':listgrid,
                }
            return JsonResponse(context,safe = False)
        
        else:
            insp_no=request.GET.get('inspection_id')
            typess=request.GET.get('type')
            statusss=request.GET.get('status')
            insp_details=list(m2.einspection_details.objects.filter(einspno=insp_no).values('einspno','instypeid_id','inspected_on','inspection_title','designation_id__designation','designation_id','created_by','inspection_note_no'))
            insp_details[0]['ins_date']=insp_details[0]['inspected_on'].strftime("%d/%m/%Y")
            names=m1.empmast.objects.filter(empno=insp_details[0]['created_by']).values('empname','empmname','emplname')
            insp_details[0]['empname']=''
            if names:
                insp_details[0]['empname']+=names[0]['empname']+' ' if names[0]['empname']!=None else ' '
                insp_details[0]['empname']+=names[0]['empmname']+' ' if names[0]['empmname']!=None else ' '
                insp_details[0]['empname']+=names[0]['emplname']+' ' if names[0]['emplname']!=None else ' '
            #for viewing reverted compliance
            if statusss == 'R':
                marked_nos = list(m2.einsp_marked.objects.filter(eitemid__einspno=insp_no, status_flag=4, revert__in=[1,2]).values())
                listgrid=[]
                count=0
                for m in marked_nos:
                    temp={}
                    count+=1
                    item_det=m2.einspection_item_detail.objects.filter(eitemid=m['eitemid_id']).values()
                    question=m2.questionare_master.objects.filter(qid=item_det[0]['qid_id']).values()
                    temp['item']=count
                    temp['type']='SH'
                    temp['item_no']=m['eitemid_id']
                    temp['marked_no']=m['id']
                    temp['observation']=str(question[0]['activity']) + '    ' + 'Observation: '+str(item_det[0]['value']) + '    '+'Remarks: ' + str(question[0]['report_act'])
                    temp['revert']=m['compliance']
                    temp['reverted_on']=m['reverted_on'].strftime("%d/%m/%Y") if m['reverted_on'] else 'NA'
                    listgrid.append(temp)
            #for viewing forwarded compliance
            elif statusss == 'F':
                einsp_forward_marked = list(m2.einsp_forward_marked.objects.filter(marked_no__eitemid__einspno=insp_no, status_flag=2, forwardTo_id=das_desig).values('marked_no_id','marked_no__eitemid','forwardBy__designation','compliance','reply_on','forwardId'))
                forward_marked = list(m2.einsp_forward_marked.objects.filter(marked_no__eitemid__einspno=insp_no, status_flag=2, forwardTo_id=das_desig).values_list('marked_no_id', flat=True))
                marked_nos = list(m2.einsp_marked.objects.filter(eitemid__einspno=insp_no, id__in=forward_marked).values())
                listgrid=[]
                count=0
                for m in einsp_forward_marked:
                    temp={}
                    count+=1
                    item_det=m2.einspection_item_detail.objects.filter(eitemid=m['marked_no__eitemid']).values()
                    question=m2.questionare_master.objects.filter(qid=item_det[0]['qid_id']).values()
                    temp['des_id']=count
                    temp['type']='SH'
                    temp['item_no']=m['marked_no__eitemid']
                    temp['marked_no']=m['forwardId']
                    temp['observation']='Question: '+str(question[0]['activity']) + '\n' + 'Answer: '+str(item_det[0]['value']) + '\n'+'Remarks: ' + str(question[0]['report_act'])
                    temp['forwarded_by']=m['forwardBy__designation']
                    temp['compliance_forward']=m['compliance']
                    temp['reply_on_forward']=m['reply_on'].strftime("%d/%m/%Y") if m['reply_on'] else 'NA'
                    listgrid.append(temp)
            
            desigdetails=list(models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user)).values('designation'))
            context={
            'idetails':insp_details,
            'itemdetails':listgrid,
            'desigdetails':desigdetails,
            }
            return JsonResponse(context,safe = False)



    insp_no=request.GET.get('inspection_id')
    status=request.GET.get('status')
    typei=request.GET.get('type')
    insp_details=list(m2.einspection_details.objects.filter(einspno=insp_no).values('einspno','instypeid_id','inspected_on','inspection_title','designation_id__designation','designation_id','created_by','inspection_note_no'))
    insp_details[0]['inspected_on']=insp_details[0]['inspected_on'].strftime("%d/%m/%Y")
    names=m1.empmast.objects.filter(empno=insp_details[0]['created_by']).values('empname','empmname','emplname')
    insp_details[0]['insp_name']=''
    if names:
        insp_details[0]['insp_name']+=names[0]['empname']+' ' if names[0]['empname']!=None else ' '
        insp_details[0]['insp_name']+=names[0]['empmname']+' ' if names[0]['empmname']!=None else ' '
        insp_details[0]['insp_name']+=names[0]['emplname']+' ' if names[0]['emplname']!=None else ' '
    
    

    listgrid=[]
    forwarded_reply=[]
    ff=None
    marked_no=-1
    if typei =='reply':
        if status == 'P':
            marked_nos = list(m2.einsp_marked.objects.exclude(revert=2).filter(marked_to_id=das_desig,eitemid__einspno=insp_no,status_flag__in=[0,1,2,3]).values())

        if status == 'A':
            marked_nos = list(m2.einsp_marked.objects.exclude(revert=2).filter(marked_to_id=das_desig,eitemid__einspno=insp_no,reject=1).values())
             
        if status == 'R':
            marked_no=request.GET.get('marked_no')
            marked_nos = list(m2.einsp_marked.objects.exclude(revert=2).filter(eitemid__einspno=insp_no, id=marked_no).values())
        
        if status == 'X':
            # marked_no=request.GET.get('marked_no')
            marked_nos = list(m2.einsp_marked.objects.exclude(revert=2, status_flag=4).filter(marked_to_id=das_desig,eitemid__einspno=insp_no,reject=1).values())

        if status == 'C':
            # marked_no=request.GET.get('marked_no')
            marked_nos = list(m2.einsp_marked.objects.exclude(revert=2).filter(marked_to_id=das_desig,eitemid__einspno=insp_no,status_flag=4).values())

    
    elif typei =='Forward':
        #for fetch forward replies of items forwarded by me
        if status == 'F':
            marked_no=request.GET.get('marked_no')
            marked_nos = list(m2.einsp_marked.objects.exclude(revert=2).filter(eitemid__einspno=insp_no, id=marked_no).values())
            forwarded_reply=list(m2.einsp_forward_marked.objects.filter(forwardBy_id=das_desig,marked_no_id=marked_no).values())
        #for pending replies of items forwarded to me
        elif status == 'P':
            for_marked_nos = list(m2.einsp_forward_marked.objects.filter(forwardTo_id=das_desig,marked_no__eitemid__einspno=insp_no,status_flag__in=[0,1,3]).values_list('marked_no_id', flat=True))
            marked_nos = list(m2.einsp_marked.objects.exclude(revert=2).filter(eitemid__einspno=insp_no, id__in=for_marked_nos).values().distinct('id'))
            forwarded_reply=list(m2.einsp_forward_marked.objects.filter(forwardTo_id=das_desig,marked_no__eitemid__einspno=insp_no,status_flag__in=[0,1,3]).values())
            ff=1
            # print("here",for_marked_nos,marked_nos,forwarded_reply)
        #for fetch forward replies of items further forwarded by me 
        if status == 'B':
            forwardId=request.GET.get('forwardId')
            marked_no = list(m2.einsp_forward_marked.objects.filter(forwardId=forwardId).values('marked_no_id'))[0]['marked_no_id']
            forwarded_reply=m2.einsp_forward_marked.objects.filter(forwardBy_id=das_desig,marked_no=marked_no,further_forward=1).values()
            marked_nos = list(m2.einsp_marked.objects.exclude(revert=2).filter(eitemid__einspno=insp_no, id=marked_no).values())
        #for fetch forward replies of multiple items to be forwarded together
        if status == 'M':
            marked_no=json.loads(request.GET.get('marked_no'))
            forwarded_reply=m2.einsp_forward_marked.objects.filter(forwardBy_id=das_desig,marked_no__in=marked_no,further_forward=None).values()
            marked_nos = list(m2.einsp_marked.objects.exclude(revert=2).filter(eitemid__einspno=insp_no, id__in=marked_no).values())


    count=0
    for m in marked_nos:
        temp={}
        count+=1
        item_det=m2.einspection_item_detail.objects.filter(eitemid=m['eitemid_id']).values()
        question=m2.questionare_master.objects.filter(qid=item_det[0]['qid_id']).values()
        temp['sr_no']=count
        temp['item_no']=m['eitemid_id']
        temp['marked_no']=m['id']
        temp['question']=question[0]['activity']
        temp['compliance']=m['compliance']
        temp['status_flag']=m['status_flag']
        temp['forwarded']=False
        if len(list(m2.einsp_forward_marked.objects.filter(forwardBy_id=das_desig,marked_no_id=m['id'],further_forward=ff).values_list('forwardTo__designation', flat=True))):
            temp['forwarded_to']=str(list(m2.einsp_forward_marked.objects.filter(forwardBy_id=das_desig,marked_no_id=m['id'],further_forward=ff).values_list('forwardTo__designation', flat=True)))
            temp['forwarded_to']=(temp['forwarded_to'].strip(']')).strip('[')
            temp['forwarded']=True
        temp['report_act']=question[0]['report_act']
        temp['value']=item_det[0]['value']
        temp['tgt_date']=m['target_date'].strftime("%d/%m/%y") if m['target_date'] else -1
        temp['compliance_recieved_on']=m['compliance_recieved_on'].strftime("%d/%m/%Y") if m['compliance_recieved_on'] else 'NA'
        forwardss=[]
        if len(forwarded_reply):
            for x in forwarded_reply:
                tem={}
                tem['forwardTo']=x['forwardTo_id']
                tem['forwardBy']=x['forwardBy_id']
                tem['designationBy']=x['designationBy']
                tem['designationTo']=x['designationTo']
                tem['forwardStatus']=x['status_flag']
                tem['forward_on']=x['created_date'].strftime("%d/%m/%Y") if x['created_date'] else -1
                tem['reply_on_forward']=x['reply_on'].strftime("%d/%m/%Y") if x['reply_on'] else -1
                tem['compliance_forward']=x['compliance'] if x['compliance'] else 'NA'
                tem['remarks_forward']=x['remarks'] if x['remarks'] else 'NA'
                tem['rejected_on_fwd']=x['rejected_on'].strftime("%d/%m/%Y") if x['rejected_on'] else 'NA'
                tem['forwardId']=x['forwardId']
                tem['further_forward']=x['further_forward']
                print(forwarded_reply)
                tem['further_forward_to']=str(list(m2.einsp_forward_marked.objects.filter(forwardBy_id=das_desig,marked_no_id=m['id'],parent_forward=tem['forwardId']).values_list('forwardTo__designation', flat=True)))
                tem['further_forward_to']=(tem['further_forward_to'].strip(']')).strip('[')
                forwardss.append(tem)
        temp['forwardss'] = forwardss
        temp['reject']=m['reject']
        if m['reject']==1:
            rejected_remarks=list(m2.einsp_officers_remark.objects.filter(marked_no=temp['marked_no']).values())
            temp['rejected_rem']=rejected_remarks[0]['remark']
            temp['rejected_on']=rejected_remarks[0]['rejected_on'].strftime("%d/%m/%y") if rejected_remarks[0]['rejected_on'] else 'NA'
        listgrid.append(temp)
    
    context={
        'insp_details':insp_details,
        'listgrid':listgrid,
        'designation':designation,
        'zone':zone,
        'division':division,
        'rly_code':rly_code,
        'div_code':div_code,
        'marked_no':marked_no,
        }
   
    
    if typei =='reply' and status == 'P' :
        return render(request,'compliance_phase2.html',context)
    elif typei =='reply' and status == 'A' :
        return render(request,'compliance_phase2.html',context)
    elif typei =='reply' and status == 'X':
        return render(request,'rejected_reply_phase2.html',context)
    elif typei =='reply' and status == 'C':
        return render(request,'complied_phase2.html',context)
    elif typei =='reply' and status == 'R':
        return render(request,'revert_compliance_phase2.html',context)
    elif typei =='Forward' and status == 'F':
        context['furtherFwd']=0
        return render(request,'forward_phase2.html',context)
    elif typei =='Forward' and status == 'P':
        return render(request,'forward_modal2_phase2.html',context)
    elif typei =='Forward' and status == 'B':
        context['furtherFwd']=1
        return render(request,'forward_phase2.html',context)
    elif typei =='Forward' and status == 'M':
        context['furtherFwd']=0
        return render(request,'forward_phase2.html',context)


def forwarded_already(request):
    # try:
        if request.method == "GET" or request.is_ajax():
            cuser=request.user
            if request.user.user_role == 'guest':
                cuser=request.user.guest_email
                request.user.email=request.user.guest_email
            inspection_no=request.GET.get('inspection_id')
            listdesig1=m1.Inspection_details.objects.filter(inspection_no=inspection_no).values('inspection_officer_id')
            desigidss=models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code__in=listdesig1).values()
            # print(listdesig)
            desigid=[]
            for i in desigidss:
                temp={}
                temp['designation']=i['designation'] if i['designation']!=None else 'NA'
                desigid.append(temp)

            listdesig=list(models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user)).values())
            details=list(m1.Inspection_details.objects.filter(inspection_no=inspection_no).values())
            if details:
                inspection_date=details[0]['inspected_on'].strftime("%d/%m/%y") if details[0]['inspected_on']!=None else 'NA'
                details[0]['final_submit_on']=details[0]['final_submit_on'].strftime("%d/%m/%Y")
            else:
                inspection_date='NA'

            empfname=m1.empmast.objects.filter(empno=desigidss[0]['empno_id'])[0].empname
            empmname=m1.empmast.objects.filter(empno=desigidss[0]['empno_id'])[0].empmname
            emplname=m1.empmast.objects.filter(empno=desigidss[0]['empno_id'])[0].emplname
            rly_code=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].rly_unit.location_code
            rly_unit_code=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].rly_unit.rly_unit_code
            parent_loc=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].rly_unit.parent_location_code
            parent_loc_id=models.Level_Desig.objects.exclude(delete_flag=True).exclude(official_email_ID = None).filter(Q(official_email_ID=cuser) | Q(official_email_ID=request.user))[0].rly_unit.parent_rly_unit_code
            div_code=rly_code
            if parent_loc!='RB':
                rly_code=parent_loc
                rly_unit_code=parent_loc_id
            if(empmname==None and emplname==None):
                name=empfname
            elif(empmname==None):
                name=empfname + " " + emplname
            elif(emplname==None):
                name=empfname + " " + empmname   
            else:
                name=empfname + " " + empmname + " " + emplname

            final_list=[]
            list_item=m1.Item_details.objects.filter(inspection_no=inspection_no).values().distinct()
            for i in list_item:
                list_mark=m1.Marked_Officers_forward.objects.filter(marked_no__marked_to=listdesig[0]['designation_code'],marked_no__status_flag=1,marked_no__item_no=i['item_no'])
                if(list_mark.exists()):
                    temp={}
                    temp['item_db']=i['item_no']
                    temp['type']=i['type']
                    temp['item_no']=i['des_id']
                    temp['item_title']=i['item_title']
                    temp['observation']=i['observation']
                    temp['chk']='YES'
                    temp['marked']=list(m1.Marked_Officers_forward.objects.filter(marked_no__marked_to=listdesig[0]['designation_code'],marked_no__status_flag=1,marked_no__item_no=i['item_no']).values('marked_to_forward__designation','created_on_forward','status_flag').distinct('marked_no_forward'))
                else:
                    temp={}
                    temp['chk']='NO'
                final_list.append(temp)
            # print(final_list)
            
            # list1=models.railwayLocationMaster.objects.filter(location_type_desc__in=['RAILWAY BOARD', 'PRODUCTION UNIT', 'HEAD QUATER', 'PSU', 'INSTITUTE']).values('location_code').distinct().order_by('location_code')
            # list2=[]
            # for i in list1:
            #     list2.append(i['location_code'])
            # list3=models.railwayLocationMaster.objects.filter(location_type_desc__in=['DIVISION','WORKSHOP', 'STORE', 'CONSTRUCTION', 'OFFICE'],parent_location_code=rly_code).distinct().values('location_code').order_by('location_code')
            # list4=[]
            # for i in list3:
            #     list4.append(i['location_code'])  
            # list5=models.departMast.objects.all().values('department_name').distinct().order_by('department_name')
            # list6=[]
            # for i in list5:
            #     list6.append(i['department_name']) 
            # pclevel=list(models.Level_Desig.objects.exclude(delete_flag=True).filter(designation_code=desigid[0]['designation_code']).values().order_by())
            # designation=list(models.Level_Desig.objects.exclude(delete_flag=True).exclude(Q(empno_id=None),designation_code=desigid[0]['designation_code']).filter(pc7_levelmax__lte=pclevel[0]['pc7_levelmin'],rly_unit=rly_unit_code).distinct().values('designation').order_by('-pc7_levelmin'))
 
            context={
                'inspection_no':inspection_no,
                'details':details,
                'desigid':desigid,
                'final_list':final_list,
                'name':name,
                # 'designation':designation,
                # "zone":list2,
                # "division":list4,
                # 'rly_code':rly_code,
                # 'div_code':div_code,
                'inspection_date':inspection_date
                }
            # print(context)
            return JsonResponse(context,safe = False)
        return JsonResponse({"success":False}, status = 400)

    # except Exception as e: 
    #     try:
    #         m1.error_Table.objects.create(fun_name="forwarded_already",user_id=request.user,err_details=str(e))
    #     except:
    #         print("Internal Error!!!")
    #     return render(request, "errorspage.html", {})




